; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003e0__init_type = type <{ [23 x i8] }>
%seg_400400__plt_type = type <{ [32 x i8] }>
%seg_400420__text_type = type <{ [2258 x i8] }>
%seg_400cf4__fini_type = type <{ [9 x i8] }>
%seg_400d00__rodata_type = type <{ [264 x i8], [9 x i8] }>
%seg_400e14__eh_frame_hdr_type = type <{ [76 x i8] }>
%seg_400e60__eh_frame_type = type <{ [312 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_602020__data_type = type <{ [16 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%__bss_start_type = type <{ [4 x i8] }>
%sum_type = type <{ [4 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003e0__init = internal constant %seg_4003e0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\0D\1C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400400__plt = internal constant %seg_400400__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\02\1C \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400420__text = internal constant %seg_400420__text_type <{ [2258 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\F0\0C@\00H\C7\C1\80\0C@\00H\C7\C7\A0\0B@\00\FF\15\A6\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80!`\00H=0!`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0!`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0!`\00UH\81\EE0!`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0!`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=Y\1C \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05G\1C \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\8B}\FC\03<%4!`\00\89<%4!`\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC0H\89}\F8\C7E\F4\00\00\00\00H\8BE\F8H\89\C1H\83\C1\04H\89M\F8\8B\10\89\D0H\89\C1H\83\E9\1FH\89E\E8H\89M\E0\0F\87/\06\00\00H\8BE\E8H\8B\0C\C5\08\0D@\00\FF\E1\C7E\F4\00\00\00\00H\83\C40]\C3H\8BE\D8\FF\E0\C7E\F4\01\00\00\00\8B}\F4\E8u\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\C8\FF\FF\FF\C7E\F4\02\00\00\00\8B}\F4\E8C\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\96\FF\FF\FF\C7E\F4\03\00\00\00\8B}\F4\E8\11\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9d\FF\FF\FF\C7E\F4\04\00\00\00\8B}\F4\E8\DF\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E92\FF\FF\FF\C7E\F4\05\00\00\00\8B}\F4\E8\AD\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\00\FF\FF\FF\C7E\F4\06\00\00\00\8B}\F4\E8{\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\CE\FE\FF\FF\C7E\F4\07\00\00\00\8B}\F4\E8I\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\9C\FE\FF\FF\C7E\F4\08\00\00\00\8B}\F4\E8\17\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9j\FE\FF\FF\C7E\F4\09\00\00\00\8B}\F4\E8\E5\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E98\FE\FF\FF\C7E\F4\0A\00\00\00\8B}\F4\E8\B3\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\06\FE\FF\FF\C7E\F4\0B\00\00\00\8B}\F4\E8\81\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\D4\FD\FF\FF\C7E\F4\0C\00\00\00\8B}\F4\E8O\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A2\FD\FF\FF\C7E\F4\0D\00\00\00\8B}\F4\E8\1D\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9p\FD\FF\FF\C7E\F4\0E\00\00\00\8B}\F4\E8\EB\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9>\FD\FF\FF\C7E\F4\0F\00\00\00\8B}\F4\E8\B9\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\0C\FD\FF\FF\C7E\F4\10\00\00\00\8B}\F4\E8\87\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\DA\FC\FF\FF\C7E\F4\11\00\00\00\8B}\F4\E8U\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A8\FC\FF\FF\C7E\F4\12\00\00\00\8B}\F4\E8#\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9v\FC\FF\FF\C7E\F4\13\00\00\00\8B}\F4\E8\F1\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9D\FC\FF\FF\C7E\F4\14\00\00\00\8B}\F4\E8\BF\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\12\FC\FF\FF\C7E\F4\15\00\00\00\8B}\F4\E8\8D\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E0\FB\FF\FF\C7E\F4\16\00\00\00\8B}\F4\E8[\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\AE\FB\FF\FF\C7E\F4\17\00\00\00\8B}\F4\E8)\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9|\FB\FF\FF\C7E\F4\18\00\00\00\8B}\F4\E8\F7\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9J\FB\FF\FF\C7E\F4\19\00\00\00\8B}\F4\E8\C5\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\18\FB\FF\FF\C7E\F4\1A\00\00\00\8B}\F4\E8\93\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E6\FA\FF\FF\C7E\F4\1B\00\00\00\8B}\F4\E8a\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\B4\FA\FF\FF\C7E\F4\1C\00\00\00\8B}\F4\E8/\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\82\FA\FF\FF\C7E\F4\1D\00\00\00\8B}\F4\E8\FD\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9P\FA\FF\FF\C7E\F4\1E\00\00\00\8B}\F4\E8\CB\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\1E\FA\FF\FF\C7E\F4\1F\00\00\00\8B}\F4\E8\99\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\EC\F9\FF\FF\E9\A4\F9\FF\FF\90UH\89\E5H\81\EC  \00\00\C7E\FC\00\00\00\00\C7E\F8\00\08\00\00\C7\85\EC\DF\FF\FF\00\00\00\00\81\BD\EC\DF\FF\FF\FF\07\00\00\0F\8DA\00\00\00\B8\1F\00\00\00\8B\8D\EC\DF\FF\FF\89\85\E4\DF\FF\FF\89\C8\99\8B\8D\E4\DF\FF\FF\F7\F9\83\C2\01Hc\B5\EC\DF\FF\FF\89\94\B5\F0\DF\FF\FF\8B\85\EC\DF\FF\FF\83\C0\01\89\85\EC\DF\FF\FF\E9\AF\FF\FF\FF\C7E\EC\00\00\00\00\C7\85\E8\DF\FF\FF\00\00\00\00\81\BD\E8\DF\FF\FF\A0\86\01\00\0F\8D \00\00\00H\8D\BD\F0\DF\FF\FF\E8\EF\F8\FF\FF\8B\85\E8\DF\FF\FF\83\C0\01\89\85\E8\DF\FF\FF\E9\D0\FF\FF\FFH\BF\08\0E@\00\00\00\00\00\8B4%4!`\00\B0\00\E8\A3\F7\FF\FF1\F6\89\85\E0\DF\FF\FF\89\F0H\81\C4  \00\00]\C3AWAVI\89\D7AUATL\8D%^\11 \00UH\8D-^\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8/\F7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_400cf4__fini = internal constant %seg_400cf4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_400d00__rodata = internal constant %seg_400d00__rodata_type <{ [264 x i8] c"\01\00\02\00\00\00\00\00\80\05@\00\00\00\00\00\93\05@\00\00\00\00\00\C5\05@\00\00\00\00\00\F7\05@\00\00\00\00\00)\06@\00\00\00\00\00[\06@\00\00\00\00\00\8D\06@\00\00\00\00\00\BF\06@\00\00\00\00\00\F1\06@\00\00\00\00\00#\07@\00\00\00\00\00U\07@\00\00\00\00\00\87\07@\00\00\00\00\00\B9\07@\00\00\00\00\00\EB\07@\00\00\00\00\00\1D\08@\00\00\00\00\00O\08@\00\00\00\00\00\81\08@\00\00\00\00\00\B3\08@\00\00\00\00\00\E5\08@\00\00\00\00\00\17\09@\00\00\00\00\00I\09@\00\00\00\00\00{\09@\00\00\00\00\00\AD\09@\00\00\00\00\00\DF\09@\00\00\00\00\00\11\0A@\00\00\00\00\00C\0A@\00\00\00\00\00u\0A@\00\00\00\00\00\A7\0A@\00\00\00\00\00\D9\0A@\00\00\00\00\00\0B\0B@\00\00\00\00\00=\0B@\00\00\00\00\00o\0B@\00\00\00\00\00", [9 x i8] c"Sum: %u\0A\00" }>
@seg_400e14__eh_frame_hdr = internal constant %seg_400e14__eh_frame_hdr_type <{ [76 x i8] c"\01\1B\03;H\00\00\00\08\00\00\00\EC\F5\FF\FF\A4\00\00\00\0C\F6\FF\FFd\00\00\00<\F6\FF\FF\90\00\00\00\FC\F6\FF\FF\CC\00\00\00\1C\F7\FF\FF\E8\00\00\00\8C\FD\FF\FF\04\01\00\00l\FE\FF\FF$\01\00\00\DC\FE\FF\FFl\01\00\00" }>
@seg_400e60__eh_frame = internal constant %seg_400e60__eh_frame_type <{ [312 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\A0\F5\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\A4\F5\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00@\F5\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00(\F6\FF\FF\1A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00,\F6\FF\FFo\06\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\90\00\00\00\80\FC\FF\FF\E0\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\B0\00\00\00@\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\F8\00\00\00h\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400500_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004d0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_602020__data = internal global %seg_602020__data_type <{ [16 x i8] zeroinitializer, i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 345), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 364), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 414), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 464), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 514), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 564), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 614), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 664), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 714), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 764), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 814), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 864), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 914), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 964), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1014), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1064), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1114), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1164), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1214), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1264), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1314), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1364), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1414), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1464), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1514), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1564), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1614), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1664), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1714), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1764), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1814), i64 add (i64 ptrtoint (%seg_400420__text_type* @seg_400420__text to i64), i64 1864) }>
@__bss_start = global %__bss_start_type zeroinitializer
@sum = global %sum_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400500_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400cf0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400c80___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @eval_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @execute_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4006bf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4006bf

block_40087a:                                     ; preds = %block_4006bf
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 16, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %24, %struct.Memory* %143)
  ret %struct.Memory* %25

block_4005f0:                                     ; preds = %block_4006bf
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 3, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4005f7(%struct.State* %0, i64 %31, %struct.Memory* %143)
  ret %struct.Memory* %32

block_400a6e:                                     ; preds = %block_4006bf
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 26, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_400a75(%struct.State* %0, i64 %38, %struct.Memory* %143)
  ret %struct.Memory* %39

block_4006ea:                                     ; preds = %block_4006bf
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 8, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %45, %struct.Memory* %143)
  ret %struct.Memory* %46

block_400b68:                                     ; preds = %block_4006bf
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 31, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %52, %struct.Memory* %143)
  ret %struct.Memory* %53

block_4007e4:                                     ; preds = %block_4006bf
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 13, i32* %58
  %59 = load i64, i64* %PC
  %60 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %59, %struct.Memory* %143)
  ret %struct.Memory* %60

block_4008de:                                     ; preds = %block_4006bf
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 12
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to i32*
  store i32 18, i32* %65
  %66 = load i64, i64* %PC
  %67 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %66, %struct.Memory* %143)
  ret %struct.Memory* %67

block_4009d8:                                     ; preds = %block_4006bf
  %68 = load i64, i64* %RBP
  %69 = sub i64 %68, 12
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %69 to i32*
  store i32 23, i32* %72
  %73 = load i64, i64* %PC
  %74 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %73, %struct.Memory* %143)
  ret %struct.Memory* %74

block_400654:                                     ; preds = %block_4006bf
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 12
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  store i32 5, i32* %79
  %80 = load i64, i64* %PC
  %81 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %80, %struct.Memory* %143)
  ret %struct.Memory* %81

block_400579:                                     ; preds = %block_4006bf
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 12
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  store i32 0, i32* %86
  %87 = load i64, i64* %PC
  %88 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %87, %struct.Memory* %143)
  ret %struct.Memory* %88

block_400ad2:                                     ; preds = %block_4006bf
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 12
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i32*
  store i32 28, i32* %93
  %94 = load i64, i64* %PC
  %95 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %94, %struct.Memory* %143)
  ret %struct.Memory* %95

block_40074e:                                     ; preds = %block_4006bf
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 12
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 10, i32* %100
  %101 = load i64, i64* %PC
  %102 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %101, %struct.Memory* %143)
  ret %struct.Memory* %102

block_400848:                                     ; preds = %block_4006bf
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 12
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 15, i32* %107
  %108 = load i64, i64* %PC
  %109 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %108, %struct.Memory* %143)
  ret %struct.Memory* %109

block_400974:                                     ; preds = %block_4006bf
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 12
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 7
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i32*
  store i32 21, i32* %114
  %115 = load i64, i64* %PC
  %116 = tail call %struct.Memory* @sub_40097b(%struct.State* %0, i64 %115, %struct.Memory* %143)
  ret %struct.Memory* %116

block_400942:                                     ; preds = %block_4006bf
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 20, i32* %121
  %122 = load i64, i64* %PC
  %123 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %122, %struct.Memory* %143)
  ret %struct.Memory* %123

block_4006bf:                                     ; preds = %block_4006b8, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %143, %block_4006b8 ]
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %131 = load i64, i64* %PC
  %132 = sub i64 %131, 434
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %134, i64* %140
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %132, i64* %141, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %142, %struct.Memory* %MEMORY.0)
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 8
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %153 = load i64, i64* %RCX
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = add i64 4, %153
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = icmp ult i64 %156, %153
  %158 = icmp ult i64 %156, 4
  %159 = or i1 %157, %158
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %161, align 1, !tbaa !2432
  %162 = trunc i64 %156 to i32
  %163 = and i32 %162, 255
  %164 = call i32 @llvm.ctpop.i32(i32 %163) #16
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %167, i8* %168, align 1, !tbaa !2446
  %169 = xor i64 4, %153
  %170 = xor i64 %169, %156
  %171 = lshr i64 %170, 4
  %172 = trunc i64 %171 to i8
  %173 = and i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %173, i8* %174, align 1, !tbaa !2447
  %175 = icmp eq i64 %156, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = lshr i64 %156, 63
  %179 = trunc i64 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = lshr i64 %153, 63
  %182 = xor i64 %178, %181
  %183 = add nuw nsw i64 %182, %178
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %185, i8* %186, align 1, !tbaa !2450
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 8
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RAX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = mul i64 %199, 8
  %201 = add i64 %200, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 8
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %RAX
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %207 to i64*
  store i64 %208, i64* %211
  %212 = load i64, i64* %PC
  %213 = sub i64 %212, 351
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 40
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = load i64, i64* %RAX
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 2
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %226, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  switch i64 %227, label %345 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196724, label %block_400974
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_4005be:                                     ; preds = %block_4006bf
  %228 = load i64, i64* %RBP
  %229 = sub i64 %228, 12
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 7
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %229 to i32*
  store i32 2, i32* %232
  %233 = load i64, i64* %PC
  %234 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %233, %struct.Memory* %143)
  ret %struct.Memory* %234

block_400a3c:                                     ; preds = %block_4006bf
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 12
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 7
  store i64 %238, i64* %PC
  %239 = inttoptr i64 %236 to i32*
  store i32 25, i32* %239
  %240 = load i64, i64* %PC
  %241 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %240, %struct.Memory* %143)
  ret %struct.Memory* %241

block_4006b8:                                     ; preds = %block_4006bf
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 12
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 7
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %243 to i32*
  store i32 7, i32* %246
  br label %block_4006bf

block_400b36:                                     ; preds = %block_4006bf
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 12
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 7
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i32*
  store i32 30, i32* %251
  %252 = load i64, i64* %PC
  %253 = tail call %struct.Memory* @sub_400b3d(%struct.State* %0, i64 %252, %struct.Memory* %143)
  ret %struct.Memory* %253

block_4007b2:                                     ; preds = %block_4006bf
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 12
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 7
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i32*
  store i32 12, i32* %258
  %259 = load i64, i64* %PC
  %260 = tail call %struct.Memory* @sub_4007b9(%struct.State* %0, i64 %259, %struct.Memory* %143)
  ret %struct.Memory* %260

block_4008ac:                                     ; preds = %block_4006bf
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 12
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 7
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i32*
  store i32 17, i32* %265
  %266 = load i64, i64* %PC
  %267 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %266, %struct.Memory* %143)
  ret %struct.Memory* %267

block_4009a6:                                     ; preds = %block_4006bf
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 12
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 7
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i32*
  store i32 22, i32* %272
  %273 = load i64, i64* %PC
  %274 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %273, %struct.Memory* %143)
  ret %struct.Memory* %274

block_400622:                                     ; preds = %block_4006bf
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 12
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 7
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i32*
  store i32 4, i32* %279
  %280 = load i64, i64* %PC
  %281 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %280, %struct.Memory* %143)
  ret %struct.Memory* %281

block_400aa0:                                     ; preds = %block_4006bf
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 12
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 7
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i32*
  store i32 27, i32* %286
  %287 = load i64, i64* %PC
  %288 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %287, %struct.Memory* %143)
  ret %struct.Memory* %288

block_40071c:                                     ; preds = %block_4006bf
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 12
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 7
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  store i32 9, i32* %293
  %294 = load i64, i64* %PC
  %295 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %294, %struct.Memory* %143)
  ret %struct.Memory* %295

block_400816:                                     ; preds = %block_4006bf
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 12
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  store i32 14, i32* %300
  %301 = load i64, i64* %PC
  %302 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %301, %struct.Memory* %143)
  ret %struct.Memory* %302

block_400910:                                     ; preds = %block_4006bf
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 12
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 7
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  store i32 19, i32* %307
  %308 = load i64, i64* %PC
  %309 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %308, %struct.Memory* %143)
  ret %struct.Memory* %309

block_40058c:                                     ; preds = %block_4006bf
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 12
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 7
  store i64 %313, i64* %PC
  %314 = inttoptr i64 %311 to i32*
  store i32 1, i32* %314
  %315 = load i64, i64* %PC
  %316 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %315, %struct.Memory* %143)
  ret %struct.Memory* %316

block_400a0a:                                     ; preds = %block_4006bf
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 12
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 7
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  store i32 24, i32* %321
  %322 = load i64, i64* %PC
  %323 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %322, %struct.Memory* %143)
  ret %struct.Memory* %323

block_400686:                                     ; preds = %block_4006bf
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 12
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %325 to i32*
  store i32 6, i32* %328
  %329 = load i64, i64* %PC
  %330 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %329, %struct.Memory* %143)
  ret %struct.Memory* %330

block_400b04:                                     ; preds = %block_4006bf
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 12
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i32*
  store i32 29, i32* %335
  %336 = load i64, i64* %PC
  %337 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %336, %struct.Memory* %143)
  ret %struct.Memory* %337

block_400780:                                     ; preds = %block_4006bf
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 12
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 7
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  store i32 11, i32* %342
  %343 = load i64, i64* %PC
  %344 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %343, %struct.Memory* %143)
  ret %struct.Memory* %344

; <label>:345:                                    ; preds = %block_4006bf
  %346 = load i64, i64* %PC
  %347 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %346, %struct.Memory* %143)
  ret %struct.Memory* %347
}

; Function Attrs: noinline
define %struct.Memory* @sub_40097b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_40097b

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_4005f7(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007e4:                                     ; preds = %block_400586
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 13, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %31, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %32

block_4008de:                                     ; preds = %block_400586
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 18, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %38, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %39

block_4009d8:                                     ; preds = %block_400586
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 23, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %46

block_400ad2:                                     ; preds = %block_400586
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 28, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %53

block_4006b8:                                     ; preds = %block_400586
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 7, i32* %58
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 12
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 434
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %77, %struct.Memory* %MEMORY.1)
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = load i64, i64* %RAX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  store i64 %85, i64* %RCX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = add i64 4, %88
  store i64 %91, i64* %RCX, align 8, !tbaa !2428
  %92 = icmp ult i64 %91, %88
  %93 = icmp ult i64 %91, 4
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = trunc i64 %91 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2446
  %104 = xor i64 4, %88
  %105 = xor i64 %104, %91
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i64 %91, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %91, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i64 %88, 63
  %117 = xor i64 %113, %116
  %118 = add nuw nsw i64 %117, %113
  %119 = icmp eq i64 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %RCX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  %132 = load i32, i32* %131
  %133 = sext i32 %132 to i64
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RAX
  %135 = mul i64 %134, 8
  %136 = add i64 %135, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 8
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 40
  %143 = load i64, i64* %RAX
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %146
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 351
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %151, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 12, i32* %156
  %157 = load i64, i64* %PC
  %158 = tail call %struct.Memory* @sub_4007b9(%struct.State* %0, i64 %157, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %158

block_4008ac:                                     ; preds = %block_400586
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 17, i32* %163
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %164, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %165

block_4009a6:                                     ; preds = %block_400586
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 12
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  store i32 22, i32* %170
  %171 = load i64, i64* %PC
  %172 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %172

block_400aa0:                                     ; preds = %block_400586
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 27, i32* %177
  %178 = load i64, i64* %PC
  %179 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %178, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %179

block_40058c:                                     ; preds = %block_400586
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 12
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 7
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  store i32 1, i32* %184
  %185 = load i64, i64* %PC
  %186 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %185, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %186

block_400686:                                     ; preds = %block_400586
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 6, i32* %191
  %192 = load i64, i64* %PC
  %193 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %192, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %193

block_40097b:                                     ; preds = %block_400974, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400974 ]
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 12
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  %199 = load i32, i32* %198
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = load i64, i64* %PC
  %202 = sub i64 %201, 1134
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 5
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %204, i64* %210
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %202, i64* %211, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %212, %struct.Memory* %MEMORY.0)
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 8
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = load i64, i64* %RAX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  store i64 %220, i64* %RCX, align 8, !tbaa !2428
  %223 = load i64, i64* %RCX
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC
  %226 = add i64 4, %223
  store i64 %226, i64* %RCX, align 8, !tbaa !2428
  %227 = icmp ult i64 %226, %223
  %228 = icmp ult i64 %226, 4
  %229 = or i1 %227, %228
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %230, i8* %231, align 1, !tbaa !2432
  %232 = trunc i64 %226 to i32
  %233 = and i32 %232, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2446
  %239 = xor i64 4, %223
  %240 = xor i64 %239, %226
  %241 = lshr i64 %240, 4
  %242 = trunc i64 %241 to i8
  %243 = and i8 %242, 1
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %243, i8* %244, align 1, !tbaa !2447
  %245 = icmp eq i64 %226, 0
  %246 = zext i1 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %246, i8* %247, align 1, !tbaa !2448
  %248 = lshr i64 %226, 63
  %249 = trunc i64 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i64 %223, 63
  %252 = xor i64 %248, %251
  %253 = add nuw nsw i64 %252, %248
  %254 = icmp eq i64 %253, 2
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %256, align 1, !tbaa !2450
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 8
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %258 to i64*
  store i64 %259, i64* %262
  %263 = load i64, i64* %RAX
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 3
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i32*
  %267 = load i32, i32* %266
  %268 = sext i32 %267 to i64
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = load i64, i64* %RAX
  %270 = mul i64 %269, 8
  %271 = add i64 %270, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 8
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 40
  %278 = load i64, i64* %RAX
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %277 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 1051
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_400586

block_40087a:                                     ; preds = %block_400586
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 12
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 7
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i32*
  store i32 16, i32* %291
  %292 = load i64, i64* %PC
  %293 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %292, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %293

block_400974:                                     ; preds = %block_400586
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 12
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 7
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i32*
  store i32 21, i32* %298
  br label %block_40097b

block_400a6e:                                     ; preds = %block_400586
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 12
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 7
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i32*
  store i32 26, i32* %303
  %304 = load i64, i64* %PC
  %305 = tail call %struct.Memory* @sub_400a75(%struct.State* %0, i64 %304, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %305

block_400780:                                     ; preds = %block_400586
  %306 = load i64, i64* %RBP
  %307 = sub i64 %306, 12
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 7
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i32*
  store i32 11, i32* %310
  %311 = load i64, i64* %PC
  %312 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %311, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %312

block_400b68:                                     ; preds = %block_400586
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 31, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %319

block_400654:                                     ; preds = %block_400586
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 5, i32* %324
  %325 = load i64, i64* %PC
  %326 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %325, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %326

block_40074e:                                     ; preds = %block_400586
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 12
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 7
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i32*
  store i32 10, i32* %331
  %332 = load i64, i64* %PC
  %333 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %332, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %333

block_400848:                                     ; preds = %block_400586
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 12
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 7
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  store i32 15, i32* %338
  %339 = load i64, i64* %PC
  %340 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %339, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %340

block_4005be:                                     ; preds = %block_400586
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 12
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 7
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i32*
  store i32 2, i32* %345
  %346 = load i64, i64* %PC
  %347 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %347

block_400942:                                     ; preds = %block_400586
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 12
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  store i32 20, i32* %352
  %353 = load i64, i64* %PC
  %354 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %353, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %354

block_4006ea:                                     ; preds = %block_400586
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 12
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 7
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i32*
  store i32 8, i32* %359
  %360 = load i64, i64* %PC
  %361 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %360, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %361

block_400579:                                     ; preds = %block_400586
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 12
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 7
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  store i32 0, i32* %366
  %367 = load i64, i64* %PC
  %368 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %367, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %368

block_400a3c:                                     ; preds = %block_400586
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 25, i32* %373
  %374 = load i64, i64* %PC
  %375 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %374, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %375

block_400b36:                                     ; preds = %block_400586
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 12
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 7
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  store i32 30, i32* %380
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 12
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %388 = load i64, i64* %PC
  %389 = sub i64 %388, 1584
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 5
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  store i64 %393, i64* %PC
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %395 = load i64, i64* %394, align 8, !tbaa !2428
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %391, i64* %397
  store i64 %396, i64* %394, align 8, !tbaa !2428
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %389, i64* %398, align 8, !tbaa !2428
  %399 = load i64, i64* %PC
  %400 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %399, %struct.Memory* %MEMORY.1)
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 8
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RAX
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 3
  store i64 %409, i64* %PC
  store i64 %407, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RCX
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = add i64 4, %410
  store i64 %413, i64* %RCX, align 8, !tbaa !2428
  %414 = icmp ult i64 %413, %410
  %415 = icmp ult i64 %413, 4
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %417, i8* %418, align 1, !tbaa !2432
  %419 = trunc i64 %413 to i32
  %420 = and i32 %419, 255
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %424, i8* %425, align 1, !tbaa !2446
  %426 = xor i64 4, %410
  %427 = xor i64 %426, %413
  %428 = lshr i64 %427, 4
  %429 = trunc i64 %428 to i8
  %430 = and i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %430, i8* %431, align 1, !tbaa !2447
  %432 = icmp eq i64 %413, 0
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %433, i8* %434, align 1, !tbaa !2448
  %435 = lshr i64 %413, 63
  %436 = trunc i64 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %436, i8* %437, align 1, !tbaa !2449
  %438 = lshr i64 %410, 63
  %439 = xor i64 %435, %438
  %440 = add nuw nsw i64 %439, %435
  %441 = icmp eq i64 %440, 2
  %442 = zext i1 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %442, i8* %443, align 1, !tbaa !2450
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 8
  %446 = load i64, i64* %RCX
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 4
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %445 to i64*
  store i64 %446, i64* %449
  %450 = load i64, i64* %RAX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i32*
  %454 = load i32, i32* %453
  %455 = sext i32 %454 to i64
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = load i64, i64* %RAX
  %457 = mul i64 %456, 8
  %458 = add i64 %457, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 8
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 40
  %465 = load i64, i64* %RAX
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %464 to i64*
  store i64 %465, i64* %468
  %469 = load i64, i64* %PC
  %470 = sub i64 %469, 1501
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  store i64 %472, i64* %PC
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %470, i64* %473, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 12
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 7
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i32*
  store i32 4, i32* %478
  %479 = load i64, i64* %PC
  %480 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %479, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %480

block_40071c:                                     ; preds = %block_400586
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 7
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  store i32 9, i32* %485
  %486 = load i64, i64* %PC
  %487 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %486, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %487

block_400586:                                     ; preds = %block_400b36, %block_40097b, %block_4006b8
  %MEMORY.1 = phi %struct.Memory* [ %213, %block_40097b ], [ %78, %block_4006b8 ], [ %400, %block_400b36 ]
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 40
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 2
  store i64 %496, i64* %PC
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  switch i64 %498, label %527 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4196224, label %block_400780
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4195774, label %block_4005be
    i64 4196674, label %block_400942
  ]

block_400816:                                     ; preds = %block_400586
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 12
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  store i32 14, i32* %503
  %504 = load i64, i64* %PC
  %505 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %505

block_400910:                                     ; preds = %block_400586
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 19, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %512

block_400a0a:                                     ; preds = %block_400586
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 24, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %519

block_400b04:                                     ; preds = %block_400586
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 29, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %526

; <label>:527:                                    ; preds = %block_400586
  %528 = load i64, i64* %PC
  %529 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %528, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %529
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007b9(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4007b9

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_4005f7(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007e4:                                     ; preds = %block_400586
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 13, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %31, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %32

block_4008de:                                     ; preds = %block_400586
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 18, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %38, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %39

block_4009d8:                                     ; preds = %block_400586
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 23, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %46

block_400ad2:                                     ; preds = %block_400586
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 28, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %53

block_4006b8:                                     ; preds = %block_400586
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 7, i32* %58
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 12
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 434
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %77, %struct.Memory* %MEMORY.1)
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = load i64, i64* %RAX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  store i64 %85, i64* %RCX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = add i64 4, %88
  store i64 %91, i64* %RCX, align 8, !tbaa !2428
  %92 = icmp ult i64 %91, %88
  %93 = icmp ult i64 %91, 4
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = trunc i64 %91 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2446
  %104 = xor i64 4, %88
  %105 = xor i64 %104, %91
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i64 %91, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %91, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i64 %88, 63
  %117 = xor i64 %113, %116
  %118 = add nuw nsw i64 %117, %113
  %119 = icmp eq i64 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %RCX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  %132 = load i32, i32* %131
  %133 = sext i32 %132 to i64
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RAX
  %135 = mul i64 %134, 8
  %136 = add i64 %135, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 8
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 40
  %143 = load i64, i64* %RAX
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %146
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 351
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %151, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 12, i32* %156
  br label %block_4007b9

block_4008ac:                                     ; preds = %block_400586
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 12
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 7
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  store i32 17, i32* %161
  %162 = load i64, i64* %PC
  %163 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %162, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %163

block_4009a6:                                     ; preds = %block_400586
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 12
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 7
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  store i32 22, i32* %168
  %169 = load i64, i64* %PC
  %170 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %169, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %170

block_400aa0:                                     ; preds = %block_400586
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 12
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i32*
  store i32 27, i32* %175
  %176 = load i64, i64* %PC
  %177 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %176, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %177

block_40058c:                                     ; preds = %block_400586
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 12
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  store i32 1, i32* %182
  %183 = load i64, i64* %PC
  %184 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %183, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %184

block_400686:                                     ; preds = %block_400586
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 12
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 7
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  store i32 6, i32* %189
  %190 = load i64, i64* %PC
  %191 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %190, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %191

block_40087a:                                     ; preds = %block_400586
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 12
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  store i32 16, i32* %196
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %197, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %198

block_400974:                                     ; preds = %block_400586
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 12
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 7
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i32*
  store i32 21, i32* %203
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 12
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 3
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i32*
  %209 = load i32, i32* %208
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = sub i64 %211, 1134
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %218 = load i64, i64* %217, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %214, i64* %220
  store i64 %219, i64* %217, align 8, !tbaa !2428
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %212, i64* %221, align 8, !tbaa !2428
  %222 = load i64, i64* %PC
  %223 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %222, %struct.Memory* %MEMORY.1)
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 8
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RAX
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = add i64 4, %233
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = icmp ult i64 %236, %233
  %238 = icmp ult i64 %236, 4
  %239 = or i1 %237, %238
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %240, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %236 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = xor i64 4, %233
  %250 = xor i64 %249, %236
  %251 = lshr i64 %250, 4
  %252 = trunc i64 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2447
  %255 = icmp eq i64 %236, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i64 %236, 63
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = lshr i64 %233, 63
  %262 = xor i64 %258, %261
  %263 = add nuw nsw i64 %262, %258
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 8
  %269 = load i64, i64* %RCX
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %268 to i64*
  store i64 %269, i64* %272
  %273 = load i64, i64* %RAX
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 3
  store i64 %275, i64* %PC
  %276 = inttoptr i64 %273 to i32*
  %277 = load i32, i32* %276
  %278 = sext i32 %277 to i64
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = load i64, i64* %RAX
  %280 = mul i64 %279, 8
  %281 = add i64 %280, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 8
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 40
  %288 = load i64, i64* %RAX
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %291
  %292 = load i64, i64* %PC
  %293 = sub i64 %292, 1051
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 5
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %293, i64* %296, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 12
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 7
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  store i32 26, i32* %301
  %302 = load i64, i64* %PC
  %303 = tail call %struct.Memory* @sub_400a75(%struct.State* %0, i64 %302, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %303

block_400780:                                     ; preds = %block_400586
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 12
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 7
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i32*
  store i32 11, i32* %308
  %309 = load i64, i64* %PC
  %310 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %309, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %310

block_4007b9:                                     ; preds = %block_4007b2, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007b2 ]
  %311 = load i64, i64* %RBP
  %312 = sub i64 %311, 12
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 3
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %312 to i32*
  %316 = load i32, i32* %315
  %317 = zext i32 %316 to i64
  store i64 %317, i64* %RDI, align 8, !tbaa !2428
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 684
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 5
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %325 = load i64, i64* %324, align 8, !tbaa !2428
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %321, i64* %327
  store i64 %326, i64* %324, align 8, !tbaa !2428
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %328, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %329, %struct.Memory* %MEMORY.0)
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 8
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %340 = load i64, i64* %RCX
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = add i64 4, %340
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ult i64 %343, %340
  %345 = icmp ult i64 %343, 4
  %346 = or i1 %344, %345
  %347 = zext i1 %346 to i8
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %347, i8* %348, align 1, !tbaa !2432
  %349 = trunc i64 %343 to i32
  %350 = and i32 %349, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2446
  %356 = xor i64 4, %340
  %357 = xor i64 %356, %343
  %358 = lshr i64 %357, 4
  %359 = trunc i64 %358 to i8
  %360 = and i8 %359, 1
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %360, i8* %361, align 1, !tbaa !2447
  %362 = icmp eq i64 %343, 0
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %363, i8* %364, align 1, !tbaa !2448
  %365 = lshr i64 %343, 63
  %366 = trunc i64 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %366, i8* %367, align 1, !tbaa !2449
  %368 = lshr i64 %340, 63
  %369 = xor i64 %365, %368
  %370 = add nuw nsw i64 %369, %365
  %371 = icmp eq i64 %370, 2
  %372 = zext i1 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %372, i8* %373, align 1, !tbaa !2450
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 8
  %376 = load i64, i64* %RCX
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %375 to i64*
  store i64 %376, i64* %379
  %380 = load i64, i64* %RAX
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383
  %385 = sext i32 %384 to i64
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = load i64, i64* %RAX
  %387 = mul i64 %386, 8
  %388 = add i64 %387, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 8
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 40
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %394 to i64*
  store i64 %395, i64* %398
  %399 = load i64, i64* %PC
  %400 = sub i64 %399, 601
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 5
  store i64 %402, i64* %PC
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %400, i64* %403, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 12
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 7
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  store i32 31, i32* %408
  %409 = load i64, i64* %PC
  %410 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %409, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %410

block_400654:                                     ; preds = %block_400586
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 12
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 7
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %412 to i32*
  store i32 5, i32* %415
  %416 = load i64, i64* %PC
  %417 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %416, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %417

block_40074e:                                     ; preds = %block_400586
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 7
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 10, i32* %422
  %423 = load i64, i64* %PC
  %424 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %423, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %424

block_400848:                                     ; preds = %block_400586
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 12
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 7
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  store i32 15, i32* %429
  %430 = load i64, i64* %PC
  %431 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %430, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %431

block_4005be:                                     ; preds = %block_400586
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 2, i32* %436
  %437 = load i64, i64* %PC
  %438 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %437, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %438

block_400942:                                     ; preds = %block_400586
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 12
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 7
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i32*
  store i32 20, i32* %443
  %444 = load i64, i64* %PC
  %445 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %445

block_4006ea:                                     ; preds = %block_400586
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 12
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 7
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  store i32 8, i32* %450
  %451 = load i64, i64* %PC
  %452 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %451, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %452

block_400579:                                     ; preds = %block_400586
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 12
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 0, i32* %457
  %458 = load i64, i64* %PC
  %459 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %458, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %459

block_400a3c:                                     ; preds = %block_400586
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  store i32 25, i32* %464
  %465 = load i64, i64* %PC
  %466 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %465, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %466

block_400b36:                                     ; preds = %block_400586
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  store i32 30, i32* %471
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 12
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 3
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %RDI, align 8, !tbaa !2428
  %479 = load i64, i64* %PC
  %480 = sub i64 %479, 1584
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 5
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %486 = load i64, i64* %485, align 8, !tbaa !2428
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %482, i64* %488
  store i64 %487, i64* %485, align 8, !tbaa !2428
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %480, i64* %489, align 8, !tbaa !2428
  %490 = load i64, i64* %PC
  %491 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %490, %struct.Memory* %MEMORY.1)
  %492 = load i64, i64* %RBP
  %493 = sub i64 %492, 8
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 4
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to i64*
  %497 = load i64, i64* %496
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RAX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC
  store i64 %498, i64* %RCX, align 8, !tbaa !2428
  %501 = load i64, i64* %RCX
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = add i64 4, %501
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = icmp ult i64 %504, %501
  %506 = icmp ult i64 %504, 4
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %508, i8* %509, align 1, !tbaa !2432
  %510 = trunc i64 %504 to i32
  %511 = and i32 %510, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2446
  %517 = xor i64 4, %501
  %518 = xor i64 %517, %504
  %519 = lshr i64 %518, 4
  %520 = trunc i64 %519 to i8
  %521 = and i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %521, i8* %522, align 1, !tbaa !2447
  %523 = icmp eq i64 %504, 0
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %524, i8* %525, align 1, !tbaa !2448
  %526 = lshr i64 %504, 63
  %527 = trunc i64 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2449
  %529 = lshr i64 %501, 63
  %530 = xor i64 %526, %529
  %531 = add nuw nsw i64 %530, %526
  %532 = icmp eq i64 %531, 2
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %533, i8* %534, align 1, !tbaa !2450
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 8
  %537 = load i64, i64* %RCX
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %536 to i64*
  store i64 %537, i64* %540
  %541 = load i64, i64* %RAX
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  %545 = load i32, i32* %544
  %546 = sext i32 %545 to i64
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = mul i64 %547, 8
  %549 = add i64 %548, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 8
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i64*
  %553 = load i64, i64* %552
  store i64 %553, i64* %RAX, align 8, !tbaa !2428
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 40
  %556 = load i64, i64* %RAX
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %555 to i64*
  store i64 %556, i64* %559
  %560 = load i64, i64* %PC
  %561 = sub i64 %560, 1501
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  store i64 %563, i64* %PC
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %561, i64* %564, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 12
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 7
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i32*
  store i32 4, i32* %569
  %570 = load i64, i64* %PC
  %571 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %570, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %571

block_40071c:                                     ; preds = %block_400586
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 12
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 7
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i32*
  store i32 9, i32* %576
  %577 = load i64, i64* %PC
  %578 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %577, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %578

block_400586:                                     ; preds = %block_400b36, %block_4007b9, %block_400974, %block_4006b8
  %MEMORY.1 = phi %struct.Memory* [ %330, %block_4007b9 ], [ %223, %block_400974 ], [ %78, %block_4006b8 ], [ %491, %block_400b36 ]
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 40
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 2
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %585, i64* %588, align 8, !tbaa !2428
  %589 = load i64, i64* %PC
  switch i64 %589, label %618 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4196224, label %block_400780
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4195774, label %block_4005be
    i64 4196674, label %block_400942
  ]

block_400816:                                     ; preds = %block_400586
  %590 = load i64, i64* %RBP
  %591 = sub i64 %590, 12
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 7
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i32*
  store i32 14, i32* %594
  %595 = load i64, i64* %PC
  %596 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %595, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %596

block_400910:                                     ; preds = %block_400586
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 12
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 7
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  store i32 19, i32* %601
  %602 = load i64, i64* %PC
  %603 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %602, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %603

block_400a0a:                                     ; preds = %block_400586
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 12
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 7
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  store i32 24, i32* %608
  %609 = load i64, i64* %PC
  %610 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %609, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %610

block_400b04:                                     ; preds = %block_400586
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 12
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  store i32 29, i32* %615
  %616 = load i64, i64* %PC
  %617 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %616, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %617

; <label>:618:                                    ; preds = %block_400586
  %619 = load i64, i64* %PC
  %620 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %619, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %620
}

; Function Attrs: noinline
define %struct.Memory* @sub_400450__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400450:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008b3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4008b3

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 234
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.1)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 151
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 23, i32* %121
  %122 = load i64, i64* %PC
  %123 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %122, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %123

block_400ad2:                                     ; preds = %block_400586
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 28, i32* %128
  %129 = load i64, i64* %PC
  %130 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_4006ea:                                     ; preds = %block_400586
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 12
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 8, i32* %135
  %136 = load i64, i64* %PC
  %137 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %136, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %137

block_4005be:                                     ; preds = %block_400586
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 12
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  store i32 2, i32* %142
  %143 = load i64, i64* %PC
  %144 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %143, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %144

block_4007e4:                                     ; preds = %block_400586
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 12
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 13, i32* %149
  %150 = load i64, i64* %PC
  %151 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %151

block_4006b8:                                     ; preds = %block_400586
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 7, i32* %156
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 12
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = sub i64 %164, 434
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %167, i64* %173
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %174, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %175, %struct.Memory* %MEMORY.1)
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 8
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RCX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = add i64 4, %186
  store i64 %189, i64* %RCX, align 8, !tbaa !2428
  %190 = icmp ult i64 %189, %186
  %191 = icmp ult i64 %189, 4
  %192 = or i1 %190, %191
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %193, i8* %194, align 1, !tbaa !2432
  %195 = trunc i64 %189 to i32
  %196 = and i32 %195, 255
  %197 = call i32 @llvm.ctpop.i32(i32 %196) #16
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %200, i8* %201, align 1, !tbaa !2446
  %202 = xor i64 4, %186
  %203 = xor i64 %202, %189
  %204 = lshr i64 %203, 4
  %205 = trunc i64 %204 to i8
  %206 = and i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = icmp eq i64 %189, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = lshr i64 %189, 63
  %212 = trunc i64 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i64 %186, 63
  %215 = xor i64 %211, %214
  %216 = add nuw nsw i64 %215, %211
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %218, i8* %219, align 1, !tbaa !2450
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %RCX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %221 to i64*
  store i64 %222, i64* %225
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = mul i64 %232, 8
  %234 = add i64 %233, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 8
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 40
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %PC
  %246 = sub i64 %245, 351
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 5
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %246, i64* %249, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 18, i32* %254
  %255 = load i64, i64* %PC
  %256 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_4008b3:                                     ; preds = %block_4008ac, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008ac ]
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  %262 = load i32, i32* %261
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = load i64, i64* %PC
  %265 = sub i64 %264, 934
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %271 = load i64, i64* %270, align 8, !tbaa !2428
  %272 = add i64 %271, -8
  %273 = inttoptr i64 %272 to i64*
  store i64 %267, i64* %273
  store i64 %272, i64* %270, align 8, !tbaa !2428
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %265, i64* %274, align 8, !tbaa !2428
  %275 = load i64, i64* %PC
  %276 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %275, %struct.Memory* %MEMORY.0)
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 8
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = load i64, i64* %RAX
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 3
  store i64 %285, i64* %PC
  store i64 %283, i64* %RCX, align 8, !tbaa !2428
  %286 = load i64, i64* %RCX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = add i64 4, %286
  store i64 %289, i64* %RCX, align 8, !tbaa !2428
  %290 = icmp ult i64 %289, %286
  %291 = icmp ult i64 %289, 4
  %292 = or i1 %290, %291
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %293, i8* %294, align 1, !tbaa !2432
  %295 = trunc i64 %289 to i32
  %296 = and i32 %295, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2446
  %302 = xor i64 4, %286
  %303 = xor i64 %302, %289
  %304 = lshr i64 %303, 4
  %305 = trunc i64 %304 to i8
  %306 = and i8 %305, 1
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %306, i8* %307, align 1, !tbaa !2447
  %308 = icmp eq i64 %289, 0
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %309, i8* %310, align 1, !tbaa !2448
  %311 = lshr i64 %289, 63
  %312 = trunc i64 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %312, i8* %313, align 1, !tbaa !2449
  %314 = lshr i64 %286, 63
  %315 = xor i64 %311, %314
  %316 = add nuw nsw i64 %315, %311
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %318, i8* %319, align 1, !tbaa !2450
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 8
  %322 = load i64, i64* %RCX
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %321 to i64*
  store i64 %322, i64* %325
  %326 = load i64, i64* %RAX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = load i64, i64* %RAX
  %333 = mul i64 %332, 8
  %334 = add i64 %333, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 8
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i64*
  %338 = load i64, i64* %337
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 40
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %340 to i64*
  store i64 %341, i64* %344
  %345 = load i64, i64* %PC
  %346 = sub i64 %345, 851
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %346, i64* %349, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 12
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 7
  store i64 %353, i64* %PC
  %354 = inttoptr i64 %351 to i32*
  store i32 12, i32* %354
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 12
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 3
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i32*
  %360 = load i32, i32* %359
  %361 = zext i32 %360 to i64
  store i64 %361, i64* %RDI, align 8, !tbaa !2428
  %362 = load i64, i64* %PC
  %363 = sub i64 %362, 684
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %369 = load i64, i64* %368, align 8, !tbaa !2428
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %365, i64* %371
  store i64 %370, i64* %368, align 8, !tbaa !2428
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %363, i64* %372, align 8, !tbaa !2428
  %373 = load i64, i64* %PC
  %374 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %373, %struct.Memory* %MEMORY.1)
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 8
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = load i64, i64* %RAX
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  store i64 %381, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RCX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = add i64 4, %384
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ult i64 %387, %384
  %389 = icmp ult i64 %387, 4
  %390 = or i1 %388, %389
  %391 = zext i1 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %391, i8* %392, align 1, !tbaa !2432
  %393 = trunc i64 %387 to i32
  %394 = and i32 %393, 255
  %395 = call i32 @llvm.ctpop.i32(i32 %394) #16
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %398, i8* %399, align 1, !tbaa !2446
  %400 = xor i64 4, %384
  %401 = xor i64 %400, %387
  %402 = lshr i64 %401, 4
  %403 = trunc i64 %402 to i8
  %404 = and i8 %403, 1
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %404, i8* %405, align 1, !tbaa !2447
  %406 = icmp eq i64 %387, 0
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %407, i8* %408, align 1, !tbaa !2448
  %409 = lshr i64 %387, 63
  %410 = trunc i64 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %410, i8* %411, align 1, !tbaa !2449
  %412 = lshr i64 %384, 63
  %413 = xor i64 %409, %412
  %414 = add nuw nsw i64 %413, %409
  %415 = icmp eq i64 %414, 2
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %416, i8* %417, align 1, !tbaa !2450
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 8
  %420 = load i64, i64* %RCX
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %419 to i64*
  store i64 %420, i64* %423
  %424 = load i64, i64* %RAX
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = sext i32 %428 to i64
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = load i64, i64* %RAX
  %431 = mul i64 %430, 8
  %432 = add i64 %431, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 8
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 40
  %439 = load i64, i64* %RAX
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 4
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %438 to i64*
  store i64 %439, i64* %442
  %443 = load i64, i64* %PC
  %444 = sub i64 %443, 601
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 5
  store i64 %446, i64* %PC
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %444, i64* %447, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %448 = load i64, i64* %RBP
  %449 = sub i64 %448, 12
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 7
  store i64 %451, i64* %PC
  %452 = inttoptr i64 %449 to i32*
  store i32 17, i32* %452
  br label %block_4008b3

block_40058c:                                     ; preds = %block_400586
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 12
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 1, i32* %457
  %458 = load i64, i64* %PC
  %459 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %458, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %459

block_400686:                                     ; preds = %block_400586
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  store i32 6, i32* %464
  %465 = load i64, i64* %PC
  %466 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %465, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %466

block_400780:                                     ; preds = %block_400586
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  store i32 11, i32* %471
  %472 = load i64, i64* %PC
  %473 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %472, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %473

block_4009a6:                                     ; preds = %block_400586
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 12
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 7
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i32*
  store i32 22, i32* %478
  %479 = load i64, i64* %PC
  %480 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %479, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %480

block_40087a:                                     ; preds = %block_400586
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 7
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  store i32 16, i32* %485
  %486 = load i64, i64* %PC
  %487 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %486, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %487

block_400974:                                     ; preds = %block_400586
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 12
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i32*
  store i32 21, i32* %492
  %493 = load i64, i64* %RBP
  %494 = sub i64 %493, 12
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 3
  store i64 %496, i64* %PC
  %497 = inttoptr i64 %494 to i32*
  %498 = load i32, i32* %497
  %499 = zext i32 %498 to i64
  store i64 %499, i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = sub i64 %500, 1134
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 5
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %507 = load i64, i64* %506, align 8, !tbaa !2428
  %508 = add i64 %507, -8
  %509 = inttoptr i64 %508 to i64*
  store i64 %503, i64* %509
  store i64 %508, i64* %506, align 8, !tbaa !2428
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %501, i64* %510, align 8, !tbaa !2428
  %511 = load i64, i64* %PC
  %512 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.1)
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 8
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RAX
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 3
  store i64 %521, i64* %PC
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %522 = load i64, i64* %RCX
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 4
  store i64 %524, i64* %PC
  %525 = add i64 4, %522
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = icmp ult i64 %525, %522
  %527 = icmp ult i64 %525, 4
  %528 = or i1 %526, %527
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = trunc i64 %525 to i32
  %532 = and i32 %531, 255
  %533 = call i32 @llvm.ctpop.i32(i32 %532) #16
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %536, i8* %537, align 1, !tbaa !2446
  %538 = xor i64 4, %522
  %539 = xor i64 %538, %525
  %540 = lshr i64 %539, 4
  %541 = trunc i64 %540 to i8
  %542 = and i8 %541, 1
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %542, i8* %543, align 1, !tbaa !2447
  %544 = icmp eq i64 %525, 0
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %545, i8* %546, align 1, !tbaa !2448
  %547 = lshr i64 %525, 63
  %548 = trunc i64 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %548, i8* %549, align 1, !tbaa !2449
  %550 = lshr i64 %522, 63
  %551 = xor i64 %547, %550
  %552 = add nuw nsw i64 %551, %547
  %553 = icmp eq i64 %552, 2
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %554, i8* %555, align 1, !tbaa !2450
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 8
  %558 = load i64, i64* %RCX
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %557 to i64*
  store i64 %558, i64* %561
  %562 = load i64, i64* %RAX
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 3
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  %566 = load i32, i32* %565
  %567 = sext i32 %566 to i64
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = load i64, i64* %RAX
  %569 = mul i64 %568, 8
  %570 = add i64 %569, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 8
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %570 to i64*
  %574 = load i64, i64* %573
  store i64 %574, i64* %RAX, align 8, !tbaa !2428
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 40
  %577 = load i64, i64* %RAX
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 4
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %576 to i64*
  store i64 %577, i64* %580
  %581 = load i64, i64* %PC
  %582 = sub i64 %581, 1051
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 5
  store i64 %584, i64* %PC
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %582, i64* %585, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 12
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 7
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i32*
  store i32 26, i32* %590
  %591 = load i64, i64* %RBP
  %592 = sub i64 %591, 12
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 3
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %592 to i32*
  %596 = load i32, i32* %595
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %RDI, align 8, !tbaa !2428
  %598 = load i64, i64* %PC
  %599 = sub i64 %598, 1384
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %605 = load i64, i64* %604, align 8, !tbaa !2428
  %606 = add i64 %605, -8
  %607 = inttoptr i64 %606 to i64*
  store i64 %601, i64* %607
  store i64 %606, i64* %604, align 8, !tbaa !2428
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %599, i64* %608, align 8, !tbaa !2428
  %609 = load i64, i64* %PC
  %610 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %609, %struct.Memory* %MEMORY.1)
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 8
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RAX
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 3
  store i64 %619, i64* %PC
  store i64 %617, i64* %RCX, align 8, !tbaa !2428
  %620 = load i64, i64* %RCX
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 4
  store i64 %622, i64* %PC
  %623 = add i64 4, %620
  store i64 %623, i64* %RCX, align 8, !tbaa !2428
  %624 = icmp ult i64 %623, %620
  %625 = icmp ult i64 %623, 4
  %626 = or i1 %624, %625
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %627, i8* %628, align 1, !tbaa !2432
  %629 = trunc i64 %623 to i32
  %630 = and i32 %629, 255
  %631 = call i32 @llvm.ctpop.i32(i32 %630) #16
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %634, i8* %635, align 1, !tbaa !2446
  %636 = xor i64 4, %620
  %637 = xor i64 %636, %623
  %638 = lshr i64 %637, 4
  %639 = trunc i64 %638 to i8
  %640 = and i8 %639, 1
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %640, i8* %641, align 1, !tbaa !2447
  %642 = icmp eq i64 %623, 0
  %643 = zext i1 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %643, i8* %644, align 1, !tbaa !2448
  %645 = lshr i64 %623, 63
  %646 = trunc i64 %645 to i8
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %646, i8* %647, align 1, !tbaa !2449
  %648 = lshr i64 %620, 63
  %649 = xor i64 %645, %648
  %650 = add nuw nsw i64 %649, %645
  %651 = icmp eq i64 %650, 2
  %652 = zext i1 %651 to i8
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %652, i8* %653, align 1, !tbaa !2450
  %654 = load i64, i64* %RBP
  %655 = sub i64 %654, 8
  %656 = load i64, i64* %RCX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %655 to i64*
  store i64 %656, i64* %659
  %660 = load i64, i64* %RAX
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 3
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i32*
  %664 = load i32, i32* %663
  %665 = sext i32 %664 to i64
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = load i64, i64* %RAX
  %667 = mul i64 %666, 8
  %668 = add i64 %667, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 8
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i64*
  %672 = load i64, i64* %671
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 40
  %675 = load i64, i64* %RAX
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %674 to i64*
  store i64 %675, i64* %678
  %679 = load i64, i64* %PC
  %680 = sub i64 %679, 1301
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 5
  store i64 %682, i64* %PC
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %680, i64* %683, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 12
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 7
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  store i32 27, i32* %688
  %689 = load i64, i64* %PC
  %690 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %689, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %690

block_400654:                                     ; preds = %block_400586
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 12
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 7
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  store i32 5, i32* %695
  %696 = load i64, i64* %PC
  %697 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %696, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %697

block_40074e:                                     ; preds = %block_400586
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 12
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 7
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i32*
  store i32 10, i32* %702
  %703 = load i64, i64* %PC
  %704 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %703, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %704

block_400848:                                     ; preds = %block_400586
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 12
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 7
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  store i32 15, i32* %709
  %710 = load i64, i64* %PC
  %711 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %710, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %711

block_400942:                                     ; preds = %block_400586
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 12
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 7
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  store i32 20, i32* %716
  %717 = load i64, i64* %PC
  %718 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %717, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %718

block_400b68:                                     ; preds = %block_400586
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 12
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  store i32 31, i32* %723
  %724 = load i64, i64* %PC
  %725 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %724, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %725

block_400a3c:                                     ; preds = %block_400586
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 25, i32* %730
  %731 = load i64, i64* %PC
  %732 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %731, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %732

block_400b36:                                     ; preds = %block_400586
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 12
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i32*
  store i32 30, i32* %737
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 12
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i32*
  %743 = load i32, i32* %742
  %744 = zext i32 %743 to i64
  store i64 %744, i64* %RDI, align 8, !tbaa !2428
  %745 = load i64, i64* %PC
  %746 = sub i64 %745, 1584
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 5
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 5
  store i64 %750, i64* %PC
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %752 = load i64, i64* %751, align 8, !tbaa !2428
  %753 = add i64 %752, -8
  %754 = inttoptr i64 %753 to i64*
  store i64 %748, i64* %754
  store i64 %753, i64* %751, align 8, !tbaa !2428
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %746, i64* %755, align 8, !tbaa !2428
  %756 = load i64, i64* %PC
  %757 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %756, %struct.Memory* %MEMORY.1)
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 8
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i64*
  %763 = load i64, i64* %762
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = load i64, i64* %RAX
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC
  store i64 %764, i64* %RCX, align 8, !tbaa !2428
  %767 = load i64, i64* %RCX
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 4
  store i64 %769, i64* %PC
  %770 = add i64 4, %767
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = icmp ult i64 %770, %767
  %772 = icmp ult i64 %770, 4
  %773 = or i1 %771, %772
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %774, i8* %775, align 1, !tbaa !2432
  %776 = trunc i64 %770 to i32
  %777 = and i32 %776, 255
  %778 = call i32 @llvm.ctpop.i32(i32 %777) #16
  %779 = trunc i32 %778 to i8
  %780 = and i8 %779, 1
  %781 = xor i8 %780, 1
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %781, i8* %782, align 1, !tbaa !2446
  %783 = xor i64 4, %767
  %784 = xor i64 %783, %770
  %785 = lshr i64 %784, 4
  %786 = trunc i64 %785 to i8
  %787 = and i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %787, i8* %788, align 1, !tbaa !2447
  %789 = icmp eq i64 %770, 0
  %790 = zext i1 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %790, i8* %791, align 1, !tbaa !2448
  %792 = lshr i64 %770, 63
  %793 = trunc i64 %792 to i8
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %793, i8* %794, align 1, !tbaa !2449
  %795 = lshr i64 %767, 63
  %796 = xor i64 %792, %795
  %797 = add nuw nsw i64 %796, %792
  %798 = icmp eq i64 %797, 2
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %799, i8* %800, align 1, !tbaa !2450
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 8
  %803 = load i64, i64* %RCX
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 4
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %802 to i64*
  store i64 %803, i64* %806
  %807 = load i64, i64* %RAX
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 3
  store i64 %809, i64* %PC
  %810 = inttoptr i64 %807 to i32*
  %811 = load i32, i32* %810
  %812 = sext i32 %811 to i64
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RAX
  %814 = mul i64 %813, 8
  %815 = add i64 %814, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 8
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i64*
  %819 = load i64, i64* %818
  store i64 %819, i64* %RAX, align 8, !tbaa !2428
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 40
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 4
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %821 to i64*
  store i64 %822, i64* %825
  %826 = load i64, i64* %PC
  %827 = sub i64 %826, 1501
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 5
  store i64 %829, i64* %PC
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %827, i64* %830, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400b36, %block_400a6e, %block_400974, %block_4007b2, %block_4008b3, %block_4006b8, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %276, %block_4008b3 ], [ %512, %block_400974 ], [ %374, %block_4007b2 ], [ %610, %block_400a6e ], [ %43, %block_4005f0 ], [ %176, %block_4006b8 ], [ %757, %block_400b36 ]
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 40
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i64*
  %836 = load i64, i64* %835
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RAX
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 2
  store i64 %839, i64* %PC
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %837, i64* %840, align 8, !tbaa !2428
  %841 = load i64, i64* %PC
  switch i64 %841, label %891 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4196574, label %block_4008de
    i64 4196024, label %block_4006b8
    i64 4196324, label %block_4007e4
    i64 4195774, label %block_4005be
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196074, label %block_4006ea
    i64 4197224, label %block_400b68
    i64 4195974, label %block_400686
    i64 4196224, label %block_400780
    i64 4196774, label %block_4009a6
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4197024, label %block_400aa0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
  ]

block_400622:                                     ; preds = %block_400586
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 12
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 7
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  store i32 4, i32* %846
  %847 = load i64, i64* %PC
  %848 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %847, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %848

block_40071c:                                     ; preds = %block_400586
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 12
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 7
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i32*
  store i32 9, i32* %853
  %854 = load i64, i64* %PC
  %855 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %854, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %855

block_400816:                                     ; preds = %block_400586
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 12
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 7
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i32*
  store i32 14, i32* %860
  %861 = load i64, i64* %PC
  %862 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %861, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %862

block_400910:                                     ; preds = %block_400586
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 12
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 7
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %864 to i32*
  store i32 19, i32* %867
  %868 = load i64, i64* %PC
  %869 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %868, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %869

block_400a0a:                                     ; preds = %block_400586
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 12
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 7
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i32*
  store i32 24, i32* %874
  %875 = load i64, i64* %PC
  %876 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %875, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %876

block_400579:                                     ; preds = %block_400586
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 12
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 7
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  store i32 0, i32* %881
  %882 = load i64, i64* %PC
  %883 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %882, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %883

block_400b04:                                     ; preds = %block_400586
  %884 = load i64, i64* %RBP
  %885 = sub i64 %884, 12
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 7
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i32*
  store i32 29, i32* %888
  %889 = load i64, i64* %PC
  %890 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %889, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %890

; <label>:891:                                    ; preds = %block_400586
  %892 = load i64, i64* %PC
  %893 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %892, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %893
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006f1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4006f1

block_4005f0:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 3, i32* %26
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 12
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %28 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %RDI, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = sub i64 %34, 234
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 5
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %35, i64* %44, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %53 = load i64, i64* %RAX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RCX, align 8, !tbaa !2428
  %56 = load i64, i64* %RCX
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = add i64 4, %56
  store i64 %59, i64* %RCX, align 8, !tbaa !2428
  %60 = icmp ult i64 %59, %56
  %61 = icmp ult i64 %59, 4
  %62 = or i1 %60, %61
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %63, i8* %64, align 1, !tbaa !2432
  %65 = trunc i64 %59 to i32
  %66 = and i32 %65, 255
  %67 = call i32 @llvm.ctpop.i32(i32 %66) #16
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %70, i8* %71, align 1, !tbaa !2446
  %72 = xor i64 4, %56
  %73 = xor i64 %72, %59
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = icmp eq i64 %59, 0
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = lshr i64 %59, 63
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %82, i8* %83, align 1, !tbaa !2449
  %84 = lshr i64 %56, 63
  %85 = xor i64 %81, %84
  %86 = add nuw nsw i64 %85, %81
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RCX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = load i64, i64* %RAX
  %103 = mul i64 %102, 8
  %104 = add i64 %103, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 8
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 40
  %111 = load i64, i64* %RAX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %PC
  %116 = sub i64 %115, 151
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %119, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 13, i32* %124
  %125 = load i64, i64* %PC
  %126 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %125, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %126

block_4008de:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 18, i32* %131
  %132 = load i64, i64* %PC
  %133 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %132, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %133

block_4009d8:                                     ; preds = %block_400586
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 12
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 7
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  store i32 23, i32* %138
  %139 = load i64, i64* %PC
  %140 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %139, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %140

block_400ad2:                                     ; preds = %block_400586
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 12
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 7
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i32*
  store i32 28, i32* %145
  %146 = load i64, i64* %PC
  %147 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %146, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %147

block_4005be:                                     ; preds = %block_400586
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 12
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 7
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  store i32 2, i32* %152
  %153 = load i64, i64* %PC
  %154 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %153, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %154

block_4006b8:                                     ; preds = %block_400586
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 12
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  store i32 7, i32* %159
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 12
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RDI, align 8, !tbaa !2428
  %167 = load i64, i64* %PC
  %168 = sub i64 %167, 434
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 5
  store i64 %172, i64* %PC
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = add i64 %174, -8
  %176 = inttoptr i64 %175 to i64*
  store i64 %170, i64* %176
  store i64 %175, i64* %173, align 8, !tbaa !2428
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %168, i64* %177, align 8, !tbaa !2428
  %178 = load i64, i64* %PC
  %179 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %178, %struct.Memory* %MEMORY.1)
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 8
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = load i64, i64* %RAX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  store i64 %186, i64* %RCX, align 8, !tbaa !2428
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = add i64 4, %189
  store i64 %192, i64* %RCX, align 8, !tbaa !2428
  %193 = icmp ult i64 %192, %189
  %194 = icmp ult i64 %192, 4
  %195 = or i1 %193, %194
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %196, i8* %197, align 1, !tbaa !2432
  %198 = trunc i64 %192 to i32
  %199 = and i32 %198, 255
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #16
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %203, i8* %204, align 1, !tbaa !2446
  %205 = xor i64 4, %189
  %206 = xor i64 %205, %192
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %209, i8* %210, align 1, !tbaa !2447
  %211 = icmp eq i64 %192, 0
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %212, i8* %213, align 1, !tbaa !2448
  %214 = lshr i64 %192, 63
  %215 = trunc i64 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %215, i8* %216, align 1, !tbaa !2449
  %217 = lshr i64 %189, 63
  %218 = xor i64 %214, %217
  %219 = add nuw nsw i64 %218, %214
  %220 = icmp eq i64 %219, 2
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %221, i8* %222, align 1, !tbaa !2450
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 8
  %225 = load i64, i64* %RCX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %228
  %229 = load i64, i64* %RAX
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 3
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %229 to i32*
  %233 = load i32, i32* %232
  %234 = sext i32 %233 to i64
  store i64 %234, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = mul i64 %235, 8
  %237 = add i64 %236, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 8
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 40
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %PC
  %249 = sub i64 %248, 351
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %249, i64* %252, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 12
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 7
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %254 to i32*
  store i32 12, i32* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 12
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = load i64, i64* %PC
  %266 = sub i64 %265, 684
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 5
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 5
  store i64 %270, i64* %PC
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %272 = load i64, i64* %271, align 8, !tbaa !2428
  %273 = add i64 %272, -8
  %274 = inttoptr i64 %273 to i64*
  store i64 %268, i64* %274
  store i64 %273, i64* %271, align 8, !tbaa !2428
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %266, i64* %275, align 8, !tbaa !2428
  %276 = load i64, i64* %PC
  %277 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %276, %struct.Memory* %MEMORY.1)
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 8
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i64*
  %283 = load i64, i64* %282
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = load i64, i64* %RAX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %287 = load i64, i64* %RCX
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC
  %290 = add i64 4, %287
  store i64 %290, i64* %RCX, align 8, !tbaa !2428
  %291 = icmp ult i64 %290, %287
  %292 = icmp ult i64 %290, 4
  %293 = or i1 %291, %292
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %294, i8* %295, align 1, !tbaa !2432
  %296 = trunc i64 %290 to i32
  %297 = and i32 %296, 255
  %298 = call i32 @llvm.ctpop.i32(i32 %297) #16
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = xor i8 %300, 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %301, i8* %302, align 1, !tbaa !2446
  %303 = xor i64 4, %287
  %304 = xor i64 %303, %290
  %305 = lshr i64 %304, 4
  %306 = trunc i64 %305 to i8
  %307 = and i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %307, i8* %308, align 1, !tbaa !2447
  %309 = icmp eq i64 %290, 0
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %310, i8* %311, align 1, !tbaa !2448
  %312 = lshr i64 %290, 63
  %313 = trunc i64 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %313, i8* %314, align 1, !tbaa !2449
  %315 = lshr i64 %287, 63
  %316 = xor i64 %312, %315
  %317 = add nuw nsw i64 %316, %312
  %318 = icmp eq i64 %317, 2
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %319, i8* %320, align 1, !tbaa !2450
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 8
  %323 = load i64, i64* %RCX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %326
  %327 = load i64, i64* %RAX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = sext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = load i64, i64* %RAX
  %334 = mul i64 %333, 8
  %335 = add i64 %334, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 8
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i64*
  %339 = load i64, i64* %338
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 40
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %341 to i64*
  store i64 %342, i64* %345
  %346 = load i64, i64* %PC
  %347 = sub i64 %346, 601
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  store i64 %349, i64* %PC
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %347, i64* %350, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 12
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 7
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i32*
  store i32 17, i32* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 12
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i32*
  %361 = load i32, i32* %360
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = load i64, i64* %PC
  %364 = sub i64 %363, 934
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %370 = load i64, i64* %369, align 8, !tbaa !2428
  %371 = add i64 %370, -8
  %372 = inttoptr i64 %371 to i64*
  store i64 %366, i64* %372
  store i64 %371, i64* %369, align 8, !tbaa !2428
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %364, i64* %373, align 8, !tbaa !2428
  %374 = load i64, i64* %PC
  %375 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %374, %struct.Memory* %MEMORY.1)
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 8
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RAX
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %385 = load i64, i64* %RCX
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = add i64 4, %385
  store i64 %388, i64* %RCX, align 8, !tbaa !2428
  %389 = icmp ult i64 %388, %385
  %390 = icmp ult i64 %388, 4
  %391 = or i1 %389, %390
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %392, i8* %393, align 1, !tbaa !2432
  %394 = trunc i64 %388 to i32
  %395 = and i32 %394, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = xor i64 4, %385
  %402 = xor i64 %401, %388
  %403 = lshr i64 %402, 4
  %404 = trunc i64 %403 to i8
  %405 = and i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = icmp eq i64 %388, 0
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = lshr i64 %388, 63
  %411 = trunc i64 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %385, 63
  %414 = xor i64 %410, %413
  %415 = add nuw nsw i64 %414, %410
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %417, i8* %418, align 1, !tbaa !2450
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 8
  %421 = load i64, i64* %RCX
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 4
  store i64 %423, i64* %PC
  %424 = inttoptr i64 %420 to i64*
  store i64 %421, i64* %424
  %425 = load i64, i64* %RAX
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i32*
  %429 = load i32, i32* %428
  %430 = sext i32 %429 to i64
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %RAX
  %432 = mul i64 %431, 8
  %433 = add i64 %432, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 8
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i64*
  %437 = load i64, i64* %436
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 40
  %440 = load i64, i64* %RAX
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 4
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %439 to i64*
  store i64 %440, i64* %443
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 851
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %448, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 12
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 7
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i32*
  store i32 22, i32* %453
  %454 = load i64, i64* %PC
  %455 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %454, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %455

block_400aa0:                                     ; preds = %block_400586
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 12
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 7
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  store i32 27, i32* %460
  %461 = load i64, i64* %PC
  %462 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %461, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %462

block_400686:                                     ; preds = %block_400586
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 12
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 7
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  store i32 6, i32* %467
  %468 = load i64, i64* %PC
  %469 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %468, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %469

block_40087a:                                     ; preds = %block_400586
  %470 = load i64, i64* %RBP
  %471 = sub i64 %470, 12
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 7
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %471 to i32*
  store i32 16, i32* %474
  %475 = load i64, i64* %PC
  %476 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %475, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %476

block_400974:                                     ; preds = %block_400586
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 12
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 7
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to i32*
  store i32 21, i32* %481
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 12
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 3
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = zext i32 %487 to i64
  store i64 %488, i64* %RDI, align 8, !tbaa !2428
  %489 = load i64, i64* %PC
  %490 = sub i64 %489, 1134
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 5
  store i64 %494, i64* %PC
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %496 = load i64, i64* %495, align 8, !tbaa !2428
  %497 = add i64 %496, -8
  %498 = inttoptr i64 %497 to i64*
  store i64 %492, i64* %498
  store i64 %497, i64* %495, align 8, !tbaa !2428
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %490, i64* %499, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %500, %struct.Memory* %MEMORY.1)
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 8
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RAX
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 3
  store i64 %510, i64* %PC
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %511 = load i64, i64* %RCX
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC
  %514 = add i64 4, %511
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = icmp ult i64 %514, %511
  %516 = icmp ult i64 %514, 4
  %517 = or i1 %515, %516
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %518, i8* %519, align 1, !tbaa !2432
  %520 = trunc i64 %514 to i32
  %521 = and i32 %520, 255
  %522 = call i32 @llvm.ctpop.i32(i32 %521) #16
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %525, i8* %526, align 1, !tbaa !2446
  %527 = xor i64 4, %511
  %528 = xor i64 %527, %514
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %531, i8* %532, align 1, !tbaa !2447
  %533 = icmp eq i64 %514, 0
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %534, i8* %535, align 1, !tbaa !2448
  %536 = lshr i64 %514, 63
  %537 = trunc i64 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %537, i8* %538, align 1, !tbaa !2449
  %539 = lshr i64 %511, 63
  %540 = xor i64 %536, %539
  %541 = add nuw nsw i64 %540, %536
  %542 = icmp eq i64 %541, 2
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %543, i8* %544, align 1, !tbaa !2450
  %545 = load i64, i64* %RBP
  %546 = sub i64 %545, 8
  %547 = load i64, i64* %RCX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 4
  store i64 %549, i64* %PC
  %550 = inttoptr i64 %546 to i64*
  store i64 %547, i64* %550
  %551 = load i64, i64* %RAX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554
  %556 = sext i32 %555 to i64
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = load i64, i64* %RAX
  %558 = mul i64 %557, 8
  %559 = add i64 %558, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 8
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %559 to i64*
  %563 = load i64, i64* %562
  store i64 %563, i64* %RAX, align 8, !tbaa !2428
  %564 = load i64, i64* %RBP
  %565 = sub i64 %564, 40
  %566 = load i64, i64* %RAX
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %565 to i64*
  store i64 %566, i64* %569
  %570 = load i64, i64* %PC
  %571 = sub i64 %570, 1051
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 5
  store i64 %573, i64* %PC
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %571, i64* %574, align 8, !tbaa !2428
  br label %block_400586

block_4006f1:                                     ; preds = %block_4006ea, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4006ea ]
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 12
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 484
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %589 = load i64, i64* %588, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %585, i64* %591
  store i64 %590, i64* %588, align 8, !tbaa !2428
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %592, align 8, !tbaa !2428
  %593 = load i64, i64* %PC
  %594 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %593, %struct.Memory* %MEMORY.0)
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 8
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = load i64, i64* %RAX
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RCX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = add i64 4, %604
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = icmp ult i64 %607, %604
  %609 = icmp ult i64 %607, 4
  %610 = or i1 %608, %609
  %611 = zext i1 %610 to i8
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %611, i8* %612, align 1, !tbaa !2432
  %613 = trunc i64 %607 to i32
  %614 = and i32 %613, 255
  %615 = call i32 @llvm.ctpop.i32(i32 %614) #16
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = xor i8 %617, 1
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %618, i8* %619, align 1, !tbaa !2446
  %620 = xor i64 4, %604
  %621 = xor i64 %620, %607
  %622 = lshr i64 %621, 4
  %623 = trunc i64 %622 to i8
  %624 = and i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %624, i8* %625, align 1, !tbaa !2447
  %626 = icmp eq i64 %607, 0
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %627, i8* %628, align 1, !tbaa !2448
  %629 = lshr i64 %607, 63
  %630 = trunc i64 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %630, i8* %631, align 1, !tbaa !2449
  %632 = lshr i64 %604, 63
  %633 = xor i64 %629, %632
  %634 = add nuw nsw i64 %633, %629
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %636, i8* %637, align 1, !tbaa !2450
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 8
  %640 = load i64, i64* %RCX
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %639 to i64*
  store i64 %640, i64* %643
  %644 = load i64, i64* %RAX
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  %648 = load i32, i32* %647
  %649 = sext i32 %648 to i64
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = load i64, i64* %RAX
  %651 = mul i64 %650, 8
  %652 = add i64 %651, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 8
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 40
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %658 to i64*
  store i64 %659, i64* %662
  %663 = load i64, i64* %PC
  %664 = sub i64 %663, 401
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %664, i64* %667, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 12
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 7
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i32*
  store i32 0, i32* %672
  %673 = load i64, i64* %RSP
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = add i64 48, %673
  store i64 %676, i64* %RSP, align 8, !tbaa !2428
  %677 = icmp ult i64 %676, %673
  %678 = icmp ult i64 %676, 48
  %679 = or i1 %677, %678
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %680, i8* %681, align 1, !tbaa !2432
  %682 = trunc i64 %676 to i32
  %683 = and i32 %682, 255
  %684 = call i32 @llvm.ctpop.i32(i32 %683) #16
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %687, i8* %688, align 1, !tbaa !2446
  %689 = xor i64 48, %673
  %690 = xor i64 %689, %676
  %691 = lshr i64 %690, 4
  %692 = trunc i64 %691 to i8
  %693 = and i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %693, i8* %694, align 1, !tbaa !2447
  %695 = icmp eq i64 %676, 0
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %696, i8* %697, align 1, !tbaa !2448
  %698 = lshr i64 %676, 63
  %699 = trunc i64 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %699, i8* %700, align 1, !tbaa !2449
  %701 = lshr i64 %673, 63
  %702 = xor i64 %698, %701
  %703 = add nuw nsw i64 %702, %698
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %705, i8* %706, align 1, !tbaa !2450
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 1
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %710 = load i64, i64* %709, align 8, !tbaa !2428
  %711 = add i64 %710, 8
  %712 = inttoptr i64 %710 to i64*
  %713 = load i64, i64* %712
  store i64 %713, i64* %RBP, align 8, !tbaa !2428
  store i64 %711, i64* %709, align 8, !tbaa !2428
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 1
  store i64 %715, i64* %PC
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %718 = load i64, i64* %717, align 8, !tbaa !2428
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %716, align 8, !tbaa !2428
  %721 = add i64 %718, 8
  store i64 %721, i64* %717, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a6e:                                     ; preds = %block_400586
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 12
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 7
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  store i32 26, i32* %726
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 12
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i32*
  %732 = load i32, i32* %731
  %733 = zext i32 %732 to i64
  store i64 %733, i64* %RDI, align 8, !tbaa !2428
  %734 = load i64, i64* %PC
  %735 = sub i64 %734, 1384
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 5
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 5
  store i64 %739, i64* %PC
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %741 = load i64, i64* %740, align 8, !tbaa !2428
  %742 = add i64 %741, -8
  %743 = inttoptr i64 %742 to i64*
  store i64 %737, i64* %743
  store i64 %742, i64* %740, align 8, !tbaa !2428
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %735, i64* %744, align 8, !tbaa !2428
  %745 = load i64, i64* %PC
  %746 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %745, %struct.Memory* %MEMORY.1)
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 8
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 3
  store i64 %755, i64* %PC
  store i64 %753, i64* %RCX, align 8, !tbaa !2428
  %756 = load i64, i64* %RCX
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = add i64 4, %756
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = icmp ult i64 %759, %756
  %761 = icmp ult i64 %759, 4
  %762 = or i1 %760, %761
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %763, i8* %764, align 1, !tbaa !2432
  %765 = trunc i64 %759 to i32
  %766 = and i32 %765, 255
  %767 = call i32 @llvm.ctpop.i32(i32 %766) #16
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = xor i8 %769, 1
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %770, i8* %771, align 1, !tbaa !2446
  %772 = xor i64 4, %756
  %773 = xor i64 %772, %759
  %774 = lshr i64 %773, 4
  %775 = trunc i64 %774 to i8
  %776 = and i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %776, i8* %777, align 1, !tbaa !2447
  %778 = icmp eq i64 %759, 0
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %779, i8* %780, align 1, !tbaa !2448
  %781 = lshr i64 %759, 63
  %782 = trunc i64 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2449
  %784 = lshr i64 %756, 63
  %785 = xor i64 %781, %784
  %786 = add nuw nsw i64 %785, %781
  %787 = icmp eq i64 %786, 2
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %788, i8* %789, align 1, !tbaa !2450
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 8
  %792 = load i64, i64* %RCX
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 4
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %791 to i64*
  store i64 %792, i64* %795
  %796 = load i64, i64* %RAX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 3
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RAX
  %803 = mul i64 %802, 8
  %804 = add i64 %803, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 8
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %RAX, align 8, !tbaa !2428
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 40
  %811 = load i64, i64* %RAX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %810 to i64*
  store i64 %811, i64* %814
  %815 = load i64, i64* %PC
  %816 = sub i64 %815, 1301
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %816, i64* %819, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 12
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 7
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  store i32 31, i32* %824
  %825 = load i64, i64* %PC
  %826 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %825, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %826

block_400654:                                     ; preds = %block_400586
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 12
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 7
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  store i32 5, i32* %831
  %832 = load i64, i64* %PC
  %833 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %832, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %833

block_40074e:                                     ; preds = %block_400586
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 12
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 7
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i32*
  store i32 10, i32* %838
  %839 = load i64, i64* %PC
  %840 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %839, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %840

block_400848:                                     ; preds = %block_400586
  %841 = load i64, i64* %RBP
  %842 = sub i64 %841, 12
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 7
  store i64 %844, i64* %PC
  %845 = inttoptr i64 %842 to i32*
  store i32 15, i32* %845
  %846 = load i64, i64* %PC
  %847 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %846, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %847

block_4006ea:                                     ; preds = %block_400586
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 12
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i32*
  store i32 8, i32* %852
  br label %block_4006f1

block_400942:                                     ; preds = %block_400586
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 12
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 7
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i32*
  store i32 20, i32* %857
  %858 = load i64, i64* %PC
  %859 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %858, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %859

block_40058c:                                     ; preds = %block_400586
  %860 = load i64, i64* %RBP
  %861 = sub i64 %860, 12
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 7
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i32*
  store i32 1, i32* %864
  %865 = load i64, i64* %PC
  %866 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %865, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %866

block_400a3c:                                     ; preds = %block_400586
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 12
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 7
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  store i32 25, i32* %871
  %872 = load i64, i64* %PC
  %873 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %872, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %873

block_400b36:                                     ; preds = %block_400586
  %874 = load i64, i64* %RBP
  %875 = sub i64 %874, 12
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 7
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %875 to i32*
  store i32 30, i32* %878
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 12
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 3
  store i64 %882, i64* %PC
  %883 = inttoptr i64 %880 to i32*
  %884 = load i32, i32* %883
  %885 = zext i32 %884 to i64
  store i64 %885, i64* %RDI, align 8, !tbaa !2428
  %886 = load i64, i64* %PC
  %887 = sub i64 %886, 1584
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  %890 = load i64, i64* %PC
  %891 = add i64 %890, 5
  store i64 %891, i64* %PC
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %893 = load i64, i64* %892, align 8, !tbaa !2428
  %894 = add i64 %893, -8
  %895 = inttoptr i64 %894 to i64*
  store i64 %889, i64* %895
  store i64 %894, i64* %892, align 8, !tbaa !2428
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %887, i64* %896, align 8, !tbaa !2428
  %897 = load i64, i64* %PC
  %898 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %897, %struct.Memory* %MEMORY.1)
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 8
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 4
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RAX
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 3
  store i64 %907, i64* %PC
  store i64 %905, i64* %RCX, align 8, !tbaa !2428
  %908 = load i64, i64* %RCX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 4
  store i64 %910, i64* %PC
  %911 = add i64 4, %908
  store i64 %911, i64* %RCX, align 8, !tbaa !2428
  %912 = icmp ult i64 %911, %908
  %913 = icmp ult i64 %911, 4
  %914 = or i1 %912, %913
  %915 = zext i1 %914 to i8
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %915, i8* %916, align 1, !tbaa !2432
  %917 = trunc i64 %911 to i32
  %918 = and i32 %917, 255
  %919 = call i32 @llvm.ctpop.i32(i32 %918) #16
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %922, i8* %923, align 1, !tbaa !2446
  %924 = xor i64 4, %908
  %925 = xor i64 %924, %911
  %926 = lshr i64 %925, 4
  %927 = trunc i64 %926 to i8
  %928 = and i8 %927, 1
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %928, i8* %929, align 1, !tbaa !2447
  %930 = icmp eq i64 %911, 0
  %931 = zext i1 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %931, i8* %932, align 1, !tbaa !2448
  %933 = lshr i64 %911, 63
  %934 = trunc i64 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %934, i8* %935, align 1, !tbaa !2449
  %936 = lshr i64 %908, 63
  %937 = xor i64 %933, %936
  %938 = add nuw nsw i64 %937, %933
  %939 = icmp eq i64 %938, 2
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %940, i8* %941, align 1, !tbaa !2450
  %942 = load i64, i64* %RBP
  %943 = sub i64 %942, 8
  %944 = load i64, i64* %RCX
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %943 to i64*
  store i64 %944, i64* %947
  %948 = load i64, i64* %RAX
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 3
  store i64 %950, i64* %PC
  %951 = inttoptr i64 %948 to i32*
  %952 = load i32, i32* %951
  %953 = sext i32 %952 to i64
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RAX
  %955 = mul i64 %954, 8
  %956 = add i64 %955, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 8
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i64*
  %960 = load i64, i64* %959
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RBP
  %962 = sub i64 %961, 40
  %963 = load i64, i64* %RAX
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 4
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %962 to i64*
  store i64 %963, i64* %966
  %967 = load i64, i64* %PC
  %968 = sub i64 %967, 1501
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 5
  store i64 %970, i64* %PC
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %968, i64* %971, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400b36, %block_400a6e, %block_4006f1, %block_400974, %block_4008ac, %block_4007b2, %block_4006b8, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %594, %block_4006f1 ], [ %501, %block_400974 ], [ %277, %block_4007b2 ], [ %179, %block_4006b8 ], [ %746, %block_400a6e ], [ %46, %block_4005f0 ], [ %375, %block_4008ac ], [ %898, %block_400b36 ]
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 40
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RAX, align 8, !tbaa !2428
  %978 = load i64, i64* %RAX
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 2
  store i64 %980, i64* %PC
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %978, i64* %981, align 8, !tbaa !2428
  %982 = load i64, i64* %PC
  switch i64 %982, label %1032 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4195774, label %block_4005be
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4197024, label %block_400aa0
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
  ]

block_400622:                                     ; preds = %block_400586
  %983 = load i64, i64* %RBP
  %984 = sub i64 %983, 12
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 7
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %984 to i32*
  store i32 4, i32* %987
  %988 = load i64, i64* %PC
  %989 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %988, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %989

block_40071c:                                     ; preds = %block_400586
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 12
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 7
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  store i32 9, i32* %994
  %995 = load i64, i64* %PC
  %996 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %995, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %996

block_400816:                                     ; preds = %block_400586
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 12
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 7
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i32*
  store i32 14, i32* %1001
  %1002 = load i64, i64* %PC
  %1003 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1002, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1003

block_400910:                                     ; preds = %block_400586
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 12
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 7
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i32*
  store i32 19, i32* %1008
  %1009 = load i64, i64* %PC
  %1010 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1009, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1010

block_400a0a:                                     ; preds = %block_400586
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 12
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 7
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  store i32 24, i32* %1015
  %1016 = load i64, i64* %PC
  %1017 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1016, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1017

block_400b04:                                     ; preds = %block_400586
  %1018 = load i64, i64* %RBP
  %1019 = sub i64 %1018, 12
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 7
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i32*
  store i32 29, i32* %1022
  %1023 = load i64, i64* %PC
  %1024 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1023, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1024

block_400780:                                     ; preds = %block_400586
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 12
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 7
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1026 to i32*
  store i32 11, i32* %1029
  %1030 = load i64, i64* %PC
  %1031 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1030, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1031

; <label>:1032:                                   ; preds = %block_400586
  %1033 = load i64, i64* %PC
  %1034 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1033, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1034
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b6f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400b6f

block_4005f0:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 3, i32* %26
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 12
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %28 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %RDI, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = sub i64 %34, 234
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 5
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %35, i64* %44, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %53 = load i64, i64* %RAX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RCX, align 8, !tbaa !2428
  %56 = load i64, i64* %RCX
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = add i64 4, %56
  store i64 %59, i64* %RCX, align 8, !tbaa !2428
  %60 = icmp ult i64 %59, %56
  %61 = icmp ult i64 %59, 4
  %62 = or i1 %60, %61
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %63, i8* %64, align 1, !tbaa !2432
  %65 = trunc i64 %59 to i32
  %66 = and i32 %65, 255
  %67 = call i32 @llvm.ctpop.i32(i32 %66) #16
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %70, i8* %71, align 1, !tbaa !2446
  %72 = xor i64 4, %56
  %73 = xor i64 %72, %59
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = icmp eq i64 %59, 0
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = lshr i64 %59, 63
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %82, i8* %83, align 1, !tbaa !2449
  %84 = lshr i64 %56, 63
  %85 = xor i64 %81, %84
  %86 = add nuw nsw i64 %85, %81
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RCX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = load i64, i64* %RAX
  %103 = mul i64 %102, 8
  %104 = add i64 %103, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 8
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 40
  %111 = load i64, i64* %RAX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %PC
  %116 = sub i64 %115, 151
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %119, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 13, i32* %124
  %125 = load i64, i64* %PC
  %126 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %125, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %126

block_4008de:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 18, i32* %131
  %132 = load i64, i64* %PC
  %133 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %132, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %133

block_4009d8:                                     ; preds = %block_400586
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 12
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 7
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  store i32 23, i32* %138
  %139 = load i64, i64* %PC
  %140 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %139, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %140

block_400ad2:                                     ; preds = %block_400586
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 12
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 7
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i32*
  store i32 28, i32* %145
  %146 = load i64, i64* %PC
  %147 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %146, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %147

block_4006b8:                                     ; preds = %block_400586
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 12
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 7
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  store i32 7, i32* %152
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 12
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to i32*
  %158 = load i32, i32* %157
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %160 = load i64, i64* %PC
  %161 = sub i64 %160, 434
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %167 = load i64, i64* %166, align 8, !tbaa !2428
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  store i64 %163, i64* %169
  store i64 %168, i64* %166, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %161, i64* %170, align 8, !tbaa !2428
  %171 = load i64, i64* %PC
  %172 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 8
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %RAX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  store i64 %179, i64* %RCX, align 8, !tbaa !2428
  %182 = load i64, i64* %RCX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = add i64 4, %182
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = icmp ult i64 %185, %182
  %187 = icmp ult i64 %185, 4
  %188 = or i1 %186, %187
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %189, i8* %190, align 1, !tbaa !2432
  %191 = trunc i64 %185 to i32
  %192 = and i32 %191, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i64 4, %182
  %199 = xor i64 %198, %185
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = icmp eq i64 %185, 0
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = lshr i64 %185, 63
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i64 %182, 63
  %211 = xor i64 %207, %210
  %212 = add nuw nsw i64 %211, %207
  %213 = icmp eq i64 %212, 2
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 8
  %218 = load i64, i64* %RCX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = load i64, i64* %RAX
  %229 = mul i64 %228, 8
  %230 = add i64 %229, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 8
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 40
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %236 to i64*
  store i64 %237, i64* %240
  %241 = load i64, i64* %PC
  %242 = sub i64 %241, 351
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %242, i64* %245, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 12
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 7
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  store i32 12, i32* %250
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 12
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDI, align 8, !tbaa !2428
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 684
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 8
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = load i64, i64* %RAX
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %280 = load i64, i64* %RCX
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = add i64 4, %280
  store i64 %283, i64* %RCX, align 8, !tbaa !2428
  %284 = icmp ult i64 %283, %280
  %285 = icmp ult i64 %283, 4
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %287, i8* %288, align 1, !tbaa !2432
  %289 = trunc i64 %283 to i32
  %290 = and i32 %289, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i64 4, %280
  %297 = xor i64 %296, %283
  %298 = lshr i64 %297, 4
  %299 = trunc i64 %298 to i8
  %300 = and i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = icmp eq i64 %283, 0
  %303 = zext i1 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %303, i8* %304, align 1, !tbaa !2448
  %305 = lshr i64 %283, 63
  %306 = trunc i64 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = lshr i64 %280, 63
  %309 = xor i64 %305, %308
  %310 = add nuw nsw i64 %309, %305
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %312, i8* %313, align 1, !tbaa !2450
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 8
  %316 = load i64, i64* %RCX
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %RAX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 3
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %320 to i32*
  %324 = load i32, i32* %323
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %RAX, align 8, !tbaa !2428
  %326 = load i64, i64* %RAX
  %327 = mul i64 %326, 8
  %328 = add i64 %327, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 8
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 40
  %335 = load i64, i64* %RAX
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %334 to i64*
  store i64 %335, i64* %338
  %339 = load i64, i64* %PC
  %340 = sub i64 %339, 601
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 5
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %340, i64* %343, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 12
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 7
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  store i32 17, i32* %348
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 12
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 3
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i32*
  %354 = load i32, i32* %353
  %355 = zext i32 %354 to i64
  store i64 %355, i64* %RDI, align 8, !tbaa !2428
  %356 = load i64, i64* %PC
  %357 = sub i64 %356, 934
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 5
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %363 = load i64, i64* %362, align 8, !tbaa !2428
  %364 = add i64 %363, -8
  %365 = inttoptr i64 %364 to i64*
  store i64 %359, i64* %365
  store i64 %364, i64* %362, align 8, !tbaa !2428
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %357, i64* %366, align 8, !tbaa !2428
  %367 = load i64, i64* %PC
  %368 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %367, %struct.Memory* %MEMORY.1)
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 8
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %RAX, align 8, !tbaa !2428
  %375 = load i64, i64* %RAX
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 3
  store i64 %377, i64* %PC
  store i64 %375, i64* %RCX, align 8, !tbaa !2428
  %378 = load i64, i64* %RCX
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = add i64 4, %378
  store i64 %381, i64* %RCX, align 8, !tbaa !2428
  %382 = icmp ult i64 %381, %378
  %383 = icmp ult i64 %381, 4
  %384 = or i1 %382, %383
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %385, i8* %386, align 1, !tbaa !2432
  %387 = trunc i64 %381 to i32
  %388 = and i32 %387, 255
  %389 = call i32 @llvm.ctpop.i32(i32 %388) #16
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %392, i8* %393, align 1, !tbaa !2446
  %394 = xor i64 4, %378
  %395 = xor i64 %394, %381
  %396 = lshr i64 %395, 4
  %397 = trunc i64 %396 to i8
  %398 = and i8 %397, 1
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %398, i8* %399, align 1, !tbaa !2447
  %400 = icmp eq i64 %381, 0
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %401, i8* %402, align 1, !tbaa !2448
  %403 = lshr i64 %381, 63
  %404 = trunc i64 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %404, i8* %405, align 1, !tbaa !2449
  %406 = lshr i64 %378, 63
  %407 = xor i64 %403, %406
  %408 = add nuw nsw i64 %407, %403
  %409 = icmp eq i64 %408, 2
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %410, i8* %411, align 1, !tbaa !2450
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 8
  %414 = load i64, i64* %RCX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %413 to i64*
  store i64 %414, i64* %417
  %418 = load i64, i64* %RAX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to i32*
  %422 = load i32, i32* %421
  %423 = sext i32 %422 to i64
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RAX
  %425 = mul i64 %424, 8
  %426 = add i64 %425, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 8
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 40
  %433 = load i64, i64* %RAX
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %432 to i64*
  store i64 %433, i64* %436
  %437 = load i64, i64* %PC
  %438 = sub i64 %437, 851
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 5
  store i64 %440, i64* %PC
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %438, i64* %441, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %442 = load i64, i64* %RBP
  %443 = sub i64 %442, 12
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 7
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i32*
  store i32 22, i32* %446
  %447 = load i64, i64* %PC
  %448 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %447, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %448

block_400aa0:                                     ; preds = %block_400586
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 12
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 7
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i32*
  store i32 27, i32* %453
  %454 = load i64, i64* %PC
  %455 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %454, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %455

block_400686:                                     ; preds = %block_400586
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 12
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 7
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  store i32 6, i32* %460
  %461 = load i64, i64* %PC
  %462 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %461, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %462

block_40087a:                                     ; preds = %block_400586
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 12
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 7
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  store i32 16, i32* %467
  %468 = load i64, i64* %PC
  %469 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %468, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %469

block_400974:                                     ; preds = %block_400586
  %470 = load i64, i64* %RBP
  %471 = sub i64 %470, 12
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 7
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %471 to i32*
  store i32 21, i32* %474
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 12
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 3
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i32*
  %480 = load i32, i32* %479
  %481 = zext i32 %480 to i64
  store i64 %481, i64* %RDI, align 8, !tbaa !2428
  %482 = load i64, i64* %PC
  %483 = sub i64 %482, 1134
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 5
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  store i64 %487, i64* %PC
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %489 = load i64, i64* %488, align 8, !tbaa !2428
  %490 = add i64 %489, -8
  %491 = inttoptr i64 %490 to i64*
  store i64 %485, i64* %491
  store i64 %490, i64* %488, align 8, !tbaa !2428
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %483, i64* %492, align 8, !tbaa !2428
  %493 = load i64, i64* %PC
  %494 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %493, %struct.Memory* %MEMORY.1)
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 8
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 3
  store i64 %503, i64* %PC
  store i64 %501, i64* %RCX, align 8, !tbaa !2428
  %504 = load i64, i64* %RCX
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 4
  store i64 %506, i64* %PC
  %507 = add i64 4, %504
  store i64 %507, i64* %RCX, align 8, !tbaa !2428
  %508 = icmp ult i64 %507, %504
  %509 = icmp ult i64 %507, 4
  %510 = or i1 %508, %509
  %511 = zext i1 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %511, i8* %512, align 1, !tbaa !2432
  %513 = trunc i64 %507 to i32
  %514 = and i32 %513, 255
  %515 = call i32 @llvm.ctpop.i32(i32 %514) #16
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %518, i8* %519, align 1, !tbaa !2446
  %520 = xor i64 4, %504
  %521 = xor i64 %520, %507
  %522 = lshr i64 %521, 4
  %523 = trunc i64 %522 to i8
  %524 = and i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %524, i8* %525, align 1, !tbaa !2447
  %526 = icmp eq i64 %507, 0
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %527, i8* %528, align 1, !tbaa !2448
  %529 = lshr i64 %507, 63
  %530 = trunc i64 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %530, i8* %531, align 1, !tbaa !2449
  %532 = lshr i64 %504, 63
  %533 = xor i64 %529, %532
  %534 = add nuw nsw i64 %533, %529
  %535 = icmp eq i64 %534, 2
  %536 = zext i1 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %536, i8* %537, align 1, !tbaa !2450
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 8
  %540 = load i64, i64* %RCX
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 4
  store i64 %542, i64* %PC
  %543 = inttoptr i64 %539 to i64*
  store i64 %540, i64* %543
  %544 = load i64, i64* %RAX
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = mul i64 %550, 8
  %552 = add i64 %551, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 8
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 40
  %559 = load i64, i64* %RAX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 4
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %558 to i64*
  store i64 %559, i64* %562
  %563 = load i64, i64* %PC
  %564 = sub i64 %563, 1051
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 5
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %564, i64* %567, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 12
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 7
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i32*
  store i32 2, i32* %572
  %573 = load i64, i64* %PC
  %574 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %573, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %574

block_400b6f:                                     ; preds = %block_400b68, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400b68 ]
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 12
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 1634
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %589 = load i64, i64* %588, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %585, i64* %591
  store i64 %590, i64* %588, align 8, !tbaa !2428
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %592, align 8, !tbaa !2428
  %593 = load i64, i64* %PC
  %594 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %593, %struct.Memory* %MEMORY.0)
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 8
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = load i64, i64* %RAX
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RCX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = add i64 4, %604
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = icmp ult i64 %607, %604
  %609 = icmp ult i64 %607, 4
  %610 = or i1 %608, %609
  %611 = zext i1 %610 to i8
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %611, i8* %612, align 1, !tbaa !2432
  %613 = trunc i64 %607 to i32
  %614 = and i32 %613, 255
  %615 = call i32 @llvm.ctpop.i32(i32 %614) #16
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = xor i8 %617, 1
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %618, i8* %619, align 1, !tbaa !2446
  %620 = xor i64 4, %604
  %621 = xor i64 %620, %607
  %622 = lshr i64 %621, 4
  %623 = trunc i64 %622 to i8
  %624 = and i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %624, i8* %625, align 1, !tbaa !2447
  %626 = icmp eq i64 %607, 0
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %627, i8* %628, align 1, !tbaa !2448
  %629 = lshr i64 %607, 63
  %630 = trunc i64 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %630, i8* %631, align 1, !tbaa !2449
  %632 = lshr i64 %604, 63
  %633 = xor i64 %629, %632
  %634 = add nuw nsw i64 %633, %629
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %636, i8* %637, align 1, !tbaa !2450
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 8
  %640 = load i64, i64* %RCX
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %639 to i64*
  store i64 %640, i64* %643
  %644 = load i64, i64* %RAX
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  %648 = load i32, i32* %647
  %649 = sext i32 %648 to i64
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = load i64, i64* %RAX
  %651 = mul i64 %650, 8
  %652 = add i64 %651, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 8
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 40
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %658 to i64*
  store i64 %659, i64* %662
  %663 = load i64, i64* %PC
  %664 = sub i64 %663, 1551
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %664, i64* %667, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 12
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 7
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i32*
  store i32 0, i32* %672
  %673 = load i64, i64* %RSP
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = add i64 48, %673
  store i64 %676, i64* %RSP, align 8, !tbaa !2428
  %677 = icmp ult i64 %676, %673
  %678 = icmp ult i64 %676, 48
  %679 = or i1 %677, %678
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %680, i8* %681, align 1, !tbaa !2432
  %682 = trunc i64 %676 to i32
  %683 = and i32 %682, 255
  %684 = call i32 @llvm.ctpop.i32(i32 %683) #16
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %687, i8* %688, align 1, !tbaa !2446
  %689 = xor i64 48, %673
  %690 = xor i64 %689, %676
  %691 = lshr i64 %690, 4
  %692 = trunc i64 %691 to i8
  %693 = and i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %693, i8* %694, align 1, !tbaa !2447
  %695 = icmp eq i64 %676, 0
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %696, i8* %697, align 1, !tbaa !2448
  %698 = lshr i64 %676, 63
  %699 = trunc i64 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %699, i8* %700, align 1, !tbaa !2449
  %701 = lshr i64 %673, 63
  %702 = xor i64 %698, %701
  %703 = add nuw nsw i64 %702, %698
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %705, i8* %706, align 1, !tbaa !2450
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 1
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %710 = load i64, i64* %709, align 8, !tbaa !2428
  %711 = add i64 %710, 8
  %712 = inttoptr i64 %710 to i64*
  %713 = load i64, i64* %712
  store i64 %713, i64* %RBP, align 8, !tbaa !2428
  store i64 %711, i64* %709, align 8, !tbaa !2428
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 1
  store i64 %715, i64* %PC
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %718 = load i64, i64* %717, align 8, !tbaa !2428
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %716, align 8, !tbaa !2428
  %721 = add i64 %718, 8
  store i64 %721, i64* %717, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a6e:                                     ; preds = %block_400586
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 12
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 7
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  store i32 26, i32* %726
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 12
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i32*
  %732 = load i32, i32* %731
  %733 = zext i32 %732 to i64
  store i64 %733, i64* %RDI, align 8, !tbaa !2428
  %734 = load i64, i64* %PC
  %735 = sub i64 %734, 1384
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 5
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 5
  store i64 %739, i64* %PC
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %741 = load i64, i64* %740, align 8, !tbaa !2428
  %742 = add i64 %741, -8
  %743 = inttoptr i64 %742 to i64*
  store i64 %737, i64* %743
  store i64 %742, i64* %740, align 8, !tbaa !2428
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %735, i64* %744, align 8, !tbaa !2428
  %745 = load i64, i64* %PC
  %746 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %745, %struct.Memory* %MEMORY.1)
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 8
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 3
  store i64 %755, i64* %PC
  store i64 %753, i64* %RCX, align 8, !tbaa !2428
  %756 = load i64, i64* %RCX
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = add i64 4, %756
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = icmp ult i64 %759, %756
  %761 = icmp ult i64 %759, 4
  %762 = or i1 %760, %761
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %763, i8* %764, align 1, !tbaa !2432
  %765 = trunc i64 %759 to i32
  %766 = and i32 %765, 255
  %767 = call i32 @llvm.ctpop.i32(i32 %766) #16
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = xor i8 %769, 1
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %770, i8* %771, align 1, !tbaa !2446
  %772 = xor i64 4, %756
  %773 = xor i64 %772, %759
  %774 = lshr i64 %773, 4
  %775 = trunc i64 %774 to i8
  %776 = and i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %776, i8* %777, align 1, !tbaa !2447
  %778 = icmp eq i64 %759, 0
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %779, i8* %780, align 1, !tbaa !2448
  %781 = lshr i64 %759, 63
  %782 = trunc i64 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2449
  %784 = lshr i64 %756, 63
  %785 = xor i64 %781, %784
  %786 = add nuw nsw i64 %785, %781
  %787 = icmp eq i64 %786, 2
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %788, i8* %789, align 1, !tbaa !2450
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 8
  %792 = load i64, i64* %RCX
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 4
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %791 to i64*
  store i64 %792, i64* %795
  %796 = load i64, i64* %RAX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 3
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RAX
  %803 = mul i64 %802, 8
  %804 = add i64 %803, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 8
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %RAX, align 8, !tbaa !2428
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 40
  %811 = load i64, i64* %RAX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %810 to i64*
  store i64 %811, i64* %814
  %815 = load i64, i64* %PC
  %816 = sub i64 %815, 1301
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %816, i64* %819, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 12
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 7
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  store i32 31, i32* %824
  br label %block_400b6f

block_400654:                                     ; preds = %block_400586
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 12
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 7
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 5, i32* %829
  %830 = load i64, i64* %PC
  %831 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %830, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %831

block_40074e:                                     ; preds = %block_400586
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 12
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 7
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i32*
  store i32 10, i32* %836
  %837 = load i64, i64* %PC
  %838 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %837, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %838

block_400848:                                     ; preds = %block_400586
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 12
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 7
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  store i32 15, i32* %843
  %844 = load i64, i64* %PC
  %845 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %844, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %845

block_4006ea:                                     ; preds = %block_400586
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 12
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 7
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i32*
  store i32 8, i32* %850
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 12
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i32*
  %856 = load i32, i32* %855
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDI, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = sub i64 %858, 484
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 5
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  store i64 %863, i64* %PC
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %865 = load i64, i64* %864, align 8, !tbaa !2428
  %866 = add i64 %865, -8
  %867 = inttoptr i64 %866 to i64*
  store i64 %861, i64* %867
  store i64 %866, i64* %864, align 8, !tbaa !2428
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %859, i64* %868, align 8, !tbaa !2428
  %869 = load i64, i64* %PC
  %870 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %869, %struct.Memory* %MEMORY.1)
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 8
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i64*
  %876 = load i64, i64* %875
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = load i64, i64* %RAX
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 3
  store i64 %879, i64* %PC
  store i64 %877, i64* %RCX, align 8, !tbaa !2428
  %880 = load i64, i64* %RCX
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = add i64 4, %880
  store i64 %883, i64* %RCX, align 8, !tbaa !2428
  %884 = icmp ult i64 %883, %880
  %885 = icmp ult i64 %883, 4
  %886 = or i1 %884, %885
  %887 = zext i1 %886 to i8
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %887, i8* %888, align 1, !tbaa !2432
  %889 = trunc i64 %883 to i32
  %890 = and i32 %889, 255
  %891 = call i32 @llvm.ctpop.i32(i32 %890) #16
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  %894 = xor i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %894, i8* %895, align 1, !tbaa !2446
  %896 = xor i64 4, %880
  %897 = xor i64 %896, %883
  %898 = lshr i64 %897, 4
  %899 = trunc i64 %898 to i8
  %900 = and i8 %899, 1
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %900, i8* %901, align 1, !tbaa !2447
  %902 = icmp eq i64 %883, 0
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %903, i8* %904, align 1, !tbaa !2448
  %905 = lshr i64 %883, 63
  %906 = trunc i64 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %906, i8* %907, align 1, !tbaa !2449
  %908 = lshr i64 %880, 63
  %909 = xor i64 %905, %908
  %910 = add nuw nsw i64 %909, %905
  %911 = icmp eq i64 %910, 2
  %912 = zext i1 %911 to i8
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %912, i8* %913, align 1, !tbaa !2450
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 8
  %916 = load i64, i64* %RCX
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 4
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %915 to i64*
  store i64 %916, i64* %919
  %920 = load i64, i64* %RAX
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 3
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %920 to i32*
  %924 = load i32, i32* %923
  %925 = sext i32 %924 to i64
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = load i64, i64* %RAX
  %927 = mul i64 %926, 8
  %928 = add i64 %927, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 8
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i64*
  %932 = load i64, i64* %931
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 40
  %935 = load i64, i64* %RAX
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC
  %938 = inttoptr i64 %934 to i64*
  store i64 %935, i64* %938
  %939 = load i64, i64* %PC
  %940 = sub i64 %939, 401
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 5
  store i64 %942, i64* %PC
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %940, i64* %943, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %944 = load i64, i64* %RBP
  %945 = sub i64 %944, 12
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 7
  store i64 %947, i64* %PC
  %948 = inttoptr i64 %945 to i32*
  store i32 20, i32* %948
  %949 = load i64, i64* %PC
  %950 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %949, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %950

block_40058c:                                     ; preds = %block_400586
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 12
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 7
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i32*
  store i32 1, i32* %955
  %956 = load i64, i64* %PC
  %957 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %956, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %957

block_400a3c:                                     ; preds = %block_400586
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 12
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 7
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i32*
  store i32 25, i32* %962
  %963 = load i64, i64* %PC
  %964 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %963, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %964

block_400b36:                                     ; preds = %block_400586
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 12
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 7
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i32*
  store i32 30, i32* %969
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 12
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 3
  store i64 %973, i64* %PC
  %974 = inttoptr i64 %971 to i32*
  %975 = load i32, i32* %974
  %976 = zext i32 %975 to i64
  store i64 %976, i64* %RDI, align 8, !tbaa !2428
  %977 = load i64, i64* %PC
  %978 = sub i64 %977, 1584
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 5
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 5
  store i64 %982, i64* %PC
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %984 = load i64, i64* %983, align 8, !tbaa !2428
  %985 = add i64 %984, -8
  %986 = inttoptr i64 %985 to i64*
  store i64 %980, i64* %986
  store i64 %985, i64* %983, align 8, !tbaa !2428
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %978, i64* %987, align 8, !tbaa !2428
  %988 = load i64, i64* %PC
  %989 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %988, %struct.Memory* %MEMORY.1)
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 8
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 4
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i64*
  %995 = load i64, i64* %994
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RAX
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 3
  store i64 %998, i64* %PC
  store i64 %996, i64* %RCX, align 8, !tbaa !2428
  %999 = load i64, i64* %RCX
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 4
  store i64 %1001, i64* %PC
  %1002 = add i64 4, %999
  store i64 %1002, i64* %RCX, align 8, !tbaa !2428
  %1003 = icmp ult i64 %1002, %999
  %1004 = icmp ult i64 %1002, 4
  %1005 = or i1 %1003, %1004
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1006, i8* %1007, align 1, !tbaa !2432
  %1008 = trunc i64 %1002 to i32
  %1009 = and i32 %1008, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i64 4, %999
  %1016 = xor i64 %1015, %1002
  %1017 = lshr i64 %1016, 4
  %1018 = trunc i64 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1019, i8* %1020, align 1, !tbaa !2447
  %1021 = icmp eq i64 %1002, 0
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1022, i8* %1023, align 1, !tbaa !2448
  %1024 = lshr i64 %1002, 63
  %1025 = trunc i64 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1025, i8* %1026, align 1, !tbaa !2449
  %1027 = lshr i64 %999, 63
  %1028 = xor i64 %1024, %1027
  %1029 = add nuw nsw i64 %1028, %1024
  %1030 = icmp eq i64 %1029, 2
  %1031 = zext i1 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1031, i8* %1032, align 1, !tbaa !2450
  %1033 = load i64, i64* %RBP
  %1034 = sub i64 %1033, 8
  %1035 = load i64, i64* %RCX
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1034 to i64*
  store i64 %1035, i64* %1038
  %1039 = load i64, i64* %RAX
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 3
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i32*
  %1043 = load i32, i32* %1042
  %1044 = sext i32 %1043 to i64
  store i64 %1044, i64* %RAX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RAX
  %1046 = mul i64 %1045, 8
  %1047 = add i64 %1046, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 8
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1047 to i64*
  %1051 = load i64, i64* %1050
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RBP
  %1053 = sub i64 %1052, 40
  %1054 = load i64, i64* %RAX
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 4
  store i64 %1056, i64* %PC
  %1057 = inttoptr i64 %1053 to i64*
  store i64 %1054, i64* %1057
  %1058 = load i64, i64* %PC
  %1059 = sub i64 %1058, 1501
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 5
  store i64 %1061, i64* %PC
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1059, i64* %1062, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400b36, %block_4006ea, %block_400a6e, %block_400b6f, %block_400974, %block_4008ac, %block_4007b2, %block_4006b8, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %594, %block_400b6f ], [ %870, %block_4006ea ], [ %746, %block_400a6e ], [ %494, %block_400974 ], [ %270, %block_4007b2 ], [ %172, %block_4006b8 ], [ %46, %block_4005f0 ], [ %368, %block_4008ac ], [ %989, %block_400b36 ]
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 40
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i64*
  %1068 = load i64, i64* %1067
  store i64 %1068, i64* %RAX, align 8, !tbaa !2428
  %1069 = load i64, i64* %RAX
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 2
  store i64 %1071, i64* %PC
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1069, i64* %1072, align 8, !tbaa !2428
  %1073 = load i64, i64* %PC
  switch i64 %1073, label %1123 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4195774, label %block_4005be
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
  ]

block_400622:                                     ; preds = %block_400586
  %1074 = load i64, i64* %RBP
  %1075 = sub i64 %1074, 12
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 7
  store i64 %1077, i64* %PC
  %1078 = inttoptr i64 %1075 to i32*
  store i32 4, i32* %1078
  %1079 = load i64, i64* %PC
  %1080 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %1079, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1080

block_40071c:                                     ; preds = %block_400586
  %1081 = load i64, i64* %RBP
  %1082 = sub i64 %1081, 12
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 7
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1082 to i32*
  store i32 9, i32* %1085
  %1086 = load i64, i64* %PC
  %1087 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1087

block_400816:                                     ; preds = %block_400586
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 12
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 7
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i32*
  store i32 14, i32* %1092
  %1093 = load i64, i64* %PC
  %1094 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1093, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1094

block_400910:                                     ; preds = %block_400586
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 12
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 7
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i32*
  store i32 19, i32* %1099
  %1100 = load i64, i64* %PC
  %1101 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1100, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1101

block_400a0a:                                     ; preds = %block_400586
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 12
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 7
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i32*
  store i32 24, i32* %1106
  %1107 = load i64, i64* %PC
  %1108 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1107, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1108

block_400b04:                                     ; preds = %block_400586
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 12
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 7
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1110 to i32*
  store i32 29, i32* %1113
  %1114 = load i64, i64* %PC
  %1115 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1114, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1115

block_400780:                                     ; preds = %block_400586
  %1116 = load i64, i64* %RBP
  %1117 = sub i64 %1116, 12
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 7
  store i64 %1119, i64* %PC
  %1120 = inttoptr i64 %1117 to i32*
  store i32 11, i32* %1120
  %1121 = load i64, i64* %PC
  %1122 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1121, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1122

; <label>:1123:                                   ; preds = %block_400586
  %1124 = load i64, i64* %PC
  %1125 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1124, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1125
}

; Function Attrs: noinline
define %struct.Memory* @sub_400490_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400490:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4004c8, label %block_4004b3

block_4004bd:                                     ; preds = %block_4004b3
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195530, label %block_4004ca
    i64 4195525, label %block_4004c5
  ]

block_4004ca:                                     ; preds = %block_4004bd
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_4004b3:                                     ; preds = %block_400490
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4004c8, label %block_4004bd

block_4004c8:                                     ; preds = %block_4004c5, %block_4004b3, %block_400490
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400490 ], [ %2, %block_4004b3 ], [ %2, %block_4004c5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004c5:                                     ; preds = %block_4004bd
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4004c8

; <label>:270:                                    ; preds = %block_4004bd
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009ad(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4009ad

block_4005f0:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 3, i32* %26
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 12
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %28 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %RDI, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = sub i64 %34, 234
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 5
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %35, i64* %44, align 8, !tbaa !2428
  %45 = load i64, i64* %PC
  %46 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %53 = load i64, i64* %RAX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RCX, align 8, !tbaa !2428
  %56 = load i64, i64* %RCX
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = add i64 4, %56
  store i64 %59, i64* %RCX, align 8, !tbaa !2428
  %60 = icmp ult i64 %59, %56
  %61 = icmp ult i64 %59, 4
  %62 = or i1 %60, %61
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %63, i8* %64, align 1, !tbaa !2432
  %65 = trunc i64 %59 to i32
  %66 = and i32 %65, 255
  %67 = call i32 @llvm.ctpop.i32(i32 %66) #16
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %70, i8* %71, align 1, !tbaa !2446
  %72 = xor i64 4, %56
  %73 = xor i64 %72, %59
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = icmp eq i64 %59, 0
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = lshr i64 %59, 63
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %82, i8* %83, align 1, !tbaa !2449
  %84 = lshr i64 %56, 63
  %85 = xor i64 %81, %84
  %86 = add nuw nsw i64 %85, %81
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RCX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = load i64, i64* %RAX
  %103 = mul i64 %102, 8
  %104 = add i64 %103, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 8
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 40
  %111 = load i64, i64* %RAX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %PC
  %116 = sub i64 %115, 151
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %119, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 13, i32* %124
  %125 = load i64, i64* %PC
  %126 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %125, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %126

block_4008de:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 18, i32* %131
  %132 = load i64, i64* %PC
  %133 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %132, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %133

block_4009d8:                                     ; preds = %block_400586
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 12
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 7
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  store i32 23, i32* %138
  %139 = load i64, i64* %PC
  %140 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %139, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %140

block_400ad2:                                     ; preds = %block_400586
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 12
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 7
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i32*
  store i32 28, i32* %145
  %146 = load i64, i64* %PC
  %147 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %146, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %147

block_4006b8:                                     ; preds = %block_400586
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 12
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 7
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  store i32 7, i32* %152
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 12
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to i32*
  %158 = load i32, i32* %157
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %160 = load i64, i64* %PC
  %161 = sub i64 %160, 434
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %167 = load i64, i64* %166, align 8, !tbaa !2428
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  store i64 %163, i64* %169
  store i64 %168, i64* %166, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %161, i64* %170, align 8, !tbaa !2428
  %171 = load i64, i64* %PC
  %172 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 8
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %RAX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  store i64 %179, i64* %RCX, align 8, !tbaa !2428
  %182 = load i64, i64* %RCX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = add i64 4, %182
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = icmp ult i64 %185, %182
  %187 = icmp ult i64 %185, 4
  %188 = or i1 %186, %187
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %189, i8* %190, align 1, !tbaa !2432
  %191 = trunc i64 %185 to i32
  %192 = and i32 %191, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i64 4, %182
  %199 = xor i64 %198, %185
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = icmp eq i64 %185, 0
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = lshr i64 %185, 63
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i64 %182, 63
  %211 = xor i64 %207, %210
  %212 = add nuw nsw i64 %211, %207
  %213 = icmp eq i64 %212, 2
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 8
  %218 = load i64, i64* %RCX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = load i64, i64* %RAX
  %229 = mul i64 %228, 8
  %230 = add i64 %229, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 8
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 40
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 4
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %236 to i64*
  store i64 %237, i64* %240
  %241 = load i64, i64* %PC
  %242 = sub i64 %241, 351
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %242, i64* %245, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 12
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 7
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  store i32 12, i32* %250
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 12
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDI, align 8, !tbaa !2428
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 684
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 8
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = load i64, i64* %RAX
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %280 = load i64, i64* %RCX
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = add i64 4, %280
  store i64 %283, i64* %RCX, align 8, !tbaa !2428
  %284 = icmp ult i64 %283, %280
  %285 = icmp ult i64 %283, 4
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %287, i8* %288, align 1, !tbaa !2432
  %289 = trunc i64 %283 to i32
  %290 = and i32 %289, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i64 4, %280
  %297 = xor i64 %296, %283
  %298 = lshr i64 %297, 4
  %299 = trunc i64 %298 to i8
  %300 = and i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = icmp eq i64 %283, 0
  %303 = zext i1 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %303, i8* %304, align 1, !tbaa !2448
  %305 = lshr i64 %283, 63
  %306 = trunc i64 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = lshr i64 %280, 63
  %309 = xor i64 %305, %308
  %310 = add nuw nsw i64 %309, %305
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %312, i8* %313, align 1, !tbaa !2450
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 8
  %316 = load i64, i64* %RCX
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %RAX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 3
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %320 to i32*
  %324 = load i32, i32* %323
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %RAX, align 8, !tbaa !2428
  %326 = load i64, i64* %RAX
  %327 = mul i64 %326, 8
  %328 = add i64 %327, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 8
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 40
  %335 = load i64, i64* %RAX
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 4
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %334 to i64*
  store i64 %335, i64* %338
  %339 = load i64, i64* %PC
  %340 = sub i64 %339, 601
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 5
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %340, i64* %343, align 8, !tbaa !2428
  br label %block_400586

block_4009ad:                                     ; preds = %block_4009a6, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4009a6 ]
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 12
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %351 = load i64, i64* %PC
  %352 = sub i64 %351, 1184
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 5
  store i64 %356, i64* %PC
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %358 = load i64, i64* %357, align 8, !tbaa !2428
  %359 = add i64 %358, -8
  %360 = inttoptr i64 %359 to i64*
  store i64 %354, i64* %360
  store i64 %359, i64* %357, align 8, !tbaa !2428
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %352, i64* %361, align 8, !tbaa !2428
  %362 = load i64, i64* %PC
  %363 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %362, %struct.Memory* %MEMORY.0)
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 8
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 4
  store i64 %367, i64* %PC
  %368 = inttoptr i64 %365 to i64*
  %369 = load i64, i64* %368
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = load i64, i64* %RAX
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC
  store i64 %370, i64* %RCX, align 8, !tbaa !2428
  %373 = load i64, i64* %RCX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = add i64 4, %373
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = icmp ult i64 %376, %373
  %378 = icmp ult i64 %376, 4
  %379 = or i1 %377, %378
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %380, i8* %381, align 1, !tbaa !2432
  %382 = trunc i64 %376 to i32
  %383 = and i32 %382, 255
  %384 = call i32 @llvm.ctpop.i32(i32 %383) #16
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %387, i8* %388, align 1, !tbaa !2446
  %389 = xor i64 4, %373
  %390 = xor i64 %389, %376
  %391 = lshr i64 %390, 4
  %392 = trunc i64 %391 to i8
  %393 = and i8 %392, 1
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %393, i8* %394, align 1, !tbaa !2447
  %395 = icmp eq i64 %376, 0
  %396 = zext i1 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %396, i8* %397, align 1, !tbaa !2448
  %398 = lshr i64 %376, 63
  %399 = trunc i64 %398 to i8
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %399, i8* %400, align 1, !tbaa !2449
  %401 = lshr i64 %373, 63
  %402 = xor i64 %398, %401
  %403 = add nuw nsw i64 %402, %398
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %405, i8* %406, align 1, !tbaa !2450
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 8
  %409 = load i64, i64* %RCX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %RAX
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416
  %418 = sext i32 %417 to i64
  store i64 %418, i64* %RAX, align 8, !tbaa !2428
  %419 = load i64, i64* %RAX
  %420 = mul i64 %419, 8
  %421 = add i64 %420, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 8
  store i64 %423, i64* %PC
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 40
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %427 to i64*
  store i64 %428, i64* %431
  %432 = load i64, i64* %PC
  %433 = sub i64 %432, 1101
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %433, i64* %436, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 7
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  store i32 17, i32* %441
  %442 = load i64, i64* %RBP
  %443 = sub i64 %442, 12
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 3
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i32*
  %447 = load i32, i32* %446
  %448 = zext i32 %447 to i64
  store i64 %448, i64* %RDI, align 8, !tbaa !2428
  %449 = load i64, i64* %PC
  %450 = sub i64 %449, 934
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 5
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 5
  store i64 %454, i64* %PC
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %456 = load i64, i64* %455, align 8, !tbaa !2428
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %452, i64* %458
  store i64 %457, i64* %455, align 8, !tbaa !2428
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %450, i64* %459, align 8, !tbaa !2428
  %460 = load i64, i64* %PC
  %461 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %460, %struct.Memory* %MEMORY.1)
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 8
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 4
  store i64 %465, i64* %PC
  %466 = inttoptr i64 %463 to i64*
  %467 = load i64, i64* %466
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = load i64, i64* %RAX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %471 = load i64, i64* %RCX
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 4
  store i64 %473, i64* %PC
  %474 = add i64 4, %471
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = icmp ult i64 %474, %471
  %476 = icmp ult i64 %474, 4
  %477 = or i1 %475, %476
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %478, i8* %479, align 1, !tbaa !2432
  %480 = trunc i64 %474 to i32
  %481 = and i32 %480, 255
  %482 = call i32 @llvm.ctpop.i32(i32 %481) #16
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %485, i8* %486, align 1, !tbaa !2446
  %487 = xor i64 4, %471
  %488 = xor i64 %487, %474
  %489 = lshr i64 %488, 4
  %490 = trunc i64 %489 to i8
  %491 = and i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %491, i8* %492, align 1, !tbaa !2447
  %493 = icmp eq i64 %474, 0
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %494, i8* %495, align 1, !tbaa !2448
  %496 = lshr i64 %474, 63
  %497 = trunc i64 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2449
  %499 = lshr i64 %471, 63
  %500 = xor i64 %496, %499
  %501 = add nuw nsw i64 %500, %496
  %502 = icmp eq i64 %501, 2
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %503, i8* %504, align 1, !tbaa !2450
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 8
  %507 = load i64, i64* %RCX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %506 to i64*
  store i64 %507, i64* %510
  %511 = load i64, i64* %RAX
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 3
  store i64 %513, i64* %PC
  %514 = inttoptr i64 %511 to i32*
  %515 = load i32, i32* %514
  %516 = sext i32 %515 to i64
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = load i64, i64* %RAX
  %518 = mul i64 %517, 8
  %519 = add i64 %518, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 8
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i64*
  %523 = load i64, i64* %522
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 40
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 4
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %525 to i64*
  store i64 %526, i64* %529
  %530 = load i64, i64* %PC
  %531 = sub i64 %530, 851
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %531, i64* %534, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 7
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  store i32 22, i32* %539
  br label %block_4009ad

block_400aa0:                                     ; preds = %block_400586
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 12
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 7
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  store i32 27, i32* %544
  %545 = load i64, i64* %PC
  %546 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %545, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %546

block_400686:                                     ; preds = %block_400586
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 12
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 7
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i32*
  store i32 6, i32* %551
  %552 = load i64, i64* %PC
  %553 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %552, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %553

block_40087a:                                     ; preds = %block_400586
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 12
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  store i32 16, i32* %558
  %559 = load i64, i64* %PC
  %560 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %559, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %560

block_400974:                                     ; preds = %block_400586
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 12
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 7
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  store i32 21, i32* %565
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 12
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 3
  store i64 %569, i64* %PC
  %570 = inttoptr i64 %567 to i32*
  %571 = load i32, i32* %570
  %572 = zext i32 %571 to i64
  store i64 %572, i64* %RDI, align 8, !tbaa !2428
  %573 = load i64, i64* %PC
  %574 = sub i64 %573, 1134
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  store i64 %578, i64* %PC
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %580 = load i64, i64* %579, align 8, !tbaa !2428
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %576, i64* %582
  store i64 %581, i64* %579, align 8, !tbaa !2428
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %574, i64* %583, align 8, !tbaa !2428
  %584 = load i64, i64* %PC
  %585 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %584, %struct.Memory* %MEMORY.1)
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 8
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 3
  store i64 %594, i64* %PC
  store i64 %592, i64* %RCX, align 8, !tbaa !2428
  %595 = load i64, i64* %RCX
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 4
  store i64 %597, i64* %PC
  %598 = add i64 4, %595
  store i64 %598, i64* %RCX, align 8, !tbaa !2428
  %599 = icmp ult i64 %598, %595
  %600 = icmp ult i64 %598, 4
  %601 = or i1 %599, %600
  %602 = zext i1 %601 to i8
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %602, i8* %603, align 1, !tbaa !2432
  %604 = trunc i64 %598 to i32
  %605 = and i32 %604, 255
  %606 = call i32 @llvm.ctpop.i32(i32 %605) #16
  %607 = trunc i32 %606 to i8
  %608 = and i8 %607, 1
  %609 = xor i8 %608, 1
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %609, i8* %610, align 1, !tbaa !2446
  %611 = xor i64 4, %595
  %612 = xor i64 %611, %598
  %613 = lshr i64 %612, 4
  %614 = trunc i64 %613 to i8
  %615 = and i8 %614, 1
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %615, i8* %616, align 1, !tbaa !2447
  %617 = icmp eq i64 %598, 0
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %618, i8* %619, align 1, !tbaa !2448
  %620 = lshr i64 %598, 63
  %621 = trunc i64 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %621, i8* %622, align 1, !tbaa !2449
  %623 = lshr i64 %595, 63
  %624 = xor i64 %620, %623
  %625 = add nuw nsw i64 %624, %620
  %626 = icmp eq i64 %625, 2
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %627, i8* %628, align 1, !tbaa !2450
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 8
  %631 = load i64, i64* %RCX
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %630 to i64*
  store i64 %631, i64* %634
  %635 = load i64, i64* %RAX
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 3
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i32*
  %639 = load i32, i32* %638
  %640 = sext i32 %639 to i64
  store i64 %640, i64* %RAX, align 8, !tbaa !2428
  %641 = load i64, i64* %RAX
  %642 = mul i64 %641, 8
  %643 = add i64 %642, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 8
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 40
  %650 = load i64, i64* %RAX
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %649 to i64*
  store i64 %650, i64* %653
  %654 = load i64, i64* %PC
  %655 = sub i64 %654, 1051
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  store i64 %657, i64* %PC
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %655, i64* %658, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 12
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 7
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i32*
  store i32 2, i32* %663
  %664 = load i64, i64* %PC
  %665 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %664, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %665

block_400579:                                     ; preds = %block_400586
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 12
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 7
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i32*
  store i32 0, i32* %670
  %671 = load i64, i64* %RSP
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = add i64 48, %671
  store i64 %674, i64* %RSP, align 8, !tbaa !2428
  %675 = icmp ult i64 %674, %671
  %676 = icmp ult i64 %674, 48
  %677 = or i1 %675, %676
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %678, i8* %679, align 1, !tbaa !2432
  %680 = trunc i64 %674 to i32
  %681 = and i32 %680, 255
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %685, i8* %686, align 1, !tbaa !2446
  %687 = xor i64 48, %671
  %688 = xor i64 %687, %674
  %689 = lshr i64 %688, 4
  %690 = trunc i64 %689 to i8
  %691 = and i8 %690, 1
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %691, i8* %692, align 1, !tbaa !2447
  %693 = icmp eq i64 %674, 0
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %694, i8* %695, align 1, !tbaa !2448
  %696 = lshr i64 %674, 63
  %697 = trunc i64 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %697, i8* %698, align 1, !tbaa !2449
  %699 = lshr i64 %671, 63
  %700 = xor i64 %696, %699
  %701 = add nuw nsw i64 %700, %696
  %702 = icmp eq i64 %701, 2
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %703, i8* %704, align 1, !tbaa !2450
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 1
  store i64 %706, i64* %PC
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %708 = load i64, i64* %707, align 8, !tbaa !2428
  %709 = add i64 %708, 8
  %710 = inttoptr i64 %708 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %RBP, align 8, !tbaa !2428
  store i64 %709, i64* %707, align 8, !tbaa !2428
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 1
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %716 = load i64, i64* %715, align 8, !tbaa !2428
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  store i64 %718, i64* %714, align 8, !tbaa !2428
  %719 = add i64 %716, 8
  store i64 %719, i64* %715, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a6e:                                     ; preds = %block_400586
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 7
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  store i32 26, i32* %724
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 12
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 3
  store i64 %728, i64* %PC
  %729 = inttoptr i64 %726 to i32*
  %730 = load i32, i32* %729
  %731 = zext i32 %730 to i64
  store i64 %731, i64* %RDI, align 8, !tbaa !2428
  %732 = load i64, i64* %PC
  %733 = sub i64 %732, 1384
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 5
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 5
  store i64 %737, i64* %PC
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %739 = load i64, i64* %738, align 8, !tbaa !2428
  %740 = add i64 %739, -8
  %741 = inttoptr i64 %740 to i64*
  store i64 %735, i64* %741
  store i64 %740, i64* %738, align 8, !tbaa !2428
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %733, i64* %742, align 8, !tbaa !2428
  %743 = load i64, i64* %PC
  %744 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %743, %struct.Memory* %MEMORY.1)
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %754 = load i64, i64* %RCX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = add i64 4, %754
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = icmp ult i64 %757, %754
  %759 = icmp ult i64 %757, 4
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %761, i8* %762, align 1, !tbaa !2432
  %763 = trunc i64 %757 to i32
  %764 = and i32 %763, 255
  %765 = call i32 @llvm.ctpop.i32(i32 %764) #16
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %768, i8* %769, align 1, !tbaa !2446
  %770 = xor i64 4, %754
  %771 = xor i64 %770, %757
  %772 = lshr i64 %771, 4
  %773 = trunc i64 %772 to i8
  %774 = and i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = icmp eq i64 %757, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i64 %757, 63
  %780 = trunc i64 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = lshr i64 %754, 63
  %783 = xor i64 %779, %782
  %784 = add nuw nsw i64 %783, %779
  %785 = icmp eq i64 %784, 2
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = load i64, i64* %RBP
  %789 = sub i64 %788, 8
  %790 = load i64, i64* %RCX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %789 to i64*
  store i64 %790, i64* %793
  %794 = load i64, i64* %RAX
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797
  %799 = sext i32 %798 to i64
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RAX
  %801 = mul i64 %800, 8
  %802 = add i64 %801, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 8
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i64*
  %806 = load i64, i64* %805
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 40
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %808 to i64*
  store i64 %809, i64* %812
  %813 = load i64, i64* %PC
  %814 = sub i64 %813, 1301
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 5
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %814, i64* %817, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 31, i32* %822
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 12
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 3
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RDI, align 8, !tbaa !2428
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 1634
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %837 = load i64, i64* %836, align 8, !tbaa !2428
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  store i64 %833, i64* %839
  store i64 %838, i64* %836, align 8, !tbaa !2428
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %840, align 8, !tbaa !2428
  %841 = load i64, i64* %PC
  %842 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %841, %struct.Memory* %MEMORY.1)
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 8
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  store i64 %849, i64* %RCX, align 8, !tbaa !2428
  %852 = load i64, i64* %RCX
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = add i64 4, %852
  store i64 %855, i64* %RCX, align 8, !tbaa !2428
  %856 = icmp ult i64 %855, %852
  %857 = icmp ult i64 %855, 4
  %858 = or i1 %856, %857
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %859, i8* %860, align 1, !tbaa !2432
  %861 = trunc i64 %855 to i32
  %862 = and i32 %861, 255
  %863 = call i32 @llvm.ctpop.i32(i32 %862) #16
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %866, i8* %867, align 1, !tbaa !2446
  %868 = xor i64 4, %852
  %869 = xor i64 %868, %855
  %870 = lshr i64 %869, 4
  %871 = trunc i64 %870 to i8
  %872 = and i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = icmp eq i64 %855, 0
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %875, i8* %876, align 1, !tbaa !2448
  %877 = lshr i64 %855, 63
  %878 = trunc i64 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %878, i8* %879, align 1, !tbaa !2449
  %880 = lshr i64 %852, 63
  %881 = xor i64 %877, %880
  %882 = add nuw nsw i64 %881, %877
  %883 = icmp eq i64 %882, 2
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 8
  %888 = load i64, i64* %RCX
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %887 to i64*
  store i64 %888, i64* %891
  %892 = load i64, i64* %RAX
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895
  %897 = sext i32 %896 to i64
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RAX
  %899 = mul i64 %898, 8
  %900 = add i64 %899, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 8
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 40
  %907 = load i64, i64* %RAX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %906 to i64*
  store i64 %907, i64* %910
  %911 = load i64, i64* %PC
  %912 = sub i64 %911, 1551
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 5
  store i64 %914, i64* %PC
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %912, i64* %915, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 7
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  store i32 5, i32* %920
  %921 = load i64, i64* %PC
  %922 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %921, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %922

block_40074e:                                     ; preds = %block_400586
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 12
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i32*
  store i32 10, i32* %927
  %928 = load i64, i64* %PC
  %929 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %928, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %929

block_400848:                                     ; preds = %block_400586
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 12
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 7
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to i32*
  store i32 15, i32* %934
  %935 = load i64, i64* %PC
  %936 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %935, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %936

block_4006ea:                                     ; preds = %block_400586
  %937 = load i64, i64* %RBP
  %938 = sub i64 %937, 12
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 7
  store i64 %940, i64* %PC
  %941 = inttoptr i64 %938 to i32*
  store i32 8, i32* %941
  %942 = load i64, i64* %RBP
  %943 = sub i64 %942, 12
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 3
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to i32*
  %947 = load i32, i32* %946
  %948 = zext i32 %947 to i64
  store i64 %948, i64* %RDI, align 8, !tbaa !2428
  %949 = load i64, i64* %PC
  %950 = sub i64 %949, 484
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 5
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 5
  store i64 %954, i64* %PC
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %956 = load i64, i64* %955, align 8, !tbaa !2428
  %957 = add i64 %956, -8
  %958 = inttoptr i64 %957 to i64*
  store i64 %952, i64* %958
  store i64 %957, i64* %955, align 8, !tbaa !2428
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %950, i64* %959, align 8, !tbaa !2428
  %960 = load i64, i64* %PC
  %961 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %960, %struct.Memory* %MEMORY.1)
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 8
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 4
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i64*
  %967 = load i64, i64* %966
  store i64 %967, i64* %RAX, align 8, !tbaa !2428
  %968 = load i64, i64* %RAX
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 3
  store i64 %970, i64* %PC
  store i64 %968, i64* %RCX, align 8, !tbaa !2428
  %971 = load i64, i64* %RCX
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 4
  store i64 %973, i64* %PC
  %974 = add i64 4, %971
  store i64 %974, i64* %RCX, align 8, !tbaa !2428
  %975 = icmp ult i64 %974, %971
  %976 = icmp ult i64 %974, 4
  %977 = or i1 %975, %976
  %978 = zext i1 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %978, i8* %979, align 1, !tbaa !2432
  %980 = trunc i64 %974 to i32
  %981 = and i32 %980, 255
  %982 = call i32 @llvm.ctpop.i32(i32 %981) #16
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = xor i8 %984, 1
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %985, i8* %986, align 1, !tbaa !2446
  %987 = xor i64 4, %971
  %988 = xor i64 %987, %974
  %989 = lshr i64 %988, 4
  %990 = trunc i64 %989 to i8
  %991 = and i8 %990, 1
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %991, i8* %992, align 1, !tbaa !2447
  %993 = icmp eq i64 %974, 0
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %994, i8* %995, align 1, !tbaa !2448
  %996 = lshr i64 %974, 63
  %997 = trunc i64 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %997, i8* %998, align 1, !tbaa !2449
  %999 = lshr i64 %971, 63
  %1000 = xor i64 %996, %999
  %1001 = add nuw nsw i64 %1000, %996
  %1002 = icmp eq i64 %1001, 2
  %1003 = zext i1 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1003, i8* %1004, align 1, !tbaa !2450
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 8
  %1007 = load i64, i64* %RCX
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1006 to i64*
  store i64 %1007, i64* %1010
  %1011 = load i64, i64* %RAX
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 3
  store i64 %1013, i64* %PC
  %1014 = inttoptr i64 %1011 to i32*
  %1015 = load i32, i32* %1014
  %1016 = sext i32 %1015 to i64
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = load i64, i64* %RAX
  %1018 = mul i64 %1017, 8
  %1019 = add i64 %1018, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 8
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = load i64, i64* %RBP
  %1025 = sub i64 %1024, 40
  %1026 = load i64, i64* %RAX
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 4
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1025 to i64*
  store i64 %1026, i64* %1029
  %1030 = load i64, i64* %PC
  %1031 = sub i64 %1030, 401
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  store i64 %1033, i64* %PC
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1031, i64* %1034, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 12
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 7
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  store i32 20, i32* %1039
  %1040 = load i64, i64* %PC
  %1041 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1040, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1041

block_40058c:                                     ; preds = %block_400586
  %1042 = load i64, i64* %RBP
  %1043 = sub i64 %1042, 12
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 7
  store i64 %1045, i64* %PC
  %1046 = inttoptr i64 %1043 to i32*
  store i32 1, i32* %1046
  %1047 = load i64, i64* %PC
  %1048 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1047, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1048

block_400a3c:                                     ; preds = %block_400586
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 12
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 7
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  store i32 25, i32* %1053
  %1054 = load i64, i64* %PC
  %1055 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1054, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1055

block_400b36:                                     ; preds = %block_400586
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 12
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 7
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i32*
  store i32 30, i32* %1060
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 12
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 3
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = zext i32 %1066 to i64
  store i64 %1067, i64* %RDI, align 8, !tbaa !2428
  %1068 = load i64, i64* %PC
  %1069 = sub i64 %1068, 1584
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 5
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 5
  store i64 %1073, i64* %PC
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1075 = load i64, i64* %1074, align 8, !tbaa !2428
  %1076 = add i64 %1075, -8
  %1077 = inttoptr i64 %1076 to i64*
  store i64 %1071, i64* %1077
  store i64 %1076, i64* %1074, align 8, !tbaa !2428
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1069, i64* %1078, align 8, !tbaa !2428
  %1079 = load i64, i64* %PC
  %1080 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1079, %struct.Memory* %MEMORY.1)
  %1081 = load i64, i64* %RBP
  %1082 = sub i64 %1081, 8
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 4
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1082 to i64*
  %1086 = load i64, i64* %1085
  store i64 %1086, i64* %RAX, align 8, !tbaa !2428
  %1087 = load i64, i64* %RAX
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 3
  store i64 %1089, i64* %PC
  store i64 %1087, i64* %RCX, align 8, !tbaa !2428
  %1090 = load i64, i64* %RCX
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 4
  store i64 %1092, i64* %PC
  %1093 = add i64 4, %1090
  store i64 %1093, i64* %RCX, align 8, !tbaa !2428
  %1094 = icmp ult i64 %1093, %1090
  %1095 = icmp ult i64 %1093, 4
  %1096 = or i1 %1094, %1095
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1097, i8* %1098, align 1, !tbaa !2432
  %1099 = trunc i64 %1093 to i32
  %1100 = and i32 %1099, 255
  %1101 = call i32 @llvm.ctpop.i32(i32 %1100) #16
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  %1104 = xor i8 %1103, 1
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1104, i8* %1105, align 1, !tbaa !2446
  %1106 = xor i64 4, %1090
  %1107 = xor i64 %1106, %1093
  %1108 = lshr i64 %1107, 4
  %1109 = trunc i64 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1110, i8* %1111, align 1, !tbaa !2447
  %1112 = icmp eq i64 %1093, 0
  %1113 = zext i1 %1112 to i8
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1113, i8* %1114, align 1, !tbaa !2448
  %1115 = lshr i64 %1093, 63
  %1116 = trunc i64 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1116, i8* %1117, align 1, !tbaa !2449
  %1118 = lshr i64 %1090, 63
  %1119 = xor i64 %1115, %1118
  %1120 = add nuw nsw i64 %1119, %1115
  %1121 = icmp eq i64 %1120, 2
  %1122 = zext i1 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1122, i8* %1123, align 1, !tbaa !2450
  %1124 = load i64, i64* %RBP
  %1125 = sub i64 %1124, 8
  %1126 = load i64, i64* %RCX
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 4
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1125 to i64*
  store i64 %1126, i64* %1129
  %1130 = load i64, i64* %RAX
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 3
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i32*
  %1134 = load i32, i32* %1133
  %1135 = sext i32 %1134 to i64
  store i64 %1135, i64* %RAX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RAX
  %1137 = mul i64 %1136, 8
  %1138 = add i64 %1137, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 8
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 40
  %1145 = load i64, i64* %RAX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 4
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1144 to i64*
  store i64 %1145, i64* %1148
  %1149 = load i64, i64* %PC
  %1150 = sub i64 %1149, 1501
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1150, i64* %1153, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400b36, %block_4006ea, %block_400b68, %block_400a6e, %block_400974, %block_4008ac, %block_4009ad, %block_4007b2, %block_4006b8, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %363, %block_4009ad ], [ %961, %block_4006ea ], [ %842, %block_400b68 ], [ %744, %block_400a6e ], [ %585, %block_400974 ], [ %270, %block_4007b2 ], [ %172, %block_4006b8 ], [ %46, %block_4005f0 ], [ %461, %block_4008ac ], [ %1080, %block_400b36 ]
  %1154 = load i64, i64* %RBP
  %1155 = sub i64 %1154, 40
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 4
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1155 to i64*
  %1159 = load i64, i64* %1158
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = load i64, i64* %RAX
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 2
  store i64 %1162, i64* %PC
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1160, i64* %1163, align 8, !tbaa !2428
  %1164 = load i64, i64* %PC
  switch i64 %1164, label %1214 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4195774, label %block_4005be
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
  ]

block_400622:                                     ; preds = %block_400586
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 12
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 7
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to i32*
  store i32 4, i32* %1169
  %1170 = load i64, i64* %PC
  %1171 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %1170, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1171

block_40071c:                                     ; preds = %block_400586
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 12
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 7
  store i64 %1175, i64* %PC
  %1176 = inttoptr i64 %1173 to i32*
  store i32 9, i32* %1176
  %1177 = load i64, i64* %PC
  %1178 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1177, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1178

block_400816:                                     ; preds = %block_400586
  %1179 = load i64, i64* %RBP
  %1180 = sub i64 %1179, 12
  %1181 = load i64, i64* %PC
  %1182 = add i64 %1181, 7
  store i64 %1182, i64* %PC
  %1183 = inttoptr i64 %1180 to i32*
  store i32 14, i32* %1183
  %1184 = load i64, i64* %PC
  %1185 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1185

block_400910:                                     ; preds = %block_400586
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 12
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 7
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i32*
  store i32 19, i32* %1190
  %1191 = load i64, i64* %PC
  %1192 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1191, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1192

block_400a0a:                                     ; preds = %block_400586
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 12
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 7
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i32*
  store i32 24, i32* %1197
  %1198 = load i64, i64* %PC
  %1199 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1198, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1199

block_400b04:                                     ; preds = %block_400586
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 12
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 7
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1201 to i32*
  store i32 29, i32* %1204
  %1205 = load i64, i64* %PC
  %1206 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1205, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1206

block_400780:                                     ; preds = %block_400586
  %1207 = load i64, i64* %RBP
  %1208 = sub i64 %1207, 12
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 7
  store i64 %1210, i64* %PC
  %1211 = inttoptr i64 %1208 to i32*
  store i32 11, i32* %1211
  %1212 = load i64, i64* %PC
  %1213 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1212, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1213

; <label>:1214:                                   ; preds = %block_400586
  %1215 = load i64, i64* %PC
  %1216 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1215, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1216
}

; Function Attrs: noinline
define %struct.Memory* @sub_400629(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400629

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %PC
  %525 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %524, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %525

block_4009d8:                                     ; preds = %block_400586
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 12
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 7
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i32*
  store i32 23, i32* %530
  %531 = load i64, i64* %PC
  %532 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %531, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %532

block_400ad2:                                     ; preds = %block_400586
  %533 = load i64, i64* %RBP
  %534 = sub i64 %533, 12
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 7
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %534 to i32*
  store i32 28, i32* %537
  %538 = load i64, i64* %PC
  %539 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %538, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %539

block_400848:                                     ; preds = %block_400586
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 12
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 7
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  store i32 15, i32* %544
  %545 = load i64, i64* %PC
  %546 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %545, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %546

block_400942:                                     ; preds = %block_400586
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 12
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 7
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i32*
  store i32 20, i32* %551
  %552 = load i64, i64* %PC
  %553 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %552, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %553

block_40074e:                                     ; preds = %block_400586
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 12
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  store i32 10, i32* %558
  %559 = load i64, i64* %PC
  %560 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %559, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %560

block_400579:                                     ; preds = %block_400586
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 12
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 7
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  store i32 0, i32* %565
  %566 = load i64, i64* %RSP
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = add i64 48, %566
  store i64 %569, i64* %RSP, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %566
  %571 = icmp ult i64 %569, 48
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %573, i8* %574, align 1, !tbaa !2432
  %575 = trunc i64 %569 to i32
  %576 = and i32 %575, 255
  %577 = call i32 @llvm.ctpop.i32(i32 %576) #16
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %580, i8* %581, align 1, !tbaa !2446
  %582 = xor i64 48, %566
  %583 = xor i64 %582, %569
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i64 %569, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2448
  %591 = lshr i64 %569, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2449
  %594 = lshr i64 %566, 63
  %595 = xor i64 %591, %594
  %596 = add nuw nsw i64 %595, %591
  %597 = icmp eq i64 %596, 2
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %598, i8* %599, align 1, !tbaa !2450
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 1
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %603 = load i64, i64* %602, align 8, !tbaa !2428
  %604 = add i64 %603, 8
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %RBP, align 8, !tbaa !2428
  store i64 %604, i64* %602, align 8, !tbaa !2428
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 1
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %611 = load i64, i64* %610, align 8, !tbaa !2428
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %609, align 8, !tbaa !2428
  %614 = add i64 %611, 8
  store i64 %614, i64* %610, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a3c:                                     ; preds = %block_400586
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 12
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  store i32 25, i32* %619
  %620 = load i64, i64* %PC
  %621 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %620, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %621

block_4006b8:                                     ; preds = %block_400586
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 7
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  store i32 7, i32* %626
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 12
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i32*
  %632 = load i32, i32* %631
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = sub i64 %634, 434
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 5
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %641 = load i64, i64* %640, align 8, !tbaa !2428
  %642 = add i64 %641, -8
  %643 = inttoptr i64 %642 to i64*
  store i64 %637, i64* %643
  store i64 %642, i64* %640, align 8, !tbaa !2428
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %635, i64* %644, align 8, !tbaa !2428
  %645 = load i64, i64* %PC
  %646 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %645, %struct.Memory* %MEMORY.1)
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %656 = load i64, i64* %RCX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = add i64 4, %656
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = icmp ult i64 %659, %656
  %661 = icmp ult i64 %659, 4
  %662 = or i1 %660, %661
  %663 = zext i1 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %663, i8* %664, align 1, !tbaa !2432
  %665 = trunc i64 %659 to i32
  %666 = and i32 %665, 255
  %667 = call i32 @llvm.ctpop.i32(i32 %666) #16
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %670, i8* %671, align 1, !tbaa !2446
  %672 = xor i64 4, %656
  %673 = xor i64 %672, %659
  %674 = lshr i64 %673, 4
  %675 = trunc i64 %674 to i8
  %676 = and i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %676, i8* %677, align 1, !tbaa !2447
  %678 = icmp eq i64 %659, 0
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %679, i8* %680, align 1, !tbaa !2448
  %681 = lshr i64 %659, 63
  %682 = trunc i64 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %682, i8* %683, align 1, !tbaa !2449
  %684 = lshr i64 %656, 63
  %685 = xor i64 %681, %684
  %686 = add nuw nsw i64 %685, %681
  %687 = icmp eq i64 %686, 2
  %688 = zext i1 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %688, i8* %689, align 1, !tbaa !2450
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 8
  %692 = load i64, i64* %RCX
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %691 to i64*
  store i64 %692, i64* %695
  %696 = load i64, i64* %RAX
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  %700 = load i32, i32* %699
  %701 = sext i32 %700 to i64
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RAX
  %703 = mul i64 %702, 8
  %704 = add i64 %703, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 8
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %704 to i64*
  %708 = load i64, i64* %707
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 40
  %711 = load i64, i64* %RAX
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %710 to i64*
  store i64 %711, i64* %714
  %715 = load i64, i64* %PC
  %716 = sub i64 %715, 351
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 7
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  store i32 30, i32* %724
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 12
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 3
  store i64 %728, i64* %PC
  %729 = inttoptr i64 %726 to i32*
  %730 = load i32, i32* %729
  %731 = zext i32 %730 to i64
  store i64 %731, i64* %RDI, align 8, !tbaa !2428
  %732 = load i64, i64* %PC
  %733 = sub i64 %732, 1584
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 5
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 5
  store i64 %737, i64* %PC
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %739 = load i64, i64* %738, align 8, !tbaa !2428
  %740 = add i64 %739, -8
  %741 = inttoptr i64 %740 to i64*
  store i64 %735, i64* %741
  store i64 %740, i64* %738, align 8, !tbaa !2428
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %733, i64* %742, align 8, !tbaa !2428
  %743 = load i64, i64* %PC
  %744 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %743, %struct.Memory* %MEMORY.1)
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %754 = load i64, i64* %RCX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = add i64 4, %754
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = icmp ult i64 %757, %754
  %759 = icmp ult i64 %757, 4
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %761, i8* %762, align 1, !tbaa !2432
  %763 = trunc i64 %757 to i32
  %764 = and i32 %763, 255
  %765 = call i32 @llvm.ctpop.i32(i32 %764) #16
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %768, i8* %769, align 1, !tbaa !2446
  %770 = xor i64 4, %754
  %771 = xor i64 %770, %757
  %772 = lshr i64 %771, 4
  %773 = trunc i64 %772 to i8
  %774 = and i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = icmp eq i64 %757, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i64 %757, 63
  %780 = trunc i64 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = lshr i64 %754, 63
  %783 = xor i64 %779, %782
  %784 = add nuw nsw i64 %783, %779
  %785 = icmp eq i64 %784, 2
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = load i64, i64* %RBP
  %789 = sub i64 %788, 8
  %790 = load i64, i64* %RCX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %789 to i64*
  store i64 %790, i64* %793
  %794 = load i64, i64* %RAX
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797
  %799 = sext i32 %798 to i64
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RAX
  %801 = mul i64 %800, 8
  %802 = add i64 %801, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 8
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i64*
  %806 = load i64, i64* %805
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 40
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %808 to i64*
  store i64 %809, i64* %812
  %813 = load i64, i64* %PC
  %814 = sub i64 %813, 1501
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 5
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %814, i64* %817, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 2, i32* %822
  %823 = load i64, i64* %PC
  %824 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %823, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %824

block_4008ac:                                     ; preds = %block_400586
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 12
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 7
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 17, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 12
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %837 = load i64, i64* %PC
  %838 = sub i64 %837, 934
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %844 = load i64, i64* %843, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %840, i64* %846
  store i64 %845, i64* %843, align 8, !tbaa !2428
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %838, i64* %847, align 8, !tbaa !2428
  %848 = load i64, i64* %PC
  %849 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %848, %struct.Memory* %MEMORY.1)
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 8
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RAX
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = add i64 4, %859
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = icmp ult i64 %862, %859
  %864 = icmp ult i64 %862, 4
  %865 = or i1 %863, %864
  %866 = zext i1 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %866, i8* %867, align 1, !tbaa !2432
  %868 = trunc i64 %862 to i32
  %869 = and i32 %868, 255
  %870 = call i32 @llvm.ctpop.i32(i32 %869) #16
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  %873 = xor i8 %872, 1
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %873, i8* %874, align 1, !tbaa !2446
  %875 = xor i64 4, %859
  %876 = xor i64 %875, %862
  %877 = lshr i64 %876, 4
  %878 = trunc i64 %877 to i8
  %879 = and i8 %878, 1
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %879, i8* %880, align 1, !tbaa !2447
  %881 = icmp eq i64 %862, 0
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %882, i8* %883, align 1, !tbaa !2448
  %884 = lshr i64 %862, 63
  %885 = trunc i64 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %885, i8* %886, align 1, !tbaa !2449
  %887 = lshr i64 %859, 63
  %888 = xor i64 %884, %887
  %889 = add nuw nsw i64 %888, %884
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %891, i8* %892, align 1, !tbaa !2450
  %893 = load i64, i64* %RBP
  %894 = sub i64 %893, 8
  %895 = load i64, i64* %RCX
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %894 to i64*
  store i64 %895, i64* %898
  %899 = load i64, i64* %RAX
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i32*
  %903 = load i32, i32* %902
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RAX
  %906 = mul i64 %905, 8
  %907 = add i64 %906, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 8
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i64*
  %911 = load i64, i64* %910
  store i64 %911, i64* %RAX, align 8, !tbaa !2428
  %912 = load i64, i64* %RBP
  %913 = sub i64 %912, 40
  %914 = load i64, i64* %RAX
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 4
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %913 to i64*
  store i64 %914, i64* %917
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 851
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %922, align 8, !tbaa !2428
  br label %block_400586

block_400629:                                     ; preds = %block_400622, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400622 ]
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 12
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 3
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i32*
  %928 = load i32, i32* %927
  %929 = zext i32 %928 to i64
  store i64 %929, i64* %RDI, align 8, !tbaa !2428
  %930 = load i64, i64* %PC
  %931 = sub i64 %930, 284
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  store i64 %935, i64* %PC
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %937 = load i64, i64* %936, align 8, !tbaa !2428
  %938 = add i64 %937, -8
  %939 = inttoptr i64 %938 to i64*
  store i64 %933, i64* %939
  store i64 %938, i64* %936, align 8, !tbaa !2428
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %931, i64* %940, align 8, !tbaa !2428
  %941 = load i64, i64* %PC
  %942 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %941, %struct.Memory* %MEMORY.0)
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 8
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i64*
  %948 = load i64, i64* %947
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RAX
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  store i64 %949, i64* %RCX, align 8, !tbaa !2428
  %952 = load i64, i64* %RCX
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = add i64 4, %952
  store i64 %955, i64* %RCX, align 8, !tbaa !2428
  %956 = icmp ult i64 %955, %952
  %957 = icmp ult i64 %955, 4
  %958 = or i1 %956, %957
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2432
  %961 = trunc i64 %955 to i32
  %962 = and i32 %961, 255
  %963 = call i32 @llvm.ctpop.i32(i32 %962) #16
  %964 = trunc i32 %963 to i8
  %965 = and i8 %964, 1
  %966 = xor i8 %965, 1
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %966, i8* %967, align 1, !tbaa !2446
  %968 = xor i64 4, %952
  %969 = xor i64 %968, %955
  %970 = lshr i64 %969, 4
  %971 = trunc i64 %970 to i8
  %972 = and i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %972, i8* %973, align 1, !tbaa !2447
  %974 = icmp eq i64 %955, 0
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %975, i8* %976, align 1, !tbaa !2448
  %977 = lshr i64 %955, 63
  %978 = trunc i64 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %978, i8* %979, align 1, !tbaa !2449
  %980 = lshr i64 %952, 63
  %981 = xor i64 %977, %980
  %982 = add nuw nsw i64 %981, %977
  %983 = icmp eq i64 %982, 2
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %984, i8* %985, align 1, !tbaa !2450
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 8
  %988 = load i64, i64* %RCX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %987 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %RAX
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = inttoptr i64 %992 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RAX
  %999 = mul i64 %998, 8
  %1000 = add i64 %999, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 8
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i64*
  %1004 = load i64, i64* %1003
  store i64 %1004, i64* %RAX, align 8, !tbaa !2428
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 40
  %1007 = load i64, i64* %RAX
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1006 to i64*
  store i64 %1007, i64* %1010
  %1011 = load i64, i64* %PC
  %1012 = sub i64 %1011, 201
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 5
  store i64 %1014, i64* %PC
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1012, i64* %1015, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 7
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  store i32 22, i32* %1020
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 12
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 3
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1022 to i32*
  %1026 = load i32, i32* %1025
  %1027 = zext i32 %1026 to i64
  store i64 %1027, i64* %RDI, align 8, !tbaa !2428
  %1028 = load i64, i64* %PC
  %1029 = sub i64 %1028, 1184
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 5
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  store i64 %1033, i64* %PC
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1035 = load i64, i64* %1034, align 8, !tbaa !2428
  %1036 = add i64 %1035, -8
  %1037 = inttoptr i64 %1036 to i64*
  store i64 %1031, i64* %1037
  store i64 %1036, i64* %1034, align 8, !tbaa !2428
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1029, i64* %1038, align 8, !tbaa !2428
  %1039 = load i64, i64* %PC
  %1040 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1039, %struct.Memory* %MEMORY.1)
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 8
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RAX
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 3
  store i64 %1049, i64* %PC
  store i64 %1047, i64* %RCX, align 8, !tbaa !2428
  %1050 = load i64, i64* %RCX
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = add i64 4, %1050
  store i64 %1053, i64* %RCX, align 8, !tbaa !2428
  %1054 = icmp ult i64 %1053, %1050
  %1055 = icmp ult i64 %1053, 4
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1057, i8* %1058, align 1, !tbaa !2432
  %1059 = trunc i64 %1053 to i32
  %1060 = and i32 %1059, 255
  %1061 = call i32 @llvm.ctpop.i32(i32 %1060) #16
  %1062 = trunc i32 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = xor i8 %1063, 1
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1064, i8* %1065, align 1, !tbaa !2446
  %1066 = xor i64 4, %1050
  %1067 = xor i64 %1066, %1053
  %1068 = lshr i64 %1067, 4
  %1069 = trunc i64 %1068 to i8
  %1070 = and i8 %1069, 1
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1070, i8* %1071, align 1, !tbaa !2447
  %1072 = icmp eq i64 %1053, 0
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1073, i8* %1074, align 1, !tbaa !2448
  %1075 = lshr i64 %1053, 63
  %1076 = trunc i64 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1076, i8* %1077, align 1, !tbaa !2449
  %1078 = lshr i64 %1050, 63
  %1079 = xor i64 %1075, %1078
  %1080 = add nuw nsw i64 %1079, %1075
  %1081 = icmp eq i64 %1080, 2
  %1082 = zext i1 %1081 to i8
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1082, i8* %1083, align 1, !tbaa !2450
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 8
  %1086 = load i64, i64* %RCX
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 4
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1085 to i64*
  store i64 %1086, i64* %1089
  %1090 = load i64, i64* %RAX
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093
  %1095 = sext i32 %1094 to i64
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RAX
  %1097 = mul i64 %1096, 8
  %1098 = add i64 %1097, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 8
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1098 to i64*
  %1102 = load i64, i64* %1101
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 40
  %1105 = load i64, i64* %RAX
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1104 to i64*
  store i64 %1105, i64* %1108
  %1109 = load i64, i64* %PC
  %1110 = sub i64 %1109, 1101
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 5
  store i64 %1112, i64* %PC
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1110, i64* %1113, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 12
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 7
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  store i32 3, i32* %1118
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 12
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 3
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i32*
  %1124 = load i32, i32* %1123
  %1125 = zext i32 %1124 to i64
  store i64 %1125, i64* %RDI, align 8, !tbaa !2428
  %1126 = load i64, i64* %PC
  %1127 = sub i64 %1126, 234
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 5
  store i64 %1131, i64* %PC
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1133 = load i64, i64* %1132, align 8, !tbaa !2428
  %1134 = add i64 %1133, -8
  %1135 = inttoptr i64 %1134 to i64*
  store i64 %1129, i64* %1135
  store i64 %1134, i64* %1132, align 8, !tbaa !2428
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1127, i64* %1136, align 8, !tbaa !2428
  %1137 = load i64, i64* %PC
  %1138 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1137, %struct.Memory* %MEMORY.1)
  %1139 = load i64, i64* %RBP
  %1140 = sub i64 %1139, 8
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = load i64, i64* %RAX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 3
  store i64 %1147, i64* %PC
  store i64 %1145, i64* %RCX, align 8, !tbaa !2428
  %1148 = load i64, i64* %RCX
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  %1151 = add i64 4, %1148
  store i64 %1151, i64* %RCX, align 8, !tbaa !2428
  %1152 = icmp ult i64 %1151, %1148
  %1153 = icmp ult i64 %1151, 4
  %1154 = or i1 %1152, %1153
  %1155 = zext i1 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1155, i8* %1156, align 1, !tbaa !2432
  %1157 = trunc i64 %1151 to i32
  %1158 = and i32 %1157, 255
  %1159 = call i32 @llvm.ctpop.i32(i32 %1158) #16
  %1160 = trunc i32 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = xor i8 %1161, 1
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1162, i8* %1163, align 1, !tbaa !2446
  %1164 = xor i64 4, %1148
  %1165 = xor i64 %1164, %1151
  %1166 = lshr i64 %1165, 4
  %1167 = trunc i64 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1168, i8* %1169, align 1, !tbaa !2447
  %1170 = icmp eq i64 %1151, 0
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1171, i8* %1172, align 1, !tbaa !2448
  %1173 = lshr i64 %1151, 63
  %1174 = trunc i64 %1173 to i8
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1174, i8* %1175, align 1, !tbaa !2449
  %1176 = lshr i64 %1148, 63
  %1177 = xor i64 %1173, %1176
  %1178 = add nuw nsw i64 %1177, %1173
  %1179 = icmp eq i64 %1178, 2
  %1180 = zext i1 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1180, i8* %1181, align 1, !tbaa !2450
  %1182 = load i64, i64* %RBP
  %1183 = sub i64 %1182, 8
  %1184 = load i64, i64* %RCX
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 4
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1183 to i64*
  store i64 %1184, i64* %1187
  %1188 = load i64, i64* %RAX
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 3
  store i64 %1190, i64* %PC
  %1191 = inttoptr i64 %1188 to i32*
  %1192 = load i32, i32* %1191
  %1193 = sext i32 %1192 to i64
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RAX
  %1195 = mul i64 %1194, 8
  %1196 = add i64 %1195, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 8
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i64*
  %1200 = load i64, i64* %1199
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 40
  %1203 = load i64, i64* %RAX
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 4
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1202 to i64*
  store i64 %1203, i64* %1206
  %1207 = load i64, i64* %PC
  %1208 = sub i64 %1207, 151
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 5
  store i64 %1210, i64* %PC
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1208, i64* %1211, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_4005f0, %block_4009a6, %block_400629, %block_4008ac, %block_400b36, %block_4006b8, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %942, %block_400629 ], [ %1040, %block_4009a6 ], [ %849, %block_4008ac ], [ %744, %block_400b36 ], [ %646, %block_4006b8 ], [ %151, %block_400a6e ], [ %1138, %block_4005f0 ], [ %53, %block_400974 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %1308, %block_4007b2 ]
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 40
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 4
  store i64 %1215, i64* %PC
  %1216 = inttoptr i64 %1213 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %RAX, align 8, !tbaa !2428
  %1218 = load i64, i64* %RAX
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 2
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1221, align 8, !tbaa !2428
  %1222 = load i64, i64* %PC
  switch i64 %1222, label %1396 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400622:                                     ; preds = %block_400586
  %1223 = load i64, i64* %RBP
  %1224 = sub i64 %1223, 12
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 7
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1224 to i32*
  store i32 4, i32* %1227
  br label %block_400629

block_400aa0:                                     ; preds = %block_400586
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 12
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 7
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i32*
  store i32 27, i32* %1232
  %1233 = load i64, i64* %PC
  %1234 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %1233, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1234

block_40071c:                                     ; preds = %block_400586
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 12
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 7
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1236 to i32*
  store i32 9, i32* %1239
  %1240 = load i64, i64* %PC
  %1241 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1240, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1241

block_400816:                                     ; preds = %block_400586
  %1242 = load i64, i64* %RBP
  %1243 = sub i64 %1242, 12
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 7
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i32*
  store i32 14, i32* %1246
  %1247 = load i64, i64* %PC
  %1248 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1247, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1248

block_400910:                                     ; preds = %block_400586
  %1249 = load i64, i64* %RBP
  %1250 = sub i64 %1249, 12
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 7
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to i32*
  store i32 19, i32* %1253
  %1254 = load i64, i64* %PC
  %1255 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1254, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1255

block_40058c:                                     ; preds = %block_400586
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 12
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 7
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i32*
  store i32 1, i32* %1260
  %1261 = load i64, i64* %PC
  %1262 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1261, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1262

block_400a0a:                                     ; preds = %block_400586
  %1263 = load i64, i64* %RBP
  %1264 = sub i64 %1263, 12
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 7
  store i64 %1266, i64* %PC
  %1267 = inttoptr i64 %1264 to i32*
  store i32 24, i32* %1267
  %1268 = load i64, i64* %PC
  %1269 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1268, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1269

block_400686:                                     ; preds = %block_400586
  %1270 = load i64, i64* %RBP
  %1271 = sub i64 %1270, 12
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 7
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i32*
  store i32 6, i32* %1274
  %1275 = load i64, i64* %PC
  %1276 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1275, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1276

block_400b04:                                     ; preds = %block_400586
  %1277 = load i64, i64* %RBP
  %1278 = sub i64 %1277, 12
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 7
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1278 to i32*
  store i32 29, i32* %1281
  %1282 = load i64, i64* %PC
  %1283 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1282, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1283

block_4007b2:                                     ; preds = %block_400586
  %1284 = load i64, i64* %RBP
  %1285 = sub i64 %1284, 12
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 7
  store i64 %1287, i64* %PC
  %1288 = inttoptr i64 %1285 to i32*
  store i32 12, i32* %1288
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 12
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 3
  store i64 %1292, i64* %PC
  %1293 = inttoptr i64 %1290 to i32*
  %1294 = load i32, i32* %1293
  %1295 = zext i32 %1294 to i64
  store i64 %1295, i64* %RDI, align 8, !tbaa !2428
  %1296 = load i64, i64* %PC
  %1297 = sub i64 %1296, 684
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1303 = load i64, i64* %1302, align 8, !tbaa !2428
  %1304 = add i64 %1303, -8
  %1305 = inttoptr i64 %1304 to i64*
  store i64 %1299, i64* %1305
  store i64 %1304, i64* %1302, align 8, !tbaa !2428
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1297, i64* %1306, align 8, !tbaa !2428
  %1307 = load i64, i64* %PC
  %1308 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1307, %struct.Memory* %MEMORY.1)
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 8
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RAX
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 3
  store i64 %1317, i64* %PC
  store i64 %1315, i64* %RCX, align 8, !tbaa !2428
  %1318 = load i64, i64* %RCX
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 4
  store i64 %1320, i64* %PC
  %1321 = add i64 4, %1318
  store i64 %1321, i64* %RCX, align 8, !tbaa !2428
  %1322 = icmp ult i64 %1321, %1318
  %1323 = icmp ult i64 %1321, 4
  %1324 = or i1 %1322, %1323
  %1325 = zext i1 %1324 to i8
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1325, i8* %1326, align 1, !tbaa !2432
  %1327 = trunc i64 %1321 to i32
  %1328 = and i32 %1327, 255
  %1329 = call i32 @llvm.ctpop.i32(i32 %1328) #16
  %1330 = trunc i32 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = xor i8 %1331, 1
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1332, i8* %1333, align 1, !tbaa !2446
  %1334 = xor i64 4, %1318
  %1335 = xor i64 %1334, %1321
  %1336 = lshr i64 %1335, 4
  %1337 = trunc i64 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1338, i8* %1339, align 1, !tbaa !2447
  %1340 = icmp eq i64 %1321, 0
  %1341 = zext i1 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1341, i8* %1342, align 1, !tbaa !2448
  %1343 = lshr i64 %1321, 63
  %1344 = trunc i64 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1344, i8* %1345, align 1, !tbaa !2449
  %1346 = lshr i64 %1318, 63
  %1347 = xor i64 %1343, %1346
  %1348 = add nuw nsw i64 %1347, %1343
  %1349 = icmp eq i64 %1348, 2
  %1350 = zext i1 %1349 to i8
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1350, i8* %1351, align 1, !tbaa !2450
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 8
  %1354 = load i64, i64* %RCX
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 4
  store i64 %1356, i64* %PC
  %1357 = inttoptr i64 %1353 to i64*
  store i64 %1354, i64* %1357
  %1358 = load i64, i64* %RAX
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 3
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  %1362 = load i32, i32* %1361
  %1363 = sext i32 %1362 to i64
  store i64 %1363, i64* %RAX, align 8, !tbaa !2428
  %1364 = load i64, i64* %RAX
  %1365 = mul i64 %1364, 8
  %1366 = add i64 %1365, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 8
  store i64 %1368, i64* %PC
  %1369 = inttoptr i64 %1366 to i64*
  %1370 = load i64, i64* %1369
  store i64 %1370, i64* %RAX, align 8, !tbaa !2428
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 40
  %1373 = load i64, i64* %RAX
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 4
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1372 to i64*
  store i64 %1373, i64* %1376
  %1377 = load i64, i64* %PC
  %1378 = sub i64 %1377, 601
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 5
  store i64 %1380, i64* %PC
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1378, i64* %1381, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1382 = load i64, i64* %RBP
  %1383 = sub i64 %1382, 12
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 7
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1383 to i32*
  store i32 11, i32* %1386
  %1387 = load i64, i64* %PC
  %1388 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1387, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1388

block_400654:                                     ; preds = %block_400586
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 12
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 7
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i32*
  store i32 5, i32* %1393
  %1394 = load i64, i64* %PC
  %1395 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1394, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1395

; <label>:1396:                                   ; preds = %block_400586
  %1397 = load i64, i64* %PC
  %1398 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1397, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1398
}

; Function Attrs: noinline
define %struct.Memory* @sub_400723(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400723

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %PC
  %623 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %622, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %623

block_400ad2:                                     ; preds = %block_400586
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 12
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 7
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i32*
  store i32 28, i32* %628
  %629 = load i64, i64* %PC
  %630 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %629, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %630

block_400848:                                     ; preds = %block_400586
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 12
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 7
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i32*
  store i32 15, i32* %635
  %636 = load i64, i64* %PC
  %637 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %636, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %637

block_400942:                                     ; preds = %block_400586
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 12
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 7
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i32*
  store i32 20, i32* %642
  %643 = load i64, i64* %PC
  %644 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %643, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %644

block_40074e:                                     ; preds = %block_400586
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 12
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 7
  store i64 %648, i64* %PC
  %649 = inttoptr i64 %646 to i32*
  store i32 10, i32* %649
  %650 = load i64, i64* %PC
  %651 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %650, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %651

block_400579:                                     ; preds = %block_400586
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 12
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 7
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i32*
  store i32 0, i32* %656
  %657 = load i64, i64* %RSP
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = add i64 48, %657
  store i64 %660, i64* %RSP, align 8, !tbaa !2428
  %661 = icmp ult i64 %660, %657
  %662 = icmp ult i64 %660, 48
  %663 = or i1 %661, %662
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %664, i8* %665, align 1, !tbaa !2432
  %666 = trunc i64 %660 to i32
  %667 = and i32 %666, 255
  %668 = call i32 @llvm.ctpop.i32(i32 %667) #16
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %671, i8* %672, align 1, !tbaa !2446
  %673 = xor i64 48, %657
  %674 = xor i64 %673, %660
  %675 = lshr i64 %674, 4
  %676 = trunc i64 %675 to i8
  %677 = and i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = icmp eq i64 %660, 0
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %680, i8* %681, align 1, !tbaa !2448
  %682 = lshr i64 %660, 63
  %683 = trunc i64 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %683, i8* %684, align 1, !tbaa !2449
  %685 = lshr i64 %657, 63
  %686 = xor i64 %682, %685
  %687 = add nuw nsw i64 %686, %682
  %688 = icmp eq i64 %687, 2
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 1
  store i64 %692, i64* %PC
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %694 = load i64, i64* %693, align 8, !tbaa !2428
  %695 = add i64 %694, 8
  %696 = inttoptr i64 %694 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %RBP, align 8, !tbaa !2428
  store i64 %695, i64* %693, align 8, !tbaa !2428
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 1
  store i64 %699, i64* %PC
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %702 = load i64, i64* %701, align 8, !tbaa !2428
  %703 = inttoptr i64 %702 to i64*
  %704 = load i64, i64* %703
  store i64 %704, i64* %700, align 8, !tbaa !2428
  %705 = add i64 %702, 8
  store i64 %705, i64* %701, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400a3c:                                     ; preds = %block_400586
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 12
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 7
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i32*
  store i32 25, i32* %710
  %711 = load i64, i64* %PC
  %712 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %711, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %712

block_400b36:                                     ; preds = %block_400586
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 12
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i32*
  store i32 30, i32* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 12
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %725 = load i64, i64* %PC
  %726 = sub i64 %725, 1584
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %732 = load i64, i64* %731, align 8, !tbaa !2428
  %733 = add i64 %732, -8
  %734 = inttoptr i64 %733 to i64*
  store i64 %728, i64* %734
  store i64 %733, i64* %731, align 8, !tbaa !2428
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %726, i64* %735, align 8, !tbaa !2428
  %736 = load i64, i64* %PC
  %737 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %736, %struct.Memory* %MEMORY.0)
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 8
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RCX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = add i64 4, %747
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ult i64 %750, %747
  %752 = icmp ult i64 %750, 4
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = trunc i64 %750 to i32
  %757 = and i32 %756, 255
  %758 = call i32 @llvm.ctpop.i32(i32 %757) #16
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %761, i8* %762, align 1, !tbaa !2446
  %763 = xor i64 4, %747
  %764 = xor i64 %763, %750
  %765 = lshr i64 %764, 4
  %766 = trunc i64 %765 to i8
  %767 = and i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %767, i8* %768, align 1, !tbaa !2447
  %769 = icmp eq i64 %750, 0
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %770, i8* %771, align 1, !tbaa !2448
  %772 = lshr i64 %750, 63
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %773, i8* %774, align 1, !tbaa !2449
  %775 = lshr i64 %747, 63
  %776 = xor i64 %772, %775
  %777 = add nuw nsw i64 %776, %772
  %778 = icmp eq i64 %777, 2
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %779, i8* %780, align 1, !tbaa !2450
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 8
  %783 = load i64, i64* %RCX
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  %791 = load i32, i32* %790
  %792 = sext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = load i64, i64* %RAX
  %794 = mul i64 %793, 8
  %795 = add i64 %794, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 8
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 40
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %801 to i64*
  store i64 %802, i64* %805
  %806 = load i64, i64* %PC
  %807 = sub i64 %806, 1501
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 5
  store i64 %809, i64* %PC
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %807, i64* %810, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 12
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i32*
  store i32 2, i32* %815
  %816 = load i64, i64* %PC
  %817 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %816, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %817

block_4008ac:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 17, i32* %822
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 12
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 3
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RDI, align 8, !tbaa !2428
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 934
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %837 = load i64, i64* %836, align 8, !tbaa !2428
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  store i64 %833, i64* %839
  store i64 %838, i64* %836, align 8, !tbaa !2428
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %840, align 8, !tbaa !2428
  %841 = load i64, i64* %PC
  %842 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %841, %struct.Memory* %MEMORY.0)
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 8
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  store i64 %849, i64* %RCX, align 8, !tbaa !2428
  %852 = load i64, i64* %RCX
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = add i64 4, %852
  store i64 %855, i64* %RCX, align 8, !tbaa !2428
  %856 = icmp ult i64 %855, %852
  %857 = icmp ult i64 %855, 4
  %858 = or i1 %856, %857
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %859, i8* %860, align 1, !tbaa !2432
  %861 = trunc i64 %855 to i32
  %862 = and i32 %861, 255
  %863 = call i32 @llvm.ctpop.i32(i32 %862) #16
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %866, i8* %867, align 1, !tbaa !2446
  %868 = xor i64 4, %852
  %869 = xor i64 %868, %855
  %870 = lshr i64 %869, 4
  %871 = trunc i64 %870 to i8
  %872 = and i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = icmp eq i64 %855, 0
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %875, i8* %876, align 1, !tbaa !2448
  %877 = lshr i64 %855, 63
  %878 = trunc i64 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %878, i8* %879, align 1, !tbaa !2449
  %880 = lshr i64 %852, 63
  %881 = xor i64 %877, %880
  %882 = add nuw nsw i64 %881, %877
  %883 = icmp eq i64 %882, 2
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 8
  %888 = load i64, i64* %RCX
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %887 to i64*
  store i64 %888, i64* %891
  %892 = load i64, i64* %RAX
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895
  %897 = sext i32 %896 to i64
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RAX
  %899 = mul i64 %898, 8
  %900 = add i64 %899, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 8
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 40
  %907 = load i64, i64* %RAX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %906 to i64*
  store i64 %907, i64* %910
  %911 = load i64, i64* %PC
  %912 = sub i64 %911, 851
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 5
  store i64 %914, i64* %PC
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %912, i64* %915, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 7
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  store i32 7, i32* %920
  %921 = load i64, i64* %RBP
  %922 = sub i64 %921, 12
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %922 to i32*
  %926 = load i32, i32* %925
  %927 = zext i32 %926 to i64
  store i64 %927, i64* %RDI, align 8, !tbaa !2428
  %928 = load i64, i64* %PC
  %929 = sub i64 %928, 434
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %935 = load i64, i64* %934, align 8, !tbaa !2428
  %936 = add i64 %935, -8
  %937 = inttoptr i64 %936 to i64*
  store i64 %931, i64* %937
  store i64 %936, i64* %934, align 8, !tbaa !2428
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %929, i64* %938, align 8, !tbaa !2428
  %939 = load i64, i64* %PC
  %940 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %939, %struct.Memory* %MEMORY.0)
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 8
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i64*
  %946 = load i64, i64* %945
  store i64 %946, i64* %RAX, align 8, !tbaa !2428
  %947 = load i64, i64* %RAX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 3
  store i64 %949, i64* %PC
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %950 = load i64, i64* %RCX
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 4
  store i64 %952, i64* %PC
  %953 = add i64 4, %950
  store i64 %953, i64* %RCX, align 8, !tbaa !2428
  %954 = icmp ult i64 %953, %950
  %955 = icmp ult i64 %953, 4
  %956 = or i1 %954, %955
  %957 = zext i1 %956 to i8
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %957, i8* %958, align 1, !tbaa !2432
  %959 = trunc i64 %953 to i32
  %960 = and i32 %959, 255
  %961 = call i32 @llvm.ctpop.i32(i32 %960) #16
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  %964 = xor i8 %963, 1
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %964, i8* %965, align 1, !tbaa !2446
  %966 = xor i64 4, %950
  %967 = xor i64 %966, %953
  %968 = lshr i64 %967, 4
  %969 = trunc i64 %968 to i8
  %970 = and i8 %969, 1
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %970, i8* %971, align 1, !tbaa !2447
  %972 = icmp eq i64 %953, 0
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %973, i8* %974, align 1, !tbaa !2448
  %975 = lshr i64 %953, 63
  %976 = trunc i64 %975 to i8
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %976, i8* %977, align 1, !tbaa !2449
  %978 = lshr i64 %950, 63
  %979 = xor i64 %975, %978
  %980 = add nuw nsw i64 %979, %975
  %981 = icmp eq i64 %980, 2
  %982 = zext i1 %981 to i8
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %982, i8* %983, align 1, !tbaa !2450
  %984 = load i64, i64* %RBP
  %985 = sub i64 %984, 8
  %986 = load i64, i64* %RCX
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %985 to i64*
  store i64 %986, i64* %989
  %990 = load i64, i64* %RAX
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %990 to i32*
  %994 = load i32, i32* %993
  %995 = sext i32 %994 to i64
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RAX
  %997 = mul i64 %996, 8
  %998 = add i64 %997, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 8
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 40
  %1005 = load i64, i64* %RAX
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 4
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1004 to i64*
  store i64 %1005, i64* %1008
  %1009 = load i64, i64* %PC
  %1010 = sub i64 %1009, 351
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 5
  store i64 %1012, i64* %PC
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1010, i64* %1013, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 7
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  store i32 22, i32* %1018
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 12
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RDI, align 8, !tbaa !2428
  %1026 = load i64, i64* %PC
  %1027 = sub i64 %1026, 1184
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 5
  store i64 %1031, i64* %PC
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1033 = load i64, i64* %1032, align 8, !tbaa !2428
  %1034 = add i64 %1033, -8
  %1035 = inttoptr i64 %1034 to i64*
  store i64 %1029, i64* %1035
  store i64 %1034, i64* %1032, align 8, !tbaa !2428
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1027, i64* %1036, align 8, !tbaa !2428
  %1037 = load i64, i64* %PC
  %1038 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1037, %struct.Memory* %MEMORY.0)
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 8
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1040 to i64*
  %1044 = load i64, i64* %1043
  store i64 %1044, i64* %RAX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RAX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 3
  store i64 %1047, i64* %PC
  store i64 %1045, i64* %RCX, align 8, !tbaa !2428
  %1048 = load i64, i64* %RCX
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 4
  store i64 %1050, i64* %PC
  %1051 = add i64 4, %1048
  store i64 %1051, i64* %RCX, align 8, !tbaa !2428
  %1052 = icmp ult i64 %1051, %1048
  %1053 = icmp ult i64 %1051, 4
  %1054 = or i1 %1052, %1053
  %1055 = zext i1 %1054 to i8
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1055, i8* %1056, align 1, !tbaa !2432
  %1057 = trunc i64 %1051 to i32
  %1058 = and i32 %1057, 255
  %1059 = call i32 @llvm.ctpop.i32(i32 %1058) #16
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1062, i8* %1063, align 1, !tbaa !2446
  %1064 = xor i64 4, %1048
  %1065 = xor i64 %1064, %1051
  %1066 = lshr i64 %1065, 4
  %1067 = trunc i64 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1068, i8* %1069, align 1, !tbaa !2447
  %1070 = icmp eq i64 %1051, 0
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1071, i8* %1072, align 1, !tbaa !2448
  %1073 = lshr i64 %1051, 63
  %1074 = trunc i64 %1073 to i8
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1074, i8* %1075, align 1, !tbaa !2449
  %1076 = lshr i64 %1048, 63
  %1077 = xor i64 %1073, %1076
  %1078 = add nuw nsw i64 %1077, %1073
  %1079 = icmp eq i64 %1078, 2
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1080, i8* %1081, align 1, !tbaa !2450
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 8
  %1084 = load i64, i64* %RCX
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1083 to i64*
  store i64 %1084, i64* %1087
  %1088 = load i64, i64* %RAX
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 3
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1088 to i32*
  %1092 = load i32, i32* %1091
  %1093 = sext i32 %1092 to i64
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = mul i64 %1094, 8
  %1096 = add i64 %1095, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 8
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i64*
  %1100 = load i64, i64* %1099
  store i64 %1100, i64* %RAX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RBP
  %1102 = sub i64 %1101, 40
  %1103 = load i64, i64* %RAX
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1102 to i64*
  store i64 %1103, i64* %1106
  %1107 = load i64, i64* %PC
  %1108 = sub i64 %1107, 1101
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 5
  store i64 %1110, i64* %PC
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1108, i64* %1111, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  store i32 3, i32* %1116
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 12
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 3
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i32*
  %1122 = load i32, i32* %1121
  %1123 = zext i32 %1122 to i64
  store i64 %1123, i64* %RDI, align 8, !tbaa !2428
  %1124 = load i64, i64* %PC
  %1125 = sub i64 %1124, 234
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  store i64 %1129, i64* %PC
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1131 = load i64, i64* %1130, align 8, !tbaa !2428
  %1132 = add i64 %1131, -8
  %1133 = inttoptr i64 %1132 to i64*
  store i64 %1127, i64* %1133
  store i64 %1132, i64* %1130, align 8, !tbaa !2428
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1134, align 8, !tbaa !2428
  %1135 = load i64, i64* %PC
  %1136 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1135, %struct.Memory* %MEMORY.0)
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 8
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1146 = load i64, i64* %RCX
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 4
  store i64 %1148, i64* %PC
  %1149 = add i64 4, %1146
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = icmp ult i64 %1149, %1146
  %1151 = icmp ult i64 %1149, 4
  %1152 = or i1 %1150, %1151
  %1153 = zext i1 %1152 to i8
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1153, i8* %1154, align 1, !tbaa !2432
  %1155 = trunc i64 %1149 to i32
  %1156 = and i32 %1155, 255
  %1157 = call i32 @llvm.ctpop.i32(i32 %1156) #16
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1160, i8* %1161, align 1, !tbaa !2446
  %1162 = xor i64 4, %1146
  %1163 = xor i64 %1162, %1149
  %1164 = lshr i64 %1163, 4
  %1165 = trunc i64 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1166, i8* %1167, align 1, !tbaa !2447
  %1168 = icmp eq i64 %1149, 0
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1169, i8* %1170, align 1, !tbaa !2448
  %1171 = lshr i64 %1149, 63
  %1172 = trunc i64 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1172, i8* %1173, align 1, !tbaa !2449
  %1174 = lshr i64 %1146, 63
  %1175 = xor i64 %1171, %1174
  %1176 = add nuw nsw i64 %1175, %1171
  %1177 = icmp eq i64 %1176, 2
  %1178 = zext i1 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1178, i8* %1179, align 1, !tbaa !2450
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 8
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1181 to i64*
  store i64 %1182, i64* %1185
  %1186 = load i64, i64* %RAX
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 3
  store i64 %1188, i64* %PC
  %1189 = inttoptr i64 %1186 to i32*
  %1190 = load i32, i32* %1189
  %1191 = sext i32 %1190 to i64
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = mul i64 %1192, 8
  %1194 = add i64 %1193, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 8
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197
  store i64 %1198, i64* %RAX, align 8, !tbaa !2428
  %1199 = load i64, i64* %RBP
  %1200 = sub i64 %1199, 40
  %1201 = load i64, i64* %RAX
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 4
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1200 to i64*
  store i64 %1201, i64* %1204
  %1205 = load i64, i64* %PC
  %1206 = sub i64 %1205, 151
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 5
  store i64 %1208, i64* %PC
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1206, i64* %1209, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_400aa0, %block_400622, %block_400723, %block_4005f0, %block_4009a6, %block_4006b8, %block_4008ac, %block_400b36, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %1240, %block_400723 ], [ %1436, %block_400aa0 ], [ %1338, %block_400622 ], [ %1038, %block_4009a6 ], [ %842, %block_4008ac ], [ %940, %block_4006b8 ], [ %737, %block_400b36 ], [ %151, %block_400a6e ], [ %1136, %block_4005f0 ], [ %53, %block_400974 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %1581, %block_4007b2 ]
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 40
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 4
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i64*
  %1215 = load i64, i64* %1214
  store i64 %1215, i64* %RAX, align 8, !tbaa !2428
  %1216 = load i64, i64* %RAX
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 2
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1219, align 8, !tbaa !2428
  %1220 = load i64, i64* %PC
  switch i64 %1220, label %1669 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4197174, label %block_400b36
    i64 4196024, label %block_4006b8
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400723:                                     ; preds = %block_40071c, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40071c ]
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 12
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1222 to i32*
  %1226 = load i32, i32* %1225
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RDI, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = sub i64 %1228, 534
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 5
  store i64 %1233, i64* %PC
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1235 = load i64, i64* %1234, align 8, !tbaa !2428
  %1236 = add i64 %1235, -8
  %1237 = inttoptr i64 %1236 to i64*
  store i64 %1231, i64* %1237
  store i64 %1236, i64* %1234, align 8, !tbaa !2428
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1229, i64* %1238, align 8, !tbaa !2428
  %1239 = load i64, i64* %PC
  %1240 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1239, %struct.Memory* %MEMORY.1)
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 8
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 4
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i64*
  %1246 = load i64, i64* %1245
  store i64 %1246, i64* %RAX, align 8, !tbaa !2428
  %1247 = load i64, i64* %RAX
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 3
  store i64 %1249, i64* %PC
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %1250 = load i64, i64* %RCX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = add i64 4, %1250
  store i64 %1253, i64* %RCX, align 8, !tbaa !2428
  %1254 = icmp ult i64 %1253, %1250
  %1255 = icmp ult i64 %1253, 4
  %1256 = or i1 %1254, %1255
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1257, i8* %1258, align 1, !tbaa !2432
  %1259 = trunc i64 %1253 to i32
  %1260 = and i32 %1259, 255
  %1261 = call i32 @llvm.ctpop.i32(i32 %1260) #16
  %1262 = trunc i32 %1261 to i8
  %1263 = and i8 %1262, 1
  %1264 = xor i8 %1263, 1
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1264, i8* %1265, align 1, !tbaa !2446
  %1266 = xor i64 4, %1250
  %1267 = xor i64 %1266, %1253
  %1268 = lshr i64 %1267, 4
  %1269 = trunc i64 %1268 to i8
  %1270 = and i8 %1269, 1
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1270, i8* %1271, align 1, !tbaa !2447
  %1272 = icmp eq i64 %1253, 0
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1273, i8* %1274, align 1, !tbaa !2448
  %1275 = lshr i64 %1253, 63
  %1276 = trunc i64 %1275 to i8
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1276, i8* %1277, align 1, !tbaa !2449
  %1278 = lshr i64 %1250, 63
  %1279 = xor i64 %1275, %1278
  %1280 = add nuw nsw i64 %1279, %1275
  %1281 = icmp eq i64 %1280, 2
  %1282 = zext i1 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1282, i8* %1283, align 1, !tbaa !2450
  %1284 = load i64, i64* %RBP
  %1285 = sub i64 %1284, 8
  %1286 = load i64, i64* %RCX
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 4
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1285 to i64*
  store i64 %1286, i64* %1289
  %1290 = load i64, i64* %RAX
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 3
  store i64 %1292, i64* %PC
  %1293 = inttoptr i64 %1290 to i32*
  %1294 = load i32, i32* %1293
  %1295 = sext i32 %1294 to i64
  store i64 %1295, i64* %RAX, align 8, !tbaa !2428
  %1296 = load i64, i64* %RAX
  %1297 = mul i64 %1296, 8
  %1298 = add i64 %1297, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 8
  store i64 %1300, i64* %PC
  %1301 = inttoptr i64 %1298 to i64*
  %1302 = load i64, i64* %1301
  store i64 %1302, i64* %RAX, align 8, !tbaa !2428
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 40
  %1305 = load i64, i64* %RAX
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 4
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1304 to i64*
  store i64 %1305, i64* %1308
  %1309 = load i64, i64* %PC
  %1310 = sub i64 %1309, 451
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 5
  store i64 %1312, i64* %PC
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1310, i64* %1313, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %1314 = load i64, i64* %RBP
  %1315 = sub i64 %1314, 12
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 7
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i32*
  store i32 4, i32* %1318
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 12
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 3
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  %1324 = load i32, i32* %1323
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RDI, align 8, !tbaa !2428
  %1326 = load i64, i64* %PC
  %1327 = sub i64 %1326, 284
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 5
  store i64 %1331, i64* %PC
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1333 = load i64, i64* %1332, align 8, !tbaa !2428
  %1334 = add i64 %1333, -8
  %1335 = inttoptr i64 %1334 to i64*
  store i64 %1329, i64* %1335
  store i64 %1334, i64* %1332, align 8, !tbaa !2428
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1327, i64* %1336, align 8, !tbaa !2428
  %1337 = load i64, i64* %PC
  %1338 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1337, %struct.Memory* %MEMORY.0)
  %1339 = load i64, i64* %RBP
  %1340 = sub i64 %1339, 8
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 4
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i64*
  %1344 = load i64, i64* %1343
  store i64 %1344, i64* %RAX, align 8, !tbaa !2428
  %1345 = load i64, i64* %RAX
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 3
  store i64 %1347, i64* %PC
  store i64 %1345, i64* %RCX, align 8, !tbaa !2428
  %1348 = load i64, i64* %RCX
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 4
  store i64 %1350, i64* %PC
  %1351 = add i64 4, %1348
  store i64 %1351, i64* %RCX, align 8, !tbaa !2428
  %1352 = icmp ult i64 %1351, %1348
  %1353 = icmp ult i64 %1351, 4
  %1354 = or i1 %1352, %1353
  %1355 = zext i1 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1355, i8* %1356, align 1, !tbaa !2432
  %1357 = trunc i64 %1351 to i32
  %1358 = and i32 %1357, 255
  %1359 = call i32 @llvm.ctpop.i32(i32 %1358) #16
  %1360 = trunc i32 %1359 to i8
  %1361 = and i8 %1360, 1
  %1362 = xor i8 %1361, 1
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1362, i8* %1363, align 1, !tbaa !2446
  %1364 = xor i64 4, %1348
  %1365 = xor i64 %1364, %1351
  %1366 = lshr i64 %1365, 4
  %1367 = trunc i64 %1366 to i8
  %1368 = and i8 %1367, 1
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1368, i8* %1369, align 1, !tbaa !2447
  %1370 = icmp eq i64 %1351, 0
  %1371 = zext i1 %1370 to i8
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1371, i8* %1372, align 1, !tbaa !2448
  %1373 = lshr i64 %1351, 63
  %1374 = trunc i64 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1374, i8* %1375, align 1, !tbaa !2449
  %1376 = lshr i64 %1348, 63
  %1377 = xor i64 %1373, %1376
  %1378 = add nuw nsw i64 %1377, %1373
  %1379 = icmp eq i64 %1378, 2
  %1380 = zext i1 %1379 to i8
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1380, i8* %1381, align 1, !tbaa !2450
  %1382 = load i64, i64* %RBP
  %1383 = sub i64 %1382, 8
  %1384 = load i64, i64* %RCX
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 4
  store i64 %1386, i64* %PC
  %1387 = inttoptr i64 %1383 to i64*
  store i64 %1384, i64* %1387
  %1388 = load i64, i64* %RAX
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 3
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i32*
  %1392 = load i32, i32* %1391
  %1393 = sext i32 %1392 to i64
  store i64 %1393, i64* %RAX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RAX
  %1395 = mul i64 %1394, 8
  %1396 = add i64 %1395, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 8
  store i64 %1398, i64* %PC
  %1399 = inttoptr i64 %1396 to i64*
  %1400 = load i64, i64* %1399
  store i64 %1400, i64* %RAX, align 8, !tbaa !2428
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 40
  %1403 = load i64, i64* %RAX
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 4
  store i64 %1405, i64* %PC
  %1406 = inttoptr i64 %1402 to i64*
  store i64 %1403, i64* %1406
  %1407 = load i64, i64* %PC
  %1408 = sub i64 %1407, 201
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 5
  store i64 %1410, i64* %PC
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1408, i64* %1411, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1412 = load i64, i64* %RBP
  %1413 = sub i64 %1412, 12
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 7
  store i64 %1415, i64* %PC
  %1416 = inttoptr i64 %1413 to i32*
  store i32 27, i32* %1416
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 12
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 3
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i32*
  %1422 = load i32, i32* %1421
  %1423 = zext i32 %1422 to i64
  store i64 %1423, i64* %RDI, align 8, !tbaa !2428
  %1424 = load i64, i64* %PC
  %1425 = sub i64 %1424, 1434
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 5
  store i64 %1429, i64* %PC
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1431 = load i64, i64* %1430, align 8, !tbaa !2428
  %1432 = add i64 %1431, -8
  %1433 = inttoptr i64 %1432 to i64*
  store i64 %1427, i64* %1433
  store i64 %1432, i64* %1430, align 8, !tbaa !2428
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1425, i64* %1434, align 8, !tbaa !2428
  %1435 = load i64, i64* %PC
  %1436 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1435, %struct.Memory* %MEMORY.0)
  %1437 = load i64, i64* %RBP
  %1438 = sub i64 %1437, 8
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 4
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i64*
  %1442 = load i64, i64* %1441
  store i64 %1442, i64* %RAX, align 8, !tbaa !2428
  %1443 = load i64, i64* %RAX
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 3
  store i64 %1445, i64* %PC
  store i64 %1443, i64* %RCX, align 8, !tbaa !2428
  %1446 = load i64, i64* %RCX
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 4
  store i64 %1448, i64* %PC
  %1449 = add i64 4, %1446
  store i64 %1449, i64* %RCX, align 8, !tbaa !2428
  %1450 = icmp ult i64 %1449, %1446
  %1451 = icmp ult i64 %1449, 4
  %1452 = or i1 %1450, %1451
  %1453 = zext i1 %1452 to i8
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1453, i8* %1454, align 1, !tbaa !2432
  %1455 = trunc i64 %1449 to i32
  %1456 = and i32 %1455, 255
  %1457 = call i32 @llvm.ctpop.i32(i32 %1456) #16
  %1458 = trunc i32 %1457 to i8
  %1459 = and i8 %1458, 1
  %1460 = xor i8 %1459, 1
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1460, i8* %1461, align 1, !tbaa !2446
  %1462 = xor i64 4, %1446
  %1463 = xor i64 %1462, %1449
  %1464 = lshr i64 %1463, 4
  %1465 = trunc i64 %1464 to i8
  %1466 = and i8 %1465, 1
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1466, i8* %1467, align 1, !tbaa !2447
  %1468 = icmp eq i64 %1449, 0
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1469, i8* %1470, align 1, !tbaa !2448
  %1471 = lshr i64 %1449, 63
  %1472 = trunc i64 %1471 to i8
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1472, i8* %1473, align 1, !tbaa !2449
  %1474 = lshr i64 %1446, 63
  %1475 = xor i64 %1471, %1474
  %1476 = add nuw nsw i64 %1475, %1471
  %1477 = icmp eq i64 %1476, 2
  %1478 = zext i1 %1477 to i8
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1478, i8* %1479, align 1, !tbaa !2450
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 8
  %1482 = load i64, i64* %RCX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 4
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1481 to i64*
  store i64 %1482, i64* %1485
  %1486 = load i64, i64* %RAX
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 3
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to i32*
  %1490 = load i32, i32* %1489
  %1491 = sext i32 %1490 to i64
  store i64 %1491, i64* %RAX, align 8, !tbaa !2428
  %1492 = load i64, i64* %RAX
  %1493 = mul i64 %1492, 8
  %1494 = add i64 %1493, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 8
  store i64 %1496, i64* %PC
  %1497 = inttoptr i64 %1494 to i64*
  %1498 = load i64, i64* %1497
  store i64 %1498, i64* %RAX, align 8, !tbaa !2428
  %1499 = load i64, i64* %RBP
  %1500 = sub i64 %1499, 40
  %1501 = load i64, i64* %RAX
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 4
  store i64 %1503, i64* %PC
  %1504 = inttoptr i64 %1500 to i64*
  store i64 %1501, i64* %1504
  %1505 = load i64, i64* %PC
  %1506 = sub i64 %1505, 1351
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 5
  store i64 %1508, i64* %PC
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1506, i64* %1509, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 12
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 7
  store i64 %1513, i64* %PC
  %1514 = inttoptr i64 %1511 to i32*
  store i32 9, i32* %1514
  br label %block_400723

block_400816:                                     ; preds = %block_400586
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 12
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 7
  store i64 %1518, i64* %PC
  %1519 = inttoptr i64 %1516 to i32*
  store i32 14, i32* %1519
  %1520 = load i64, i64* %PC
  %1521 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1520, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1521

block_400910:                                     ; preds = %block_400586
  %1522 = load i64, i64* %RBP
  %1523 = sub i64 %1522, 12
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 7
  store i64 %1525, i64* %PC
  %1526 = inttoptr i64 %1523 to i32*
  store i32 19, i32* %1526
  %1527 = load i64, i64* %PC
  %1528 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1527, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1528

block_40058c:                                     ; preds = %block_400586
  %1529 = load i64, i64* %RBP
  %1530 = sub i64 %1529, 12
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 7
  store i64 %1532, i64* %PC
  %1533 = inttoptr i64 %1530 to i32*
  store i32 1, i32* %1533
  %1534 = load i64, i64* %PC
  %1535 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1534, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1535

block_400a0a:                                     ; preds = %block_400586
  %1536 = load i64, i64* %RBP
  %1537 = sub i64 %1536, 12
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 7
  store i64 %1539, i64* %PC
  %1540 = inttoptr i64 %1537 to i32*
  store i32 24, i32* %1540
  %1541 = load i64, i64* %PC
  %1542 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1541, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1542

block_400686:                                     ; preds = %block_400586
  %1543 = load i64, i64* %RBP
  %1544 = sub i64 %1543, 12
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 7
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1544 to i32*
  store i32 6, i32* %1547
  %1548 = load i64, i64* %PC
  %1549 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1548, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1549

block_400b04:                                     ; preds = %block_400586
  %1550 = load i64, i64* %RBP
  %1551 = sub i64 %1550, 12
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 7
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1551 to i32*
  store i32 29, i32* %1554
  %1555 = load i64, i64* %PC
  %1556 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1555, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1556

block_4007b2:                                     ; preds = %block_400586
  %1557 = load i64, i64* %RBP
  %1558 = sub i64 %1557, 12
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 7
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1558 to i32*
  store i32 12, i32* %1561
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 12
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 3
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %1563 to i32*
  %1567 = load i32, i32* %1566
  %1568 = zext i32 %1567 to i64
  store i64 %1568, i64* %RDI, align 8, !tbaa !2428
  %1569 = load i64, i64* %PC
  %1570 = sub i64 %1569, 684
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 5
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 5
  store i64 %1574, i64* %PC
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1576 = load i64, i64* %1575, align 8, !tbaa !2428
  %1577 = add i64 %1576, -8
  %1578 = inttoptr i64 %1577 to i64*
  store i64 %1572, i64* %1578
  store i64 %1577, i64* %1575, align 8, !tbaa !2428
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1570, i64* %1579, align 8, !tbaa !2428
  %1580 = load i64, i64* %PC
  %1581 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1580, %struct.Memory* %MEMORY.0)
  %1582 = load i64, i64* %RBP
  %1583 = sub i64 %1582, 8
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1583 to i64*
  %1587 = load i64, i64* %1586
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 3
  store i64 %1590, i64* %PC
  store i64 %1588, i64* %RCX, align 8, !tbaa !2428
  %1591 = load i64, i64* %RCX
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 4
  store i64 %1593, i64* %PC
  %1594 = add i64 4, %1591
  store i64 %1594, i64* %RCX, align 8, !tbaa !2428
  %1595 = icmp ult i64 %1594, %1591
  %1596 = icmp ult i64 %1594, 4
  %1597 = or i1 %1595, %1596
  %1598 = zext i1 %1597 to i8
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1598, i8* %1599, align 1, !tbaa !2432
  %1600 = trunc i64 %1594 to i32
  %1601 = and i32 %1600, 255
  %1602 = call i32 @llvm.ctpop.i32(i32 %1601) #16
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  %1605 = xor i8 %1604, 1
  %1606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1605, i8* %1606, align 1, !tbaa !2446
  %1607 = xor i64 4, %1591
  %1608 = xor i64 %1607, %1594
  %1609 = lshr i64 %1608, 4
  %1610 = trunc i64 %1609 to i8
  %1611 = and i8 %1610, 1
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1611, i8* %1612, align 1, !tbaa !2447
  %1613 = icmp eq i64 %1594, 0
  %1614 = zext i1 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1614, i8* %1615, align 1, !tbaa !2448
  %1616 = lshr i64 %1594, 63
  %1617 = trunc i64 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1617, i8* %1618, align 1, !tbaa !2449
  %1619 = lshr i64 %1591, 63
  %1620 = xor i64 %1616, %1619
  %1621 = add nuw nsw i64 %1620, %1616
  %1622 = icmp eq i64 %1621, 2
  %1623 = zext i1 %1622 to i8
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1623, i8* %1624, align 1, !tbaa !2450
  %1625 = load i64, i64* %RBP
  %1626 = sub i64 %1625, 8
  %1627 = load i64, i64* %RCX
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 4
  store i64 %1629, i64* %PC
  %1630 = inttoptr i64 %1626 to i64*
  store i64 %1627, i64* %1630
  %1631 = load i64, i64* %RAX
  %1632 = load i64, i64* %PC
  %1633 = add i64 %1632, 3
  store i64 %1633, i64* %PC
  %1634 = inttoptr i64 %1631 to i32*
  %1635 = load i32, i32* %1634
  %1636 = sext i32 %1635 to i64
  store i64 %1636, i64* %RAX, align 8, !tbaa !2428
  %1637 = load i64, i64* %RAX
  %1638 = mul i64 %1637, 8
  %1639 = add i64 %1638, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 8
  store i64 %1641, i64* %PC
  %1642 = inttoptr i64 %1639 to i64*
  %1643 = load i64, i64* %1642
  store i64 %1643, i64* %RAX, align 8, !tbaa !2428
  %1644 = load i64, i64* %RBP
  %1645 = sub i64 %1644, 40
  %1646 = load i64, i64* %RAX
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 4
  store i64 %1648, i64* %PC
  %1649 = inttoptr i64 %1645 to i64*
  store i64 %1646, i64* %1649
  %1650 = load i64, i64* %PC
  %1651 = sub i64 %1650, 601
  %1652 = load i64, i64* %PC
  %1653 = add i64 %1652, 5
  store i64 %1653, i64* %PC
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1651, i64* %1654, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1655 = load i64, i64* %RBP
  %1656 = sub i64 %1655, 12
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 7
  store i64 %1658, i64* %PC
  %1659 = inttoptr i64 %1656 to i32*
  store i32 11, i32* %1659
  %1660 = load i64, i64* %PC
  %1661 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1660, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1661

block_400654:                                     ; preds = %block_400586
  %1662 = load i64, i64* %RBP
  %1663 = sub i64 %1662, 12
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 7
  store i64 %1665, i64* %PC
  %1666 = inttoptr i64 %1663 to i32*
  store i32 5, i32* %1666
  %1667 = load i64, i64* %PC
  %1668 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1667, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1668

; <label>:1669:                                   ; preds = %block_400586
  %1670 = load i64, i64* %PC
  %1671 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1670, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1671
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009df(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4009df

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  br label %block_4009df

block_400ad2:                                     ; preds = %block_400586
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 7
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  store i32 28, i32* %626
  %627 = load i64, i64* %PC
  %628 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %627, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %628

block_400848:                                     ; preds = %block_400586
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 12
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 7
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i32*
  store i32 15, i32* %633
  %634 = load i64, i64* %PC
  %635 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %634, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %635

block_400942:                                     ; preds = %block_400586
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 12
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 7
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  store i32 20, i32* %640
  %641 = load i64, i64* %PC
  %642 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %641, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %642

block_40074e:                                     ; preds = %block_400586
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 12
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 7
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  store i32 10, i32* %647
  %648 = load i64, i64* %PC
  %649 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %648, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %649

block_400579:                                     ; preds = %block_400586
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 12
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 7
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i32*
  store i32 0, i32* %654
  %655 = load i64, i64* %RSP
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC
  %658 = add i64 48, %655
  store i64 %658, i64* %RSP, align 8, !tbaa !2428
  %659 = icmp ult i64 %658, %655
  %660 = icmp ult i64 %658, 48
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %662, i8* %663, align 1, !tbaa !2432
  %664 = trunc i64 %658 to i32
  %665 = and i32 %664, 255
  %666 = call i32 @llvm.ctpop.i32(i32 %665) #16
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %669, i8* %670, align 1, !tbaa !2446
  %671 = xor i64 48, %655
  %672 = xor i64 %671, %658
  %673 = lshr i64 %672, 4
  %674 = trunc i64 %673 to i8
  %675 = and i8 %674, 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %675, i8* %676, align 1, !tbaa !2447
  %677 = icmp eq i64 %658, 0
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %678, i8* %679, align 1, !tbaa !2448
  %680 = lshr i64 %658, 63
  %681 = trunc i64 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %681, i8* %682, align 1, !tbaa !2449
  %683 = lshr i64 %655, 63
  %684 = xor i64 %680, %683
  %685 = add nuw nsw i64 %684, %680
  %686 = icmp eq i64 %685, 2
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %687, i8* %688, align 1, !tbaa !2450
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 1
  store i64 %690, i64* %PC
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %692 = load i64, i64* %691, align 8, !tbaa !2428
  %693 = add i64 %692, 8
  %694 = inttoptr i64 %692 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RBP, align 8, !tbaa !2428
  store i64 %693, i64* %691, align 8, !tbaa !2428
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 1
  store i64 %697, i64* %PC
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %700 = load i64, i64* %699, align 8, !tbaa !2428
  %701 = inttoptr i64 %700 to i64*
  %702 = load i64, i64* %701
  store i64 %702, i64* %698, align 8, !tbaa !2428
  %703 = add i64 %700, 8
  store i64 %703, i64* %699, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a3c:                                     ; preds = %block_400586
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 12
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 7
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i32*
  store i32 25, i32* %708
  %709 = load i64, i64* %PC
  %710 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %709, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %710

block_400b36:                                     ; preds = %block_400586
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 12
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 7
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i32*
  store i32 30, i32* %715
  %716 = load i64, i64* %RBP
  %717 = sub i64 %716, 12
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 3
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %717 to i32*
  %721 = load i32, i32* %720
  %722 = zext i32 %721 to i64
  store i64 %722, i64* %RDI, align 8, !tbaa !2428
  %723 = load i64, i64* %PC
  %724 = sub i64 %723, 1584
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 5
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  store i64 %728, i64* %PC
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %730 = load i64, i64* %729, align 8, !tbaa !2428
  %731 = add i64 %730, -8
  %732 = inttoptr i64 %731 to i64*
  store i64 %726, i64* %732
  store i64 %731, i64* %729, align 8, !tbaa !2428
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %724, i64* %733, align 8, !tbaa !2428
  %734 = load i64, i64* %PC
  %735 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %734, %struct.Memory* %MEMORY.1)
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 8
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 4
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = load i64, i64* %RAX
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 3
  store i64 %744, i64* %PC
  store i64 %742, i64* %RCX, align 8, !tbaa !2428
  %745 = load i64, i64* %RCX
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 4
  store i64 %747, i64* %PC
  %748 = add i64 4, %745
  store i64 %748, i64* %RCX, align 8, !tbaa !2428
  %749 = icmp ult i64 %748, %745
  %750 = icmp ult i64 %748, 4
  %751 = or i1 %749, %750
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %752, i8* %753, align 1, !tbaa !2432
  %754 = trunc i64 %748 to i32
  %755 = and i32 %754, 255
  %756 = call i32 @llvm.ctpop.i32(i32 %755) #16
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %759, i8* %760, align 1, !tbaa !2446
  %761 = xor i64 4, %745
  %762 = xor i64 %761, %748
  %763 = lshr i64 %762, 4
  %764 = trunc i64 %763 to i8
  %765 = and i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %765, i8* %766, align 1, !tbaa !2447
  %767 = icmp eq i64 %748, 0
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %768, i8* %769, align 1, !tbaa !2448
  %770 = lshr i64 %748, 63
  %771 = trunc i64 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %771, i8* %772, align 1, !tbaa !2449
  %773 = lshr i64 %745, 63
  %774 = xor i64 %770, %773
  %775 = add nuw nsw i64 %774, %770
  %776 = icmp eq i64 %775, 2
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %777, i8* %778, align 1, !tbaa !2450
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 8
  %781 = load i64, i64* %RCX
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 4
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %780 to i64*
  store i64 %781, i64* %784
  %785 = load i64, i64* %RAX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788
  %790 = sext i32 %789 to i64
  store i64 %790, i64* %RAX, align 8, !tbaa !2428
  %791 = load i64, i64* %RAX
  %792 = mul i64 %791, 8
  %793 = add i64 %792, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 8
  store i64 %795, i64* %PC
  %796 = inttoptr i64 %793 to i64*
  %797 = load i64, i64* %796
  store i64 %797, i64* %RAX, align 8, !tbaa !2428
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 40
  %800 = load i64, i64* %RAX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 4
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %799 to i64*
  store i64 %800, i64* %803
  %804 = load i64, i64* %PC
  %805 = sub i64 %804, 1501
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 5
  store i64 %807, i64* %PC
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %805, i64* %808, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 12
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 7
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i32*
  store i32 2, i32* %813
  %814 = load i64, i64* %PC
  %815 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %814, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %815

block_4008ac:                                     ; preds = %block_400586
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 12
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 7
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i32*
  store i32 17, i32* %820
  %821 = load i64, i64* %RBP
  %822 = sub i64 %821, 12
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %822 to i32*
  %826 = load i32, i32* %825
  %827 = zext i32 %826 to i64
  store i64 %827, i64* %RDI, align 8, !tbaa !2428
  %828 = load i64, i64* %PC
  %829 = sub i64 %828, 934
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 5
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %835 = load i64, i64* %834, align 8, !tbaa !2428
  %836 = add i64 %835, -8
  %837 = inttoptr i64 %836 to i64*
  store i64 %831, i64* %837
  store i64 %836, i64* %834, align 8, !tbaa !2428
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %829, i64* %838, align 8, !tbaa !2428
  %839 = load i64, i64* %PC
  %840 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %839, %struct.Memory* %MEMORY.1)
  %841 = load i64, i64* %RBP
  %842 = sub i64 %841, 8
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 4
  store i64 %844, i64* %PC
  %845 = inttoptr i64 %842 to i64*
  %846 = load i64, i64* %845
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = load i64, i64* %RAX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  store i64 %847, i64* %RCX, align 8, !tbaa !2428
  %850 = load i64, i64* %RCX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = add i64 4, %850
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %854 = icmp ult i64 %853, %850
  %855 = icmp ult i64 %853, 4
  %856 = or i1 %854, %855
  %857 = zext i1 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %857, i8* %858, align 1, !tbaa !2432
  %859 = trunc i64 %853 to i32
  %860 = and i32 %859, 255
  %861 = call i32 @llvm.ctpop.i32(i32 %860) #16
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %864, i8* %865, align 1, !tbaa !2446
  %866 = xor i64 4, %850
  %867 = xor i64 %866, %853
  %868 = lshr i64 %867, 4
  %869 = trunc i64 %868 to i8
  %870 = and i8 %869, 1
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %870, i8* %871, align 1, !tbaa !2447
  %872 = icmp eq i64 %853, 0
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %873, i8* %874, align 1, !tbaa !2448
  %875 = lshr i64 %853, 63
  %876 = trunc i64 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %876, i8* %877, align 1, !tbaa !2449
  %878 = lshr i64 %850, 63
  %879 = xor i64 %875, %878
  %880 = add nuw nsw i64 %879, %875
  %881 = icmp eq i64 %880, 2
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %882, i8* %883, align 1, !tbaa !2450
  %884 = load i64, i64* %RBP
  %885 = sub i64 %884, 8
  %886 = load i64, i64* %RCX
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 4
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %885 to i64*
  store i64 %886, i64* %889
  %890 = load i64, i64* %RAX
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 3
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i32*
  %894 = load i32, i32* %893
  %895 = sext i32 %894 to i64
  store i64 %895, i64* %RAX, align 8, !tbaa !2428
  %896 = load i64, i64* %RAX
  %897 = mul i64 %896, 8
  %898 = add i64 %897, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 8
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901
  store i64 %902, i64* %RAX, align 8, !tbaa !2428
  %903 = load i64, i64* %RBP
  %904 = sub i64 %903, 40
  %905 = load i64, i64* %RAX
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %904 to i64*
  store i64 %905, i64* %908
  %909 = load i64, i64* %PC
  %910 = sub i64 %909, 851
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 5
  store i64 %912, i64* %PC
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %910, i64* %913, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 12
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 7
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i32*
  store i32 7, i32* %918
  %919 = load i64, i64* %RBP
  %920 = sub i64 %919, 12
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 3
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %920 to i32*
  %924 = load i32, i32* %923
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RDI, align 8, !tbaa !2428
  %926 = load i64, i64* %PC
  %927 = sub i64 %926, 434
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 5
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  store i64 %931, i64* %PC
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %933 = load i64, i64* %932, align 8, !tbaa !2428
  %934 = add i64 %933, -8
  %935 = inttoptr i64 %934 to i64*
  store i64 %929, i64* %935
  store i64 %934, i64* %932, align 8, !tbaa !2428
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %927, i64* %936, align 8, !tbaa !2428
  %937 = load i64, i64* %PC
  %938 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %937, %struct.Memory* %MEMORY.1)
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 8
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %RAX, align 8, !tbaa !2428
  %945 = load i64, i64* %RAX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 3
  store i64 %947, i64* %PC
  store i64 %945, i64* %RCX, align 8, !tbaa !2428
  %948 = load i64, i64* %RCX
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 4
  store i64 %950, i64* %PC
  %951 = add i64 4, %948
  store i64 %951, i64* %RCX, align 8, !tbaa !2428
  %952 = icmp ult i64 %951, %948
  %953 = icmp ult i64 %951, 4
  %954 = or i1 %952, %953
  %955 = zext i1 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %955, i8* %956, align 1, !tbaa !2432
  %957 = trunc i64 %951 to i32
  %958 = and i32 %957, 255
  %959 = call i32 @llvm.ctpop.i32(i32 %958) #16
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %962, i8* %963, align 1, !tbaa !2446
  %964 = xor i64 4, %948
  %965 = xor i64 %964, %951
  %966 = lshr i64 %965, 4
  %967 = trunc i64 %966 to i8
  %968 = and i8 %967, 1
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %968, i8* %969, align 1, !tbaa !2447
  %970 = icmp eq i64 %951, 0
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %971, i8* %972, align 1, !tbaa !2448
  %973 = lshr i64 %951, 63
  %974 = trunc i64 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %974, i8* %975, align 1, !tbaa !2449
  %976 = lshr i64 %948, 63
  %977 = xor i64 %973, %976
  %978 = add nuw nsw i64 %977, %973
  %979 = icmp eq i64 %978, 2
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %980, i8* %981, align 1, !tbaa !2450
  %982 = load i64, i64* %RBP
  %983 = sub i64 %982, 8
  %984 = load i64, i64* %RCX
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 4
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %983 to i64*
  store i64 %984, i64* %987
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 3
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i32*
  %992 = load i32, i32* %991
  %993 = sext i32 %992 to i64
  store i64 %993, i64* %RAX, align 8, !tbaa !2428
  %994 = load i64, i64* %RAX
  %995 = mul i64 %994, 8
  %996 = add i64 %995, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 8
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i64*
  %1000 = load i64, i64* %999
  store i64 %1000, i64* %RAX, align 8, !tbaa !2428
  %1001 = load i64, i64* %RBP
  %1002 = sub i64 %1001, 40
  %1003 = load i64, i64* %RAX
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 4
  store i64 %1005, i64* %PC
  %1006 = inttoptr i64 %1002 to i64*
  store i64 %1003, i64* %1006
  %1007 = load i64, i64* %PC
  %1008 = sub i64 %1007, 351
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 5
  store i64 %1010, i64* %PC
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1008, i64* %1011, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 12
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 7
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i32*
  store i32 22, i32* %1016
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 12
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 3
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i32*
  %1022 = load i32, i32* %1021
  %1023 = zext i32 %1022 to i64
  store i64 %1023, i64* %RDI, align 8, !tbaa !2428
  %1024 = load i64, i64* %PC
  %1025 = sub i64 %1024, 1184
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 5
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  store i64 %1029, i64* %PC
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1031 = load i64, i64* %1030, align 8, !tbaa !2428
  %1032 = add i64 %1031, -8
  %1033 = inttoptr i64 %1032 to i64*
  store i64 %1027, i64* %1033
  store i64 %1032, i64* %1030, align 8, !tbaa !2428
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1025, i64* %1034, align 8, !tbaa !2428
  %1035 = load i64, i64* %PC
  %1036 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1035, %struct.Memory* %MEMORY.1)
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 8
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 4
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i64*
  %1042 = load i64, i64* %1041
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RAX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 3
  store i64 %1045, i64* %PC
  store i64 %1043, i64* %RCX, align 8, !tbaa !2428
  %1046 = load i64, i64* %RCX
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  %1049 = add i64 4, %1046
  store i64 %1049, i64* %RCX, align 8, !tbaa !2428
  %1050 = icmp ult i64 %1049, %1046
  %1051 = icmp ult i64 %1049, 4
  %1052 = or i1 %1050, %1051
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1053, i8* %1054, align 1, !tbaa !2432
  %1055 = trunc i64 %1049 to i32
  %1056 = and i32 %1055, 255
  %1057 = call i32 @llvm.ctpop.i32(i32 %1056) #16
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1060, i8* %1061, align 1, !tbaa !2446
  %1062 = xor i64 4, %1046
  %1063 = xor i64 %1062, %1049
  %1064 = lshr i64 %1063, 4
  %1065 = trunc i64 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = icmp eq i64 %1049, 0
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1069, i8* %1070, align 1, !tbaa !2448
  %1071 = lshr i64 %1049, 63
  %1072 = trunc i64 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1072, i8* %1073, align 1, !tbaa !2449
  %1074 = lshr i64 %1046, 63
  %1075 = xor i64 %1071, %1074
  %1076 = add nuw nsw i64 %1075, %1071
  %1077 = icmp eq i64 %1076, 2
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1078, i8* %1079, align 1, !tbaa !2450
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 8
  %1082 = load i64, i64* %RCX
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 4
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1081 to i64*
  store i64 %1082, i64* %1085
  %1086 = load i64, i64* %RAX
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 3
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1086 to i32*
  %1090 = load i32, i32* %1089
  %1091 = sext i32 %1090 to i64
  store i64 %1091, i64* %RAX, align 8, !tbaa !2428
  %1092 = load i64, i64* %RAX
  %1093 = mul i64 %1092, 8
  %1094 = add i64 %1093, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 8
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RBP
  %1100 = sub i64 %1099, 40
  %1101 = load i64, i64* %RAX
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1100 to i64*
  store i64 %1101, i64* %1104
  %1105 = load i64, i64* %PC
  %1106 = sub i64 %1105, 1101
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 5
  store i64 %1108, i64* %PC
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1106, i64* %1109, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1110 = load i64, i64* %RBP
  %1111 = sub i64 %1110, 12
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 7
  store i64 %1113, i64* %PC
  %1114 = inttoptr i64 %1111 to i32*
  store i32 3, i32* %1114
  %1115 = load i64, i64* %RBP
  %1116 = sub i64 %1115, 12
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 3
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i32*
  %1120 = load i32, i32* %1119
  %1121 = zext i32 %1120 to i64
  store i64 %1121, i64* %RDI, align 8, !tbaa !2428
  %1122 = load i64, i64* %PC
  %1123 = sub i64 %1122, 234
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 5
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  store i64 %1127, i64* %PC
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1129 = load i64, i64* %1128, align 8, !tbaa !2428
  %1130 = add i64 %1129, -8
  %1131 = inttoptr i64 %1130 to i64*
  store i64 %1125, i64* %1131
  store i64 %1130, i64* %1128, align 8, !tbaa !2428
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1123, i64* %1132, align 8, !tbaa !2428
  %1133 = load i64, i64* %PC
  %1134 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1133, %struct.Memory* %MEMORY.1)
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 8
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i64*
  %1140 = load i64, i64* %1139
  store i64 %1140, i64* %RAX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RAX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 3
  store i64 %1143, i64* %PC
  store i64 %1141, i64* %RCX, align 8, !tbaa !2428
  %1144 = load i64, i64* %RCX
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 4
  store i64 %1146, i64* %PC
  %1147 = add i64 4, %1144
  store i64 %1147, i64* %RCX, align 8, !tbaa !2428
  %1148 = icmp ult i64 %1147, %1144
  %1149 = icmp ult i64 %1147, 4
  %1150 = or i1 %1148, %1149
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1151, i8* %1152, align 1, !tbaa !2432
  %1153 = trunc i64 %1147 to i32
  %1154 = and i32 %1153, 255
  %1155 = call i32 @llvm.ctpop.i32(i32 %1154) #16
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  %1158 = xor i8 %1157, 1
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1158, i8* %1159, align 1, !tbaa !2446
  %1160 = xor i64 4, %1144
  %1161 = xor i64 %1160, %1147
  %1162 = lshr i64 %1161, 4
  %1163 = trunc i64 %1162 to i8
  %1164 = and i8 %1163, 1
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1164, i8* %1165, align 1, !tbaa !2447
  %1166 = icmp eq i64 %1147, 0
  %1167 = zext i1 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1167, i8* %1168, align 1, !tbaa !2448
  %1169 = lshr i64 %1147, 63
  %1170 = trunc i64 %1169 to i8
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1170, i8* %1171, align 1, !tbaa !2449
  %1172 = lshr i64 %1144, 63
  %1173 = xor i64 %1169, %1172
  %1174 = add nuw nsw i64 %1173, %1169
  %1175 = icmp eq i64 %1174, 2
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1176, i8* %1177, align 1, !tbaa !2450
  %1178 = load i64, i64* %RBP
  %1179 = sub i64 %1178, 8
  %1180 = load i64, i64* %RCX
  %1181 = load i64, i64* %PC
  %1182 = add i64 %1181, 4
  store i64 %1182, i64* %PC
  %1183 = inttoptr i64 %1179 to i64*
  store i64 %1180, i64* %1183
  %1184 = load i64, i64* %RAX
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 3
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i32*
  %1188 = load i32, i32* %1187
  %1189 = sext i32 %1188 to i64
  store i64 %1189, i64* %RAX, align 8, !tbaa !2428
  %1190 = load i64, i64* %RAX
  %1191 = mul i64 %1190, 8
  %1192 = add i64 %1191, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 8
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1192 to i64*
  %1196 = load i64, i64* %1195
  store i64 %1196, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 40
  %1199 = load i64, i64* %RAX
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 4
  store i64 %1201, i64* %PC
  %1202 = inttoptr i64 %1198 to i64*
  store i64 %1199, i64* %1202
  %1203 = load i64, i64* %PC
  %1204 = sub i64 %1203, 151
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 5
  store i64 %1206, i64* %PC
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1204, i64* %1207, align 8, !tbaa !2428
  br label %block_400586

block_4009df:                                     ; preds = %block_4009d8, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4009d8 ]
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 12
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RDI, align 8, !tbaa !2428
  %1215 = load i64, i64* %PC
  %1216 = sub i64 %1215, 1234
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 5
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1222 = load i64, i64* %1221, align 8, !tbaa !2428
  %1223 = add i64 %1222, -8
  %1224 = inttoptr i64 %1223 to i64*
  store i64 %1218, i64* %1224
  store i64 %1223, i64* %1221, align 8, !tbaa !2428
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1225, align 8, !tbaa !2428
  %1226 = load i64, i64* %PC
  %1227 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1226, %struct.Memory* %MEMORY.0)
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 8
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i64*
  %1233 = load i64, i64* %1232
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RAX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 3
  store i64 %1236, i64* %PC
  store i64 %1234, i64* %RCX, align 8, !tbaa !2428
  %1237 = load i64, i64* %RCX
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 4
  store i64 %1239, i64* %PC
  %1240 = add i64 4, %1237
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = icmp ult i64 %1240, %1237
  %1242 = icmp ult i64 %1240, 4
  %1243 = or i1 %1241, %1242
  %1244 = zext i1 %1243 to i8
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1244, i8* %1245, align 1, !tbaa !2432
  %1246 = trunc i64 %1240 to i32
  %1247 = and i32 %1246, 255
  %1248 = call i32 @llvm.ctpop.i32(i32 %1247) #16
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1251, i8* %1252, align 1, !tbaa !2446
  %1253 = xor i64 4, %1237
  %1254 = xor i64 %1253, %1240
  %1255 = lshr i64 %1254, 4
  %1256 = trunc i64 %1255 to i8
  %1257 = and i8 %1256, 1
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1257, i8* %1258, align 1, !tbaa !2447
  %1259 = icmp eq i64 %1240, 0
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1260, i8* %1261, align 1, !tbaa !2448
  %1262 = lshr i64 %1240, 63
  %1263 = trunc i64 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1263, i8* %1264, align 1, !tbaa !2449
  %1265 = lshr i64 %1237, 63
  %1266 = xor i64 %1262, %1265
  %1267 = add nuw nsw i64 %1266, %1262
  %1268 = icmp eq i64 %1267, 2
  %1269 = zext i1 %1268 to i8
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1269, i8* %1270, align 1, !tbaa !2450
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 8
  %1273 = load i64, i64* %RCX
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1272 to i64*
  store i64 %1273, i64* %1276
  %1277 = load i64, i64* %RAX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i32*
  %1281 = load i32, i32* %1280
  %1282 = sext i32 %1281 to i64
  store i64 %1282, i64* %RAX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RAX
  %1284 = mul i64 %1283, 8
  %1285 = add i64 %1284, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 8
  store i64 %1287, i64* %PC
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 40
  %1292 = load i64, i64* %RAX
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1291 to i64*
  store i64 %1292, i64* %1295
  %1296 = load i64, i64* %PC
  %1297 = sub i64 %1296, 1151
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1297, i64* %1300, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_40071c, %block_400aa0, %block_400622, %block_4009df, %block_4005f0, %block_4009a6, %block_4006b8, %block_4008ac, %block_400b36, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %1227, %block_4009df ], [ %1434, %block_400aa0 ], [ %1336, %block_400622 ], [ %1036, %block_4009a6 ], [ %840, %block_4008ac ], [ %938, %block_4006b8 ], [ %735, %block_400b36 ], [ %151, %block_400a6e ], [ %1134, %block_4005f0 ], [ %53, %block_400974 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %1532, %block_40071c ], [ %1672, %block_4007b2 ]
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 40
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 4
  store i64 %1304, i64* %PC
  %1305 = inttoptr i64 %1302 to i64*
  %1306 = load i64, i64* %1305
  store i64 %1306, i64* %RAX, align 8, !tbaa !2428
  %1307 = load i64, i64* %RAX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 2
  store i64 %1309, i64* %PC
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1307, i64* %1310, align 8, !tbaa !2428
  %1311 = load i64, i64* %PC
  switch i64 %1311, label %1760 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4197174, label %block_400b36
    i64 4196024, label %block_4006b8
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400622:                                     ; preds = %block_400586
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 12
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 7
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i32*
  store i32 4, i32* %1316
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = zext i32 %1322 to i64
  store i64 %1323, i64* %RDI, align 8, !tbaa !2428
  %1324 = load i64, i64* %PC
  %1325 = sub i64 %1324, 284
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  store i64 %1329, i64* %PC
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1331 = load i64, i64* %1330, align 8, !tbaa !2428
  %1332 = add i64 %1331, -8
  %1333 = inttoptr i64 %1332 to i64*
  store i64 %1327, i64* %1333
  store i64 %1332, i64* %1330, align 8, !tbaa !2428
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1325, i64* %1334, align 8, !tbaa !2428
  %1335 = load i64, i64* %PC
  %1336 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1335, %struct.Memory* %MEMORY.1)
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 8
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 4
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i64*
  %1342 = load i64, i64* %1341
  store i64 %1342, i64* %RAX, align 8, !tbaa !2428
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  store i64 %1343, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 4
  store i64 %1348, i64* %PC
  %1349 = add i64 4, %1346
  store i64 %1349, i64* %RCX, align 8, !tbaa !2428
  %1350 = icmp ult i64 %1349, %1346
  %1351 = icmp ult i64 %1349, 4
  %1352 = or i1 %1350, %1351
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1353, i8* %1354, align 1, !tbaa !2432
  %1355 = trunc i64 %1349 to i32
  %1356 = and i32 %1355, 255
  %1357 = call i32 @llvm.ctpop.i32(i32 %1356) #16
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1360, i8* %1361, align 1, !tbaa !2446
  %1362 = xor i64 4, %1346
  %1363 = xor i64 %1362, %1349
  %1364 = lshr i64 %1363, 4
  %1365 = trunc i64 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1366, i8* %1367, align 1, !tbaa !2447
  %1368 = icmp eq i64 %1349, 0
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1369, i8* %1370, align 1, !tbaa !2448
  %1371 = lshr i64 %1349, 63
  %1372 = trunc i64 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1372, i8* %1373, align 1, !tbaa !2449
  %1374 = lshr i64 %1346, 63
  %1375 = xor i64 %1371, %1374
  %1376 = add nuw nsw i64 %1375, %1371
  %1377 = icmp eq i64 %1376, 2
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1378, i8* %1379, align 1, !tbaa !2450
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 8
  %1382 = load i64, i64* %RCX
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1381 to i64*
  store i64 %1382, i64* %1385
  %1386 = load i64, i64* %RAX
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 3
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i32*
  %1390 = load i32, i32* %1389
  %1391 = sext i32 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RAX
  %1393 = mul i64 %1392, 8
  %1394 = add i64 %1393, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 8
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 40
  %1401 = load i64, i64* %RAX
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1400 to i64*
  store i64 %1401, i64* %1404
  %1405 = load i64, i64* %PC
  %1406 = sub i64 %1405, 201
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1406, i64* %1409, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 12
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 7
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i32*
  store i32 27, i32* %1414
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RDI, align 8, !tbaa !2428
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1434
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1433, %struct.Memory* %MEMORY.1)
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 8
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 4
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 3
  store i64 %1443, i64* %PC
  store i64 %1441, i64* %RCX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RCX
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = add i64 4, %1444
  store i64 %1447, i64* %RCX, align 8, !tbaa !2428
  %1448 = icmp ult i64 %1447, %1444
  %1449 = icmp ult i64 %1447, 4
  %1450 = or i1 %1448, %1449
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1451, i8* %1452, align 1, !tbaa !2432
  %1453 = trunc i64 %1447 to i32
  %1454 = and i32 %1453, 255
  %1455 = call i32 @llvm.ctpop.i32(i32 %1454) #16
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1458, i8* %1459, align 1, !tbaa !2446
  %1460 = xor i64 4, %1444
  %1461 = xor i64 %1460, %1447
  %1462 = lshr i64 %1461, 4
  %1463 = trunc i64 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1464, i8* %1465, align 1, !tbaa !2447
  %1466 = icmp eq i64 %1447, 0
  %1467 = zext i1 %1466 to i8
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1467, i8* %1468, align 1, !tbaa !2448
  %1469 = lshr i64 %1447, 63
  %1470 = trunc i64 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1470, i8* %1471, align 1, !tbaa !2449
  %1472 = lshr i64 %1444, 63
  %1473 = xor i64 %1469, %1472
  %1474 = add nuw nsw i64 %1473, %1469
  %1475 = icmp eq i64 %1474, 2
  %1476 = zext i1 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1476, i8* %1477, align 1, !tbaa !2450
  %1478 = load i64, i64* %RBP
  %1479 = sub i64 %1478, 8
  %1480 = load i64, i64* %RCX
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1479 to i64*
  store i64 %1480, i64* %1483
  %1484 = load i64, i64* %RAX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RAX
  %1491 = mul i64 %1490, 8
  %1492 = add i64 %1491, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 8
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i64, i64* %RAX
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1498 to i64*
  store i64 %1499, i64* %1502
  %1503 = load i64, i64* %PC
  %1504 = sub i64 %1503, 1351
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 5
  store i64 %1506, i64* %PC
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1504, i64* %1507, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 12
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 7
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  store i32 9, i32* %1512
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  %1518 = load i32, i32* %1517
  %1519 = zext i32 %1518 to i64
  store i64 %1519, i64* %RDI, align 8, !tbaa !2428
  %1520 = load i64, i64* %PC
  %1521 = sub i64 %1520, 534
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  store i64 %1525, i64* %PC
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1527 = load i64, i64* %1526, align 8, !tbaa !2428
  %1528 = add i64 %1527, -8
  %1529 = inttoptr i64 %1528 to i64*
  store i64 %1523, i64* %1529
  store i64 %1528, i64* %1526, align 8, !tbaa !2428
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1521, i64* %1530, align 8, !tbaa !2428
  %1531 = load i64, i64* %PC
  %1532 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1531, %struct.Memory* %MEMORY.1)
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 8
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 4
  store i64 %1536, i64* %PC
  %1537 = inttoptr i64 %1534 to i64*
  %1538 = load i64, i64* %1537
  store i64 %1538, i64* %RAX, align 8, !tbaa !2428
  %1539 = load i64, i64* %RAX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 3
  store i64 %1541, i64* %PC
  store i64 %1539, i64* %RCX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RCX
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 4
  store i64 %1544, i64* %PC
  %1545 = add i64 4, %1542
  store i64 %1545, i64* %RCX, align 8, !tbaa !2428
  %1546 = icmp ult i64 %1545, %1542
  %1547 = icmp ult i64 %1545, 4
  %1548 = or i1 %1546, %1547
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1549, i8* %1550, align 1, !tbaa !2432
  %1551 = trunc i64 %1545 to i32
  %1552 = and i32 %1551, 255
  %1553 = call i32 @llvm.ctpop.i32(i32 %1552) #16
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1556, i8* %1557, align 1, !tbaa !2446
  %1558 = xor i64 4, %1542
  %1559 = xor i64 %1558, %1545
  %1560 = lshr i64 %1559, 4
  %1561 = trunc i64 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1562, i8* %1563, align 1, !tbaa !2447
  %1564 = icmp eq i64 %1545, 0
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1565, i8* %1566, align 1, !tbaa !2448
  %1567 = lshr i64 %1545, 63
  %1568 = trunc i64 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1568, i8* %1569, align 1, !tbaa !2449
  %1570 = lshr i64 %1542, 63
  %1571 = xor i64 %1567, %1570
  %1572 = add nuw nsw i64 %1571, %1567
  %1573 = icmp eq i64 %1572, 2
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1574, i8* %1575, align 1, !tbaa !2450
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 8
  %1578 = load i64, i64* %RCX
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 4
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1577 to i64*
  store i64 %1578, i64* %1581
  %1582 = load i64, i64* %RAX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = mul i64 %1588, 8
  %1590 = add i64 %1589, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 8
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1590 to i64*
  %1594 = load i64, i64* %1593
  store i64 %1594, i64* %RAX, align 8, !tbaa !2428
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %RAX
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 4
  store i64 %1599, i64* %PC
  %1600 = inttoptr i64 %1596 to i64*
  store i64 %1597, i64* %1600
  %1601 = load i64, i64* %PC
  %1602 = sub i64 %1601, 451
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1602, i64* %1605, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 12
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 7
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i32*
  store i32 14, i32* %1610
  %1611 = load i64, i64* %PC
  %1612 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1611, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1612

block_400910:                                     ; preds = %block_400586
  %1613 = load i64, i64* %RBP
  %1614 = sub i64 %1613, 12
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 7
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1614 to i32*
  store i32 19, i32* %1617
  %1618 = load i64, i64* %PC
  %1619 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1618, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1619

block_40058c:                                     ; preds = %block_400586
  %1620 = load i64, i64* %RBP
  %1621 = sub i64 %1620, 12
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 7
  store i64 %1623, i64* %PC
  %1624 = inttoptr i64 %1621 to i32*
  store i32 1, i32* %1624
  %1625 = load i64, i64* %PC
  %1626 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1625, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1626

block_400a0a:                                     ; preds = %block_400586
  %1627 = load i64, i64* %RBP
  %1628 = sub i64 %1627, 12
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 7
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to i32*
  store i32 24, i32* %1631
  %1632 = load i64, i64* %PC
  %1633 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1632, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1633

block_400686:                                     ; preds = %block_400586
  %1634 = load i64, i64* %RBP
  %1635 = sub i64 %1634, 12
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 7
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to i32*
  store i32 6, i32* %1638
  %1639 = load i64, i64* %PC
  %1640 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1639, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1640

block_400b04:                                     ; preds = %block_400586
  %1641 = load i64, i64* %RBP
  %1642 = sub i64 %1641, 12
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 7
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1642 to i32*
  store i32 29, i32* %1645
  %1646 = load i64, i64* %PC
  %1647 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1646, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1647

block_4007b2:                                     ; preds = %block_400586
  %1648 = load i64, i64* %RBP
  %1649 = sub i64 %1648, 12
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 7
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1649 to i32*
  store i32 12, i32* %1652
  %1653 = load i64, i64* %RBP
  %1654 = sub i64 %1653, 12
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 3
  store i64 %1656, i64* %PC
  %1657 = inttoptr i64 %1654 to i32*
  %1658 = load i32, i32* %1657
  %1659 = zext i32 %1658 to i64
  store i64 %1659, i64* %RDI, align 8, !tbaa !2428
  %1660 = load i64, i64* %PC
  %1661 = sub i64 %1660, 684
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 5
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 5
  store i64 %1665, i64* %PC
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1667 = load i64, i64* %1666, align 8, !tbaa !2428
  %1668 = add i64 %1667, -8
  %1669 = inttoptr i64 %1668 to i64*
  store i64 %1663, i64* %1669
  store i64 %1668, i64* %1666, align 8, !tbaa !2428
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1661, i64* %1670, align 8, !tbaa !2428
  %1671 = load i64, i64* %PC
  %1672 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1671, %struct.Memory* %MEMORY.1)
  %1673 = load i64, i64* %RBP
  %1674 = sub i64 %1673, 8
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RAX
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 3
  store i64 %1681, i64* %PC
  store i64 %1679, i64* %RCX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RCX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 4
  store i64 %1684, i64* %PC
  %1685 = add i64 4, %1682
  store i64 %1685, i64* %RCX, align 8, !tbaa !2428
  %1686 = icmp ult i64 %1685, %1682
  %1687 = icmp ult i64 %1685, 4
  %1688 = or i1 %1686, %1687
  %1689 = zext i1 %1688 to i8
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1689, i8* %1690, align 1, !tbaa !2432
  %1691 = trunc i64 %1685 to i32
  %1692 = and i32 %1691, 255
  %1693 = call i32 @llvm.ctpop.i32(i32 %1692) #16
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = xor i8 %1695, 1
  %1697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1696, i8* %1697, align 1, !tbaa !2446
  %1698 = xor i64 4, %1682
  %1699 = xor i64 %1698, %1685
  %1700 = lshr i64 %1699, 4
  %1701 = trunc i64 %1700 to i8
  %1702 = and i8 %1701, 1
  %1703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1702, i8* %1703, align 1, !tbaa !2447
  %1704 = icmp eq i64 %1685, 0
  %1705 = zext i1 %1704 to i8
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1705, i8* %1706, align 1, !tbaa !2448
  %1707 = lshr i64 %1685, 63
  %1708 = trunc i64 %1707 to i8
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1708, i8* %1709, align 1, !tbaa !2449
  %1710 = lshr i64 %1682, 63
  %1711 = xor i64 %1707, %1710
  %1712 = add nuw nsw i64 %1711, %1707
  %1713 = icmp eq i64 %1712, 2
  %1714 = zext i1 %1713 to i8
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1714, i8* %1715, align 1, !tbaa !2450
  %1716 = load i64, i64* %RBP
  %1717 = sub i64 %1716, 8
  %1718 = load i64, i64* %RCX
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 4
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1717 to i64*
  store i64 %1718, i64* %1721
  %1722 = load i64, i64* %RAX
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 3
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1722 to i32*
  %1726 = load i32, i32* %1725
  %1727 = sext i32 %1726 to i64
  store i64 %1727, i64* %RAX, align 8, !tbaa !2428
  %1728 = load i64, i64* %RAX
  %1729 = mul i64 %1728, 8
  %1730 = add i64 %1729, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 8
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RAX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RBP
  %1736 = sub i64 %1735, 40
  %1737 = load i64, i64* %RAX
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 4
  store i64 %1739, i64* %PC
  %1740 = inttoptr i64 %1736 to i64*
  store i64 %1737, i64* %1740
  %1741 = load i64, i64* %PC
  %1742 = sub i64 %1741, 601
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 5
  store i64 %1744, i64* %PC
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1742, i64* %1745, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 12
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 7
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i32*
  store i32 11, i32* %1750
  %1751 = load i64, i64* %PC
  %1752 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1751, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1752

block_400654:                                     ; preds = %block_400586
  %1753 = load i64, i64* %RBP
  %1754 = sub i64 %1753, 12
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 7
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1754 to i32*
  store i32 5, i32* %1757
  %1758 = load i64, i64* %PC
  %1759 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1758, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1759

; <label>:1760:                                   ; preds = %block_400586
  %1761 = load i64, i64* %PC
  %1762 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1761, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1762
}

; Function Attrs: noinline
define %struct.Memory* @sub_40081d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40081d

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 1234
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 1151
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 5, i32* %719
  %720 = load i64, i64* %PC
  %721 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %720, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %721

block_400ad2:                                     ; preds = %block_400586
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 12
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 7
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  store i32 28, i32* %726
  %727 = load i64, i64* %PC
  %728 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %727, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %728

block_40074e:                                     ; preds = %block_400586
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 12
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 7
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i32*
  store i32 10, i32* %733
  %734 = load i64, i64* %PC
  %735 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %734, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %735

block_400848:                                     ; preds = %block_400586
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 12
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 7
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i32*
  store i32 15, i32* %740
  %741 = load i64, i64* %PC
  %742 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %741, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %742

block_400942:                                     ; preds = %block_400586
  %743 = load i64, i64* %RBP
  %744 = sub i64 %743, 12
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 7
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %744 to i32*
  store i32 20, i32* %747
  %748 = load i64, i64* %PC
  %749 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %748, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %749

block_4005be:                                     ; preds = %block_400586
  %750 = load i64, i64* %RBP
  %751 = sub i64 %750, 12
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = inttoptr i64 %751 to i32*
  store i32 2, i32* %754
  %755 = load i64, i64* %PC
  %756 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %755, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %756

block_4005f0:                                     ; preds = %block_400586
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 12
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 7
  store i64 %760, i64* %PC
  %761 = inttoptr i64 %758 to i32*
  store i32 3, i32* %761
  %762 = load i64, i64* %RBP
  %763 = sub i64 %762, 12
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 3
  store i64 %765, i64* %PC
  %766 = inttoptr i64 %763 to i32*
  %767 = load i32, i32* %766
  %768 = zext i32 %767 to i64
  store i64 %768, i64* %RDI, align 8, !tbaa !2428
  %769 = load i64, i64* %PC
  %770 = sub i64 %769, 234
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 5
  store i64 %774, i64* %PC
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = add i64 %776, -8
  %778 = inttoptr i64 %777 to i64*
  store i64 %772, i64* %778
  store i64 %777, i64* %775, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %770, i64* %779, align 8, !tbaa !2428
  %780 = load i64, i64* %PC
  %781 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %780, %struct.Memory* %MEMORY.0)
  %782 = load i64, i64* %RBP
  %783 = sub i64 %782, 8
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %783 to i64*
  %787 = load i64, i64* %786
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = load i64, i64* %RAX
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 3
  store i64 %790, i64* %PC
  store i64 %788, i64* %RCX, align 8, !tbaa !2428
  %791 = load i64, i64* %RCX
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 4
  store i64 %793, i64* %PC
  %794 = add i64 4, %791
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = icmp ult i64 %794, %791
  %796 = icmp ult i64 %794, 4
  %797 = or i1 %795, %796
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %798, i8* %799, align 1, !tbaa !2432
  %800 = trunc i64 %794 to i32
  %801 = and i32 %800, 255
  %802 = call i32 @llvm.ctpop.i32(i32 %801) #16
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = xor i8 %804, 1
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %805, i8* %806, align 1, !tbaa !2446
  %807 = xor i64 4, %791
  %808 = xor i64 %807, %794
  %809 = lshr i64 %808, 4
  %810 = trunc i64 %809 to i8
  %811 = and i8 %810, 1
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %811, i8* %812, align 1, !tbaa !2447
  %813 = icmp eq i64 %794, 0
  %814 = zext i1 %813 to i8
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %814, i8* %815, align 1, !tbaa !2448
  %816 = lshr i64 %794, 63
  %817 = trunc i64 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %817, i8* %818, align 1, !tbaa !2449
  %819 = lshr i64 %791, 63
  %820 = xor i64 %816, %819
  %821 = add nuw nsw i64 %820, %816
  %822 = icmp eq i64 %821, 2
  %823 = zext i1 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %823, i8* %824, align 1, !tbaa !2450
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 8
  %827 = load i64, i64* %RCX
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 4
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %826 to i64*
  store i64 %827, i64* %830
  %831 = load i64, i64* %RAX
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = sext i32 %835 to i64
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RAX
  %838 = mul i64 %837, 8
  %839 = add i64 %838, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 8
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 40
  %846 = load i64, i64* %RAX
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %845 to i64*
  store i64 %846, i64* %849
  %850 = load i64, i64* %PC
  %851 = sub i64 %850, 151
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 5
  store i64 %853, i64* %PC
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %851, i64* %854, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %855 = load i64, i64* %RBP
  %856 = sub i64 %855, 12
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 7
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  store i32 25, i32* %859
  %860 = load i64, i64* %PC
  %861 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %860, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %861

block_4006b8:                                     ; preds = %block_400586
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 12
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 7
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i32*
  store i32 7, i32* %866
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 12
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  %872 = load i32, i32* %871
  %873 = zext i32 %872 to i64
  store i64 %873, i64* %RDI, align 8, !tbaa !2428
  %874 = load i64, i64* %PC
  %875 = sub i64 %874, 434
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 5
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 5
  store i64 %879, i64* %PC
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %881 = load i64, i64* %880, align 8, !tbaa !2428
  %882 = add i64 %881, -8
  %883 = inttoptr i64 %882 to i64*
  store i64 %877, i64* %883
  store i64 %882, i64* %880, align 8, !tbaa !2428
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %875, i64* %884, align 8, !tbaa !2428
  %885 = load i64, i64* %PC
  %886 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %885, %struct.Memory* %MEMORY.0)
  %887 = load i64, i64* %RBP
  %888 = sub i64 %887, 8
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %888 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  store i64 %893, i64* %RCX, align 8, !tbaa !2428
  %896 = load i64, i64* %RCX
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = add i64 4, %896
  store i64 %899, i64* %RCX, align 8, !tbaa !2428
  %900 = icmp ult i64 %899, %896
  %901 = icmp ult i64 %899, 4
  %902 = or i1 %900, %901
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = trunc i64 %899 to i32
  %906 = and i32 %905, 255
  %907 = call i32 @llvm.ctpop.i32(i32 %906) #16
  %908 = trunc i32 %907 to i8
  %909 = and i8 %908, 1
  %910 = xor i8 %909, 1
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %910, i8* %911, align 1, !tbaa !2446
  %912 = xor i64 4, %896
  %913 = xor i64 %912, %899
  %914 = lshr i64 %913, 4
  %915 = trunc i64 %914 to i8
  %916 = and i8 %915, 1
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %916, i8* %917, align 1, !tbaa !2447
  %918 = icmp eq i64 %899, 0
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %919, i8* %920, align 1, !tbaa !2448
  %921 = lshr i64 %899, 63
  %922 = trunc i64 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %922, i8* %923, align 1, !tbaa !2449
  %924 = lshr i64 %896, 63
  %925 = xor i64 %921, %924
  %926 = add nuw nsw i64 %925, %921
  %927 = icmp eq i64 %926, 2
  %928 = zext i1 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %928, i8* %929, align 1, !tbaa !2450
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 8
  %932 = load i64, i64* %RCX
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 4
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %931 to i64*
  store i64 %932, i64* %935
  %936 = load i64, i64* %RAX
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 3
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939
  %941 = sext i32 %940 to i64
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = mul i64 %942, 8
  %944 = add i64 %943, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 8
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i64*
  %948 = load i64, i64* %947
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RBP
  %950 = sub i64 %949, 40
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %950 to i64*
  store i64 %951, i64* %954
  %955 = load i64, i64* %PC
  %956 = sub i64 %955, 351
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 5
  store i64 %958, i64* %PC
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %956, i64* %959, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 12
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 7
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i32*
  store i32 30, i32* %964
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 12
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i32*
  %970 = load i32, i32* %969
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %RDI, align 8, !tbaa !2428
  %972 = load i64, i64* %PC
  %973 = sub i64 %972, 1584
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 5
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 5
  store i64 %977, i64* %PC
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %979 = load i64, i64* %978, align 8, !tbaa !2428
  %980 = add i64 %979, -8
  %981 = inttoptr i64 %980 to i64*
  store i64 %975, i64* %981
  store i64 %980, i64* %978, align 8, !tbaa !2428
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %973, i64* %982, align 8, !tbaa !2428
  %983 = load i64, i64* %PC
  %984 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %983, %struct.Memory* %MEMORY.0)
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 8
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i64*
  %990 = load i64, i64* %989
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 3
  store i64 %993, i64* %PC
  store i64 %991, i64* %RCX, align 8, !tbaa !2428
  %994 = load i64, i64* %RCX
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = add i64 4, %994
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = icmp ult i64 %997, %994
  %999 = icmp ult i64 %997, 4
  %1000 = or i1 %998, %999
  %1001 = zext i1 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1001, i8* %1002, align 1, !tbaa !2432
  %1003 = trunc i64 %997 to i32
  %1004 = and i32 %1003, 255
  %1005 = call i32 @llvm.ctpop.i32(i32 %1004) #16
  %1006 = trunc i32 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = xor i8 %1007, 1
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1008, i8* %1009, align 1, !tbaa !2446
  %1010 = xor i64 4, %994
  %1011 = xor i64 %1010, %997
  %1012 = lshr i64 %1011, 4
  %1013 = trunc i64 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1014, i8* %1015, align 1, !tbaa !2447
  %1016 = icmp eq i64 %997, 0
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1017, i8* %1018, align 1, !tbaa !2448
  %1019 = lshr i64 %997, 63
  %1020 = trunc i64 %1019 to i8
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1020, i8* %1021, align 1, !tbaa !2449
  %1022 = lshr i64 %994, 63
  %1023 = xor i64 %1019, %1022
  %1024 = add nuw nsw i64 %1023, %1019
  %1025 = icmp eq i64 %1024, 2
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1026, i8* %1027, align 1, !tbaa !2450
  %1028 = load i64, i64* %RBP
  %1029 = sub i64 %1028, 8
  %1030 = load i64, i64* %RCX
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1029 to i64*
  store i64 %1030, i64* %1033
  %1034 = load i64, i64* %RAX
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 3
  store i64 %1036, i64* %PC
  %1037 = inttoptr i64 %1034 to i32*
  %1038 = load i32, i32* %1037
  %1039 = sext i32 %1038 to i64
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = mul i64 %1040, 8
  %1042 = add i64 %1041, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 8
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RBP
  %1048 = sub i64 %1047, 40
  %1049 = load i64, i64* %RAX
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 4
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1048 to i64*
  store i64 %1049, i64* %1052
  %1053 = load i64, i64* %PC
  %1054 = sub i64 %1053, 1501
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1054, i64* %1057, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 12
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 7
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1059 to i32*
  store i32 0, i32* %1062
  %1063 = load i64, i64* %RSP
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC
  %1066 = add i64 48, %1063
  store i64 %1066, i64* %RSP, align 8, !tbaa !2428
  %1067 = icmp ult i64 %1066, %1063
  %1068 = icmp ult i64 %1066, 48
  %1069 = or i1 %1067, %1068
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1070, i8* %1071, align 1, !tbaa !2432
  %1072 = trunc i64 %1066 to i32
  %1073 = and i32 %1072, 255
  %1074 = call i32 @llvm.ctpop.i32(i32 %1073) #16
  %1075 = trunc i32 %1074 to i8
  %1076 = and i8 %1075, 1
  %1077 = xor i8 %1076, 1
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1077, i8* %1078, align 1, !tbaa !2446
  %1079 = xor i64 48, %1063
  %1080 = xor i64 %1079, %1066
  %1081 = lshr i64 %1080, 4
  %1082 = trunc i64 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1083, i8* %1084, align 1, !tbaa !2447
  %1085 = icmp eq i64 %1066, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i64 %1066, 63
  %1089 = trunc i64 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = lshr i64 %1063, 63
  %1092 = xor i64 %1088, %1091
  %1093 = add nuw nsw i64 %1092, %1088
  %1094 = icmp eq i64 %1093, 2
  %1095 = zext i1 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1095, i8* %1096, align 1, !tbaa !2450
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 1
  store i64 %1098, i64* %PC
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1100 = load i64, i64* %1099, align 8, !tbaa !2428
  %1101 = add i64 %1100, 8
  %1102 = inttoptr i64 %1100 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RBP, align 8, !tbaa !2428
  store i64 %1101, i64* %1099, align 8, !tbaa !2428
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 1
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1108 = load i64, i64* %1107, align 8, !tbaa !2428
  %1109 = inttoptr i64 %1108 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %1106, align 8, !tbaa !2428
  %1111 = add i64 %1108, 8
  store i64 %1111, i64* %1107, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007b2:                                     ; preds = %block_400586
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  store i32 12, i32* %1116
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 12
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 3
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i32*
  %1122 = load i32, i32* %1121
  %1123 = zext i32 %1122 to i64
  store i64 %1123, i64* %RDI, align 8, !tbaa !2428
  %1124 = load i64, i64* %PC
  %1125 = sub i64 %1124, 684
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  store i64 %1129, i64* %PC
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1131 = load i64, i64* %1130, align 8, !tbaa !2428
  %1132 = add i64 %1131, -8
  %1133 = inttoptr i64 %1132 to i64*
  store i64 %1127, i64* %1133
  store i64 %1132, i64* %1130, align 8, !tbaa !2428
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1134, align 8, !tbaa !2428
  %1135 = load i64, i64* %PC
  %1136 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1135, %struct.Memory* %MEMORY.0)
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 8
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1146 = load i64, i64* %RCX
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 4
  store i64 %1148, i64* %PC
  %1149 = add i64 4, %1146
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = icmp ult i64 %1149, %1146
  %1151 = icmp ult i64 %1149, 4
  %1152 = or i1 %1150, %1151
  %1153 = zext i1 %1152 to i8
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1153, i8* %1154, align 1, !tbaa !2432
  %1155 = trunc i64 %1149 to i32
  %1156 = and i32 %1155, 255
  %1157 = call i32 @llvm.ctpop.i32(i32 %1156) #16
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1160, i8* %1161, align 1, !tbaa !2446
  %1162 = xor i64 4, %1146
  %1163 = xor i64 %1162, %1149
  %1164 = lshr i64 %1163, 4
  %1165 = trunc i64 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1166, i8* %1167, align 1, !tbaa !2447
  %1168 = icmp eq i64 %1149, 0
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1169, i8* %1170, align 1, !tbaa !2448
  %1171 = lshr i64 %1149, 63
  %1172 = trunc i64 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1172, i8* %1173, align 1, !tbaa !2449
  %1174 = lshr i64 %1146, 63
  %1175 = xor i64 %1171, %1174
  %1176 = add nuw nsw i64 %1175, %1171
  %1177 = icmp eq i64 %1176, 2
  %1178 = zext i1 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1178, i8* %1179, align 1, !tbaa !2450
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 8
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1181 to i64*
  store i64 %1182, i64* %1185
  %1186 = load i64, i64* %RAX
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 3
  store i64 %1188, i64* %PC
  %1189 = inttoptr i64 %1186 to i32*
  %1190 = load i32, i32* %1189
  %1191 = sext i32 %1190 to i64
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = mul i64 %1192, 8
  %1194 = add i64 %1193, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 8
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197
  store i64 %1198, i64* %RAX, align 8, !tbaa !2428
  %1199 = load i64, i64* %RBP
  %1200 = sub i64 %1199, 40
  %1201 = load i64, i64* %RAX
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 4
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1200 to i64*
  store i64 %1201, i64* %1204
  %1205 = load i64, i64* %PC
  %1206 = sub i64 %1205, 601
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 5
  store i64 %1208, i64* %PC
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1206, i64* %1209, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 7
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  store i32 17, i32* %1214
  %1215 = load i64, i64* %RBP
  %1216 = sub i64 %1215, 12
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 3
  store i64 %1218, i64* %PC
  %1219 = inttoptr i64 %1216 to i32*
  %1220 = load i32, i32* %1219
  %1221 = zext i32 %1220 to i64
  store i64 %1221, i64* %RDI, align 8, !tbaa !2428
  %1222 = load i64, i64* %PC
  %1223 = sub i64 %1222, 934
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 5
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 5
  store i64 %1227, i64* %PC
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1229 = load i64, i64* %1228, align 8, !tbaa !2428
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1225, i64* %1231
  store i64 %1230, i64* %1228, align 8, !tbaa !2428
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1223, i64* %1232, align 8, !tbaa !2428
  %1233 = load i64, i64* %PC
  %1234 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1233, %struct.Memory* %MEMORY.0)
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 8
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1236 to i64*
  %1240 = load i64, i64* %1239
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 3
  store i64 %1243, i64* %PC
  store i64 %1241, i64* %RCX, align 8, !tbaa !2428
  %1244 = load i64, i64* %RCX
  %1245 = load i64, i64* %PC
  %1246 = add i64 %1245, 4
  store i64 %1246, i64* %PC
  %1247 = add i64 4, %1244
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %1248 = icmp ult i64 %1247, %1244
  %1249 = icmp ult i64 %1247, 4
  %1250 = or i1 %1248, %1249
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1251, i8* %1252, align 1, !tbaa !2432
  %1253 = trunc i64 %1247 to i32
  %1254 = and i32 %1253, 255
  %1255 = call i32 @llvm.ctpop.i32(i32 %1254) #16
  %1256 = trunc i32 %1255 to i8
  %1257 = and i8 %1256, 1
  %1258 = xor i8 %1257, 1
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1258, i8* %1259, align 1, !tbaa !2446
  %1260 = xor i64 4, %1244
  %1261 = xor i64 %1260, %1247
  %1262 = lshr i64 %1261, 4
  %1263 = trunc i64 %1262 to i8
  %1264 = and i8 %1263, 1
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1264, i8* %1265, align 1, !tbaa !2447
  %1266 = icmp eq i64 %1247, 0
  %1267 = zext i1 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1267, i8* %1268, align 1, !tbaa !2448
  %1269 = lshr i64 %1247, 63
  %1270 = trunc i64 %1269 to i8
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1270, i8* %1271, align 1, !tbaa !2449
  %1272 = lshr i64 %1244, 63
  %1273 = xor i64 %1269, %1272
  %1274 = add nuw nsw i64 %1273, %1269
  %1275 = icmp eq i64 %1274, 2
  %1276 = zext i1 %1275 to i8
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1276, i8* %1277, align 1, !tbaa !2450
  %1278 = load i64, i64* %RBP
  %1279 = sub i64 %1278, 8
  %1280 = load i64, i64* %RCX
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %PC
  %1283 = inttoptr i64 %1279 to i64*
  store i64 %1280, i64* %1283
  %1284 = load i64, i64* %RAX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 3
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1284 to i32*
  %1288 = load i32, i32* %1287
  %1289 = sext i32 %1288 to i64
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = load i64, i64* %RAX
  %1291 = mul i64 %1290, 8
  %1292 = add i64 %1291, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 8
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1292 to i64*
  %1296 = load i64, i64* %1295
  store i64 %1296, i64* %RAX, align 8, !tbaa !2428
  %1297 = load i64, i64* %RBP
  %1298 = sub i64 %1297, 40
  %1299 = load i64, i64* %RAX
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1298 to i64*
  store i64 %1299, i64* %1302
  %1303 = load i64, i64* %PC
  %1304 = sub i64 %1303, 851
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 5
  store i64 %1306, i64* %PC
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1304, i64* %1307, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_40071c, %block_40081d, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %1534, %block_40081d ], [ %1343, %block_400622 ], [ %1234, %block_4008ac ], [ %1136, %block_4007b2 ], [ %984, %block_400b36 ], [ %886, %block_4006b8 ], [ %151, %block_400a6e ], [ %781, %block_4005f0 ], [ %53, %block_400974 ], [ %641, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %1441, %block_400aa0 ], [ %1632, %block_40071c ], [ %1777, %block_4009a6 ]
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 40
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 4
  store i64 %1311, i64* %PC
  %1312 = inttoptr i64 %1309 to i64*
  %1313 = load i64, i64* %1312
  store i64 %1313, i64* %RAX, align 8, !tbaa !2428
  %1314 = load i64, i64* %RAX
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 2
  store i64 %1316, i64* %PC
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1314, i64* %1317, align 8, !tbaa !2428
  %1318 = load i64, i64* %PC
  switch i64 %1318, label %1851 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 12
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  store i32 4, i32* %1323
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 12
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %RDI, align 8, !tbaa !2428
  %1331 = load i64, i64* %PC
  %1332 = sub i64 %1331, 284
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1338 = load i64, i64* %1337, align 8, !tbaa !2428
  %1339 = add i64 %1338, -8
  %1340 = inttoptr i64 %1339 to i64*
  store i64 %1334, i64* %1340
  store i64 %1339, i64* %1337, align 8, !tbaa !2428
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1332, i64* %1341, align 8, !tbaa !2428
  %1342 = load i64, i64* %PC
  %1343 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1342, %struct.Memory* %MEMORY.0)
  %1344 = load i64, i64* %RBP
  %1345 = sub i64 %1344, 8
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 4
  store i64 %1347, i64* %PC
  %1348 = inttoptr i64 %1345 to i64*
  %1349 = load i64, i64* %1348
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = load i64, i64* %RAX
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  store i64 %1350, i64* %RCX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RCX
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = add i64 4, %1353
  store i64 %1356, i64* %RCX, align 8, !tbaa !2428
  %1357 = icmp ult i64 %1356, %1353
  %1358 = icmp ult i64 %1356, 4
  %1359 = or i1 %1357, %1358
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1360, i8* %1361, align 1, !tbaa !2432
  %1362 = trunc i64 %1356 to i32
  %1363 = and i32 %1362, 255
  %1364 = call i32 @llvm.ctpop.i32(i32 %1363) #16
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1367, i8* %1368, align 1, !tbaa !2446
  %1369 = xor i64 4, %1353
  %1370 = xor i64 %1369, %1356
  %1371 = lshr i64 %1370, 4
  %1372 = trunc i64 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1373, i8* %1374, align 1, !tbaa !2447
  %1375 = icmp eq i64 %1356, 0
  %1376 = zext i1 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1376, i8* %1377, align 1, !tbaa !2448
  %1378 = lshr i64 %1356, 63
  %1379 = trunc i64 %1378 to i8
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1379, i8* %1380, align 1, !tbaa !2449
  %1381 = lshr i64 %1353, 63
  %1382 = xor i64 %1378, %1381
  %1383 = add nuw nsw i64 %1382, %1378
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 8
  %1389 = load i64, i64* %RCX
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 4
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1388 to i64*
  store i64 %1389, i64* %1392
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i32*
  %1397 = load i32, i32* %1396
  %1398 = sext i32 %1397 to i64
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RAX
  %1400 = mul i64 %1399, 8
  %1401 = add i64 %1400, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 8
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  store i64 %1405, i64* %RAX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 40
  %1408 = load i64, i64* %RAX
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 4
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1407 to i64*
  store i64 %1408, i64* %1411
  %1412 = load i64, i64* %PC
  %1413 = sub i64 %1412, 201
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 5
  store i64 %1415, i64* %PC
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1413, i64* %1416, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 12
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 7
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i32*
  store i32 27, i32* %1421
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 12
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1423 to i32*
  %1427 = load i32, i32* %1426
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RDI, align 8, !tbaa !2428
  %1429 = load i64, i64* %PC
  %1430 = sub i64 %1429, 1434
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 5
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 5
  store i64 %1434, i64* %PC
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1436 = load i64, i64* %1435, align 8, !tbaa !2428
  %1437 = add i64 %1436, -8
  %1438 = inttoptr i64 %1437 to i64*
  store i64 %1432, i64* %1438
  store i64 %1437, i64* %1435, align 8, !tbaa !2428
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1430, i64* %1439, align 8, !tbaa !2428
  %1440 = load i64, i64* %PC
  %1441 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1440, %struct.Memory* %MEMORY.0)
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 8
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 4
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to i64*
  %1447 = load i64, i64* %1446
  store i64 %1447, i64* %RAX, align 8, !tbaa !2428
  %1448 = load i64, i64* %RAX
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  store i64 %1448, i64* %RCX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RCX
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 4
  store i64 %1453, i64* %PC
  %1454 = add i64 4, %1451
  store i64 %1454, i64* %RCX, align 8, !tbaa !2428
  %1455 = icmp ult i64 %1454, %1451
  %1456 = icmp ult i64 %1454, 4
  %1457 = or i1 %1455, %1456
  %1458 = zext i1 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1458, i8* %1459, align 1, !tbaa !2432
  %1460 = trunc i64 %1454 to i32
  %1461 = and i32 %1460, 255
  %1462 = call i32 @llvm.ctpop.i32(i32 %1461) #16
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = xor i8 %1464, 1
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1465, i8* %1466, align 1, !tbaa !2446
  %1467 = xor i64 4, %1451
  %1468 = xor i64 %1467, %1454
  %1469 = lshr i64 %1468, 4
  %1470 = trunc i64 %1469 to i8
  %1471 = and i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1471, i8* %1472, align 1, !tbaa !2447
  %1473 = icmp eq i64 %1454, 0
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1474, i8* %1475, align 1, !tbaa !2448
  %1476 = lshr i64 %1454, 63
  %1477 = trunc i64 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1477, i8* %1478, align 1, !tbaa !2449
  %1479 = lshr i64 %1451, 63
  %1480 = xor i64 %1476, %1479
  %1481 = add nuw nsw i64 %1480, %1476
  %1482 = icmp eq i64 %1481, 2
  %1483 = zext i1 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1483, i8* %1484, align 1, !tbaa !2450
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 8
  %1487 = load i64, i64* %RCX
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1486 to i64*
  store i64 %1487, i64* %1490
  %1491 = load i64, i64* %RAX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1491 to i32*
  %1495 = load i32, i32* %1494
  %1496 = sext i32 %1495 to i64
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RAX
  %1498 = mul i64 %1497, 8
  %1499 = add i64 %1498, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 8
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1499 to i64*
  %1503 = load i64, i64* %1502
  store i64 %1503, i64* %RAX, align 8, !tbaa !2428
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 40
  %1506 = load i64, i64* %RAX
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 4
  store i64 %1508, i64* %PC
  %1509 = inttoptr i64 %1505 to i64*
  store i64 %1506, i64* %1509
  %1510 = load i64, i64* %PC
  %1511 = sub i64 %1510, 1351
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 5
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1511, i64* %1514, align 8, !tbaa !2428
  br label %block_400586

block_40081d:                                     ; preds = %block_400816, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400816 ]
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 12
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 3
  store i64 %1518, i64* %PC
  %1519 = inttoptr i64 %1516 to i32*
  %1520 = load i32, i32* %1519
  %1521 = zext i32 %1520 to i64
  store i64 %1521, i64* %RDI, align 8, !tbaa !2428
  %1522 = load i64, i64* %PC
  %1523 = sub i64 %1522, 784
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1529 = load i64, i64* %1528, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1525, i64* %1531
  store i64 %1530, i64* %1528, align 8, !tbaa !2428
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1523, i64* %1532, align 8, !tbaa !2428
  %1533 = load i64, i64* %PC
  %1534 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1533, %struct.Memory* %MEMORY.1)
  %1535 = load i64, i64* %RBP
  %1536 = sub i64 %1535, 8
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i64*
  %1540 = load i64, i64* %1539
  store i64 %1540, i64* %RAX, align 8, !tbaa !2428
  %1541 = load i64, i64* %RAX
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 3
  store i64 %1543, i64* %PC
  store i64 %1541, i64* %RCX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RCX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 4
  store i64 %1546, i64* %PC
  %1547 = add i64 4, %1544
  store i64 %1547, i64* %RCX, align 8, !tbaa !2428
  %1548 = icmp ult i64 %1547, %1544
  %1549 = icmp ult i64 %1547, 4
  %1550 = or i1 %1548, %1549
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1551, i8* %1552, align 1, !tbaa !2432
  %1553 = trunc i64 %1547 to i32
  %1554 = and i32 %1553, 255
  %1555 = call i32 @llvm.ctpop.i32(i32 %1554) #16
  %1556 = trunc i32 %1555 to i8
  %1557 = and i8 %1556, 1
  %1558 = xor i8 %1557, 1
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1558, i8* %1559, align 1, !tbaa !2446
  %1560 = xor i64 4, %1544
  %1561 = xor i64 %1560, %1547
  %1562 = lshr i64 %1561, 4
  %1563 = trunc i64 %1562 to i8
  %1564 = and i8 %1563, 1
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1564, i8* %1565, align 1, !tbaa !2447
  %1566 = icmp eq i64 %1547, 0
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1567, i8* %1568, align 1, !tbaa !2448
  %1569 = lshr i64 %1547, 63
  %1570 = trunc i64 %1569 to i8
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1570, i8* %1571, align 1, !tbaa !2449
  %1572 = lshr i64 %1544, 63
  %1573 = xor i64 %1569, %1572
  %1574 = add nuw nsw i64 %1573, %1569
  %1575 = icmp eq i64 %1574, 2
  %1576 = zext i1 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1576, i8* %1577, align 1, !tbaa !2450
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 8
  %1580 = load i64, i64* %RCX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 4
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1579 to i64*
  store i64 %1580, i64* %1583
  %1584 = load i64, i64* %RAX
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 3
  store i64 %1586, i64* %PC
  %1587 = inttoptr i64 %1584 to i32*
  %1588 = load i32, i32* %1587
  %1589 = sext i32 %1588 to i64
  store i64 %1589, i64* %RAX, align 8, !tbaa !2428
  %1590 = load i64, i64* %RAX
  %1591 = mul i64 %1590, 8
  %1592 = add i64 %1591, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 8
  store i64 %1594, i64* %PC
  %1595 = inttoptr i64 %1592 to i64*
  %1596 = load i64, i64* %1595
  store i64 %1596, i64* %RAX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 40
  %1599 = load i64, i64* %RAX
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 4
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1598 to i64*
  store i64 %1599, i64* %1602
  %1603 = load i64, i64* %PC
  %1604 = sub i64 %1603, 701
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 5
  store i64 %1606, i64* %PC
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1604, i64* %1607, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1608 = load i64, i64* %RBP
  %1609 = sub i64 %1608, 12
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 7
  store i64 %1611, i64* %PC
  %1612 = inttoptr i64 %1609 to i32*
  store i32 9, i32* %1612
  %1613 = load i64, i64* %RBP
  %1614 = sub i64 %1613, 12
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 3
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1614 to i32*
  %1618 = load i32, i32* %1617
  %1619 = zext i32 %1618 to i64
  store i64 %1619, i64* %RDI, align 8, !tbaa !2428
  %1620 = load i64, i64* %PC
  %1621 = sub i64 %1620, 534
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 5
  store i64 %1625, i64* %PC
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1627 = load i64, i64* %1626, align 8, !tbaa !2428
  %1628 = add i64 %1627, -8
  %1629 = inttoptr i64 %1628 to i64*
  store i64 %1623, i64* %1629
  store i64 %1628, i64* %1626, align 8, !tbaa !2428
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1621, i64* %1630, align 8, !tbaa !2428
  %1631 = load i64, i64* %PC
  %1632 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1631, %struct.Memory* %MEMORY.0)
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 8
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 4
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i64*
  %1638 = load i64, i64* %1637
  store i64 %1638, i64* %RAX, align 8, !tbaa !2428
  %1639 = load i64, i64* %RAX
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 3
  store i64 %1641, i64* %PC
  store i64 %1639, i64* %RCX, align 8, !tbaa !2428
  %1642 = load i64, i64* %RCX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = add i64 4, %1642
  store i64 %1645, i64* %RCX, align 8, !tbaa !2428
  %1646 = icmp ult i64 %1645, %1642
  %1647 = icmp ult i64 %1645, 4
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1649, i8* %1650, align 1, !tbaa !2432
  %1651 = trunc i64 %1645 to i32
  %1652 = and i32 %1651, 255
  %1653 = call i32 @llvm.ctpop.i32(i32 %1652) #16
  %1654 = trunc i32 %1653 to i8
  %1655 = and i8 %1654, 1
  %1656 = xor i8 %1655, 1
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1656, i8* %1657, align 1, !tbaa !2446
  %1658 = xor i64 4, %1642
  %1659 = xor i64 %1658, %1645
  %1660 = lshr i64 %1659, 4
  %1661 = trunc i64 %1660 to i8
  %1662 = and i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1662, i8* %1663, align 1, !tbaa !2447
  %1664 = icmp eq i64 %1645, 0
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1665, i8* %1666, align 1, !tbaa !2448
  %1667 = lshr i64 %1645, 63
  %1668 = trunc i64 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = lshr i64 %1642, 63
  %1671 = xor i64 %1667, %1670
  %1672 = add nuw nsw i64 %1671, %1667
  %1673 = icmp eq i64 %1672, 2
  %1674 = zext i1 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1674, i8* %1675, align 1, !tbaa !2450
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 8
  %1678 = load i64, i64* %RCX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 4
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1677 to i64*
  store i64 %1678, i64* %1681
  %1682 = load i64, i64* %RAX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i32*
  %1686 = load i32, i32* %1685
  %1687 = sext i32 %1686 to i64
  store i64 %1687, i64* %RAX, align 8, !tbaa !2428
  %1688 = load i64, i64* %RAX
  %1689 = mul i64 %1688, 8
  %1690 = add i64 %1689, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 8
  store i64 %1692, i64* %PC
  %1693 = inttoptr i64 %1690 to i64*
  %1694 = load i64, i64* %1693
  store i64 %1694, i64* %RAX, align 8, !tbaa !2428
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 40
  %1697 = load i64, i64* %RAX
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 4
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1696 to i64*
  store i64 %1697, i64* %1700
  %1701 = load i64, i64* %PC
  %1702 = sub i64 %1701, 451
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 5
  store i64 %1704, i64* %PC
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1702, i64* %1705, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 12
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 7
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i32*
  store i32 14, i32* %1710
  br label %block_40081d

block_400910:                                     ; preds = %block_400586
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 12
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 7
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1712 to i32*
  store i32 19, i32* %1715
  %1716 = load i64, i64* %PC
  %1717 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1716, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1717

block_40058c:                                     ; preds = %block_400586
  %1718 = load i64, i64* %RBP
  %1719 = sub i64 %1718, 12
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 7
  store i64 %1721, i64* %PC
  %1722 = inttoptr i64 %1719 to i32*
  store i32 1, i32* %1722
  %1723 = load i64, i64* %PC
  %1724 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1723, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1724

block_400a0a:                                     ; preds = %block_400586
  %1725 = load i64, i64* %RBP
  %1726 = sub i64 %1725, 12
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 7
  store i64 %1728, i64* %PC
  %1729 = inttoptr i64 %1726 to i32*
  store i32 24, i32* %1729
  %1730 = load i64, i64* %PC
  %1731 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1730, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1731

block_400686:                                     ; preds = %block_400586
  %1732 = load i64, i64* %RBP
  %1733 = sub i64 %1732, 12
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 7
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i32*
  store i32 6, i32* %1736
  %1737 = load i64, i64* %PC
  %1738 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1737, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1738

block_400b04:                                     ; preds = %block_400586
  %1739 = load i64, i64* %RBP
  %1740 = sub i64 %1739, 12
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 7
  store i64 %1742, i64* %PC
  %1743 = inttoptr i64 %1740 to i32*
  store i32 29, i32* %1743
  %1744 = load i64, i64* %PC
  %1745 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1744, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1745

block_400780:                                     ; preds = %block_400586
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 12
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 7
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i32*
  store i32 11, i32* %1750
  %1751 = load i64, i64* %PC
  %1752 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1751, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1752

block_4009a6:                                     ; preds = %block_400586
  %1753 = load i64, i64* %RBP
  %1754 = sub i64 %1753, 12
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 7
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1754 to i32*
  store i32 22, i32* %1757
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 12
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 3
  store i64 %1761, i64* %PC
  %1762 = inttoptr i64 %1759 to i32*
  %1763 = load i32, i32* %1762
  %1764 = zext i32 %1763 to i64
  store i64 %1764, i64* %RDI, align 8, !tbaa !2428
  %1765 = load i64, i64* %PC
  %1766 = sub i64 %1765, 1184
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 5
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 5
  store i64 %1770, i64* %PC
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1772 = load i64, i64* %1771, align 8, !tbaa !2428
  %1773 = add i64 %1772, -8
  %1774 = inttoptr i64 %1773 to i64*
  store i64 %1768, i64* %1774
  store i64 %1773, i64* %1771, align 8, !tbaa !2428
  %1775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1766, i64* %1775, align 8, !tbaa !2428
  %1776 = load i64, i64* %PC
  %1777 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1776, %struct.Memory* %MEMORY.0)
  %1778 = load i64, i64* %RBP
  %1779 = sub i64 %1778, 8
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1779 to i64*
  %1783 = load i64, i64* %1782
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 3
  store i64 %1786, i64* %PC
  store i64 %1784, i64* %RCX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RCX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 4
  store i64 %1789, i64* %PC
  %1790 = add i64 4, %1787
  store i64 %1790, i64* %RCX, align 8, !tbaa !2428
  %1791 = icmp ult i64 %1790, %1787
  %1792 = icmp ult i64 %1790, 4
  %1793 = or i1 %1791, %1792
  %1794 = zext i1 %1793 to i8
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1794, i8* %1795, align 1, !tbaa !2432
  %1796 = trunc i64 %1790 to i32
  %1797 = and i32 %1796, 255
  %1798 = call i32 @llvm.ctpop.i32(i32 %1797) #16
  %1799 = trunc i32 %1798 to i8
  %1800 = and i8 %1799, 1
  %1801 = xor i8 %1800, 1
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1801, i8* %1802, align 1, !tbaa !2446
  %1803 = xor i64 4, %1787
  %1804 = xor i64 %1803, %1790
  %1805 = lshr i64 %1804, 4
  %1806 = trunc i64 %1805 to i8
  %1807 = and i8 %1806, 1
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1807, i8* %1808, align 1, !tbaa !2447
  %1809 = icmp eq i64 %1790, 0
  %1810 = zext i1 %1809 to i8
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1810, i8* %1811, align 1, !tbaa !2448
  %1812 = lshr i64 %1790, 63
  %1813 = trunc i64 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1813, i8* %1814, align 1, !tbaa !2449
  %1815 = lshr i64 %1787, 63
  %1816 = xor i64 %1812, %1815
  %1817 = add nuw nsw i64 %1816, %1812
  %1818 = icmp eq i64 %1817, 2
  %1819 = zext i1 %1818 to i8
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1819, i8* %1820, align 1, !tbaa !2450
  %1821 = load i64, i64* %RBP
  %1822 = sub i64 %1821, 8
  %1823 = load i64, i64* %RCX
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 4
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1822 to i64*
  store i64 %1823, i64* %1826
  %1827 = load i64, i64* %RAX
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 3
  store i64 %1829, i64* %PC
  %1830 = inttoptr i64 %1827 to i32*
  %1831 = load i32, i32* %1830
  %1832 = sext i32 %1831 to i64
  store i64 %1832, i64* %RAX, align 8, !tbaa !2428
  %1833 = load i64, i64* %RAX
  %1834 = mul i64 %1833, 8
  %1835 = add i64 %1834, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1836 = load i64, i64* %PC
  %1837 = add i64 %1836, 8
  store i64 %1837, i64* %PC
  %1838 = inttoptr i64 %1835 to i64*
  %1839 = load i64, i64* %1838
  store i64 %1839, i64* %RAX, align 8, !tbaa !2428
  %1840 = load i64, i64* %RBP
  %1841 = sub i64 %1840, 40
  %1842 = load i64, i64* %RAX
  %1843 = load i64, i64* %PC
  %1844 = add i64 %1843, 4
  store i64 %1844, i64* %PC
  %1845 = inttoptr i64 %1841 to i64*
  store i64 %1842, i64* %1845
  %1846 = load i64, i64* %PC
  %1847 = sub i64 %1846, 1101
  %1848 = load i64, i64* %PC
  %1849 = add i64 %1848, 5
  store i64 %1849, i64* %PC
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1847, i64* %1850, align 8, !tbaa !2428
  br label %block_400586

; <label>:1851:                                   ; preds = %block_400586
  %1852 = load i64, i64* %PC
  %1853 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1852, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1853
}

; Function Attrs: noinline
define %struct.Memory* @sub_40065b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40065b

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_40065b:                                     ; preds = %block_400654, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400654 ]
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 3
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = zext i32 %622 to i64
  store i64 %623, i64* %RDI, align 8, !tbaa !2428
  %624 = load i64, i64* %PC
  %625 = sub i64 %624, 334
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 5
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %631 = load i64, i64* %630, align 8, !tbaa !2428
  %632 = add i64 %631, -8
  %633 = inttoptr i64 %632 to i64*
  store i64 %627, i64* %633
  store i64 %632, i64* %630, align 8, !tbaa !2428
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %625, i64* %634, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %635, %struct.Memory* %MEMORY.0)
  %637 = load i64, i64* %RBP
  %638 = sub i64 %637, 8
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %638 to i64*
  %642 = load i64, i64* %641
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  store i64 %643, i64* %RCX, align 8, !tbaa !2428
  %646 = load i64, i64* %RCX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = add i64 4, %646
  store i64 %649, i64* %RCX, align 8, !tbaa !2428
  %650 = icmp ult i64 %649, %646
  %651 = icmp ult i64 %649, 4
  %652 = or i1 %650, %651
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %653, i8* %654, align 1, !tbaa !2432
  %655 = trunc i64 %649 to i32
  %656 = and i32 %655, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i64 4, %646
  %663 = xor i64 %662, %649
  %664 = lshr i64 %663, 4
  %665 = trunc i64 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i64 %649, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i64 %649, 63
  %672 = trunc i64 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i64 %646, 63
  %675 = xor i64 %671, %674
  %676 = add nuw nsw i64 %675, %671
  %677 = icmp eq i64 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 8
  %682 = load i64, i64* %RCX
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 4
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %681 to i64*
  store i64 %682, i64* %685
  %686 = load i64, i64* %RAX
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689
  %691 = sext i32 %690 to i64
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = load i64, i64* %RAX
  %693 = mul i64 %692, 8
  %694 = add i64 %693, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 8
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 40
  %701 = load i64, i64* %RAX
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %700 to i64*
  store i64 %701, i64* %704
  %705 = load i64, i64* %PC
  %706 = sub i64 %705, 251
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %706, i64* %709, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %710 = load i64, i64* %RBP
  %711 = sub i64 %710, 12
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 7
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %711 to i32*
  store i32 23, i32* %714
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  %720 = load i32, i32* %719
  %721 = zext i32 %720 to i64
  store i64 %721, i64* %RDI, align 8, !tbaa !2428
  %722 = load i64, i64* %PC
  %723 = sub i64 %722, 1234
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 5
  store i64 %727, i64* %PC
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %729 = load i64, i64* %728, align 8, !tbaa !2428
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 %725, i64* %731
  store i64 %730, i64* %728, align 8, !tbaa !2428
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %723, i64* %732, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %733, %struct.Memory* %MEMORY.1)
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 8
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = load i64, i64* %RAX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 3
  store i64 %743, i64* %PC
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %744 = load i64, i64* %RCX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 4
  store i64 %746, i64* %PC
  %747 = add i64 4, %744
  store i64 %747, i64* %RCX, align 8, !tbaa !2428
  %748 = icmp ult i64 %747, %744
  %749 = icmp ult i64 %747, 4
  %750 = or i1 %748, %749
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %751, i8* %752, align 1, !tbaa !2432
  %753 = trunc i64 %747 to i32
  %754 = and i32 %753, 255
  %755 = call i32 @llvm.ctpop.i32(i32 %754) #16
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %758, i8* %759, align 1, !tbaa !2446
  %760 = xor i64 4, %744
  %761 = xor i64 %760, %747
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %764, i8* %765, align 1, !tbaa !2447
  %766 = icmp eq i64 %747, 0
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %767, i8* %768, align 1, !tbaa !2448
  %769 = lshr i64 %747, 63
  %770 = trunc i64 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %770, i8* %771, align 1, !tbaa !2449
  %772 = lshr i64 %744, 63
  %773 = xor i64 %769, %772
  %774 = add nuw nsw i64 %773, %769
  %775 = icmp eq i64 %774, 2
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %776, i8* %777, align 1, !tbaa !2450
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 8
  %780 = load i64, i64* %RCX
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 4
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %779 to i64*
  store i64 %780, i64* %783
  %784 = load i64, i64* %RAX
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 3
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787
  %789 = sext i32 %788 to i64
  store i64 %789, i64* %RAX, align 8, !tbaa !2428
  %790 = load i64, i64* %RAX
  %791 = mul i64 %790, 8
  %792 = add i64 %791, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 8
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to i64*
  %796 = load i64, i64* %795
  store i64 %796, i64* %RAX, align 8, !tbaa !2428
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 40
  %799 = load i64, i64* %RAX
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %798 to i64*
  store i64 %799, i64* %802
  %803 = load i64, i64* %PC
  %804 = sub i64 %803, 1151
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 5
  store i64 %806, i64* %PC
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %804, i64* %807, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 12
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 7
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i32*
  store i32 5, i32* %812
  br label %block_40065b

block_400ad2:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 28, i32* %817
  %818 = load i64, i64* %PC
  %819 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %818, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %819

block_40074e:                                     ; preds = %block_400586
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 12
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 7
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  store i32 10, i32* %824
  %825 = load i64, i64* %PC
  %826 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %825, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %826

block_400848:                                     ; preds = %block_400586
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 12
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 7
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  store i32 15, i32* %831
  %832 = load i64, i64* %PC
  %833 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %832, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %833

block_400942:                                     ; preds = %block_400586
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 12
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 7
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i32*
  store i32 20, i32* %838
  %839 = load i64, i64* %PC
  %840 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %839, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %840

block_4005be:                                     ; preds = %block_400586
  %841 = load i64, i64* %RBP
  %842 = sub i64 %841, 12
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 7
  store i64 %844, i64* %PC
  %845 = inttoptr i64 %842 to i32*
  store i32 2, i32* %845
  %846 = load i64, i64* %PC
  %847 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %846, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %847

block_4005f0:                                     ; preds = %block_400586
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 12
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i32*
  store i32 3, i32* %852
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 12
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 3
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i32*
  %858 = load i32, i32* %857
  %859 = zext i32 %858 to i64
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %860 = load i64, i64* %PC
  %861 = sub i64 %860, 234
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %867 = load i64, i64* %866, align 8, !tbaa !2428
  %868 = add i64 %867, -8
  %869 = inttoptr i64 %868 to i64*
  store i64 %863, i64* %869
  store i64 %868, i64* %866, align 8, !tbaa !2428
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %861, i64* %870, align 8, !tbaa !2428
  %871 = load i64, i64* %PC
  %872 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %871, %struct.Memory* %MEMORY.1)
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 8
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 4
  store i64 %876, i64* %PC
  %877 = inttoptr i64 %874 to i64*
  %878 = load i64, i64* %877
  store i64 %878, i64* %RAX, align 8, !tbaa !2428
  %879 = load i64, i64* %RAX
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  store i64 %879, i64* %RCX, align 8, !tbaa !2428
  %882 = load i64, i64* %RCX
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 4
  store i64 %884, i64* %PC
  %885 = add i64 4, %882
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = icmp ult i64 %885, %882
  %887 = icmp ult i64 %885, 4
  %888 = or i1 %886, %887
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %889, i8* %890, align 1, !tbaa !2432
  %891 = trunc i64 %885 to i32
  %892 = and i32 %891, 255
  %893 = call i32 @llvm.ctpop.i32(i32 %892) #16
  %894 = trunc i32 %893 to i8
  %895 = and i8 %894, 1
  %896 = xor i8 %895, 1
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %896, i8* %897, align 1, !tbaa !2446
  %898 = xor i64 4, %882
  %899 = xor i64 %898, %885
  %900 = lshr i64 %899, 4
  %901 = trunc i64 %900 to i8
  %902 = and i8 %901, 1
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %902, i8* %903, align 1, !tbaa !2447
  %904 = icmp eq i64 %885, 0
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %905, i8* %906, align 1, !tbaa !2448
  %907 = lshr i64 %885, 63
  %908 = trunc i64 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %908, i8* %909, align 1, !tbaa !2449
  %910 = lshr i64 %882, 63
  %911 = xor i64 %907, %910
  %912 = add nuw nsw i64 %911, %907
  %913 = icmp eq i64 %912, 2
  %914 = zext i1 %913 to i8
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %914, i8* %915, align 1, !tbaa !2450
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 8
  %918 = load i64, i64* %RCX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %917 to i64*
  store i64 %918, i64* %921
  %922 = load i64, i64* %RAX
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %922 to i32*
  %926 = load i32, i32* %925
  %927 = sext i32 %926 to i64
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = load i64, i64* %RAX
  %929 = mul i64 %928, 8
  %930 = add i64 %929, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 8
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to i64*
  %934 = load i64, i64* %933
  store i64 %934, i64* %RAX, align 8, !tbaa !2428
  %935 = load i64, i64* %RBP
  %936 = sub i64 %935, 40
  %937 = load i64, i64* %RAX
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %936 to i64*
  store i64 %937, i64* %940
  %941 = load i64, i64* %PC
  %942 = sub i64 %941, 151
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 5
  store i64 %944, i64* %PC
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %942, i64* %945, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %946 = load i64, i64* %RBP
  %947 = sub i64 %946, 12
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 7
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i32*
  store i32 25, i32* %950
  %951 = load i64, i64* %PC
  %952 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %951, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %952

block_4006b8:                                     ; preds = %block_400586
  %953 = load i64, i64* %RBP
  %954 = sub i64 %953, 12
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 7
  store i64 %956, i64* %PC
  %957 = inttoptr i64 %954 to i32*
  store i32 7, i32* %957
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 12
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 3
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i32*
  %963 = load i32, i32* %962
  %964 = zext i32 %963 to i64
  store i64 %964, i64* %RDI, align 8, !tbaa !2428
  %965 = load i64, i64* %PC
  %966 = sub i64 %965, 434
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 5
  store i64 %970, i64* %PC
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %972 = load i64, i64* %971, align 8, !tbaa !2428
  %973 = add i64 %972, -8
  %974 = inttoptr i64 %973 to i64*
  store i64 %968, i64* %974
  store i64 %973, i64* %971, align 8, !tbaa !2428
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %966, i64* %975, align 8, !tbaa !2428
  %976 = load i64, i64* %PC
  %977 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %976, %struct.Memory* %MEMORY.1)
  %978 = load i64, i64* %RBP
  %979 = sub i64 %978, 8
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 4
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %979 to i64*
  %983 = load i64, i64* %982
  store i64 %983, i64* %RAX, align 8, !tbaa !2428
  %984 = load i64, i64* %RAX
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  store i64 %984, i64* %RCX, align 8, !tbaa !2428
  %987 = load i64, i64* %RCX
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 4
  store i64 %989, i64* %PC
  %990 = add i64 4, %987
  store i64 %990, i64* %RCX, align 8, !tbaa !2428
  %991 = icmp ult i64 %990, %987
  %992 = icmp ult i64 %990, 4
  %993 = or i1 %991, %992
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %994, i8* %995, align 1, !tbaa !2432
  %996 = trunc i64 %990 to i32
  %997 = and i32 %996, 255
  %998 = call i32 @llvm.ctpop.i32(i32 %997) #16
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = xor i8 %1000, 1
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1001, i8* %1002, align 1, !tbaa !2446
  %1003 = xor i64 4, %987
  %1004 = xor i64 %1003, %990
  %1005 = lshr i64 %1004, 4
  %1006 = trunc i64 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1007, i8* %1008, align 1, !tbaa !2447
  %1009 = icmp eq i64 %990, 0
  %1010 = zext i1 %1009 to i8
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1010, i8* %1011, align 1, !tbaa !2448
  %1012 = lshr i64 %990, 63
  %1013 = trunc i64 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1013, i8* %1014, align 1, !tbaa !2449
  %1015 = lshr i64 %987, 63
  %1016 = xor i64 %1012, %1015
  %1017 = add nuw nsw i64 %1016, %1012
  %1018 = icmp eq i64 %1017, 2
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1019, i8* %1020, align 1, !tbaa !2450
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 8
  %1023 = load i64, i64* %RCX
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1022 to i64*
  store i64 %1023, i64* %1026
  %1027 = load i64, i64* %RAX
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 3
  store i64 %1029, i64* %PC
  %1030 = inttoptr i64 %1027 to i32*
  %1031 = load i32, i32* %1030
  %1032 = sext i32 %1031 to i64
  store i64 %1032, i64* %RAX, align 8, !tbaa !2428
  %1033 = load i64, i64* %RAX
  %1034 = mul i64 %1033, 8
  %1035 = add i64 %1034, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 8
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RBP
  %1041 = sub i64 %1040, 40
  %1042 = load i64, i64* %RAX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1041 to i64*
  store i64 %1042, i64* %1045
  %1046 = load i64, i64* %PC
  %1047 = sub i64 %1046, 351
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 5
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1047, i64* %1050, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1051 = load i64, i64* %RBP
  %1052 = sub i64 %1051, 12
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 7
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1052 to i32*
  store i32 30, i32* %1055
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 12
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 3
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i32*
  %1061 = load i32, i32* %1060
  %1062 = zext i32 %1061 to i64
  store i64 %1062, i64* %RDI, align 8, !tbaa !2428
  %1063 = load i64, i64* %PC
  %1064 = sub i64 %1063, 1584
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 5
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 5
  store i64 %1068, i64* %PC
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1070 = load i64, i64* %1069, align 8, !tbaa !2428
  %1071 = add i64 %1070, -8
  %1072 = inttoptr i64 %1071 to i64*
  store i64 %1066, i64* %1072
  store i64 %1071, i64* %1069, align 8, !tbaa !2428
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1064, i64* %1073, align 8, !tbaa !2428
  %1074 = load i64, i64* %PC
  %1075 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1074, %struct.Memory* %MEMORY.1)
  %1076 = load i64, i64* %RBP
  %1077 = sub i64 %1076, 8
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1077 to i64*
  %1081 = load i64, i64* %1080
  store i64 %1081, i64* %RAX, align 8, !tbaa !2428
  %1082 = load i64, i64* %RAX
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 3
  store i64 %1084, i64* %PC
  store i64 %1082, i64* %RCX, align 8, !tbaa !2428
  %1085 = load i64, i64* %RCX
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 4
  store i64 %1087, i64* %PC
  %1088 = add i64 4, %1085
  store i64 %1088, i64* %RCX, align 8, !tbaa !2428
  %1089 = icmp ult i64 %1088, %1085
  %1090 = icmp ult i64 %1088, 4
  %1091 = or i1 %1089, %1090
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1092, i8* %1093, align 1, !tbaa !2432
  %1094 = trunc i64 %1088 to i32
  %1095 = and i32 %1094, 255
  %1096 = call i32 @llvm.ctpop.i32(i32 %1095) #16
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1099, i8* %1100, align 1, !tbaa !2446
  %1101 = xor i64 4, %1085
  %1102 = xor i64 %1101, %1088
  %1103 = lshr i64 %1102, 4
  %1104 = trunc i64 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1105, i8* %1106, align 1, !tbaa !2447
  %1107 = icmp eq i64 %1088, 0
  %1108 = zext i1 %1107 to i8
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1108, i8* %1109, align 1, !tbaa !2448
  %1110 = lshr i64 %1088, 63
  %1111 = trunc i64 %1110 to i8
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1111, i8* %1112, align 1, !tbaa !2449
  %1113 = lshr i64 %1085, 63
  %1114 = xor i64 %1110, %1113
  %1115 = add nuw nsw i64 %1114, %1110
  %1116 = icmp eq i64 %1115, 2
  %1117 = zext i1 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1117, i8* %1118, align 1, !tbaa !2450
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 8
  %1121 = load i64, i64* %RCX
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 4
  store i64 %1123, i64* %PC
  %1124 = inttoptr i64 %1120 to i64*
  store i64 %1121, i64* %1124
  %1125 = load i64, i64* %RAX
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 3
  store i64 %1127, i64* %PC
  %1128 = inttoptr i64 %1125 to i32*
  %1129 = load i32, i32* %1128
  %1130 = sext i32 %1129 to i64
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RAX
  %1132 = mul i64 %1131, 8
  %1133 = add i64 %1132, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 8
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RBP
  %1139 = sub i64 %1138, 40
  %1140 = load i64, i64* %RAX
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1139 to i64*
  store i64 %1140, i64* %1143
  %1144 = load i64, i64* %PC
  %1145 = sub i64 %1144, 1501
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 5
  store i64 %1147, i64* %PC
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1145, i64* %1148, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1149 = load i64, i64* %RBP
  %1150 = sub i64 %1149, 12
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 7
  store i64 %1152, i64* %PC
  %1153 = inttoptr i64 %1150 to i32*
  store i32 0, i32* %1153
  %1154 = load i64, i64* %RSP
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 4
  store i64 %1156, i64* %PC
  %1157 = add i64 48, %1154
  store i64 %1157, i64* %RSP, align 8, !tbaa !2428
  %1158 = icmp ult i64 %1157, %1154
  %1159 = icmp ult i64 %1157, 48
  %1160 = or i1 %1158, %1159
  %1161 = zext i1 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1161, i8* %1162, align 1, !tbaa !2432
  %1163 = trunc i64 %1157 to i32
  %1164 = and i32 %1163, 255
  %1165 = call i32 @llvm.ctpop.i32(i32 %1164) #16
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1168, i8* %1169, align 1, !tbaa !2446
  %1170 = xor i64 48, %1154
  %1171 = xor i64 %1170, %1157
  %1172 = lshr i64 %1171, 4
  %1173 = trunc i64 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1174, i8* %1175, align 1, !tbaa !2447
  %1176 = icmp eq i64 %1157, 0
  %1177 = zext i1 %1176 to i8
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1177, i8* %1178, align 1, !tbaa !2448
  %1179 = lshr i64 %1157, 63
  %1180 = trunc i64 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1180, i8* %1181, align 1, !tbaa !2449
  %1182 = lshr i64 %1154, 63
  %1183 = xor i64 %1179, %1182
  %1184 = add nuw nsw i64 %1183, %1179
  %1185 = icmp eq i64 %1184, 2
  %1186 = zext i1 %1185 to i8
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1186, i8* %1187, align 1, !tbaa !2450
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 1
  store i64 %1189, i64* %PC
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1191 = load i64, i64* %1190, align 8, !tbaa !2428
  %1192 = add i64 %1191, 8
  %1193 = inttoptr i64 %1191 to i64*
  %1194 = load i64, i64* %1193
  store i64 %1194, i64* %RBP, align 8, !tbaa !2428
  store i64 %1192, i64* %1190, align 8, !tbaa !2428
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 1
  store i64 %1196, i64* %PC
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1199 = load i64, i64* %1198, align 8, !tbaa !2428
  %1200 = inttoptr i64 %1199 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %1197, align 8, !tbaa !2428
  %1202 = add i64 %1199, 8
  store i64 %1202, i64* %1198, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4007b2:                                     ; preds = %block_400586
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 12
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 7
  store i64 %1206, i64* %PC
  %1207 = inttoptr i64 %1204 to i32*
  store i32 12, i32* %1207
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 12
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RDI, align 8, !tbaa !2428
  %1215 = load i64, i64* %PC
  %1216 = sub i64 %1215, 684
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 5
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1222 = load i64, i64* %1221, align 8, !tbaa !2428
  %1223 = add i64 %1222, -8
  %1224 = inttoptr i64 %1223 to i64*
  store i64 %1218, i64* %1224
  store i64 %1223, i64* %1221, align 8, !tbaa !2428
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1225, align 8, !tbaa !2428
  %1226 = load i64, i64* %PC
  %1227 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1226, %struct.Memory* %MEMORY.1)
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 8
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i64*
  %1233 = load i64, i64* %1232
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RAX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 3
  store i64 %1236, i64* %PC
  store i64 %1234, i64* %RCX, align 8, !tbaa !2428
  %1237 = load i64, i64* %RCX
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 4
  store i64 %1239, i64* %PC
  %1240 = add i64 4, %1237
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = icmp ult i64 %1240, %1237
  %1242 = icmp ult i64 %1240, 4
  %1243 = or i1 %1241, %1242
  %1244 = zext i1 %1243 to i8
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1244, i8* %1245, align 1, !tbaa !2432
  %1246 = trunc i64 %1240 to i32
  %1247 = and i32 %1246, 255
  %1248 = call i32 @llvm.ctpop.i32(i32 %1247) #16
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1251, i8* %1252, align 1, !tbaa !2446
  %1253 = xor i64 4, %1237
  %1254 = xor i64 %1253, %1240
  %1255 = lshr i64 %1254, 4
  %1256 = trunc i64 %1255 to i8
  %1257 = and i8 %1256, 1
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1257, i8* %1258, align 1, !tbaa !2447
  %1259 = icmp eq i64 %1240, 0
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1260, i8* %1261, align 1, !tbaa !2448
  %1262 = lshr i64 %1240, 63
  %1263 = trunc i64 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1263, i8* %1264, align 1, !tbaa !2449
  %1265 = lshr i64 %1237, 63
  %1266 = xor i64 %1262, %1265
  %1267 = add nuw nsw i64 %1266, %1262
  %1268 = icmp eq i64 %1267, 2
  %1269 = zext i1 %1268 to i8
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1269, i8* %1270, align 1, !tbaa !2450
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 8
  %1273 = load i64, i64* %RCX
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1272 to i64*
  store i64 %1273, i64* %1276
  %1277 = load i64, i64* %RAX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i32*
  %1281 = load i32, i32* %1280
  %1282 = sext i32 %1281 to i64
  store i64 %1282, i64* %RAX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RAX
  %1284 = mul i64 %1283, 8
  %1285 = add i64 %1284, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 8
  store i64 %1287, i64* %PC
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 40
  %1292 = load i64, i64* %RAX
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1291 to i64*
  store i64 %1292, i64* %1295
  %1296 = load i64, i64* %PC
  %1297 = sub i64 %1296, 601
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1297, i64* %1300, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 12
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 7
  store i64 %1304, i64* %PC
  %1305 = inttoptr i64 %1302 to i32*
  store i32 17, i32* %1305
  %1306 = load i64, i64* %RBP
  %1307 = sub i64 %1306, 12
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 3
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310
  %1312 = zext i32 %1311 to i64
  store i64 %1312, i64* %RDI, align 8, !tbaa !2428
  %1313 = load i64, i64* %PC
  %1314 = sub i64 %1313, 934
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 5
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 5
  store i64 %1318, i64* %PC
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1320 = load i64, i64* %1319, align 8, !tbaa !2428
  %1321 = add i64 %1320, -8
  %1322 = inttoptr i64 %1321 to i64*
  store i64 %1316, i64* %1322
  store i64 %1321, i64* %1319, align 8, !tbaa !2428
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1314, i64* %1323, align 8, !tbaa !2428
  %1324 = load i64, i64* %PC
  %1325 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1324, %struct.Memory* %MEMORY.1)
  %1326 = load i64, i64* %RBP
  %1327 = sub i64 %1326, 8
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 4
  store i64 %1329, i64* %PC
  %1330 = inttoptr i64 %1327 to i64*
  %1331 = load i64, i64* %1330
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = load i64, i64* %RAX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 3
  store i64 %1334, i64* %PC
  store i64 %1332, i64* %RCX, align 8, !tbaa !2428
  %1335 = load i64, i64* %RCX
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 4
  store i64 %1337, i64* %PC
  %1338 = add i64 4, %1335
  store i64 %1338, i64* %RCX, align 8, !tbaa !2428
  %1339 = icmp ult i64 %1338, %1335
  %1340 = icmp ult i64 %1338, 4
  %1341 = or i1 %1339, %1340
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1342, i8* %1343, align 1, !tbaa !2432
  %1344 = trunc i64 %1338 to i32
  %1345 = and i32 %1344, 255
  %1346 = call i32 @llvm.ctpop.i32(i32 %1345) #16
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1349, i8* %1350, align 1, !tbaa !2446
  %1351 = xor i64 4, %1335
  %1352 = xor i64 %1351, %1338
  %1353 = lshr i64 %1352, 4
  %1354 = trunc i64 %1353 to i8
  %1355 = and i8 %1354, 1
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1355, i8* %1356, align 1, !tbaa !2447
  %1357 = icmp eq i64 %1338, 0
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1358, i8* %1359, align 1, !tbaa !2448
  %1360 = lshr i64 %1338, 63
  %1361 = trunc i64 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1361, i8* %1362, align 1, !tbaa !2449
  %1363 = lshr i64 %1335, 63
  %1364 = xor i64 %1360, %1363
  %1365 = add nuw nsw i64 %1364, %1360
  %1366 = icmp eq i64 %1365, 2
  %1367 = zext i1 %1366 to i8
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1367, i8* %1368, align 1, !tbaa !2450
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 8
  %1371 = load i64, i64* %RCX
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 4
  store i64 %1373, i64* %PC
  %1374 = inttoptr i64 %1370 to i64*
  store i64 %1371, i64* %1374
  %1375 = load i64, i64* %RAX
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 3
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1375 to i32*
  %1379 = load i32, i32* %1378
  %1380 = sext i32 %1379 to i64
  store i64 %1380, i64* %RAX, align 8, !tbaa !2428
  %1381 = load i64, i64* %RAX
  %1382 = mul i64 %1381, 8
  %1383 = add i64 %1382, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 8
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1383 to i64*
  %1387 = load i64, i64* %1386
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1388 = load i64, i64* %RBP
  %1389 = sub i64 %1388, 40
  %1390 = load i64, i64* %RAX
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1389 to i64*
  store i64 %1390, i64* %1393
  %1394 = load i64, i64* %PC
  %1395 = sub i64 %1394, 851
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  store i64 %1397, i64* %PC
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1395, i64* %1398, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_4009d8, %block_40065b, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %636, %block_40065b ], [ %1434, %block_400622 ], [ %1325, %block_4008ac ], [ %1227, %block_4007b2 ], [ %1075, %block_400b36 ], [ %977, %block_4006b8 ], [ %151, %block_400a6e ], [ %872, %block_4005f0 ], [ %53, %block_400974 ], [ %734, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %1532, %block_400aa0 ], [ %1630, %block_40071c ], [ %1728, %block_400816 ], [ %1868, %block_4009a6 ]
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 40
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 4
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i64*
  %1404 = load i64, i64* %1403
  store i64 %1404, i64* %RAX, align 8, !tbaa !2428
  %1405 = load i64, i64* %RAX
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 2
  store i64 %1407, i64* %PC
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1405, i64* %1408, align 8, !tbaa !2428
  %1409 = load i64, i64* %PC
  switch i64 %1409, label %1942 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 12
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 7
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i32*
  store i32 4, i32* %1414
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RDI, align 8, !tbaa !2428
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 284
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1433, %struct.Memory* %MEMORY.1)
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 8
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 4
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 3
  store i64 %1443, i64* %PC
  store i64 %1441, i64* %RCX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RCX
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = add i64 4, %1444
  store i64 %1447, i64* %RCX, align 8, !tbaa !2428
  %1448 = icmp ult i64 %1447, %1444
  %1449 = icmp ult i64 %1447, 4
  %1450 = or i1 %1448, %1449
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1451, i8* %1452, align 1, !tbaa !2432
  %1453 = trunc i64 %1447 to i32
  %1454 = and i32 %1453, 255
  %1455 = call i32 @llvm.ctpop.i32(i32 %1454) #16
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1458, i8* %1459, align 1, !tbaa !2446
  %1460 = xor i64 4, %1444
  %1461 = xor i64 %1460, %1447
  %1462 = lshr i64 %1461, 4
  %1463 = trunc i64 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1464, i8* %1465, align 1, !tbaa !2447
  %1466 = icmp eq i64 %1447, 0
  %1467 = zext i1 %1466 to i8
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1467, i8* %1468, align 1, !tbaa !2448
  %1469 = lshr i64 %1447, 63
  %1470 = trunc i64 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1470, i8* %1471, align 1, !tbaa !2449
  %1472 = lshr i64 %1444, 63
  %1473 = xor i64 %1469, %1472
  %1474 = add nuw nsw i64 %1473, %1469
  %1475 = icmp eq i64 %1474, 2
  %1476 = zext i1 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1476, i8* %1477, align 1, !tbaa !2450
  %1478 = load i64, i64* %RBP
  %1479 = sub i64 %1478, 8
  %1480 = load i64, i64* %RCX
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1479 to i64*
  store i64 %1480, i64* %1483
  %1484 = load i64, i64* %RAX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RAX
  %1491 = mul i64 %1490, 8
  %1492 = add i64 %1491, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 8
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i64, i64* %RAX
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1498 to i64*
  store i64 %1499, i64* %1502
  %1503 = load i64, i64* %PC
  %1504 = sub i64 %1503, 201
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 5
  store i64 %1506, i64* %PC
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1504, i64* %1507, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 12
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 7
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  store i32 27, i32* %1512
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  %1518 = load i32, i32* %1517
  %1519 = zext i32 %1518 to i64
  store i64 %1519, i64* %RDI, align 8, !tbaa !2428
  %1520 = load i64, i64* %PC
  %1521 = sub i64 %1520, 1434
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  store i64 %1525, i64* %PC
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1527 = load i64, i64* %1526, align 8, !tbaa !2428
  %1528 = add i64 %1527, -8
  %1529 = inttoptr i64 %1528 to i64*
  store i64 %1523, i64* %1529
  store i64 %1528, i64* %1526, align 8, !tbaa !2428
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1521, i64* %1530, align 8, !tbaa !2428
  %1531 = load i64, i64* %PC
  %1532 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1531, %struct.Memory* %MEMORY.1)
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 8
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 4
  store i64 %1536, i64* %PC
  %1537 = inttoptr i64 %1534 to i64*
  %1538 = load i64, i64* %1537
  store i64 %1538, i64* %RAX, align 8, !tbaa !2428
  %1539 = load i64, i64* %RAX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 3
  store i64 %1541, i64* %PC
  store i64 %1539, i64* %RCX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RCX
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 4
  store i64 %1544, i64* %PC
  %1545 = add i64 4, %1542
  store i64 %1545, i64* %RCX, align 8, !tbaa !2428
  %1546 = icmp ult i64 %1545, %1542
  %1547 = icmp ult i64 %1545, 4
  %1548 = or i1 %1546, %1547
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1549, i8* %1550, align 1, !tbaa !2432
  %1551 = trunc i64 %1545 to i32
  %1552 = and i32 %1551, 255
  %1553 = call i32 @llvm.ctpop.i32(i32 %1552) #16
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1556, i8* %1557, align 1, !tbaa !2446
  %1558 = xor i64 4, %1542
  %1559 = xor i64 %1558, %1545
  %1560 = lshr i64 %1559, 4
  %1561 = trunc i64 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1562, i8* %1563, align 1, !tbaa !2447
  %1564 = icmp eq i64 %1545, 0
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1565, i8* %1566, align 1, !tbaa !2448
  %1567 = lshr i64 %1545, 63
  %1568 = trunc i64 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1568, i8* %1569, align 1, !tbaa !2449
  %1570 = lshr i64 %1542, 63
  %1571 = xor i64 %1567, %1570
  %1572 = add nuw nsw i64 %1571, %1567
  %1573 = icmp eq i64 %1572, 2
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1574, i8* %1575, align 1, !tbaa !2450
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 8
  %1578 = load i64, i64* %RCX
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 4
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1577 to i64*
  store i64 %1578, i64* %1581
  %1582 = load i64, i64* %RAX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = mul i64 %1588, 8
  %1590 = add i64 %1589, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 8
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1590 to i64*
  %1594 = load i64, i64* %1593
  store i64 %1594, i64* %RAX, align 8, !tbaa !2428
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %RAX
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 4
  store i64 %1599, i64* %PC
  %1600 = inttoptr i64 %1596 to i64*
  store i64 %1597, i64* %1600
  %1601 = load i64, i64* %PC
  %1602 = sub i64 %1601, 1351
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1602, i64* %1605, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 12
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 7
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i32*
  store i32 9, i32* %1610
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 12
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 3
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  %1616 = load i32, i32* %1615
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RDI, align 8, !tbaa !2428
  %1618 = load i64, i64* %PC
  %1619 = sub i64 %1618, 534
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  store i64 %1623, i64* %PC
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1625 = load i64, i64* %1624, align 8, !tbaa !2428
  %1626 = add i64 %1625, -8
  %1627 = inttoptr i64 %1626 to i64*
  store i64 %1621, i64* %1627
  store i64 %1626, i64* %1624, align 8, !tbaa !2428
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1619, i64* %1628, align 8, !tbaa !2428
  %1629 = load i64, i64* %PC
  %1630 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1629, %struct.Memory* %MEMORY.1)
  %1631 = load i64, i64* %RBP
  %1632 = sub i64 %1631, 8
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 4
  store i64 %1634, i64* %PC
  %1635 = inttoptr i64 %1632 to i64*
  %1636 = load i64, i64* %1635
  store i64 %1636, i64* %RAX, align 8, !tbaa !2428
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 3
  store i64 %1639, i64* %PC
  store i64 %1637, i64* %RCX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RCX
  %1641 = load i64, i64* %PC
  %1642 = add i64 %1641, 4
  store i64 %1642, i64* %PC
  %1643 = add i64 4, %1640
  store i64 %1643, i64* %RCX, align 8, !tbaa !2428
  %1644 = icmp ult i64 %1643, %1640
  %1645 = icmp ult i64 %1643, 4
  %1646 = or i1 %1644, %1645
  %1647 = zext i1 %1646 to i8
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1647, i8* %1648, align 1, !tbaa !2432
  %1649 = trunc i64 %1643 to i32
  %1650 = and i32 %1649, 255
  %1651 = call i32 @llvm.ctpop.i32(i32 %1650) #16
  %1652 = trunc i32 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = xor i8 %1653, 1
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1654, i8* %1655, align 1, !tbaa !2446
  %1656 = xor i64 4, %1640
  %1657 = xor i64 %1656, %1643
  %1658 = lshr i64 %1657, 4
  %1659 = trunc i64 %1658 to i8
  %1660 = and i8 %1659, 1
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1660, i8* %1661, align 1, !tbaa !2447
  %1662 = icmp eq i64 %1643, 0
  %1663 = zext i1 %1662 to i8
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1663, i8* %1664, align 1, !tbaa !2448
  %1665 = lshr i64 %1643, 63
  %1666 = trunc i64 %1665 to i8
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1666, i8* %1667, align 1, !tbaa !2449
  %1668 = lshr i64 %1640, 63
  %1669 = xor i64 %1665, %1668
  %1670 = add nuw nsw i64 %1669, %1665
  %1671 = icmp eq i64 %1670, 2
  %1672 = zext i1 %1671 to i8
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1672, i8* %1673, align 1, !tbaa !2450
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 8
  %1676 = load i64, i64* %RCX
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 4
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1675 to i64*
  store i64 %1676, i64* %1679
  %1680 = load i64, i64* %RAX
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 3
  store i64 %1682, i64* %PC
  %1683 = inttoptr i64 %1680 to i32*
  %1684 = load i32, i32* %1683
  %1685 = sext i32 %1684 to i64
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RAX
  %1687 = mul i64 %1686, 8
  %1688 = add i64 %1687, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 8
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1688 to i64*
  %1692 = load i64, i64* %1691
  store i64 %1692, i64* %RAX, align 8, !tbaa !2428
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 40
  %1695 = load i64, i64* %RAX
  %1696 = load i64, i64* %PC
  %1697 = add i64 %1696, 4
  store i64 %1697, i64* %PC
  %1698 = inttoptr i64 %1694 to i64*
  store i64 %1695, i64* %1698
  %1699 = load i64, i64* %PC
  %1700 = sub i64 %1699, 451
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 5
  store i64 %1702, i64* %PC
  %1703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1700, i64* %1703, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1704 = load i64, i64* %RBP
  %1705 = sub i64 %1704, 12
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 7
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i32*
  store i32 14, i32* %1708
  %1709 = load i64, i64* %RBP
  %1710 = sub i64 %1709, 12
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 3
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to i32*
  %1714 = load i32, i32* %1713
  %1715 = zext i32 %1714 to i64
  store i64 %1715, i64* %RDI, align 8, !tbaa !2428
  %1716 = load i64, i64* %PC
  %1717 = sub i64 %1716, 784
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1723 = load i64, i64* %1722, align 8, !tbaa !2428
  %1724 = add i64 %1723, -8
  %1725 = inttoptr i64 %1724 to i64*
  store i64 %1719, i64* %1725
  store i64 %1724, i64* %1722, align 8, !tbaa !2428
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1717, i64* %1726, align 8, !tbaa !2428
  %1727 = load i64, i64* %PC
  %1728 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1727, %struct.Memory* %MEMORY.1)
  %1729 = load i64, i64* %RBP
  %1730 = sub i64 %1729, 8
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RAX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RAX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 3
  store i64 %1737, i64* %PC
  store i64 %1735, i64* %RCX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RCX
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %PC
  %1741 = add i64 4, %1738
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = icmp ult i64 %1741, %1738
  %1743 = icmp ult i64 %1741, 4
  %1744 = or i1 %1742, %1743
  %1745 = zext i1 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1745, i8* %1746, align 1, !tbaa !2432
  %1747 = trunc i64 %1741 to i32
  %1748 = and i32 %1747, 255
  %1749 = call i32 @llvm.ctpop.i32(i32 %1748) #16
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = xor i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1752, i8* %1753, align 1, !tbaa !2446
  %1754 = xor i64 4, %1738
  %1755 = xor i64 %1754, %1741
  %1756 = lshr i64 %1755, 4
  %1757 = trunc i64 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1758, i8* %1759, align 1, !tbaa !2447
  %1760 = icmp eq i64 %1741, 0
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1761, i8* %1762, align 1, !tbaa !2448
  %1763 = lshr i64 %1741, 63
  %1764 = trunc i64 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1764, i8* %1765, align 1, !tbaa !2449
  %1766 = lshr i64 %1738, 63
  %1767 = xor i64 %1763, %1766
  %1768 = add nuw nsw i64 %1767, %1763
  %1769 = icmp eq i64 %1768, 2
  %1770 = zext i1 %1769 to i8
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1770, i8* %1771, align 1, !tbaa !2450
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 8
  %1774 = load i64, i64* %RCX
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 4
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1773 to i64*
  store i64 %1774, i64* %1777
  %1778 = load i64, i64* %RAX
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = sext i32 %1782 to i64
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = mul i64 %1784, 8
  %1786 = add i64 %1785, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 8
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RAX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RBP
  %1792 = sub i64 %1791, 40
  %1793 = load i64, i64* %RAX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 4
  store i64 %1795, i64* %PC
  %1796 = inttoptr i64 %1792 to i64*
  store i64 %1793, i64* %1796
  %1797 = load i64, i64* %PC
  %1798 = sub i64 %1797, 701
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 5
  store i64 %1800, i64* %PC
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1798, i64* %1801, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %1802 = load i64, i64* %RBP
  %1803 = sub i64 %1802, 12
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 7
  store i64 %1805, i64* %PC
  %1806 = inttoptr i64 %1803 to i32*
  store i32 19, i32* %1806
  %1807 = load i64, i64* %PC
  %1808 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1807, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1808

block_40058c:                                     ; preds = %block_400586
  %1809 = load i64, i64* %RBP
  %1810 = sub i64 %1809, 12
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 7
  store i64 %1812, i64* %PC
  %1813 = inttoptr i64 %1810 to i32*
  store i32 1, i32* %1813
  %1814 = load i64, i64* %PC
  %1815 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1814, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1815

block_400a0a:                                     ; preds = %block_400586
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 12
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 7
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to i32*
  store i32 24, i32* %1820
  %1821 = load i64, i64* %PC
  %1822 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1821, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1822

block_400686:                                     ; preds = %block_400586
  %1823 = load i64, i64* %RBP
  %1824 = sub i64 %1823, 12
  %1825 = load i64, i64* %PC
  %1826 = add i64 %1825, 7
  store i64 %1826, i64* %PC
  %1827 = inttoptr i64 %1824 to i32*
  store i32 6, i32* %1827
  %1828 = load i64, i64* %PC
  %1829 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1828, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1829

block_400b04:                                     ; preds = %block_400586
  %1830 = load i64, i64* %RBP
  %1831 = sub i64 %1830, 12
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 7
  store i64 %1833, i64* %PC
  %1834 = inttoptr i64 %1831 to i32*
  store i32 29, i32* %1834
  %1835 = load i64, i64* %PC
  %1836 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1835, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1836

block_400780:                                     ; preds = %block_400586
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 12
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 7
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i32*
  store i32 11, i32* %1841
  %1842 = load i64, i64* %PC
  %1843 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1842, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1843

block_4009a6:                                     ; preds = %block_400586
  %1844 = load i64, i64* %RBP
  %1845 = sub i64 %1844, 12
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 7
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i32*
  store i32 22, i32* %1848
  %1849 = load i64, i64* %RBP
  %1850 = sub i64 %1849, 12
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 3
  store i64 %1852, i64* %PC
  %1853 = inttoptr i64 %1850 to i32*
  %1854 = load i32, i32* %1853
  %1855 = zext i32 %1854 to i64
  store i64 %1855, i64* %RDI, align 8, !tbaa !2428
  %1856 = load i64, i64* %PC
  %1857 = sub i64 %1856, 1184
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 5
  %1860 = load i64, i64* %PC
  %1861 = add i64 %1860, 5
  store i64 %1861, i64* %PC
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1863 = load i64, i64* %1862, align 8, !tbaa !2428
  %1864 = add i64 %1863, -8
  %1865 = inttoptr i64 %1864 to i64*
  store i64 %1859, i64* %1865
  store i64 %1864, i64* %1862, align 8, !tbaa !2428
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1857, i64* %1866, align 8, !tbaa !2428
  %1867 = load i64, i64* %PC
  %1868 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1867, %struct.Memory* %MEMORY.1)
  %1869 = load i64, i64* %RBP
  %1870 = sub i64 %1869, 8
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RAX
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 3
  store i64 %1877, i64* %PC
  store i64 %1875, i64* %RCX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RCX
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 4
  store i64 %1880, i64* %PC
  %1881 = add i64 4, %1878
  store i64 %1881, i64* %RCX, align 8, !tbaa !2428
  %1882 = icmp ult i64 %1881, %1878
  %1883 = icmp ult i64 %1881, 4
  %1884 = or i1 %1882, %1883
  %1885 = zext i1 %1884 to i8
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1885, i8* %1886, align 1, !tbaa !2432
  %1887 = trunc i64 %1881 to i32
  %1888 = and i32 %1887, 255
  %1889 = call i32 @llvm.ctpop.i32(i32 %1888) #16
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  %1892 = xor i8 %1891, 1
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1892, i8* %1893, align 1, !tbaa !2446
  %1894 = xor i64 4, %1878
  %1895 = xor i64 %1894, %1881
  %1896 = lshr i64 %1895, 4
  %1897 = trunc i64 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1898, i8* %1899, align 1, !tbaa !2447
  %1900 = icmp eq i64 %1881, 0
  %1901 = zext i1 %1900 to i8
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1901, i8* %1902, align 1, !tbaa !2448
  %1903 = lshr i64 %1881, 63
  %1904 = trunc i64 %1903 to i8
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1904, i8* %1905, align 1, !tbaa !2449
  %1906 = lshr i64 %1878, 63
  %1907 = xor i64 %1903, %1906
  %1908 = add nuw nsw i64 %1907, %1903
  %1909 = icmp eq i64 %1908, 2
  %1910 = zext i1 %1909 to i8
  %1911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1910, i8* %1911, align 1, !tbaa !2450
  %1912 = load i64, i64* %RBP
  %1913 = sub i64 %1912, 8
  %1914 = load i64, i64* %RCX
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 4
  store i64 %1916, i64* %PC
  %1917 = inttoptr i64 %1913 to i64*
  store i64 %1914, i64* %1917
  %1918 = load i64, i64* %RAX
  %1919 = load i64, i64* %PC
  %1920 = add i64 %1919, 3
  store i64 %1920, i64* %PC
  %1921 = inttoptr i64 %1918 to i32*
  %1922 = load i32, i32* %1921
  %1923 = sext i32 %1922 to i64
  store i64 %1923, i64* %RAX, align 8, !tbaa !2428
  %1924 = load i64, i64* %RAX
  %1925 = mul i64 %1924, 8
  %1926 = add i64 %1925, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 8
  store i64 %1928, i64* %PC
  %1929 = inttoptr i64 %1926 to i64*
  %1930 = load i64, i64* %1929
  store i64 %1930, i64* %RAX, align 8, !tbaa !2428
  %1931 = load i64, i64* %RBP
  %1932 = sub i64 %1931, 40
  %1933 = load i64, i64* %RAX
  %1934 = load i64, i64* %PC
  %1935 = add i64 %1934, 4
  store i64 %1935, i64* %PC
  %1936 = inttoptr i64 %1932 to i64*
  store i64 %1933, i64* %1936
  %1937 = load i64, i64* %PC
  %1938 = sub i64 %1937, 1101
  %1939 = load i64, i64* %PC
  %1940 = add i64 %1939, 5
  store i64 %1940, i64* %PC
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1938, i64* %1941, align 8, !tbaa !2428
  br label %block_400586

; <label>:1942:                                   ; preds = %block_400586
  %1943 = load i64, i64* %PC
  %1944 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1943, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1944
}

; Function Attrs: noinline
define %struct.Memory* @sub_400917(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400917

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 1234
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 1151
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 5, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 334
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 251
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 28, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1484
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1401
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 10, i32* %915
  %916 = load i64, i64* %PC
  %917 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %916, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %917

block_400848:                                     ; preds = %block_400586
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 12
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 7
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i32*
  store i32 15, i32* %922
  %923 = load i64, i64* %PC
  %924 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %923, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %924

block_400942:                                     ; preds = %block_400586
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 12
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 7
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  store i32 20, i32* %929
  %930 = load i64, i64* %PC
  %931 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %930, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %931

block_4005be:                                     ; preds = %block_400586
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 12
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 7
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i32*
  store i32 2, i32* %936
  %937 = load i64, i64* %PC
  %938 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %937, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %938

block_4005f0:                                     ; preds = %block_400586
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 12
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 7
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i32*
  store i32 3, i32* %943
  %944 = load i64, i64* %RBP
  %945 = sub i64 %944, 12
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 3
  store i64 %947, i64* %PC
  %948 = inttoptr i64 %945 to i32*
  %949 = load i32, i32* %948
  %950 = zext i32 %949 to i64
  store i64 %950, i64* %RDI, align 8, !tbaa !2428
  %951 = load i64, i64* %PC
  %952 = sub i64 %951, 234
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 5
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 5
  store i64 %956, i64* %PC
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %958 = load i64, i64* %957, align 8, !tbaa !2428
  %959 = add i64 %958, -8
  %960 = inttoptr i64 %959 to i64*
  store i64 %954, i64* %960
  store i64 %959, i64* %957, align 8, !tbaa !2428
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %952, i64* %961, align 8, !tbaa !2428
  %962 = load i64, i64* %PC
  %963 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %962, %struct.Memory* %MEMORY.0)
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 8
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 4
  store i64 %967, i64* %PC
  %968 = inttoptr i64 %965 to i64*
  %969 = load i64, i64* %968
  store i64 %969, i64* %RAX, align 8, !tbaa !2428
  %970 = load i64, i64* %RAX
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC
  store i64 %970, i64* %RCX, align 8, !tbaa !2428
  %973 = load i64, i64* %RCX
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = add i64 4, %973
  store i64 %976, i64* %RCX, align 8, !tbaa !2428
  %977 = icmp ult i64 %976, %973
  %978 = icmp ult i64 %976, 4
  %979 = or i1 %977, %978
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %980, i8* %981, align 1, !tbaa !2432
  %982 = trunc i64 %976 to i32
  %983 = and i32 %982, 255
  %984 = call i32 @llvm.ctpop.i32(i32 %983) #16
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %987, i8* %988, align 1, !tbaa !2446
  %989 = xor i64 4, %973
  %990 = xor i64 %989, %976
  %991 = lshr i64 %990, 4
  %992 = trunc i64 %991 to i8
  %993 = and i8 %992, 1
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %993, i8* %994, align 1, !tbaa !2447
  %995 = icmp eq i64 %976, 0
  %996 = zext i1 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %996, i8* %997, align 1, !tbaa !2448
  %998 = lshr i64 %976, 63
  %999 = trunc i64 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %999, i8* %1000, align 1, !tbaa !2449
  %1001 = lshr i64 %973, 63
  %1002 = xor i64 %998, %1001
  %1003 = add nuw nsw i64 %1002, %998
  %1004 = icmp eq i64 %1003, 2
  %1005 = zext i1 %1004 to i8
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1005, i8* %1006, align 1, !tbaa !2450
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 8
  %1009 = load i64, i64* %RCX
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 4
  store i64 %1011, i64* %PC
  %1012 = inttoptr i64 %1008 to i64*
  store i64 %1009, i64* %1012
  %1013 = load i64, i64* %RAX
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 3
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i32*
  %1017 = load i32, i32* %1016
  %1018 = sext i32 %1017 to i64
  store i64 %1018, i64* %RAX, align 8, !tbaa !2428
  %1019 = load i64, i64* %RAX
  %1020 = mul i64 %1019, 8
  %1021 = add i64 %1020, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 8
  store i64 %1023, i64* %PC
  %1024 = inttoptr i64 %1021 to i64*
  %1025 = load i64, i64* %1024
  store i64 %1025, i64* %RAX, align 8, !tbaa !2428
  %1026 = load i64, i64* %RBP
  %1027 = sub i64 %1026, 40
  %1028 = load i64, i64* %RAX
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1027 to i64*
  store i64 %1028, i64* %1031
  %1032 = load i64, i64* %PC
  %1033 = sub i64 %1032, 151
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1033, i64* %1036, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 12
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 7
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i32*
  store i32 25, i32* %1041
  %1042 = load i64, i64* %PC
  %1043 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1042, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1043

block_4006b8:                                     ; preds = %block_400586
  %1044 = load i64, i64* %RBP
  %1045 = sub i64 %1044, 12
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 7
  store i64 %1047, i64* %PC
  %1048 = inttoptr i64 %1045 to i32*
  store i32 7, i32* %1048
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 12
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDI, align 8, !tbaa !2428
  %1056 = load i64, i64* %PC
  %1057 = sub i64 %1056, 434
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 5
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 5
  store i64 %1061, i64* %PC
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1063 = load i64, i64* %1062, align 8, !tbaa !2428
  %1064 = add i64 %1063, -8
  %1065 = inttoptr i64 %1064 to i64*
  store i64 %1059, i64* %1065
  store i64 %1064, i64* %1062, align 8, !tbaa !2428
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1057, i64* %1066, align 8, !tbaa !2428
  %1067 = load i64, i64* %PC
  %1068 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1067, %struct.Memory* %MEMORY.0)
  %1069 = load i64, i64* %RBP
  %1070 = sub i64 %1069, 8
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 4
  store i64 %1072, i64* %PC
  %1073 = inttoptr i64 %1070 to i64*
  %1074 = load i64, i64* %1073
  store i64 %1074, i64* %RAX, align 8, !tbaa !2428
  %1075 = load i64, i64* %RAX
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 3
  store i64 %1077, i64* %PC
  store i64 %1075, i64* %RCX, align 8, !tbaa !2428
  %1078 = load i64, i64* %RCX
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 4
  store i64 %1080, i64* %PC
  %1081 = add i64 4, %1078
  store i64 %1081, i64* %RCX, align 8, !tbaa !2428
  %1082 = icmp ult i64 %1081, %1078
  %1083 = icmp ult i64 %1081, 4
  %1084 = or i1 %1082, %1083
  %1085 = zext i1 %1084 to i8
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1085, i8* %1086, align 1, !tbaa !2432
  %1087 = trunc i64 %1081 to i32
  %1088 = and i32 %1087, 255
  %1089 = call i32 @llvm.ctpop.i32(i32 %1088) #16
  %1090 = trunc i32 %1089 to i8
  %1091 = and i8 %1090, 1
  %1092 = xor i8 %1091, 1
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1092, i8* %1093, align 1, !tbaa !2446
  %1094 = xor i64 4, %1078
  %1095 = xor i64 %1094, %1081
  %1096 = lshr i64 %1095, 4
  %1097 = trunc i64 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1098, i8* %1099, align 1, !tbaa !2447
  %1100 = icmp eq i64 %1081, 0
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1101, i8* %1102, align 1, !tbaa !2448
  %1103 = lshr i64 %1081, 63
  %1104 = trunc i64 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1104, i8* %1105, align 1, !tbaa !2449
  %1106 = lshr i64 %1078, 63
  %1107 = xor i64 %1103, %1106
  %1108 = add nuw nsw i64 %1107, %1103
  %1109 = icmp eq i64 %1108, 2
  %1110 = zext i1 %1109 to i8
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1110, i8* %1111, align 1, !tbaa !2450
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 8
  %1114 = load i64, i64* %RCX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1113 to i64*
  store i64 %1114, i64* %1117
  %1118 = load i64, i64* %RAX
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 3
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i32*
  %1122 = load i32, i32* %1121
  %1123 = sext i32 %1122 to i64
  store i64 %1123, i64* %RAX, align 8, !tbaa !2428
  %1124 = load i64, i64* %RAX
  %1125 = mul i64 %1124, 8
  %1126 = add i64 %1125, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 8
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1126 to i64*
  %1130 = load i64, i64* %1129
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 40
  %1133 = load i64, i64* %RAX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %PC
  %1138 = sub i64 %1137, 351
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  store i64 %1140, i64* %PC
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1138, i64* %1141, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1142 = load i64, i64* %RBP
  %1143 = sub i64 %1142, 12
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 7
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1143 to i32*
  store i32 30, i32* %1146
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 12
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 3
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i32*
  %1152 = load i32, i32* %1151
  %1153 = zext i32 %1152 to i64
  store i64 %1153, i64* %RDI, align 8, !tbaa !2428
  %1154 = load i64, i64* %PC
  %1155 = sub i64 %1154, 1584
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 5
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1161 = load i64, i64* %1160, align 8, !tbaa !2428
  %1162 = add i64 %1161, -8
  %1163 = inttoptr i64 %1162 to i64*
  store i64 %1157, i64* %1163
  store i64 %1162, i64* %1160, align 8, !tbaa !2428
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1155, i64* %1164, align 8, !tbaa !2428
  %1165 = load i64, i64* %PC
  %1166 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1165, %struct.Memory* %MEMORY.0)
  %1167 = load i64, i64* %RBP
  %1168 = sub i64 %1167, 8
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to i64*
  %1172 = load i64, i64* %1171
  store i64 %1172, i64* %RAX, align 8, !tbaa !2428
  %1173 = load i64, i64* %RAX
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 3
  store i64 %1175, i64* %PC
  store i64 %1173, i64* %RCX, align 8, !tbaa !2428
  %1176 = load i64, i64* %RCX
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 4
  store i64 %1178, i64* %PC
  %1179 = add i64 4, %1176
  store i64 %1179, i64* %RCX, align 8, !tbaa !2428
  %1180 = icmp ult i64 %1179, %1176
  %1181 = icmp ult i64 %1179, 4
  %1182 = or i1 %1180, %1181
  %1183 = zext i1 %1182 to i8
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1183, i8* %1184, align 1, !tbaa !2432
  %1185 = trunc i64 %1179 to i32
  %1186 = and i32 %1185, 255
  %1187 = call i32 @llvm.ctpop.i32(i32 %1186) #16
  %1188 = trunc i32 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = xor i8 %1189, 1
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1190, i8* %1191, align 1, !tbaa !2446
  %1192 = xor i64 4, %1176
  %1193 = xor i64 %1192, %1179
  %1194 = lshr i64 %1193, 4
  %1195 = trunc i64 %1194 to i8
  %1196 = and i8 %1195, 1
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1196, i8* %1197, align 1, !tbaa !2447
  %1198 = icmp eq i64 %1179, 0
  %1199 = zext i1 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1199, i8* %1200, align 1, !tbaa !2448
  %1201 = lshr i64 %1179, 63
  %1202 = trunc i64 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1202, i8* %1203, align 1, !tbaa !2449
  %1204 = lshr i64 %1176, 63
  %1205 = xor i64 %1201, %1204
  %1206 = add nuw nsw i64 %1205, %1201
  %1207 = icmp eq i64 %1206, 2
  %1208 = zext i1 %1207 to i8
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1208, i8* %1209, align 1, !tbaa !2450
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 8
  %1212 = load i64, i64* %RCX
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 4
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1211 to i64*
  store i64 %1212, i64* %1215
  %1216 = load i64, i64* %RAX
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 3
  store i64 %1218, i64* %PC
  %1219 = inttoptr i64 %1216 to i32*
  %1220 = load i32, i32* %1219
  %1221 = sext i32 %1220 to i64
  store i64 %1221, i64* %RAX, align 8, !tbaa !2428
  %1222 = load i64, i64* %RAX
  %1223 = mul i64 %1222, 8
  %1224 = add i64 %1223, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 8
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1224 to i64*
  %1228 = load i64, i64* %1227
  store i64 %1228, i64* %RAX, align 8, !tbaa !2428
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 40
  %1231 = load i64, i64* %RAX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %PC
  %1236 = sub i64 %1235, 1501
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 5
  store i64 %1238, i64* %PC
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1236, i64* %1239, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1240 = load i64, i64* %RBP
  %1241 = sub i64 %1240, 12
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 7
  store i64 %1243, i64* %PC
  %1244 = inttoptr i64 %1241 to i32*
  store i32 0, i32* %1244
  %1245 = load i64, i64* %RSP
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 4
  store i64 %1247, i64* %PC
  %1248 = add i64 48, %1245
  store i64 %1248, i64* %RSP, align 8, !tbaa !2428
  %1249 = icmp ult i64 %1248, %1245
  %1250 = icmp ult i64 %1248, 48
  %1251 = or i1 %1249, %1250
  %1252 = zext i1 %1251 to i8
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1252, i8* %1253, align 1, !tbaa !2432
  %1254 = trunc i64 %1248 to i32
  %1255 = and i32 %1254, 255
  %1256 = call i32 @llvm.ctpop.i32(i32 %1255) #16
  %1257 = trunc i32 %1256 to i8
  %1258 = and i8 %1257, 1
  %1259 = xor i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1259, i8* %1260, align 1, !tbaa !2446
  %1261 = xor i64 48, %1245
  %1262 = xor i64 %1261, %1248
  %1263 = lshr i64 %1262, 4
  %1264 = trunc i64 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1265, i8* %1266, align 1, !tbaa !2447
  %1267 = icmp eq i64 %1248, 0
  %1268 = zext i1 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1268, i8* %1269, align 1, !tbaa !2448
  %1270 = lshr i64 %1248, 63
  %1271 = trunc i64 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1271, i8* %1272, align 1, !tbaa !2449
  %1273 = lshr i64 %1245, 63
  %1274 = xor i64 %1270, %1273
  %1275 = add nuw nsw i64 %1274, %1270
  %1276 = icmp eq i64 %1275, 2
  %1277 = zext i1 %1276 to i8
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1277, i8* %1278, align 1, !tbaa !2450
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 1
  store i64 %1280, i64* %PC
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1282 = load i64, i64* %1281, align 8, !tbaa !2428
  %1283 = add i64 %1282, 8
  %1284 = inttoptr i64 %1282 to i64*
  %1285 = load i64, i64* %1284
  store i64 %1285, i64* %RBP, align 8, !tbaa !2428
  store i64 %1283, i64* %1281, align 8, !tbaa !2428
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 1
  store i64 %1287, i64* %PC
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1290 = load i64, i64* %1289, align 8, !tbaa !2428
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  store i64 %1292, i64* %1288, align 8, !tbaa !2428
  %1293 = add i64 %1290, 8
  store i64 %1293, i64* %1289, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007b2:                                     ; preds = %block_400586
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 12
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 7
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i32*
  store i32 12, i32* %1298
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 12
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 3
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to i32*
  %1304 = load i32, i32* %1303
  %1305 = zext i32 %1304 to i64
  store i64 %1305, i64* %RDI, align 8, !tbaa !2428
  %1306 = load i64, i64* %PC
  %1307 = sub i64 %1306, 684
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 5
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 5
  store i64 %1311, i64* %PC
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1313 = load i64, i64* %1312, align 8, !tbaa !2428
  %1314 = add i64 %1313, -8
  %1315 = inttoptr i64 %1314 to i64*
  store i64 %1309, i64* %1315
  store i64 %1314, i64* %1312, align 8, !tbaa !2428
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1307, i64* %1316, align 8, !tbaa !2428
  %1317 = load i64, i64* %PC
  %1318 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1317, %struct.Memory* %MEMORY.0)
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 8
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 4
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i64*
  %1324 = load i64, i64* %1323
  store i64 %1324, i64* %RAX, align 8, !tbaa !2428
  %1325 = load i64, i64* %RAX
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  store i64 %1325, i64* %RCX, align 8, !tbaa !2428
  %1328 = load i64, i64* %RCX
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 4
  store i64 %1330, i64* %PC
  %1331 = add i64 4, %1328
  store i64 %1331, i64* %RCX, align 8, !tbaa !2428
  %1332 = icmp ult i64 %1331, %1328
  %1333 = icmp ult i64 %1331, 4
  %1334 = or i1 %1332, %1333
  %1335 = zext i1 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1335, i8* %1336, align 1, !tbaa !2432
  %1337 = trunc i64 %1331 to i32
  %1338 = and i32 %1337, 255
  %1339 = call i32 @llvm.ctpop.i32(i32 %1338) #16
  %1340 = trunc i32 %1339 to i8
  %1341 = and i8 %1340, 1
  %1342 = xor i8 %1341, 1
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1342, i8* %1343, align 1, !tbaa !2446
  %1344 = xor i64 4, %1328
  %1345 = xor i64 %1344, %1331
  %1346 = lshr i64 %1345, 4
  %1347 = trunc i64 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1348, i8* %1349, align 1, !tbaa !2447
  %1350 = icmp eq i64 %1331, 0
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1351, i8* %1352, align 1, !tbaa !2448
  %1353 = lshr i64 %1331, 63
  %1354 = trunc i64 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1354, i8* %1355, align 1, !tbaa !2449
  %1356 = lshr i64 %1328, 63
  %1357 = xor i64 %1353, %1356
  %1358 = add nuw nsw i64 %1357, %1353
  %1359 = icmp eq i64 %1358, 2
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1360, i8* %1361, align 1, !tbaa !2450
  %1362 = load i64, i64* %RBP
  %1363 = sub i64 %1362, 8
  %1364 = load i64, i64* %RCX
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 4
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1363 to i64*
  store i64 %1364, i64* %1367
  %1368 = load i64, i64* %RAX
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 3
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  %1372 = load i32, i32* %1371
  %1373 = sext i32 %1372 to i64
  store i64 %1373, i64* %RAX, align 8, !tbaa !2428
  %1374 = load i64, i64* %RAX
  %1375 = mul i64 %1374, 8
  %1376 = add i64 %1375, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 8
  store i64 %1378, i64* %PC
  %1379 = inttoptr i64 %1376 to i64*
  %1380 = load i64, i64* %1379
  store i64 %1380, i64* %RAX, align 8, !tbaa !2428
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 40
  %1383 = load i64, i64* %RAX
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 4
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1382 to i64*
  store i64 %1383, i64* %1386
  %1387 = load i64, i64* %PC
  %1388 = sub i64 %1387, 601
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 5
  store i64 %1390, i64* %PC
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1388, i64* %1391, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1392 = load i64, i64* %RBP
  %1393 = sub i64 %1392, 12
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 7
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i32*
  store i32 17, i32* %1396
  %1397 = load i64, i64* %RBP
  %1398 = sub i64 %1397, 12
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 3
  store i64 %1400, i64* %PC
  %1401 = inttoptr i64 %1398 to i32*
  %1402 = load i32, i32* %1401
  %1403 = zext i32 %1402 to i64
  store i64 %1403, i64* %RDI, align 8, !tbaa !2428
  %1404 = load i64, i64* %PC
  %1405 = sub i64 %1404, 934
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 5
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1411 = load i64, i64* %1410, align 8, !tbaa !2428
  %1412 = add i64 %1411, -8
  %1413 = inttoptr i64 %1412 to i64*
  store i64 %1407, i64* %1413
  store i64 %1412, i64* %1410, align 8, !tbaa !2428
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1405, i64* %1414, align 8, !tbaa !2428
  %1415 = load i64, i64* %PC
  %1416 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1415, %struct.Memory* %MEMORY.0)
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 8
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 4
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %RAX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RAX
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  store i64 %1423, i64* %RCX, align 8, !tbaa !2428
  %1426 = load i64, i64* %RCX
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 4
  store i64 %1428, i64* %PC
  %1429 = add i64 4, %1426
  store i64 %1429, i64* %RCX, align 8, !tbaa !2428
  %1430 = icmp ult i64 %1429, %1426
  %1431 = icmp ult i64 %1429, 4
  %1432 = or i1 %1430, %1431
  %1433 = zext i1 %1432 to i8
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1433, i8* %1434, align 1, !tbaa !2432
  %1435 = trunc i64 %1429 to i32
  %1436 = and i32 %1435, 255
  %1437 = call i32 @llvm.ctpop.i32(i32 %1436) #16
  %1438 = trunc i32 %1437 to i8
  %1439 = and i8 %1438, 1
  %1440 = xor i8 %1439, 1
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1440, i8* %1441, align 1, !tbaa !2446
  %1442 = xor i64 4, %1426
  %1443 = xor i64 %1442, %1429
  %1444 = lshr i64 %1443, 4
  %1445 = trunc i64 %1444 to i8
  %1446 = and i8 %1445, 1
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1446, i8* %1447, align 1, !tbaa !2447
  %1448 = icmp eq i64 %1429, 0
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1449, i8* %1450, align 1, !tbaa !2448
  %1451 = lshr i64 %1429, 63
  %1452 = trunc i64 %1451 to i8
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1452, i8* %1453, align 1, !tbaa !2449
  %1454 = lshr i64 %1426, 63
  %1455 = xor i64 %1451, %1454
  %1456 = add nuw nsw i64 %1455, %1451
  %1457 = icmp eq i64 %1456, 2
  %1458 = zext i1 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1458, i8* %1459, align 1, !tbaa !2450
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 8
  %1462 = load i64, i64* %RCX
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 4
  store i64 %1464, i64* %PC
  %1465 = inttoptr i64 %1461 to i64*
  store i64 %1462, i64* %1465
  %1466 = load i64, i64* %RAX
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 3
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1466 to i32*
  %1470 = load i32, i32* %1469
  %1471 = sext i32 %1470 to i64
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = load i64, i64* %RAX
  %1473 = mul i64 %1472, 8
  %1474 = add i64 %1473, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 8
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1474 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %RAX, align 8, !tbaa !2428
  %1479 = load i64, i64* %RBP
  %1480 = sub i64 %1479, 40
  %1481 = load i64, i64* %RAX
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 4
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1480 to i64*
  store i64 %1481, i64* %1484
  %1485 = load i64, i64* %PC
  %1486 = sub i64 %1485, 851
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 5
  store i64 %1488, i64* %PC
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1486, i64* %1489, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_400816, %block_400917, %block_40071c, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %1814, %block_400917 ], [ %1525, %block_400622 ], [ %1416, %block_4008ac ], [ %1318, %block_4007b2 ], [ %1166, %block_400b36 ], [ %1068, %block_4006b8 ], [ %151, %block_400a6e ], [ %963, %block_4005f0 ], [ %53, %block_400974 ], [ %641, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %739, %block_400654 ], [ %837, %block_400ad2 ], [ %1623, %block_400aa0 ], [ %1721, %block_40071c ], [ %1912, %block_400816 ], [ %2050, %block_4009a6 ]
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 40
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 4
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1491 to i64*
  %1495 = load i64, i64* %1494
  store i64 %1495, i64* %RAX, align 8, !tbaa !2428
  %1496 = load i64, i64* %RAX
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 2
  store i64 %1498, i64* %PC
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1496, i64* %1499, align 8, !tbaa !2428
  %1500 = load i64, i64* %PC
  switch i64 %1500, label %2124 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 12
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 7
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i32*
  store i32 4, i32* %1505
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 3
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  %1511 = load i32, i32* %1510
  %1512 = zext i32 %1511 to i64
  store i64 %1512, i64* %RDI, align 8, !tbaa !2428
  %1513 = load i64, i64* %PC
  %1514 = sub i64 %1513, 284
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 5
  store i64 %1518, i64* %PC
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1520 = load i64, i64* %1519, align 8, !tbaa !2428
  %1521 = add i64 %1520, -8
  %1522 = inttoptr i64 %1521 to i64*
  store i64 %1516, i64* %1522
  store i64 %1521, i64* %1519, align 8, !tbaa !2428
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1514, i64* %1523, align 8, !tbaa !2428
  %1524 = load i64, i64* %PC
  %1525 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1524, %struct.Memory* %MEMORY.0)
  %1526 = load i64, i64* %RBP
  %1527 = sub i64 %1526, 8
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 4
  store i64 %1529, i64* %PC
  %1530 = inttoptr i64 %1527 to i64*
  %1531 = load i64, i64* %1530
  store i64 %1531, i64* %RAX, align 8, !tbaa !2428
  %1532 = load i64, i64* %RAX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 3
  store i64 %1534, i64* %PC
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RCX
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = add i64 4, %1535
  store i64 %1538, i64* %RCX, align 8, !tbaa !2428
  %1539 = icmp ult i64 %1538, %1535
  %1540 = icmp ult i64 %1538, 4
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1542, i8* %1543, align 1, !tbaa !2432
  %1544 = trunc i64 %1538 to i32
  %1545 = and i32 %1544, 255
  %1546 = call i32 @llvm.ctpop.i32(i32 %1545) #16
  %1547 = trunc i32 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = xor i8 %1548, 1
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1549, i8* %1550, align 1, !tbaa !2446
  %1551 = xor i64 4, %1535
  %1552 = xor i64 %1551, %1538
  %1553 = lshr i64 %1552, 4
  %1554 = trunc i64 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1555, i8* %1556, align 1, !tbaa !2447
  %1557 = icmp eq i64 %1538, 0
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1558, i8* %1559, align 1, !tbaa !2448
  %1560 = lshr i64 %1538, 63
  %1561 = trunc i64 %1560 to i8
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1561, i8* %1562, align 1, !tbaa !2449
  %1563 = lshr i64 %1535, 63
  %1564 = xor i64 %1560, %1563
  %1565 = add nuw nsw i64 %1564, %1560
  %1566 = icmp eq i64 %1565, 2
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1567, i8* %1568, align 1, !tbaa !2450
  %1569 = load i64, i64* %RBP
  %1570 = sub i64 %1569, 8
  %1571 = load i64, i64* %RCX
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 4
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1570 to i64*
  store i64 %1571, i64* %1574
  %1575 = load i64, i64* %RAX
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 3
  store i64 %1577, i64* %PC
  %1578 = inttoptr i64 %1575 to i32*
  %1579 = load i32, i32* %1578
  %1580 = sext i32 %1579 to i64
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RAX
  %1582 = mul i64 %1581, 8
  %1583 = add i64 %1582, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 8
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1583 to i64*
  %1587 = load i64, i64* %1586
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 40
  %1590 = load i64, i64* %RAX
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 4
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1589 to i64*
  store i64 %1590, i64* %1593
  %1594 = load i64, i64* %PC
  %1595 = sub i64 %1594, 201
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 5
  store i64 %1597, i64* %PC
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1595, i64* %1598, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 12
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 7
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i32*
  store i32 27, i32* %1603
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RDI, align 8, !tbaa !2428
  %1611 = load i64, i64* %PC
  %1612 = sub i64 %1611, 1434
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 5
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 5
  store i64 %1616, i64* %PC
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1618 = load i64, i64* %1617, align 8, !tbaa !2428
  %1619 = add i64 %1618, -8
  %1620 = inttoptr i64 %1619 to i64*
  store i64 %1614, i64* %1620
  store i64 %1619, i64* %1617, align 8, !tbaa !2428
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1612, i64* %1621, align 8, !tbaa !2428
  %1622 = load i64, i64* %PC
  %1623 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1622, %struct.Memory* %MEMORY.0)
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 8
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 4
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i64*
  %1629 = load i64, i64* %1628
  store i64 %1629, i64* %RAX, align 8, !tbaa !2428
  %1630 = load i64, i64* %RAX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 3
  store i64 %1632, i64* %PC
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RCX
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 4
  store i64 %1635, i64* %PC
  %1636 = add i64 4, %1633
  store i64 %1636, i64* %RCX, align 8, !tbaa !2428
  %1637 = icmp ult i64 %1636, %1633
  %1638 = icmp ult i64 %1636, 4
  %1639 = or i1 %1637, %1638
  %1640 = zext i1 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1640, i8* %1641, align 1, !tbaa !2432
  %1642 = trunc i64 %1636 to i32
  %1643 = and i32 %1642, 255
  %1644 = call i32 @llvm.ctpop.i32(i32 %1643) #16
  %1645 = trunc i32 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = xor i8 %1646, 1
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1647, i8* %1648, align 1, !tbaa !2446
  %1649 = xor i64 4, %1633
  %1650 = xor i64 %1649, %1636
  %1651 = lshr i64 %1650, 4
  %1652 = trunc i64 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1653, i8* %1654, align 1, !tbaa !2447
  %1655 = icmp eq i64 %1636, 0
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1656, i8* %1657, align 1, !tbaa !2448
  %1658 = lshr i64 %1636, 63
  %1659 = trunc i64 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1659, i8* %1660, align 1, !tbaa !2449
  %1661 = lshr i64 %1633, 63
  %1662 = xor i64 %1658, %1661
  %1663 = add nuw nsw i64 %1662, %1658
  %1664 = icmp eq i64 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2450
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 8
  %1669 = load i64, i64* %RCX
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 4
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1668 to i64*
  store i64 %1669, i64* %1672
  %1673 = load i64, i64* %RAX
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 3
  store i64 %1675, i64* %PC
  %1676 = inttoptr i64 %1673 to i32*
  %1677 = load i32, i32* %1676
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RAX
  %1680 = mul i64 %1679, 8
  %1681 = add i64 %1680, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 8
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1681 to i64*
  %1685 = load i64, i64* %1684
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RBP
  %1687 = sub i64 %1686, 40
  %1688 = load i64, i64* %RAX
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 4
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1687 to i64*
  store i64 %1688, i64* %1691
  %1692 = load i64, i64* %PC
  %1693 = sub i64 %1692, 1351
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 5
  store i64 %1695, i64* %PC
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1693, i64* %1696, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1697 = load i64, i64* %RBP
  %1698 = sub i64 %1697, 12
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 7
  store i64 %1700, i64* %PC
  %1701 = inttoptr i64 %1698 to i32*
  store i32 9, i32* %1701
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 12
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 3
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  %1707 = load i32, i32* %1706
  %1708 = zext i32 %1707 to i64
  store i64 %1708, i64* %RDI, align 8, !tbaa !2428
  %1709 = load i64, i64* %PC
  %1710 = sub i64 %1709, 534
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 5
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 5
  store i64 %1714, i64* %PC
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1716 = load i64, i64* %1715, align 8, !tbaa !2428
  %1717 = add i64 %1716, -8
  %1718 = inttoptr i64 %1717 to i64*
  store i64 %1712, i64* %1718
  store i64 %1717, i64* %1715, align 8, !tbaa !2428
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1710, i64* %1719, align 8, !tbaa !2428
  %1720 = load i64, i64* %PC
  %1721 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1720, %struct.Memory* %MEMORY.0)
  %1722 = load i64, i64* %RBP
  %1723 = sub i64 %1722, 8
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 4
  store i64 %1725, i64* %PC
  %1726 = inttoptr i64 %1723 to i64*
  %1727 = load i64, i64* %1726
  store i64 %1727, i64* %RAX, align 8, !tbaa !2428
  %1728 = load i64, i64* %RAX
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 3
  store i64 %1730, i64* %PC
  store i64 %1728, i64* %RCX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RCX
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 4
  store i64 %1733, i64* %PC
  %1734 = add i64 4, %1731
  store i64 %1734, i64* %RCX, align 8, !tbaa !2428
  %1735 = icmp ult i64 %1734, %1731
  %1736 = icmp ult i64 %1734, 4
  %1737 = or i1 %1735, %1736
  %1738 = zext i1 %1737 to i8
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1738, i8* %1739, align 1, !tbaa !2432
  %1740 = trunc i64 %1734 to i32
  %1741 = and i32 %1740, 255
  %1742 = call i32 @llvm.ctpop.i32(i32 %1741) #16
  %1743 = trunc i32 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = xor i8 %1744, 1
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1745, i8* %1746, align 1, !tbaa !2446
  %1747 = xor i64 4, %1731
  %1748 = xor i64 %1747, %1734
  %1749 = lshr i64 %1748, 4
  %1750 = trunc i64 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1751, i8* %1752, align 1, !tbaa !2447
  %1753 = icmp eq i64 %1734, 0
  %1754 = zext i1 %1753 to i8
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1754, i8* %1755, align 1, !tbaa !2448
  %1756 = lshr i64 %1734, 63
  %1757 = trunc i64 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1757, i8* %1758, align 1, !tbaa !2449
  %1759 = lshr i64 %1731, 63
  %1760 = xor i64 %1756, %1759
  %1761 = add nuw nsw i64 %1760, %1756
  %1762 = icmp eq i64 %1761, 2
  %1763 = zext i1 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1763, i8* %1764, align 1, !tbaa !2450
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 8
  %1767 = load i64, i64* %RCX
  %1768 = load i64, i64* %PC
  %1769 = add i64 %1768, 4
  store i64 %1769, i64* %PC
  %1770 = inttoptr i64 %1766 to i64*
  store i64 %1767, i64* %1770
  %1771 = load i64, i64* %RAX
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 3
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i32*
  %1775 = load i32, i32* %1774
  %1776 = sext i32 %1775 to i64
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RAX
  %1778 = mul i64 %1777, 8
  %1779 = add i64 %1778, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 8
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1779 to i64*
  %1783 = load i64, i64* %1782
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 40
  %1786 = load i64, i64* %RAX
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 4
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1785 to i64*
  store i64 %1786, i64* %1789
  %1790 = load i64, i64* %PC
  %1791 = sub i64 %1790, 451
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 5
  store i64 %1793, i64* %PC
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1791, i64* %1794, align 8, !tbaa !2428
  br label %block_400586

block_400917:                                     ; preds = %block_400910, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400910 ]
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 12
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 3
  store i64 %1798, i64* %PC
  %1799 = inttoptr i64 %1796 to i32*
  %1800 = load i32, i32* %1799
  %1801 = zext i32 %1800 to i64
  store i64 %1801, i64* %RDI, align 8, !tbaa !2428
  %1802 = load i64, i64* %PC
  %1803 = sub i64 %1802, 1034
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 5
  store i64 %1807, i64* %PC
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1809 = load i64, i64* %1808, align 8, !tbaa !2428
  %1810 = add i64 %1809, -8
  %1811 = inttoptr i64 %1810 to i64*
  store i64 %1805, i64* %1811
  store i64 %1810, i64* %1808, align 8, !tbaa !2428
  %1812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1803, i64* %1812, align 8, !tbaa !2428
  %1813 = load i64, i64* %PC
  %1814 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1813, %struct.Memory* %MEMORY.1)
  %1815 = load i64, i64* %RBP
  %1816 = sub i64 %1815, 8
  %1817 = load i64, i64* %PC
  %1818 = add i64 %1817, 4
  store i64 %1818, i64* %PC
  %1819 = inttoptr i64 %1816 to i64*
  %1820 = load i64, i64* %1819
  store i64 %1820, i64* %RAX, align 8, !tbaa !2428
  %1821 = load i64, i64* %RAX
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 3
  store i64 %1823, i64* %PC
  store i64 %1821, i64* %RCX, align 8, !tbaa !2428
  %1824 = load i64, i64* %RCX
  %1825 = load i64, i64* %PC
  %1826 = add i64 %1825, 4
  store i64 %1826, i64* %PC
  %1827 = add i64 4, %1824
  store i64 %1827, i64* %RCX, align 8, !tbaa !2428
  %1828 = icmp ult i64 %1827, %1824
  %1829 = icmp ult i64 %1827, 4
  %1830 = or i1 %1828, %1829
  %1831 = zext i1 %1830 to i8
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1831, i8* %1832, align 1, !tbaa !2432
  %1833 = trunc i64 %1827 to i32
  %1834 = and i32 %1833, 255
  %1835 = call i32 @llvm.ctpop.i32(i32 %1834) #16
  %1836 = trunc i32 %1835 to i8
  %1837 = and i8 %1836, 1
  %1838 = xor i8 %1837, 1
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1838, i8* %1839, align 1, !tbaa !2446
  %1840 = xor i64 4, %1824
  %1841 = xor i64 %1840, %1827
  %1842 = lshr i64 %1841, 4
  %1843 = trunc i64 %1842 to i8
  %1844 = and i8 %1843, 1
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1844, i8* %1845, align 1, !tbaa !2447
  %1846 = icmp eq i64 %1827, 0
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1847, i8* %1848, align 1, !tbaa !2448
  %1849 = lshr i64 %1827, 63
  %1850 = trunc i64 %1849 to i8
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1850, i8* %1851, align 1, !tbaa !2449
  %1852 = lshr i64 %1824, 63
  %1853 = xor i64 %1849, %1852
  %1854 = add nuw nsw i64 %1853, %1849
  %1855 = icmp eq i64 %1854, 2
  %1856 = zext i1 %1855 to i8
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1856, i8* %1857, align 1, !tbaa !2450
  %1858 = load i64, i64* %RBP
  %1859 = sub i64 %1858, 8
  %1860 = load i64, i64* %RCX
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 4
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1859 to i64*
  store i64 %1860, i64* %1863
  %1864 = load i64, i64* %RAX
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 3
  store i64 %1866, i64* %PC
  %1867 = inttoptr i64 %1864 to i32*
  %1868 = load i32, i32* %1867
  %1869 = sext i32 %1868 to i64
  store i64 %1869, i64* %RAX, align 8, !tbaa !2428
  %1870 = load i64, i64* %RAX
  %1871 = mul i64 %1870, 8
  %1872 = add i64 %1871, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 8
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  store i64 %1876, i64* %RAX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 40
  %1879 = load i64, i64* %RAX
  %1880 = load i64, i64* %PC
  %1881 = add i64 %1880, 4
  store i64 %1881, i64* %PC
  %1882 = inttoptr i64 %1878 to i64*
  store i64 %1879, i64* %1882
  %1883 = load i64, i64* %PC
  %1884 = sub i64 %1883, 951
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 5
  store i64 %1886, i64* %PC
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1884, i64* %1887, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1888 = load i64, i64* %RBP
  %1889 = sub i64 %1888, 12
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 7
  store i64 %1891, i64* %PC
  %1892 = inttoptr i64 %1889 to i32*
  store i32 14, i32* %1892
  %1893 = load i64, i64* %RBP
  %1894 = sub i64 %1893, 12
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 3
  store i64 %1896, i64* %PC
  %1897 = inttoptr i64 %1894 to i32*
  %1898 = load i32, i32* %1897
  %1899 = zext i32 %1898 to i64
  store i64 %1899, i64* %RDI, align 8, !tbaa !2428
  %1900 = load i64, i64* %PC
  %1901 = sub i64 %1900, 784
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 5
  store i64 %1905, i64* %PC
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1907 = load i64, i64* %1906, align 8, !tbaa !2428
  %1908 = add i64 %1907, -8
  %1909 = inttoptr i64 %1908 to i64*
  store i64 %1903, i64* %1909
  store i64 %1908, i64* %1906, align 8, !tbaa !2428
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1901, i64* %1910, align 8, !tbaa !2428
  %1911 = load i64, i64* %PC
  %1912 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1911, %struct.Memory* %MEMORY.0)
  %1913 = load i64, i64* %RBP
  %1914 = sub i64 %1913, 8
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 4
  store i64 %1916, i64* %PC
  %1917 = inttoptr i64 %1914 to i64*
  %1918 = load i64, i64* %1917
  store i64 %1918, i64* %RAX, align 8, !tbaa !2428
  %1919 = load i64, i64* %RAX
  %1920 = load i64, i64* %PC
  %1921 = add i64 %1920, 3
  store i64 %1921, i64* %PC
  store i64 %1919, i64* %RCX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RCX
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 4
  store i64 %1924, i64* %PC
  %1925 = add i64 4, %1922
  store i64 %1925, i64* %RCX, align 8, !tbaa !2428
  %1926 = icmp ult i64 %1925, %1922
  %1927 = icmp ult i64 %1925, 4
  %1928 = or i1 %1926, %1927
  %1929 = zext i1 %1928 to i8
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1929, i8* %1930, align 1, !tbaa !2432
  %1931 = trunc i64 %1925 to i32
  %1932 = and i32 %1931, 255
  %1933 = call i32 @llvm.ctpop.i32(i32 %1932) #16
  %1934 = trunc i32 %1933 to i8
  %1935 = and i8 %1934, 1
  %1936 = xor i8 %1935, 1
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1936, i8* %1937, align 1, !tbaa !2446
  %1938 = xor i64 4, %1922
  %1939 = xor i64 %1938, %1925
  %1940 = lshr i64 %1939, 4
  %1941 = trunc i64 %1940 to i8
  %1942 = and i8 %1941, 1
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1942, i8* %1943, align 1, !tbaa !2447
  %1944 = icmp eq i64 %1925, 0
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1945, i8* %1946, align 1, !tbaa !2448
  %1947 = lshr i64 %1925, 63
  %1948 = trunc i64 %1947 to i8
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1948, i8* %1949, align 1, !tbaa !2449
  %1950 = lshr i64 %1922, 63
  %1951 = xor i64 %1947, %1950
  %1952 = add nuw nsw i64 %1951, %1947
  %1953 = icmp eq i64 %1952, 2
  %1954 = zext i1 %1953 to i8
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1954, i8* %1955, align 1, !tbaa !2450
  %1956 = load i64, i64* %RBP
  %1957 = sub i64 %1956, 8
  %1958 = load i64, i64* %RCX
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 4
  store i64 %1960, i64* %PC
  %1961 = inttoptr i64 %1957 to i64*
  store i64 %1958, i64* %1961
  %1962 = load i64, i64* %RAX
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 3
  store i64 %1964, i64* %PC
  %1965 = inttoptr i64 %1962 to i32*
  %1966 = load i32, i32* %1965
  %1967 = sext i32 %1966 to i64
  store i64 %1967, i64* %RAX, align 8, !tbaa !2428
  %1968 = load i64, i64* %RAX
  %1969 = mul i64 %1968, 8
  %1970 = add i64 %1969, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 8
  store i64 %1972, i64* %PC
  %1973 = inttoptr i64 %1970 to i64*
  %1974 = load i64, i64* %1973
  store i64 %1974, i64* %RAX, align 8, !tbaa !2428
  %1975 = load i64, i64* %RBP
  %1976 = sub i64 %1975, 40
  %1977 = load i64, i64* %RAX
  %1978 = load i64, i64* %PC
  %1979 = add i64 %1978, 4
  store i64 %1979, i64* %PC
  %1980 = inttoptr i64 %1976 to i64*
  store i64 %1977, i64* %1980
  %1981 = load i64, i64* %PC
  %1982 = sub i64 %1981, 701
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 5
  store i64 %1984, i64* %PC
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1982, i64* %1985, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %1986 = load i64, i64* %RBP
  %1987 = sub i64 %1986, 12
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 7
  store i64 %1989, i64* %PC
  %1990 = inttoptr i64 %1987 to i32*
  store i32 19, i32* %1990
  br label %block_400917

block_40058c:                                     ; preds = %block_400586
  %1991 = load i64, i64* %RBP
  %1992 = sub i64 %1991, 12
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 7
  store i64 %1994, i64* %PC
  %1995 = inttoptr i64 %1992 to i32*
  store i32 1, i32* %1995
  %1996 = load i64, i64* %PC
  %1997 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1996, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1997

block_400a0a:                                     ; preds = %block_400586
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 12
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 7
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  store i32 24, i32* %2002
  %2003 = load i64, i64* %PC
  %2004 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %2003, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2004

block_400686:                                     ; preds = %block_400586
  %2005 = load i64, i64* %RBP
  %2006 = sub i64 %2005, 12
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 7
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2006 to i32*
  store i32 6, i32* %2009
  %2010 = load i64, i64* %PC
  %2011 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %2010, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2011

block_400b04:                                     ; preds = %block_400586
  %2012 = load i64, i64* %RBP
  %2013 = sub i64 %2012, 12
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 7
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to i32*
  store i32 29, i32* %2016
  %2017 = load i64, i64* %PC
  %2018 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2017, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2018

block_400780:                                     ; preds = %block_400586
  %2019 = load i64, i64* %RBP
  %2020 = sub i64 %2019, 12
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 7
  store i64 %2022, i64* %PC
  %2023 = inttoptr i64 %2020 to i32*
  store i32 11, i32* %2023
  %2024 = load i64, i64* %PC
  %2025 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2024, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2025

block_4009a6:                                     ; preds = %block_400586
  %2026 = load i64, i64* %RBP
  %2027 = sub i64 %2026, 12
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 7
  store i64 %2029, i64* %PC
  %2030 = inttoptr i64 %2027 to i32*
  store i32 22, i32* %2030
  %2031 = load i64, i64* %RBP
  %2032 = sub i64 %2031, 12
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 3
  store i64 %2034, i64* %PC
  %2035 = inttoptr i64 %2032 to i32*
  %2036 = load i32, i32* %2035
  %2037 = zext i32 %2036 to i64
  store i64 %2037, i64* %RDI, align 8, !tbaa !2428
  %2038 = load i64, i64* %PC
  %2039 = sub i64 %2038, 1184
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 5
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 5
  store i64 %2043, i64* %PC
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2045 = load i64, i64* %2044, align 8, !tbaa !2428
  %2046 = add i64 %2045, -8
  %2047 = inttoptr i64 %2046 to i64*
  store i64 %2041, i64* %2047
  store i64 %2046, i64* %2044, align 8, !tbaa !2428
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2039, i64* %2048, align 8, !tbaa !2428
  %2049 = load i64, i64* %PC
  %2050 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2049, %struct.Memory* %MEMORY.0)
  %2051 = load i64, i64* %RBP
  %2052 = sub i64 %2051, 8
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 3
  store i64 %2059, i64* %PC
  store i64 %2057, i64* %RCX, align 8, !tbaa !2428
  %2060 = load i64, i64* %RCX
  %2061 = load i64, i64* %PC
  %2062 = add i64 %2061, 4
  store i64 %2062, i64* %PC
  %2063 = add i64 4, %2060
  store i64 %2063, i64* %RCX, align 8, !tbaa !2428
  %2064 = icmp ult i64 %2063, %2060
  %2065 = icmp ult i64 %2063, 4
  %2066 = or i1 %2064, %2065
  %2067 = zext i1 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2067, i8* %2068, align 1, !tbaa !2432
  %2069 = trunc i64 %2063 to i32
  %2070 = and i32 %2069, 255
  %2071 = call i32 @llvm.ctpop.i32(i32 %2070) #16
  %2072 = trunc i32 %2071 to i8
  %2073 = and i8 %2072, 1
  %2074 = xor i8 %2073, 1
  %2075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2074, i8* %2075, align 1, !tbaa !2446
  %2076 = xor i64 4, %2060
  %2077 = xor i64 %2076, %2063
  %2078 = lshr i64 %2077, 4
  %2079 = trunc i64 %2078 to i8
  %2080 = and i8 %2079, 1
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2080, i8* %2081, align 1, !tbaa !2447
  %2082 = icmp eq i64 %2063, 0
  %2083 = zext i1 %2082 to i8
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2083, i8* %2084, align 1, !tbaa !2448
  %2085 = lshr i64 %2063, 63
  %2086 = trunc i64 %2085 to i8
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2086, i8* %2087, align 1, !tbaa !2449
  %2088 = lshr i64 %2060, 63
  %2089 = xor i64 %2085, %2088
  %2090 = add nuw nsw i64 %2089, %2085
  %2091 = icmp eq i64 %2090, 2
  %2092 = zext i1 %2091 to i8
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2092, i8* %2093, align 1, !tbaa !2450
  %2094 = load i64, i64* %RBP
  %2095 = sub i64 %2094, 8
  %2096 = load i64, i64* %RCX
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 4
  store i64 %2098, i64* %PC
  %2099 = inttoptr i64 %2095 to i64*
  store i64 %2096, i64* %2099
  %2100 = load i64, i64* %RAX
  %2101 = load i64, i64* %PC
  %2102 = add i64 %2101, 3
  store i64 %2102, i64* %PC
  %2103 = inttoptr i64 %2100 to i32*
  %2104 = load i32, i32* %2103
  %2105 = sext i32 %2104 to i64
  store i64 %2105, i64* %RAX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX
  %2107 = mul i64 %2106, 8
  %2108 = add i64 %2107, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 8
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i64*
  %2112 = load i64, i64* %2111
  store i64 %2112, i64* %RAX, align 8, !tbaa !2428
  %2113 = load i64, i64* %RBP
  %2114 = sub i64 %2113, 40
  %2115 = load i64, i64* %RAX
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 4
  store i64 %2117, i64* %PC
  %2118 = inttoptr i64 %2114 to i64*
  store i64 %2115, i64* %2118
  %2119 = load i64, i64* %PC
  %2120 = sub i64 %2119, 1101
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 5
  store i64 %2122, i64* %PC
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2120, i64* %2123, align 8, !tbaa !2428
  br label %block_400586

; <label>:2124:                                   ; preds = %block_400586
  %2125 = load i64, i64* %PC
  %2126 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2125, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2126
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c80___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400c80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 2252
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_400cd6, label %block_400cb6

block_400cd6:                                     ; preds = %block_400cc0, %block_400c80
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_400c80 ], [ %387, %block_400cc0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400cb6:                                     ; preds = %block_400c80
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_400cc0

block_400cc0:                                     ; preds = %block_400cc0, %block_400cb6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_400cb6 ], [ %387, %block_400cc0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_400cc0, label %block_400cd6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400755(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400755

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 1234
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 1151
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_400755:                                     ; preds = %block_40074e, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_40074e ]
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  %720 = load i32, i32* %719
  %721 = zext i32 %720 to i64
  store i64 %721, i64* %RDI, align 8, !tbaa !2428
  %722 = load i64, i64* %PC
  %723 = sub i64 %722, 584
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 5
  store i64 %727, i64* %PC
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %729 = load i64, i64* %728, align 8, !tbaa !2428
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 %725, i64* %731
  store i64 %730, i64* %728, align 8, !tbaa !2428
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %723, i64* %732, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %733, %struct.Memory* %MEMORY.0)
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 8
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = load i64, i64* %RAX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 3
  store i64 %743, i64* %PC
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %744 = load i64, i64* %RCX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 4
  store i64 %746, i64* %PC
  %747 = add i64 4, %744
  store i64 %747, i64* %RCX, align 8, !tbaa !2428
  %748 = icmp ult i64 %747, %744
  %749 = icmp ult i64 %747, 4
  %750 = or i1 %748, %749
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %751, i8* %752, align 1, !tbaa !2432
  %753 = trunc i64 %747 to i32
  %754 = and i32 %753, 255
  %755 = call i32 @llvm.ctpop.i32(i32 %754) #16
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %758, i8* %759, align 1, !tbaa !2446
  %760 = xor i64 4, %744
  %761 = xor i64 %760, %747
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %764, i8* %765, align 1, !tbaa !2447
  %766 = icmp eq i64 %747, 0
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %767, i8* %768, align 1, !tbaa !2448
  %769 = lshr i64 %747, 63
  %770 = trunc i64 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %770, i8* %771, align 1, !tbaa !2449
  %772 = lshr i64 %744, 63
  %773 = xor i64 %769, %772
  %774 = add nuw nsw i64 %773, %769
  %775 = icmp eq i64 %774, 2
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %776, i8* %777, align 1, !tbaa !2450
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 8
  %780 = load i64, i64* %RCX
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 4
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %779 to i64*
  store i64 %780, i64* %783
  %784 = load i64, i64* %RAX
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 3
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787
  %789 = sext i32 %788 to i64
  store i64 %789, i64* %RAX, align 8, !tbaa !2428
  %790 = load i64, i64* %RAX
  %791 = mul i64 %790, 8
  %792 = add i64 %791, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 8
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to i64*
  %796 = load i64, i64* %795
  store i64 %796, i64* %RAX, align 8, !tbaa !2428
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 40
  %799 = load i64, i64* %RAX
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %798 to i64*
  store i64 %799, i64* %802
  %803 = load i64, i64* %PC
  %804 = sub i64 %803, 501
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 5
  store i64 %806, i64* %PC
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %804, i64* %807, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 12
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 7
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i32*
  store i32 5, i32* %812
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 3
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  %818 = load i32, i32* %817
  %819 = zext i32 %818 to i64
  store i64 %819, i64* %RDI, align 8, !tbaa !2428
  %820 = load i64, i64* %PC
  %821 = sub i64 %820, 334
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 5
  store i64 %825, i64* %PC
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %827 = load i64, i64* %826, align 8, !tbaa !2428
  %828 = add i64 %827, -8
  %829 = inttoptr i64 %828 to i64*
  store i64 %823, i64* %829
  store i64 %828, i64* %826, align 8, !tbaa !2428
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %821, i64* %830, align 8, !tbaa !2428
  %831 = load i64, i64* %PC
  %832 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %831, %struct.Memory* %MEMORY.1)
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 8
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 4
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i64*
  %838 = load i64, i64* %837
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RAX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 3
  store i64 %841, i64* %PC
  store i64 %839, i64* %RCX, align 8, !tbaa !2428
  %842 = load i64, i64* %RCX
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 4
  store i64 %844, i64* %PC
  %845 = add i64 4, %842
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = icmp ult i64 %845, %842
  %847 = icmp ult i64 %845, 4
  %848 = or i1 %846, %847
  %849 = zext i1 %848 to i8
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %849, i8* %850, align 1, !tbaa !2432
  %851 = trunc i64 %845 to i32
  %852 = and i32 %851, 255
  %853 = call i32 @llvm.ctpop.i32(i32 %852) #16
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = xor i8 %855, 1
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %856, i8* %857, align 1, !tbaa !2446
  %858 = xor i64 4, %842
  %859 = xor i64 %858, %845
  %860 = lshr i64 %859, 4
  %861 = trunc i64 %860 to i8
  %862 = and i8 %861, 1
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %862, i8* %863, align 1, !tbaa !2447
  %864 = icmp eq i64 %845, 0
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %865, i8* %866, align 1, !tbaa !2448
  %867 = lshr i64 %845, 63
  %868 = trunc i64 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %868, i8* %869, align 1, !tbaa !2449
  %870 = lshr i64 %842, 63
  %871 = xor i64 %867, %870
  %872 = add nuw nsw i64 %871, %867
  %873 = icmp eq i64 %872, 2
  %874 = zext i1 %873 to i8
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %874, i8* %875, align 1, !tbaa !2450
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 8
  %878 = load i64, i64* %RCX
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 4
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %877 to i64*
  store i64 %878, i64* %881
  %882 = load i64, i64* %RAX
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 3
  store i64 %884, i64* %PC
  %885 = inttoptr i64 %882 to i32*
  %886 = load i32, i32* %885
  %887 = sext i32 %886 to i64
  store i64 %887, i64* %RAX, align 8, !tbaa !2428
  %888 = load i64, i64* %RAX
  %889 = mul i64 %888, 8
  %890 = add i64 %889, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 8
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i64*
  %894 = load i64, i64* %893
  store i64 %894, i64* %RAX, align 8, !tbaa !2428
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 40
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 4
  store i64 %899, i64* %PC
  %900 = inttoptr i64 %896 to i64*
  store i64 %897, i64* %900
  %901 = load i64, i64* %PC
  %902 = sub i64 %901, 251
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 5
  store i64 %904, i64* %PC
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %902, i64* %905, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 12
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 7
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  store i32 28, i32* %910
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 3
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  %916 = load i32, i32* %915
  %917 = zext i32 %916 to i64
  store i64 %917, i64* %RDI, align 8, !tbaa !2428
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 1484
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 5
  store i64 %923, i64* %PC
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %925 = load i64, i64* %924, align 8, !tbaa !2428
  %926 = add i64 %925, -8
  %927 = inttoptr i64 %926 to i64*
  store i64 %921, i64* %927
  store i64 %926, i64* %924, align 8, !tbaa !2428
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %928, align 8, !tbaa !2428
  %929 = load i64, i64* %PC
  %930 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %929, %struct.Memory* %MEMORY.1)
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 8
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 4
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i64*
  %936 = load i64, i64* %935
  store i64 %936, i64* %RAX, align 8, !tbaa !2428
  %937 = load i64, i64* %RAX
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 3
  store i64 %939, i64* %PC
  store i64 %937, i64* %RCX, align 8, !tbaa !2428
  %940 = load i64, i64* %RCX
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = add i64 4, %940
  store i64 %943, i64* %RCX, align 8, !tbaa !2428
  %944 = icmp ult i64 %943, %940
  %945 = icmp ult i64 %943, 4
  %946 = or i1 %944, %945
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %947, i8* %948, align 1, !tbaa !2432
  %949 = trunc i64 %943 to i32
  %950 = and i32 %949, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2446
  %956 = xor i64 4, %940
  %957 = xor i64 %956, %943
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2447
  %962 = icmp eq i64 %943, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2448
  %965 = lshr i64 %943, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2449
  %968 = lshr i64 %940, 63
  %969 = xor i64 %965, %968
  %970 = add nuw nsw i64 %969, %965
  %971 = icmp eq i64 %970, 2
  %972 = zext i1 %971 to i8
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %972, i8* %973, align 1, !tbaa !2450
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 8
  %976 = load i64, i64* %RCX
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %975 to i64*
  store i64 %976, i64* %979
  %980 = load i64, i64* %RAX
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 3
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to i32*
  %984 = load i32, i32* %983
  %985 = sext i32 %984 to i64
  store i64 %985, i64* %RAX, align 8, !tbaa !2428
  %986 = load i64, i64* %RAX
  %987 = mul i64 %986, 8
  %988 = add i64 %987, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 8
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 40
  %995 = load i64, i64* %RAX
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 4
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %994 to i64*
  store i64 %995, i64* %998
  %999 = load i64, i64* %PC
  %1000 = sub i64 %999, 1401
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 5
  store i64 %1002, i64* %PC
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1000, i64* %1003, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 12
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 7
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i32*
  store i32 10, i32* %1008
  br label %block_400755

block_400848:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 15, i32* %1013
  %1014 = load i64, i64* %PC
  %1015 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %1014, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1015

block_400942:                                     ; preds = %block_400586
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 7
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  store i32 20, i32* %1020
  %1021 = load i64, i64* %PC
  %1022 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1021, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1022

block_4005be:                                     ; preds = %block_400586
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 12
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 7
  store i64 %1026, i64* %PC
  %1027 = inttoptr i64 %1024 to i32*
  store i32 2, i32* %1027
  %1028 = load i64, i64* %PC
  %1029 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1028, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1029

block_4005f0:                                     ; preds = %block_400586
  %1030 = load i64, i64* %RBP
  %1031 = sub i64 %1030, 12
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 7
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  store i32 3, i32* %1034
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 12
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 3
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = zext i32 %1040 to i64
  store i64 %1041, i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = sub i64 %1042, 234
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 5
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 5
  store i64 %1047, i64* %PC
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1049 = load i64, i64* %1048, align 8, !tbaa !2428
  %1050 = add i64 %1049, -8
  %1051 = inttoptr i64 %1050 to i64*
  store i64 %1045, i64* %1051
  store i64 %1050, i64* %1048, align 8, !tbaa !2428
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1043, i64* %1052, align 8, !tbaa !2428
  %1053 = load i64, i64* %PC
  %1054 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1053, %struct.Memory* %MEMORY.1)
  %1055 = load i64, i64* %RBP
  %1056 = sub i64 %1055, 8
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 4
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1056 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %RAX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RAX
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1064 = load i64, i64* %RCX
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = add i64 4, %1064
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = icmp ult i64 %1067, %1064
  %1069 = icmp ult i64 %1067, 4
  %1070 = or i1 %1068, %1069
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1071, i8* %1072, align 1, !tbaa !2432
  %1073 = trunc i64 %1067 to i32
  %1074 = and i32 %1073, 255
  %1075 = call i32 @llvm.ctpop.i32(i32 %1074) #16
  %1076 = trunc i32 %1075 to i8
  %1077 = and i8 %1076, 1
  %1078 = xor i8 %1077, 1
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1078, i8* %1079, align 1, !tbaa !2446
  %1080 = xor i64 4, %1064
  %1081 = xor i64 %1080, %1067
  %1082 = lshr i64 %1081, 4
  %1083 = trunc i64 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1084, i8* %1085, align 1, !tbaa !2447
  %1086 = icmp eq i64 %1067, 0
  %1087 = zext i1 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1087, i8* %1088, align 1, !tbaa !2448
  %1089 = lshr i64 %1067, 63
  %1090 = trunc i64 %1089 to i8
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1090, i8* %1091, align 1, !tbaa !2449
  %1092 = lshr i64 %1064, 63
  %1093 = xor i64 %1089, %1092
  %1094 = add nuw nsw i64 %1093, %1089
  %1095 = icmp eq i64 %1094, 2
  %1096 = zext i1 %1095 to i8
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1096, i8* %1097, align 1, !tbaa !2450
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 8
  %1100 = load i64, i64* %RCX
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1099 to i64*
  store i64 %1100, i64* %1103
  %1104 = load i64, i64* %RAX
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 3
  store i64 %1106, i64* %PC
  %1107 = inttoptr i64 %1104 to i32*
  %1108 = load i32, i32* %1107
  %1109 = sext i32 %1108 to i64
  store i64 %1109, i64* %RAX, align 8, !tbaa !2428
  %1110 = load i64, i64* %RAX
  %1111 = mul i64 %1110, 8
  %1112 = add i64 %1111, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 8
  store i64 %1114, i64* %PC
  %1115 = inttoptr i64 %1112 to i64*
  %1116 = load i64, i64* %1115
  store i64 %1116, i64* %RAX, align 8, !tbaa !2428
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 40
  %1119 = load i64, i64* %RAX
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 4
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1118 to i64*
  store i64 %1119, i64* %1122
  %1123 = load i64, i64* %PC
  %1124 = sub i64 %1123, 151
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1124, i64* %1127, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 12
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 7
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i32*
  store i32 25, i32* %1132
  %1133 = load i64, i64* %PC
  %1134 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1133, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1134

block_4006b8:                                     ; preds = %block_400586
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 12
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 7
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i32*
  store i32 7, i32* %1139
  %1140 = load i64, i64* %RBP
  %1141 = sub i64 %1140, 12
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 3
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i32*
  %1145 = load i32, i32* %1144
  %1146 = zext i32 %1145 to i64
  store i64 %1146, i64* %RDI, align 8, !tbaa !2428
  %1147 = load i64, i64* %PC
  %1148 = sub i64 %1147, 434
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 5
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1154 = load i64, i64* %1153, align 8, !tbaa !2428
  %1155 = add i64 %1154, -8
  %1156 = inttoptr i64 %1155 to i64*
  store i64 %1150, i64* %1156
  store i64 %1155, i64* %1153, align 8, !tbaa !2428
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1148, i64* %1157, align 8, !tbaa !2428
  %1158 = load i64, i64* %PC
  %1159 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1158, %struct.Memory* %MEMORY.1)
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 8
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 4
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = load i64, i64* %RAX
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 3
  store i64 %1168, i64* %PC
  store i64 %1166, i64* %RCX, align 8, !tbaa !2428
  %1169 = load i64, i64* %RCX
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 4
  store i64 %1171, i64* %PC
  %1172 = add i64 4, %1169
  store i64 %1172, i64* %RCX, align 8, !tbaa !2428
  %1173 = icmp ult i64 %1172, %1169
  %1174 = icmp ult i64 %1172, 4
  %1175 = or i1 %1173, %1174
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1176, i8* %1177, align 1, !tbaa !2432
  %1178 = trunc i64 %1172 to i32
  %1179 = and i32 %1178, 255
  %1180 = call i32 @llvm.ctpop.i32(i32 %1179) #16
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = xor i8 %1182, 1
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1183, i8* %1184, align 1, !tbaa !2446
  %1185 = xor i64 4, %1169
  %1186 = xor i64 %1185, %1172
  %1187 = lshr i64 %1186, 4
  %1188 = trunc i64 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1189, i8* %1190, align 1, !tbaa !2447
  %1191 = icmp eq i64 %1172, 0
  %1192 = zext i1 %1191 to i8
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1192, i8* %1193, align 1, !tbaa !2448
  %1194 = lshr i64 %1172, 63
  %1195 = trunc i64 %1194 to i8
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1195, i8* %1196, align 1, !tbaa !2449
  %1197 = lshr i64 %1169, 63
  %1198 = xor i64 %1194, %1197
  %1199 = add nuw nsw i64 %1198, %1194
  %1200 = icmp eq i64 %1199, 2
  %1201 = zext i1 %1200 to i8
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1201, i8* %1202, align 1, !tbaa !2450
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 8
  %1205 = load i64, i64* %RCX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1204 to i64*
  store i64 %1205, i64* %1208
  %1209 = load i64, i64* %RAX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = sext i32 %1213 to i64
  store i64 %1214, i64* %RAX, align 8, !tbaa !2428
  %1215 = load i64, i64* %RAX
  %1216 = mul i64 %1215, 8
  %1217 = add i64 %1216, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 8
  store i64 %1219, i64* %PC
  %1220 = inttoptr i64 %1217 to i64*
  %1221 = load i64, i64* %1220
  store i64 %1221, i64* %RAX, align 8, !tbaa !2428
  %1222 = load i64, i64* %RBP
  %1223 = sub i64 %1222, 40
  %1224 = load i64, i64* %RAX
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 4
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1223 to i64*
  store i64 %1224, i64* %1227
  %1228 = load i64, i64* %PC
  %1229 = sub i64 %1228, 351
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  store i64 %1231, i64* %PC
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1229, i64* %1232, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 12
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 7
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1234 to i32*
  store i32 30, i32* %1237
  %1238 = load i64, i64* %RBP
  %1239 = sub i64 %1238, 12
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 3
  store i64 %1241, i64* %PC
  %1242 = inttoptr i64 %1239 to i32*
  %1243 = load i32, i32* %1242
  %1244 = zext i32 %1243 to i64
  store i64 %1244, i64* %RDI, align 8, !tbaa !2428
  %1245 = load i64, i64* %PC
  %1246 = sub i64 %1245, 1584
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 5
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 5
  store i64 %1250, i64* %PC
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1252 = load i64, i64* %1251, align 8, !tbaa !2428
  %1253 = add i64 %1252, -8
  %1254 = inttoptr i64 %1253 to i64*
  store i64 %1248, i64* %1254
  store i64 %1253, i64* %1251, align 8, !tbaa !2428
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1246, i64* %1255, align 8, !tbaa !2428
  %1256 = load i64, i64* %PC
  %1257 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1256, %struct.Memory* %MEMORY.1)
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 8
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 4
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1259 to i64*
  %1263 = load i64, i64* %1262
  store i64 %1263, i64* %RAX, align 8, !tbaa !2428
  %1264 = load i64, i64* %RAX
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC
  store i64 %1264, i64* %RCX, align 8, !tbaa !2428
  %1267 = load i64, i64* %RCX
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = add i64 4, %1267
  store i64 %1270, i64* %RCX, align 8, !tbaa !2428
  %1271 = icmp ult i64 %1270, %1267
  %1272 = icmp ult i64 %1270, 4
  %1273 = or i1 %1271, %1272
  %1274 = zext i1 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1274, i8* %1275, align 1, !tbaa !2432
  %1276 = trunc i64 %1270 to i32
  %1277 = and i32 %1276, 255
  %1278 = call i32 @llvm.ctpop.i32(i32 %1277) #16
  %1279 = trunc i32 %1278 to i8
  %1280 = and i8 %1279, 1
  %1281 = xor i8 %1280, 1
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1281, i8* %1282, align 1, !tbaa !2446
  %1283 = xor i64 4, %1267
  %1284 = xor i64 %1283, %1270
  %1285 = lshr i64 %1284, 4
  %1286 = trunc i64 %1285 to i8
  %1287 = and i8 %1286, 1
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1287, i8* %1288, align 1, !tbaa !2447
  %1289 = icmp eq i64 %1270, 0
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1290, i8* %1291, align 1, !tbaa !2448
  %1292 = lshr i64 %1270, 63
  %1293 = trunc i64 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1293, i8* %1294, align 1, !tbaa !2449
  %1295 = lshr i64 %1267, 63
  %1296 = xor i64 %1292, %1295
  %1297 = add nuw nsw i64 %1296, %1292
  %1298 = icmp eq i64 %1297, 2
  %1299 = zext i1 %1298 to i8
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1299, i8* %1300, align 1, !tbaa !2450
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 8
  %1303 = load i64, i64* %RCX
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 4
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1302 to i64*
  store i64 %1303, i64* %1306
  %1307 = load i64, i64* %RAX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 3
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310
  %1312 = sext i32 %1311 to i64
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = load i64, i64* %RAX
  %1314 = mul i64 %1313, 8
  %1315 = add i64 %1314, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 8
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i64*
  %1319 = load i64, i64* %1318
  store i64 %1319, i64* %RAX, align 8, !tbaa !2428
  %1320 = load i64, i64* %RBP
  %1321 = sub i64 %1320, 40
  %1322 = load i64, i64* %RAX
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 4
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1321 to i64*
  store i64 %1322, i64* %1325
  %1326 = load i64, i64* %PC
  %1327 = sub i64 %1326, 1501
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  store i64 %1329, i64* %PC
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1327, i64* %1330, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 12
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 7
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to i32*
  store i32 0, i32* %1335
  %1336 = load i64, i64* %RSP
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 4
  store i64 %1338, i64* %PC
  %1339 = add i64 48, %1336
  store i64 %1339, i64* %RSP, align 8, !tbaa !2428
  %1340 = icmp ult i64 %1339, %1336
  %1341 = icmp ult i64 %1339, 48
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1343, i8* %1344, align 1, !tbaa !2432
  %1345 = trunc i64 %1339 to i32
  %1346 = and i32 %1345, 255
  %1347 = call i32 @llvm.ctpop.i32(i32 %1346) #16
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = xor i8 %1349, 1
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1350, i8* %1351, align 1, !tbaa !2446
  %1352 = xor i64 48, %1336
  %1353 = xor i64 %1352, %1339
  %1354 = lshr i64 %1353, 4
  %1355 = trunc i64 %1354 to i8
  %1356 = and i8 %1355, 1
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1356, i8* %1357, align 1, !tbaa !2447
  %1358 = icmp eq i64 %1339, 0
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1359, i8* %1360, align 1, !tbaa !2448
  %1361 = lshr i64 %1339, 63
  %1362 = trunc i64 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1362, i8* %1363, align 1, !tbaa !2449
  %1364 = lshr i64 %1336, 63
  %1365 = xor i64 %1361, %1364
  %1366 = add nuw nsw i64 %1365, %1361
  %1367 = icmp eq i64 %1366, 2
  %1368 = zext i1 %1367 to i8
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1368, i8* %1369, align 1, !tbaa !2450
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 1
  store i64 %1371, i64* %PC
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1373 = load i64, i64* %1372, align 8, !tbaa !2428
  %1374 = add i64 %1373, 8
  %1375 = inttoptr i64 %1373 to i64*
  %1376 = load i64, i64* %1375
  store i64 %1376, i64* %RBP, align 8, !tbaa !2428
  store i64 %1374, i64* %1372, align 8, !tbaa !2428
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 1
  store i64 %1378, i64* %PC
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1381 = load i64, i64* %1380, align 8, !tbaa !2428
  %1382 = inttoptr i64 %1381 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %1379, align 8, !tbaa !2428
  %1384 = add i64 %1381, 8
  store i64 %1384, i64* %1380, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4007b2:                                     ; preds = %block_400586
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 12
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 7
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i32*
  store i32 12, i32* %1389
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 12
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = zext i32 %1395 to i64
  store i64 %1396, i64* %RDI, align 8, !tbaa !2428
  %1397 = load i64, i64* %PC
  %1398 = sub i64 %1397, 684
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 5
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1404 = load i64, i64* %1403, align 8, !tbaa !2428
  %1405 = add i64 %1404, -8
  %1406 = inttoptr i64 %1405 to i64*
  store i64 %1400, i64* %1406
  store i64 %1405, i64* %1403, align 8, !tbaa !2428
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1398, i64* %1407, align 8, !tbaa !2428
  %1408 = load i64, i64* %PC
  %1409 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1408, %struct.Memory* %MEMORY.1)
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 8
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i64*
  %1415 = load i64, i64* %1414
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = load i64, i64* %RAX
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  store i64 %1416, i64* %RCX, align 8, !tbaa !2428
  %1419 = load i64, i64* %RCX
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 4
  store i64 %1421, i64* %PC
  %1422 = add i64 4, %1419
  store i64 %1422, i64* %RCX, align 8, !tbaa !2428
  %1423 = icmp ult i64 %1422, %1419
  %1424 = icmp ult i64 %1422, 4
  %1425 = or i1 %1423, %1424
  %1426 = zext i1 %1425 to i8
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1426, i8* %1427, align 1, !tbaa !2432
  %1428 = trunc i64 %1422 to i32
  %1429 = and i32 %1428, 255
  %1430 = call i32 @llvm.ctpop.i32(i32 %1429) #16
  %1431 = trunc i32 %1430 to i8
  %1432 = and i8 %1431, 1
  %1433 = xor i8 %1432, 1
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1433, i8* %1434, align 1, !tbaa !2446
  %1435 = xor i64 4, %1419
  %1436 = xor i64 %1435, %1422
  %1437 = lshr i64 %1436, 4
  %1438 = trunc i64 %1437 to i8
  %1439 = and i8 %1438, 1
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1439, i8* %1440, align 1, !tbaa !2447
  %1441 = icmp eq i64 %1422, 0
  %1442 = zext i1 %1441 to i8
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1442, i8* %1443, align 1, !tbaa !2448
  %1444 = lshr i64 %1422, 63
  %1445 = trunc i64 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1445, i8* %1446, align 1, !tbaa !2449
  %1447 = lshr i64 %1419, 63
  %1448 = xor i64 %1444, %1447
  %1449 = add nuw nsw i64 %1448, %1444
  %1450 = icmp eq i64 %1449, 2
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1451, i8* %1452, align 1, !tbaa !2450
  %1453 = load i64, i64* %RBP
  %1454 = sub i64 %1453, 8
  %1455 = load i64, i64* %RCX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 4
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1454 to i64*
  store i64 %1455, i64* %1458
  %1459 = load i64, i64* %RAX
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 3
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1459 to i32*
  %1463 = load i32, i32* %1462
  %1464 = sext i32 %1463 to i64
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RAX
  %1466 = mul i64 %1465, 8
  %1467 = add i64 %1466, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 8
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1467 to i64*
  %1471 = load i64, i64* %1470
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 40
  %1474 = load i64, i64* %RAX
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 4
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1473 to i64*
  store i64 %1474, i64* %1477
  %1478 = load i64, i64* %PC
  %1479 = sub i64 %1478, 601
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 5
  store i64 %1481, i64* %PC
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1479, i64* %1482, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 12
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 7
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  store i32 17, i32* %1487
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 12
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 3
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = zext i32 %1493 to i64
  store i64 %1494, i64* %RDI, align 8, !tbaa !2428
  %1495 = load i64, i64* %PC
  %1496 = sub i64 %1495, 934
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 5
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 5
  store i64 %1500, i64* %PC
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1502 = load i64, i64* %1501, align 8, !tbaa !2428
  %1503 = add i64 %1502, -8
  %1504 = inttoptr i64 %1503 to i64*
  store i64 %1498, i64* %1504
  store i64 %1503, i64* %1501, align 8, !tbaa !2428
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1496, i64* %1505, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1506, %struct.Memory* %MEMORY.1)
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 8
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 4
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i64*
  %1513 = load i64, i64* %1512
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = load i64, i64* %RAX
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  store i64 %1514, i64* %RCX, align 8, !tbaa !2428
  %1517 = load i64, i64* %RCX
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 4
  store i64 %1519, i64* %PC
  %1520 = add i64 4, %1517
  store i64 %1520, i64* %RCX, align 8, !tbaa !2428
  %1521 = icmp ult i64 %1520, %1517
  %1522 = icmp ult i64 %1520, 4
  %1523 = or i1 %1521, %1522
  %1524 = zext i1 %1523 to i8
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1524, i8* %1525, align 1, !tbaa !2432
  %1526 = trunc i64 %1520 to i32
  %1527 = and i32 %1526, 255
  %1528 = call i32 @llvm.ctpop.i32(i32 %1527) #16
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = xor i8 %1530, 1
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1531, i8* %1532, align 1, !tbaa !2446
  %1533 = xor i64 4, %1517
  %1534 = xor i64 %1533, %1520
  %1535 = lshr i64 %1534, 4
  %1536 = trunc i64 %1535 to i8
  %1537 = and i8 %1536, 1
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1537, i8* %1538, align 1, !tbaa !2447
  %1539 = icmp eq i64 %1520, 0
  %1540 = zext i1 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1540, i8* %1541, align 1, !tbaa !2448
  %1542 = lshr i64 %1520, 63
  %1543 = trunc i64 %1542 to i8
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1543, i8* %1544, align 1, !tbaa !2449
  %1545 = lshr i64 %1517, 63
  %1546 = xor i64 %1542, %1545
  %1547 = add nuw nsw i64 %1546, %1542
  %1548 = icmp eq i64 %1547, 2
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1549, i8* %1550, align 1, !tbaa !2450
  %1551 = load i64, i64* %RBP
  %1552 = sub i64 %1551, 8
  %1553 = load i64, i64* %RCX
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 4
  store i64 %1555, i64* %PC
  %1556 = inttoptr i64 %1552 to i64*
  store i64 %1553, i64* %1556
  %1557 = load i64, i64* %RAX
  %1558 = load i64, i64* %PC
  %1559 = add i64 %1558, 3
  store i64 %1559, i64* %PC
  %1560 = inttoptr i64 %1557 to i32*
  %1561 = load i32, i32* %1560
  %1562 = sext i32 %1561 to i64
  store i64 %1562, i64* %RAX, align 8, !tbaa !2428
  %1563 = load i64, i64* %RAX
  %1564 = mul i64 %1563, 8
  %1565 = add i64 %1564, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 8
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1565 to i64*
  %1569 = load i64, i64* %1568
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = load i64, i64* %RBP
  %1571 = sub i64 %1570, 40
  %1572 = load i64, i64* %RAX
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 4
  store i64 %1574, i64* %PC
  %1575 = inttoptr i64 %1571 to i64*
  store i64 %1572, i64* %1575
  %1576 = load i64, i64* %PC
  %1577 = sub i64 %1576, 851
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 5
  store i64 %1579, i64* %PC
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1577, i64* %1580, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_400ad2, %block_400654, %block_400755, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %734, %block_400755 ], [ %1616, %block_400622 ], [ %1507, %block_4008ac ], [ %1409, %block_4007b2 ], [ %1257, %block_400b36 ], [ %1159, %block_4006b8 ], [ %151, %block_400a6e ], [ %1054, %block_4005f0 ], [ %53, %block_400974 ], [ %641, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %832, %block_400654 ], [ %930, %block_400ad2 ], [ %1714, %block_400aa0 ], [ %1812, %block_40071c ], [ %1910, %block_400816 ], [ %2008, %block_400910 ], [ %2141, %block_4009a6 ]
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 4
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i64*
  %1586 = load i64, i64* %1585
  store i64 %1586, i64* %RAX, align 8, !tbaa !2428
  %1587 = load i64, i64* %RAX
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 2
  store i64 %1589, i64* %PC
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1587, i64* %1590, align 8, !tbaa !2428
  %1591 = load i64, i64* %PC
  switch i64 %1591, label %2215 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 12
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 7
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i32*
  store i32 4, i32* %1596
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = sub i64 %1604, 284
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 5
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1611 = load i64, i64* %1610, align 8, !tbaa !2428
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1607, i64* %1613
  store i64 %1612, i64* %1610, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1605, i64* %1614, align 8, !tbaa !2428
  %1615 = load i64, i64* %PC
  %1616 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1615, %struct.Memory* %MEMORY.1)
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 8
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RAX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 3
  store i64 %1625, i64* %PC
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RCX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 4
  store i64 %1628, i64* %PC
  %1629 = add i64 4, %1626
  store i64 %1629, i64* %RCX, align 8, !tbaa !2428
  %1630 = icmp ult i64 %1629, %1626
  %1631 = icmp ult i64 %1629, 4
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1634, align 1, !tbaa !2432
  %1635 = trunc i64 %1629 to i32
  %1636 = and i32 %1635, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #16
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 4, %1626
  %1643 = xor i64 %1642, %1629
  %1644 = lshr i64 %1643, 4
  %1645 = trunc i64 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1646, i8* %1647, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1629, 0
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = lshr i64 %1629, 63
  %1652 = trunc i64 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1652, i8* %1653, align 1, !tbaa !2449
  %1654 = lshr i64 %1626, 63
  %1655 = xor i64 %1651, %1654
  %1656 = add nuw nsw i64 %1655, %1651
  %1657 = icmp eq i64 %1656, 2
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 8
  %1662 = load i64, i64* %RCX
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1661 to i64*
  store i64 %1662, i64* %1665
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RAX
  %1673 = mul i64 %1672, 8
  %1674 = add i64 %1673, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 8
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %PC
  %1686 = sub i64 %1685, 201
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1686, i64* %1689, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 12
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 27, i32* %1694
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDI, align 8, !tbaa !2428
  %1702 = load i64, i64* %PC
  %1703 = sub i64 %1702, 1434
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  store i64 %1707, i64* %PC
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1709 = load i64, i64* %1708, align 8, !tbaa !2428
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1705, i64* %1711
  store i64 %1710, i64* %1708, align 8, !tbaa !2428
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1703, i64* %1712, align 8, !tbaa !2428
  %1713 = load i64, i64* %PC
  %1714 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1713, %struct.Memory* %MEMORY.1)
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 8
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = load i64, i64* %RAX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 4
  store i64 %1726, i64* %PC
  %1727 = add i64 4, %1724
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = icmp ult i64 %1727, %1724
  %1729 = icmp ult i64 %1727, 4
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1731, i8* %1732, align 1, !tbaa !2432
  %1733 = trunc i64 %1727 to i32
  %1734 = and i32 %1733, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #16
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2446
  %1740 = xor i64 4, %1724
  %1741 = xor i64 %1740, %1727
  %1742 = lshr i64 %1741, 4
  %1743 = trunc i64 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1744, i8* %1745, align 1, !tbaa !2447
  %1746 = icmp eq i64 %1727, 0
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1747, i8* %1748, align 1, !tbaa !2448
  %1749 = lshr i64 %1727, 63
  %1750 = trunc i64 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1750, i8* %1751, align 1, !tbaa !2449
  %1752 = lshr i64 %1724, 63
  %1753 = xor i64 %1749, %1752
  %1754 = add nuw nsw i64 %1753, %1749
  %1755 = icmp eq i64 %1754, 2
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1756, i8* %1757, align 1, !tbaa !2450
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 8
  %1760 = load i64, i64* %RCX
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1759 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %RAX
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 3
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RAX
  %1771 = mul i64 %1770, 8
  %1772 = add i64 %1771, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 40
  %1779 = load i64, i64* %RAX
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1778 to i64*
  store i64 %1779, i64* %1782
  %1783 = load i64, i64* %PC
  %1784 = sub i64 %1783, 1351
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1784, i64* %1787, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 7
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i32*
  store i32 9, i32* %1792
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %PC
  %1801 = sub i64 %1800, 534
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 5
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1807 = load i64, i64* %1806, align 8, !tbaa !2428
  %1808 = add i64 %1807, -8
  %1809 = inttoptr i64 %1808 to i64*
  store i64 %1803, i64* %1809
  store i64 %1808, i64* %1806, align 8, !tbaa !2428
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1801, i64* %1810, align 8, !tbaa !2428
  %1811 = load i64, i64* %PC
  %1812 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1811, %struct.Memory* %MEMORY.1)
  %1813 = load i64, i64* %RBP
  %1814 = sub i64 %1813, 8
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1814 to i64*
  %1818 = load i64, i64* %1817
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  store i64 %1819, i64* %RCX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RCX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = add i64 4, %1822
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i64 %1825, %1822
  %1827 = icmp ult i64 %1825, 4
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2432
  %1831 = trunc i64 %1825 to i32
  %1832 = and i32 %1831, 255
  %1833 = call i32 @llvm.ctpop.i32(i32 %1832) #16
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1836, i8* %1837, align 1, !tbaa !2446
  %1838 = xor i64 4, %1822
  %1839 = xor i64 %1838, %1825
  %1840 = lshr i64 %1839, 4
  %1841 = trunc i64 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = icmp eq i64 %1825, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1825, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = lshr i64 %1822, 63
  %1851 = xor i64 %1847, %1850
  %1852 = add nuw nsw i64 %1851, %1847
  %1853 = icmp eq i64 %1852, 2
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = sext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RAX
  %1869 = mul i64 %1868, 8
  %1870 = add i64 %1869, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 8
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 40
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1876 to i64*
  store i64 %1877, i64* %1880
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 451
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  store i64 %1884, i64* %PC
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1885, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 12
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  store i32 14, i32* %1890
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 12
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RDI, align 8, !tbaa !2428
  %1898 = load i64, i64* %PC
  %1899 = sub i64 %1898, 784
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1905 = load i64, i64* %1904, align 8, !tbaa !2428
  %1906 = add i64 %1905, -8
  %1907 = inttoptr i64 %1906 to i64*
  store i64 %1901, i64* %1907
  store i64 %1906, i64* %1904, align 8, !tbaa !2428
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1908, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1909, %struct.Memory* %MEMORY.1)
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 8
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i64*
  %1916 = load i64, i64* %1915
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RCX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 4
  store i64 %1922, i64* %PC
  %1923 = add i64 4, %1920
  store i64 %1923, i64* %RCX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1920
  %1925 = icmp ult i64 %1923, 4
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i64 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = xor i64 4, %1920
  %1937 = xor i64 %1936, %1923
  %1938 = lshr i64 %1937, 4
  %1939 = trunc i64 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1940, i8* %1941, align 1, !tbaa !2447
  %1942 = icmp eq i64 %1923, 0
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1943, i8* %1944, align 1, !tbaa !2448
  %1945 = lshr i64 %1923, 63
  %1946 = trunc i64 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1946, i8* %1947, align 1, !tbaa !2449
  %1948 = lshr i64 %1920, 63
  %1949 = xor i64 %1945, %1948
  %1950 = add nuw nsw i64 %1949, %1945
  %1951 = icmp eq i64 %1950, 2
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1952, i8* %1953, align 1, !tbaa !2450
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 8
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 4
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RAX
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 3
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  %1964 = load i32, i32* %1963
  %1965 = sext i32 %1964 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 8
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 40
  %1975 = load i64, i64* %RAX
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 4
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1974 to i64*
  store i64 %1975, i64* %1978
  %1979 = load i64, i64* %PC
  %1980 = sub i64 %1979, 701
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1980, i64* %1983, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 12
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 7
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i32*
  store i32 19, i32* %1988
  %1989 = load i64, i64* %RBP
  %1990 = sub i64 %1989, 12
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  %1993 = inttoptr i64 %1990 to i32*
  %1994 = load i32, i32* %1993
  %1995 = zext i32 %1994 to i64
  store i64 %1995, i64* %RDI, align 8, !tbaa !2428
  %1996 = load i64, i64* %PC
  %1997 = sub i64 %1996, 1034
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 5
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 5
  store i64 %2001, i64* %PC
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2003 = load i64, i64* %2002, align 8, !tbaa !2428
  %2004 = add i64 %2003, -8
  %2005 = inttoptr i64 %2004 to i64*
  store i64 %1999, i64* %2005
  store i64 %2004, i64* %2002, align 8, !tbaa !2428
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1997, i64* %2006, align 8, !tbaa !2428
  %2007 = load i64, i64* %PC
  %2008 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2007, %struct.Memory* %MEMORY.1)
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 8
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 4
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2010 to i64*
  %2014 = load i64, i64* %2013
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %2015 = load i64, i64* %RAX
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 3
  store i64 %2017, i64* %PC
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2018 = load i64, i64* %RCX
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 4
  store i64 %2020, i64* %PC
  %2021 = add i64 4, %2018
  store i64 %2021, i64* %RCX, align 8, !tbaa !2428
  %2022 = icmp ult i64 %2021, %2018
  %2023 = icmp ult i64 %2021, 4
  %2024 = or i1 %2022, %2023
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2025, i8* %2026, align 1, !tbaa !2432
  %2027 = trunc i64 %2021 to i32
  %2028 = and i32 %2027, 255
  %2029 = call i32 @llvm.ctpop.i32(i32 %2028) #16
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = xor i8 %2031, 1
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2032, i8* %2033, align 1, !tbaa !2446
  %2034 = xor i64 4, %2018
  %2035 = xor i64 %2034, %2021
  %2036 = lshr i64 %2035, 4
  %2037 = trunc i64 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2038, i8* %2039, align 1, !tbaa !2447
  %2040 = icmp eq i64 %2021, 0
  %2041 = zext i1 %2040 to i8
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2041, i8* %2042, align 1, !tbaa !2448
  %2043 = lshr i64 %2021, 63
  %2044 = trunc i64 %2043 to i8
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2044, i8* %2045, align 1, !tbaa !2449
  %2046 = lshr i64 %2018, 63
  %2047 = xor i64 %2043, %2046
  %2048 = add nuw nsw i64 %2047, %2043
  %2049 = icmp eq i64 %2048, 2
  %2050 = zext i1 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2050, i8* %2051, align 1, !tbaa !2450
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 8
  %2054 = load i64, i64* %RCX
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 4
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2053 to i64*
  store i64 %2054, i64* %2057
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i32*
  %2062 = load i32, i32* %2061
  %2063 = sext i32 %2062 to i64
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RAX
  %2065 = mul i64 %2064, 8
  %2066 = add i64 %2065, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 8
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2066 to i64*
  %2070 = load i64, i64* %2069
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 40
  %2073 = load i64, i64* %RAX
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 4
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2072 to i64*
  store i64 %2073, i64* %2076
  %2077 = load i64, i64* %PC
  %2078 = sub i64 %2077, 951
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 5
  store i64 %2080, i64* %PC
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2078, i64* %2081, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2082 = load i64, i64* %RBP
  %2083 = sub i64 %2082, 12
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 7
  store i64 %2085, i64* %PC
  %2086 = inttoptr i64 %2083 to i32*
  store i32 1, i32* %2086
  %2087 = load i64, i64* %PC
  %2088 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %2087, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2088

block_400a0a:                                     ; preds = %block_400586
  %2089 = load i64, i64* %RBP
  %2090 = sub i64 %2089, 12
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 7
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  store i32 24, i32* %2093
  %2094 = load i64, i64* %PC
  %2095 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %2094, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2095

block_400686:                                     ; preds = %block_400586
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 12
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 7
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i32*
  store i32 6, i32* %2100
  %2101 = load i64, i64* %PC
  %2102 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %2101, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2102

block_400b04:                                     ; preds = %block_400586
  %2103 = load i64, i64* %RBP
  %2104 = sub i64 %2103, 12
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 7
  store i64 %2106, i64* %PC
  %2107 = inttoptr i64 %2104 to i32*
  store i32 29, i32* %2107
  %2108 = load i64, i64* %PC
  %2109 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2108, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2109

block_400780:                                     ; preds = %block_400586
  %2110 = load i64, i64* %RBP
  %2111 = sub i64 %2110, 12
  %2112 = load i64, i64* %PC
  %2113 = add i64 %2112, 7
  store i64 %2113, i64* %PC
  %2114 = inttoptr i64 %2111 to i32*
  store i32 11, i32* %2114
  %2115 = load i64, i64* %PC
  %2116 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2115, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2116

block_4009a6:                                     ; preds = %block_400586
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 12
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 7
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to i32*
  store i32 22, i32* %2121
  %2122 = load i64, i64* %RBP
  %2123 = sub i64 %2122, 12
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 3
  store i64 %2125, i64* %PC
  %2126 = inttoptr i64 %2123 to i32*
  %2127 = load i32, i32* %2126
  %2128 = zext i32 %2127 to i64
  store i64 %2128, i64* %RDI, align 8, !tbaa !2428
  %2129 = load i64, i64* %PC
  %2130 = sub i64 %2129, 1184
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 5
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 5
  store i64 %2134, i64* %PC
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2136 = load i64, i64* %2135, align 8, !tbaa !2428
  %2137 = add i64 %2136, -8
  %2138 = inttoptr i64 %2137 to i64*
  store i64 %2132, i64* %2138
  store i64 %2137, i64* %2135, align 8, !tbaa !2428
  %2139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2130, i64* %2139, align 8, !tbaa !2428
  %2140 = load i64, i64* %PC
  %2141 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2140, %struct.Memory* %MEMORY.1)
  %2142 = load i64, i64* %RBP
  %2143 = sub i64 %2142, 8
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 4
  store i64 %2145, i64* %PC
  %2146 = inttoptr i64 %2143 to i64*
  %2147 = load i64, i64* %2146
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RAX
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 3
  store i64 %2150, i64* %PC
  store i64 %2148, i64* %RCX, align 8, !tbaa !2428
  %2151 = load i64, i64* %RCX
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 4
  store i64 %2153, i64* %PC
  %2154 = add i64 4, %2151
  store i64 %2154, i64* %RCX, align 8, !tbaa !2428
  %2155 = icmp ult i64 %2154, %2151
  %2156 = icmp ult i64 %2154, 4
  %2157 = or i1 %2155, %2156
  %2158 = zext i1 %2157 to i8
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2158, i8* %2159, align 1, !tbaa !2432
  %2160 = trunc i64 %2154 to i32
  %2161 = and i32 %2160, 255
  %2162 = call i32 @llvm.ctpop.i32(i32 %2161) #16
  %2163 = trunc i32 %2162 to i8
  %2164 = and i8 %2163, 1
  %2165 = xor i8 %2164, 1
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2165, i8* %2166, align 1, !tbaa !2446
  %2167 = xor i64 4, %2151
  %2168 = xor i64 %2167, %2154
  %2169 = lshr i64 %2168, 4
  %2170 = trunc i64 %2169 to i8
  %2171 = and i8 %2170, 1
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2171, i8* %2172, align 1, !tbaa !2447
  %2173 = icmp eq i64 %2154, 0
  %2174 = zext i1 %2173 to i8
  %2175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2174, i8* %2175, align 1, !tbaa !2448
  %2176 = lshr i64 %2154, 63
  %2177 = trunc i64 %2176 to i8
  %2178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2177, i8* %2178, align 1, !tbaa !2449
  %2179 = lshr i64 %2151, 63
  %2180 = xor i64 %2176, %2179
  %2181 = add nuw nsw i64 %2180, %2176
  %2182 = icmp eq i64 %2181, 2
  %2183 = zext i1 %2182 to i8
  %2184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2183, i8* %2184, align 1, !tbaa !2450
  %2185 = load i64, i64* %RBP
  %2186 = sub i64 %2185, 8
  %2187 = load i64, i64* %RCX
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 4
  store i64 %2189, i64* %PC
  %2190 = inttoptr i64 %2186 to i64*
  store i64 %2187, i64* %2190
  %2191 = load i64, i64* %RAX
  %2192 = load i64, i64* %PC
  %2193 = add i64 %2192, 3
  store i64 %2193, i64* %PC
  %2194 = inttoptr i64 %2191 to i32*
  %2195 = load i32, i32* %2194
  %2196 = sext i32 %2195 to i64
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RAX
  %2198 = mul i64 %2197, 8
  %2199 = add i64 %2198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 8
  store i64 %2201, i64* %PC
  %2202 = inttoptr i64 %2199 to i64*
  %2203 = load i64, i64* %2202
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = load i64, i64* %RBP
  %2205 = sub i64 %2204, 40
  %2206 = load i64, i64* %RAX
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 4
  store i64 %2208, i64* %PC
  %2209 = inttoptr i64 %2205 to i64*
  store i64 %2206, i64* %2209
  %2210 = load i64, i64* %PC
  %2211 = sub i64 %2210, 1101
  %2212 = load i64, i64* %PC
  %2213 = add i64 %2212, 5
  store i64 %2213, i64* %PC
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2211, i64* %2214, align 8, !tbaa !2428
  br label %block_400586

; <label>:2215:                                   ; preds = %block_400586
  %2216 = load i64, i64* %PC
  %2217 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2216, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2217
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a75(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400a75

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 234
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.1)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 151
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 18, i32* %121
  %122 = load i64, i64* %PC
  %123 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %122, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %123

block_4009d8:                                     ; preds = %block_400586
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 23, i32* %128
  %129 = load i64, i64* %PC
  %130 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_400ad2:                                     ; preds = %block_400586
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 12
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 28, i32* %135
  %136 = load i64, i64* %PC
  %137 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %136, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %137

block_4006ea:                                     ; preds = %block_400586
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 12
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  store i32 8, i32* %142
  %143 = load i64, i64* %PC
  %144 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %143, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %144

block_4005be:                                     ; preds = %block_400586
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 12
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 2, i32* %149
  %150 = load i64, i64* %PC
  %151 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %151

block_4007e4:                                     ; preds = %block_400586
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 13, i32* %156
  %157 = load i64, i64* %PC
  %158 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %157, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %158

block_4006b8:                                     ; preds = %block_400586
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 7, i32* %163
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 12
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  %169 = load i32, i32* %168
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RDI, align 8, !tbaa !2428
  %171 = load i64, i64* %PC
  %172 = sub i64 %171, 434
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 5
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 5
  store i64 %176, i64* %PC
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %178 = load i64, i64* %177, align 8, !tbaa !2428
  %179 = add i64 %178, -8
  %180 = inttoptr i64 %179 to i64*
  store i64 %174, i64* %180
  store i64 %179, i64* %177, align 8, !tbaa !2428
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %172, i64* %181, align 8, !tbaa !2428
  %182 = load i64, i64* %PC
  %183 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %182, %struct.Memory* %MEMORY.1)
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 8
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188
  store i64 %189, i64* %RAX, align 8, !tbaa !2428
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC
  store i64 %190, i64* %RCX, align 8, !tbaa !2428
  %193 = load i64, i64* %RCX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = add i64 4, %193
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = icmp ult i64 %196, %193
  %198 = icmp ult i64 %196, 4
  %199 = or i1 %197, %198
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2432
  %202 = trunc i64 %196 to i32
  %203 = and i32 %202, 255
  %204 = call i32 @llvm.ctpop.i32(i32 %203) #16
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %207, i8* %208, align 1, !tbaa !2446
  %209 = xor i64 4, %193
  %210 = xor i64 %209, %196
  %211 = lshr i64 %210, 4
  %212 = trunc i64 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2447
  %215 = icmp eq i64 %196, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2448
  %218 = lshr i64 %196, 63
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2449
  %221 = lshr i64 %193, 63
  %222 = xor i64 %218, %221
  %223 = add nuw nsw i64 %222, %218
  %224 = icmp eq i64 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2450
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 8
  %229 = load i64, i64* %RCX
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %228 to i64*
  store i64 %229, i64* %232
  %233 = load i64, i64* %RAX
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = sext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = mul i64 %239, 8
  %241 = add i64 %240, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 8
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 40
  %248 = load i64, i64* %RAX
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %247 to i64*
  store i64 %248, i64* %251
  %252 = load i64, i64* %PC
  %253 = sub i64 %252, 351
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %253, i64* %256, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  store i32 12, i32* %261
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 12
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 3
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i32*
  %267 = load i32, i32* %266
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %RDI, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = sub i64 %269, 684
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %272, i64* %278
  store i64 %277, i64* %275, align 8, !tbaa !2428
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %270, i64* %279, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %280, %struct.Memory* %MEMORY.1)
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 8
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %RAX, align 8, !tbaa !2428
  %288 = load i64, i64* %RAX
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 3
  store i64 %290, i64* %PC
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %291 = load i64, i64* %RCX
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = add i64 4, %291
  store i64 %294, i64* %RCX, align 8, !tbaa !2428
  %295 = icmp ult i64 %294, %291
  %296 = icmp ult i64 %294, 4
  %297 = or i1 %295, %296
  %298 = zext i1 %297 to i8
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %298, i8* %299, align 1, !tbaa !2432
  %300 = trunc i64 %294 to i32
  %301 = and i32 %300, 255
  %302 = call i32 @llvm.ctpop.i32(i32 %301) #16
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %305, i8* %306, align 1, !tbaa !2446
  %307 = xor i64 4, %291
  %308 = xor i64 %307, %294
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %311, i8* %312, align 1, !tbaa !2447
  %313 = icmp eq i64 %294, 0
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %314, i8* %315, align 1, !tbaa !2448
  %316 = lshr i64 %294, 63
  %317 = trunc i64 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %317, i8* %318, align 1, !tbaa !2449
  %319 = lshr i64 %291, 63
  %320 = xor i64 %316, %319
  %321 = add nuw nsw i64 %320, %316
  %322 = icmp eq i64 %321, 2
  %323 = zext i1 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %323, i8* %324, align 1, !tbaa !2450
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 8
  %327 = load i64, i64* %RCX
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %326 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %RAX
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i32*
  %335 = load i32, i32* %334
  %336 = sext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX
  %338 = mul i64 %337, 8
  %339 = add i64 %338, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 8
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 40
  %346 = load i64, i64* %RAX
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %345 to i64*
  store i64 %346, i64* %349
  %350 = load i64, i64* %PC
  %351 = sub i64 %350, 601
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %351, i64* %354, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 12
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 7
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i32*
  store i32 17, i32* %359
  %360 = load i64, i64* %PC
  %361 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %360, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %361

block_40058c:                                     ; preds = %block_400586
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 12
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 7
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  store i32 1, i32* %366
  %367 = load i64, i64* %PC
  %368 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %367, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %368

block_400686:                                     ; preds = %block_400586
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 6, i32* %373
  %374 = load i64, i64* %PC
  %375 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %374, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %375

block_400780:                                     ; preds = %block_400586
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 12
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 7
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  store i32 11, i32* %380
  %381 = load i64, i64* %PC
  %382 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %381, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %382

block_4009a6:                                     ; preds = %block_400586
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 12
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 7
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  store i32 22, i32* %387
  %388 = load i64, i64* %PC
  %389 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %388, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %389

block_40087a:                                     ; preds = %block_400586
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  store i32 16, i32* %394
  %395 = load i64, i64* %PC
  %396 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %395, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %396

block_400974:                                     ; preds = %block_400586
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 12
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 7
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i32*
  store i32 21, i32* %401
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 12
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 3
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = zext i32 %407 to i64
  store i64 %408, i64* %RDI, align 8, !tbaa !2428
  %409 = load i64, i64* %PC
  %410 = sub i64 %409, 1134
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 5
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  store i64 %414, i64* %PC
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %416 = load i64, i64* %415, align 8, !tbaa !2428
  %417 = add i64 %416, -8
  %418 = inttoptr i64 %417 to i64*
  store i64 %412, i64* %418
  store i64 %417, i64* %415, align 8, !tbaa !2428
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %410, i64* %419, align 8, !tbaa !2428
  %420 = load i64, i64* %PC
  %421 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %420, %struct.Memory* %MEMORY.1)
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 8
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i64*
  %427 = load i64, i64* %426
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  store i64 %428, i64* %RCX, align 8, !tbaa !2428
  %431 = load i64, i64* %RCX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC
  %434 = add i64 4, %431
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = icmp ult i64 %434, %431
  %436 = icmp ult i64 %434, 4
  %437 = or i1 %435, %436
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %438, i8* %439, align 1, !tbaa !2432
  %440 = trunc i64 %434 to i32
  %441 = and i32 %440, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2446
  %447 = xor i64 4, %431
  %448 = xor i64 %447, %434
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %451, i8* %452, align 1, !tbaa !2447
  %453 = icmp eq i64 %434, 0
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %455, align 1, !tbaa !2448
  %456 = lshr i64 %434, 63
  %457 = trunc i64 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %457, i8* %458, align 1, !tbaa !2449
  %459 = lshr i64 %431, 63
  %460 = xor i64 %456, %459
  %461 = add nuw nsw i64 %460, %456
  %462 = icmp eq i64 %461, 2
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %463, i8* %464, align 1, !tbaa !2450
  %465 = load i64, i64* %RBP
  %466 = sub i64 %465, 8
  %467 = load i64, i64* %RCX
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 4
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %466 to i64*
  store i64 %467, i64* %470
  %471 = load i64, i64* %RAX
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 3
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %471 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RAX
  %478 = mul i64 %477, 8
  %479 = add i64 %478, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 8
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 40
  %486 = load i64, i64* %RAX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %485 to i64*
  store i64 %486, i64* %489
  %490 = load i64, i64* %PC
  %491 = sub i64 %490, 1051
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 5
  store i64 %493, i64* %PC
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %491, i64* %494, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 12
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 7
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  store i32 26, i32* %499
  br label %block_400a75

block_400aa0:                                     ; preds = %block_400586
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 12
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 7
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i32*
  store i32 27, i32* %504
  %505 = load i64, i64* %PC
  %506 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %505, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %506

block_400a75:                                     ; preds = %block_400a6e, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400a6e ]
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 12
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 3
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i32*
  %512 = load i32, i32* %511
  %513 = zext i32 %512 to i64
  store i64 %513, i64* %RDI, align 8, !tbaa !2428
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1384
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 5
  store i64 %519, i64* %PC
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %521 = load i64, i64* %520, align 8, !tbaa !2428
  %522 = add i64 %521, -8
  %523 = inttoptr i64 %522 to i64*
  store i64 %517, i64* %523
  store i64 %522, i64* %520, align 8, !tbaa !2428
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %524, align 8, !tbaa !2428
  %525 = load i64, i64* %PC
  %526 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.0)
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 8
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 4
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = load i64, i64* %RAX
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  store i64 %533, i64* %RCX, align 8, !tbaa !2428
  %536 = load i64, i64* %RCX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 4
  store i64 %538, i64* %PC
  %539 = add i64 4, %536
  store i64 %539, i64* %RCX, align 8, !tbaa !2428
  %540 = icmp ult i64 %539, %536
  %541 = icmp ult i64 %539, 4
  %542 = or i1 %540, %541
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %543, i8* %544, align 1, !tbaa !2432
  %545 = trunc i64 %539 to i32
  %546 = and i32 %545, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i64 4, %536
  %553 = xor i64 %552, %539
  %554 = lshr i64 %553, 4
  %555 = trunc i64 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i64 %539, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i64 %539, 63
  %562 = trunc i64 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i64 %536, 63
  %565 = xor i64 %561, %564
  %566 = add nuw nsw i64 %565, %561
  %567 = icmp eq i64 %566, 2
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %568, i8* %569, align 1, !tbaa !2450
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 8
  %572 = load i64, i64* %RCX
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %571 to i64*
  store i64 %572, i64* %575
  %576 = load i64, i64* %RAX
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = sext i32 %580 to i64
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = load i64, i64* %RAX
  %583 = mul i64 %582, 8
  %584 = add i64 %583, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 8
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 40
  %591 = load i64, i64* %RAX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %590 to i64*
  store i64 %591, i64* %594
  %595 = load i64, i64* %PC
  %596 = sub i64 %595, 1301
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %596, i64* %599, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 12
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 7
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i32*
  store i32 5, i32* %604
  %605 = load i64, i64* %PC
  %606 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %605, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %606

block_40074e:                                     ; preds = %block_400586
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 12
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 7
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  store i32 10, i32* %611
  %612 = load i64, i64* %PC
  %613 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %612, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %613

block_400848:                                     ; preds = %block_400586
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 7
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  store i32 15, i32* %618
  %619 = load i64, i64* %PC
  %620 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %619, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %620

block_400942:                                     ; preds = %block_400586
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 12
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 7
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  store i32 20, i32* %625
  %626 = load i64, i64* %PC
  %627 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %626, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %627

block_400b68:                                     ; preds = %block_400586
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 31, i32* %632
  %633 = load i64, i64* %PC
  %634 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %633, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %634

block_400a3c:                                     ; preds = %block_400586
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 12
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 7
  store i64 %638, i64* %PC
  %639 = inttoptr i64 %636 to i32*
  store i32 25, i32* %639
  %640 = load i64, i64* %PC
  %641 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %641

block_400b36:                                     ; preds = %block_400586
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 12
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 7
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i32*
  store i32 30, i32* %646
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 12
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RDI, align 8, !tbaa !2428
  %654 = load i64, i64* %PC
  %655 = sub i64 %654, 1584
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 5
  store i64 %659, i64* %PC
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %661 = load i64, i64* %660, align 8, !tbaa !2428
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %657, i64* %663
  store i64 %662, i64* %660, align 8, !tbaa !2428
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %655, i64* %664, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %665, %struct.Memory* %MEMORY.1)
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 8
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 4
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i64*
  %672 = load i64, i64* %671
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = load i64, i64* %RAX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 3
  store i64 %675, i64* %PC
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %676 = load i64, i64* %RCX
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 4
  store i64 %678, i64* %PC
  %679 = add i64 4, %676
  store i64 %679, i64* %RCX, align 8, !tbaa !2428
  %680 = icmp ult i64 %679, %676
  %681 = icmp ult i64 %679, 4
  %682 = or i1 %680, %681
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %683, i8* %684, align 1, !tbaa !2432
  %685 = trunc i64 %679 to i32
  %686 = and i32 %685, 255
  %687 = call i32 @llvm.ctpop.i32(i32 %686) #16
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = xor i8 %689, 1
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %690, i8* %691, align 1, !tbaa !2446
  %692 = xor i64 4, %676
  %693 = xor i64 %692, %679
  %694 = lshr i64 %693, 4
  %695 = trunc i64 %694 to i8
  %696 = and i8 %695, 1
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %696, i8* %697, align 1, !tbaa !2447
  %698 = icmp eq i64 %679, 0
  %699 = zext i1 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %699, i8* %700, align 1, !tbaa !2448
  %701 = lshr i64 %679, 63
  %702 = trunc i64 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %702, i8* %703, align 1, !tbaa !2449
  %704 = lshr i64 %676, 63
  %705 = xor i64 %701, %704
  %706 = add nuw nsw i64 %705, %701
  %707 = icmp eq i64 %706, 2
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %708, i8* %709, align 1, !tbaa !2450
  %710 = load i64, i64* %RBP
  %711 = sub i64 %710, 8
  %712 = load i64, i64* %RCX
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %711 to i64*
  store i64 %712, i64* %715
  %716 = load i64, i64* %RAX
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  %720 = load i32, i32* %719
  %721 = sext i32 %720 to i64
  store i64 %721, i64* %RAX, align 8, !tbaa !2428
  %722 = load i64, i64* %RAX
  %723 = mul i64 %722, 8
  %724 = add i64 %723, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 8
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 40
  %731 = load i64, i64* %RAX
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %730 to i64*
  store i64 %731, i64* %734
  %735 = load i64, i64* %PC
  %736 = sub i64 %735, 1501
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 5
  store i64 %738, i64* %PC
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %736, i64* %739, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400b36, %block_400a75, %block_400974, %block_4007b2, %block_4006b8, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %526, %block_400a75 ], [ %421, %block_400974 ], [ %281, %block_4007b2 ], [ %183, %block_4006b8 ], [ %43, %block_4005f0 ], [ %666, %block_400b36 ]
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 40
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 2
  store i64 %748, i64* %PC
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %746, i64* %749, align 8, !tbaa !2428
  %750 = load i64, i64* %PC
  switch i64 %750, label %800 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4196324, label %block_4007e4
    i64 4195774, label %block_4005be
    i64 4196074, label %block_4006ea
    i64 4197224, label %block_400b68
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195974, label %block_400686
    i64 4196224, label %block_400780
    i64 4196774, label %block_4009a6
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4197024, label %block_400aa0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
  ]

block_400622:                                     ; preds = %block_400586
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 12
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 7
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i32*
  store i32 4, i32* %755
  %756 = load i64, i64* %PC
  %757 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %756, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %757

block_40071c:                                     ; preds = %block_400586
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 12
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 7
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  store i32 9, i32* %762
  %763 = load i64, i64* %PC
  %764 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %764

block_400816:                                     ; preds = %block_400586
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 12
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  store i32 14, i32* %769
  %770 = load i64, i64* %PC
  %771 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %770, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %771

block_400910:                                     ; preds = %block_400586
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 12
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  store i32 19, i32* %776
  %777 = load i64, i64* %PC
  %778 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %777, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %778

block_400a0a:                                     ; preds = %block_400586
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 7
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  store i32 24, i32* %783
  %784 = load i64, i64* %PC
  %785 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %784, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %785

block_400579:                                     ; preds = %block_400586
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 12
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 7
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  store i32 0, i32* %790
  %791 = load i64, i64* %PC
  %792 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %791, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %792

block_400b04:                                     ; preds = %block_400586
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 12
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 7
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  store i32 29, i32* %797
  %798 = load i64, i64* %PC
  %799 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %798, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %799

; <label>:800:                                    ; preds = %block_400586
  %801 = load i64, i64* %PC
  %802 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %801, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %802
}

; Function Attrs: noinline
define %struct.Memory* @sub_40068d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40068d

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.0)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 15, i32* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 834
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.0)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 8
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 3
  store i64 %1194, i64* %PC
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = add i64 4, %1195
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1195
  %1200 = icmp ult i64 %1198, 4
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1202, i8* %1203, align 1, !tbaa !2432
  %1204 = trunc i64 %1198 to i32
  %1205 = and i32 %1204, 255
  %1206 = call i32 @llvm.ctpop.i32(i32 %1205) #16
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1209, i8* %1210, align 1, !tbaa !2446
  %1211 = xor i64 4, %1195
  %1212 = xor i64 %1211, %1198
  %1213 = lshr i64 %1212, 4
  %1214 = trunc i64 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1215, i8* %1216, align 1, !tbaa !2447
  %1217 = icmp eq i64 %1198, 0
  %1218 = zext i1 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1218, i8* %1219, align 1, !tbaa !2448
  %1220 = lshr i64 %1198, 63
  %1221 = trunc i64 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1221, i8* %1222, align 1, !tbaa !2449
  %1223 = lshr i64 %1195, 63
  %1224 = xor i64 %1220, %1223
  %1225 = add nuw nsw i64 %1224, %1220
  %1226 = icmp eq i64 %1225, 2
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1227, i8* %1228, align 1, !tbaa !2450
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 8
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %RAX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = mul i64 %1241, 8
  %1243 = add i64 %1242, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 8
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 40
  %1250 = load i64, i64* %RAX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1249 to i64*
  store i64 %1250, i64* %1253
  %1254 = load i64, i64* %PC
  %1255 = sub i64 %1254, 751
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 5
  store i64 %1257, i64* %PC
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1255, i64* %1258, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 7
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  store i32 20, i32* %1263
  %1264 = load i64, i64* %PC
  %1265 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1264, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1265

block_4005be:                                     ; preds = %block_400586
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 12
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 7
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i32*
  store i32 2, i32* %1270
  %1271 = load i64, i64* %PC
  %1272 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1271, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1272

block_4006b8:                                     ; preds = %block_400586
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 12
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 7
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  store i32 7, i32* %1277
  %1278 = load i64, i64* %RBP
  %1279 = sub i64 %1278, 12
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RDI, align 8, !tbaa !2428
  %1285 = load i64, i64* %PC
  %1286 = sub i64 %1285, 434
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 5
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 5
  store i64 %1290, i64* %PC
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1292 = load i64, i64* %1291, align 8, !tbaa !2428
  %1293 = add i64 %1292, -8
  %1294 = inttoptr i64 %1293 to i64*
  store i64 %1288, i64* %1294
  store i64 %1293, i64* %1291, align 8, !tbaa !2428
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1286, i64* %1295, align 8, !tbaa !2428
  %1296 = load i64, i64* %PC
  %1297 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1296, %struct.Memory* %MEMORY.0)
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 8
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i64*
  %1303 = load i64, i64* %1302
  store i64 %1303, i64* %RAX, align 8, !tbaa !2428
  %1304 = load i64, i64* %RAX
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1307 = load i64, i64* %RCX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = add i64 4, %1307
  store i64 %1310, i64* %RCX, align 8, !tbaa !2428
  %1311 = icmp ult i64 %1310, %1307
  %1312 = icmp ult i64 %1310, 4
  %1313 = or i1 %1311, %1312
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1314, i8* %1315, align 1, !tbaa !2432
  %1316 = trunc i64 %1310 to i32
  %1317 = and i32 %1316, 255
  %1318 = call i32 @llvm.ctpop.i32(i32 %1317) #16
  %1319 = trunc i32 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = xor i8 %1320, 1
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1321, i8* %1322, align 1, !tbaa !2446
  %1323 = xor i64 4, %1307
  %1324 = xor i64 %1323, %1310
  %1325 = lshr i64 %1324, 4
  %1326 = trunc i64 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1327, i8* %1328, align 1, !tbaa !2447
  %1329 = icmp eq i64 %1310, 0
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1330, i8* %1331, align 1, !tbaa !2448
  %1332 = lshr i64 %1310, 63
  %1333 = trunc i64 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1333, i8* %1334, align 1, !tbaa !2449
  %1335 = lshr i64 %1307, 63
  %1336 = xor i64 %1332, %1335
  %1337 = add nuw nsw i64 %1336, %1332
  %1338 = icmp eq i64 %1337, 2
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1339, i8* %1340, align 1, !tbaa !2450
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 8
  %1343 = load i64, i64* %RCX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %RAX
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = sext i32 %1351 to i64
  store i64 %1352, i64* %RAX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RAX
  %1354 = mul i64 %1353, 8
  %1355 = add i64 %1354, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 8
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i64*
  %1359 = load i64, i64* %1358
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 40
  %1362 = load i64, i64* %RAX
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1361 to i64*
  store i64 %1362, i64* %1365
  %1366 = load i64, i64* %PC
  %1367 = sub i64 %1366, 351
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1367, i64* %1370, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 12
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 7
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  store i32 30, i32* %1375
  %1376 = load i64, i64* %RBP
  %1377 = sub i64 %1376, 12
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 3
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to i32*
  %1381 = load i32, i32* %1380
  %1382 = zext i32 %1381 to i64
  store i64 %1382, i64* %RDI, align 8, !tbaa !2428
  %1383 = load i64, i64* %PC
  %1384 = sub i64 %1383, 1584
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 5
  store i64 %1388, i64* %PC
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1390 = load i64, i64* %1389, align 8, !tbaa !2428
  %1391 = add i64 %1390, -8
  %1392 = inttoptr i64 %1391 to i64*
  store i64 %1386, i64* %1392
  store i64 %1391, i64* %1389, align 8, !tbaa !2428
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1384, i64* %1393, align 8, !tbaa !2428
  %1394 = load i64, i64* %PC
  %1395 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1394, %struct.Memory* %MEMORY.0)
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 8
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 4
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i64*
  %1401 = load i64, i64* %1400
  store i64 %1401, i64* %RAX, align 8, !tbaa !2428
  %1402 = load i64, i64* %RAX
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 3
  store i64 %1404, i64* %PC
  store i64 %1402, i64* %RCX, align 8, !tbaa !2428
  %1405 = load i64, i64* %RCX
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 4
  store i64 %1407, i64* %PC
  %1408 = add i64 4, %1405
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = icmp ult i64 %1408, %1405
  %1410 = icmp ult i64 %1408, 4
  %1411 = or i1 %1409, %1410
  %1412 = zext i1 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1412, i8* %1413, align 1, !tbaa !2432
  %1414 = trunc i64 %1408 to i32
  %1415 = and i32 %1414, 255
  %1416 = call i32 @llvm.ctpop.i32(i32 %1415) #16
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = xor i8 %1418, 1
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1419, i8* %1420, align 1, !tbaa !2446
  %1421 = xor i64 4, %1405
  %1422 = xor i64 %1421, %1408
  %1423 = lshr i64 %1422, 4
  %1424 = trunc i64 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1425, i8* %1426, align 1, !tbaa !2447
  %1427 = icmp eq i64 %1408, 0
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1428, i8* %1429, align 1, !tbaa !2448
  %1430 = lshr i64 %1408, 63
  %1431 = trunc i64 %1430 to i8
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1431, i8* %1432, align 1, !tbaa !2449
  %1433 = lshr i64 %1405, 63
  %1434 = xor i64 %1430, %1433
  %1435 = add nuw nsw i64 %1434, %1430
  %1436 = icmp eq i64 %1435, 2
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1437, i8* %1438, align 1, !tbaa !2450
  %1439 = load i64, i64* %RBP
  %1440 = sub i64 %1439, 8
  %1441 = load i64, i64* %RCX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1440 to i64*
  store i64 %1441, i64* %1444
  %1445 = load i64, i64* %RAX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 3
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1445 to i32*
  %1449 = load i32, i32* %1448
  %1450 = sext i32 %1449 to i64
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RAX
  %1452 = mul i64 %1451, 8
  %1453 = add i64 %1452, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 8
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to i64*
  %1457 = load i64, i64* %1456
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = load i64, i64* %RBP
  %1459 = sub i64 %1458, 40
  %1460 = load i64, i64* %RAX
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 4
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1459 to i64*
  store i64 %1460, i64* %1463
  %1464 = load i64, i64* %PC
  %1465 = sub i64 %1464, 1501
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 5
  store i64 %1467, i64* %PC
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1465, i64* %1468, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1469 = load i64, i64* %RBP
  %1470 = sub i64 %1469, 12
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 7
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i32*
  store i32 12, i32* %1473
  %1474 = load i64, i64* %RBP
  %1475 = sub i64 %1474, 12
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 3
  store i64 %1477, i64* %PC
  %1478 = inttoptr i64 %1475 to i32*
  %1479 = load i32, i32* %1478
  %1480 = zext i32 %1479 to i64
  store i64 %1480, i64* %RDI, align 8, !tbaa !2428
  %1481 = load i64, i64* %PC
  %1482 = sub i64 %1481, 684
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 5
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 5
  store i64 %1486, i64* %PC
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1488 = load i64, i64* %1487, align 8, !tbaa !2428
  %1489 = add i64 %1488, -8
  %1490 = inttoptr i64 %1489 to i64*
  store i64 %1484, i64* %1490
  store i64 %1489, i64* %1487, align 8, !tbaa !2428
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1482, i64* %1491, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1492, %struct.Memory* %MEMORY.0)
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 8
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RAX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RAX
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  store i64 %1500, i64* %RCX, align 8, !tbaa !2428
  %1503 = load i64, i64* %RCX
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 4
  store i64 %1505, i64* %PC
  %1506 = add i64 4, %1503
  store i64 %1506, i64* %RCX, align 8, !tbaa !2428
  %1507 = icmp ult i64 %1506, %1503
  %1508 = icmp ult i64 %1506, 4
  %1509 = or i1 %1507, %1508
  %1510 = zext i1 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1510, i8* %1511, align 1, !tbaa !2432
  %1512 = trunc i64 %1506 to i32
  %1513 = and i32 %1512, 255
  %1514 = call i32 @llvm.ctpop.i32(i32 %1513) #16
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1517, i8* %1518, align 1, !tbaa !2446
  %1519 = xor i64 4, %1503
  %1520 = xor i64 %1519, %1506
  %1521 = lshr i64 %1520, 4
  %1522 = trunc i64 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1523, i8* %1524, align 1, !tbaa !2447
  %1525 = icmp eq i64 %1506, 0
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1526, i8* %1527, align 1, !tbaa !2448
  %1528 = lshr i64 %1506, 63
  %1529 = trunc i64 %1528 to i8
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1529, i8* %1530, align 1, !tbaa !2449
  %1531 = lshr i64 %1503, 63
  %1532 = xor i64 %1528, %1531
  %1533 = add nuw nsw i64 %1532, %1528
  %1534 = icmp eq i64 %1533, 2
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1535, i8* %1536, align 1, !tbaa !2450
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 8
  %1539 = load i64, i64* %RCX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1538 to i64*
  store i64 %1539, i64* %1542
  %1543 = load i64, i64* %RAX
  %1544 = load i64, i64* %PC
  %1545 = add i64 %1544, 3
  store i64 %1545, i64* %PC
  %1546 = inttoptr i64 %1543 to i32*
  %1547 = load i32, i32* %1546
  %1548 = sext i32 %1547 to i64
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RAX
  %1550 = mul i64 %1549, 8
  %1551 = add i64 %1550, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 8
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1551 to i64*
  %1555 = load i64, i64* %1554
  store i64 %1555, i64* %RAX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RBP
  %1557 = sub i64 %1556, 40
  %1558 = load i64, i64* %RAX
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 4
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1557 to i64*
  store i64 %1558, i64* %1561
  %1562 = load i64, i64* %PC
  %1563 = sub i64 %1562, 601
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1563, i64* %1566, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 12
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 7
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  store i32 17, i32* %1571
  %1572 = load i64, i64* %RBP
  %1573 = sub i64 %1572, 12
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 3
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1573 to i32*
  %1577 = load i32, i32* %1576
  %1578 = zext i32 %1577 to i64
  store i64 %1578, i64* %RDI, align 8, !tbaa !2428
  %1579 = load i64, i64* %PC
  %1580 = sub i64 %1579, 934
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 5
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 5
  store i64 %1584, i64* %PC
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1586 = load i64, i64* %1585, align 8, !tbaa !2428
  %1587 = add i64 %1586, -8
  %1588 = inttoptr i64 %1587 to i64*
  store i64 %1582, i64* %1588
  store i64 %1587, i64* %1585, align 8, !tbaa !2428
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1580, i64* %1589, align 8, !tbaa !2428
  %1590 = load i64, i64* %PC
  %1591 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1590, %struct.Memory* %MEMORY.0)
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 8
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 4
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i64*
  %1597 = load i64, i64* %1596
  store i64 %1597, i64* %RAX, align 8, !tbaa !2428
  %1598 = load i64, i64* %RAX
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  store i64 %1598, i64* %RCX, align 8, !tbaa !2428
  %1601 = load i64, i64* %RCX
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = add i64 4, %1601
  store i64 %1604, i64* %RCX, align 8, !tbaa !2428
  %1605 = icmp ult i64 %1604, %1601
  %1606 = icmp ult i64 %1604, 4
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1608, i8* %1609, align 1, !tbaa !2432
  %1610 = trunc i64 %1604 to i32
  %1611 = and i32 %1610, 255
  %1612 = call i32 @llvm.ctpop.i32(i32 %1611) #16
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1615, i8* %1616, align 1, !tbaa !2446
  %1617 = xor i64 4, %1601
  %1618 = xor i64 %1617, %1604
  %1619 = lshr i64 %1618, 4
  %1620 = trunc i64 %1619 to i8
  %1621 = and i8 %1620, 1
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1621, i8* %1622, align 1, !tbaa !2447
  %1623 = icmp eq i64 %1604, 0
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1624, i8* %1625, align 1, !tbaa !2448
  %1626 = lshr i64 %1604, 63
  %1627 = trunc i64 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1627, i8* %1628, align 1, !tbaa !2449
  %1629 = lshr i64 %1601, 63
  %1630 = xor i64 %1626, %1629
  %1631 = add nuw nsw i64 %1630, %1626
  %1632 = icmp eq i64 %1631, 2
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1633, i8* %1634, align 1, !tbaa !2450
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 8
  %1637 = load i64, i64* %RCX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1636 to i64*
  store i64 %1637, i64* %1640
  %1641 = load i64, i64* %RAX
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 3
  store i64 %1643, i64* %PC
  %1644 = inttoptr i64 %1641 to i32*
  %1645 = load i32, i32* %1644
  %1646 = sext i32 %1645 to i64
  store i64 %1646, i64* %RAX, align 8, !tbaa !2428
  %1647 = load i64, i64* %RAX
  %1648 = mul i64 %1647, 8
  %1649 = add i64 %1648, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 8
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1649 to i64*
  %1653 = load i64, i64* %1652
  store i64 %1653, i64* %RAX, align 8, !tbaa !2428
  %1654 = load i64, i64* %RBP
  %1655 = sub i64 %1654, 40
  %1656 = load i64, i64* %RAX
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 4
  store i64 %1658, i64* %PC
  %1659 = inttoptr i64 %1655 to i64*
  store i64 %1656, i64* %1659
  %1660 = load i64, i64* %PC
  %1661 = sub i64 %1660, 851
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 5
  store i64 %1663, i64* %PC
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1661, i64* %1664, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 12
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 7
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  store i32 22, i32* %1669
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 12
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RDI, align 8, !tbaa !2428
  %1677 = load i64, i64* %PC
  %1678 = sub i64 %1677, 1184
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 5
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 5
  store i64 %1682, i64* %PC
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1684 = load i64, i64* %1683, align 8, !tbaa !2428
  %1685 = add i64 %1684, -8
  %1686 = inttoptr i64 %1685 to i64*
  store i64 %1680, i64* %1686
  store i64 %1685, i64* %1683, align 8, !tbaa !2428
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1678, i64* %1687, align 8, !tbaa !2428
  %1688 = load i64, i64* %PC
  %1689 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1688, %struct.Memory* %MEMORY.0)
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 8
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 4
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i64*
  %1695 = load i64, i64* %1694
  store i64 %1695, i64* %RAX, align 8, !tbaa !2428
  %1696 = load i64, i64* %RAX
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  store i64 %1696, i64* %RCX, align 8, !tbaa !2428
  %1699 = load i64, i64* %RCX
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = add i64 4, %1699
  store i64 %1702, i64* %RCX, align 8, !tbaa !2428
  %1703 = icmp ult i64 %1702, %1699
  %1704 = icmp ult i64 %1702, 4
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1706, i8* %1707, align 1, !tbaa !2432
  %1708 = trunc i64 %1702 to i32
  %1709 = and i32 %1708, 255
  %1710 = call i32 @llvm.ctpop.i32(i32 %1709) #16
  %1711 = trunc i32 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = xor i8 %1712, 1
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1713, i8* %1714, align 1, !tbaa !2446
  %1715 = xor i64 4, %1699
  %1716 = xor i64 %1715, %1702
  %1717 = lshr i64 %1716, 4
  %1718 = trunc i64 %1717 to i8
  %1719 = and i8 %1718, 1
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1719, i8* %1720, align 1, !tbaa !2447
  %1721 = icmp eq i64 %1702, 0
  %1722 = zext i1 %1721 to i8
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1722, i8* %1723, align 1, !tbaa !2448
  %1724 = lshr i64 %1702, 63
  %1725 = trunc i64 %1724 to i8
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1725, i8* %1726, align 1, !tbaa !2449
  %1727 = lshr i64 %1699, 63
  %1728 = xor i64 %1724, %1727
  %1729 = add nuw nsw i64 %1728, %1724
  %1730 = icmp eq i64 %1729, 2
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1731, i8* %1732, align 1, !tbaa !2450
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 8
  %1735 = load i64, i64* %RCX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1734 to i64*
  store i64 %1735, i64* %1738
  %1739 = load i64, i64* %RAX
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 3
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742
  %1744 = sext i32 %1743 to i64
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RAX
  %1746 = mul i64 %1745, 8
  %1747 = add i64 %1746, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 8
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RAX, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 40
  %1754 = load i64, i64* %RAX
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1753 to i64*
  store i64 %1754, i64* %1757
  %1758 = load i64, i64* %PC
  %1759 = sub i64 %1758, 1101
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 5
  store i64 %1761, i64* %PC
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1759, i64* %1762, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 12
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  store i32 25, i32* %1767
  %1768 = load i64, i64* %PC
  %1769 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1768, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1769

block_400586:                                     ; preds = %block_400a0a, %block_40058c, %block_40068d, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400848, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %2290, %block_40068d ], [ %1689, %block_4009a6 ], [ %1591, %block_4008ac ], [ %1493, %block_4007b2 ], [ %1395, %block_400b36 ], [ %1297, %block_4006b8 ], [ %1185, %block_400848 ], [ %1087, %block_40074e ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2388, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %1805, %block_400622 ], [ %1903, %block_400aa0 ], [ %2001, %block_40071c ], [ %2099, %block_400816 ], [ %2197, %block_400910 ], [ %2486, %block_400a0a ]
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 40
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 4
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i64*
  %1775 = load i64, i64* %1774
  store i64 %1775, i64* %RAX, align 8, !tbaa !2428
  %1776 = load i64, i64* %RAX
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 2
  store i64 %1778, i64* %PC
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1776, i64* %1779, align 8, !tbaa !2428
  %1780 = load i64, i64* %PC
  switch i64 %1780, label %2579 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400622:                                     ; preds = %block_400586
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 12
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 7
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i32*
  store i32 4, i32* %1785
  %1786 = load i64, i64* %RBP
  %1787 = sub i64 %1786, 12
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to i32*
  %1791 = load i32, i32* %1790
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RDI, align 8, !tbaa !2428
  %1793 = load i64, i64* %PC
  %1794 = sub i64 %1793, 284
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1800 = load i64, i64* %1799, align 8, !tbaa !2428
  %1801 = add i64 %1800, -8
  %1802 = inttoptr i64 %1801 to i64*
  store i64 %1796, i64* %1802
  store i64 %1801, i64* %1799, align 8, !tbaa !2428
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1794, i64* %1803, align 8, !tbaa !2428
  %1804 = load i64, i64* %PC
  %1805 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1804, %struct.Memory* %MEMORY.0)
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 8
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RAX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RAX
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 3
  store i64 %1814, i64* %PC
  store i64 %1812, i64* %RCX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RCX
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 4
  store i64 %1817, i64* %PC
  %1818 = add i64 4, %1815
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = icmp ult i64 %1818, %1815
  %1820 = icmp ult i64 %1818, 4
  %1821 = or i1 %1819, %1820
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1822, i8* %1823, align 1, !tbaa !2432
  %1824 = trunc i64 %1818 to i32
  %1825 = and i32 %1824, 255
  %1826 = call i32 @llvm.ctpop.i32(i32 %1825) #16
  %1827 = trunc i32 %1826 to i8
  %1828 = and i8 %1827, 1
  %1829 = xor i8 %1828, 1
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1829, i8* %1830, align 1, !tbaa !2446
  %1831 = xor i64 4, %1815
  %1832 = xor i64 %1831, %1818
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1835, i8* %1836, align 1, !tbaa !2447
  %1837 = icmp eq i64 %1818, 0
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1838, i8* %1839, align 1, !tbaa !2448
  %1840 = lshr i64 %1818, 63
  %1841 = trunc i64 %1840 to i8
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1841, i8* %1842, align 1, !tbaa !2449
  %1843 = lshr i64 %1815, 63
  %1844 = xor i64 %1840, %1843
  %1845 = add nuw nsw i64 %1844, %1840
  %1846 = icmp eq i64 %1845, 2
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1847, i8* %1848, align 1, !tbaa !2450
  %1849 = load i64, i64* %RBP
  %1850 = sub i64 %1849, 8
  %1851 = load i64, i64* %RCX
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1850 to i64*
  store i64 %1851, i64* %1854
  %1855 = load i64, i64* %RAX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  %1859 = load i32, i32* %1858
  %1860 = sext i32 %1859 to i64
  store i64 %1860, i64* %RAX, align 8, !tbaa !2428
  %1861 = load i64, i64* %RAX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 8
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i64*
  %1867 = load i64, i64* %1866
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 40
  %1870 = load i64, i64* %RAX
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1869 to i64*
  store i64 %1870, i64* %1873
  %1874 = load i64, i64* %PC
  %1875 = sub i64 %1874, 201
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1875, i64* %1878, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 12
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 7
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i32*
  store i32 27, i32* %1883
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 12
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i32*
  %1889 = load i32, i32* %1888
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RDI, align 8, !tbaa !2428
  %1891 = load i64, i64* %PC
  %1892 = sub i64 %1891, 1434
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 5
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1898 = load i64, i64* %1897, align 8, !tbaa !2428
  %1899 = add i64 %1898, -8
  %1900 = inttoptr i64 %1899 to i64*
  store i64 %1894, i64* %1900
  store i64 %1899, i64* %1897, align 8, !tbaa !2428
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1892, i64* %1901, align 8, !tbaa !2428
  %1902 = load i64, i64* %PC
  %1903 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1902, %struct.Memory* %MEMORY.0)
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 8
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 4
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RAX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RAX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 3
  store i64 %1912, i64* %PC
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1913 = load i64, i64* %RCX
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = add i64 4, %1913
  store i64 %1916, i64* %RCX, align 8, !tbaa !2428
  %1917 = icmp ult i64 %1916, %1913
  %1918 = icmp ult i64 %1916, 4
  %1919 = or i1 %1917, %1918
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1920, i8* %1921, align 1, !tbaa !2432
  %1922 = trunc i64 %1916 to i32
  %1923 = and i32 %1922, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = xor i64 4, %1913
  %1930 = xor i64 %1929, %1916
  %1931 = lshr i64 %1930, 4
  %1932 = trunc i64 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1933, i8* %1934, align 1, !tbaa !2447
  %1935 = icmp eq i64 %1916, 0
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1936, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1916, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = lshr i64 %1913, 63
  %1942 = xor i64 %1938, %1941
  %1943 = add nuw nsw i64 %1942, %1938
  %1944 = icmp eq i64 %1943, 2
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1945, i8* %1946, align 1, !tbaa !2450
  %1947 = load i64, i64* %RBP
  %1948 = sub i64 %1947, 8
  %1949 = load i64, i64* %RCX
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1948 to i64*
  store i64 %1949, i64* %1952
  %1953 = load i64, i64* %RAX
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 3
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  %1957 = load i32, i32* %1956
  %1958 = sext i32 %1957 to i64
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RAX
  %1960 = mul i64 %1959, 8
  %1961 = add i64 %1960, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 40
  %1968 = load i64, i64* %RAX
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 4
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1967 to i64*
  store i64 %1968, i64* %1971
  %1972 = load i64, i64* %PC
  %1973 = sub i64 %1972, 1351
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 5
  store i64 %1975, i64* %PC
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1973, i64* %1976, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 12
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 7
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i32*
  store i32 9, i32* %1981
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 12
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  %1986 = inttoptr i64 %1983 to i32*
  %1987 = load i32, i32* %1986
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RDI, align 8, !tbaa !2428
  %1989 = load i64, i64* %PC
  %1990 = sub i64 %1989, 534
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1996 = load i64, i64* %1995, align 8, !tbaa !2428
  %1997 = add i64 %1996, -8
  %1998 = inttoptr i64 %1997 to i64*
  store i64 %1992, i64* %1998
  store i64 %1997, i64* %1995, align 8, !tbaa !2428
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1990, i64* %1999, align 8, !tbaa !2428
  %2000 = load i64, i64* %PC
  %2001 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2000, %struct.Memory* %MEMORY.0)
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 8
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i64*
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = load i64, i64* %RAX
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 3
  store i64 %2010, i64* %PC
  store i64 %2008, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RCX
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = add i64 4, %2011
  store i64 %2014, i64* %RCX, align 8, !tbaa !2428
  %2015 = icmp ult i64 %2014, %2011
  %2016 = icmp ult i64 %2014, 4
  %2017 = or i1 %2015, %2016
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2018, i8* %2019, align 1, !tbaa !2432
  %2020 = trunc i64 %2014 to i32
  %2021 = and i32 %2020, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = xor i64 4, %2011
  %2028 = xor i64 %2027, %2014
  %2029 = lshr i64 %2028, 4
  %2030 = trunc i64 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2031, i8* %2032, align 1, !tbaa !2447
  %2033 = icmp eq i64 %2014, 0
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2034, i8* %2035, align 1, !tbaa !2448
  %2036 = lshr i64 %2014, 63
  %2037 = trunc i64 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2037, i8* %2038, align 1, !tbaa !2449
  %2039 = lshr i64 %2011, 63
  %2040 = xor i64 %2036, %2039
  %2041 = add nuw nsw i64 %2040, %2036
  %2042 = icmp eq i64 %2041, 2
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2044, align 1, !tbaa !2450
  %2045 = load i64, i64* %RBP
  %2046 = sub i64 %2045, 8
  %2047 = load i64, i64* %RCX
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 4
  store i64 %2049, i64* %PC
  %2050 = inttoptr i64 %2046 to i64*
  store i64 %2047, i64* %2050
  %2051 = load i64, i64* %RAX
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 3
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = mul i64 %2057, 8
  %2059 = add i64 %2058, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 8
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to i64*
  %2063 = load i64, i64* %2062
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RBP
  %2065 = sub i64 %2064, 40
  %2066 = load i64, i64* %RAX
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 4
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2065 to i64*
  store i64 %2066, i64* %2069
  %2070 = load i64, i64* %PC
  %2071 = sub i64 %2070, 451
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 5
  store i64 %2073, i64* %PC
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2071, i64* %2074, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 12
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 7
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i32*
  store i32 14, i32* %2079
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 12
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2081 to i32*
  %2085 = load i32, i32* %2084
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDI, align 8, !tbaa !2428
  %2087 = load i64, i64* %PC
  %2088 = sub i64 %2087, 784
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  store i64 %2092, i64* %PC
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2094 = load i64, i64* %2093, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2090, i64* %2096
  store i64 %2095, i64* %2093, align 8, !tbaa !2428
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2088, i64* %2097, align 8, !tbaa !2428
  %2098 = load i64, i64* %PC
  %2099 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2098, %struct.Memory* %MEMORY.0)
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 8
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 4
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to i64*
  %2105 = load i64, i64* %2104
  store i64 %2105, i64* %RAX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2109 = load i64, i64* %RCX
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = add i64 4, %2109
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = icmp ult i64 %2112, %2109
  %2114 = icmp ult i64 %2112, 4
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2116, i8* %2117, align 1, !tbaa !2432
  %2118 = trunc i64 %2112 to i32
  %2119 = and i32 %2118, 255
  %2120 = call i32 @llvm.ctpop.i32(i32 %2119) #16
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = xor i8 %2122, 1
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2123, i8* %2124, align 1, !tbaa !2446
  %2125 = xor i64 4, %2109
  %2126 = xor i64 %2125, %2112
  %2127 = lshr i64 %2126, 4
  %2128 = trunc i64 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2129, i8* %2130, align 1, !tbaa !2447
  %2131 = icmp eq i64 %2112, 0
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2132, i8* %2133, align 1, !tbaa !2448
  %2134 = lshr i64 %2112, 63
  %2135 = trunc i64 %2134 to i8
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2135, i8* %2136, align 1, !tbaa !2449
  %2137 = lshr i64 %2109, 63
  %2138 = xor i64 %2134, %2137
  %2139 = add nuw nsw i64 %2138, %2134
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2141, i8* %2142, align 1, !tbaa !2450
  %2143 = load i64, i64* %RBP
  %2144 = sub i64 %2143, 8
  %2145 = load i64, i64* %RCX
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2144 to i64*
  store i64 %2145, i64* %2148
  %2149 = load i64, i64* %RAX
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 3
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RAX
  %2156 = mul i64 %2155, 8
  %2157 = add i64 %2156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 8
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2157 to i64*
  %2161 = load i64, i64* %2160
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 40
  %2164 = load i64, i64* %RAX
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2163 to i64*
  store i64 %2164, i64* %2167
  %2168 = load i64, i64* %PC
  %2169 = sub i64 %2168, 701
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 5
  store i64 %2171, i64* %PC
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2169, i64* %2172, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 12
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 7
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  store i32 19, i32* %2177
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 12
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i32*
  %2183 = load i32, i32* %2182
  %2184 = zext i32 %2183 to i64
  store i64 %2184, i64* %RDI, align 8, !tbaa !2428
  %2185 = load i64, i64* %PC
  %2186 = sub i64 %2185, 1034
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2192 = load i64, i64* %2191, align 8, !tbaa !2428
  %2193 = add i64 %2192, -8
  %2194 = inttoptr i64 %2193 to i64*
  store i64 %2188, i64* %2194
  store i64 %2193, i64* %2191, align 8, !tbaa !2428
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2186, i64* %2195, align 8, !tbaa !2428
  %2196 = load i64, i64* %PC
  %2197 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2196, %struct.Memory* %MEMORY.0)
  %2198 = load i64, i64* %RBP
  %2199 = sub i64 %2198, 8
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 4
  store i64 %2201, i64* %PC
  %2202 = inttoptr i64 %2199 to i64*
  %2203 = load i64, i64* %2202
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = load i64, i64* %RAX
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  store i64 %2204, i64* %RCX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RCX
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = add i64 4, %2207
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = icmp ult i64 %2210, %2207
  %2212 = icmp ult i64 %2210, 4
  %2213 = or i1 %2211, %2212
  %2214 = zext i1 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2214, i8* %2215, align 1, !tbaa !2432
  %2216 = trunc i64 %2210 to i32
  %2217 = and i32 %2216, 255
  %2218 = call i32 @llvm.ctpop.i32(i32 %2217) #16
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = xor i8 %2220, 1
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2221, i8* %2222, align 1, !tbaa !2446
  %2223 = xor i64 4, %2207
  %2224 = xor i64 %2223, %2210
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2227, i8* %2228, align 1, !tbaa !2447
  %2229 = icmp eq i64 %2210, 0
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2230, i8* %2231, align 1, !tbaa !2448
  %2232 = lshr i64 %2210, 63
  %2233 = trunc i64 %2232 to i8
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2233, i8* %2234, align 1, !tbaa !2449
  %2235 = lshr i64 %2207, 63
  %2236 = xor i64 %2232, %2235
  %2237 = add nuw nsw i64 %2236, %2232
  %2238 = icmp eq i64 %2237, 2
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2239, i8* %2240, align 1, !tbaa !2450
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 8
  %2243 = load i64, i64* %RCX
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2242 to i64*
  store i64 %2243, i64* %2246
  %2247 = load i64, i64* %RAX
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RAX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 8
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2255 to i64*
  %2259 = load i64, i64* %2258
  store i64 %2259, i64* %RAX, align 8, !tbaa !2428
  %2260 = load i64, i64* %RBP
  %2261 = sub i64 %2260, 40
  %2262 = load i64, i64* %RAX
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 4
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2261 to i64*
  store i64 %2262, i64* %2265
  %2266 = load i64, i64* %PC
  %2267 = sub i64 %2266, 951
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 5
  store i64 %2269, i64* %PC
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2267, i64* %2270, align 8, !tbaa !2428
  br label %block_400586

block_40068d:                                     ; preds = %block_400686, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400686 ]
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 12
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 3
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i32*
  %2276 = load i32, i32* %2275
  %2277 = zext i32 %2276 to i64
  store i64 %2277, i64* %RDI, align 8, !tbaa !2428
  %2278 = load i64, i64* %PC
  %2279 = sub i64 %2278, 384
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 5
  %2282 = load i64, i64* %PC
  %2283 = add i64 %2282, 5
  store i64 %2283, i64* %PC
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2285 = load i64, i64* %2284, align 8, !tbaa !2428
  %2286 = add i64 %2285, -8
  %2287 = inttoptr i64 %2286 to i64*
  store i64 %2281, i64* %2287
  store i64 %2286, i64* %2284, align 8, !tbaa !2428
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2279, i64* %2288, align 8, !tbaa !2428
  %2289 = load i64, i64* %PC
  %2290 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2289, %struct.Memory* %MEMORY.1)
  %2291 = load i64, i64* %RBP
  %2292 = sub i64 %2291, 8
  %2293 = load i64, i64* %PC
  %2294 = add i64 %2293, 4
  store i64 %2294, i64* %PC
  %2295 = inttoptr i64 %2292 to i64*
  %2296 = load i64, i64* %2295
  store i64 %2296, i64* %RAX, align 8, !tbaa !2428
  %2297 = load i64, i64* %RAX
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 3
  store i64 %2299, i64* %PC
  store i64 %2297, i64* %RCX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RCX
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 4
  store i64 %2302, i64* %PC
  %2303 = add i64 4, %2300
  store i64 %2303, i64* %RCX, align 8, !tbaa !2428
  %2304 = icmp ult i64 %2303, %2300
  %2305 = icmp ult i64 %2303, 4
  %2306 = or i1 %2304, %2305
  %2307 = zext i1 %2306 to i8
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2307, i8* %2308, align 1, !tbaa !2432
  %2309 = trunc i64 %2303 to i32
  %2310 = and i32 %2309, 255
  %2311 = call i32 @llvm.ctpop.i32(i32 %2310) #16
  %2312 = trunc i32 %2311 to i8
  %2313 = and i8 %2312, 1
  %2314 = xor i8 %2313, 1
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2314, i8* %2315, align 1, !tbaa !2446
  %2316 = xor i64 4, %2300
  %2317 = xor i64 %2316, %2303
  %2318 = lshr i64 %2317, 4
  %2319 = trunc i64 %2318 to i8
  %2320 = and i8 %2319, 1
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2320, i8* %2321, align 1, !tbaa !2447
  %2322 = icmp eq i64 %2303, 0
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2323, i8* %2324, align 1, !tbaa !2448
  %2325 = lshr i64 %2303, 63
  %2326 = trunc i64 %2325 to i8
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2326, i8* %2327, align 1, !tbaa !2449
  %2328 = lshr i64 %2300, 63
  %2329 = xor i64 %2325, %2328
  %2330 = add nuw nsw i64 %2329, %2325
  %2331 = icmp eq i64 %2330, 2
  %2332 = zext i1 %2331 to i8
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2332, i8* %2333, align 1, !tbaa !2450
  %2334 = load i64, i64* %RBP
  %2335 = sub i64 %2334, 8
  %2336 = load i64, i64* %RCX
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 4
  store i64 %2338, i64* %PC
  %2339 = inttoptr i64 %2335 to i64*
  store i64 %2336, i64* %2339
  %2340 = load i64, i64* %RAX
  %2341 = load i64, i64* %PC
  %2342 = add i64 %2341, 3
  store i64 %2342, i64* %PC
  %2343 = inttoptr i64 %2340 to i32*
  %2344 = load i32, i32* %2343
  %2345 = sext i32 %2344 to i64
  store i64 %2345, i64* %RAX, align 8, !tbaa !2428
  %2346 = load i64, i64* %RAX
  %2347 = mul i64 %2346, 8
  %2348 = add i64 %2347, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 8
  store i64 %2350, i64* %PC
  %2351 = inttoptr i64 %2348 to i64*
  %2352 = load i64, i64* %2351
  store i64 %2352, i64* %RAX, align 8, !tbaa !2428
  %2353 = load i64, i64* %RBP
  %2354 = sub i64 %2353, 40
  %2355 = load i64, i64* %RAX
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 4
  store i64 %2357, i64* %PC
  %2358 = inttoptr i64 %2354 to i64*
  store i64 %2355, i64* %2358
  %2359 = load i64, i64* %PC
  %2360 = sub i64 %2359, 301
  %2361 = load i64, i64* %PC
  %2362 = add i64 %2361, 5
  store i64 %2362, i64* %PC
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2360, i64* %2363, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2364 = load i64, i64* %RBP
  %2365 = sub i64 %2364, 12
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 7
  store i64 %2367, i64* %PC
  %2368 = inttoptr i64 %2365 to i32*
  store i32 1, i32* %2368
  %2369 = load i64, i64* %RBP
  %2370 = sub i64 %2369, 12
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 3
  store i64 %2372, i64* %PC
  %2373 = inttoptr i64 %2370 to i32*
  %2374 = load i32, i32* %2373
  %2375 = zext i32 %2374 to i64
  store i64 %2375, i64* %RDI, align 8, !tbaa !2428
  %2376 = load i64, i64* %PC
  %2377 = sub i64 %2376, 134
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 5
  store i64 %2381, i64* %PC
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2383 = load i64, i64* %2382, align 8, !tbaa !2428
  %2384 = add i64 %2383, -8
  %2385 = inttoptr i64 %2384 to i64*
  store i64 %2379, i64* %2385
  store i64 %2384, i64* %2382, align 8, !tbaa !2428
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2377, i64* %2386, align 8, !tbaa !2428
  %2387 = load i64, i64* %PC
  %2388 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2387, %struct.Memory* %MEMORY.0)
  %2389 = load i64, i64* %RBP
  %2390 = sub i64 %2389, 8
  %2391 = load i64, i64* %PC
  %2392 = add i64 %2391, 4
  store i64 %2392, i64* %PC
  %2393 = inttoptr i64 %2390 to i64*
  %2394 = load i64, i64* %2393
  store i64 %2394, i64* %RAX, align 8, !tbaa !2428
  %2395 = load i64, i64* %RAX
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 3
  store i64 %2397, i64* %PC
  store i64 %2395, i64* %RCX, align 8, !tbaa !2428
  %2398 = load i64, i64* %RCX
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 4
  store i64 %2400, i64* %PC
  %2401 = add i64 4, %2398
  store i64 %2401, i64* %RCX, align 8, !tbaa !2428
  %2402 = icmp ult i64 %2401, %2398
  %2403 = icmp ult i64 %2401, 4
  %2404 = or i1 %2402, %2403
  %2405 = zext i1 %2404 to i8
  %2406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2405, i8* %2406, align 1, !tbaa !2432
  %2407 = trunc i64 %2401 to i32
  %2408 = and i32 %2407, 255
  %2409 = call i32 @llvm.ctpop.i32(i32 %2408) #16
  %2410 = trunc i32 %2409 to i8
  %2411 = and i8 %2410, 1
  %2412 = xor i8 %2411, 1
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2412, i8* %2413, align 1, !tbaa !2446
  %2414 = xor i64 4, %2398
  %2415 = xor i64 %2414, %2401
  %2416 = lshr i64 %2415, 4
  %2417 = trunc i64 %2416 to i8
  %2418 = and i8 %2417, 1
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2418, i8* %2419, align 1, !tbaa !2447
  %2420 = icmp eq i64 %2401, 0
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2421, i8* %2422, align 1, !tbaa !2448
  %2423 = lshr i64 %2401, 63
  %2424 = trunc i64 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2424, i8* %2425, align 1, !tbaa !2449
  %2426 = lshr i64 %2398, 63
  %2427 = xor i64 %2423, %2426
  %2428 = add nuw nsw i64 %2427, %2423
  %2429 = icmp eq i64 %2428, 2
  %2430 = zext i1 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2430, i8* %2431, align 1, !tbaa !2450
  %2432 = load i64, i64* %RBP
  %2433 = sub i64 %2432, 8
  %2434 = load i64, i64* %RCX
  %2435 = load i64, i64* %PC
  %2436 = add i64 %2435, 4
  store i64 %2436, i64* %PC
  %2437 = inttoptr i64 %2433 to i64*
  store i64 %2434, i64* %2437
  %2438 = load i64, i64* %RAX
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 3
  store i64 %2440, i64* %PC
  %2441 = inttoptr i64 %2438 to i32*
  %2442 = load i32, i32* %2441
  %2443 = sext i32 %2442 to i64
  store i64 %2443, i64* %RAX, align 8, !tbaa !2428
  %2444 = load i64, i64* %RAX
  %2445 = mul i64 %2444, 8
  %2446 = add i64 %2445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 8
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RAX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 40
  %2453 = load i64, i64* %RAX
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 4
  store i64 %2455, i64* %PC
  %2456 = inttoptr i64 %2452 to i64*
  store i64 %2453, i64* %2456
  %2457 = load i64, i64* %PC
  %2458 = sub i64 %2457, 51
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 5
  store i64 %2460, i64* %PC
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2458, i64* %2461, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2462 = load i64, i64* %RBP
  %2463 = sub i64 %2462, 12
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 7
  store i64 %2465, i64* %PC
  %2466 = inttoptr i64 %2463 to i32*
  store i32 24, i32* %2466
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 12
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 3
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i32*
  %2472 = load i32, i32* %2471
  %2473 = zext i32 %2472 to i64
  store i64 %2473, i64* %RDI, align 8, !tbaa !2428
  %2474 = load i64, i64* %PC
  %2475 = sub i64 %2474, 1284
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 5
  store i64 %2479, i64* %PC
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2481 = load i64, i64* %2480, align 8, !tbaa !2428
  %2482 = add i64 %2481, -8
  %2483 = inttoptr i64 %2482 to i64*
  store i64 %2477, i64* %2483
  store i64 %2482, i64* %2480, align 8, !tbaa !2428
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2475, i64* %2484, align 8, !tbaa !2428
  %2485 = load i64, i64* %PC
  %2486 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2485, %struct.Memory* %MEMORY.0)
  %2487 = load i64, i64* %RBP
  %2488 = sub i64 %2487, 8
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 4
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i64*
  %2492 = load i64, i64* %2491
  store i64 %2492, i64* %RAX, align 8, !tbaa !2428
  %2493 = load i64, i64* %RAX
  %2494 = load i64, i64* %PC
  %2495 = add i64 %2494, 3
  store i64 %2495, i64* %PC
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2496 = load i64, i64* %RCX
  %2497 = load i64, i64* %PC
  %2498 = add i64 %2497, 4
  store i64 %2498, i64* %PC
  %2499 = add i64 4, %2496
  store i64 %2499, i64* %RCX, align 8, !tbaa !2428
  %2500 = icmp ult i64 %2499, %2496
  %2501 = icmp ult i64 %2499, 4
  %2502 = or i1 %2500, %2501
  %2503 = zext i1 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2503, i8* %2504, align 1, !tbaa !2432
  %2505 = trunc i64 %2499 to i32
  %2506 = and i32 %2505, 255
  %2507 = call i32 @llvm.ctpop.i32(i32 %2506) #16
  %2508 = trunc i32 %2507 to i8
  %2509 = and i8 %2508, 1
  %2510 = xor i8 %2509, 1
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2510, i8* %2511, align 1, !tbaa !2446
  %2512 = xor i64 4, %2496
  %2513 = xor i64 %2512, %2499
  %2514 = lshr i64 %2513, 4
  %2515 = trunc i64 %2514 to i8
  %2516 = and i8 %2515, 1
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2516, i8* %2517, align 1, !tbaa !2447
  %2518 = icmp eq i64 %2499, 0
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2519, i8* %2520, align 1, !tbaa !2448
  %2521 = lshr i64 %2499, 63
  %2522 = trunc i64 %2521 to i8
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2522, i8* %2523, align 1, !tbaa !2449
  %2524 = lshr i64 %2496, 63
  %2525 = xor i64 %2521, %2524
  %2526 = add nuw nsw i64 %2525, %2521
  %2527 = icmp eq i64 %2526, 2
  %2528 = zext i1 %2527 to i8
  %2529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2528, i8* %2529, align 1, !tbaa !2450
  %2530 = load i64, i64* %RBP
  %2531 = sub i64 %2530, 8
  %2532 = load i64, i64* %RCX
  %2533 = load i64, i64* %PC
  %2534 = add i64 %2533, 4
  store i64 %2534, i64* %PC
  %2535 = inttoptr i64 %2531 to i64*
  store i64 %2532, i64* %2535
  %2536 = load i64, i64* %RAX
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 3
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  store i64 %2541, i64* %RAX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RAX
  %2543 = mul i64 %2542, 8
  %2544 = add i64 %2543, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 8
  store i64 %2546, i64* %PC
  %2547 = inttoptr i64 %2544 to i64*
  %2548 = load i64, i64* %2547
  store i64 %2548, i64* %RAX, align 8, !tbaa !2428
  %2549 = load i64, i64* %RBP
  %2550 = sub i64 %2549, 40
  %2551 = load i64, i64* %RAX
  %2552 = load i64, i64* %PC
  %2553 = add i64 %2552, 4
  store i64 %2553, i64* %PC
  %2554 = inttoptr i64 %2550 to i64*
  store i64 %2551, i64* %2554
  %2555 = load i64, i64* %PC
  %2556 = sub i64 %2555, 1201
  %2557 = load i64, i64* %PC
  %2558 = add i64 %2557, 5
  store i64 %2558, i64* %PC
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2556, i64* %2559, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2560 = load i64, i64* %RBP
  %2561 = sub i64 %2560, 12
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 7
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i32*
  store i32 6, i32* %2564
  br label %block_40068d

block_400b04:                                     ; preds = %block_400586
  %2565 = load i64, i64* %RBP
  %2566 = sub i64 %2565, 12
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 7
  store i64 %2568, i64* %PC
  %2569 = inttoptr i64 %2566 to i32*
  store i32 29, i32* %2569
  %2570 = load i64, i64* %PC
  %2571 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2570, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2571

block_400780:                                     ; preds = %block_400586
  %2572 = load i64, i64* %RBP
  %2573 = sub i64 %2572, 12
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 7
  store i64 %2575, i64* %PC
  %2576 = inttoptr i64 %2573 to i32*
  store i32 11, i32* %2576
  %2577 = load i64, i64* %PC
  %2578 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2577, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2578

; <label>:2579:                                   ; preds = %block_400586
  %2580 = load i64, i64* %PC
  %2581 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2580, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2581
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b0b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400b0b

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.0)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 15, i32* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 834
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.0)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 8
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 3
  store i64 %1194, i64* %PC
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = add i64 4, %1195
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1195
  %1200 = icmp ult i64 %1198, 4
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1202, i8* %1203, align 1, !tbaa !2432
  %1204 = trunc i64 %1198 to i32
  %1205 = and i32 %1204, 255
  %1206 = call i32 @llvm.ctpop.i32(i32 %1205) #16
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1209, i8* %1210, align 1, !tbaa !2446
  %1211 = xor i64 4, %1195
  %1212 = xor i64 %1211, %1198
  %1213 = lshr i64 %1212, 4
  %1214 = trunc i64 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1215, i8* %1216, align 1, !tbaa !2447
  %1217 = icmp eq i64 %1198, 0
  %1218 = zext i1 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1218, i8* %1219, align 1, !tbaa !2448
  %1220 = lshr i64 %1198, 63
  %1221 = trunc i64 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1221, i8* %1222, align 1, !tbaa !2449
  %1223 = lshr i64 %1195, 63
  %1224 = xor i64 %1220, %1223
  %1225 = add nuw nsw i64 %1224, %1220
  %1226 = icmp eq i64 %1225, 2
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1227, i8* %1228, align 1, !tbaa !2450
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 8
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %RAX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = mul i64 %1241, 8
  %1243 = add i64 %1242, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 8
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 40
  %1250 = load i64, i64* %RAX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1249 to i64*
  store i64 %1250, i64* %1253
  %1254 = load i64, i64* %PC
  %1255 = sub i64 %1254, 751
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 5
  store i64 %1257, i64* %PC
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1255, i64* %1258, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 7
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  store i32 20, i32* %1263
  %1264 = load i64, i64* %PC
  %1265 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1264, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1265

block_4005be:                                     ; preds = %block_400586
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 12
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 7
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i32*
  store i32 2, i32* %1270
  %1271 = load i64, i64* %PC
  %1272 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1271, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1272

block_4006b8:                                     ; preds = %block_400586
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 12
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 7
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  store i32 7, i32* %1277
  %1278 = load i64, i64* %RBP
  %1279 = sub i64 %1278, 12
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RDI, align 8, !tbaa !2428
  %1285 = load i64, i64* %PC
  %1286 = sub i64 %1285, 434
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 5
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 5
  store i64 %1290, i64* %PC
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1292 = load i64, i64* %1291, align 8, !tbaa !2428
  %1293 = add i64 %1292, -8
  %1294 = inttoptr i64 %1293 to i64*
  store i64 %1288, i64* %1294
  store i64 %1293, i64* %1291, align 8, !tbaa !2428
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1286, i64* %1295, align 8, !tbaa !2428
  %1296 = load i64, i64* %PC
  %1297 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1296, %struct.Memory* %MEMORY.0)
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 8
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i64*
  %1303 = load i64, i64* %1302
  store i64 %1303, i64* %RAX, align 8, !tbaa !2428
  %1304 = load i64, i64* %RAX
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1307 = load i64, i64* %RCX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = add i64 4, %1307
  store i64 %1310, i64* %RCX, align 8, !tbaa !2428
  %1311 = icmp ult i64 %1310, %1307
  %1312 = icmp ult i64 %1310, 4
  %1313 = or i1 %1311, %1312
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1314, i8* %1315, align 1, !tbaa !2432
  %1316 = trunc i64 %1310 to i32
  %1317 = and i32 %1316, 255
  %1318 = call i32 @llvm.ctpop.i32(i32 %1317) #16
  %1319 = trunc i32 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = xor i8 %1320, 1
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1321, i8* %1322, align 1, !tbaa !2446
  %1323 = xor i64 4, %1307
  %1324 = xor i64 %1323, %1310
  %1325 = lshr i64 %1324, 4
  %1326 = trunc i64 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1327, i8* %1328, align 1, !tbaa !2447
  %1329 = icmp eq i64 %1310, 0
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1330, i8* %1331, align 1, !tbaa !2448
  %1332 = lshr i64 %1310, 63
  %1333 = trunc i64 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1333, i8* %1334, align 1, !tbaa !2449
  %1335 = lshr i64 %1307, 63
  %1336 = xor i64 %1332, %1335
  %1337 = add nuw nsw i64 %1336, %1332
  %1338 = icmp eq i64 %1337, 2
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1339, i8* %1340, align 1, !tbaa !2450
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 8
  %1343 = load i64, i64* %RCX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %RAX
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = sext i32 %1351 to i64
  store i64 %1352, i64* %RAX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RAX
  %1354 = mul i64 %1353, 8
  %1355 = add i64 %1354, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 8
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i64*
  %1359 = load i64, i64* %1358
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 40
  %1362 = load i64, i64* %RAX
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1361 to i64*
  store i64 %1362, i64* %1365
  %1366 = load i64, i64* %PC
  %1367 = sub i64 %1366, 351
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1367, i64* %1370, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 12
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 7
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  store i32 30, i32* %1375
  %1376 = load i64, i64* %RBP
  %1377 = sub i64 %1376, 12
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 3
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to i32*
  %1381 = load i32, i32* %1380
  %1382 = zext i32 %1381 to i64
  store i64 %1382, i64* %RDI, align 8, !tbaa !2428
  %1383 = load i64, i64* %PC
  %1384 = sub i64 %1383, 1584
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 5
  store i64 %1388, i64* %PC
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1390 = load i64, i64* %1389, align 8, !tbaa !2428
  %1391 = add i64 %1390, -8
  %1392 = inttoptr i64 %1391 to i64*
  store i64 %1386, i64* %1392
  store i64 %1391, i64* %1389, align 8, !tbaa !2428
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1384, i64* %1393, align 8, !tbaa !2428
  %1394 = load i64, i64* %PC
  %1395 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1394, %struct.Memory* %MEMORY.0)
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 8
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 4
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i64*
  %1401 = load i64, i64* %1400
  store i64 %1401, i64* %RAX, align 8, !tbaa !2428
  %1402 = load i64, i64* %RAX
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 3
  store i64 %1404, i64* %PC
  store i64 %1402, i64* %RCX, align 8, !tbaa !2428
  %1405 = load i64, i64* %RCX
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 4
  store i64 %1407, i64* %PC
  %1408 = add i64 4, %1405
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = icmp ult i64 %1408, %1405
  %1410 = icmp ult i64 %1408, 4
  %1411 = or i1 %1409, %1410
  %1412 = zext i1 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1412, i8* %1413, align 1, !tbaa !2432
  %1414 = trunc i64 %1408 to i32
  %1415 = and i32 %1414, 255
  %1416 = call i32 @llvm.ctpop.i32(i32 %1415) #16
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = xor i8 %1418, 1
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1419, i8* %1420, align 1, !tbaa !2446
  %1421 = xor i64 4, %1405
  %1422 = xor i64 %1421, %1408
  %1423 = lshr i64 %1422, 4
  %1424 = trunc i64 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1425, i8* %1426, align 1, !tbaa !2447
  %1427 = icmp eq i64 %1408, 0
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1428, i8* %1429, align 1, !tbaa !2448
  %1430 = lshr i64 %1408, 63
  %1431 = trunc i64 %1430 to i8
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1431, i8* %1432, align 1, !tbaa !2449
  %1433 = lshr i64 %1405, 63
  %1434 = xor i64 %1430, %1433
  %1435 = add nuw nsw i64 %1434, %1430
  %1436 = icmp eq i64 %1435, 2
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1437, i8* %1438, align 1, !tbaa !2450
  %1439 = load i64, i64* %RBP
  %1440 = sub i64 %1439, 8
  %1441 = load i64, i64* %RCX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1440 to i64*
  store i64 %1441, i64* %1444
  %1445 = load i64, i64* %RAX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 3
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1445 to i32*
  %1449 = load i32, i32* %1448
  %1450 = sext i32 %1449 to i64
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RAX
  %1452 = mul i64 %1451, 8
  %1453 = add i64 %1452, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 8
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to i64*
  %1457 = load i64, i64* %1456
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = load i64, i64* %RBP
  %1459 = sub i64 %1458, 40
  %1460 = load i64, i64* %RAX
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 4
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1459 to i64*
  store i64 %1460, i64* %1463
  %1464 = load i64, i64* %PC
  %1465 = sub i64 %1464, 1501
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 5
  store i64 %1467, i64* %PC
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1465, i64* %1468, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1469 = load i64, i64* %RBP
  %1470 = sub i64 %1469, 12
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 7
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i32*
  store i32 12, i32* %1473
  %1474 = load i64, i64* %RBP
  %1475 = sub i64 %1474, 12
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 3
  store i64 %1477, i64* %PC
  %1478 = inttoptr i64 %1475 to i32*
  %1479 = load i32, i32* %1478
  %1480 = zext i32 %1479 to i64
  store i64 %1480, i64* %RDI, align 8, !tbaa !2428
  %1481 = load i64, i64* %PC
  %1482 = sub i64 %1481, 684
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 5
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 5
  store i64 %1486, i64* %PC
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1488 = load i64, i64* %1487, align 8, !tbaa !2428
  %1489 = add i64 %1488, -8
  %1490 = inttoptr i64 %1489 to i64*
  store i64 %1484, i64* %1490
  store i64 %1489, i64* %1487, align 8, !tbaa !2428
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1482, i64* %1491, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1492, %struct.Memory* %MEMORY.0)
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 8
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RAX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RAX
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  store i64 %1500, i64* %RCX, align 8, !tbaa !2428
  %1503 = load i64, i64* %RCX
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 4
  store i64 %1505, i64* %PC
  %1506 = add i64 4, %1503
  store i64 %1506, i64* %RCX, align 8, !tbaa !2428
  %1507 = icmp ult i64 %1506, %1503
  %1508 = icmp ult i64 %1506, 4
  %1509 = or i1 %1507, %1508
  %1510 = zext i1 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1510, i8* %1511, align 1, !tbaa !2432
  %1512 = trunc i64 %1506 to i32
  %1513 = and i32 %1512, 255
  %1514 = call i32 @llvm.ctpop.i32(i32 %1513) #16
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1517, i8* %1518, align 1, !tbaa !2446
  %1519 = xor i64 4, %1503
  %1520 = xor i64 %1519, %1506
  %1521 = lshr i64 %1520, 4
  %1522 = trunc i64 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1523, i8* %1524, align 1, !tbaa !2447
  %1525 = icmp eq i64 %1506, 0
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1526, i8* %1527, align 1, !tbaa !2448
  %1528 = lshr i64 %1506, 63
  %1529 = trunc i64 %1528 to i8
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1529, i8* %1530, align 1, !tbaa !2449
  %1531 = lshr i64 %1503, 63
  %1532 = xor i64 %1528, %1531
  %1533 = add nuw nsw i64 %1532, %1528
  %1534 = icmp eq i64 %1533, 2
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1535, i8* %1536, align 1, !tbaa !2450
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 8
  %1539 = load i64, i64* %RCX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1538 to i64*
  store i64 %1539, i64* %1542
  %1543 = load i64, i64* %RAX
  %1544 = load i64, i64* %PC
  %1545 = add i64 %1544, 3
  store i64 %1545, i64* %PC
  %1546 = inttoptr i64 %1543 to i32*
  %1547 = load i32, i32* %1546
  %1548 = sext i32 %1547 to i64
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RAX
  %1550 = mul i64 %1549, 8
  %1551 = add i64 %1550, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 8
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1551 to i64*
  %1555 = load i64, i64* %1554
  store i64 %1555, i64* %RAX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RBP
  %1557 = sub i64 %1556, 40
  %1558 = load i64, i64* %RAX
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 4
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1557 to i64*
  store i64 %1558, i64* %1561
  %1562 = load i64, i64* %PC
  %1563 = sub i64 %1562, 601
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1563, i64* %1566, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 12
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 7
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  store i32 17, i32* %1571
  %1572 = load i64, i64* %RBP
  %1573 = sub i64 %1572, 12
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 3
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1573 to i32*
  %1577 = load i32, i32* %1576
  %1578 = zext i32 %1577 to i64
  store i64 %1578, i64* %RDI, align 8, !tbaa !2428
  %1579 = load i64, i64* %PC
  %1580 = sub i64 %1579, 934
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 5
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 5
  store i64 %1584, i64* %PC
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1586 = load i64, i64* %1585, align 8, !tbaa !2428
  %1587 = add i64 %1586, -8
  %1588 = inttoptr i64 %1587 to i64*
  store i64 %1582, i64* %1588
  store i64 %1587, i64* %1585, align 8, !tbaa !2428
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1580, i64* %1589, align 8, !tbaa !2428
  %1590 = load i64, i64* %PC
  %1591 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1590, %struct.Memory* %MEMORY.0)
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 8
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 4
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i64*
  %1597 = load i64, i64* %1596
  store i64 %1597, i64* %RAX, align 8, !tbaa !2428
  %1598 = load i64, i64* %RAX
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  store i64 %1598, i64* %RCX, align 8, !tbaa !2428
  %1601 = load i64, i64* %RCX
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = add i64 4, %1601
  store i64 %1604, i64* %RCX, align 8, !tbaa !2428
  %1605 = icmp ult i64 %1604, %1601
  %1606 = icmp ult i64 %1604, 4
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1608, i8* %1609, align 1, !tbaa !2432
  %1610 = trunc i64 %1604 to i32
  %1611 = and i32 %1610, 255
  %1612 = call i32 @llvm.ctpop.i32(i32 %1611) #16
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1615, i8* %1616, align 1, !tbaa !2446
  %1617 = xor i64 4, %1601
  %1618 = xor i64 %1617, %1604
  %1619 = lshr i64 %1618, 4
  %1620 = trunc i64 %1619 to i8
  %1621 = and i8 %1620, 1
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1621, i8* %1622, align 1, !tbaa !2447
  %1623 = icmp eq i64 %1604, 0
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1624, i8* %1625, align 1, !tbaa !2448
  %1626 = lshr i64 %1604, 63
  %1627 = trunc i64 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1627, i8* %1628, align 1, !tbaa !2449
  %1629 = lshr i64 %1601, 63
  %1630 = xor i64 %1626, %1629
  %1631 = add nuw nsw i64 %1630, %1626
  %1632 = icmp eq i64 %1631, 2
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1633, i8* %1634, align 1, !tbaa !2450
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 8
  %1637 = load i64, i64* %RCX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1636 to i64*
  store i64 %1637, i64* %1640
  %1641 = load i64, i64* %RAX
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 3
  store i64 %1643, i64* %PC
  %1644 = inttoptr i64 %1641 to i32*
  %1645 = load i32, i32* %1644
  %1646 = sext i32 %1645 to i64
  store i64 %1646, i64* %RAX, align 8, !tbaa !2428
  %1647 = load i64, i64* %RAX
  %1648 = mul i64 %1647, 8
  %1649 = add i64 %1648, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 8
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1649 to i64*
  %1653 = load i64, i64* %1652
  store i64 %1653, i64* %RAX, align 8, !tbaa !2428
  %1654 = load i64, i64* %RBP
  %1655 = sub i64 %1654, 40
  %1656 = load i64, i64* %RAX
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 4
  store i64 %1658, i64* %PC
  %1659 = inttoptr i64 %1655 to i64*
  store i64 %1656, i64* %1659
  %1660 = load i64, i64* %PC
  %1661 = sub i64 %1660, 851
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 5
  store i64 %1663, i64* %PC
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1661, i64* %1664, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 12
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 7
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  store i32 22, i32* %1669
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 12
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RDI, align 8, !tbaa !2428
  %1677 = load i64, i64* %PC
  %1678 = sub i64 %1677, 1184
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 5
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 5
  store i64 %1682, i64* %PC
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1684 = load i64, i64* %1683, align 8, !tbaa !2428
  %1685 = add i64 %1684, -8
  %1686 = inttoptr i64 %1685 to i64*
  store i64 %1680, i64* %1686
  store i64 %1685, i64* %1683, align 8, !tbaa !2428
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1678, i64* %1687, align 8, !tbaa !2428
  %1688 = load i64, i64* %PC
  %1689 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1688, %struct.Memory* %MEMORY.0)
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 8
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 4
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i64*
  %1695 = load i64, i64* %1694
  store i64 %1695, i64* %RAX, align 8, !tbaa !2428
  %1696 = load i64, i64* %RAX
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  store i64 %1696, i64* %RCX, align 8, !tbaa !2428
  %1699 = load i64, i64* %RCX
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = add i64 4, %1699
  store i64 %1702, i64* %RCX, align 8, !tbaa !2428
  %1703 = icmp ult i64 %1702, %1699
  %1704 = icmp ult i64 %1702, 4
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1706, i8* %1707, align 1, !tbaa !2432
  %1708 = trunc i64 %1702 to i32
  %1709 = and i32 %1708, 255
  %1710 = call i32 @llvm.ctpop.i32(i32 %1709) #16
  %1711 = trunc i32 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = xor i8 %1712, 1
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1713, i8* %1714, align 1, !tbaa !2446
  %1715 = xor i64 4, %1699
  %1716 = xor i64 %1715, %1702
  %1717 = lshr i64 %1716, 4
  %1718 = trunc i64 %1717 to i8
  %1719 = and i8 %1718, 1
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1719, i8* %1720, align 1, !tbaa !2447
  %1721 = icmp eq i64 %1702, 0
  %1722 = zext i1 %1721 to i8
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1722, i8* %1723, align 1, !tbaa !2448
  %1724 = lshr i64 %1702, 63
  %1725 = trunc i64 %1724 to i8
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1725, i8* %1726, align 1, !tbaa !2449
  %1727 = lshr i64 %1699, 63
  %1728 = xor i64 %1724, %1727
  %1729 = add nuw nsw i64 %1728, %1724
  %1730 = icmp eq i64 %1729, 2
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1731, i8* %1732, align 1, !tbaa !2450
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 8
  %1735 = load i64, i64* %RCX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1734 to i64*
  store i64 %1735, i64* %1738
  %1739 = load i64, i64* %RAX
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 3
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742
  %1744 = sext i32 %1743 to i64
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RAX
  %1746 = mul i64 %1745, 8
  %1747 = add i64 %1746, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 8
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RAX, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 40
  %1754 = load i64, i64* %RAX
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1753 to i64*
  store i64 %1754, i64* %1757
  %1758 = load i64, i64* %PC
  %1759 = sub i64 %1758, 1101
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 5
  store i64 %1761, i64* %PC
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1759, i64* %1762, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 12
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  store i32 25, i32* %1767
  %1768 = load i64, i64* %PC
  %1769 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1768, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1769

block_400586:                                     ; preds = %block_400686, %block_400a0a, %block_400b0b, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400848, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %2388, %block_400b0b ], [ %1689, %block_4009a6 ], [ %1591, %block_4008ac ], [ %1493, %block_4007b2 ], [ %1395, %block_400b36 ], [ %1297, %block_4006b8 ], [ %1185, %block_400848 ], [ %1087, %block_40074e ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2295, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %1805, %block_400622 ], [ %1903, %block_400aa0 ], [ %2001, %block_40071c ], [ %2099, %block_400816 ], [ %2197, %block_400910 ], [ %2486, %block_400a0a ], [ %2584, %block_400686 ]
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 40
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 4
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i64*
  %1775 = load i64, i64* %1774
  store i64 %1775, i64* %RAX, align 8, !tbaa !2428
  %1776 = load i64, i64* %RAX
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 2
  store i64 %1778, i64* %PC
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1776, i64* %1779, align 8, !tbaa !2428
  %1780 = load i64, i64* %PC
  switch i64 %1780, label %2670 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400622:                                     ; preds = %block_400586
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 12
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 7
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i32*
  store i32 4, i32* %1785
  %1786 = load i64, i64* %RBP
  %1787 = sub i64 %1786, 12
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to i32*
  %1791 = load i32, i32* %1790
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RDI, align 8, !tbaa !2428
  %1793 = load i64, i64* %PC
  %1794 = sub i64 %1793, 284
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1800 = load i64, i64* %1799, align 8, !tbaa !2428
  %1801 = add i64 %1800, -8
  %1802 = inttoptr i64 %1801 to i64*
  store i64 %1796, i64* %1802
  store i64 %1801, i64* %1799, align 8, !tbaa !2428
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1794, i64* %1803, align 8, !tbaa !2428
  %1804 = load i64, i64* %PC
  %1805 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1804, %struct.Memory* %MEMORY.0)
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 8
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RAX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RAX
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 3
  store i64 %1814, i64* %PC
  store i64 %1812, i64* %RCX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RCX
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 4
  store i64 %1817, i64* %PC
  %1818 = add i64 4, %1815
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = icmp ult i64 %1818, %1815
  %1820 = icmp ult i64 %1818, 4
  %1821 = or i1 %1819, %1820
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1822, i8* %1823, align 1, !tbaa !2432
  %1824 = trunc i64 %1818 to i32
  %1825 = and i32 %1824, 255
  %1826 = call i32 @llvm.ctpop.i32(i32 %1825) #16
  %1827 = trunc i32 %1826 to i8
  %1828 = and i8 %1827, 1
  %1829 = xor i8 %1828, 1
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1829, i8* %1830, align 1, !tbaa !2446
  %1831 = xor i64 4, %1815
  %1832 = xor i64 %1831, %1818
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1835, i8* %1836, align 1, !tbaa !2447
  %1837 = icmp eq i64 %1818, 0
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1838, i8* %1839, align 1, !tbaa !2448
  %1840 = lshr i64 %1818, 63
  %1841 = trunc i64 %1840 to i8
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1841, i8* %1842, align 1, !tbaa !2449
  %1843 = lshr i64 %1815, 63
  %1844 = xor i64 %1840, %1843
  %1845 = add nuw nsw i64 %1844, %1840
  %1846 = icmp eq i64 %1845, 2
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1847, i8* %1848, align 1, !tbaa !2450
  %1849 = load i64, i64* %RBP
  %1850 = sub i64 %1849, 8
  %1851 = load i64, i64* %RCX
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1850 to i64*
  store i64 %1851, i64* %1854
  %1855 = load i64, i64* %RAX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  %1859 = load i32, i32* %1858
  %1860 = sext i32 %1859 to i64
  store i64 %1860, i64* %RAX, align 8, !tbaa !2428
  %1861 = load i64, i64* %RAX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 8
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i64*
  %1867 = load i64, i64* %1866
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 40
  %1870 = load i64, i64* %RAX
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1869 to i64*
  store i64 %1870, i64* %1873
  %1874 = load i64, i64* %PC
  %1875 = sub i64 %1874, 201
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1875, i64* %1878, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 12
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 7
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i32*
  store i32 27, i32* %1883
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 12
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i32*
  %1889 = load i32, i32* %1888
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RDI, align 8, !tbaa !2428
  %1891 = load i64, i64* %PC
  %1892 = sub i64 %1891, 1434
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 5
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1898 = load i64, i64* %1897, align 8, !tbaa !2428
  %1899 = add i64 %1898, -8
  %1900 = inttoptr i64 %1899 to i64*
  store i64 %1894, i64* %1900
  store i64 %1899, i64* %1897, align 8, !tbaa !2428
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1892, i64* %1901, align 8, !tbaa !2428
  %1902 = load i64, i64* %PC
  %1903 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1902, %struct.Memory* %MEMORY.0)
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 8
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 4
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RAX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RAX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 3
  store i64 %1912, i64* %PC
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1913 = load i64, i64* %RCX
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = add i64 4, %1913
  store i64 %1916, i64* %RCX, align 8, !tbaa !2428
  %1917 = icmp ult i64 %1916, %1913
  %1918 = icmp ult i64 %1916, 4
  %1919 = or i1 %1917, %1918
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1920, i8* %1921, align 1, !tbaa !2432
  %1922 = trunc i64 %1916 to i32
  %1923 = and i32 %1922, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = xor i64 4, %1913
  %1930 = xor i64 %1929, %1916
  %1931 = lshr i64 %1930, 4
  %1932 = trunc i64 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1933, i8* %1934, align 1, !tbaa !2447
  %1935 = icmp eq i64 %1916, 0
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1936, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1916, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = lshr i64 %1913, 63
  %1942 = xor i64 %1938, %1941
  %1943 = add nuw nsw i64 %1942, %1938
  %1944 = icmp eq i64 %1943, 2
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1945, i8* %1946, align 1, !tbaa !2450
  %1947 = load i64, i64* %RBP
  %1948 = sub i64 %1947, 8
  %1949 = load i64, i64* %RCX
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1948 to i64*
  store i64 %1949, i64* %1952
  %1953 = load i64, i64* %RAX
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 3
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  %1957 = load i32, i32* %1956
  %1958 = sext i32 %1957 to i64
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RAX
  %1960 = mul i64 %1959, 8
  %1961 = add i64 %1960, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 40
  %1968 = load i64, i64* %RAX
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 4
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1967 to i64*
  store i64 %1968, i64* %1971
  %1972 = load i64, i64* %PC
  %1973 = sub i64 %1972, 1351
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 5
  store i64 %1975, i64* %PC
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1973, i64* %1976, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 12
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 7
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i32*
  store i32 9, i32* %1981
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 12
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  %1986 = inttoptr i64 %1983 to i32*
  %1987 = load i32, i32* %1986
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RDI, align 8, !tbaa !2428
  %1989 = load i64, i64* %PC
  %1990 = sub i64 %1989, 534
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1996 = load i64, i64* %1995, align 8, !tbaa !2428
  %1997 = add i64 %1996, -8
  %1998 = inttoptr i64 %1997 to i64*
  store i64 %1992, i64* %1998
  store i64 %1997, i64* %1995, align 8, !tbaa !2428
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1990, i64* %1999, align 8, !tbaa !2428
  %2000 = load i64, i64* %PC
  %2001 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2000, %struct.Memory* %MEMORY.0)
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 8
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i64*
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = load i64, i64* %RAX
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 3
  store i64 %2010, i64* %PC
  store i64 %2008, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RCX
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = add i64 4, %2011
  store i64 %2014, i64* %RCX, align 8, !tbaa !2428
  %2015 = icmp ult i64 %2014, %2011
  %2016 = icmp ult i64 %2014, 4
  %2017 = or i1 %2015, %2016
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2018, i8* %2019, align 1, !tbaa !2432
  %2020 = trunc i64 %2014 to i32
  %2021 = and i32 %2020, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = xor i64 4, %2011
  %2028 = xor i64 %2027, %2014
  %2029 = lshr i64 %2028, 4
  %2030 = trunc i64 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2031, i8* %2032, align 1, !tbaa !2447
  %2033 = icmp eq i64 %2014, 0
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2034, i8* %2035, align 1, !tbaa !2448
  %2036 = lshr i64 %2014, 63
  %2037 = trunc i64 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2037, i8* %2038, align 1, !tbaa !2449
  %2039 = lshr i64 %2011, 63
  %2040 = xor i64 %2036, %2039
  %2041 = add nuw nsw i64 %2040, %2036
  %2042 = icmp eq i64 %2041, 2
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2044, align 1, !tbaa !2450
  %2045 = load i64, i64* %RBP
  %2046 = sub i64 %2045, 8
  %2047 = load i64, i64* %RCX
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 4
  store i64 %2049, i64* %PC
  %2050 = inttoptr i64 %2046 to i64*
  store i64 %2047, i64* %2050
  %2051 = load i64, i64* %RAX
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 3
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = mul i64 %2057, 8
  %2059 = add i64 %2058, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 8
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to i64*
  %2063 = load i64, i64* %2062
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RBP
  %2065 = sub i64 %2064, 40
  %2066 = load i64, i64* %RAX
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 4
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2065 to i64*
  store i64 %2066, i64* %2069
  %2070 = load i64, i64* %PC
  %2071 = sub i64 %2070, 451
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 5
  store i64 %2073, i64* %PC
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2071, i64* %2074, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 12
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 7
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i32*
  store i32 14, i32* %2079
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 12
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2081 to i32*
  %2085 = load i32, i32* %2084
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDI, align 8, !tbaa !2428
  %2087 = load i64, i64* %PC
  %2088 = sub i64 %2087, 784
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  store i64 %2092, i64* %PC
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2094 = load i64, i64* %2093, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2090, i64* %2096
  store i64 %2095, i64* %2093, align 8, !tbaa !2428
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2088, i64* %2097, align 8, !tbaa !2428
  %2098 = load i64, i64* %PC
  %2099 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2098, %struct.Memory* %MEMORY.0)
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 8
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 4
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to i64*
  %2105 = load i64, i64* %2104
  store i64 %2105, i64* %RAX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2109 = load i64, i64* %RCX
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = add i64 4, %2109
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = icmp ult i64 %2112, %2109
  %2114 = icmp ult i64 %2112, 4
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2116, i8* %2117, align 1, !tbaa !2432
  %2118 = trunc i64 %2112 to i32
  %2119 = and i32 %2118, 255
  %2120 = call i32 @llvm.ctpop.i32(i32 %2119) #16
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = xor i8 %2122, 1
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2123, i8* %2124, align 1, !tbaa !2446
  %2125 = xor i64 4, %2109
  %2126 = xor i64 %2125, %2112
  %2127 = lshr i64 %2126, 4
  %2128 = trunc i64 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2129, i8* %2130, align 1, !tbaa !2447
  %2131 = icmp eq i64 %2112, 0
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2132, i8* %2133, align 1, !tbaa !2448
  %2134 = lshr i64 %2112, 63
  %2135 = trunc i64 %2134 to i8
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2135, i8* %2136, align 1, !tbaa !2449
  %2137 = lshr i64 %2109, 63
  %2138 = xor i64 %2134, %2137
  %2139 = add nuw nsw i64 %2138, %2134
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2141, i8* %2142, align 1, !tbaa !2450
  %2143 = load i64, i64* %RBP
  %2144 = sub i64 %2143, 8
  %2145 = load i64, i64* %RCX
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2144 to i64*
  store i64 %2145, i64* %2148
  %2149 = load i64, i64* %RAX
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 3
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RAX
  %2156 = mul i64 %2155, 8
  %2157 = add i64 %2156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 8
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2157 to i64*
  %2161 = load i64, i64* %2160
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 40
  %2164 = load i64, i64* %RAX
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2163 to i64*
  store i64 %2164, i64* %2167
  %2168 = load i64, i64* %PC
  %2169 = sub i64 %2168, 701
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 5
  store i64 %2171, i64* %PC
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2169, i64* %2172, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 12
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 7
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  store i32 19, i32* %2177
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 12
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i32*
  %2183 = load i32, i32* %2182
  %2184 = zext i32 %2183 to i64
  store i64 %2184, i64* %RDI, align 8, !tbaa !2428
  %2185 = load i64, i64* %PC
  %2186 = sub i64 %2185, 1034
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2192 = load i64, i64* %2191, align 8, !tbaa !2428
  %2193 = add i64 %2192, -8
  %2194 = inttoptr i64 %2193 to i64*
  store i64 %2188, i64* %2194
  store i64 %2193, i64* %2191, align 8, !tbaa !2428
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2186, i64* %2195, align 8, !tbaa !2428
  %2196 = load i64, i64* %PC
  %2197 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2196, %struct.Memory* %MEMORY.0)
  %2198 = load i64, i64* %RBP
  %2199 = sub i64 %2198, 8
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 4
  store i64 %2201, i64* %PC
  %2202 = inttoptr i64 %2199 to i64*
  %2203 = load i64, i64* %2202
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = load i64, i64* %RAX
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  store i64 %2204, i64* %RCX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RCX
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = add i64 4, %2207
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = icmp ult i64 %2210, %2207
  %2212 = icmp ult i64 %2210, 4
  %2213 = or i1 %2211, %2212
  %2214 = zext i1 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2214, i8* %2215, align 1, !tbaa !2432
  %2216 = trunc i64 %2210 to i32
  %2217 = and i32 %2216, 255
  %2218 = call i32 @llvm.ctpop.i32(i32 %2217) #16
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = xor i8 %2220, 1
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2221, i8* %2222, align 1, !tbaa !2446
  %2223 = xor i64 4, %2207
  %2224 = xor i64 %2223, %2210
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2227, i8* %2228, align 1, !tbaa !2447
  %2229 = icmp eq i64 %2210, 0
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2230, i8* %2231, align 1, !tbaa !2448
  %2232 = lshr i64 %2210, 63
  %2233 = trunc i64 %2232 to i8
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2233, i8* %2234, align 1, !tbaa !2449
  %2235 = lshr i64 %2207, 63
  %2236 = xor i64 %2232, %2235
  %2237 = add nuw nsw i64 %2236, %2232
  %2238 = icmp eq i64 %2237, 2
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2239, i8* %2240, align 1, !tbaa !2450
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 8
  %2243 = load i64, i64* %RCX
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2242 to i64*
  store i64 %2243, i64* %2246
  %2247 = load i64, i64* %RAX
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RAX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 8
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2255 to i64*
  %2259 = load i64, i64* %2258
  store i64 %2259, i64* %RAX, align 8, !tbaa !2428
  %2260 = load i64, i64* %RBP
  %2261 = sub i64 %2260, 40
  %2262 = load i64, i64* %RAX
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 4
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2261 to i64*
  store i64 %2262, i64* %2265
  %2266 = load i64, i64* %PC
  %2267 = sub i64 %2266, 951
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 5
  store i64 %2269, i64* %PC
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2267, i64* %2270, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 12
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 7
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i32*
  store i32 1, i32* %2275
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 12
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 3
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to i32*
  %2281 = load i32, i32* %2280
  %2282 = zext i32 %2281 to i64
  store i64 %2282, i64* %RDI, align 8, !tbaa !2428
  %2283 = load i64, i64* %PC
  %2284 = sub i64 %2283, 134
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 5
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 5
  store i64 %2288, i64* %PC
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2290 = load i64, i64* %2289, align 8, !tbaa !2428
  %2291 = add i64 %2290, -8
  %2292 = inttoptr i64 %2291 to i64*
  store i64 %2286, i64* %2292
  store i64 %2291, i64* %2289, align 8, !tbaa !2428
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2284, i64* %2293, align 8, !tbaa !2428
  %2294 = load i64, i64* %PC
  %2295 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2294, %struct.Memory* %MEMORY.0)
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 8
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RAX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RAX
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 3
  store i64 %2304, i64* %PC
  store i64 %2302, i64* %RCX, align 8, !tbaa !2428
  %2305 = load i64, i64* %RCX
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 4
  store i64 %2307, i64* %PC
  %2308 = add i64 4, %2305
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = icmp ult i64 %2308, %2305
  %2310 = icmp ult i64 %2308, 4
  %2311 = or i1 %2309, %2310
  %2312 = zext i1 %2311 to i8
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2312, i8* %2313, align 1, !tbaa !2432
  %2314 = trunc i64 %2308 to i32
  %2315 = and i32 %2314, 255
  %2316 = call i32 @llvm.ctpop.i32(i32 %2315) #16
  %2317 = trunc i32 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = xor i8 %2318, 1
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2319, i8* %2320, align 1, !tbaa !2446
  %2321 = xor i64 4, %2305
  %2322 = xor i64 %2321, %2308
  %2323 = lshr i64 %2322, 4
  %2324 = trunc i64 %2323 to i8
  %2325 = and i8 %2324, 1
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2325, i8* %2326, align 1, !tbaa !2447
  %2327 = icmp eq i64 %2308, 0
  %2328 = zext i1 %2327 to i8
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2328, i8* %2329, align 1, !tbaa !2448
  %2330 = lshr i64 %2308, 63
  %2331 = trunc i64 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2331, i8* %2332, align 1, !tbaa !2449
  %2333 = lshr i64 %2305, 63
  %2334 = xor i64 %2330, %2333
  %2335 = add nuw nsw i64 %2334, %2330
  %2336 = icmp eq i64 %2335, 2
  %2337 = zext i1 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2337, i8* %2338, align 1, !tbaa !2450
  %2339 = load i64, i64* %RBP
  %2340 = sub i64 %2339, 8
  %2341 = load i64, i64* %RCX
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 4
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2340 to i64*
  store i64 %2341, i64* %2344
  %2345 = load i64, i64* %RAX
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 3
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sext i32 %2349 to i64
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RAX
  %2352 = mul i64 %2351, 8
  %2353 = add i64 %2352, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 8
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to i64*
  %2357 = load i64, i64* %2356
  store i64 %2357, i64* %RAX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RBP
  %2359 = sub i64 %2358, 40
  %2360 = load i64, i64* %RAX
  %2361 = load i64, i64* %PC
  %2362 = add i64 %2361, 4
  store i64 %2362, i64* %PC
  %2363 = inttoptr i64 %2359 to i64*
  store i64 %2360, i64* %2363
  %2364 = load i64, i64* %PC
  %2365 = sub i64 %2364, 51
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 5
  store i64 %2367, i64* %PC
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2365, i64* %2368, align 8, !tbaa !2428
  br label %block_400586

block_400b0b:                                     ; preds = %block_400b04, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400b04 ]
  %2369 = load i64, i64* %RBP
  %2370 = sub i64 %2369, 12
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 3
  store i64 %2372, i64* %PC
  %2373 = inttoptr i64 %2370 to i32*
  %2374 = load i32, i32* %2373
  %2375 = zext i32 %2374 to i64
  store i64 %2375, i64* %RDI, align 8, !tbaa !2428
  %2376 = load i64, i64* %PC
  %2377 = sub i64 %2376, 1534
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 5
  store i64 %2381, i64* %PC
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2383 = load i64, i64* %2382, align 8, !tbaa !2428
  %2384 = add i64 %2383, -8
  %2385 = inttoptr i64 %2384 to i64*
  store i64 %2379, i64* %2385
  store i64 %2384, i64* %2382, align 8, !tbaa !2428
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2377, i64* %2386, align 8, !tbaa !2428
  %2387 = load i64, i64* %PC
  %2388 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2387, %struct.Memory* %MEMORY.1)
  %2389 = load i64, i64* %RBP
  %2390 = sub i64 %2389, 8
  %2391 = load i64, i64* %PC
  %2392 = add i64 %2391, 4
  store i64 %2392, i64* %PC
  %2393 = inttoptr i64 %2390 to i64*
  %2394 = load i64, i64* %2393
  store i64 %2394, i64* %RAX, align 8, !tbaa !2428
  %2395 = load i64, i64* %RAX
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 3
  store i64 %2397, i64* %PC
  store i64 %2395, i64* %RCX, align 8, !tbaa !2428
  %2398 = load i64, i64* %RCX
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 4
  store i64 %2400, i64* %PC
  %2401 = add i64 4, %2398
  store i64 %2401, i64* %RCX, align 8, !tbaa !2428
  %2402 = icmp ult i64 %2401, %2398
  %2403 = icmp ult i64 %2401, 4
  %2404 = or i1 %2402, %2403
  %2405 = zext i1 %2404 to i8
  %2406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2405, i8* %2406, align 1, !tbaa !2432
  %2407 = trunc i64 %2401 to i32
  %2408 = and i32 %2407, 255
  %2409 = call i32 @llvm.ctpop.i32(i32 %2408) #16
  %2410 = trunc i32 %2409 to i8
  %2411 = and i8 %2410, 1
  %2412 = xor i8 %2411, 1
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2412, i8* %2413, align 1, !tbaa !2446
  %2414 = xor i64 4, %2398
  %2415 = xor i64 %2414, %2401
  %2416 = lshr i64 %2415, 4
  %2417 = trunc i64 %2416 to i8
  %2418 = and i8 %2417, 1
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2418, i8* %2419, align 1, !tbaa !2447
  %2420 = icmp eq i64 %2401, 0
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2421, i8* %2422, align 1, !tbaa !2448
  %2423 = lshr i64 %2401, 63
  %2424 = trunc i64 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2424, i8* %2425, align 1, !tbaa !2449
  %2426 = lshr i64 %2398, 63
  %2427 = xor i64 %2423, %2426
  %2428 = add nuw nsw i64 %2427, %2423
  %2429 = icmp eq i64 %2428, 2
  %2430 = zext i1 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2430, i8* %2431, align 1, !tbaa !2450
  %2432 = load i64, i64* %RBP
  %2433 = sub i64 %2432, 8
  %2434 = load i64, i64* %RCX
  %2435 = load i64, i64* %PC
  %2436 = add i64 %2435, 4
  store i64 %2436, i64* %PC
  %2437 = inttoptr i64 %2433 to i64*
  store i64 %2434, i64* %2437
  %2438 = load i64, i64* %RAX
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 3
  store i64 %2440, i64* %PC
  %2441 = inttoptr i64 %2438 to i32*
  %2442 = load i32, i32* %2441
  %2443 = sext i32 %2442 to i64
  store i64 %2443, i64* %RAX, align 8, !tbaa !2428
  %2444 = load i64, i64* %RAX
  %2445 = mul i64 %2444, 8
  %2446 = add i64 %2445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 8
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RAX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 40
  %2453 = load i64, i64* %RAX
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 4
  store i64 %2455, i64* %PC
  %2456 = inttoptr i64 %2452 to i64*
  store i64 %2453, i64* %2456
  %2457 = load i64, i64* %PC
  %2458 = sub i64 %2457, 1451
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 5
  store i64 %2460, i64* %PC
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2458, i64* %2461, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2462 = load i64, i64* %RBP
  %2463 = sub i64 %2462, 12
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 7
  store i64 %2465, i64* %PC
  %2466 = inttoptr i64 %2463 to i32*
  store i32 24, i32* %2466
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 12
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 3
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i32*
  %2472 = load i32, i32* %2471
  %2473 = zext i32 %2472 to i64
  store i64 %2473, i64* %RDI, align 8, !tbaa !2428
  %2474 = load i64, i64* %PC
  %2475 = sub i64 %2474, 1284
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 5
  store i64 %2479, i64* %PC
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2481 = load i64, i64* %2480, align 8, !tbaa !2428
  %2482 = add i64 %2481, -8
  %2483 = inttoptr i64 %2482 to i64*
  store i64 %2477, i64* %2483
  store i64 %2482, i64* %2480, align 8, !tbaa !2428
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2475, i64* %2484, align 8, !tbaa !2428
  %2485 = load i64, i64* %PC
  %2486 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2485, %struct.Memory* %MEMORY.0)
  %2487 = load i64, i64* %RBP
  %2488 = sub i64 %2487, 8
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 4
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i64*
  %2492 = load i64, i64* %2491
  store i64 %2492, i64* %RAX, align 8, !tbaa !2428
  %2493 = load i64, i64* %RAX
  %2494 = load i64, i64* %PC
  %2495 = add i64 %2494, 3
  store i64 %2495, i64* %PC
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2496 = load i64, i64* %RCX
  %2497 = load i64, i64* %PC
  %2498 = add i64 %2497, 4
  store i64 %2498, i64* %PC
  %2499 = add i64 4, %2496
  store i64 %2499, i64* %RCX, align 8, !tbaa !2428
  %2500 = icmp ult i64 %2499, %2496
  %2501 = icmp ult i64 %2499, 4
  %2502 = or i1 %2500, %2501
  %2503 = zext i1 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2503, i8* %2504, align 1, !tbaa !2432
  %2505 = trunc i64 %2499 to i32
  %2506 = and i32 %2505, 255
  %2507 = call i32 @llvm.ctpop.i32(i32 %2506) #16
  %2508 = trunc i32 %2507 to i8
  %2509 = and i8 %2508, 1
  %2510 = xor i8 %2509, 1
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2510, i8* %2511, align 1, !tbaa !2446
  %2512 = xor i64 4, %2496
  %2513 = xor i64 %2512, %2499
  %2514 = lshr i64 %2513, 4
  %2515 = trunc i64 %2514 to i8
  %2516 = and i8 %2515, 1
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2516, i8* %2517, align 1, !tbaa !2447
  %2518 = icmp eq i64 %2499, 0
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2519, i8* %2520, align 1, !tbaa !2448
  %2521 = lshr i64 %2499, 63
  %2522 = trunc i64 %2521 to i8
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2522, i8* %2523, align 1, !tbaa !2449
  %2524 = lshr i64 %2496, 63
  %2525 = xor i64 %2521, %2524
  %2526 = add nuw nsw i64 %2525, %2521
  %2527 = icmp eq i64 %2526, 2
  %2528 = zext i1 %2527 to i8
  %2529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2528, i8* %2529, align 1, !tbaa !2450
  %2530 = load i64, i64* %RBP
  %2531 = sub i64 %2530, 8
  %2532 = load i64, i64* %RCX
  %2533 = load i64, i64* %PC
  %2534 = add i64 %2533, 4
  store i64 %2534, i64* %PC
  %2535 = inttoptr i64 %2531 to i64*
  store i64 %2532, i64* %2535
  %2536 = load i64, i64* %RAX
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 3
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  store i64 %2541, i64* %RAX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RAX
  %2543 = mul i64 %2542, 8
  %2544 = add i64 %2543, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 8
  store i64 %2546, i64* %PC
  %2547 = inttoptr i64 %2544 to i64*
  %2548 = load i64, i64* %2547
  store i64 %2548, i64* %RAX, align 8, !tbaa !2428
  %2549 = load i64, i64* %RBP
  %2550 = sub i64 %2549, 40
  %2551 = load i64, i64* %RAX
  %2552 = load i64, i64* %PC
  %2553 = add i64 %2552, 4
  store i64 %2553, i64* %PC
  %2554 = inttoptr i64 %2550 to i64*
  store i64 %2551, i64* %2554
  %2555 = load i64, i64* %PC
  %2556 = sub i64 %2555, 1201
  %2557 = load i64, i64* %PC
  %2558 = add i64 %2557, 5
  store i64 %2558, i64* %PC
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2556, i64* %2559, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2560 = load i64, i64* %RBP
  %2561 = sub i64 %2560, 12
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 7
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i32*
  store i32 6, i32* %2564
  %2565 = load i64, i64* %RBP
  %2566 = sub i64 %2565, 12
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 3
  store i64 %2568, i64* %PC
  %2569 = inttoptr i64 %2566 to i32*
  %2570 = load i32, i32* %2569
  %2571 = zext i32 %2570 to i64
  store i64 %2571, i64* %RDI, align 8, !tbaa !2428
  %2572 = load i64, i64* %PC
  %2573 = sub i64 %2572, 384
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 5
  %2576 = load i64, i64* %PC
  %2577 = add i64 %2576, 5
  store i64 %2577, i64* %PC
  %2578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2579 = load i64, i64* %2578, align 8, !tbaa !2428
  %2580 = add i64 %2579, -8
  %2581 = inttoptr i64 %2580 to i64*
  store i64 %2575, i64* %2581
  store i64 %2580, i64* %2578, align 8, !tbaa !2428
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2573, i64* %2582, align 8, !tbaa !2428
  %2583 = load i64, i64* %PC
  %2584 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2583, %struct.Memory* %MEMORY.0)
  %2585 = load i64, i64* %RBP
  %2586 = sub i64 %2585, 8
  %2587 = load i64, i64* %PC
  %2588 = add i64 %2587, 4
  store i64 %2588, i64* %PC
  %2589 = inttoptr i64 %2586 to i64*
  %2590 = load i64, i64* %2589
  store i64 %2590, i64* %RAX, align 8, !tbaa !2428
  %2591 = load i64, i64* %RAX
  %2592 = load i64, i64* %PC
  %2593 = add i64 %2592, 3
  store i64 %2593, i64* %PC
  store i64 %2591, i64* %RCX, align 8, !tbaa !2428
  %2594 = load i64, i64* %RCX
  %2595 = load i64, i64* %PC
  %2596 = add i64 %2595, 4
  store i64 %2596, i64* %PC
  %2597 = add i64 4, %2594
  store i64 %2597, i64* %RCX, align 8, !tbaa !2428
  %2598 = icmp ult i64 %2597, %2594
  %2599 = icmp ult i64 %2597, 4
  %2600 = or i1 %2598, %2599
  %2601 = zext i1 %2600 to i8
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2601, i8* %2602, align 1, !tbaa !2432
  %2603 = trunc i64 %2597 to i32
  %2604 = and i32 %2603, 255
  %2605 = call i32 @llvm.ctpop.i32(i32 %2604) #16
  %2606 = trunc i32 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = xor i8 %2607, 1
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2608, i8* %2609, align 1, !tbaa !2446
  %2610 = xor i64 4, %2594
  %2611 = xor i64 %2610, %2597
  %2612 = lshr i64 %2611, 4
  %2613 = trunc i64 %2612 to i8
  %2614 = and i8 %2613, 1
  %2615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2614, i8* %2615, align 1, !tbaa !2447
  %2616 = icmp eq i64 %2597, 0
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2617, i8* %2618, align 1, !tbaa !2448
  %2619 = lshr i64 %2597, 63
  %2620 = trunc i64 %2619 to i8
  %2621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2620, i8* %2621, align 1, !tbaa !2449
  %2622 = lshr i64 %2594, 63
  %2623 = xor i64 %2619, %2622
  %2624 = add nuw nsw i64 %2623, %2619
  %2625 = icmp eq i64 %2624, 2
  %2626 = zext i1 %2625 to i8
  %2627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2626, i8* %2627, align 1, !tbaa !2450
  %2628 = load i64, i64* %RBP
  %2629 = sub i64 %2628, 8
  %2630 = load i64, i64* %RCX
  %2631 = load i64, i64* %PC
  %2632 = add i64 %2631, 4
  store i64 %2632, i64* %PC
  %2633 = inttoptr i64 %2629 to i64*
  store i64 %2630, i64* %2633
  %2634 = load i64, i64* %RAX
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 3
  store i64 %2636, i64* %PC
  %2637 = inttoptr i64 %2634 to i32*
  %2638 = load i32, i32* %2637
  %2639 = sext i32 %2638 to i64
  store i64 %2639, i64* %RAX, align 8, !tbaa !2428
  %2640 = load i64, i64* %RAX
  %2641 = mul i64 %2640, 8
  %2642 = add i64 %2641, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 8
  store i64 %2644, i64* %PC
  %2645 = inttoptr i64 %2642 to i64*
  %2646 = load i64, i64* %2645
  store i64 %2646, i64* %RAX, align 8, !tbaa !2428
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 40
  %2649 = load i64, i64* %RAX
  %2650 = load i64, i64* %PC
  %2651 = add i64 %2650, 4
  store i64 %2651, i64* %PC
  %2652 = inttoptr i64 %2648 to i64*
  store i64 %2649, i64* %2652
  %2653 = load i64, i64* %PC
  %2654 = sub i64 %2653, 301
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 5
  store i64 %2656, i64* %PC
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2654, i64* %2657, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2658 = load i64, i64* %RBP
  %2659 = sub i64 %2658, 12
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 7
  store i64 %2661, i64* %PC
  %2662 = inttoptr i64 %2659 to i32*
  store i32 29, i32* %2662
  br label %block_400b0b

block_400780:                                     ; preds = %block_400586
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 12
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 7
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i32*
  store i32 11, i32* %2667
  %2668 = load i64, i64* %PC
  %2669 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2668, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2669

; <label>:2670:                                   ; preds = %block_400586
  %2671 = load i64, i64* %PC
  %2672 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2671, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2672
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cf0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4005c5

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.1)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 15, i32* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 834
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.1)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 8
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 3
  store i64 %1194, i64* %PC
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = add i64 4, %1195
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1195
  %1200 = icmp ult i64 %1198, 4
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1202, i8* %1203, align 1, !tbaa !2432
  %1204 = trunc i64 %1198 to i32
  %1205 = and i32 %1204, 255
  %1206 = call i32 @llvm.ctpop.i32(i32 %1205) #16
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1209, i8* %1210, align 1, !tbaa !2446
  %1211 = xor i64 4, %1195
  %1212 = xor i64 %1211, %1198
  %1213 = lshr i64 %1212, 4
  %1214 = trunc i64 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1215, i8* %1216, align 1, !tbaa !2447
  %1217 = icmp eq i64 %1198, 0
  %1218 = zext i1 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1218, i8* %1219, align 1, !tbaa !2448
  %1220 = lshr i64 %1198, 63
  %1221 = trunc i64 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1221, i8* %1222, align 1, !tbaa !2449
  %1223 = lshr i64 %1195, 63
  %1224 = xor i64 %1220, %1223
  %1225 = add nuw nsw i64 %1224, %1220
  %1226 = icmp eq i64 %1225, 2
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1227, i8* %1228, align 1, !tbaa !2450
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 8
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %RAX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = mul i64 %1241, 8
  %1243 = add i64 %1242, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 8
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 40
  %1250 = load i64, i64* %RAX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1249 to i64*
  store i64 %1250, i64* %1253
  %1254 = load i64, i64* %PC
  %1255 = sub i64 %1254, 751
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 5
  store i64 %1257, i64* %PC
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1255, i64* %1258, align 8, !tbaa !2428
  br label %block_400586

block_4005c5:                                     ; preds = %block_4005be, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4005be ]
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  %1264 = load i32, i32* %1263
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RDI, align 8, !tbaa !2428
  %1266 = load i64, i64* %PC
  %1267 = sub i64 %1266, 184
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1277, %struct.Memory* %MEMORY.0)
  %1279 = load i64, i64* %RBP
  %1280 = sub i64 %1279, 8
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %PC
  %1283 = inttoptr i64 %1280 to i64*
  %1284 = load i64, i64* %1283
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 3
  store i64 %1287, i64* %PC
  store i64 %1285, i64* %RCX, align 8, !tbaa !2428
  %1288 = load i64, i64* %RCX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = add i64 4, %1288
  store i64 %1291, i64* %RCX, align 8, !tbaa !2428
  %1292 = icmp ult i64 %1291, %1288
  %1293 = icmp ult i64 %1291, 4
  %1294 = or i1 %1292, %1293
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = trunc i64 %1291 to i32
  %1298 = and i32 %1297, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2446
  %1304 = xor i64 4, %1288
  %1305 = xor i64 %1304, %1291
  %1306 = lshr i64 %1305, 4
  %1307 = trunc i64 %1306 to i8
  %1308 = and i8 %1307, 1
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1308, i8* %1309, align 1, !tbaa !2447
  %1310 = icmp eq i64 %1291, 0
  %1311 = zext i1 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1311, i8* %1312, align 1, !tbaa !2448
  %1313 = lshr i64 %1291, 63
  %1314 = trunc i64 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1314, i8* %1315, align 1, !tbaa !2449
  %1316 = lshr i64 %1288, 63
  %1317 = xor i64 %1313, %1316
  %1318 = add nuw nsw i64 %1317, %1313
  %1319 = icmp eq i64 %1318, 2
  %1320 = zext i1 %1319 to i8
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1320, i8* %1321, align 1, !tbaa !2450
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 8
  %1324 = load i64, i64* %RCX
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1323 to i64*
  store i64 %1324, i64* %1327
  %1328 = load i64, i64* %RAX
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 3
  store i64 %1330, i64* %PC
  %1331 = inttoptr i64 %1328 to i32*
  %1332 = load i32, i32* %1331
  %1333 = sext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX
  %1335 = mul i64 %1334, 8
  %1336 = add i64 %1335, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 8
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %RAX, align 8, !tbaa !2428
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 40
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %PC
  %1348 = sub i64 %1347, 101
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  store i64 %1350, i64* %PC
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1348, i64* %1351, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 12
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 7
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i32*
  store i32 20, i32* %1356
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 12
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 3
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  %1362 = load i32, i32* %1361
  %1363 = zext i32 %1362 to i64
  store i64 %1363, i64* %RDI, align 8, !tbaa !2428
  %1364 = load i64, i64* %PC
  %1365 = sub i64 %1364, 1084
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 5
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1371 = load i64, i64* %1370, align 8, !tbaa !2428
  %1372 = add i64 %1371, -8
  %1373 = inttoptr i64 %1372 to i64*
  store i64 %1367, i64* %1373
  store i64 %1372, i64* %1370, align 8, !tbaa !2428
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1365, i64* %1374, align 8, !tbaa !2428
  %1375 = load i64, i64* %PC
  %1376 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1375, %struct.Memory* %MEMORY.1)
  %1377 = load i64, i64* %RBP
  %1378 = sub i64 %1377, 8
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 4
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1378 to i64*
  %1382 = load i64, i64* %1381
  store i64 %1382, i64* %RAX, align 8, !tbaa !2428
  %1383 = load i64, i64* %RAX
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  store i64 %1383, i64* %RCX, align 8, !tbaa !2428
  %1386 = load i64, i64* %RCX
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 4
  store i64 %1388, i64* %PC
  %1389 = add i64 4, %1386
  store i64 %1389, i64* %RCX, align 8, !tbaa !2428
  %1390 = icmp ult i64 %1389, %1386
  %1391 = icmp ult i64 %1389, 4
  %1392 = or i1 %1390, %1391
  %1393 = zext i1 %1392 to i8
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1393, i8* %1394, align 1, !tbaa !2432
  %1395 = trunc i64 %1389 to i32
  %1396 = and i32 %1395, 255
  %1397 = call i32 @llvm.ctpop.i32(i32 %1396) #16
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  %1400 = xor i8 %1399, 1
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1400, i8* %1401, align 1, !tbaa !2446
  %1402 = xor i64 4, %1386
  %1403 = xor i64 %1402, %1389
  %1404 = lshr i64 %1403, 4
  %1405 = trunc i64 %1404 to i8
  %1406 = and i8 %1405, 1
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1406, i8* %1407, align 1, !tbaa !2447
  %1408 = icmp eq i64 %1389, 0
  %1409 = zext i1 %1408 to i8
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1409, i8* %1410, align 1, !tbaa !2448
  %1411 = lshr i64 %1389, 63
  %1412 = trunc i64 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1412, i8* %1413, align 1, !tbaa !2449
  %1414 = lshr i64 %1386, 63
  %1415 = xor i64 %1411, %1414
  %1416 = add nuw nsw i64 %1415, %1411
  %1417 = icmp eq i64 %1416, 2
  %1418 = zext i1 %1417 to i8
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1418, i8* %1419, align 1, !tbaa !2450
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 8
  %1422 = load i64, i64* %RCX
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1421 to i64*
  store i64 %1422, i64* %1425
  %1426 = load i64, i64* %RAX
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 3
  store i64 %1428, i64* %PC
  %1429 = inttoptr i64 %1426 to i32*
  %1430 = load i32, i32* %1429
  %1431 = sext i32 %1430 to i64
  store i64 %1431, i64* %RAX, align 8, !tbaa !2428
  %1432 = load i64, i64* %RAX
  %1433 = mul i64 %1432, 8
  %1434 = add i64 %1433, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 8
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RBP
  %1440 = sub i64 %1439, 40
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1440 to i64*
  store i64 %1441, i64* %1444
  %1445 = load i64, i64* %PC
  %1446 = sub i64 %1445, 1001
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 5
  store i64 %1448, i64* %PC
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1446, i64* %1449, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1450 = load i64, i64* %RBP
  %1451 = sub i64 %1450, 12
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 7
  store i64 %1453, i64* %PC
  %1454 = inttoptr i64 %1451 to i32*
  store i32 2, i32* %1454
  br label %block_4005c5

block_4006b8:                                     ; preds = %block_400586
  %1455 = load i64, i64* %RBP
  %1456 = sub i64 %1455, 12
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 7
  store i64 %1458, i64* %PC
  %1459 = inttoptr i64 %1456 to i32*
  store i32 7, i32* %1459
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 12
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 3
  store i64 %1463, i64* %PC
  %1464 = inttoptr i64 %1461 to i32*
  %1465 = load i32, i32* %1464
  %1466 = zext i32 %1465 to i64
  store i64 %1466, i64* %RDI, align 8, !tbaa !2428
  %1467 = load i64, i64* %PC
  %1468 = sub i64 %1467, 434
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 5
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 5
  store i64 %1472, i64* %PC
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1474 = load i64, i64* %1473, align 8, !tbaa !2428
  %1475 = add i64 %1474, -8
  %1476 = inttoptr i64 %1475 to i64*
  store i64 %1470, i64* %1476
  store i64 %1475, i64* %1473, align 8, !tbaa !2428
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1468, i64* %1477, align 8, !tbaa !2428
  %1478 = load i64, i64* %PC
  %1479 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1478, %struct.Memory* %MEMORY.1)
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 8
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 4
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i64*
  %1485 = load i64, i64* %1484
  store i64 %1485, i64* %RAX, align 8, !tbaa !2428
  %1486 = load i64, i64* %RAX
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 3
  store i64 %1488, i64* %PC
  store i64 %1486, i64* %RCX, align 8, !tbaa !2428
  %1489 = load i64, i64* %RCX
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 4
  store i64 %1491, i64* %PC
  %1492 = add i64 4, %1489
  store i64 %1492, i64* %RCX, align 8, !tbaa !2428
  %1493 = icmp ult i64 %1492, %1489
  %1494 = icmp ult i64 %1492, 4
  %1495 = or i1 %1493, %1494
  %1496 = zext i1 %1495 to i8
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1496, i8* %1497, align 1, !tbaa !2432
  %1498 = trunc i64 %1492 to i32
  %1499 = and i32 %1498, 255
  %1500 = call i32 @llvm.ctpop.i32(i32 %1499) #16
  %1501 = trunc i32 %1500 to i8
  %1502 = and i8 %1501, 1
  %1503 = xor i8 %1502, 1
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1503, i8* %1504, align 1, !tbaa !2446
  %1505 = xor i64 4, %1489
  %1506 = xor i64 %1505, %1492
  %1507 = lshr i64 %1506, 4
  %1508 = trunc i64 %1507 to i8
  %1509 = and i8 %1508, 1
  %1510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1509, i8* %1510, align 1, !tbaa !2447
  %1511 = icmp eq i64 %1492, 0
  %1512 = zext i1 %1511 to i8
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1512, i8* %1513, align 1, !tbaa !2448
  %1514 = lshr i64 %1492, 63
  %1515 = trunc i64 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1515, i8* %1516, align 1, !tbaa !2449
  %1517 = lshr i64 %1489, 63
  %1518 = xor i64 %1514, %1517
  %1519 = add nuw nsw i64 %1518, %1514
  %1520 = icmp eq i64 %1519, 2
  %1521 = zext i1 %1520 to i8
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1521, i8* %1522, align 1, !tbaa !2450
  %1523 = load i64, i64* %RBP
  %1524 = sub i64 %1523, 8
  %1525 = load i64, i64* %RCX
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 4
  store i64 %1527, i64* %PC
  %1528 = inttoptr i64 %1524 to i64*
  store i64 %1525, i64* %1528
  %1529 = load i64, i64* %RAX
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 3
  store i64 %1531, i64* %PC
  %1532 = inttoptr i64 %1529 to i32*
  %1533 = load i32, i32* %1532
  %1534 = sext i32 %1533 to i64
  store i64 %1534, i64* %RAX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RAX
  %1536 = mul i64 %1535, 8
  %1537 = add i64 %1536, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 8
  store i64 %1539, i64* %PC
  %1540 = inttoptr i64 %1537 to i64*
  %1541 = load i64, i64* %1540
  store i64 %1541, i64* %RAX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RBP
  %1543 = sub i64 %1542, 40
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 4
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1543 to i64*
  store i64 %1544, i64* %1547
  %1548 = load i64, i64* %PC
  %1549 = sub i64 %1548, 351
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 5
  store i64 %1551, i64* %PC
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1549, i64* %1552, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1553 = load i64, i64* %RBP
  %1554 = sub i64 %1553, 12
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 7
  store i64 %1556, i64* %PC
  %1557 = inttoptr i64 %1554 to i32*
  store i32 30, i32* %1557
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 12
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 3
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i32*
  %1563 = load i32, i32* %1562
  %1564 = zext i32 %1563 to i64
  store i64 %1564, i64* %RDI, align 8, !tbaa !2428
  %1565 = load i64, i64* %PC
  %1566 = sub i64 %1565, 1584
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 5
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  store i64 %1570, i64* %PC
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1572 = load i64, i64* %1571, align 8, !tbaa !2428
  %1573 = add i64 %1572, -8
  %1574 = inttoptr i64 %1573 to i64*
  store i64 %1568, i64* %1574
  store i64 %1573, i64* %1571, align 8, !tbaa !2428
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1566, i64* %1575, align 8, !tbaa !2428
  %1576 = load i64, i64* %PC
  %1577 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1576, %struct.Memory* %MEMORY.1)
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 8
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 4
  store i64 %1581, i64* %PC
  %1582 = inttoptr i64 %1579 to i64*
  %1583 = load i64, i64* %1582
  store i64 %1583, i64* %RAX, align 8, !tbaa !2428
  %1584 = load i64, i64* %RAX
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 3
  store i64 %1586, i64* %PC
  store i64 %1584, i64* %RCX, align 8, !tbaa !2428
  %1587 = load i64, i64* %RCX
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 4
  store i64 %1589, i64* %PC
  %1590 = add i64 4, %1587
  store i64 %1590, i64* %RCX, align 8, !tbaa !2428
  %1591 = icmp ult i64 %1590, %1587
  %1592 = icmp ult i64 %1590, 4
  %1593 = or i1 %1591, %1592
  %1594 = zext i1 %1593 to i8
  %1595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1594, i8* %1595, align 1, !tbaa !2432
  %1596 = trunc i64 %1590 to i32
  %1597 = and i32 %1596, 255
  %1598 = call i32 @llvm.ctpop.i32(i32 %1597) #16
  %1599 = trunc i32 %1598 to i8
  %1600 = and i8 %1599, 1
  %1601 = xor i8 %1600, 1
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1601, i8* %1602, align 1, !tbaa !2446
  %1603 = xor i64 4, %1587
  %1604 = xor i64 %1603, %1590
  %1605 = lshr i64 %1604, 4
  %1606 = trunc i64 %1605 to i8
  %1607 = and i8 %1606, 1
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1607, i8* %1608, align 1, !tbaa !2447
  %1609 = icmp eq i64 %1590, 0
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1610, i8* %1611, align 1, !tbaa !2448
  %1612 = lshr i64 %1590, 63
  %1613 = trunc i64 %1612 to i8
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1613, i8* %1614, align 1, !tbaa !2449
  %1615 = lshr i64 %1587, 63
  %1616 = xor i64 %1612, %1615
  %1617 = add nuw nsw i64 %1616, %1612
  %1618 = icmp eq i64 %1617, 2
  %1619 = zext i1 %1618 to i8
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1619, i8* %1620, align 1, !tbaa !2450
  %1621 = load i64, i64* %RBP
  %1622 = sub i64 %1621, 8
  %1623 = load i64, i64* %RCX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 4
  store i64 %1625, i64* %PC
  %1626 = inttoptr i64 %1622 to i64*
  store i64 %1623, i64* %1626
  %1627 = load i64, i64* %RAX
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 3
  store i64 %1629, i64* %PC
  %1630 = inttoptr i64 %1627 to i32*
  %1631 = load i32, i32* %1630
  %1632 = sext i32 %1631 to i64
  store i64 %1632, i64* %RAX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RAX
  %1634 = mul i64 %1633, 8
  %1635 = add i64 %1634, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 8
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to i64*
  %1639 = load i64, i64* %1638
  store i64 %1639, i64* %RAX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RBP
  %1641 = sub i64 %1640, 40
  %1642 = load i64, i64* %RAX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1641 to i64*
  store i64 %1642, i64* %1645
  %1646 = load i64, i64* %PC
  %1647 = sub i64 %1646, 1501
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 5
  store i64 %1649, i64* %PC
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1647, i64* %1650, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 12
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 7
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i32*
  store i32 12, i32* %1655
  %1656 = load i64, i64* %RBP
  %1657 = sub i64 %1656, 12
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 3
  store i64 %1659, i64* %PC
  %1660 = inttoptr i64 %1657 to i32*
  %1661 = load i32, i32* %1660
  %1662 = zext i32 %1661 to i64
  store i64 %1662, i64* %RDI, align 8, !tbaa !2428
  %1663 = load i64, i64* %PC
  %1664 = sub i64 %1663, 684
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 5
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 5
  store i64 %1668, i64* %PC
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1670 = load i64, i64* %1669, align 8, !tbaa !2428
  %1671 = add i64 %1670, -8
  %1672 = inttoptr i64 %1671 to i64*
  store i64 %1666, i64* %1672
  store i64 %1671, i64* %1669, align 8, !tbaa !2428
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1664, i64* %1673, align 8, !tbaa !2428
  %1674 = load i64, i64* %PC
  %1675 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1674, %struct.Memory* %MEMORY.1)
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 8
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 4
  store i64 %1679, i64* %PC
  %1680 = inttoptr i64 %1677 to i64*
  %1681 = load i64, i64* %1680
  store i64 %1681, i64* %RAX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RAX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  store i64 %1682, i64* %RCX, align 8, !tbaa !2428
  %1685 = load i64, i64* %RCX
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 4
  store i64 %1687, i64* %PC
  %1688 = add i64 4, %1685
  store i64 %1688, i64* %RCX, align 8, !tbaa !2428
  %1689 = icmp ult i64 %1688, %1685
  %1690 = icmp ult i64 %1688, 4
  %1691 = or i1 %1689, %1690
  %1692 = zext i1 %1691 to i8
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1692, i8* %1693, align 1, !tbaa !2432
  %1694 = trunc i64 %1688 to i32
  %1695 = and i32 %1694, 255
  %1696 = call i32 @llvm.ctpop.i32(i32 %1695) #16
  %1697 = trunc i32 %1696 to i8
  %1698 = and i8 %1697, 1
  %1699 = xor i8 %1698, 1
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1699, i8* %1700, align 1, !tbaa !2446
  %1701 = xor i64 4, %1685
  %1702 = xor i64 %1701, %1688
  %1703 = lshr i64 %1702, 4
  %1704 = trunc i64 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1705, i8* %1706, align 1, !tbaa !2447
  %1707 = icmp eq i64 %1688, 0
  %1708 = zext i1 %1707 to i8
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1708, i8* %1709, align 1, !tbaa !2448
  %1710 = lshr i64 %1688, 63
  %1711 = trunc i64 %1710 to i8
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1711, i8* %1712, align 1, !tbaa !2449
  %1713 = lshr i64 %1685, 63
  %1714 = xor i64 %1710, %1713
  %1715 = add nuw nsw i64 %1714, %1710
  %1716 = icmp eq i64 %1715, 2
  %1717 = zext i1 %1716 to i8
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1717, i8* %1718, align 1, !tbaa !2450
  %1719 = load i64, i64* %RBP
  %1720 = sub i64 %1719, 8
  %1721 = load i64, i64* %RCX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 4
  store i64 %1723, i64* %PC
  %1724 = inttoptr i64 %1720 to i64*
  store i64 %1721, i64* %1724
  %1725 = load i64, i64* %RAX
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 3
  store i64 %1727, i64* %PC
  %1728 = inttoptr i64 %1725 to i32*
  %1729 = load i32, i32* %1728
  %1730 = sext i32 %1729 to i64
  store i64 %1730, i64* %RAX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RAX
  %1732 = mul i64 %1731, 8
  %1733 = add i64 %1732, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 8
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i64*
  %1737 = load i64, i64* %1736
  store i64 %1737, i64* %RAX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RBP
  %1739 = sub i64 %1738, 40
  %1740 = load i64, i64* %RAX
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 4
  store i64 %1742, i64* %PC
  %1743 = inttoptr i64 %1739 to i64*
  store i64 %1740, i64* %1743
  %1744 = load i64, i64* %PC
  %1745 = sub i64 %1744, 601
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 5
  store i64 %1747, i64* %PC
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1745, i64* %1748, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1749 = load i64, i64* %RBP
  %1750 = sub i64 %1749, 12
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 7
  store i64 %1752, i64* %PC
  %1753 = inttoptr i64 %1750 to i32*
  store i32 17, i32* %1753
  %1754 = load i64, i64* %RBP
  %1755 = sub i64 %1754, 12
  %1756 = load i64, i64* %PC
  %1757 = add i64 %1756, 3
  store i64 %1757, i64* %PC
  %1758 = inttoptr i64 %1755 to i32*
  %1759 = load i32, i32* %1758
  %1760 = zext i32 %1759 to i64
  store i64 %1760, i64* %RDI, align 8, !tbaa !2428
  %1761 = load i64, i64* %PC
  %1762 = sub i64 %1761, 934
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 5
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 5
  store i64 %1766, i64* %PC
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1768 = load i64, i64* %1767, align 8, !tbaa !2428
  %1769 = add i64 %1768, -8
  %1770 = inttoptr i64 %1769 to i64*
  store i64 %1764, i64* %1770
  store i64 %1769, i64* %1767, align 8, !tbaa !2428
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1762, i64* %1771, align 8, !tbaa !2428
  %1772 = load i64, i64* %PC
  %1773 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1772, %struct.Memory* %MEMORY.1)
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 8
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 4
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to i64*
  %1779 = load i64, i64* %1778
  store i64 %1779, i64* %RAX, align 8, !tbaa !2428
  %1780 = load i64, i64* %RAX
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 3
  store i64 %1782, i64* %PC
  store i64 %1780, i64* %RCX, align 8, !tbaa !2428
  %1783 = load i64, i64* %RCX
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 4
  store i64 %1785, i64* %PC
  %1786 = add i64 4, %1783
  store i64 %1786, i64* %RCX, align 8, !tbaa !2428
  %1787 = icmp ult i64 %1786, %1783
  %1788 = icmp ult i64 %1786, 4
  %1789 = or i1 %1787, %1788
  %1790 = zext i1 %1789 to i8
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1790, i8* %1791, align 1, !tbaa !2432
  %1792 = trunc i64 %1786 to i32
  %1793 = and i32 %1792, 255
  %1794 = call i32 @llvm.ctpop.i32(i32 %1793) #16
  %1795 = trunc i32 %1794 to i8
  %1796 = and i8 %1795, 1
  %1797 = xor i8 %1796, 1
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1797, i8* %1798, align 1, !tbaa !2446
  %1799 = xor i64 4, %1783
  %1800 = xor i64 %1799, %1786
  %1801 = lshr i64 %1800, 4
  %1802 = trunc i64 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1803, i8* %1804, align 1, !tbaa !2447
  %1805 = icmp eq i64 %1786, 0
  %1806 = zext i1 %1805 to i8
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1806, i8* %1807, align 1, !tbaa !2448
  %1808 = lshr i64 %1786, 63
  %1809 = trunc i64 %1808 to i8
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1809, i8* %1810, align 1, !tbaa !2449
  %1811 = lshr i64 %1783, 63
  %1812 = xor i64 %1808, %1811
  %1813 = add nuw nsw i64 %1812, %1808
  %1814 = icmp eq i64 %1813, 2
  %1815 = zext i1 %1814 to i8
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1815, i8* %1816, align 1, !tbaa !2450
  %1817 = load i64, i64* %RBP
  %1818 = sub i64 %1817, 8
  %1819 = load i64, i64* %RCX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 4
  store i64 %1821, i64* %PC
  %1822 = inttoptr i64 %1818 to i64*
  store i64 %1819, i64* %1822
  %1823 = load i64, i64* %RAX
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 3
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to i32*
  %1827 = load i32, i32* %1826
  %1828 = sext i32 %1827 to i64
  store i64 %1828, i64* %RAX, align 8, !tbaa !2428
  %1829 = load i64, i64* %RAX
  %1830 = mul i64 %1829, 8
  %1831 = add i64 %1830, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 8
  store i64 %1833, i64* %PC
  %1834 = inttoptr i64 %1831 to i64*
  %1835 = load i64, i64* %1834
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RBP
  %1837 = sub i64 %1836, 40
  %1838 = load i64, i64* %RAX
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1837 to i64*
  store i64 %1838, i64* %1841
  %1842 = load i64, i64* %PC
  %1843 = sub i64 %1842, 851
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 5
  store i64 %1845, i64* %PC
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1843, i64* %1846, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1847 = load i64, i64* %RBP
  %1848 = sub i64 %1847, 12
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 7
  store i64 %1850, i64* %PC
  %1851 = inttoptr i64 %1848 to i32*
  store i32 22, i32* %1851
  %1852 = load i64, i64* %RBP
  %1853 = sub i64 %1852, 12
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 3
  store i64 %1855, i64* %PC
  %1856 = inttoptr i64 %1853 to i32*
  %1857 = load i32, i32* %1856
  %1858 = zext i32 %1857 to i64
  store i64 %1858, i64* %RDI, align 8, !tbaa !2428
  %1859 = load i64, i64* %PC
  %1860 = sub i64 %1859, 1184
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 5
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 5
  store i64 %1864, i64* %PC
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1866 = load i64, i64* %1865, align 8, !tbaa !2428
  %1867 = add i64 %1866, -8
  %1868 = inttoptr i64 %1867 to i64*
  store i64 %1862, i64* %1868
  store i64 %1867, i64* %1865, align 8, !tbaa !2428
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1860, i64* %1869, align 8, !tbaa !2428
  %1870 = load i64, i64* %PC
  %1871 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1870, %struct.Memory* %MEMORY.1)
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 8
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 4
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i64*
  %1877 = load i64, i64* %1876
  store i64 %1877, i64* %RAX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RAX
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  store i64 %1878, i64* %RCX, align 8, !tbaa !2428
  %1881 = load i64, i64* %RCX
  %1882 = load i64, i64* %PC
  %1883 = add i64 %1882, 4
  store i64 %1883, i64* %PC
  %1884 = add i64 4, %1881
  store i64 %1884, i64* %RCX, align 8, !tbaa !2428
  %1885 = icmp ult i64 %1884, %1881
  %1886 = icmp ult i64 %1884, 4
  %1887 = or i1 %1885, %1886
  %1888 = zext i1 %1887 to i8
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1888, i8* %1889, align 1, !tbaa !2432
  %1890 = trunc i64 %1884 to i32
  %1891 = and i32 %1890, 255
  %1892 = call i32 @llvm.ctpop.i32(i32 %1891) #16
  %1893 = trunc i32 %1892 to i8
  %1894 = and i8 %1893, 1
  %1895 = xor i8 %1894, 1
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1895, i8* %1896, align 1, !tbaa !2446
  %1897 = xor i64 4, %1881
  %1898 = xor i64 %1897, %1884
  %1899 = lshr i64 %1898, 4
  %1900 = trunc i64 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1901, i8* %1902, align 1, !tbaa !2447
  %1903 = icmp eq i64 %1884, 0
  %1904 = zext i1 %1903 to i8
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1904, i8* %1905, align 1, !tbaa !2448
  %1906 = lshr i64 %1884, 63
  %1907 = trunc i64 %1906 to i8
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1907, i8* %1908, align 1, !tbaa !2449
  %1909 = lshr i64 %1881, 63
  %1910 = xor i64 %1906, %1909
  %1911 = add nuw nsw i64 %1910, %1906
  %1912 = icmp eq i64 %1911, 2
  %1913 = zext i1 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1913, i8* %1914, align 1, !tbaa !2450
  %1915 = load i64, i64* %RBP
  %1916 = sub i64 %1915, 8
  %1917 = load i64, i64* %RCX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1916 to i64*
  store i64 %1917, i64* %1920
  %1921 = load i64, i64* %RAX
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 3
  store i64 %1923, i64* %PC
  %1924 = inttoptr i64 %1921 to i32*
  %1925 = load i32, i32* %1924
  %1926 = sext i32 %1925 to i64
  store i64 %1926, i64* %RAX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RAX
  %1928 = mul i64 %1927, 8
  %1929 = add i64 %1928, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 8
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to i64*
  %1933 = load i64, i64* %1932
  store i64 %1933, i64* %RAX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RBP
  %1935 = sub i64 %1934, 40
  %1936 = load i64, i64* %RAX
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 4
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1935 to i64*
  store i64 %1936, i64* %1939
  %1940 = load i64, i64* %PC
  %1941 = sub i64 %1940, 1101
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 5
  store i64 %1943, i64* %PC
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1941, i64* %1944, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1945 = load i64, i64* %RBP
  %1946 = sub i64 %1945, 12
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 7
  store i64 %1948, i64* %PC
  %1949 = inttoptr i64 %1946 to i32*
  store i32 25, i32* %1949
  %1950 = load i64, i64* %PC
  %1951 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1950, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1951

block_400586:                                     ; preds = %block_400780, %block_400b04, %block_400686, %block_400a0a, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400942, %block_4005c5, %block_400848, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %1278, %block_4005c5 ], [ %1871, %block_4009a6 ], [ %1773, %block_4008ac ], [ %1675, %block_4007b2 ], [ %1577, %block_400b36 ], [ %1479, %block_4006b8 ], [ %1376, %block_400942 ], [ %1185, %block_400848 ], [ %1087, %block_40074e ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2477, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %1987, %block_400622 ], [ %2085, %block_400aa0 ], [ %2183, %block_40071c ], [ %2281, %block_400816 ], [ %2379, %block_400910 ], [ %2575, %block_400a0a ], [ %2673, %block_400686 ], [ %2771, %block_400b04 ], [ %2869, %block_400780 ]
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 40
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 4
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i64*
  %1957 = load i64, i64* %1956
  store i64 %1957, i64* %RAX, align 8, !tbaa !2428
  %1958 = load i64, i64* %RAX
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 2
  store i64 %1960, i64* %PC
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1958, i64* %1961, align 8, !tbaa !2428
  %1962 = load i64, i64* %PC
  switch i64 %1962, label %2943 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400622:                                     ; preds = %block_400586
  %1963 = load i64, i64* %RBP
  %1964 = sub i64 %1963, 12
  %1965 = load i64, i64* %PC
  %1966 = add i64 %1965, 7
  store i64 %1966, i64* %PC
  %1967 = inttoptr i64 %1964 to i32*
  store i32 4, i32* %1967
  %1968 = load i64, i64* %RBP
  %1969 = sub i64 %1968, 12
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 3
  store i64 %1971, i64* %PC
  %1972 = inttoptr i64 %1969 to i32*
  %1973 = load i32, i32* %1972
  %1974 = zext i32 %1973 to i64
  store i64 %1974, i64* %RDI, align 8, !tbaa !2428
  %1975 = load i64, i64* %PC
  %1976 = sub i64 %1975, 284
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 5
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 5
  store i64 %1980, i64* %PC
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1982 = load i64, i64* %1981, align 8, !tbaa !2428
  %1983 = add i64 %1982, -8
  %1984 = inttoptr i64 %1983 to i64*
  store i64 %1978, i64* %1984
  store i64 %1983, i64* %1981, align 8, !tbaa !2428
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1976, i64* %1985, align 8, !tbaa !2428
  %1986 = load i64, i64* %PC
  %1987 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1986, %struct.Memory* %MEMORY.1)
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 8
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1989 to i64*
  %1993 = load i64, i64* %1992
  store i64 %1993, i64* %RAX, align 8, !tbaa !2428
  %1994 = load i64, i64* %RAX
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 3
  store i64 %1996, i64* %PC
  store i64 %1994, i64* %RCX, align 8, !tbaa !2428
  %1997 = load i64, i64* %RCX
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 4
  store i64 %1999, i64* %PC
  %2000 = add i64 4, %1997
  store i64 %2000, i64* %RCX, align 8, !tbaa !2428
  %2001 = icmp ult i64 %2000, %1997
  %2002 = icmp ult i64 %2000, 4
  %2003 = or i1 %2001, %2002
  %2004 = zext i1 %2003 to i8
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2004, i8* %2005, align 1, !tbaa !2432
  %2006 = trunc i64 %2000 to i32
  %2007 = and i32 %2006, 255
  %2008 = call i32 @llvm.ctpop.i32(i32 %2007) #16
  %2009 = trunc i32 %2008 to i8
  %2010 = and i8 %2009, 1
  %2011 = xor i8 %2010, 1
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2011, i8* %2012, align 1, !tbaa !2446
  %2013 = xor i64 4, %1997
  %2014 = xor i64 %2013, %2000
  %2015 = lshr i64 %2014, 4
  %2016 = trunc i64 %2015 to i8
  %2017 = and i8 %2016, 1
  %2018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2017, i8* %2018, align 1, !tbaa !2447
  %2019 = icmp eq i64 %2000, 0
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2020, i8* %2021, align 1, !tbaa !2448
  %2022 = lshr i64 %2000, 63
  %2023 = trunc i64 %2022 to i8
  %2024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2023, i8* %2024, align 1, !tbaa !2449
  %2025 = lshr i64 %1997, 63
  %2026 = xor i64 %2022, %2025
  %2027 = add nuw nsw i64 %2026, %2022
  %2028 = icmp eq i64 %2027, 2
  %2029 = zext i1 %2028 to i8
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2029, i8* %2030, align 1, !tbaa !2450
  %2031 = load i64, i64* %RBP
  %2032 = sub i64 %2031, 8
  %2033 = load i64, i64* %RCX
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 4
  store i64 %2035, i64* %PC
  %2036 = inttoptr i64 %2032 to i64*
  store i64 %2033, i64* %2036
  %2037 = load i64, i64* %RAX
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 3
  store i64 %2039, i64* %PC
  %2040 = inttoptr i64 %2037 to i32*
  %2041 = load i32, i32* %2040
  %2042 = sext i32 %2041 to i64
  store i64 %2042, i64* %RAX, align 8, !tbaa !2428
  %2043 = load i64, i64* %RAX
  %2044 = mul i64 %2043, 8
  %2045 = add i64 %2044, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2046 = load i64, i64* %PC
  %2047 = add i64 %2046, 8
  store i64 %2047, i64* %PC
  %2048 = inttoptr i64 %2045 to i64*
  %2049 = load i64, i64* %2048
  store i64 %2049, i64* %RAX, align 8, !tbaa !2428
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 40
  %2052 = load i64, i64* %RAX
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2051 to i64*
  store i64 %2052, i64* %2055
  %2056 = load i64, i64* %PC
  %2057 = sub i64 %2056, 201
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 5
  store i64 %2059, i64* %PC
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2057, i64* %2060, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %2061 = load i64, i64* %RBP
  %2062 = sub i64 %2061, 12
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 7
  store i64 %2064, i64* %PC
  %2065 = inttoptr i64 %2062 to i32*
  store i32 27, i32* %2065
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 12
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 3
  store i64 %2069, i64* %PC
  %2070 = inttoptr i64 %2067 to i32*
  %2071 = load i32, i32* %2070
  %2072 = zext i32 %2071 to i64
  store i64 %2072, i64* %RDI, align 8, !tbaa !2428
  %2073 = load i64, i64* %PC
  %2074 = sub i64 %2073, 1434
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 5
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 5
  store i64 %2078, i64* %PC
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2080 = load i64, i64* %2079, align 8, !tbaa !2428
  %2081 = add i64 %2080, -8
  %2082 = inttoptr i64 %2081 to i64*
  store i64 %2076, i64* %2082
  store i64 %2081, i64* %2079, align 8, !tbaa !2428
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2074, i64* %2083, align 8, !tbaa !2428
  %2084 = load i64, i64* %PC
  %2085 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2084, %struct.Memory* %MEMORY.1)
  %2086 = load i64, i64* %RBP
  %2087 = sub i64 %2086, 8
  %2088 = load i64, i64* %PC
  %2089 = add i64 %2088, 4
  store i64 %2089, i64* %PC
  %2090 = inttoptr i64 %2087 to i64*
  %2091 = load i64, i64* %2090
  store i64 %2091, i64* %RAX, align 8, !tbaa !2428
  %2092 = load i64, i64* %RAX
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 3
  store i64 %2094, i64* %PC
  store i64 %2092, i64* %RCX, align 8, !tbaa !2428
  %2095 = load i64, i64* %RCX
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 4
  store i64 %2097, i64* %PC
  %2098 = add i64 4, %2095
  store i64 %2098, i64* %RCX, align 8, !tbaa !2428
  %2099 = icmp ult i64 %2098, %2095
  %2100 = icmp ult i64 %2098, 4
  %2101 = or i1 %2099, %2100
  %2102 = zext i1 %2101 to i8
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2102, i8* %2103, align 1, !tbaa !2432
  %2104 = trunc i64 %2098 to i32
  %2105 = and i32 %2104, 255
  %2106 = call i32 @llvm.ctpop.i32(i32 %2105) #16
  %2107 = trunc i32 %2106 to i8
  %2108 = and i8 %2107, 1
  %2109 = xor i8 %2108, 1
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2109, i8* %2110, align 1, !tbaa !2446
  %2111 = xor i64 4, %2095
  %2112 = xor i64 %2111, %2098
  %2113 = lshr i64 %2112, 4
  %2114 = trunc i64 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2115, i8* %2116, align 1, !tbaa !2447
  %2117 = icmp eq i64 %2098, 0
  %2118 = zext i1 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2118, i8* %2119, align 1, !tbaa !2448
  %2120 = lshr i64 %2098, 63
  %2121 = trunc i64 %2120 to i8
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2121, i8* %2122, align 1, !tbaa !2449
  %2123 = lshr i64 %2095, 63
  %2124 = xor i64 %2120, %2123
  %2125 = add nuw nsw i64 %2124, %2120
  %2126 = icmp eq i64 %2125, 2
  %2127 = zext i1 %2126 to i8
  %2128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2127, i8* %2128, align 1, !tbaa !2450
  %2129 = load i64, i64* %RBP
  %2130 = sub i64 %2129, 8
  %2131 = load i64, i64* %RCX
  %2132 = load i64, i64* %PC
  %2133 = add i64 %2132, 4
  store i64 %2133, i64* %PC
  %2134 = inttoptr i64 %2130 to i64*
  store i64 %2131, i64* %2134
  %2135 = load i64, i64* %RAX
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 3
  store i64 %2137, i64* %PC
  %2138 = inttoptr i64 %2135 to i32*
  %2139 = load i32, i32* %2138
  %2140 = sext i32 %2139 to i64
  store i64 %2140, i64* %RAX, align 8, !tbaa !2428
  %2141 = load i64, i64* %RAX
  %2142 = mul i64 %2141, 8
  %2143 = add i64 %2142, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 8
  store i64 %2145, i64* %PC
  %2146 = inttoptr i64 %2143 to i64*
  %2147 = load i64, i64* %2146
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %RAX
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 4
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2149 to i64*
  store i64 %2150, i64* %2153
  %2154 = load i64, i64* %PC
  %2155 = sub i64 %2154, 1351
  %2156 = load i64, i64* %PC
  %2157 = add i64 %2156, 5
  store i64 %2157, i64* %PC
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2155, i64* %2158, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 12
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 7
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i32*
  store i32 9, i32* %2163
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 12
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i32*
  %2169 = load i32, i32* %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RDI, align 8, !tbaa !2428
  %2171 = load i64, i64* %PC
  %2172 = sub i64 %2171, 534
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2178 = load i64, i64* %2177, align 8, !tbaa !2428
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2174, i64* %2180
  store i64 %2179, i64* %2177, align 8, !tbaa !2428
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2172, i64* %2181, align 8, !tbaa !2428
  %2182 = load i64, i64* %PC
  %2183 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2182, %struct.Memory* %MEMORY.1)
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 8
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RAX
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2193 = load i64, i64* %RCX
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = add i64 4, %2193
  store i64 %2196, i64* %RCX, align 8, !tbaa !2428
  %2197 = icmp ult i64 %2196, %2193
  %2198 = icmp ult i64 %2196, 4
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2200, i8* %2201, align 1, !tbaa !2432
  %2202 = trunc i64 %2196 to i32
  %2203 = and i32 %2202, 255
  %2204 = call i32 @llvm.ctpop.i32(i32 %2203) #16
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = xor i8 %2206, 1
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2207, i8* %2208, align 1, !tbaa !2446
  %2209 = xor i64 4, %2193
  %2210 = xor i64 %2209, %2196
  %2211 = lshr i64 %2210, 4
  %2212 = trunc i64 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2213, i8* %2214, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2196, 0
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2216, i8* %2217, align 1, !tbaa !2448
  %2218 = lshr i64 %2196, 63
  %2219 = trunc i64 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2219, i8* %2220, align 1, !tbaa !2449
  %2221 = lshr i64 %2193, 63
  %2222 = xor i64 %2218, %2221
  %2223 = add nuw nsw i64 %2222, %2218
  %2224 = icmp eq i64 %2223, 2
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2226, align 1, !tbaa !2450
  %2227 = load i64, i64* %RBP
  %2228 = sub i64 %2227, 8
  %2229 = load i64, i64* %RCX
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 4
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2228 to i64*
  store i64 %2229, i64* %2232
  %2233 = load i64, i64* %RAX
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 3
  store i64 %2235, i64* %PC
  %2236 = inttoptr i64 %2233 to i32*
  %2237 = load i32, i32* %2236
  %2238 = sext i32 %2237 to i64
  store i64 %2238, i64* %RAX, align 8, !tbaa !2428
  %2239 = load i64, i64* %RAX
  %2240 = mul i64 %2239, 8
  %2241 = add i64 %2240, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 8
  store i64 %2243, i64* %PC
  %2244 = inttoptr i64 %2241 to i64*
  %2245 = load i64, i64* %2244
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 40
  %2248 = load i64, i64* %RAX
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 4
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2247 to i64*
  store i64 %2248, i64* %2251
  %2252 = load i64, i64* %PC
  %2253 = sub i64 %2252, 451
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 5
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2253, i64* %2256, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 12
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 7
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  store i32 14, i32* %2261
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 12
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 3
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RDI, align 8, !tbaa !2428
  %2269 = load i64, i64* %PC
  %2270 = sub i64 %2269, 784
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 5
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 5
  store i64 %2274, i64* %PC
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2276 = load i64, i64* %2275, align 8, !tbaa !2428
  %2277 = add i64 %2276, -8
  %2278 = inttoptr i64 %2277 to i64*
  store i64 %2272, i64* %2278
  store i64 %2277, i64* %2275, align 8, !tbaa !2428
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2270, i64* %2279, align 8, !tbaa !2428
  %2280 = load i64, i64* %PC
  %2281 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2280, %struct.Memory* %MEMORY.1)
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 8
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 4
  store i64 %2285, i64* %PC
  %2286 = inttoptr i64 %2283 to i64*
  %2287 = load i64, i64* %2286
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i64, i64* %RAX
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC
  store i64 %2288, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RCX
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = add i64 4, %2291
  store i64 %2294, i64* %RCX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2291
  %2296 = icmp ult i64 %2294, 4
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2298, i8* %2299, align 1, !tbaa !2432
  %2300 = trunc i64 %2294 to i32
  %2301 = and i32 %2300, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #16
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 4, %2291
  %2308 = xor i64 %2307, %2294
  %2309 = lshr i64 %2308, 4
  %2310 = trunc i64 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2311, i8* %2312, align 1, !tbaa !2447
  %2313 = icmp eq i64 %2294, 0
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2314, i8* %2315, align 1, !tbaa !2448
  %2316 = lshr i64 %2294, 63
  %2317 = trunc i64 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2317, i8* %2318, align 1, !tbaa !2449
  %2319 = lshr i64 %2291, 63
  %2320 = xor i64 %2316, %2319
  %2321 = add nuw nsw i64 %2320, %2316
  %2322 = icmp eq i64 %2321, 2
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2323, i8* %2324, align 1, !tbaa !2450
  %2325 = load i64, i64* %RBP
  %2326 = sub i64 %2325, 8
  %2327 = load i64, i64* %RCX
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2326 to i64*
  store i64 %2327, i64* %2330
  %2331 = load i64, i64* %RAX
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 3
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2331 to i32*
  %2335 = load i32, i32* %2334
  %2336 = sext i32 %2335 to i64
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = load i64, i64* %RAX
  %2338 = mul i64 %2337, 8
  %2339 = add i64 %2338, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 8
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 40
  %2346 = load i64, i64* %RAX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2345 to i64*
  store i64 %2346, i64* %2349
  %2350 = load i64, i64* %PC
  %2351 = sub i64 %2350, 701
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 5
  store i64 %2353, i64* %PC
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2351, i64* %2354, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2355 = load i64, i64* %RBP
  %2356 = sub i64 %2355, 12
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 7
  store i64 %2358, i64* %PC
  %2359 = inttoptr i64 %2356 to i32*
  store i32 19, i32* %2359
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 12
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 3
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i32*
  %2365 = load i32, i32* %2364
  %2366 = zext i32 %2365 to i64
  store i64 %2366, i64* %RDI, align 8, !tbaa !2428
  %2367 = load i64, i64* %PC
  %2368 = sub i64 %2367, 1034
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 5
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2374 = load i64, i64* %2373, align 8, !tbaa !2428
  %2375 = add i64 %2374, -8
  %2376 = inttoptr i64 %2375 to i64*
  store i64 %2370, i64* %2376
  store i64 %2375, i64* %2373, align 8, !tbaa !2428
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2368, i64* %2377, align 8, !tbaa !2428
  %2378 = load i64, i64* %PC
  %2379 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2378, %struct.Memory* %MEMORY.1)
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 8
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2381 to i64*
  %2385 = load i64, i64* %2384
  store i64 %2385, i64* %RAX, align 8, !tbaa !2428
  %2386 = load i64, i64* %RAX
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 3
  store i64 %2388, i64* %PC
  store i64 %2386, i64* %RCX, align 8, !tbaa !2428
  %2389 = load i64, i64* %RCX
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = add i64 4, %2389
  store i64 %2392, i64* %RCX, align 8, !tbaa !2428
  %2393 = icmp ult i64 %2392, %2389
  %2394 = icmp ult i64 %2392, 4
  %2395 = or i1 %2393, %2394
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2432
  %2398 = trunc i64 %2392 to i32
  %2399 = and i32 %2398, 255
  %2400 = call i32 @llvm.ctpop.i32(i32 %2399) #16
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2403, i8* %2404, align 1, !tbaa !2446
  %2405 = xor i64 4, %2389
  %2406 = xor i64 %2405, %2392
  %2407 = lshr i64 %2406, 4
  %2408 = trunc i64 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2409, i8* %2410, align 1, !tbaa !2447
  %2411 = icmp eq i64 %2392, 0
  %2412 = zext i1 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2412, i8* %2413, align 1, !tbaa !2448
  %2414 = lshr i64 %2392, 63
  %2415 = trunc i64 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2415, i8* %2416, align 1, !tbaa !2449
  %2417 = lshr i64 %2389, 63
  %2418 = xor i64 %2414, %2417
  %2419 = add nuw nsw i64 %2418, %2414
  %2420 = icmp eq i64 %2419, 2
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2421, i8* %2422, align 1, !tbaa !2450
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 8
  %2425 = load i64, i64* %RCX
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 4
  store i64 %2427, i64* %PC
  %2428 = inttoptr i64 %2424 to i64*
  store i64 %2425, i64* %2428
  %2429 = load i64, i64* %RAX
  %2430 = load i64, i64* %PC
  %2431 = add i64 %2430, 3
  store i64 %2431, i64* %PC
  %2432 = inttoptr i64 %2429 to i32*
  %2433 = load i32, i32* %2432
  %2434 = sext i32 %2433 to i64
  store i64 %2434, i64* %RAX, align 8, !tbaa !2428
  %2435 = load i64, i64* %RAX
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 8
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to i64*
  %2441 = load i64, i64* %2440
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 40
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 4
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2443 to i64*
  store i64 %2444, i64* %2447
  %2448 = load i64, i64* %PC
  %2449 = sub i64 %2448, 951
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 5
  store i64 %2451, i64* %PC
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2449, i64* %2452, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 12
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 7
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  store i32 1, i32* %2457
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 12
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 3
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2459 to i32*
  %2463 = load i32, i32* %2462
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RDI, align 8, !tbaa !2428
  %2465 = load i64, i64* %PC
  %2466 = sub i64 %2465, 134
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2472 = load i64, i64* %2471, align 8, !tbaa !2428
  %2473 = add i64 %2472, -8
  %2474 = inttoptr i64 %2473 to i64*
  store i64 %2468, i64* %2474
  store i64 %2473, i64* %2471, align 8, !tbaa !2428
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2466, i64* %2475, align 8, !tbaa !2428
  %2476 = load i64, i64* %PC
  %2477 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2476, %struct.Memory* %MEMORY.1)
  %2478 = load i64, i64* %RBP
  %2479 = sub i64 %2478, 8
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2479 to i64*
  %2483 = load i64, i64* %2482
  store i64 %2483, i64* %RAX, align 8, !tbaa !2428
  %2484 = load i64, i64* %RAX
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  store i64 %2484, i64* %RCX, align 8, !tbaa !2428
  %2487 = load i64, i64* %RCX
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 4
  store i64 %2489, i64* %PC
  %2490 = add i64 4, %2487
  store i64 %2490, i64* %RCX, align 8, !tbaa !2428
  %2491 = icmp ult i64 %2490, %2487
  %2492 = icmp ult i64 %2490, 4
  %2493 = or i1 %2491, %2492
  %2494 = zext i1 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2494, i8* %2495, align 1, !tbaa !2432
  %2496 = trunc i64 %2490 to i32
  %2497 = and i32 %2496, 255
  %2498 = call i32 @llvm.ctpop.i32(i32 %2497) #16
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = xor i8 %2500, 1
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2501, i8* %2502, align 1, !tbaa !2446
  %2503 = xor i64 4, %2487
  %2504 = xor i64 %2503, %2490
  %2505 = lshr i64 %2504, 4
  %2506 = trunc i64 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2507, i8* %2508, align 1, !tbaa !2447
  %2509 = icmp eq i64 %2490, 0
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2510, i8* %2511, align 1, !tbaa !2448
  %2512 = lshr i64 %2490, 63
  %2513 = trunc i64 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2513, i8* %2514, align 1, !tbaa !2449
  %2515 = lshr i64 %2487, 63
  %2516 = xor i64 %2512, %2515
  %2517 = add nuw nsw i64 %2516, %2512
  %2518 = icmp eq i64 %2517, 2
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2519, i8* %2520, align 1, !tbaa !2450
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 8
  %2523 = load i64, i64* %RCX
  %2524 = load i64, i64* %PC
  %2525 = add i64 %2524, 4
  store i64 %2525, i64* %PC
  %2526 = inttoptr i64 %2522 to i64*
  store i64 %2523, i64* %2526
  %2527 = load i64, i64* %RAX
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 3
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RAX
  %2534 = mul i64 %2533, 8
  %2535 = add i64 %2534, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 8
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2535 to i64*
  %2539 = load i64, i64* %2538
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 40
  %2542 = load i64, i64* %RAX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2541 to i64*
  store i64 %2542, i64* %2545
  %2546 = load i64, i64* %PC
  %2547 = sub i64 %2546, 51
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2547, i64* %2550, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 12
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 7
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to i32*
  store i32 24, i32* %2555
  %2556 = load i64, i64* %RBP
  %2557 = sub i64 %2556, 12
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 3
  store i64 %2559, i64* %PC
  %2560 = inttoptr i64 %2557 to i32*
  %2561 = load i32, i32* %2560
  %2562 = zext i32 %2561 to i64
  store i64 %2562, i64* %RDI, align 8, !tbaa !2428
  %2563 = load i64, i64* %PC
  %2564 = sub i64 %2563, 1284
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 5
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  store i64 %2568, i64* %PC
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2570 = load i64, i64* %2569, align 8, !tbaa !2428
  %2571 = add i64 %2570, -8
  %2572 = inttoptr i64 %2571 to i64*
  store i64 %2566, i64* %2572
  store i64 %2571, i64* %2569, align 8, !tbaa !2428
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2564, i64* %2573, align 8, !tbaa !2428
  %2574 = load i64, i64* %PC
  %2575 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2574, %struct.Memory* %MEMORY.1)
  %2576 = load i64, i64* %RBP
  %2577 = sub i64 %2576, 8
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2577 to i64*
  %2581 = load i64, i64* %2580
  store i64 %2581, i64* %RAX, align 8, !tbaa !2428
  %2582 = load i64, i64* %RAX
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 3
  store i64 %2584, i64* %PC
  store i64 %2582, i64* %RCX, align 8, !tbaa !2428
  %2585 = load i64, i64* %RCX
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 4
  store i64 %2587, i64* %PC
  %2588 = add i64 4, %2585
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = icmp ult i64 %2588, %2585
  %2590 = icmp ult i64 %2588, 4
  %2591 = or i1 %2589, %2590
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2592, i8* %2593, align 1, !tbaa !2432
  %2594 = trunc i64 %2588 to i32
  %2595 = and i32 %2594, 255
  %2596 = call i32 @llvm.ctpop.i32(i32 %2595) #16
  %2597 = trunc i32 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = xor i8 %2598, 1
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2599, i8* %2600, align 1, !tbaa !2446
  %2601 = xor i64 4, %2585
  %2602 = xor i64 %2601, %2588
  %2603 = lshr i64 %2602, 4
  %2604 = trunc i64 %2603 to i8
  %2605 = and i8 %2604, 1
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2605, i8* %2606, align 1, !tbaa !2447
  %2607 = icmp eq i64 %2588, 0
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2608, i8* %2609, align 1, !tbaa !2448
  %2610 = lshr i64 %2588, 63
  %2611 = trunc i64 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2611, i8* %2612, align 1, !tbaa !2449
  %2613 = lshr i64 %2585, 63
  %2614 = xor i64 %2610, %2613
  %2615 = add nuw nsw i64 %2614, %2610
  %2616 = icmp eq i64 %2615, 2
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2617, i8* %2618, align 1, !tbaa !2450
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 8
  %2621 = load i64, i64* %RCX
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 4
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2620 to i64*
  store i64 %2621, i64* %2624
  %2625 = load i64, i64* %RAX
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 3
  store i64 %2627, i64* %PC
  %2628 = inttoptr i64 %2625 to i32*
  %2629 = load i32, i32* %2628
  %2630 = sext i32 %2629 to i64
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RAX
  %2632 = mul i64 %2631, 8
  %2633 = add i64 %2632, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 8
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2633 to i64*
  %2637 = load i64, i64* %2636
  store i64 %2637, i64* %RAX, align 8, !tbaa !2428
  %2638 = load i64, i64* %RBP
  %2639 = sub i64 %2638, 40
  %2640 = load i64, i64* %RAX
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 4
  store i64 %2642, i64* %PC
  %2643 = inttoptr i64 %2639 to i64*
  store i64 %2640, i64* %2643
  %2644 = load i64, i64* %PC
  %2645 = sub i64 %2644, 1201
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 5
  store i64 %2647, i64* %PC
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2645, i64* %2648, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2649 = load i64, i64* %RBP
  %2650 = sub i64 %2649, 12
  %2651 = load i64, i64* %PC
  %2652 = add i64 %2651, 7
  store i64 %2652, i64* %PC
  %2653 = inttoptr i64 %2650 to i32*
  store i32 6, i32* %2653
  %2654 = load i64, i64* %RBP
  %2655 = sub i64 %2654, 12
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 3
  store i64 %2657, i64* %PC
  %2658 = inttoptr i64 %2655 to i32*
  %2659 = load i32, i32* %2658
  %2660 = zext i32 %2659 to i64
  store i64 %2660, i64* %RDI, align 8, !tbaa !2428
  %2661 = load i64, i64* %PC
  %2662 = sub i64 %2661, 384
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 5
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 5
  store i64 %2666, i64* %PC
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2668 = load i64, i64* %2667, align 8, !tbaa !2428
  %2669 = add i64 %2668, -8
  %2670 = inttoptr i64 %2669 to i64*
  store i64 %2664, i64* %2670
  store i64 %2669, i64* %2667, align 8, !tbaa !2428
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2662, i64* %2671, align 8, !tbaa !2428
  %2672 = load i64, i64* %PC
  %2673 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2672, %struct.Memory* %MEMORY.1)
  %2674 = load i64, i64* %RBP
  %2675 = sub i64 %2674, 8
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 4
  store i64 %2677, i64* %PC
  %2678 = inttoptr i64 %2675 to i64*
  %2679 = load i64, i64* %2678
  store i64 %2679, i64* %RAX, align 8, !tbaa !2428
  %2680 = load i64, i64* %RAX
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 3
  store i64 %2682, i64* %PC
  store i64 %2680, i64* %RCX, align 8, !tbaa !2428
  %2683 = load i64, i64* %RCX
  %2684 = load i64, i64* %PC
  %2685 = add i64 %2684, 4
  store i64 %2685, i64* %PC
  %2686 = add i64 4, %2683
  store i64 %2686, i64* %RCX, align 8, !tbaa !2428
  %2687 = icmp ult i64 %2686, %2683
  %2688 = icmp ult i64 %2686, 4
  %2689 = or i1 %2687, %2688
  %2690 = zext i1 %2689 to i8
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2690, i8* %2691, align 1, !tbaa !2432
  %2692 = trunc i64 %2686 to i32
  %2693 = and i32 %2692, 255
  %2694 = call i32 @llvm.ctpop.i32(i32 %2693) #16
  %2695 = trunc i32 %2694 to i8
  %2696 = and i8 %2695, 1
  %2697 = xor i8 %2696, 1
  %2698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2697, i8* %2698, align 1, !tbaa !2446
  %2699 = xor i64 4, %2683
  %2700 = xor i64 %2699, %2686
  %2701 = lshr i64 %2700, 4
  %2702 = trunc i64 %2701 to i8
  %2703 = and i8 %2702, 1
  %2704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2703, i8* %2704, align 1, !tbaa !2447
  %2705 = icmp eq i64 %2686, 0
  %2706 = zext i1 %2705 to i8
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2706, i8* %2707, align 1, !tbaa !2448
  %2708 = lshr i64 %2686, 63
  %2709 = trunc i64 %2708 to i8
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2709, i8* %2710, align 1, !tbaa !2449
  %2711 = lshr i64 %2683, 63
  %2712 = xor i64 %2708, %2711
  %2713 = add nuw nsw i64 %2712, %2708
  %2714 = icmp eq i64 %2713, 2
  %2715 = zext i1 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2715, i8* %2716, align 1, !tbaa !2450
  %2717 = load i64, i64* %RBP
  %2718 = sub i64 %2717, 8
  %2719 = load i64, i64* %RCX
  %2720 = load i64, i64* %PC
  %2721 = add i64 %2720, 4
  store i64 %2721, i64* %PC
  %2722 = inttoptr i64 %2718 to i64*
  store i64 %2719, i64* %2722
  %2723 = load i64, i64* %RAX
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 3
  store i64 %2725, i64* %PC
  %2726 = inttoptr i64 %2723 to i32*
  %2727 = load i32, i32* %2726
  %2728 = sext i32 %2727 to i64
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = load i64, i64* %RAX
  %2730 = mul i64 %2729, 8
  %2731 = add i64 %2730, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 8
  store i64 %2733, i64* %PC
  %2734 = inttoptr i64 %2731 to i64*
  %2735 = load i64, i64* %2734
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = load i64, i64* %RBP
  %2737 = sub i64 %2736, 40
  %2738 = load i64, i64* %RAX
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2737 to i64*
  store i64 %2738, i64* %2741
  %2742 = load i64, i64* %PC
  %2743 = sub i64 %2742, 301
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 5
  store i64 %2745, i64* %PC
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2743, i64* %2746, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 12
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 7
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  store i32 29, i32* %2751
  %2752 = load i64, i64* %RBP
  %2753 = sub i64 %2752, 12
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 3
  store i64 %2755, i64* %PC
  %2756 = inttoptr i64 %2753 to i32*
  %2757 = load i32, i32* %2756
  %2758 = zext i32 %2757 to i64
  store i64 %2758, i64* %RDI, align 8, !tbaa !2428
  %2759 = load i64, i64* %PC
  %2760 = sub i64 %2759, 1534
  %2761 = load i64, i64* %PC
  %2762 = add i64 %2761, 5
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 5
  store i64 %2764, i64* %PC
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2766 = load i64, i64* %2765, align 8, !tbaa !2428
  %2767 = add i64 %2766, -8
  %2768 = inttoptr i64 %2767 to i64*
  store i64 %2762, i64* %2768
  store i64 %2767, i64* %2765, align 8, !tbaa !2428
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2760, i64* %2769, align 8, !tbaa !2428
  %2770 = load i64, i64* %PC
  %2771 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2770, %struct.Memory* %MEMORY.1)
  %2772 = load i64, i64* %RBP
  %2773 = sub i64 %2772, 8
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 4
  store i64 %2775, i64* %PC
  %2776 = inttoptr i64 %2773 to i64*
  %2777 = load i64, i64* %2776
  store i64 %2777, i64* %RAX, align 8, !tbaa !2428
  %2778 = load i64, i64* %RAX
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 3
  store i64 %2780, i64* %PC
  store i64 %2778, i64* %RCX, align 8, !tbaa !2428
  %2781 = load i64, i64* %RCX
  %2782 = load i64, i64* %PC
  %2783 = add i64 %2782, 4
  store i64 %2783, i64* %PC
  %2784 = add i64 4, %2781
  store i64 %2784, i64* %RCX, align 8, !tbaa !2428
  %2785 = icmp ult i64 %2784, %2781
  %2786 = icmp ult i64 %2784, 4
  %2787 = or i1 %2785, %2786
  %2788 = zext i1 %2787 to i8
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2788, i8* %2789, align 1, !tbaa !2432
  %2790 = trunc i64 %2784 to i32
  %2791 = and i32 %2790, 255
  %2792 = call i32 @llvm.ctpop.i32(i32 %2791) #16
  %2793 = trunc i32 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = xor i8 %2794, 1
  %2796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2795, i8* %2796, align 1, !tbaa !2446
  %2797 = xor i64 4, %2781
  %2798 = xor i64 %2797, %2784
  %2799 = lshr i64 %2798, 4
  %2800 = trunc i64 %2799 to i8
  %2801 = and i8 %2800, 1
  %2802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2801, i8* %2802, align 1, !tbaa !2447
  %2803 = icmp eq i64 %2784, 0
  %2804 = zext i1 %2803 to i8
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2804, i8* %2805, align 1, !tbaa !2448
  %2806 = lshr i64 %2784, 63
  %2807 = trunc i64 %2806 to i8
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2807, i8* %2808, align 1, !tbaa !2449
  %2809 = lshr i64 %2781, 63
  %2810 = xor i64 %2806, %2809
  %2811 = add nuw nsw i64 %2810, %2806
  %2812 = icmp eq i64 %2811, 2
  %2813 = zext i1 %2812 to i8
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2813, i8* %2814, align 1, !tbaa !2450
  %2815 = load i64, i64* %RBP
  %2816 = sub i64 %2815, 8
  %2817 = load i64, i64* %RCX
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 4
  store i64 %2819, i64* %PC
  %2820 = inttoptr i64 %2816 to i64*
  store i64 %2817, i64* %2820
  %2821 = load i64, i64* %RAX
  %2822 = load i64, i64* %PC
  %2823 = add i64 %2822, 3
  store i64 %2823, i64* %PC
  %2824 = inttoptr i64 %2821 to i32*
  %2825 = load i32, i32* %2824
  %2826 = sext i32 %2825 to i64
  store i64 %2826, i64* %RAX, align 8, !tbaa !2428
  %2827 = load i64, i64* %RAX
  %2828 = mul i64 %2827, 8
  %2829 = add i64 %2828, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 8
  store i64 %2831, i64* %PC
  %2832 = inttoptr i64 %2829 to i64*
  %2833 = load i64, i64* %2832
  store i64 %2833, i64* %RAX, align 8, !tbaa !2428
  %2834 = load i64, i64* %RBP
  %2835 = sub i64 %2834, 40
  %2836 = load i64, i64* %RAX
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 4
  store i64 %2838, i64* %PC
  %2839 = inttoptr i64 %2835 to i64*
  store i64 %2836, i64* %2839
  %2840 = load i64, i64* %PC
  %2841 = sub i64 %2840, 1451
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 5
  store i64 %2843, i64* %PC
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2841, i64* %2844, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 12
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 7
  store i64 %2848, i64* %PC
  %2849 = inttoptr i64 %2846 to i32*
  store i32 11, i32* %2849
  %2850 = load i64, i64* %RBP
  %2851 = sub i64 %2850, 12
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 3
  store i64 %2853, i64* %PC
  %2854 = inttoptr i64 %2851 to i32*
  %2855 = load i32, i32* %2854
  %2856 = zext i32 %2855 to i64
  store i64 %2856, i64* %RDI, align 8, !tbaa !2428
  %2857 = load i64, i64* %PC
  %2858 = sub i64 %2857, 634
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 5
  %2861 = load i64, i64* %PC
  %2862 = add i64 %2861, 5
  store i64 %2862, i64* %PC
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2864 = load i64, i64* %2863, align 8, !tbaa !2428
  %2865 = add i64 %2864, -8
  %2866 = inttoptr i64 %2865 to i64*
  store i64 %2860, i64* %2866
  store i64 %2865, i64* %2863, align 8, !tbaa !2428
  %2867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2858, i64* %2867, align 8, !tbaa !2428
  %2868 = load i64, i64* %PC
  %2869 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2868, %struct.Memory* %MEMORY.1)
  %2870 = load i64, i64* %RBP
  %2871 = sub i64 %2870, 8
  %2872 = load i64, i64* %PC
  %2873 = add i64 %2872, 4
  store i64 %2873, i64* %PC
  %2874 = inttoptr i64 %2871 to i64*
  %2875 = load i64, i64* %2874
  store i64 %2875, i64* %RAX, align 8, !tbaa !2428
  %2876 = load i64, i64* %RAX
  %2877 = load i64, i64* %PC
  %2878 = add i64 %2877, 3
  store i64 %2878, i64* %PC
  store i64 %2876, i64* %RCX, align 8, !tbaa !2428
  %2879 = load i64, i64* %RCX
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 4
  store i64 %2881, i64* %PC
  %2882 = add i64 4, %2879
  store i64 %2882, i64* %RCX, align 8, !tbaa !2428
  %2883 = icmp ult i64 %2882, %2879
  %2884 = icmp ult i64 %2882, 4
  %2885 = or i1 %2883, %2884
  %2886 = zext i1 %2885 to i8
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2886, i8* %2887, align 1, !tbaa !2432
  %2888 = trunc i64 %2882 to i32
  %2889 = and i32 %2888, 255
  %2890 = call i32 @llvm.ctpop.i32(i32 %2889) #16
  %2891 = trunc i32 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = xor i8 %2892, 1
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2893, i8* %2894, align 1, !tbaa !2446
  %2895 = xor i64 4, %2879
  %2896 = xor i64 %2895, %2882
  %2897 = lshr i64 %2896, 4
  %2898 = trunc i64 %2897 to i8
  %2899 = and i8 %2898, 1
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2899, i8* %2900, align 1, !tbaa !2447
  %2901 = icmp eq i64 %2882, 0
  %2902 = zext i1 %2901 to i8
  %2903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2902, i8* %2903, align 1, !tbaa !2448
  %2904 = lshr i64 %2882, 63
  %2905 = trunc i64 %2904 to i8
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2905, i8* %2906, align 1, !tbaa !2449
  %2907 = lshr i64 %2879, 63
  %2908 = xor i64 %2904, %2907
  %2909 = add nuw nsw i64 %2908, %2904
  %2910 = icmp eq i64 %2909, 2
  %2911 = zext i1 %2910 to i8
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2911, i8* %2912, align 1, !tbaa !2450
  %2913 = load i64, i64* %RBP
  %2914 = sub i64 %2913, 8
  %2915 = load i64, i64* %RCX
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 4
  store i64 %2917, i64* %PC
  %2918 = inttoptr i64 %2914 to i64*
  store i64 %2915, i64* %2918
  %2919 = load i64, i64* %RAX
  %2920 = load i64, i64* %PC
  %2921 = add i64 %2920, 3
  store i64 %2921, i64* %PC
  %2922 = inttoptr i64 %2919 to i32*
  %2923 = load i32, i32* %2922
  %2924 = sext i32 %2923 to i64
  store i64 %2924, i64* %RAX, align 8, !tbaa !2428
  %2925 = load i64, i64* %RAX
  %2926 = mul i64 %2925, 8
  %2927 = add i64 %2926, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 8
  store i64 %2929, i64* %PC
  %2930 = inttoptr i64 %2927 to i64*
  %2931 = load i64, i64* %2930
  store i64 %2931, i64* %RAX, align 8, !tbaa !2428
  %2932 = load i64, i64* %RBP
  %2933 = sub i64 %2932, 40
  %2934 = load i64, i64* %RAX
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 4
  store i64 %2936, i64* %PC
  %2937 = inttoptr i64 %2933 to i64*
  store i64 %2934, i64* %2937
  %2938 = load i64, i64* %PC
  %2939 = sub i64 %2938, 551
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 5
  store i64 %2941, i64* %PC
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2939, i64* %2942, align 8, !tbaa !2428
  br label %block_400586

; <label>:2943:                                   ; preds = %block_400586
  %2944 = load i64, i64* %PC
  %2945 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2944, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2945
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003e0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003f2, label %block_4003f0

block_4003f0:                                     ; preds = %block_4003e0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003f2

block_4003f2:                                     ; preds = %block_4003f0, %block_4003e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003e0 ], [ %92, %block_4003f0 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400580(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400580:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = add i64 48, %12
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %15, %12
  %17 = icmp ult i64 %15, 48
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %15 to i32
  %22 = and i32 %21, 255
  %23 = call i32 @llvm.ctpop.i32(i32 %22) #16
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 48, %12
  %29 = xor i64 %28, %15
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = icmp eq i64 %15, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %15, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = lshr i64 %12, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %37
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cf4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cf4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a43(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400a43

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.1)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 15, i32* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 834
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.1)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 8
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 3
  store i64 %1194, i64* %PC
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = add i64 4, %1195
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1195
  %1200 = icmp ult i64 %1198, 4
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1202, i8* %1203, align 1, !tbaa !2432
  %1204 = trunc i64 %1198 to i32
  %1205 = and i32 %1204, 255
  %1206 = call i32 @llvm.ctpop.i32(i32 %1205) #16
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1209, i8* %1210, align 1, !tbaa !2446
  %1211 = xor i64 4, %1195
  %1212 = xor i64 %1211, %1198
  %1213 = lshr i64 %1212, 4
  %1214 = trunc i64 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1215, i8* %1216, align 1, !tbaa !2447
  %1217 = icmp eq i64 %1198, 0
  %1218 = zext i1 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1218, i8* %1219, align 1, !tbaa !2448
  %1220 = lshr i64 %1198, 63
  %1221 = trunc i64 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1221, i8* %1222, align 1, !tbaa !2449
  %1223 = lshr i64 %1195, 63
  %1224 = xor i64 %1220, %1223
  %1225 = add nuw nsw i64 %1224, %1220
  %1226 = icmp eq i64 %1225, 2
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1227, i8* %1228, align 1, !tbaa !2450
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 8
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %RAX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = mul i64 %1241, 8
  %1243 = add i64 %1242, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 8
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 40
  %1250 = load i64, i64* %RAX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1249 to i64*
  store i64 %1250, i64* %1253
  %1254 = load i64, i64* %PC
  %1255 = sub i64 %1254, 751
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 5
  store i64 %1257, i64* %PC
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1255, i64* %1258, align 8, !tbaa !2428
  br label %block_400586

block_400a43:                                     ; preds = %block_400a3c, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400a3c ]
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  %1264 = load i32, i32* %1263
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RDI, align 8, !tbaa !2428
  %1266 = load i64, i64* %PC
  %1267 = sub i64 %1266, 1334
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1277, %struct.Memory* %MEMORY.0)
  %1279 = load i64, i64* %RBP
  %1280 = sub i64 %1279, 8
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %PC
  %1283 = inttoptr i64 %1280 to i64*
  %1284 = load i64, i64* %1283
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 3
  store i64 %1287, i64* %PC
  store i64 %1285, i64* %RCX, align 8, !tbaa !2428
  %1288 = load i64, i64* %RCX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = add i64 4, %1288
  store i64 %1291, i64* %RCX, align 8, !tbaa !2428
  %1292 = icmp ult i64 %1291, %1288
  %1293 = icmp ult i64 %1291, 4
  %1294 = or i1 %1292, %1293
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = trunc i64 %1291 to i32
  %1298 = and i32 %1297, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2446
  %1304 = xor i64 4, %1288
  %1305 = xor i64 %1304, %1291
  %1306 = lshr i64 %1305, 4
  %1307 = trunc i64 %1306 to i8
  %1308 = and i8 %1307, 1
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1308, i8* %1309, align 1, !tbaa !2447
  %1310 = icmp eq i64 %1291, 0
  %1311 = zext i1 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1311, i8* %1312, align 1, !tbaa !2448
  %1313 = lshr i64 %1291, 63
  %1314 = trunc i64 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1314, i8* %1315, align 1, !tbaa !2449
  %1316 = lshr i64 %1288, 63
  %1317 = xor i64 %1313, %1316
  %1318 = add nuw nsw i64 %1317, %1313
  %1319 = icmp eq i64 %1318, 2
  %1320 = zext i1 %1319 to i8
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1320, i8* %1321, align 1, !tbaa !2450
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 8
  %1324 = load i64, i64* %RCX
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1323 to i64*
  store i64 %1324, i64* %1327
  %1328 = load i64, i64* %RAX
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 3
  store i64 %1330, i64* %PC
  %1331 = inttoptr i64 %1328 to i32*
  %1332 = load i32, i32* %1331
  %1333 = sext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX
  %1335 = mul i64 %1334, 8
  %1336 = add i64 %1335, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 8
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %RAX, align 8, !tbaa !2428
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 40
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %PC
  %1348 = sub i64 %1347, 1251
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  store i64 %1350, i64* %PC
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1348, i64* %1351, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 12
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 7
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i32*
  store i32 20, i32* %1356
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 12
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 3
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  %1362 = load i32, i32* %1361
  %1363 = zext i32 %1362 to i64
  store i64 %1363, i64* %RDI, align 8, !tbaa !2428
  %1364 = load i64, i64* %PC
  %1365 = sub i64 %1364, 1084
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 5
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1371 = load i64, i64* %1370, align 8, !tbaa !2428
  %1372 = add i64 %1371, -8
  %1373 = inttoptr i64 %1372 to i64*
  store i64 %1367, i64* %1373
  store i64 %1372, i64* %1370, align 8, !tbaa !2428
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1365, i64* %1374, align 8, !tbaa !2428
  %1375 = load i64, i64* %PC
  %1376 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1375, %struct.Memory* %MEMORY.1)
  %1377 = load i64, i64* %RBP
  %1378 = sub i64 %1377, 8
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 4
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1378 to i64*
  %1382 = load i64, i64* %1381
  store i64 %1382, i64* %RAX, align 8, !tbaa !2428
  %1383 = load i64, i64* %RAX
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  store i64 %1383, i64* %RCX, align 8, !tbaa !2428
  %1386 = load i64, i64* %RCX
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 4
  store i64 %1388, i64* %PC
  %1389 = add i64 4, %1386
  store i64 %1389, i64* %RCX, align 8, !tbaa !2428
  %1390 = icmp ult i64 %1389, %1386
  %1391 = icmp ult i64 %1389, 4
  %1392 = or i1 %1390, %1391
  %1393 = zext i1 %1392 to i8
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1393, i8* %1394, align 1, !tbaa !2432
  %1395 = trunc i64 %1389 to i32
  %1396 = and i32 %1395, 255
  %1397 = call i32 @llvm.ctpop.i32(i32 %1396) #16
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  %1400 = xor i8 %1399, 1
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1400, i8* %1401, align 1, !tbaa !2446
  %1402 = xor i64 4, %1386
  %1403 = xor i64 %1402, %1389
  %1404 = lshr i64 %1403, 4
  %1405 = trunc i64 %1404 to i8
  %1406 = and i8 %1405, 1
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1406, i8* %1407, align 1, !tbaa !2447
  %1408 = icmp eq i64 %1389, 0
  %1409 = zext i1 %1408 to i8
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1409, i8* %1410, align 1, !tbaa !2448
  %1411 = lshr i64 %1389, 63
  %1412 = trunc i64 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1412, i8* %1413, align 1, !tbaa !2449
  %1414 = lshr i64 %1386, 63
  %1415 = xor i64 %1411, %1414
  %1416 = add nuw nsw i64 %1415, %1411
  %1417 = icmp eq i64 %1416, 2
  %1418 = zext i1 %1417 to i8
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1418, i8* %1419, align 1, !tbaa !2450
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 8
  %1422 = load i64, i64* %RCX
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1421 to i64*
  store i64 %1422, i64* %1425
  %1426 = load i64, i64* %RAX
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 3
  store i64 %1428, i64* %PC
  %1429 = inttoptr i64 %1426 to i32*
  %1430 = load i32, i32* %1429
  %1431 = sext i32 %1430 to i64
  store i64 %1431, i64* %RAX, align 8, !tbaa !2428
  %1432 = load i64, i64* %RAX
  %1433 = mul i64 %1432, 8
  %1434 = add i64 %1433, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 8
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RBP
  %1440 = sub i64 %1439, 40
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1440 to i64*
  store i64 %1441, i64* %1444
  %1445 = load i64, i64* %PC
  %1446 = sub i64 %1445, 1001
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 5
  store i64 %1448, i64* %PC
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1446, i64* %1449, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1450 = load i64, i64* %RBP
  %1451 = sub i64 %1450, 12
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 7
  store i64 %1453, i64* %PC
  %1454 = inttoptr i64 %1451 to i32*
  store i32 2, i32* %1454
  %1455 = load i64, i64* %RBP
  %1456 = sub i64 %1455, 12
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 3
  store i64 %1458, i64* %PC
  %1459 = inttoptr i64 %1456 to i32*
  %1460 = load i32, i32* %1459
  %1461 = zext i32 %1460 to i64
  store i64 %1461, i64* %RDI, align 8, !tbaa !2428
  %1462 = load i64, i64* %PC
  %1463 = sub i64 %1462, 184
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 5
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 5
  store i64 %1467, i64* %PC
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1469 = load i64, i64* %1468, align 8, !tbaa !2428
  %1470 = add i64 %1469, -8
  %1471 = inttoptr i64 %1470 to i64*
  store i64 %1465, i64* %1471
  store i64 %1470, i64* %1468, align 8, !tbaa !2428
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1463, i64* %1472, align 8, !tbaa !2428
  %1473 = load i64, i64* %PC
  %1474 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1473, %struct.Memory* %MEMORY.1)
  %1475 = load i64, i64* %RBP
  %1476 = sub i64 %1475, 8
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 4
  store i64 %1478, i64* %PC
  %1479 = inttoptr i64 %1476 to i64*
  %1480 = load i64, i64* %1479
  store i64 %1480, i64* %RAX, align 8, !tbaa !2428
  %1481 = load i64, i64* %RAX
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 3
  store i64 %1483, i64* %PC
  store i64 %1481, i64* %RCX, align 8, !tbaa !2428
  %1484 = load i64, i64* %RCX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 4
  store i64 %1486, i64* %PC
  %1487 = add i64 4, %1484
  store i64 %1487, i64* %RCX, align 8, !tbaa !2428
  %1488 = icmp ult i64 %1487, %1484
  %1489 = icmp ult i64 %1487, 4
  %1490 = or i1 %1488, %1489
  %1491 = zext i1 %1490 to i8
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1491, i8* %1492, align 1, !tbaa !2432
  %1493 = trunc i64 %1487 to i32
  %1494 = and i32 %1493, 255
  %1495 = call i32 @llvm.ctpop.i32(i32 %1494) #16
  %1496 = trunc i32 %1495 to i8
  %1497 = and i8 %1496, 1
  %1498 = xor i8 %1497, 1
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1498, i8* %1499, align 1, !tbaa !2446
  %1500 = xor i64 4, %1484
  %1501 = xor i64 %1500, %1487
  %1502 = lshr i64 %1501, 4
  %1503 = trunc i64 %1502 to i8
  %1504 = and i8 %1503, 1
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1504, i8* %1505, align 1, !tbaa !2447
  %1506 = icmp eq i64 %1487, 0
  %1507 = zext i1 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1507, i8* %1508, align 1, !tbaa !2448
  %1509 = lshr i64 %1487, 63
  %1510 = trunc i64 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1510, i8* %1511, align 1, !tbaa !2449
  %1512 = lshr i64 %1484, 63
  %1513 = xor i64 %1509, %1512
  %1514 = add nuw nsw i64 %1513, %1509
  %1515 = icmp eq i64 %1514, 2
  %1516 = zext i1 %1515 to i8
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1516, i8* %1517, align 1, !tbaa !2450
  %1518 = load i64, i64* %RBP
  %1519 = sub i64 %1518, 8
  %1520 = load i64, i64* %RCX
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1519 to i64*
  store i64 %1520, i64* %1523
  %1524 = load i64, i64* %RAX
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 3
  store i64 %1526, i64* %PC
  %1527 = inttoptr i64 %1524 to i32*
  %1528 = load i32, i32* %1527
  %1529 = sext i32 %1528 to i64
  store i64 %1529, i64* %RAX, align 8, !tbaa !2428
  %1530 = load i64, i64* %RAX
  %1531 = mul i64 %1530, 8
  %1532 = add i64 %1531, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 8
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 40
  %1539 = load i64, i64* %RAX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1538 to i64*
  store i64 %1539, i64* %1542
  %1543 = load i64, i64* %PC
  %1544 = sub i64 %1543, 101
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1544, i64* %1547, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 12
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 7
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1549 to i32*
  store i32 7, i32* %1552
  %1553 = load i64, i64* %RBP
  %1554 = sub i64 %1553, 12
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  %1557 = inttoptr i64 %1554 to i32*
  %1558 = load i32, i32* %1557
  %1559 = zext i32 %1558 to i64
  store i64 %1559, i64* %RDI, align 8, !tbaa !2428
  %1560 = load i64, i64* %PC
  %1561 = sub i64 %1560, 434
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 5
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1567 = load i64, i64* %1566, align 8, !tbaa !2428
  %1568 = add i64 %1567, -8
  %1569 = inttoptr i64 %1568 to i64*
  store i64 %1563, i64* %1569
  store i64 %1568, i64* %1566, align 8, !tbaa !2428
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1561, i64* %1570, align 8, !tbaa !2428
  %1571 = load i64, i64* %PC
  %1572 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1571, %struct.Memory* %MEMORY.1)
  %1573 = load i64, i64* %RBP
  %1574 = sub i64 %1573, 8
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 4
  store i64 %1576, i64* %PC
  %1577 = inttoptr i64 %1574 to i64*
  %1578 = load i64, i64* %1577
  store i64 %1578, i64* %RAX, align 8, !tbaa !2428
  %1579 = load i64, i64* %RAX
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 3
  store i64 %1581, i64* %PC
  store i64 %1579, i64* %RCX, align 8, !tbaa !2428
  %1582 = load i64, i64* %RCX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 4
  store i64 %1584, i64* %PC
  %1585 = add i64 4, %1582
  store i64 %1585, i64* %RCX, align 8, !tbaa !2428
  %1586 = icmp ult i64 %1585, %1582
  %1587 = icmp ult i64 %1585, 4
  %1588 = or i1 %1586, %1587
  %1589 = zext i1 %1588 to i8
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1589, i8* %1590, align 1, !tbaa !2432
  %1591 = trunc i64 %1585 to i32
  %1592 = and i32 %1591, 255
  %1593 = call i32 @llvm.ctpop.i32(i32 %1592) #16
  %1594 = trunc i32 %1593 to i8
  %1595 = and i8 %1594, 1
  %1596 = xor i8 %1595, 1
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1596, i8* %1597, align 1, !tbaa !2446
  %1598 = xor i64 4, %1582
  %1599 = xor i64 %1598, %1585
  %1600 = lshr i64 %1599, 4
  %1601 = trunc i64 %1600 to i8
  %1602 = and i8 %1601, 1
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1602, i8* %1603, align 1, !tbaa !2447
  %1604 = icmp eq i64 %1585, 0
  %1605 = zext i1 %1604 to i8
  %1606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1605, i8* %1606, align 1, !tbaa !2448
  %1607 = lshr i64 %1585, 63
  %1608 = trunc i64 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1608, i8* %1609, align 1, !tbaa !2449
  %1610 = lshr i64 %1582, 63
  %1611 = xor i64 %1607, %1610
  %1612 = add nuw nsw i64 %1611, %1607
  %1613 = icmp eq i64 %1612, 2
  %1614 = zext i1 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1614, i8* %1615, align 1, !tbaa !2450
  %1616 = load i64, i64* %RBP
  %1617 = sub i64 %1616, 8
  %1618 = load i64, i64* %RCX
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1617 to i64*
  store i64 %1618, i64* %1621
  %1622 = load i64, i64* %RAX
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 3
  store i64 %1624, i64* %PC
  %1625 = inttoptr i64 %1622 to i32*
  %1626 = load i32, i32* %1625
  %1627 = sext i32 %1626 to i64
  store i64 %1627, i64* %RAX, align 8, !tbaa !2428
  %1628 = load i64, i64* %RAX
  %1629 = mul i64 %1628, 8
  %1630 = add i64 %1629, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 8
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1630 to i64*
  %1634 = load i64, i64* %1633
  store i64 %1634, i64* %RAX, align 8, !tbaa !2428
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 40
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1636 to i64*
  store i64 %1637, i64* %1640
  %1641 = load i64, i64* %PC
  %1642 = sub i64 %1641, 351
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 5
  store i64 %1644, i64* %PC
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1642, i64* %1645, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1646 = load i64, i64* %RBP
  %1647 = sub i64 %1646, 12
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 7
  store i64 %1649, i64* %PC
  %1650 = inttoptr i64 %1647 to i32*
  store i32 30, i32* %1650
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 12
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 3
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i32*
  %1656 = load i32, i32* %1655
  %1657 = zext i32 %1656 to i64
  store i64 %1657, i64* %RDI, align 8, !tbaa !2428
  %1658 = load i64, i64* %PC
  %1659 = sub i64 %1658, 1584
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 5
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 5
  store i64 %1663, i64* %PC
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1665 = load i64, i64* %1664, align 8, !tbaa !2428
  %1666 = add i64 %1665, -8
  %1667 = inttoptr i64 %1666 to i64*
  store i64 %1661, i64* %1667
  store i64 %1666, i64* %1664, align 8, !tbaa !2428
  %1668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1659, i64* %1668, align 8, !tbaa !2428
  %1669 = load i64, i64* %PC
  %1670 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1669, %struct.Memory* %MEMORY.1)
  %1671 = load i64, i64* %RBP
  %1672 = sub i64 %1671, 8
  %1673 = load i64, i64* %PC
  %1674 = add i64 %1673, 4
  store i64 %1674, i64* %PC
  %1675 = inttoptr i64 %1672 to i64*
  %1676 = load i64, i64* %1675
  store i64 %1676, i64* %RAX, align 8, !tbaa !2428
  %1677 = load i64, i64* %RAX
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 3
  store i64 %1679, i64* %PC
  store i64 %1677, i64* %RCX, align 8, !tbaa !2428
  %1680 = load i64, i64* %RCX
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 4
  store i64 %1682, i64* %PC
  %1683 = add i64 4, %1680
  store i64 %1683, i64* %RCX, align 8, !tbaa !2428
  %1684 = icmp ult i64 %1683, %1680
  %1685 = icmp ult i64 %1683, 4
  %1686 = or i1 %1684, %1685
  %1687 = zext i1 %1686 to i8
  %1688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1687, i8* %1688, align 1, !tbaa !2432
  %1689 = trunc i64 %1683 to i32
  %1690 = and i32 %1689, 255
  %1691 = call i32 @llvm.ctpop.i32(i32 %1690) #16
  %1692 = trunc i32 %1691 to i8
  %1693 = and i8 %1692, 1
  %1694 = xor i8 %1693, 1
  %1695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1694, i8* %1695, align 1, !tbaa !2446
  %1696 = xor i64 4, %1680
  %1697 = xor i64 %1696, %1683
  %1698 = lshr i64 %1697, 4
  %1699 = trunc i64 %1698 to i8
  %1700 = and i8 %1699, 1
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1700, i8* %1701, align 1, !tbaa !2447
  %1702 = icmp eq i64 %1683, 0
  %1703 = zext i1 %1702 to i8
  %1704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1703, i8* %1704, align 1, !tbaa !2448
  %1705 = lshr i64 %1683, 63
  %1706 = trunc i64 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1706, i8* %1707, align 1, !tbaa !2449
  %1708 = lshr i64 %1680, 63
  %1709 = xor i64 %1705, %1708
  %1710 = add nuw nsw i64 %1709, %1705
  %1711 = icmp eq i64 %1710, 2
  %1712 = zext i1 %1711 to i8
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1712, i8* %1713, align 1, !tbaa !2450
  %1714 = load i64, i64* %RBP
  %1715 = sub i64 %1714, 8
  %1716 = load i64, i64* %RCX
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1715 to i64*
  store i64 %1716, i64* %1719
  %1720 = load i64, i64* %RAX
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 3
  store i64 %1722, i64* %PC
  %1723 = inttoptr i64 %1720 to i32*
  %1724 = load i32, i32* %1723
  %1725 = sext i32 %1724 to i64
  store i64 %1725, i64* %RAX, align 8, !tbaa !2428
  %1726 = load i64, i64* %RAX
  %1727 = mul i64 %1726, 8
  %1728 = add i64 %1727, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 8
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1728 to i64*
  %1732 = load i64, i64* %1731
  store i64 %1732, i64* %RAX, align 8, !tbaa !2428
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 40
  %1735 = load i64, i64* %RAX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1734 to i64*
  store i64 %1735, i64* %1738
  %1739 = load i64, i64* %PC
  %1740 = sub i64 %1739, 1501
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 5
  store i64 %1742, i64* %PC
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1740, i64* %1743, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1744 = load i64, i64* %RBP
  %1745 = sub i64 %1744, 12
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 7
  store i64 %1747, i64* %PC
  %1748 = inttoptr i64 %1745 to i32*
  store i32 12, i32* %1748
  %1749 = load i64, i64* %RBP
  %1750 = sub i64 %1749, 12
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 3
  store i64 %1752, i64* %PC
  %1753 = inttoptr i64 %1750 to i32*
  %1754 = load i32, i32* %1753
  %1755 = zext i32 %1754 to i64
  store i64 %1755, i64* %RDI, align 8, !tbaa !2428
  %1756 = load i64, i64* %PC
  %1757 = sub i64 %1756, 684
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 5
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 5
  store i64 %1761, i64* %PC
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1763 = load i64, i64* %1762, align 8, !tbaa !2428
  %1764 = add i64 %1763, -8
  %1765 = inttoptr i64 %1764 to i64*
  store i64 %1759, i64* %1765
  store i64 %1764, i64* %1762, align 8, !tbaa !2428
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1757, i64* %1766, align 8, !tbaa !2428
  %1767 = load i64, i64* %PC
  %1768 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1767, %struct.Memory* %MEMORY.1)
  %1769 = load i64, i64* %RBP
  %1770 = sub i64 %1769, 8
  %1771 = load i64, i64* %PC
  %1772 = add i64 %1771, 4
  store i64 %1772, i64* %PC
  %1773 = inttoptr i64 %1770 to i64*
  %1774 = load i64, i64* %1773
  store i64 %1774, i64* %RAX, align 8, !tbaa !2428
  %1775 = load i64, i64* %RAX
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 3
  store i64 %1777, i64* %PC
  store i64 %1775, i64* %RCX, align 8, !tbaa !2428
  %1778 = load i64, i64* %RCX
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 4
  store i64 %1780, i64* %PC
  %1781 = add i64 4, %1778
  store i64 %1781, i64* %RCX, align 8, !tbaa !2428
  %1782 = icmp ult i64 %1781, %1778
  %1783 = icmp ult i64 %1781, 4
  %1784 = or i1 %1782, %1783
  %1785 = zext i1 %1784 to i8
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1785, i8* %1786, align 1, !tbaa !2432
  %1787 = trunc i64 %1781 to i32
  %1788 = and i32 %1787, 255
  %1789 = call i32 @llvm.ctpop.i32(i32 %1788) #16
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1792, i8* %1793, align 1, !tbaa !2446
  %1794 = xor i64 4, %1778
  %1795 = xor i64 %1794, %1781
  %1796 = lshr i64 %1795, 4
  %1797 = trunc i64 %1796 to i8
  %1798 = and i8 %1797, 1
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1798, i8* %1799, align 1, !tbaa !2447
  %1800 = icmp eq i64 %1781, 0
  %1801 = zext i1 %1800 to i8
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1801, i8* %1802, align 1, !tbaa !2448
  %1803 = lshr i64 %1781, 63
  %1804 = trunc i64 %1803 to i8
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1804, i8* %1805, align 1, !tbaa !2449
  %1806 = lshr i64 %1778, 63
  %1807 = xor i64 %1803, %1806
  %1808 = add nuw nsw i64 %1807, %1803
  %1809 = icmp eq i64 %1808, 2
  %1810 = zext i1 %1809 to i8
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1810, i8* %1811, align 1, !tbaa !2450
  %1812 = load i64, i64* %RBP
  %1813 = sub i64 %1812, 8
  %1814 = load i64, i64* %RCX
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1813 to i64*
  store i64 %1814, i64* %1817
  %1818 = load i64, i64* %RAX
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 3
  store i64 %1820, i64* %PC
  %1821 = inttoptr i64 %1818 to i32*
  %1822 = load i32, i32* %1821
  %1823 = sext i32 %1822 to i64
  store i64 %1823, i64* %RAX, align 8, !tbaa !2428
  %1824 = load i64, i64* %RAX
  %1825 = mul i64 %1824, 8
  %1826 = add i64 %1825, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 8
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1826 to i64*
  %1830 = load i64, i64* %1829
  store i64 %1830, i64* %RAX, align 8, !tbaa !2428
  %1831 = load i64, i64* %RBP
  %1832 = sub i64 %1831, 40
  %1833 = load i64, i64* %RAX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 4
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1832 to i64*
  store i64 %1833, i64* %1836
  %1837 = load i64, i64* %PC
  %1838 = sub i64 %1837, 601
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 5
  store i64 %1840, i64* %PC
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1838, i64* %1841, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1842 = load i64, i64* %RBP
  %1843 = sub i64 %1842, 12
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 7
  store i64 %1845, i64* %PC
  %1846 = inttoptr i64 %1843 to i32*
  store i32 17, i32* %1846
  %1847 = load i64, i64* %RBP
  %1848 = sub i64 %1847, 12
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 3
  store i64 %1850, i64* %PC
  %1851 = inttoptr i64 %1848 to i32*
  %1852 = load i32, i32* %1851
  %1853 = zext i32 %1852 to i64
  store i64 %1853, i64* %RDI, align 8, !tbaa !2428
  %1854 = load i64, i64* %PC
  %1855 = sub i64 %1854, 934
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 5
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 5
  store i64 %1859, i64* %PC
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1861 = load i64, i64* %1860, align 8, !tbaa !2428
  %1862 = add i64 %1861, -8
  %1863 = inttoptr i64 %1862 to i64*
  store i64 %1857, i64* %1863
  store i64 %1862, i64* %1860, align 8, !tbaa !2428
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1855, i64* %1864, align 8, !tbaa !2428
  %1865 = load i64, i64* %PC
  %1866 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1865, %struct.Memory* %MEMORY.1)
  %1867 = load i64, i64* %RBP
  %1868 = sub i64 %1867, 8
  %1869 = load i64, i64* %PC
  %1870 = add i64 %1869, 4
  store i64 %1870, i64* %PC
  %1871 = inttoptr i64 %1868 to i64*
  %1872 = load i64, i64* %1871
  store i64 %1872, i64* %RAX, align 8, !tbaa !2428
  %1873 = load i64, i64* %RAX
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 3
  store i64 %1875, i64* %PC
  store i64 %1873, i64* %RCX, align 8, !tbaa !2428
  %1876 = load i64, i64* %RCX
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 4
  store i64 %1878, i64* %PC
  %1879 = add i64 4, %1876
  store i64 %1879, i64* %RCX, align 8, !tbaa !2428
  %1880 = icmp ult i64 %1879, %1876
  %1881 = icmp ult i64 %1879, 4
  %1882 = or i1 %1880, %1881
  %1883 = zext i1 %1882 to i8
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1883, i8* %1884, align 1, !tbaa !2432
  %1885 = trunc i64 %1879 to i32
  %1886 = and i32 %1885, 255
  %1887 = call i32 @llvm.ctpop.i32(i32 %1886) #16
  %1888 = trunc i32 %1887 to i8
  %1889 = and i8 %1888, 1
  %1890 = xor i8 %1889, 1
  %1891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1890, i8* %1891, align 1, !tbaa !2446
  %1892 = xor i64 4, %1876
  %1893 = xor i64 %1892, %1879
  %1894 = lshr i64 %1893, 4
  %1895 = trunc i64 %1894 to i8
  %1896 = and i8 %1895, 1
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1896, i8* %1897, align 1, !tbaa !2447
  %1898 = icmp eq i64 %1879, 0
  %1899 = zext i1 %1898 to i8
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1899, i8* %1900, align 1, !tbaa !2448
  %1901 = lshr i64 %1879, 63
  %1902 = trunc i64 %1901 to i8
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1902, i8* %1903, align 1, !tbaa !2449
  %1904 = lshr i64 %1876, 63
  %1905 = xor i64 %1901, %1904
  %1906 = add nuw nsw i64 %1905, %1901
  %1907 = icmp eq i64 %1906, 2
  %1908 = zext i1 %1907 to i8
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1908, i8* %1909, align 1, !tbaa !2450
  %1910 = load i64, i64* %RBP
  %1911 = sub i64 %1910, 8
  %1912 = load i64, i64* %RCX
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1911 to i64*
  store i64 %1912, i64* %1915
  %1916 = load i64, i64* %RAX
  %1917 = load i64, i64* %PC
  %1918 = add i64 %1917, 3
  store i64 %1918, i64* %PC
  %1919 = inttoptr i64 %1916 to i32*
  %1920 = load i32, i32* %1919
  %1921 = sext i32 %1920 to i64
  store i64 %1921, i64* %RAX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RAX
  %1923 = mul i64 %1922, 8
  %1924 = add i64 %1923, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 8
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1924 to i64*
  %1928 = load i64, i64* %1927
  store i64 %1928, i64* %RAX, align 8, !tbaa !2428
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 40
  %1931 = load i64, i64* %RAX
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 4
  store i64 %1933, i64* %PC
  %1934 = inttoptr i64 %1930 to i64*
  store i64 %1931, i64* %1934
  %1935 = load i64, i64* %PC
  %1936 = sub i64 %1935, 851
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 5
  store i64 %1938, i64* %PC
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1936, i64* %1939, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 12
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 7
  store i64 %1943, i64* %PC
  %1944 = inttoptr i64 %1941 to i32*
  store i32 22, i32* %1944
  %1945 = load i64, i64* %RBP
  %1946 = sub i64 %1945, 12
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 3
  store i64 %1948, i64* %PC
  %1949 = inttoptr i64 %1946 to i32*
  %1950 = load i32, i32* %1949
  %1951 = zext i32 %1950 to i64
  store i64 %1951, i64* %RDI, align 8, !tbaa !2428
  %1952 = load i64, i64* %PC
  %1953 = sub i64 %1952, 1184
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 5
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 5
  store i64 %1957, i64* %PC
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1959 = load i64, i64* %1958, align 8, !tbaa !2428
  %1960 = add i64 %1959, -8
  %1961 = inttoptr i64 %1960 to i64*
  store i64 %1955, i64* %1961
  store i64 %1960, i64* %1958, align 8, !tbaa !2428
  %1962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1953, i64* %1962, align 8, !tbaa !2428
  %1963 = load i64, i64* %PC
  %1964 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1963, %struct.Memory* %MEMORY.1)
  %1965 = load i64, i64* %RBP
  %1966 = sub i64 %1965, 8
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 4
  store i64 %1968, i64* %PC
  %1969 = inttoptr i64 %1966 to i64*
  %1970 = load i64, i64* %1969
  store i64 %1970, i64* %RAX, align 8, !tbaa !2428
  %1971 = load i64, i64* %RAX
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  store i64 %1971, i64* %RCX, align 8, !tbaa !2428
  %1974 = load i64, i64* %RCX
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 4
  store i64 %1976, i64* %PC
  %1977 = add i64 4, %1974
  store i64 %1977, i64* %RCX, align 8, !tbaa !2428
  %1978 = icmp ult i64 %1977, %1974
  %1979 = icmp ult i64 %1977, 4
  %1980 = or i1 %1978, %1979
  %1981 = zext i1 %1980 to i8
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1981, i8* %1982, align 1, !tbaa !2432
  %1983 = trunc i64 %1977 to i32
  %1984 = and i32 %1983, 255
  %1985 = call i32 @llvm.ctpop.i32(i32 %1984) #16
  %1986 = trunc i32 %1985 to i8
  %1987 = and i8 %1986, 1
  %1988 = xor i8 %1987, 1
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1988, i8* %1989, align 1, !tbaa !2446
  %1990 = xor i64 4, %1974
  %1991 = xor i64 %1990, %1977
  %1992 = lshr i64 %1991, 4
  %1993 = trunc i64 %1992 to i8
  %1994 = and i8 %1993, 1
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1994, i8* %1995, align 1, !tbaa !2447
  %1996 = icmp eq i64 %1977, 0
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1997, i8* %1998, align 1, !tbaa !2448
  %1999 = lshr i64 %1977, 63
  %2000 = trunc i64 %1999 to i8
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2000, i8* %2001, align 1, !tbaa !2449
  %2002 = lshr i64 %1974, 63
  %2003 = xor i64 %1999, %2002
  %2004 = add nuw nsw i64 %2003, %1999
  %2005 = icmp eq i64 %2004, 2
  %2006 = zext i1 %2005 to i8
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2006, i8* %2007, align 1, !tbaa !2450
  %2008 = load i64, i64* %RBP
  %2009 = sub i64 %2008, 8
  %2010 = load i64, i64* %RCX
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 4
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2009 to i64*
  store i64 %2010, i64* %2013
  %2014 = load i64, i64* %RAX
  %2015 = load i64, i64* %PC
  %2016 = add i64 %2015, 3
  store i64 %2016, i64* %PC
  %2017 = inttoptr i64 %2014 to i32*
  %2018 = load i32, i32* %2017
  %2019 = sext i32 %2018 to i64
  store i64 %2019, i64* %RAX, align 8, !tbaa !2428
  %2020 = load i64, i64* %RAX
  %2021 = mul i64 %2020, 8
  %2022 = add i64 %2021, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 8
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2022 to i64*
  %2026 = load i64, i64* %2025
  store i64 %2026, i64* %RAX, align 8, !tbaa !2428
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 40
  %2029 = load i64, i64* %RAX
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 4
  store i64 %2031, i64* %PC
  %2032 = inttoptr i64 %2028 to i64*
  store i64 %2029, i64* %2032
  %2033 = load i64, i64* %PC
  %2034 = sub i64 %2033, 1101
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 5
  store i64 %2036, i64* %PC
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2034, i64* %2037, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %2038 = load i64, i64* %RBP
  %2039 = sub i64 %2038, 12
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 7
  store i64 %2041, i64* %PC
  %2042 = inttoptr i64 %2039 to i32*
  store i32 4, i32* %2042
  %2043 = load i64, i64* %RBP
  %2044 = sub i64 %2043, 12
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 3
  store i64 %2046, i64* %PC
  %2047 = inttoptr i64 %2044 to i32*
  %2048 = load i32, i32* %2047
  %2049 = zext i32 %2048 to i64
  store i64 %2049, i64* %RDI, align 8, !tbaa !2428
  %2050 = load i64, i64* %PC
  %2051 = sub i64 %2050, 284
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 5
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 5
  store i64 %2055, i64* %PC
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2057 = load i64, i64* %2056, align 8, !tbaa !2428
  %2058 = add i64 %2057, -8
  %2059 = inttoptr i64 %2058 to i64*
  store i64 %2053, i64* %2059
  store i64 %2058, i64* %2056, align 8, !tbaa !2428
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2051, i64* %2060, align 8, !tbaa !2428
  %2061 = load i64, i64* %PC
  %2062 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2061, %struct.Memory* %MEMORY.1)
  %2063 = load i64, i64* %RBP
  %2064 = sub i64 %2063, 8
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 4
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2064 to i64*
  %2068 = load i64, i64* %2067
  store i64 %2068, i64* %RAX, align 8, !tbaa !2428
  %2069 = load i64, i64* %RAX
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 3
  store i64 %2071, i64* %PC
  store i64 %2069, i64* %RCX, align 8, !tbaa !2428
  %2072 = load i64, i64* %RCX
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 4
  store i64 %2074, i64* %PC
  %2075 = add i64 4, %2072
  store i64 %2075, i64* %RCX, align 8, !tbaa !2428
  %2076 = icmp ult i64 %2075, %2072
  %2077 = icmp ult i64 %2075, 4
  %2078 = or i1 %2076, %2077
  %2079 = zext i1 %2078 to i8
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2079, i8* %2080, align 1, !tbaa !2432
  %2081 = trunc i64 %2075 to i32
  %2082 = and i32 %2081, 255
  %2083 = call i32 @llvm.ctpop.i32(i32 %2082) #16
  %2084 = trunc i32 %2083 to i8
  %2085 = and i8 %2084, 1
  %2086 = xor i8 %2085, 1
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2086, i8* %2087, align 1, !tbaa !2446
  %2088 = xor i64 4, %2072
  %2089 = xor i64 %2088, %2075
  %2090 = lshr i64 %2089, 4
  %2091 = trunc i64 %2090 to i8
  %2092 = and i8 %2091, 1
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2092, i8* %2093, align 1, !tbaa !2447
  %2094 = icmp eq i64 %2075, 0
  %2095 = zext i1 %2094 to i8
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2095, i8* %2096, align 1, !tbaa !2448
  %2097 = lshr i64 %2075, 63
  %2098 = trunc i64 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2098, i8* %2099, align 1, !tbaa !2449
  %2100 = lshr i64 %2072, 63
  %2101 = xor i64 %2097, %2100
  %2102 = add nuw nsw i64 %2101, %2097
  %2103 = icmp eq i64 %2102, 2
  %2104 = zext i1 %2103 to i8
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2104, i8* %2105, align 1, !tbaa !2450
  %2106 = load i64, i64* %RBP
  %2107 = sub i64 %2106, 8
  %2108 = load i64, i64* %RCX
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 4
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2107 to i64*
  store i64 %2108, i64* %2111
  %2112 = load i64, i64* %RAX
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 3
  store i64 %2114, i64* %PC
  %2115 = inttoptr i64 %2112 to i32*
  %2116 = load i32, i32* %2115
  %2117 = sext i32 %2116 to i64
  store i64 %2117, i64* %RAX, align 8, !tbaa !2428
  %2118 = load i64, i64* %RAX
  %2119 = mul i64 %2118, 8
  %2120 = add i64 %2119, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 8
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2120 to i64*
  %2124 = load i64, i64* %2123
  store i64 %2124, i64* %RAX, align 8, !tbaa !2428
  %2125 = load i64, i64* %RBP
  %2126 = sub i64 %2125, 40
  %2127 = load i64, i64* %RAX
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = inttoptr i64 %2126 to i64*
  store i64 %2127, i64* %2130
  %2131 = load i64, i64* %PC
  %2132 = sub i64 %2131, 201
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 5
  store i64 %2134, i64* %PC
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2132, i64* %2135, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 12
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 7
  store i64 %2139, i64* %PC
  %2140 = inttoptr i64 %2137 to i32*
  store i32 27, i32* %2140
  %2141 = load i64, i64* %RBP
  %2142 = sub i64 %2141, 12
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = zext i32 %2146 to i64
  store i64 %2147, i64* %RDI, align 8, !tbaa !2428
  %2148 = load i64, i64* %PC
  %2149 = sub i64 %2148, 1434
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 5
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 5
  store i64 %2153, i64* %PC
  %2154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2155 = load i64, i64* %2154, align 8, !tbaa !2428
  %2156 = add i64 %2155, -8
  %2157 = inttoptr i64 %2156 to i64*
  store i64 %2151, i64* %2157
  store i64 %2156, i64* %2154, align 8, !tbaa !2428
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2149, i64* %2158, align 8, !tbaa !2428
  %2159 = load i64, i64* %PC
  %2160 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2159, %struct.Memory* %MEMORY.1)
  %2161 = load i64, i64* %RBP
  %2162 = sub i64 %2161, 8
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 4
  store i64 %2164, i64* %PC
  %2165 = inttoptr i64 %2162 to i64*
  %2166 = load i64, i64* %2165
  store i64 %2166, i64* %RAX, align 8, !tbaa !2428
  %2167 = load i64, i64* %RAX
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 3
  store i64 %2169, i64* %PC
  store i64 %2167, i64* %RCX, align 8, !tbaa !2428
  %2170 = load i64, i64* %RCX
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 4
  store i64 %2172, i64* %PC
  %2173 = add i64 4, %2170
  store i64 %2173, i64* %RCX, align 8, !tbaa !2428
  %2174 = icmp ult i64 %2173, %2170
  %2175 = icmp ult i64 %2173, 4
  %2176 = or i1 %2174, %2175
  %2177 = zext i1 %2176 to i8
  %2178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2177, i8* %2178, align 1, !tbaa !2432
  %2179 = trunc i64 %2173 to i32
  %2180 = and i32 %2179, 255
  %2181 = call i32 @llvm.ctpop.i32(i32 %2180) #16
  %2182 = trunc i32 %2181 to i8
  %2183 = and i8 %2182, 1
  %2184 = xor i8 %2183, 1
  %2185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2184, i8* %2185, align 1, !tbaa !2446
  %2186 = xor i64 4, %2170
  %2187 = xor i64 %2186, %2173
  %2188 = lshr i64 %2187, 4
  %2189 = trunc i64 %2188 to i8
  %2190 = and i8 %2189, 1
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2190, i8* %2191, align 1, !tbaa !2447
  %2192 = icmp eq i64 %2173, 0
  %2193 = zext i1 %2192 to i8
  %2194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2193, i8* %2194, align 1, !tbaa !2448
  %2195 = lshr i64 %2173, 63
  %2196 = trunc i64 %2195 to i8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2196, i8* %2197, align 1, !tbaa !2449
  %2198 = lshr i64 %2170, 63
  %2199 = xor i64 %2195, %2198
  %2200 = add nuw nsw i64 %2199, %2195
  %2201 = icmp eq i64 %2200, 2
  %2202 = zext i1 %2201 to i8
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2202, i8* %2203, align 1, !tbaa !2450
  %2204 = load i64, i64* %RBP
  %2205 = sub i64 %2204, 8
  %2206 = load i64, i64* %RCX
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 4
  store i64 %2208, i64* %PC
  %2209 = inttoptr i64 %2205 to i64*
  store i64 %2206, i64* %2209
  %2210 = load i64, i64* %RAX
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 3
  store i64 %2212, i64* %PC
  %2213 = inttoptr i64 %2210 to i32*
  %2214 = load i32, i32* %2213
  %2215 = sext i32 %2214 to i64
  store i64 %2215, i64* %RAX, align 8, !tbaa !2428
  %2216 = load i64, i64* %RAX
  %2217 = mul i64 %2216, 8
  %2218 = add i64 %2217, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 8
  store i64 %2220, i64* %PC
  %2221 = inttoptr i64 %2218 to i64*
  %2222 = load i64, i64* %2221
  store i64 %2222, i64* %RAX, align 8, !tbaa !2428
  %2223 = load i64, i64* %RBP
  %2224 = sub i64 %2223, 40
  %2225 = load i64, i64* %RAX
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 4
  store i64 %2227, i64* %PC
  %2228 = inttoptr i64 %2224 to i64*
  store i64 %2225, i64* %2228
  %2229 = load i64, i64* %PC
  %2230 = sub i64 %2229, 1351
  %2231 = load i64, i64* %PC
  %2232 = add i64 %2231, 5
  store i64 %2232, i64* %PC
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2230, i64* %2233, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 12
  %2236 = load i64, i64* %PC
  %2237 = add i64 %2236, 7
  store i64 %2237, i64* %PC
  %2238 = inttoptr i64 %2235 to i32*
  store i32 9, i32* %2238
  %2239 = load i64, i64* %RBP
  %2240 = sub i64 %2239, 12
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i32*
  %2244 = load i32, i32* %2243
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RDI, align 8, !tbaa !2428
  %2246 = load i64, i64* %PC
  %2247 = sub i64 %2246, 534
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 5
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 5
  store i64 %2251, i64* %PC
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2253 = load i64, i64* %2252, align 8, !tbaa !2428
  %2254 = add i64 %2253, -8
  %2255 = inttoptr i64 %2254 to i64*
  store i64 %2249, i64* %2255
  store i64 %2254, i64* %2252, align 8, !tbaa !2428
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2247, i64* %2256, align 8, !tbaa !2428
  %2257 = load i64, i64* %PC
  %2258 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2257, %struct.Memory* %MEMORY.1)
  %2259 = load i64, i64* %RBP
  %2260 = sub i64 %2259, 8
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 4
  store i64 %2262, i64* %PC
  %2263 = inttoptr i64 %2260 to i64*
  %2264 = load i64, i64* %2263
  store i64 %2264, i64* %RAX, align 8, !tbaa !2428
  %2265 = load i64, i64* %RAX
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 3
  store i64 %2267, i64* %PC
  store i64 %2265, i64* %RCX, align 8, !tbaa !2428
  %2268 = load i64, i64* %RCX
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 4
  store i64 %2270, i64* %PC
  %2271 = add i64 4, %2268
  store i64 %2271, i64* %RCX, align 8, !tbaa !2428
  %2272 = icmp ult i64 %2271, %2268
  %2273 = icmp ult i64 %2271, 4
  %2274 = or i1 %2272, %2273
  %2275 = zext i1 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2275, i8* %2276, align 1, !tbaa !2432
  %2277 = trunc i64 %2271 to i32
  %2278 = and i32 %2277, 255
  %2279 = call i32 @llvm.ctpop.i32(i32 %2278) #16
  %2280 = trunc i32 %2279 to i8
  %2281 = and i8 %2280, 1
  %2282 = xor i8 %2281, 1
  %2283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2282, i8* %2283, align 1, !tbaa !2446
  %2284 = xor i64 4, %2268
  %2285 = xor i64 %2284, %2271
  %2286 = lshr i64 %2285, 4
  %2287 = trunc i64 %2286 to i8
  %2288 = and i8 %2287, 1
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2288, i8* %2289, align 1, !tbaa !2447
  %2290 = icmp eq i64 %2271, 0
  %2291 = zext i1 %2290 to i8
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2291, i8* %2292, align 1, !tbaa !2448
  %2293 = lshr i64 %2271, 63
  %2294 = trunc i64 %2293 to i8
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2294, i8* %2295, align 1, !tbaa !2449
  %2296 = lshr i64 %2268, 63
  %2297 = xor i64 %2293, %2296
  %2298 = add nuw nsw i64 %2297, %2293
  %2299 = icmp eq i64 %2298, 2
  %2300 = zext i1 %2299 to i8
  %2301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2300, i8* %2301, align 1, !tbaa !2450
  %2302 = load i64, i64* %RBP
  %2303 = sub i64 %2302, 8
  %2304 = load i64, i64* %RCX
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 4
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2303 to i64*
  store i64 %2304, i64* %2307
  %2308 = load i64, i64* %RAX
  %2309 = load i64, i64* %PC
  %2310 = add i64 %2309, 3
  store i64 %2310, i64* %PC
  %2311 = inttoptr i64 %2308 to i32*
  %2312 = load i32, i32* %2311
  %2313 = sext i32 %2312 to i64
  store i64 %2313, i64* %RAX, align 8, !tbaa !2428
  %2314 = load i64, i64* %RAX
  %2315 = mul i64 %2314, 8
  %2316 = add i64 %2315, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 8
  store i64 %2318, i64* %PC
  %2319 = inttoptr i64 %2316 to i64*
  %2320 = load i64, i64* %2319
  store i64 %2320, i64* %RAX, align 8, !tbaa !2428
  %2321 = load i64, i64* %RBP
  %2322 = sub i64 %2321, 40
  %2323 = load i64, i64* %RAX
  %2324 = load i64, i64* %PC
  %2325 = add i64 %2324, 4
  store i64 %2325, i64* %PC
  %2326 = inttoptr i64 %2322 to i64*
  store i64 %2323, i64* %2326
  %2327 = load i64, i64* %PC
  %2328 = sub i64 %2327, 451
  %2329 = load i64, i64* %PC
  %2330 = add i64 %2329, 5
  store i64 %2330, i64* %PC
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2328, i64* %2331, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 12
  %2334 = load i64, i64* %PC
  %2335 = add i64 %2334, 7
  store i64 %2335, i64* %PC
  %2336 = inttoptr i64 %2333 to i32*
  store i32 14, i32* %2336
  %2337 = load i64, i64* %RBP
  %2338 = sub i64 %2337, 12
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 3
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341
  %2343 = zext i32 %2342 to i64
  store i64 %2343, i64* %RDI, align 8, !tbaa !2428
  %2344 = load i64, i64* %PC
  %2345 = sub i64 %2344, 784
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 5
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 5
  store i64 %2349, i64* %PC
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2351 = load i64, i64* %2350, align 8, !tbaa !2428
  %2352 = add i64 %2351, -8
  %2353 = inttoptr i64 %2352 to i64*
  store i64 %2347, i64* %2353
  store i64 %2352, i64* %2350, align 8, !tbaa !2428
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2345, i64* %2354, align 8, !tbaa !2428
  %2355 = load i64, i64* %PC
  %2356 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2355, %struct.Memory* %MEMORY.1)
  %2357 = load i64, i64* %RBP
  %2358 = sub i64 %2357, 8
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 4
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2358 to i64*
  %2362 = load i64, i64* %2361
  store i64 %2362, i64* %RAX, align 8, !tbaa !2428
  %2363 = load i64, i64* %RAX
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 3
  store i64 %2365, i64* %PC
  store i64 %2363, i64* %RCX, align 8, !tbaa !2428
  %2366 = load i64, i64* %RCX
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 4
  store i64 %2368, i64* %PC
  %2369 = add i64 4, %2366
  store i64 %2369, i64* %RCX, align 8, !tbaa !2428
  %2370 = icmp ult i64 %2369, %2366
  %2371 = icmp ult i64 %2369, 4
  %2372 = or i1 %2370, %2371
  %2373 = zext i1 %2372 to i8
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2373, i8* %2374, align 1, !tbaa !2432
  %2375 = trunc i64 %2369 to i32
  %2376 = and i32 %2375, 255
  %2377 = call i32 @llvm.ctpop.i32(i32 %2376) #16
  %2378 = trunc i32 %2377 to i8
  %2379 = and i8 %2378, 1
  %2380 = xor i8 %2379, 1
  %2381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2380, i8* %2381, align 1, !tbaa !2446
  %2382 = xor i64 4, %2366
  %2383 = xor i64 %2382, %2369
  %2384 = lshr i64 %2383, 4
  %2385 = trunc i64 %2384 to i8
  %2386 = and i8 %2385, 1
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2386, i8* %2387, align 1, !tbaa !2447
  %2388 = icmp eq i64 %2369, 0
  %2389 = zext i1 %2388 to i8
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2389, i8* %2390, align 1, !tbaa !2448
  %2391 = lshr i64 %2369, 63
  %2392 = trunc i64 %2391 to i8
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2392, i8* %2393, align 1, !tbaa !2449
  %2394 = lshr i64 %2366, 63
  %2395 = xor i64 %2391, %2394
  %2396 = add nuw nsw i64 %2395, %2391
  %2397 = icmp eq i64 %2396, 2
  %2398 = zext i1 %2397 to i8
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2398, i8* %2399, align 1, !tbaa !2450
  %2400 = load i64, i64* %RBP
  %2401 = sub i64 %2400, 8
  %2402 = load i64, i64* %RCX
  %2403 = load i64, i64* %PC
  %2404 = add i64 %2403, 4
  store i64 %2404, i64* %PC
  %2405 = inttoptr i64 %2401 to i64*
  store i64 %2402, i64* %2405
  %2406 = load i64, i64* %RAX
  %2407 = load i64, i64* %PC
  %2408 = add i64 %2407, 3
  store i64 %2408, i64* %PC
  %2409 = inttoptr i64 %2406 to i32*
  %2410 = load i32, i32* %2409
  %2411 = sext i32 %2410 to i64
  store i64 %2411, i64* %RAX, align 8, !tbaa !2428
  %2412 = load i64, i64* %RAX
  %2413 = mul i64 %2412, 8
  %2414 = add i64 %2413, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 8
  store i64 %2416, i64* %PC
  %2417 = inttoptr i64 %2414 to i64*
  %2418 = load i64, i64* %2417
  store i64 %2418, i64* %RAX, align 8, !tbaa !2428
  %2419 = load i64, i64* %RBP
  %2420 = sub i64 %2419, 40
  %2421 = load i64, i64* %RAX
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 4
  store i64 %2423, i64* %PC
  %2424 = inttoptr i64 %2420 to i64*
  store i64 %2421, i64* %2424
  %2425 = load i64, i64* %PC
  %2426 = sub i64 %2425, 701
  %2427 = load i64, i64* %PC
  %2428 = add i64 %2427, 5
  store i64 %2428, i64* %PC
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2426, i64* %2429, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 12
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 7
  store i64 %2433, i64* %PC
  %2434 = inttoptr i64 %2431 to i32*
  store i32 25, i32* %2434
  br label %block_400a43

block_400586:                                     ; preds = %block_400780, %block_400b04, %block_400686, %block_400a0a, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005be, %block_400942, %block_400a43, %block_400848, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %1278, %block_400a43 ], [ %2062, %block_400622 ], [ %1964, %block_4009a6 ], [ %1866, %block_4008ac ], [ %1768, %block_4007b2 ], [ %1670, %block_400b36 ], [ %1572, %block_4006b8 ], [ %1376, %block_400942 ], [ %1185, %block_400848 ], [ %1087, %block_40074e ], [ %1474, %block_4005be ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2568, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %2160, %block_400aa0 ], [ %2258, %block_40071c ], [ %2356, %block_400816 ], [ %2470, %block_400910 ], [ %2666, %block_400a0a ], [ %2764, %block_400686 ], [ %2862, %block_400b04 ], [ %2960, %block_400780 ]
  %2435 = load i64, i64* %RBP
  %2436 = sub i64 %2435, 40
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 4
  store i64 %2438, i64* %PC
  %2439 = inttoptr i64 %2436 to i64*
  %2440 = load i64, i64* %2439
  store i64 %2440, i64* %RAX, align 8, !tbaa !2428
  %2441 = load i64, i64* %RAX
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 2
  store i64 %2443, i64* %PC
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2441, i64* %2444, align 8, !tbaa !2428
  %2445 = load i64, i64* %PC
  switch i64 %2445, label %3034 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196924, label %block_400a3c
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
  ]

block_400910:                                     ; preds = %block_400586
  %2446 = load i64, i64* %RBP
  %2447 = sub i64 %2446, 12
  %2448 = load i64, i64* %PC
  %2449 = add i64 %2448, 7
  store i64 %2449, i64* %PC
  %2450 = inttoptr i64 %2447 to i32*
  store i32 19, i32* %2450
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 12
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 3
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i32*
  %2456 = load i32, i32* %2455
  %2457 = zext i32 %2456 to i64
  store i64 %2457, i64* %RDI, align 8, !tbaa !2428
  %2458 = load i64, i64* %PC
  %2459 = sub i64 %2458, 1034
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 5
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 5
  store i64 %2463, i64* %PC
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2465 = load i64, i64* %2464, align 8, !tbaa !2428
  %2466 = add i64 %2465, -8
  %2467 = inttoptr i64 %2466 to i64*
  store i64 %2461, i64* %2467
  store i64 %2466, i64* %2464, align 8, !tbaa !2428
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2459, i64* %2468, align 8, !tbaa !2428
  %2469 = load i64, i64* %PC
  %2470 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2469, %struct.Memory* %MEMORY.1)
  %2471 = load i64, i64* %RBP
  %2472 = sub i64 %2471, 8
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 4
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2472 to i64*
  %2476 = load i64, i64* %2475
  store i64 %2476, i64* %RAX, align 8, !tbaa !2428
  %2477 = load i64, i64* %RAX
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 3
  store i64 %2479, i64* %PC
  store i64 %2477, i64* %RCX, align 8, !tbaa !2428
  %2480 = load i64, i64* %RCX
  %2481 = load i64, i64* %PC
  %2482 = add i64 %2481, 4
  store i64 %2482, i64* %PC
  %2483 = add i64 4, %2480
  store i64 %2483, i64* %RCX, align 8, !tbaa !2428
  %2484 = icmp ult i64 %2483, %2480
  %2485 = icmp ult i64 %2483, 4
  %2486 = or i1 %2484, %2485
  %2487 = zext i1 %2486 to i8
  %2488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2487, i8* %2488, align 1, !tbaa !2432
  %2489 = trunc i64 %2483 to i32
  %2490 = and i32 %2489, 255
  %2491 = call i32 @llvm.ctpop.i32(i32 %2490) #16
  %2492 = trunc i32 %2491 to i8
  %2493 = and i8 %2492, 1
  %2494 = xor i8 %2493, 1
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2494, i8* %2495, align 1, !tbaa !2446
  %2496 = xor i64 4, %2480
  %2497 = xor i64 %2496, %2483
  %2498 = lshr i64 %2497, 4
  %2499 = trunc i64 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2500, i8* %2501, align 1, !tbaa !2447
  %2502 = icmp eq i64 %2483, 0
  %2503 = zext i1 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2503, i8* %2504, align 1, !tbaa !2448
  %2505 = lshr i64 %2483, 63
  %2506 = trunc i64 %2505 to i8
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2506, i8* %2507, align 1, !tbaa !2449
  %2508 = lshr i64 %2480, 63
  %2509 = xor i64 %2505, %2508
  %2510 = add nuw nsw i64 %2509, %2505
  %2511 = icmp eq i64 %2510, 2
  %2512 = zext i1 %2511 to i8
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2512, i8* %2513, align 1, !tbaa !2450
  %2514 = load i64, i64* %RBP
  %2515 = sub i64 %2514, 8
  %2516 = load i64, i64* %RCX
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 4
  store i64 %2518, i64* %PC
  %2519 = inttoptr i64 %2515 to i64*
  store i64 %2516, i64* %2519
  %2520 = load i64, i64* %RAX
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 3
  store i64 %2522, i64* %PC
  %2523 = inttoptr i64 %2520 to i32*
  %2524 = load i32, i32* %2523
  %2525 = sext i32 %2524 to i64
  store i64 %2525, i64* %RAX, align 8, !tbaa !2428
  %2526 = load i64, i64* %RAX
  %2527 = mul i64 %2526, 8
  %2528 = add i64 %2527, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 8
  store i64 %2530, i64* %PC
  %2531 = inttoptr i64 %2528 to i64*
  %2532 = load i64, i64* %2531
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RBP
  %2534 = sub i64 %2533, 40
  %2535 = load i64, i64* %RAX
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 4
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2534 to i64*
  store i64 %2535, i64* %2538
  %2539 = load i64, i64* %PC
  %2540 = sub i64 %2539, 951
  %2541 = load i64, i64* %PC
  %2542 = add i64 %2541, 5
  store i64 %2542, i64* %PC
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2540, i64* %2543, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2544 = load i64, i64* %RBP
  %2545 = sub i64 %2544, 12
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 7
  store i64 %2547, i64* %PC
  %2548 = inttoptr i64 %2545 to i32*
  store i32 1, i32* %2548
  %2549 = load i64, i64* %RBP
  %2550 = sub i64 %2549, 12
  %2551 = load i64, i64* %PC
  %2552 = add i64 %2551, 3
  store i64 %2552, i64* %PC
  %2553 = inttoptr i64 %2550 to i32*
  %2554 = load i32, i32* %2553
  %2555 = zext i32 %2554 to i64
  store i64 %2555, i64* %RDI, align 8, !tbaa !2428
  %2556 = load i64, i64* %PC
  %2557 = sub i64 %2556, 134
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 5
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 5
  store i64 %2561, i64* %PC
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2563 = load i64, i64* %2562, align 8, !tbaa !2428
  %2564 = add i64 %2563, -8
  %2565 = inttoptr i64 %2564 to i64*
  store i64 %2559, i64* %2565
  store i64 %2564, i64* %2562, align 8, !tbaa !2428
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2557, i64* %2566, align 8, !tbaa !2428
  %2567 = load i64, i64* %PC
  %2568 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2567, %struct.Memory* %MEMORY.1)
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 8
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 4
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to i64*
  %2574 = load i64, i64* %2573
  store i64 %2574, i64* %RAX, align 8, !tbaa !2428
  %2575 = load i64, i64* %RAX
  %2576 = load i64, i64* %PC
  %2577 = add i64 %2576, 3
  store i64 %2577, i64* %PC
  store i64 %2575, i64* %RCX, align 8, !tbaa !2428
  %2578 = load i64, i64* %RCX
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 4
  store i64 %2580, i64* %PC
  %2581 = add i64 4, %2578
  store i64 %2581, i64* %RCX, align 8, !tbaa !2428
  %2582 = icmp ult i64 %2581, %2578
  %2583 = icmp ult i64 %2581, 4
  %2584 = or i1 %2582, %2583
  %2585 = zext i1 %2584 to i8
  %2586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2585, i8* %2586, align 1, !tbaa !2432
  %2587 = trunc i64 %2581 to i32
  %2588 = and i32 %2587, 255
  %2589 = call i32 @llvm.ctpop.i32(i32 %2588) #16
  %2590 = trunc i32 %2589 to i8
  %2591 = and i8 %2590, 1
  %2592 = xor i8 %2591, 1
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2592, i8* %2593, align 1, !tbaa !2446
  %2594 = xor i64 4, %2578
  %2595 = xor i64 %2594, %2581
  %2596 = lshr i64 %2595, 4
  %2597 = trunc i64 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2598, i8* %2599, align 1, !tbaa !2447
  %2600 = icmp eq i64 %2581, 0
  %2601 = zext i1 %2600 to i8
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2601, i8* %2602, align 1, !tbaa !2448
  %2603 = lshr i64 %2581, 63
  %2604 = trunc i64 %2603 to i8
  %2605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2604, i8* %2605, align 1, !tbaa !2449
  %2606 = lshr i64 %2578, 63
  %2607 = xor i64 %2603, %2606
  %2608 = add nuw nsw i64 %2607, %2603
  %2609 = icmp eq i64 %2608, 2
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2610, i8* %2611, align 1, !tbaa !2450
  %2612 = load i64, i64* %RBP
  %2613 = sub i64 %2612, 8
  %2614 = load i64, i64* %RCX
  %2615 = load i64, i64* %PC
  %2616 = add i64 %2615, 4
  store i64 %2616, i64* %PC
  %2617 = inttoptr i64 %2613 to i64*
  store i64 %2614, i64* %2617
  %2618 = load i64, i64* %RAX
  %2619 = load i64, i64* %PC
  %2620 = add i64 %2619, 3
  store i64 %2620, i64* %PC
  %2621 = inttoptr i64 %2618 to i32*
  %2622 = load i32, i32* %2621
  %2623 = sext i32 %2622 to i64
  store i64 %2623, i64* %RAX, align 8, !tbaa !2428
  %2624 = load i64, i64* %RAX
  %2625 = mul i64 %2624, 8
  %2626 = add i64 %2625, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2627 = load i64, i64* %PC
  %2628 = add i64 %2627, 8
  store i64 %2628, i64* %PC
  %2629 = inttoptr i64 %2626 to i64*
  %2630 = load i64, i64* %2629
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RBP
  %2632 = sub i64 %2631, 40
  %2633 = load i64, i64* %RAX
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 4
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2632 to i64*
  store i64 %2633, i64* %2636
  %2637 = load i64, i64* %PC
  %2638 = sub i64 %2637, 51
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 5
  store i64 %2640, i64* %PC
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2638, i64* %2641, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2642 = load i64, i64* %RBP
  %2643 = sub i64 %2642, 12
  %2644 = load i64, i64* %PC
  %2645 = add i64 %2644, 7
  store i64 %2645, i64* %PC
  %2646 = inttoptr i64 %2643 to i32*
  store i32 24, i32* %2646
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 12
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 3
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to i32*
  %2652 = load i32, i32* %2651
  %2653 = zext i32 %2652 to i64
  store i64 %2653, i64* %RDI, align 8, !tbaa !2428
  %2654 = load i64, i64* %PC
  %2655 = sub i64 %2654, 1284
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 5
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  store i64 %2659, i64* %PC
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2661 = load i64, i64* %2660, align 8, !tbaa !2428
  %2662 = add i64 %2661, -8
  %2663 = inttoptr i64 %2662 to i64*
  store i64 %2657, i64* %2663
  store i64 %2662, i64* %2660, align 8, !tbaa !2428
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2655, i64* %2664, align 8, !tbaa !2428
  %2665 = load i64, i64* %PC
  %2666 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2665, %struct.Memory* %MEMORY.1)
  %2667 = load i64, i64* %RBP
  %2668 = sub i64 %2667, 8
  %2669 = load i64, i64* %PC
  %2670 = add i64 %2669, 4
  store i64 %2670, i64* %PC
  %2671 = inttoptr i64 %2668 to i64*
  %2672 = load i64, i64* %2671
  store i64 %2672, i64* %RAX, align 8, !tbaa !2428
  %2673 = load i64, i64* %RAX
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 3
  store i64 %2675, i64* %PC
  store i64 %2673, i64* %RCX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RCX
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 4
  store i64 %2678, i64* %PC
  %2679 = add i64 4, %2676
  store i64 %2679, i64* %RCX, align 8, !tbaa !2428
  %2680 = icmp ult i64 %2679, %2676
  %2681 = icmp ult i64 %2679, 4
  %2682 = or i1 %2680, %2681
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2683, i8* %2684, align 1, !tbaa !2432
  %2685 = trunc i64 %2679 to i32
  %2686 = and i32 %2685, 255
  %2687 = call i32 @llvm.ctpop.i32(i32 %2686) #16
  %2688 = trunc i32 %2687 to i8
  %2689 = and i8 %2688, 1
  %2690 = xor i8 %2689, 1
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2690, i8* %2691, align 1, !tbaa !2446
  %2692 = xor i64 4, %2676
  %2693 = xor i64 %2692, %2679
  %2694 = lshr i64 %2693, 4
  %2695 = trunc i64 %2694 to i8
  %2696 = and i8 %2695, 1
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2696, i8* %2697, align 1, !tbaa !2447
  %2698 = icmp eq i64 %2679, 0
  %2699 = zext i1 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2699, i8* %2700, align 1, !tbaa !2448
  %2701 = lshr i64 %2679, 63
  %2702 = trunc i64 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2702, i8* %2703, align 1, !tbaa !2449
  %2704 = lshr i64 %2676, 63
  %2705 = xor i64 %2701, %2704
  %2706 = add nuw nsw i64 %2705, %2701
  %2707 = icmp eq i64 %2706, 2
  %2708 = zext i1 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2708, i8* %2709, align 1, !tbaa !2450
  %2710 = load i64, i64* %RBP
  %2711 = sub i64 %2710, 8
  %2712 = load i64, i64* %RCX
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 4
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2711 to i64*
  store i64 %2712, i64* %2715
  %2716 = load i64, i64* %RAX
  %2717 = load i64, i64* %PC
  %2718 = add i64 %2717, 3
  store i64 %2718, i64* %PC
  %2719 = inttoptr i64 %2716 to i32*
  %2720 = load i32, i32* %2719
  %2721 = sext i32 %2720 to i64
  store i64 %2721, i64* %RAX, align 8, !tbaa !2428
  %2722 = load i64, i64* %RAX
  %2723 = mul i64 %2722, 8
  %2724 = add i64 %2723, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2725 = load i64, i64* %PC
  %2726 = add i64 %2725, 8
  store i64 %2726, i64* %PC
  %2727 = inttoptr i64 %2724 to i64*
  %2728 = load i64, i64* %2727
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = load i64, i64* %RBP
  %2730 = sub i64 %2729, 40
  %2731 = load i64, i64* %RAX
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 4
  store i64 %2733, i64* %PC
  %2734 = inttoptr i64 %2730 to i64*
  store i64 %2731, i64* %2734
  %2735 = load i64, i64* %PC
  %2736 = sub i64 %2735, 1201
  %2737 = load i64, i64* %PC
  %2738 = add i64 %2737, 5
  store i64 %2738, i64* %PC
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2736, i64* %2739, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2740 = load i64, i64* %RBP
  %2741 = sub i64 %2740, 12
  %2742 = load i64, i64* %PC
  %2743 = add i64 %2742, 7
  store i64 %2743, i64* %PC
  %2744 = inttoptr i64 %2741 to i32*
  store i32 6, i32* %2744
  %2745 = load i64, i64* %RBP
  %2746 = sub i64 %2745, 12
  %2747 = load i64, i64* %PC
  %2748 = add i64 %2747, 3
  store i64 %2748, i64* %PC
  %2749 = inttoptr i64 %2746 to i32*
  %2750 = load i32, i32* %2749
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RDI, align 8, !tbaa !2428
  %2752 = load i64, i64* %PC
  %2753 = sub i64 %2752, 384
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 5
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  store i64 %2757, i64* %PC
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2759 = load i64, i64* %2758, align 8, !tbaa !2428
  %2760 = add i64 %2759, -8
  %2761 = inttoptr i64 %2760 to i64*
  store i64 %2755, i64* %2761
  store i64 %2760, i64* %2758, align 8, !tbaa !2428
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2753, i64* %2762, align 8, !tbaa !2428
  %2763 = load i64, i64* %PC
  %2764 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2763, %struct.Memory* %MEMORY.1)
  %2765 = load i64, i64* %RBP
  %2766 = sub i64 %2765, 8
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 4
  store i64 %2768, i64* %PC
  %2769 = inttoptr i64 %2766 to i64*
  %2770 = load i64, i64* %2769
  store i64 %2770, i64* %RAX, align 8, !tbaa !2428
  %2771 = load i64, i64* %RAX
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 3
  store i64 %2773, i64* %PC
  store i64 %2771, i64* %RCX, align 8, !tbaa !2428
  %2774 = load i64, i64* %RCX
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 4
  store i64 %2776, i64* %PC
  %2777 = add i64 4, %2774
  store i64 %2777, i64* %RCX, align 8, !tbaa !2428
  %2778 = icmp ult i64 %2777, %2774
  %2779 = icmp ult i64 %2777, 4
  %2780 = or i1 %2778, %2779
  %2781 = zext i1 %2780 to i8
  %2782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2781, i8* %2782, align 1, !tbaa !2432
  %2783 = trunc i64 %2777 to i32
  %2784 = and i32 %2783, 255
  %2785 = call i32 @llvm.ctpop.i32(i32 %2784) #16
  %2786 = trunc i32 %2785 to i8
  %2787 = and i8 %2786, 1
  %2788 = xor i8 %2787, 1
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2788, i8* %2789, align 1, !tbaa !2446
  %2790 = xor i64 4, %2774
  %2791 = xor i64 %2790, %2777
  %2792 = lshr i64 %2791, 4
  %2793 = trunc i64 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2794, i8* %2795, align 1, !tbaa !2447
  %2796 = icmp eq i64 %2777, 0
  %2797 = zext i1 %2796 to i8
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2797, i8* %2798, align 1, !tbaa !2448
  %2799 = lshr i64 %2777, 63
  %2800 = trunc i64 %2799 to i8
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2800, i8* %2801, align 1, !tbaa !2449
  %2802 = lshr i64 %2774, 63
  %2803 = xor i64 %2799, %2802
  %2804 = add nuw nsw i64 %2803, %2799
  %2805 = icmp eq i64 %2804, 2
  %2806 = zext i1 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2806, i8* %2807, align 1, !tbaa !2450
  %2808 = load i64, i64* %RBP
  %2809 = sub i64 %2808, 8
  %2810 = load i64, i64* %RCX
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 4
  store i64 %2812, i64* %PC
  %2813 = inttoptr i64 %2809 to i64*
  store i64 %2810, i64* %2813
  %2814 = load i64, i64* %RAX
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 3
  store i64 %2816, i64* %PC
  %2817 = inttoptr i64 %2814 to i32*
  %2818 = load i32, i32* %2817
  %2819 = sext i32 %2818 to i64
  store i64 %2819, i64* %RAX, align 8, !tbaa !2428
  %2820 = load i64, i64* %RAX
  %2821 = mul i64 %2820, 8
  %2822 = add i64 %2821, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2823 = load i64, i64* %PC
  %2824 = add i64 %2823, 8
  store i64 %2824, i64* %PC
  %2825 = inttoptr i64 %2822 to i64*
  %2826 = load i64, i64* %2825
  store i64 %2826, i64* %RAX, align 8, !tbaa !2428
  %2827 = load i64, i64* %RBP
  %2828 = sub i64 %2827, 40
  %2829 = load i64, i64* %RAX
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 4
  store i64 %2831, i64* %PC
  %2832 = inttoptr i64 %2828 to i64*
  store i64 %2829, i64* %2832
  %2833 = load i64, i64* %PC
  %2834 = sub i64 %2833, 301
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 5
  store i64 %2836, i64* %PC
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2834, i64* %2837, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2838 = load i64, i64* %RBP
  %2839 = sub i64 %2838, 12
  %2840 = load i64, i64* %PC
  %2841 = add i64 %2840, 7
  store i64 %2841, i64* %PC
  %2842 = inttoptr i64 %2839 to i32*
  store i32 29, i32* %2842
  %2843 = load i64, i64* %RBP
  %2844 = sub i64 %2843, 12
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 3
  store i64 %2846, i64* %PC
  %2847 = inttoptr i64 %2844 to i32*
  %2848 = load i32, i32* %2847
  %2849 = zext i32 %2848 to i64
  store i64 %2849, i64* %RDI, align 8, !tbaa !2428
  %2850 = load i64, i64* %PC
  %2851 = sub i64 %2850, 1534
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 5
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 5
  store i64 %2855, i64* %PC
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2857 = load i64, i64* %2856, align 8, !tbaa !2428
  %2858 = add i64 %2857, -8
  %2859 = inttoptr i64 %2858 to i64*
  store i64 %2853, i64* %2859
  store i64 %2858, i64* %2856, align 8, !tbaa !2428
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2851, i64* %2860, align 8, !tbaa !2428
  %2861 = load i64, i64* %PC
  %2862 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2861, %struct.Memory* %MEMORY.1)
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 8
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 4
  store i64 %2866, i64* %PC
  %2867 = inttoptr i64 %2864 to i64*
  %2868 = load i64, i64* %2867
  store i64 %2868, i64* %RAX, align 8, !tbaa !2428
  %2869 = load i64, i64* %RAX
  %2870 = load i64, i64* %PC
  %2871 = add i64 %2870, 3
  store i64 %2871, i64* %PC
  store i64 %2869, i64* %RCX, align 8, !tbaa !2428
  %2872 = load i64, i64* %RCX
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 4
  store i64 %2874, i64* %PC
  %2875 = add i64 4, %2872
  store i64 %2875, i64* %RCX, align 8, !tbaa !2428
  %2876 = icmp ult i64 %2875, %2872
  %2877 = icmp ult i64 %2875, 4
  %2878 = or i1 %2876, %2877
  %2879 = zext i1 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2879, i8* %2880, align 1, !tbaa !2432
  %2881 = trunc i64 %2875 to i32
  %2882 = and i32 %2881, 255
  %2883 = call i32 @llvm.ctpop.i32(i32 %2882) #16
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = xor i8 %2885, 1
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2886, i8* %2887, align 1, !tbaa !2446
  %2888 = xor i64 4, %2872
  %2889 = xor i64 %2888, %2875
  %2890 = lshr i64 %2889, 4
  %2891 = trunc i64 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2892, i8* %2893, align 1, !tbaa !2447
  %2894 = icmp eq i64 %2875, 0
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2895, i8* %2896, align 1, !tbaa !2448
  %2897 = lshr i64 %2875, 63
  %2898 = trunc i64 %2897 to i8
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2898, i8* %2899, align 1, !tbaa !2449
  %2900 = lshr i64 %2872, 63
  %2901 = xor i64 %2897, %2900
  %2902 = add nuw nsw i64 %2901, %2897
  %2903 = icmp eq i64 %2902, 2
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2904, i8* %2905, align 1, !tbaa !2450
  %2906 = load i64, i64* %RBP
  %2907 = sub i64 %2906, 8
  %2908 = load i64, i64* %RCX
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 4
  store i64 %2910, i64* %PC
  %2911 = inttoptr i64 %2907 to i64*
  store i64 %2908, i64* %2911
  %2912 = load i64, i64* %RAX
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 3
  store i64 %2914, i64* %PC
  %2915 = inttoptr i64 %2912 to i32*
  %2916 = load i32, i32* %2915
  %2917 = sext i32 %2916 to i64
  store i64 %2917, i64* %RAX, align 8, !tbaa !2428
  %2918 = load i64, i64* %RAX
  %2919 = mul i64 %2918, 8
  %2920 = add i64 %2919, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 8
  store i64 %2922, i64* %PC
  %2923 = inttoptr i64 %2920 to i64*
  %2924 = load i64, i64* %2923
  store i64 %2924, i64* %RAX, align 8, !tbaa !2428
  %2925 = load i64, i64* %RBP
  %2926 = sub i64 %2925, 40
  %2927 = load i64, i64* %RAX
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 4
  store i64 %2929, i64* %PC
  %2930 = inttoptr i64 %2926 to i64*
  store i64 %2927, i64* %2930
  %2931 = load i64, i64* %PC
  %2932 = sub i64 %2931, 1451
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 5
  store i64 %2934, i64* %PC
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2932, i64* %2935, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2936 = load i64, i64* %RBP
  %2937 = sub i64 %2936, 12
  %2938 = load i64, i64* %PC
  %2939 = add i64 %2938, 7
  store i64 %2939, i64* %PC
  %2940 = inttoptr i64 %2937 to i32*
  store i32 11, i32* %2940
  %2941 = load i64, i64* %RBP
  %2942 = sub i64 %2941, 12
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 3
  store i64 %2944, i64* %PC
  %2945 = inttoptr i64 %2942 to i32*
  %2946 = load i32, i32* %2945
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RDI, align 8, !tbaa !2428
  %2948 = load i64, i64* %PC
  %2949 = sub i64 %2948, 634
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 5
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 5
  store i64 %2953, i64* %PC
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2955 = load i64, i64* %2954, align 8, !tbaa !2428
  %2956 = add i64 %2955, -8
  %2957 = inttoptr i64 %2956 to i64*
  store i64 %2951, i64* %2957
  store i64 %2956, i64* %2954, align 8, !tbaa !2428
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2949, i64* %2958, align 8, !tbaa !2428
  %2959 = load i64, i64* %PC
  %2960 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2959, %struct.Memory* %MEMORY.1)
  %2961 = load i64, i64* %RBP
  %2962 = sub i64 %2961, 8
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 4
  store i64 %2964, i64* %PC
  %2965 = inttoptr i64 %2962 to i64*
  %2966 = load i64, i64* %2965
  store i64 %2966, i64* %RAX, align 8, !tbaa !2428
  %2967 = load i64, i64* %RAX
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 3
  store i64 %2969, i64* %PC
  store i64 %2967, i64* %RCX, align 8, !tbaa !2428
  %2970 = load i64, i64* %RCX
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 4
  store i64 %2972, i64* %PC
  %2973 = add i64 4, %2970
  store i64 %2973, i64* %RCX, align 8, !tbaa !2428
  %2974 = icmp ult i64 %2973, %2970
  %2975 = icmp ult i64 %2973, 4
  %2976 = or i1 %2974, %2975
  %2977 = zext i1 %2976 to i8
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2977, i8* %2978, align 1, !tbaa !2432
  %2979 = trunc i64 %2973 to i32
  %2980 = and i32 %2979, 255
  %2981 = call i32 @llvm.ctpop.i32(i32 %2980) #16
  %2982 = trunc i32 %2981 to i8
  %2983 = and i8 %2982, 1
  %2984 = xor i8 %2983, 1
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2984, i8* %2985, align 1, !tbaa !2446
  %2986 = xor i64 4, %2970
  %2987 = xor i64 %2986, %2973
  %2988 = lshr i64 %2987, 4
  %2989 = trunc i64 %2988 to i8
  %2990 = and i8 %2989, 1
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2990, i8* %2991, align 1, !tbaa !2447
  %2992 = icmp eq i64 %2973, 0
  %2993 = zext i1 %2992 to i8
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2993, i8* %2994, align 1, !tbaa !2448
  %2995 = lshr i64 %2973, 63
  %2996 = trunc i64 %2995 to i8
  %2997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2996, i8* %2997, align 1, !tbaa !2449
  %2998 = lshr i64 %2970, 63
  %2999 = xor i64 %2995, %2998
  %3000 = add nuw nsw i64 %2999, %2995
  %3001 = icmp eq i64 %3000, 2
  %3002 = zext i1 %3001 to i8
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3002, i8* %3003, align 1, !tbaa !2450
  %3004 = load i64, i64* %RBP
  %3005 = sub i64 %3004, 8
  %3006 = load i64, i64* %RCX
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 4
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3005 to i64*
  store i64 %3006, i64* %3009
  %3010 = load i64, i64* %RAX
  %3011 = load i64, i64* %PC
  %3012 = add i64 %3011, 3
  store i64 %3012, i64* %PC
  %3013 = inttoptr i64 %3010 to i32*
  %3014 = load i32, i32* %3013
  %3015 = sext i32 %3014 to i64
  store i64 %3015, i64* %RAX, align 8, !tbaa !2428
  %3016 = load i64, i64* %RAX
  %3017 = mul i64 %3016, 8
  %3018 = add i64 %3017, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 8
  store i64 %3020, i64* %PC
  %3021 = inttoptr i64 %3018 to i64*
  %3022 = load i64, i64* %3021
  store i64 %3022, i64* %RAX, align 8, !tbaa !2428
  %3023 = load i64, i64* %RBP
  %3024 = sub i64 %3023, 40
  %3025 = load i64, i64* %RAX
  %3026 = load i64, i64* %PC
  %3027 = add i64 %3026, 4
  store i64 %3027, i64* %PC
  %3028 = inttoptr i64 %3024 to i64*
  store i64 %3025, i64* %3028
  %3029 = load i64, i64* %PC
  %3030 = sub i64 %3029, 551
  %3031 = load i64, i64* %PC
  %3032 = add i64 %3031, 5
  store i64 %3032, i64* %PC
  %3033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3030, i64* %3033, align 8, !tbaa !2428
  br label %block_400586

; <label>:3034:                                   ; preds = %block_400586
  %3035 = load i64, i64* %PC
  %3036 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3035, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %3036
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ad9(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400ad9

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 1234
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 1151
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 5, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 334
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 251
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 28, i32* %817
  br label %block_400ad9

block_40074e:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 10, i32* %822
  %823 = load i64, i64* %PC
  %824 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %823, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %824

block_400848:                                     ; preds = %block_400586
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 12
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 7
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 15, i32* %829
  %830 = load i64, i64* %PC
  %831 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %830, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %831

block_400942:                                     ; preds = %block_400586
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 12
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 7
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i32*
  store i32 20, i32* %836
  %837 = load i64, i64* %PC
  %838 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %837, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %838

block_4005be:                                     ; preds = %block_400586
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 12
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 7
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  store i32 2, i32* %843
  %844 = load i64, i64* %PC
  %845 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %844, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %845

block_4005f0:                                     ; preds = %block_400586
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 12
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 7
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i32*
  store i32 3, i32* %850
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 12
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i32*
  %856 = load i32, i32* %855
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDI, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = sub i64 %858, 234
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 5
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  store i64 %863, i64* %PC
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %865 = load i64, i64* %864, align 8, !tbaa !2428
  %866 = add i64 %865, -8
  %867 = inttoptr i64 %866 to i64*
  store i64 %861, i64* %867
  store i64 %866, i64* %864, align 8, !tbaa !2428
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %859, i64* %868, align 8, !tbaa !2428
  %869 = load i64, i64* %PC
  %870 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %869, %struct.Memory* %MEMORY.0)
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 8
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i64*
  %876 = load i64, i64* %875
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = load i64, i64* %RAX
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 3
  store i64 %879, i64* %PC
  store i64 %877, i64* %RCX, align 8, !tbaa !2428
  %880 = load i64, i64* %RCX
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = add i64 4, %880
  store i64 %883, i64* %RCX, align 8, !tbaa !2428
  %884 = icmp ult i64 %883, %880
  %885 = icmp ult i64 %883, 4
  %886 = or i1 %884, %885
  %887 = zext i1 %886 to i8
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %887, i8* %888, align 1, !tbaa !2432
  %889 = trunc i64 %883 to i32
  %890 = and i32 %889, 255
  %891 = call i32 @llvm.ctpop.i32(i32 %890) #16
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  %894 = xor i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %894, i8* %895, align 1, !tbaa !2446
  %896 = xor i64 4, %880
  %897 = xor i64 %896, %883
  %898 = lshr i64 %897, 4
  %899 = trunc i64 %898 to i8
  %900 = and i8 %899, 1
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %900, i8* %901, align 1, !tbaa !2447
  %902 = icmp eq i64 %883, 0
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %903, i8* %904, align 1, !tbaa !2448
  %905 = lshr i64 %883, 63
  %906 = trunc i64 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %906, i8* %907, align 1, !tbaa !2449
  %908 = lshr i64 %880, 63
  %909 = xor i64 %905, %908
  %910 = add nuw nsw i64 %909, %905
  %911 = icmp eq i64 %910, 2
  %912 = zext i1 %911 to i8
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %912, i8* %913, align 1, !tbaa !2450
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 8
  %916 = load i64, i64* %RCX
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 4
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %915 to i64*
  store i64 %916, i64* %919
  %920 = load i64, i64* %RAX
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 3
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %920 to i32*
  %924 = load i32, i32* %923
  %925 = sext i32 %924 to i64
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = load i64, i64* %RAX
  %927 = mul i64 %926, 8
  %928 = add i64 %927, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 8
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i64*
  %932 = load i64, i64* %931
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 40
  %935 = load i64, i64* %RAX
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC
  %938 = inttoptr i64 %934 to i64*
  store i64 %935, i64* %938
  %939 = load i64, i64* %PC
  %940 = sub i64 %939, 151
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 5
  store i64 %942, i64* %PC
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %940, i64* %943, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %944 = load i64, i64* %RBP
  %945 = sub i64 %944, 12
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 7
  store i64 %947, i64* %PC
  %948 = inttoptr i64 %945 to i32*
  store i32 25, i32* %948
  %949 = load i64, i64* %PC
  %950 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %949, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %950

block_4006b8:                                     ; preds = %block_400586
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 12
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 7
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i32*
  store i32 7, i32* %955
  %956 = load i64, i64* %RBP
  %957 = sub i64 %956, 12
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 3
  store i64 %959, i64* %PC
  %960 = inttoptr i64 %957 to i32*
  %961 = load i32, i32* %960
  %962 = zext i32 %961 to i64
  store i64 %962, i64* %RDI, align 8, !tbaa !2428
  %963 = load i64, i64* %PC
  %964 = sub i64 %963, 434
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 5
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %970 = load i64, i64* %969, align 8, !tbaa !2428
  %971 = add i64 %970, -8
  %972 = inttoptr i64 %971 to i64*
  store i64 %966, i64* %972
  store i64 %971, i64* %969, align 8, !tbaa !2428
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %964, i64* %973, align 8, !tbaa !2428
  %974 = load i64, i64* %PC
  %975 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %974, %struct.Memory* %MEMORY.0)
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 8
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980
  store i64 %981, i64* %RAX, align 8, !tbaa !2428
  %982 = load i64, i64* %RAX
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 3
  store i64 %984, i64* %PC
  store i64 %982, i64* %RCX, align 8, !tbaa !2428
  %985 = load i64, i64* %RCX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = add i64 4, %985
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = icmp ult i64 %988, %985
  %990 = icmp ult i64 %988, 4
  %991 = or i1 %989, %990
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %992, i8* %993, align 1, !tbaa !2432
  %994 = trunc i64 %988 to i32
  %995 = and i32 %994, 255
  %996 = call i32 @llvm.ctpop.i32(i32 %995) #16
  %997 = trunc i32 %996 to i8
  %998 = and i8 %997, 1
  %999 = xor i8 %998, 1
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %999, i8* %1000, align 1, !tbaa !2446
  %1001 = xor i64 4, %985
  %1002 = xor i64 %1001, %988
  %1003 = lshr i64 %1002, 4
  %1004 = trunc i64 %1003 to i8
  %1005 = and i8 %1004, 1
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1005, i8* %1006, align 1, !tbaa !2447
  %1007 = icmp eq i64 %988, 0
  %1008 = zext i1 %1007 to i8
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1008, i8* %1009, align 1, !tbaa !2448
  %1010 = lshr i64 %988, 63
  %1011 = trunc i64 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1011, i8* %1012, align 1, !tbaa !2449
  %1013 = lshr i64 %985, 63
  %1014 = xor i64 %1010, %1013
  %1015 = add nuw nsw i64 %1014, %1010
  %1016 = icmp eq i64 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2450
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 8
  %1021 = load i64, i64* %RCX
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 4
  store i64 %1023, i64* %PC
  %1024 = inttoptr i64 %1020 to i64*
  store i64 %1021, i64* %1024
  %1025 = load i64, i64* %RAX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 3
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1025 to i32*
  %1029 = load i32, i32* %1028
  %1030 = sext i32 %1029 to i64
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = load i64, i64* %RAX
  %1032 = mul i64 %1031, 8
  %1033 = add i64 %1032, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 8
  store i64 %1035, i64* %PC
  %1036 = inttoptr i64 %1033 to i64*
  %1037 = load i64, i64* %1036
  store i64 %1037, i64* %RAX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RBP
  %1039 = sub i64 %1038, 40
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1039 to i64*
  store i64 %1040, i64* %1043
  %1044 = load i64, i64* %PC
  %1045 = sub i64 %1044, 351
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 5
  store i64 %1047, i64* %PC
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1045, i64* %1048, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 12
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 7
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  store i32 30, i32* %1053
  %1054 = load i64, i64* %RBP
  %1055 = sub i64 %1054, 12
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC
  %1058 = inttoptr i64 %1055 to i32*
  %1059 = load i32, i32* %1058
  %1060 = zext i32 %1059 to i64
  store i64 %1060, i64* %RDI, align 8, !tbaa !2428
  %1061 = load i64, i64* %PC
  %1062 = sub i64 %1061, 1584
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 5
  store i64 %1066, i64* %PC
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1068 = load i64, i64* %1067, align 8, !tbaa !2428
  %1069 = add i64 %1068, -8
  %1070 = inttoptr i64 %1069 to i64*
  store i64 %1064, i64* %1070
  store i64 %1069, i64* %1067, align 8, !tbaa !2428
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1062, i64* %1071, align 8, !tbaa !2428
  %1072 = load i64, i64* %PC
  %1073 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1072, %struct.Memory* %MEMORY.0)
  %1074 = load i64, i64* %RBP
  %1075 = sub i64 %1074, 8
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 4
  store i64 %1077, i64* %PC
  %1078 = inttoptr i64 %1075 to i64*
  %1079 = load i64, i64* %1078
  store i64 %1079, i64* %RAX, align 8, !tbaa !2428
  %1080 = load i64, i64* %RAX
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 3
  store i64 %1082, i64* %PC
  store i64 %1080, i64* %RCX, align 8, !tbaa !2428
  %1083 = load i64, i64* %RCX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 4
  store i64 %1085, i64* %PC
  %1086 = add i64 4, %1083
  store i64 %1086, i64* %RCX, align 8, !tbaa !2428
  %1087 = icmp ult i64 %1086, %1083
  %1088 = icmp ult i64 %1086, 4
  %1089 = or i1 %1087, %1088
  %1090 = zext i1 %1089 to i8
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1090, i8* %1091, align 1, !tbaa !2432
  %1092 = trunc i64 %1086 to i32
  %1093 = and i32 %1092, 255
  %1094 = call i32 @llvm.ctpop.i32(i32 %1093) #16
  %1095 = trunc i32 %1094 to i8
  %1096 = and i8 %1095, 1
  %1097 = xor i8 %1096, 1
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1097, i8* %1098, align 1, !tbaa !2446
  %1099 = xor i64 4, %1083
  %1100 = xor i64 %1099, %1086
  %1101 = lshr i64 %1100, 4
  %1102 = trunc i64 %1101 to i8
  %1103 = and i8 %1102, 1
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1103, i8* %1104, align 1, !tbaa !2447
  %1105 = icmp eq i64 %1086, 0
  %1106 = zext i1 %1105 to i8
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1106, i8* %1107, align 1, !tbaa !2448
  %1108 = lshr i64 %1086, 63
  %1109 = trunc i64 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1109, i8* %1110, align 1, !tbaa !2449
  %1111 = lshr i64 %1083, 63
  %1112 = xor i64 %1108, %1111
  %1113 = add nuw nsw i64 %1112, %1108
  %1114 = icmp eq i64 %1113, 2
  %1115 = zext i1 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1115, i8* %1116, align 1, !tbaa !2450
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 8
  %1119 = load i64, i64* %RCX
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 4
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1118 to i64*
  store i64 %1119, i64* %1122
  %1123 = load i64, i64* %RAX
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 3
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1123 to i32*
  %1127 = load i32, i32* %1126
  %1128 = sext i32 %1127 to i64
  store i64 %1128, i64* %RAX, align 8, !tbaa !2428
  %1129 = load i64, i64* %RAX
  %1130 = mul i64 %1129, 8
  %1131 = add i64 %1130, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 8
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i64*
  %1135 = load i64, i64* %1134
  store i64 %1135, i64* %RAX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RBP
  %1137 = sub i64 %1136, 40
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1137 to i64*
  store i64 %1138, i64* %1141
  %1142 = load i64, i64* %PC
  %1143 = sub i64 %1142, 1501
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 5
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1143, i64* %1146, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 12
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 7
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i32*
  store i32 0, i32* %1151
  %1152 = load i64, i64* %RSP
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = add i64 48, %1152
  store i64 %1155, i64* %RSP, align 8, !tbaa !2428
  %1156 = icmp ult i64 %1155, %1152
  %1157 = icmp ult i64 %1155, 48
  %1158 = or i1 %1156, %1157
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1159, i8* %1160, align 1, !tbaa !2432
  %1161 = trunc i64 %1155 to i32
  %1162 = and i32 %1161, 255
  %1163 = call i32 @llvm.ctpop.i32(i32 %1162) #16
  %1164 = trunc i32 %1163 to i8
  %1165 = and i8 %1164, 1
  %1166 = xor i8 %1165, 1
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1166, i8* %1167, align 1, !tbaa !2446
  %1168 = xor i64 48, %1152
  %1169 = xor i64 %1168, %1155
  %1170 = lshr i64 %1169, 4
  %1171 = trunc i64 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1172, i8* %1173, align 1, !tbaa !2447
  %1174 = icmp eq i64 %1155, 0
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1175, i8* %1176, align 1, !tbaa !2448
  %1177 = lshr i64 %1155, 63
  %1178 = trunc i64 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1178, i8* %1179, align 1, !tbaa !2449
  %1180 = lshr i64 %1152, 63
  %1181 = xor i64 %1177, %1180
  %1182 = add nuw nsw i64 %1181, %1177
  %1183 = icmp eq i64 %1182, 2
  %1184 = zext i1 %1183 to i8
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1184, i8* %1185, align 1, !tbaa !2450
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 1
  store i64 %1187, i64* %PC
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1189 = load i64, i64* %1188, align 8, !tbaa !2428
  %1190 = add i64 %1189, 8
  %1191 = inttoptr i64 %1189 to i64*
  %1192 = load i64, i64* %1191
  store i64 %1192, i64* %RBP, align 8, !tbaa !2428
  store i64 %1190, i64* %1188, align 8, !tbaa !2428
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 1
  store i64 %1194, i64* %PC
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1197 = load i64, i64* %1196, align 8, !tbaa !2428
  %1198 = inttoptr i64 %1197 to i64*
  %1199 = load i64, i64* %1198
  store i64 %1199, i64* %1195, align 8, !tbaa !2428
  %1200 = add i64 %1197, 8
  store i64 %1200, i64* %1196, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007b2:                                     ; preds = %block_400586
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 12
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 7
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i32*
  store i32 12, i32* %1205
  %1206 = load i64, i64* %RBP
  %1207 = sub i64 %1206, 12
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 3
  store i64 %1209, i64* %PC
  %1210 = inttoptr i64 %1207 to i32*
  %1211 = load i32, i32* %1210
  %1212 = zext i32 %1211 to i64
  store i64 %1212, i64* %RDI, align 8, !tbaa !2428
  %1213 = load i64, i64* %PC
  %1214 = sub i64 %1213, 684
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 5
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 5
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1220 = load i64, i64* %1219, align 8, !tbaa !2428
  %1221 = add i64 %1220, -8
  %1222 = inttoptr i64 %1221 to i64*
  store i64 %1216, i64* %1222
  store i64 %1221, i64* %1219, align 8, !tbaa !2428
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1214, i64* %1223, align 8, !tbaa !2428
  %1224 = load i64, i64* %PC
  %1225 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1224, %struct.Memory* %MEMORY.0)
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 8
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 4
  store i64 %1229, i64* %PC
  %1230 = inttoptr i64 %1227 to i64*
  %1231 = load i64, i64* %1230
  store i64 %1231, i64* %RAX, align 8, !tbaa !2428
  %1232 = load i64, i64* %RAX
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 3
  store i64 %1234, i64* %PC
  store i64 %1232, i64* %RCX, align 8, !tbaa !2428
  %1235 = load i64, i64* %RCX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = add i64 4, %1235
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1239 = icmp ult i64 %1238, %1235
  %1240 = icmp ult i64 %1238, 4
  %1241 = or i1 %1239, %1240
  %1242 = zext i1 %1241 to i8
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1242, i8* %1243, align 1, !tbaa !2432
  %1244 = trunc i64 %1238 to i32
  %1245 = and i32 %1244, 255
  %1246 = call i32 @llvm.ctpop.i32(i32 %1245) #16
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = xor i8 %1248, 1
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1249, i8* %1250, align 1, !tbaa !2446
  %1251 = xor i64 4, %1235
  %1252 = xor i64 %1251, %1238
  %1253 = lshr i64 %1252, 4
  %1254 = trunc i64 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1255, i8* %1256, align 1, !tbaa !2447
  %1257 = icmp eq i64 %1238, 0
  %1258 = zext i1 %1257 to i8
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1258, i8* %1259, align 1, !tbaa !2448
  %1260 = lshr i64 %1238, 63
  %1261 = trunc i64 %1260 to i8
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1261, i8* %1262, align 1, !tbaa !2449
  %1263 = lshr i64 %1235, 63
  %1264 = xor i64 %1260, %1263
  %1265 = add nuw nsw i64 %1264, %1260
  %1266 = icmp eq i64 %1265, 2
  %1267 = zext i1 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1267, i8* %1268, align 1, !tbaa !2450
  %1269 = load i64, i64* %RBP
  %1270 = sub i64 %1269, 8
  %1271 = load i64, i64* %RCX
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 4
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1270 to i64*
  store i64 %1271, i64* %1274
  %1275 = load i64, i64* %RAX
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 3
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1275 to i32*
  %1279 = load i32, i32* %1278
  %1280 = sext i32 %1279 to i64
  store i64 %1280, i64* %RAX, align 8, !tbaa !2428
  %1281 = load i64, i64* %RAX
  %1282 = mul i64 %1281, 8
  %1283 = add i64 %1282, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 8
  store i64 %1285, i64* %PC
  %1286 = inttoptr i64 %1283 to i64*
  %1287 = load i64, i64* %1286
  store i64 %1287, i64* %RAX, align 8, !tbaa !2428
  %1288 = load i64, i64* %RBP
  %1289 = sub i64 %1288, 40
  %1290 = load i64, i64* %RAX
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 4
  store i64 %1292, i64* %PC
  %1293 = inttoptr i64 %1289 to i64*
  store i64 %1290, i64* %1293
  %1294 = load i64, i64* %PC
  %1295 = sub i64 %1294, 601
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  store i64 %1297, i64* %PC
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1295, i64* %1298, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 12
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 7
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to i32*
  store i32 17, i32* %1303
  %1304 = load i64, i64* %RBP
  %1305 = sub i64 %1304, 12
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 3
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1305 to i32*
  %1309 = load i32, i32* %1308
  %1310 = zext i32 %1309 to i64
  store i64 %1310, i64* %RDI, align 8, !tbaa !2428
  %1311 = load i64, i64* %PC
  %1312 = sub i64 %1311, 934
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 5
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 5
  store i64 %1316, i64* %PC
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1318 = load i64, i64* %1317, align 8, !tbaa !2428
  %1319 = add i64 %1318, -8
  %1320 = inttoptr i64 %1319 to i64*
  store i64 %1314, i64* %1320
  store i64 %1319, i64* %1317, align 8, !tbaa !2428
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1312, i64* %1321, align 8, !tbaa !2428
  %1322 = load i64, i64* %PC
  %1323 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1322, %struct.Memory* %MEMORY.0)
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 8
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 4
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i64*
  %1329 = load i64, i64* %1328
  store i64 %1329, i64* %RAX, align 8, !tbaa !2428
  %1330 = load i64, i64* %RAX
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 3
  store i64 %1332, i64* %PC
  store i64 %1330, i64* %RCX, align 8, !tbaa !2428
  %1333 = load i64, i64* %RCX
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 4
  store i64 %1335, i64* %PC
  %1336 = add i64 4, %1333
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1337 = icmp ult i64 %1336, %1333
  %1338 = icmp ult i64 %1336, 4
  %1339 = or i1 %1337, %1338
  %1340 = zext i1 %1339 to i8
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1340, i8* %1341, align 1, !tbaa !2432
  %1342 = trunc i64 %1336 to i32
  %1343 = and i32 %1342, 255
  %1344 = call i32 @llvm.ctpop.i32(i32 %1343) #16
  %1345 = trunc i32 %1344 to i8
  %1346 = and i8 %1345, 1
  %1347 = xor i8 %1346, 1
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1347, i8* %1348, align 1, !tbaa !2446
  %1349 = xor i64 4, %1333
  %1350 = xor i64 %1349, %1336
  %1351 = lshr i64 %1350, 4
  %1352 = trunc i64 %1351 to i8
  %1353 = and i8 %1352, 1
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1353, i8* %1354, align 1, !tbaa !2447
  %1355 = icmp eq i64 %1336, 0
  %1356 = zext i1 %1355 to i8
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1356, i8* %1357, align 1, !tbaa !2448
  %1358 = lshr i64 %1336, 63
  %1359 = trunc i64 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1359, i8* %1360, align 1, !tbaa !2449
  %1361 = lshr i64 %1333, 63
  %1362 = xor i64 %1358, %1361
  %1363 = add nuw nsw i64 %1362, %1358
  %1364 = icmp eq i64 %1363, 2
  %1365 = zext i1 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1365, i8* %1366, align 1, !tbaa !2450
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 8
  %1369 = load i64, i64* %RCX
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 4
  store i64 %1371, i64* %PC
  %1372 = inttoptr i64 %1368 to i64*
  store i64 %1369, i64* %1372
  %1373 = load i64, i64* %RAX
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 3
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i32*
  %1377 = load i32, i32* %1376
  %1378 = sext i32 %1377 to i64
  store i64 %1378, i64* %RAX, align 8, !tbaa !2428
  %1379 = load i64, i64* %RAX
  %1380 = mul i64 %1379, 8
  %1381 = add i64 %1380, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 8
  store i64 %1383, i64* %PC
  %1384 = inttoptr i64 %1381 to i64*
  %1385 = load i64, i64* %1384
  store i64 %1385, i64* %RAX, align 8, !tbaa !2428
  %1386 = load i64, i64* %RBP
  %1387 = sub i64 %1386, 40
  %1388 = load i64, i64* %RAX
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 4
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1387 to i64*
  store i64 %1388, i64* %1391
  %1392 = load i64, i64* %PC
  %1393 = sub i64 %1392, 851
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 5
  store i64 %1395, i64* %PC
  %1396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1393, i64* %1396, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_400ad9, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %1826, %block_400ad9 ], [ %1432, %block_400622 ], [ %1323, %block_4008ac ], [ %1225, %block_4007b2 ], [ %1073, %block_400b36 ], [ %975, %block_4006b8 ], [ %151, %block_400a6e ], [ %870, %block_4005f0 ], [ %53, %block_400974 ], [ %641, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %739, %block_400654 ], [ %1530, %block_400aa0 ], [ %1628, %block_40071c ], [ %1726, %block_400816 ], [ %1959, %block_4009a6 ]
  %1397 = load i64, i64* %RBP
  %1398 = sub i64 %1397, 40
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = inttoptr i64 %1398 to i64*
  %1402 = load i64, i64* %1401
  store i64 %1402, i64* %RAX, align 8, !tbaa !2428
  %1403 = load i64, i64* %RAX
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 2
  store i64 %1405, i64* %PC
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1403, i64* %1406, align 8, !tbaa !2428
  %1407 = load i64, i64* %PC
  switch i64 %1407, label %2033 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 7
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  store i32 4, i32* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 12
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = sub i64 %1420, 284
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  store i64 %1425, i64* %PC
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1427 = load i64, i64* %1426, align 8, !tbaa !2428
  %1428 = add i64 %1427, -8
  %1429 = inttoptr i64 %1428 to i64*
  store i64 %1423, i64* %1429
  store i64 %1428, i64* %1426, align 8, !tbaa !2428
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1421, i64* %1430, align 8, !tbaa !2428
  %1431 = load i64, i64* %PC
  %1432 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1431, %struct.Memory* %MEMORY.0)
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 8
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RAX
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 3
  store i64 %1441, i64* %PC
  store i64 %1439, i64* %RCX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RCX
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 4
  store i64 %1444, i64* %PC
  %1445 = add i64 4, %1442
  store i64 %1445, i64* %RCX, align 8, !tbaa !2428
  %1446 = icmp ult i64 %1445, %1442
  %1447 = icmp ult i64 %1445, 4
  %1448 = or i1 %1446, %1447
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1449, i8* %1450, align 1, !tbaa !2432
  %1451 = trunc i64 %1445 to i32
  %1452 = and i32 %1451, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #16
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = xor i64 4, %1442
  %1459 = xor i64 %1458, %1445
  %1460 = lshr i64 %1459, 4
  %1461 = trunc i64 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = icmp eq i64 %1445, 0
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i64 %1445, 63
  %1468 = trunc i64 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1468, i8* %1469, align 1, !tbaa !2449
  %1470 = lshr i64 %1442, 63
  %1471 = xor i64 %1467, %1470
  %1472 = add nuw nsw i64 %1471, %1467
  %1473 = icmp eq i64 %1472, 2
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1474, i8* %1475, align 1, !tbaa !2450
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 8
  %1478 = load i64, i64* %RCX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1477 to i64*
  store i64 %1478, i64* %1481
  %1482 = load i64, i64* %RAX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i32*
  %1486 = load i32, i32* %1485
  %1487 = sext i32 %1486 to i64
  store i64 %1487, i64* %RAX, align 8, !tbaa !2428
  %1488 = load i64, i64* %RAX
  %1489 = mul i64 %1488, 8
  %1490 = add i64 %1489, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 8
  store i64 %1492, i64* %PC
  %1493 = inttoptr i64 %1490 to i64*
  %1494 = load i64, i64* %1493
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 40
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1496 to i64*
  store i64 %1497, i64* %1500
  %1501 = load i64, i64* %PC
  %1502 = sub i64 %1501, 201
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1502, i64* %1505, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 7
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  store i32 27, i32* %1510
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 12
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 3
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = zext i32 %1516 to i64
  store i64 %1517, i64* %RDI, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = sub i64 %1518, 1434
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 5
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1525 = load i64, i64* %1524, align 8, !tbaa !2428
  %1526 = add i64 %1525, -8
  %1527 = inttoptr i64 %1526 to i64*
  store i64 %1521, i64* %1527
  store i64 %1526, i64* %1524, align 8, !tbaa !2428
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1519, i64* %1528, align 8, !tbaa !2428
  %1529 = load i64, i64* %PC
  %1530 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1529, %struct.Memory* %MEMORY.0)
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 8
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RAX
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 3
  store i64 %1539, i64* %PC
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RCX
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 4
  store i64 %1542, i64* %PC
  %1543 = add i64 4, %1540
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = icmp ult i64 %1543, %1540
  %1545 = icmp ult i64 %1543, 4
  %1546 = or i1 %1544, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1547, i8* %1548, align 1, !tbaa !2432
  %1549 = trunc i64 %1543 to i32
  %1550 = and i32 %1549, 255
  %1551 = call i32 @llvm.ctpop.i32(i32 %1550) #16
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1554, i8* %1555, align 1, !tbaa !2446
  %1556 = xor i64 4, %1540
  %1557 = xor i64 %1556, %1543
  %1558 = lshr i64 %1557, 4
  %1559 = trunc i64 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1560, i8* %1561, align 1, !tbaa !2447
  %1562 = icmp eq i64 %1543, 0
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1563, i8* %1564, align 1, !tbaa !2448
  %1565 = lshr i64 %1543, 63
  %1566 = trunc i64 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1566, i8* %1567, align 1, !tbaa !2449
  %1568 = lshr i64 %1540, 63
  %1569 = xor i64 %1565, %1568
  %1570 = add nuw nsw i64 %1569, %1565
  %1571 = icmp eq i64 %1570, 2
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1572, i8* %1573, align 1, !tbaa !2450
  %1574 = load i64, i64* %RBP
  %1575 = sub i64 %1574, 8
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1575 to i64*
  store i64 %1576, i64* %1579
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1580 to i32*
  %1584 = load i32, i32* %1583
  %1585 = sext i32 %1584 to i64
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i64, i64* %RAX
  %1587 = mul i64 %1586, 8
  %1588 = add i64 %1587, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 8
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1588 to i64*
  %1592 = load i64, i64* %1591
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 40
  %1595 = load i64, i64* %RAX
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598
  %1599 = load i64, i64* %PC
  %1600 = sub i64 %1599, 1351
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1603, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 7
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  store i32 9, i32* %1608
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 12
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 3
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = zext i32 %1614 to i64
  store i64 %1615, i64* %RDI, align 8, !tbaa !2428
  %1616 = load i64, i64* %PC
  %1617 = sub i64 %1616, 534
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 5
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1623 = load i64, i64* %1622, align 8, !tbaa !2428
  %1624 = add i64 %1623, -8
  %1625 = inttoptr i64 %1624 to i64*
  store i64 %1619, i64* %1625
  store i64 %1624, i64* %1622, align 8, !tbaa !2428
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1617, i64* %1626, align 8, !tbaa !2428
  %1627 = load i64, i64* %PC
  %1628 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1627, %struct.Memory* %MEMORY.0)
  %1629 = load i64, i64* %RBP
  %1630 = sub i64 %1629, 8
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1630 to i64*
  %1634 = load i64, i64* %1633
  store i64 %1634, i64* %RAX, align 8, !tbaa !2428
  %1635 = load i64, i64* %RAX
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  store i64 %1635, i64* %RCX, align 8, !tbaa !2428
  %1638 = load i64, i64* %RCX
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 4
  store i64 %1640, i64* %PC
  %1641 = add i64 4, %1638
  store i64 %1641, i64* %RCX, align 8, !tbaa !2428
  %1642 = icmp ult i64 %1641, %1638
  %1643 = icmp ult i64 %1641, 4
  %1644 = or i1 %1642, %1643
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1645, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1641 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = xor i64 4, %1638
  %1655 = xor i64 %1654, %1641
  %1656 = lshr i64 %1655, 4
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1658, i8* %1659, align 1, !tbaa !2447
  %1660 = icmp eq i64 %1641, 0
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1661, i8* %1662, align 1, !tbaa !2448
  %1663 = lshr i64 %1641, 63
  %1664 = trunc i64 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1664, i8* %1665, align 1, !tbaa !2449
  %1666 = lshr i64 %1638, 63
  %1667 = xor i64 %1663, %1666
  %1668 = add nuw nsw i64 %1667, %1663
  %1669 = icmp eq i64 %1668, 2
  %1670 = zext i1 %1669 to i8
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1670, i8* %1671, align 1, !tbaa !2450
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 8
  %1674 = load i64, i64* %RCX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %RAX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 3
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1678 to i32*
  %1682 = load i32, i32* %1681
  %1683 = sext i32 %1682 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RAX
  %1685 = mul i64 %1684, 8
  %1686 = add i64 %1685, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 8
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 40
  %1693 = load i64, i64* %RAX
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 4
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1692 to i64*
  store i64 %1693, i64* %1696
  %1697 = load i64, i64* %PC
  %1698 = sub i64 %1697, 451
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1698, i64* %1701, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 12
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 7
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  store i32 14, i32* %1706
  %1707 = load i64, i64* %RBP
  %1708 = sub i64 %1707, 12
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 3
  store i64 %1710, i64* %PC
  %1711 = inttoptr i64 %1708 to i32*
  %1712 = load i32, i32* %1711
  %1713 = zext i32 %1712 to i64
  store i64 %1713, i64* %RDI, align 8, !tbaa !2428
  %1714 = load i64, i64* %PC
  %1715 = sub i64 %1714, 784
  %1716 = load i64, i64* %PC
  %1717 = add i64 %1716, 5
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  store i64 %1719, i64* %PC
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1721 = load i64, i64* %1720, align 8, !tbaa !2428
  %1722 = add i64 %1721, -8
  %1723 = inttoptr i64 %1722 to i64*
  store i64 %1717, i64* %1723
  store i64 %1722, i64* %1720, align 8, !tbaa !2428
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1715, i64* %1724, align 8, !tbaa !2428
  %1725 = load i64, i64* %PC
  %1726 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1725, %struct.Memory* %MEMORY.0)
  %1727 = load i64, i64* %RBP
  %1728 = sub i64 %1727, 8
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 4
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1728 to i64*
  %1732 = load i64, i64* %1731
  store i64 %1732, i64* %RAX, align 8, !tbaa !2428
  %1733 = load i64, i64* %RAX
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 3
  store i64 %1735, i64* %PC
  store i64 %1733, i64* %RCX, align 8, !tbaa !2428
  %1736 = load i64, i64* %RCX
  %1737 = load i64, i64* %PC
  %1738 = add i64 %1737, 4
  store i64 %1738, i64* %PC
  %1739 = add i64 4, %1736
  store i64 %1739, i64* %RCX, align 8, !tbaa !2428
  %1740 = icmp ult i64 %1739, %1736
  %1741 = icmp ult i64 %1739, 4
  %1742 = or i1 %1740, %1741
  %1743 = zext i1 %1742 to i8
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1743, i8* %1744, align 1, !tbaa !2432
  %1745 = trunc i64 %1739 to i32
  %1746 = and i32 %1745, 255
  %1747 = call i32 @llvm.ctpop.i32(i32 %1746) #16
  %1748 = trunc i32 %1747 to i8
  %1749 = and i8 %1748, 1
  %1750 = xor i8 %1749, 1
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1750, i8* %1751, align 1, !tbaa !2446
  %1752 = xor i64 4, %1736
  %1753 = xor i64 %1752, %1739
  %1754 = lshr i64 %1753, 4
  %1755 = trunc i64 %1754 to i8
  %1756 = and i8 %1755, 1
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1756, i8* %1757, align 1, !tbaa !2447
  %1758 = icmp eq i64 %1739, 0
  %1759 = zext i1 %1758 to i8
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1759, i8* %1760, align 1, !tbaa !2448
  %1761 = lshr i64 %1739, 63
  %1762 = trunc i64 %1761 to i8
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1762, i8* %1763, align 1, !tbaa !2449
  %1764 = lshr i64 %1736, 63
  %1765 = xor i64 %1761, %1764
  %1766 = add nuw nsw i64 %1765, %1761
  %1767 = icmp eq i64 %1766, 2
  %1768 = zext i1 %1767 to i8
  %1769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1768, i8* %1769, align 1, !tbaa !2450
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 8
  %1772 = load i64, i64* %RCX
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 4
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1771 to i64*
  store i64 %1772, i64* %1775
  %1776 = load i64, i64* %RAX
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 3
  store i64 %1778, i64* %PC
  %1779 = inttoptr i64 %1776 to i32*
  %1780 = load i32, i32* %1779
  %1781 = sext i32 %1780 to i64
  store i64 %1781, i64* %RAX, align 8, !tbaa !2428
  %1782 = load i64, i64* %RAX
  %1783 = mul i64 %1782, 8
  %1784 = add i64 %1783, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 8
  store i64 %1786, i64* %PC
  %1787 = inttoptr i64 %1784 to i64*
  %1788 = load i64, i64* %1787
  store i64 %1788, i64* %RAX, align 8, !tbaa !2428
  %1789 = load i64, i64* %RBP
  %1790 = sub i64 %1789, 40
  %1791 = load i64, i64* %RAX
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 4
  store i64 %1793, i64* %PC
  %1794 = inttoptr i64 %1790 to i64*
  store i64 %1791, i64* %1794
  %1795 = load i64, i64* %PC
  %1796 = sub i64 %1795, 701
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1796, i64* %1799, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 12
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 7
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i32*
  store i32 19, i32* %1804
  %1805 = load i64, i64* %PC
  %1806 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1805, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1806

block_400ad9:                                     ; preds = %block_400ad2, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400ad2 ]
  %1807 = load i64, i64* %RBP
  %1808 = sub i64 %1807, 12
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 3
  store i64 %1810, i64* %PC
  %1811 = inttoptr i64 %1808 to i32*
  %1812 = load i32, i32* %1811
  %1813 = zext i32 %1812 to i64
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1814 = load i64, i64* %PC
  %1815 = sub i64 %1814, 1484
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 5
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  store i64 %1819, i64* %PC
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1821 = load i64, i64* %1820, align 8, !tbaa !2428
  %1822 = add i64 %1821, -8
  %1823 = inttoptr i64 %1822 to i64*
  store i64 %1817, i64* %1823
  store i64 %1822, i64* %1820, align 8, !tbaa !2428
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1815, i64* %1824, align 8, !tbaa !2428
  %1825 = load i64, i64* %PC
  %1826 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1825, %struct.Memory* %MEMORY.1)
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 8
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 4
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1828 to i64*
  %1832 = load i64, i64* %1831
  store i64 %1832, i64* %RAX, align 8, !tbaa !2428
  %1833 = load i64, i64* %RAX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 3
  store i64 %1835, i64* %PC
  store i64 %1833, i64* %RCX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RCX
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 4
  store i64 %1838, i64* %PC
  %1839 = add i64 4, %1836
  store i64 %1839, i64* %RCX, align 8, !tbaa !2428
  %1840 = icmp ult i64 %1839, %1836
  %1841 = icmp ult i64 %1839, 4
  %1842 = or i1 %1840, %1841
  %1843 = zext i1 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1843, i8* %1844, align 1, !tbaa !2432
  %1845 = trunc i64 %1839 to i32
  %1846 = and i32 %1845, 255
  %1847 = call i32 @llvm.ctpop.i32(i32 %1846) #16
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = xor i8 %1849, 1
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1850, i8* %1851, align 1, !tbaa !2446
  %1852 = xor i64 4, %1836
  %1853 = xor i64 %1852, %1839
  %1854 = lshr i64 %1853, 4
  %1855 = trunc i64 %1854 to i8
  %1856 = and i8 %1855, 1
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1856, i8* %1857, align 1, !tbaa !2447
  %1858 = icmp eq i64 %1839, 0
  %1859 = zext i1 %1858 to i8
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1859, i8* %1860, align 1, !tbaa !2448
  %1861 = lshr i64 %1839, 63
  %1862 = trunc i64 %1861 to i8
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1862, i8* %1863, align 1, !tbaa !2449
  %1864 = lshr i64 %1836, 63
  %1865 = xor i64 %1861, %1864
  %1866 = add nuw nsw i64 %1865, %1861
  %1867 = icmp eq i64 %1866, 2
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1868, i8* %1869, align 1, !tbaa !2450
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 8
  %1872 = load i64, i64* %RCX
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1871 to i64*
  store i64 %1872, i64* %1875
  %1876 = load i64, i64* %RAX
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 3
  store i64 %1878, i64* %PC
  %1879 = inttoptr i64 %1876 to i32*
  %1880 = load i32, i32* %1879
  %1881 = sext i32 %1880 to i64
  store i64 %1881, i64* %RAX, align 8, !tbaa !2428
  %1882 = load i64, i64* %RAX
  %1883 = mul i64 %1882, 8
  %1884 = add i64 %1883, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 8
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i64*
  %1888 = load i64, i64* %1887
  store i64 %1888, i64* %RAX, align 8, !tbaa !2428
  %1889 = load i64, i64* %RBP
  %1890 = sub i64 %1889, 40
  %1891 = load i64, i64* %RAX
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 4
  store i64 %1893, i64* %PC
  %1894 = inttoptr i64 %1890 to i64*
  store i64 %1891, i64* %1894
  %1895 = load i64, i64* %PC
  %1896 = sub i64 %1895, 1401
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 5
  store i64 %1898, i64* %PC
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1896, i64* %1899, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %1900 = load i64, i64* %RBP
  %1901 = sub i64 %1900, 12
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 7
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i32*
  store i32 1, i32* %1904
  %1905 = load i64, i64* %PC
  %1906 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1905, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1906

block_400a0a:                                     ; preds = %block_400586
  %1907 = load i64, i64* %RBP
  %1908 = sub i64 %1907, 12
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 7
  store i64 %1910, i64* %PC
  %1911 = inttoptr i64 %1908 to i32*
  store i32 24, i32* %1911
  %1912 = load i64, i64* %PC
  %1913 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1912, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1913

block_400686:                                     ; preds = %block_400586
  %1914 = load i64, i64* %RBP
  %1915 = sub i64 %1914, 12
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 7
  store i64 %1917, i64* %PC
  %1918 = inttoptr i64 %1915 to i32*
  store i32 6, i32* %1918
  %1919 = load i64, i64* %PC
  %1920 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1919, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1920

block_400b04:                                     ; preds = %block_400586
  %1921 = load i64, i64* %RBP
  %1922 = sub i64 %1921, 12
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 7
  store i64 %1924, i64* %PC
  %1925 = inttoptr i64 %1922 to i32*
  store i32 29, i32* %1925
  %1926 = load i64, i64* %PC
  %1927 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1926, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1927

block_400780:                                     ; preds = %block_400586
  %1928 = load i64, i64* %RBP
  %1929 = sub i64 %1928, 12
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 7
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to i32*
  store i32 11, i32* %1932
  %1933 = load i64, i64* %PC
  %1934 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1933, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1934

block_4009a6:                                     ; preds = %block_400586
  %1935 = load i64, i64* %RBP
  %1936 = sub i64 %1935, 12
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 7
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i32*
  store i32 22, i32* %1939
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 12
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 3
  store i64 %1943, i64* %PC
  %1944 = inttoptr i64 %1941 to i32*
  %1945 = load i32, i32* %1944
  %1946 = zext i32 %1945 to i64
  store i64 %1946, i64* %RDI, align 8, !tbaa !2428
  %1947 = load i64, i64* %PC
  %1948 = sub i64 %1947, 1184
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 5
  store i64 %1952, i64* %PC
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1954 = load i64, i64* %1953, align 8, !tbaa !2428
  %1955 = add i64 %1954, -8
  %1956 = inttoptr i64 %1955 to i64*
  store i64 %1950, i64* %1956
  store i64 %1955, i64* %1953, align 8, !tbaa !2428
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1948, i64* %1957, align 8, !tbaa !2428
  %1958 = load i64, i64* %PC
  %1959 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1958, %struct.Memory* %MEMORY.0)
  %1960 = load i64, i64* %RBP
  %1961 = sub i64 %1960, 8
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 4
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 3
  store i64 %1968, i64* %PC
  store i64 %1966, i64* %RCX, align 8, !tbaa !2428
  %1969 = load i64, i64* %RCX
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 4
  store i64 %1971, i64* %PC
  %1972 = add i64 4, %1969
  store i64 %1972, i64* %RCX, align 8, !tbaa !2428
  %1973 = icmp ult i64 %1972, %1969
  %1974 = icmp ult i64 %1972, 4
  %1975 = or i1 %1973, %1974
  %1976 = zext i1 %1975 to i8
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1976, i8* %1977, align 1, !tbaa !2432
  %1978 = trunc i64 %1972 to i32
  %1979 = and i32 %1978, 255
  %1980 = call i32 @llvm.ctpop.i32(i32 %1979) #16
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1983, i8* %1984, align 1, !tbaa !2446
  %1985 = xor i64 4, %1969
  %1986 = xor i64 %1985, %1972
  %1987 = lshr i64 %1986, 4
  %1988 = trunc i64 %1987 to i8
  %1989 = and i8 %1988, 1
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1989, i8* %1990, align 1, !tbaa !2447
  %1991 = icmp eq i64 %1972, 0
  %1992 = zext i1 %1991 to i8
  %1993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1992, i8* %1993, align 1, !tbaa !2448
  %1994 = lshr i64 %1972, 63
  %1995 = trunc i64 %1994 to i8
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1995, i8* %1996, align 1, !tbaa !2449
  %1997 = lshr i64 %1969, 63
  %1998 = xor i64 %1994, %1997
  %1999 = add nuw nsw i64 %1998, %1994
  %2000 = icmp eq i64 %1999, 2
  %2001 = zext i1 %2000 to i8
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2001, i8* %2002, align 1, !tbaa !2450
  %2003 = load i64, i64* %RBP
  %2004 = sub i64 %2003, 8
  %2005 = load i64, i64* %RCX
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2004 to i64*
  store i64 %2005, i64* %2008
  %2009 = load i64, i64* %RAX
  %2010 = load i64, i64* %PC
  %2011 = add i64 %2010, 3
  store i64 %2011, i64* %PC
  %2012 = inttoptr i64 %2009 to i32*
  %2013 = load i32, i32* %2012
  %2014 = sext i32 %2013 to i64
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %2015 = load i64, i64* %RAX
  %2016 = mul i64 %2015, 8
  %2017 = add i64 %2016, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2018 = load i64, i64* %PC
  %2019 = add i64 %2018, 8
  store i64 %2019, i64* %PC
  %2020 = inttoptr i64 %2017 to i64*
  %2021 = load i64, i64* %2020
  store i64 %2021, i64* %RAX, align 8, !tbaa !2428
  %2022 = load i64, i64* %RBP
  %2023 = sub i64 %2022, 40
  %2024 = load i64, i64* %RAX
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 4
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2023 to i64*
  store i64 %2024, i64* %2027
  %2028 = load i64, i64* %PC
  %2029 = sub i64 %2028, 1101
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 5
  store i64 %2031, i64* %PC
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2029, i64* %2032, align 8, !tbaa !2428
  br label %block_400586

; <label>:2033:                                   ; preds = %block_400586
  %2034 = load i64, i64* %PC
  %2035 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2034, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2035
}

; Function Attrs: noinline
define %struct.Memory* @sub_400530_eval(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400530:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 48
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 48
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 48, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i64, i64* %RDI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 12
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  store i32 0, i32* %79
  br label %block_400543

block_40097b:                                     ; preds = %block_40056b, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.32, %block_400974 ], [ %MEMORY.10, %block_40056b ]
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 12
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = load i64, i64* %PC
  %88 = sub i64 %87, 1134
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %90, i64* %96
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %88, i64* %97, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %98, %struct.Memory* %MEMORY.0)
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 8
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %109 = load i64, i64* %RCX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = add i64 4, %109
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = icmp ult i64 %112, %109
  %114 = icmp ult i64 %112, 4
  %115 = or i1 %113, %114
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %116, i8* %117, align 1, !tbaa !2432
  %118 = trunc i64 %112 to i32
  %119 = and i32 %118, 255
  %120 = call i32 @llvm.ctpop.i32(i32 %119) #16
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %123, i8* %124, align 1, !tbaa !2446
  %125 = xor i64 4, %109
  %126 = xor i64 %125, %112
  %127 = lshr i64 %126, 4
  %128 = trunc i64 %127 to i8
  %129 = and i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = icmp eq i64 %112, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2448
  %134 = lshr i64 %112, 63
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2449
  %137 = lshr i64 %109, 63
  %138 = xor i64 %134, %137
  %139 = add nuw nsw i64 %138, %134
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2450
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 8
  %145 = load i64, i64* %RCX
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %148
  %149 = load i64, i64* %RAX
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = load i64, i64* %RAX
  %156 = mul i64 %155, 8
  %157 = add i64 %156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 40
  %164 = load i64, i64* %RAX
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %163 to i64*
  store i64 %164, i64* %167
  %168 = load i64, i64* %PC
  %169 = sub i64 %168, 1051
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %169, i64* %172, align 8, !tbaa !2428
  br label %block_400586

block_40087a:                                     ; preds = %block_400586
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 16, i32* %177
  br label %block_400881

block_4005f7:                                     ; preds = %block_40056b, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.32, %block_4005f0 ], [ %MEMORY.10, %block_40056b ]
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 12
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %PC
  %186 = sub i64 %185, 234
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  store i64 %190, i64* %PC
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %192 = load i64, i64* %191, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %188, i64* %194
  store i64 %193, i64* %191, align 8, !tbaa !2428
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %186, i64* %195, align 8, !tbaa !2428
  %196 = load i64, i64* %PC
  %197 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %196, %struct.Memory* %MEMORY.1)
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 8
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %207 = load i64, i64* %RCX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = add i64 4, %207
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = icmp ult i64 %210, %207
  %212 = icmp ult i64 %210, 4
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = trunc i64 %210 to i32
  %217 = and i32 %216, 255
  %218 = call i32 @llvm.ctpop.i32(i32 %217) #16
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %221, i8* %222, align 1, !tbaa !2446
  %223 = xor i64 4, %207
  %224 = xor i64 %223, %210
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %210, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %210, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i64 %207, 63
  %236 = xor i64 %232, %235
  %237 = add nuw nsw i64 %236, %232
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 8
  %243 = load i64, i64* %RCX
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %242 to i64*
  store i64 %243, i64* %246
  %247 = load i64, i64* %RAX
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 3
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = sext i32 %251 to i64
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = load i64, i64* %RAX
  %254 = mul i64 %253, 8
  %255 = add i64 %254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 8
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 40
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %261 to i64*
  store i64 %262, i64* %265
  %266 = load i64, i64* %PC
  %267 = sub i64 %266, 151
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %267, i64* %270, align 8, !tbaa !2428
  br label %block_400586

block_400974:                                     ; preds = %block_400586
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 21, i32* %275
  br label %block_40097b

block_4006f1:                                     ; preds = %block_40056b, %block_4006ea
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.32, %block_4006ea ], [ %MEMORY.10, %block_40056b ]
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 12
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %277 to i32*
  %281 = load i32, i32* %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RDI, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = sub i64 %283, 484
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %286, i64* %292
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %284, i64* %293, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %294, %struct.Memory* %MEMORY.2)
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 8
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %305 = load i64, i64* %RCX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = add i64 4, %305
  store i64 %308, i64* %RCX, align 8, !tbaa !2428
  %309 = icmp ult i64 %308, %305
  %310 = icmp ult i64 %308, 4
  %311 = or i1 %309, %310
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %312, i8* %313, align 1, !tbaa !2432
  %314 = trunc i64 %308 to i32
  %315 = and i32 %314, 255
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %319, i8* %320, align 1, !tbaa !2446
  %321 = xor i64 4, %305
  %322 = xor i64 %321, %308
  %323 = lshr i64 %322, 4
  %324 = trunc i64 %323 to i8
  %325 = and i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = icmp eq i64 %308, 0
  %328 = zext i1 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %328, i8* %329, align 1, !tbaa !2448
  %330 = lshr i64 %308, 63
  %331 = trunc i64 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %331, i8* %332, align 1, !tbaa !2449
  %333 = lshr i64 %305, 63
  %334 = xor i64 %330, %333
  %335 = add nuw nsw i64 %334, %330
  %336 = icmp eq i64 %335, 2
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 8
  %341 = load i64, i64* %RCX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %340 to i64*
  store i64 %341, i64* %344
  %345 = load i64, i64* %RAX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = sext i32 %349 to i64
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = mul i64 %351, 8
  %353 = add i64 %352, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 8
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %RAX, align 8, !tbaa !2428
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 40
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %359 to i64*
  store i64 %360, i64* %363
  %364 = load i64, i64* %PC
  %365 = sub i64 %364, 401
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %365, i64* %368, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 26, i32* %373
  br label %block_400a75

block_4007eb:                                     ; preds = %block_40056b, %block_4007e4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.32, %block_4007e4 ], [ %MEMORY.10, %block_40056b ]
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 12
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 3
  store i64 %377, i64* %PC
  %378 = inttoptr i64 %375 to i32*
  %379 = load i32, i32* %378
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RDI, align 8, !tbaa !2428
  %381 = load i64, i64* %PC
  %382 = sub i64 %381, 734
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 5
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 5
  store i64 %386, i64* %PC
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %388 = load i64, i64* %387, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %384, i64* %390
  store i64 %389, i64* %387, align 8, !tbaa !2428
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %382, i64* %391, align 8, !tbaa !2428
  %392 = load i64, i64* %PC
  %393 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %392, %struct.Memory* %MEMORY.3)
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 8
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 3
  store i64 %402, i64* %PC
  store i64 %400, i64* %RCX, align 8, !tbaa !2428
  %403 = load i64, i64* %RCX
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = add i64 4, %403
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %407 = icmp ult i64 %406, %403
  %408 = icmp ult i64 %406, 4
  %409 = or i1 %407, %408
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %410, i8* %411, align 1, !tbaa !2432
  %412 = trunc i64 %406 to i32
  %413 = and i32 %412, 255
  %414 = call i32 @llvm.ctpop.i32(i32 %413) #16
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = xor i8 %416, 1
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %417, i8* %418, align 1, !tbaa !2446
  %419 = xor i64 4, %403
  %420 = xor i64 %419, %406
  %421 = lshr i64 %420, 4
  %422 = trunc i64 %421 to i8
  %423 = and i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %423, i8* %424, align 1, !tbaa !2447
  %425 = icmp eq i64 %406, 0
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %426, i8* %427, align 1, !tbaa !2448
  %428 = lshr i64 %406, 63
  %429 = trunc i64 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %429, i8* %430, align 1, !tbaa !2449
  %431 = lshr i64 %403, 63
  %432 = xor i64 %428, %431
  %433 = add nuw nsw i64 %432, %428
  %434 = icmp eq i64 %433, 2
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %435, i8* %436, align 1, !tbaa !2450
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 8
  %439 = load i64, i64* %RCX
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 4
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %438 to i64*
  store i64 %439, i64* %442
  %443 = load i64, i64* %RAX
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 3
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i32*
  %447 = load i32, i32* %446
  %448 = sext i32 %447 to i64
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = mul i64 %449, 8
  %451 = add i64 %450, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 8
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to i64*
  %455 = load i64, i64* %454
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 40
  %458 = load i64, i64* %RAX
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %457 to i64*
  store i64 %458, i64* %461
  %462 = load i64, i64* %PC
  %463 = sub i64 %462, 651
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 5
  store i64 %465, i64* %PC
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %463, i64* %466, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  store i32 8, i32* %471
  br label %block_4006f1

block_400b68:                                     ; preds = %block_400586
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 12
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 7
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  store i32 31, i32* %476
  br label %block_400b6f

block_4008e5:                                     ; preds = %block_40056b, %block_4008de
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.32, %block_4008de ], [ %MEMORY.10, %block_40056b ]
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 12
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 3
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to i32*
  %482 = load i32, i32* %481
  %483 = zext i32 %482 to i64
  store i64 %483, i64* %RDI, align 8, !tbaa !2428
  %484 = load i64, i64* %PC
  %485 = sub i64 %484, 984
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 5
  store i64 %489, i64* %PC
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %491 = load i64, i64* %490, align 8, !tbaa !2428
  %492 = add i64 %491, -8
  %493 = inttoptr i64 %492 to i64*
  store i64 %487, i64* %493
  store i64 %492, i64* %490, align 8, !tbaa !2428
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %485, i64* %494, align 8, !tbaa !2428
  %495 = load i64, i64* %PC
  %496 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %495, %struct.Memory* %MEMORY.4)
  %497 = load i64, i64* %RBP
  %498 = sub i64 %497, 8
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 4
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %503 = load i64, i64* %RAX
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 3
  store i64 %505, i64* %PC
  store i64 %503, i64* %RCX, align 8, !tbaa !2428
  %506 = load i64, i64* %RCX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 4
  store i64 %508, i64* %PC
  %509 = add i64 4, %506
  store i64 %509, i64* %RCX, align 8, !tbaa !2428
  %510 = icmp ult i64 %509, %506
  %511 = icmp ult i64 %509, 4
  %512 = or i1 %510, %511
  %513 = zext i1 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %513, i8* %514, align 1, !tbaa !2432
  %515 = trunc i64 %509 to i32
  %516 = and i32 %515, 255
  %517 = call i32 @llvm.ctpop.i32(i32 %516) #16
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %520, i8* %521, align 1, !tbaa !2446
  %522 = xor i64 4, %506
  %523 = xor i64 %522, %509
  %524 = lshr i64 %523, 4
  %525 = trunc i64 %524 to i8
  %526 = and i8 %525, 1
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %526, i8* %527, align 1, !tbaa !2447
  %528 = icmp eq i64 %509, 0
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %529, i8* %530, align 1, !tbaa !2448
  %531 = lshr i64 %509, 63
  %532 = trunc i64 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %532, i8* %533, align 1, !tbaa !2449
  %534 = lshr i64 %506, 63
  %535 = xor i64 %531, %534
  %536 = add nuw nsw i64 %535, %531
  %537 = icmp eq i64 %536, 2
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %538, i8* %539, align 1, !tbaa !2450
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 8
  %542 = load i64, i64* %RCX
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %541 to i64*
  store i64 %542, i64* %545
  %546 = load i64, i64* %RAX
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 3
  store i64 %548, i64* %PC
  %549 = inttoptr i64 %546 to i32*
  %550 = load i32, i32* %549
  %551 = sext i32 %550 to i64
  store i64 %551, i64* %RAX, align 8, !tbaa !2428
  %552 = load i64, i64* %RAX
  %553 = mul i64 %552, 8
  %554 = add i64 %553, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 8
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to i64*
  %558 = load i64, i64* %557
  store i64 %558, i64* %RAX, align 8, !tbaa !2428
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 40
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %560 to i64*
  store i64 %561, i64* %564
  %565 = load i64, i64* %PC
  %566 = sub i64 %565, 901
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 5
  store i64 %568, i64* %PC
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %566, i64* %569, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 12
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 7
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %571 to i32*
  store i32 13, i32* %574
  br label %block_4007eb

block_4009df:                                     ; preds = %block_40056b, %block_4009d8
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.32, %block_4009d8 ], [ %MEMORY.10, %block_40056b ]
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 12
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 1234
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %589 = load i64, i64* %588, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %585, i64* %591
  store i64 %590, i64* %588, align 8, !tbaa !2428
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %592, align 8, !tbaa !2428
  %593 = load i64, i64* %PC
  %594 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %593, %struct.Memory* %MEMORY.5)
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 8
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = load i64, i64* %RAX
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RCX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = add i64 4, %604
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = icmp ult i64 %607, %604
  %609 = icmp ult i64 %607, 4
  %610 = or i1 %608, %609
  %611 = zext i1 %610 to i8
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %611, i8* %612, align 1, !tbaa !2432
  %613 = trunc i64 %607 to i32
  %614 = and i32 %613, 255
  %615 = call i32 @llvm.ctpop.i32(i32 %614) #16
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = xor i8 %617, 1
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %618, i8* %619, align 1, !tbaa !2446
  %620 = xor i64 4, %604
  %621 = xor i64 %620, %607
  %622 = lshr i64 %621, 4
  %623 = trunc i64 %622 to i8
  %624 = and i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %624, i8* %625, align 1, !tbaa !2447
  %626 = icmp eq i64 %607, 0
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %627, i8* %628, align 1, !tbaa !2448
  %629 = lshr i64 %607, 63
  %630 = trunc i64 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %630, i8* %631, align 1, !tbaa !2449
  %632 = lshr i64 %604, 63
  %633 = xor i64 %629, %632
  %634 = add nuw nsw i64 %633, %629
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %636, i8* %637, align 1, !tbaa !2450
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 8
  %640 = load i64, i64* %RCX
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %639 to i64*
  store i64 %640, i64* %643
  %644 = load i64, i64* %RAX
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  %648 = load i32, i32* %647
  %649 = sext i32 %648 to i64
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = load i64, i64* %RAX
  %651 = mul i64 %650, 8
  %652 = add i64 %651, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 8
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = load i64, i64* %RBP
  %658 = sub i64 %657, 40
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %658 to i64*
  store i64 %659, i64* %662
  %663 = load i64, i64* %PC
  %664 = sub i64 %663, 1151
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %664, i64* %667, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 12
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 7
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i32*
  store i32 23, i32* %672
  br label %block_4009df

block_400755:                                     ; preds = %block_40056b, %block_40074e
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.32, %block_40074e ], [ %MEMORY.10, %block_40056b ]
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 12
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 3
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %674 to i32*
  %678 = load i32, i32* %677
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %RDI, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  %681 = sub i64 %680, 584
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %687 = load i64, i64* %686, align 8, !tbaa !2428
  %688 = add i64 %687, -8
  %689 = inttoptr i64 %688 to i64*
  store i64 %683, i64* %689
  store i64 %688, i64* %686, align 8, !tbaa !2428
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %681, i64* %690, align 8, !tbaa !2428
  %691 = load i64, i64* %PC
  %692 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %691, %struct.Memory* %MEMORY.6)
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 8
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = load i64, i64* %RAX
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 3
  store i64 %701, i64* %PC
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %702 = load i64, i64* %RCX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = add i64 4, %702
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = icmp ult i64 %705, %702
  %707 = icmp ult i64 %705, 4
  %708 = or i1 %706, %707
  %709 = zext i1 %708 to i8
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %709, i8* %710, align 1, !tbaa !2432
  %711 = trunc i64 %705 to i32
  %712 = and i32 %711, 255
  %713 = call i32 @llvm.ctpop.i32(i32 %712) #16
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %716, i8* %717, align 1, !tbaa !2446
  %718 = xor i64 4, %702
  %719 = xor i64 %718, %705
  %720 = lshr i64 %719, 4
  %721 = trunc i64 %720 to i8
  %722 = and i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %722, i8* %723, align 1, !tbaa !2447
  %724 = icmp eq i64 %705, 0
  %725 = zext i1 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %725, i8* %726, align 1, !tbaa !2448
  %727 = lshr i64 %705, 63
  %728 = trunc i64 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %728, i8* %729, align 1, !tbaa !2449
  %730 = lshr i64 %702, 63
  %731 = xor i64 %727, %730
  %732 = add nuw nsw i64 %731, %727
  %733 = icmp eq i64 %732, 2
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %734, i8* %735, align 1, !tbaa !2450
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 8
  %738 = load i64, i64* %RCX
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %737 to i64*
  store i64 %738, i64* %741
  %742 = load i64, i64* %RAX
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 3
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %742 to i32*
  %746 = load i32, i32* %745
  %747 = sext i32 %746 to i64
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %748 = load i64, i64* %RAX
  %749 = mul i64 %748, 8
  %750 = add i64 %749, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 8
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i64*
  %754 = load i64, i64* %753
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 40
  %757 = load i64, i64* %RAX
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 4
  store i64 %759, i64* %PC
  %760 = inttoptr i64 %756 to i64*
  store i64 %757, i64* %760
  %761 = load i64, i64* %PC
  %762 = sub i64 %761, 501
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 5
  store i64 %764, i64* %PC
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %762, i64* %765, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 12
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 7
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to i32*
  store i32 28, i32* %770
  br label %block_400ad9

block_40084f:                                     ; preds = %block_40056b, %block_400848
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.32, %block_400848 ], [ %MEMORY.10, %block_40056b ]
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 12
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to i32*
  %776 = load i32, i32* %775
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RDI, align 8, !tbaa !2428
  %778 = load i64, i64* %PC
  %779 = sub i64 %778, 834
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 5
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 5
  store i64 %783, i64* %PC
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %785 = load i64, i64* %784, align 8, !tbaa !2428
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %781, i64* %787
  store i64 %786, i64* %784, align 8, !tbaa !2428
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %779, i64* %788, align 8, !tbaa !2428
  %789 = load i64, i64* %PC
  %790 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %789, %struct.Memory* %MEMORY.7)
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 8
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 4
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to i64*
  %796 = load i64, i64* %795
  store i64 %796, i64* %RAX, align 8, !tbaa !2428
  %797 = load i64, i64* %RAX
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  store i64 %797, i64* %RCX, align 8, !tbaa !2428
  %800 = load i64, i64* %RCX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 4
  store i64 %802, i64* %PC
  %803 = add i64 4, %800
  store i64 %803, i64* %RCX, align 8, !tbaa !2428
  %804 = icmp ult i64 %803, %800
  %805 = icmp ult i64 %803, 4
  %806 = or i1 %804, %805
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %807, i8* %808, align 1, !tbaa !2432
  %809 = trunc i64 %803 to i32
  %810 = and i32 %809, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2446
  %816 = xor i64 4, %800
  %817 = xor i64 %816, %803
  %818 = lshr i64 %817, 4
  %819 = trunc i64 %818 to i8
  %820 = and i8 %819, 1
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %820, i8* %821, align 1, !tbaa !2447
  %822 = icmp eq i64 %803, 0
  %823 = zext i1 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %823, i8* %824, align 1, !tbaa !2448
  %825 = lshr i64 %803, 63
  %826 = trunc i64 %825 to i8
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %826, i8* %827, align 1, !tbaa !2449
  %828 = lshr i64 %800, 63
  %829 = xor i64 %825, %828
  %830 = add nuw nsw i64 %829, %825
  %831 = icmp eq i64 %830, 2
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %832, i8* %833, align 1, !tbaa !2450
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 8
  %836 = load i64, i64* %RCX
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 4
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %835 to i64*
  store i64 %836, i64* %839
  %840 = load i64, i64* %RAX
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  %844 = load i32, i32* %843
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %RAX, align 8, !tbaa !2428
  %846 = load i64, i64* %RAX
  %847 = mul i64 %846, 8
  %848 = add i64 %847, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 8
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RAX, align 8, !tbaa !2428
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 40
  %855 = load i64, i64* %RAX
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %854 to i64*
  store i64 %855, i64* %858
  %859 = load i64, i64* %PC
  %860 = sub i64 %859, 751
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 5
  store i64 %862, i64* %PC
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %860, i64* %863, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %864 = load i64, i64* %RBP
  %865 = sub i64 %864, 12
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 7
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %865 to i32*
  store i32 10, i32* %868
  br label %block_400755

block_400949:                                     ; preds = %block_40056b, %block_400942
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.32, %block_400942 ], [ %MEMORY.10, %block_40056b ]
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 12
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 3
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i32*
  %874 = load i32, i32* %873
  %875 = zext i32 %874 to i64
  store i64 %875, i64* %RDI, align 8, !tbaa !2428
  %876 = load i64, i64* %PC
  %877 = sub i64 %876, 1084
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 5
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 5
  store i64 %881, i64* %PC
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %883 = load i64, i64* %882, align 8, !tbaa !2428
  %884 = add i64 %883, -8
  %885 = inttoptr i64 %884 to i64*
  store i64 %879, i64* %885
  store i64 %884, i64* %882, align 8, !tbaa !2428
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %877, i64* %886, align 8, !tbaa !2428
  %887 = load i64, i64* %PC
  %888 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %887, %struct.Memory* %MEMORY.8)
  %889 = load i64, i64* %RBP
  %890 = sub i64 %889, 8
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 4
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i64*
  %894 = load i64, i64* %893
  store i64 %894, i64* %RAX, align 8, !tbaa !2428
  %895 = load i64, i64* %RAX
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 3
  store i64 %897, i64* %PC
  store i64 %895, i64* %RCX, align 8, !tbaa !2428
  %898 = load i64, i64* %RCX
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = add i64 4, %898
  store i64 %901, i64* %RCX, align 8, !tbaa !2428
  %902 = icmp ult i64 %901, %898
  %903 = icmp ult i64 %901, 4
  %904 = or i1 %902, %903
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %905, i8* %906, align 1, !tbaa !2432
  %907 = trunc i64 %901 to i32
  %908 = and i32 %907, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 4, %898
  %915 = xor i64 %914, %901
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i64 %901, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2448
  %923 = lshr i64 %901, 63
  %924 = trunc i64 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2449
  %926 = lshr i64 %898, 63
  %927 = xor i64 %923, %926
  %928 = add nuw nsw i64 %927, %923
  %929 = icmp eq i64 %928, 2
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %930, i8* %931, align 1, !tbaa !2450
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 8
  %934 = load i64, i64* %RCX
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %933 to i64*
  store i64 %934, i64* %937
  %938 = load i64, i64* %RAX
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 3
  store i64 %940, i64* %PC
  %941 = inttoptr i64 %938 to i32*
  %942 = load i32, i32* %941
  %943 = sext i32 %942 to i64
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RAX
  %945 = mul i64 %944, 8
  %946 = add i64 %945, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 8
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %RAX, align 8, !tbaa !2428
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 40
  %953 = load i64, i64* %RAX
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %952 to i64*
  store i64 %953, i64* %956
  %957 = load i64, i64* %PC
  %958 = sub i64 %957, 1001
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 5
  store i64 %960, i64* %PC
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %958, i64* %961, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 12
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 7
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i32*
  store i32 15, i32* %966
  br label %block_40084f

block_4005c5:                                     ; preds = %block_40056b, %block_4005be
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.10, %block_40056b ], [ %MEMORY.32, %block_4005be ]
  %967 = load i64, i64* %RBP
  %968 = sub i64 %967, 12
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 3
  store i64 %970, i64* %PC
  %971 = inttoptr i64 %968 to i32*
  %972 = load i32, i32* %971
  %973 = zext i32 %972 to i64
  store i64 %973, i64* %RDI, align 8, !tbaa !2428
  %974 = load i64, i64* %PC
  %975 = sub i64 %974, 184
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 5
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 5
  store i64 %979, i64* %PC
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %981 = load i64, i64* %980, align 8, !tbaa !2428
  %982 = add i64 %981, -8
  %983 = inttoptr i64 %982 to i64*
  store i64 %977, i64* %983
  store i64 %982, i64* %980, align 8, !tbaa !2428
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %975, i64* %984, align 8, !tbaa !2428
  %985 = load i64, i64* %PC
  %986 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %985, %struct.Memory* %MEMORY.9)
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 8
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = load i64, i64* %RAX
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 3
  store i64 %995, i64* %PC
  store i64 %993, i64* %RCX, align 8, !tbaa !2428
  %996 = load i64, i64* %RCX
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 4
  store i64 %998, i64* %PC
  %999 = add i64 4, %996
  store i64 %999, i64* %RCX, align 8, !tbaa !2428
  %1000 = icmp ult i64 %999, %996
  %1001 = icmp ult i64 %999, 4
  %1002 = or i1 %1000, %1001
  %1003 = zext i1 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1003, i8* %1004, align 1, !tbaa !2432
  %1005 = trunc i64 %999 to i32
  %1006 = and i32 %1005, 255
  %1007 = call i32 @llvm.ctpop.i32(i32 %1006) #16
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  %1010 = xor i8 %1009, 1
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1010, i8* %1011, align 1, !tbaa !2446
  %1012 = xor i64 4, %996
  %1013 = xor i64 %1012, %999
  %1014 = lshr i64 %1013, 4
  %1015 = trunc i64 %1014 to i8
  %1016 = and i8 %1015, 1
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1016, i8* %1017, align 1, !tbaa !2447
  %1018 = icmp eq i64 %999, 0
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1019, i8* %1020, align 1, !tbaa !2448
  %1021 = lshr i64 %999, 63
  %1022 = trunc i64 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1022, i8* %1023, align 1, !tbaa !2449
  %1024 = lshr i64 %996, 63
  %1025 = xor i64 %1021, %1024
  %1026 = add nuw nsw i64 %1025, %1021
  %1027 = icmp eq i64 %1026, 2
  %1028 = zext i1 %1027 to i8
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1028, i8* %1029, align 1, !tbaa !2450
  %1030 = load i64, i64* %RBP
  %1031 = sub i64 %1030, 8
  %1032 = load i64, i64* %RCX
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 4
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1031 to i64*
  store i64 %1032, i64* %1035
  %1036 = load i64, i64* %RAX
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 3
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = sext i32 %1040 to i64
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RAX
  %1043 = mul i64 %1042, 8
  %1044 = add i64 %1043, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 8
  store i64 %1046, i64* %PC
  %1047 = inttoptr i64 %1044 to i64*
  %1048 = load i64, i64* %1047
  store i64 %1048, i64* %RAX, align 8, !tbaa !2428
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 40
  %1051 = load i64, i64* %RAX
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 4
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1050 to i64*
  store i64 %1051, i64* %1054
  %1055 = load i64, i64* %PC
  %1056 = sub i64 %1055, 101
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  store i64 %1058, i64* %PC
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1059, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 12
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 7
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  store i32 18, i32* %1064
  br label %block_4008e5

block_400543:                                     ; preds = %block_400b9a, %block_400530
  %MEMORY.10 = phi %struct.Memory* [ %2, %block_400530 ], [ %MEMORY.10, %block_400b9a ]
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 8
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1066 to i64*
  %1070 = load i64, i64* %1069
  store i64 %1070, i64* %RAX, align 8, !tbaa !2428
  %1071 = load i64, i64* %RAX
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 3
  store i64 %1073, i64* %PC
  store i64 %1071, i64* %RCX, align 8, !tbaa !2428
  %1074 = load i64, i64* %RCX
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = add i64 4, %1074
  store i64 %1077, i64* %RCX, align 8, !tbaa !2428
  %1078 = icmp ult i64 %1077, %1074
  %1079 = icmp ult i64 %1077, 4
  %1080 = or i1 %1078, %1079
  %1081 = zext i1 %1080 to i8
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1081, i8* %1082, align 1, !tbaa !2432
  %1083 = trunc i64 %1077 to i32
  %1084 = and i32 %1083, 255
  %1085 = call i32 @llvm.ctpop.i32(i32 %1084) #16
  %1086 = trunc i32 %1085 to i8
  %1087 = and i8 %1086, 1
  %1088 = xor i8 %1087, 1
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1088, i8* %1089, align 1, !tbaa !2446
  %1090 = xor i64 4, %1074
  %1091 = xor i64 %1090, %1077
  %1092 = lshr i64 %1091, 4
  %1093 = trunc i64 %1092 to i8
  %1094 = and i8 %1093, 1
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1094, i8* %1095, align 1, !tbaa !2447
  %1096 = icmp eq i64 %1077, 0
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1097, i8* %1098, align 1, !tbaa !2448
  %1099 = lshr i64 %1077, 63
  %1100 = trunc i64 %1099 to i8
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1100, i8* %1101, align 1, !tbaa !2449
  %1102 = lshr i64 %1074, 63
  %1103 = xor i64 %1099, %1102
  %1104 = add nuw nsw i64 %1103, %1099
  %1105 = icmp eq i64 %1104, 2
  %1106 = zext i1 %1105 to i8
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1106, i8* %1107, align 1, !tbaa !2450
  %1108 = load i64, i64* %RBP
  %1109 = sub i64 %1108, 8
  %1110 = load i64, i64* %RCX
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1109 to i64*
  store i64 %1110, i64* %1113
  %1114 = load i64, i64* %RAX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 2
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1114 to i32*
  %1118 = load i32, i32* %1117
  %1119 = zext i32 %1118 to i64
  store i64 %1119, i64* %RDX, align 8, !tbaa !2428
  %1120 = load i32, i32* %EDX
  %1121 = zext i32 %1120 to i64
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 2
  store i64 %1123, i64* %PC
  %1124 = and i64 %1121, 4294967295
  store i64 %1124, i64* %RAX, align 8, !tbaa !2428
  %1125 = load i64, i64* %RAX
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 3
  store i64 %1127, i64* %PC
  store i64 %1125, i64* %RCX, align 8, !tbaa !2428
  %1128 = load i64, i64* %RCX
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = sub i64 %1128, 31
  store i64 %1131, i64* %RCX, align 8, !tbaa !2428
  %1132 = icmp ult i64 %1128, 31
  %1133 = zext i1 %1132 to i8
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1133, i8* %1134, align 1, !tbaa !2432
  %1135 = trunc i64 %1131 to i32
  %1136 = and i32 %1135, 255
  %1137 = call i32 @llvm.ctpop.i32(i32 %1136) #16
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1140, i8* %1141, align 1, !tbaa !2446
  %1142 = xor i64 31, %1128
  %1143 = xor i64 %1142, %1131
  %1144 = lshr i64 %1143, 4
  %1145 = trunc i64 %1144 to i8
  %1146 = and i8 %1145, 1
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1146, i8* %1147, align 1, !tbaa !2447
  %1148 = icmp eq i64 %1131, 0
  %1149 = zext i1 %1148 to i8
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1149, i8* %1150, align 1, !tbaa !2448
  %1151 = lshr i64 %1131, 63
  %1152 = trunc i64 %1151 to i8
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1152, i8* %1153, align 1, !tbaa !2449
  %1154 = lshr i64 %1128, 63
  %1155 = xor i64 %1151, %1154
  %1156 = add nuw nsw i64 %1155, %1154
  %1157 = icmp eq i64 %1156, 2
  %1158 = zext i1 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1158, i8* %1159, align 1, !tbaa !2450
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 24
  %1162 = load i64, i64* %RAX
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1161 to i64*
  store i64 %1162, i64* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 32
  %1168 = load i64, i64* %RCX
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1167 to i64*
  store i64 %1168, i64* %1171
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 1589
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 6
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 6
  store i64 %1177, i64* %PC
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1179 = load i8, i8* %1178, align 1, !tbaa !2432
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1181 = load i8, i8* %1180, align 1, !tbaa !2448
  %1182 = or i8 %1181, %1179
  %1183 = icmp eq i8 %1182, 0
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1186 = select i1 %1183, i64 %1173, i64 %1175
  store i64 %1186, i64* %1185, align 8, !tbaa !2428
  %1187 = load i8, i8* %BRANCH_TAKEN
  %1188 = icmp eq i8 %1187, 1
  br i1 %1188, label %block_400b9a, label %block_40056b

block_400942:                                     ; preds = %block_400586
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 12
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 7
  store i64 %1192, i64* %PC
  %1193 = inttoptr i64 %1190 to i32*
  store i32 20, i32* %1193
  br label %block_400949

block_4006bf:                                     ; preds = %block_40056b, %block_4006b8
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.32, %block_4006b8 ], [ %MEMORY.10, %block_40056b ]
  %1194 = load i64, i64* %RBP
  %1195 = sub i64 %1194, 12
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 3
  store i64 %1197, i64* %PC
  %1198 = inttoptr i64 %1195 to i32*
  %1199 = load i32, i32* %1198
  %1200 = zext i32 %1199 to i64
  store i64 %1200, i64* %RDI, align 8, !tbaa !2428
  %1201 = load i64, i64* %PC
  %1202 = sub i64 %1201, 434
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 5
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 5
  store i64 %1206, i64* %PC
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1208 = load i64, i64* %1207, align 8, !tbaa !2428
  %1209 = add i64 %1208, -8
  %1210 = inttoptr i64 %1209 to i64*
  store i64 %1204, i64* %1210
  store i64 %1209, i64* %1207, align 8, !tbaa !2428
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1202, i64* %1211, align 8, !tbaa !2428
  %1212 = load i64, i64* %PC
  %1213 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1212, %struct.Memory* %MEMORY.11)
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 8
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 4
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i64*
  %1219 = load i64, i64* %1218
  store i64 %1219, i64* %RAX, align 8, !tbaa !2428
  %1220 = load i64, i64* %RAX
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 3
  store i64 %1222, i64* %PC
  store i64 %1220, i64* %RCX, align 8, !tbaa !2428
  %1223 = load i64, i64* %RCX
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 4
  store i64 %1225, i64* %PC
  %1226 = add i64 4, %1223
  store i64 %1226, i64* %RCX, align 8, !tbaa !2428
  %1227 = icmp ult i64 %1226, %1223
  %1228 = icmp ult i64 %1226, 4
  %1229 = or i1 %1227, %1228
  %1230 = zext i1 %1229 to i8
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1230, i8* %1231, align 1, !tbaa !2432
  %1232 = trunc i64 %1226 to i32
  %1233 = and i32 %1232, 255
  %1234 = call i32 @llvm.ctpop.i32(i32 %1233) #16
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  %1237 = xor i8 %1236, 1
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1237, i8* %1238, align 1, !tbaa !2446
  %1239 = xor i64 4, %1223
  %1240 = xor i64 %1239, %1226
  %1241 = lshr i64 %1240, 4
  %1242 = trunc i64 %1241 to i8
  %1243 = and i8 %1242, 1
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1243, i8* %1244, align 1, !tbaa !2447
  %1245 = icmp eq i64 %1226, 0
  %1246 = zext i1 %1245 to i8
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1246, i8* %1247, align 1, !tbaa !2448
  %1248 = lshr i64 %1226, 63
  %1249 = trunc i64 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1249, i8* %1250, align 1, !tbaa !2449
  %1251 = lshr i64 %1223, 63
  %1252 = xor i64 %1248, %1251
  %1253 = add nuw nsw i64 %1252, %1248
  %1254 = icmp eq i64 %1253, 2
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1255, i8* %1256, align 1, !tbaa !2450
  %1257 = load i64, i64* %RBP
  %1258 = sub i64 %1257, 8
  %1259 = load i64, i64* %RCX
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 4
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1258 to i64*
  store i64 %1259, i64* %1262
  %1263 = load i64, i64* %RAX
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 3
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1263 to i32*
  %1267 = load i32, i32* %1266
  %1268 = sext i32 %1267 to i64
  store i64 %1268, i64* %RAX, align 8, !tbaa !2428
  %1269 = load i64, i64* %RAX
  %1270 = mul i64 %1269, 8
  %1271 = add i64 %1270, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 8
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i64*
  %1275 = load i64, i64* %1274
  store i64 %1275, i64* %RAX, align 8, !tbaa !2428
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 40
  %1278 = load i64, i64* %RAX
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1277 to i64*
  store i64 %1278, i64* %1281
  %1282 = load i64, i64* %PC
  %1283 = sub i64 %1282, 351
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1283, i64* %1286, align 8, !tbaa !2428
  br label %block_400586

block_4007b9:                                     ; preds = %block_40056b, %block_4007b2
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.32, %block_4007b2 ], [ %MEMORY.10, %block_40056b ]
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 12
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 3
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i32*
  %1292 = load i32, i32* %1291
  %1293 = zext i32 %1292 to i64
  store i64 %1293, i64* %RDI, align 8, !tbaa !2428
  %1294 = load i64, i64* %PC
  %1295 = sub i64 %1294, 684
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1301 = load i64, i64* %1300, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1297, i64* %1303
  store i64 %1302, i64* %1300, align 8, !tbaa !2428
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1295, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %PC
  %1306 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1305, %struct.Memory* %MEMORY.12)
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 8
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 4
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1308 to i64*
  %1312 = load i64, i64* %1311
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = load i64, i64* %RAX
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 3
  store i64 %1315, i64* %PC
  store i64 %1313, i64* %RCX, align 8, !tbaa !2428
  %1316 = load i64, i64* %RCX
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 4
  store i64 %1318, i64* %PC
  %1319 = add i64 4, %1316
  store i64 %1319, i64* %RCX, align 8, !tbaa !2428
  %1320 = icmp ult i64 %1319, %1316
  %1321 = icmp ult i64 %1319, 4
  %1322 = or i1 %1320, %1321
  %1323 = zext i1 %1322 to i8
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1323, i8* %1324, align 1, !tbaa !2432
  %1325 = trunc i64 %1319 to i32
  %1326 = and i32 %1325, 255
  %1327 = call i32 @llvm.ctpop.i32(i32 %1326) #16
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  %1330 = xor i8 %1329, 1
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1330, i8* %1331, align 1, !tbaa !2446
  %1332 = xor i64 4, %1316
  %1333 = xor i64 %1332, %1319
  %1334 = lshr i64 %1333, 4
  %1335 = trunc i64 %1334 to i8
  %1336 = and i8 %1335, 1
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1336, i8* %1337, align 1, !tbaa !2447
  %1338 = icmp eq i64 %1319, 0
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1339, i8* %1340, align 1, !tbaa !2448
  %1341 = lshr i64 %1319, 63
  %1342 = trunc i64 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1342, i8* %1343, align 1, !tbaa !2449
  %1344 = lshr i64 %1316, 63
  %1345 = xor i64 %1341, %1344
  %1346 = add nuw nsw i64 %1345, %1341
  %1347 = icmp eq i64 %1346, 2
  %1348 = zext i1 %1347 to i8
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1348, i8* %1349, align 1, !tbaa !2450
  %1350 = load i64, i64* %RBP
  %1351 = sub i64 %1350, 8
  %1352 = load i64, i64* %RCX
  %1353 = load i64, i64* %PC
  %1354 = add i64 %1353, 4
  store i64 %1354, i64* %PC
  %1355 = inttoptr i64 %1351 to i64*
  store i64 %1352, i64* %1355
  %1356 = load i64, i64* %RAX
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 3
  store i64 %1358, i64* %PC
  %1359 = inttoptr i64 %1356 to i32*
  %1360 = load i32, i32* %1359
  %1361 = sext i32 %1360 to i64
  store i64 %1361, i64* %RAX, align 8, !tbaa !2428
  %1362 = load i64, i64* %RAX
  %1363 = mul i64 %1362, 8
  %1364 = add i64 %1363, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 8
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1364 to i64*
  %1368 = load i64, i64* %1367
  store i64 %1368, i64* %RAX, align 8, !tbaa !2428
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 40
  %1371 = load i64, i64* %RAX
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 4
  store i64 %1373, i64* %PC
  %1374 = inttoptr i64 %1370 to i64*
  store i64 %1371, i64* %1374
  %1375 = load i64, i64* %PC
  %1376 = sub i64 %1375, 601
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 5
  store i64 %1378, i64* %PC
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1376, i64* %1379, align 8, !tbaa !2428
  br label %block_400586

block_400b6f:                                     ; preds = %block_40056b, %block_400b68
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.32, %block_400b68 ], [ %MEMORY.10, %block_40056b ]
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 12
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 3
  store i64 %1383, i64* %PC
  %1384 = inttoptr i64 %1381 to i32*
  %1385 = load i32, i32* %1384
  %1386 = zext i32 %1385 to i64
  store i64 %1386, i64* %RDI, align 8, !tbaa !2428
  %1387 = load i64, i64* %PC
  %1388 = sub i64 %1387, 1634
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 5
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  store i64 %1392, i64* %PC
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1394 = load i64, i64* %1393, align 8, !tbaa !2428
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1390, i64* %1396
  store i64 %1395, i64* %1393, align 8, !tbaa !2428
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1388, i64* %1397, align 8, !tbaa !2428
  %1398 = load i64, i64* %PC
  %1399 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1398, %struct.Memory* %MEMORY.13)
  %1400 = load i64, i64* %RBP
  %1401 = sub i64 %1400, 8
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  store i64 %1405, i64* %RAX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RAX
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 3
  store i64 %1408, i64* %PC
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1409 = load i64, i64* %RCX
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 4
  store i64 %1411, i64* %PC
  %1412 = add i64 4, %1409
  store i64 %1412, i64* %RCX, align 8, !tbaa !2428
  %1413 = icmp ult i64 %1412, %1409
  %1414 = icmp ult i64 %1412, 4
  %1415 = or i1 %1413, %1414
  %1416 = zext i1 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1416, i8* %1417, align 1, !tbaa !2432
  %1418 = trunc i64 %1412 to i32
  %1419 = and i32 %1418, 255
  %1420 = call i32 @llvm.ctpop.i32(i32 %1419) #16
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  %1423 = xor i8 %1422, 1
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1423, i8* %1424, align 1, !tbaa !2446
  %1425 = xor i64 4, %1409
  %1426 = xor i64 %1425, %1412
  %1427 = lshr i64 %1426, 4
  %1428 = trunc i64 %1427 to i8
  %1429 = and i8 %1428, 1
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1429, i8* %1430, align 1, !tbaa !2447
  %1431 = icmp eq i64 %1412, 0
  %1432 = zext i1 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1432, i8* %1433, align 1, !tbaa !2448
  %1434 = lshr i64 %1412, 63
  %1435 = trunc i64 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1435, i8* %1436, align 1, !tbaa !2449
  %1437 = lshr i64 %1409, 63
  %1438 = xor i64 %1434, %1437
  %1439 = add nuw nsw i64 %1438, %1434
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1442, align 1, !tbaa !2450
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 8
  %1445 = load i64, i64* %RCX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 4
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1444 to i64*
  store i64 %1445, i64* %1448
  %1449 = load i64, i64* %RAX
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 3
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1449 to i32*
  %1453 = load i32, i32* %1452
  %1454 = sext i32 %1453 to i64
  store i64 %1454, i64* %RAX, align 8, !tbaa !2428
  %1455 = load i64, i64* %RAX
  %1456 = mul i64 %1455, 8
  %1457 = add i64 %1456, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1458 = load i64, i64* %PC
  %1459 = add i64 %1458, 8
  store i64 %1459, i64* %PC
  %1460 = inttoptr i64 %1457 to i64*
  %1461 = load i64, i64* %1460
  store i64 %1461, i64* %RAX, align 8, !tbaa !2428
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 40
  %1464 = load i64, i64* %RAX
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 4
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1463 to i64*
  store i64 %1464, i64* %1467
  %1468 = load i64, i64* %PC
  %1469 = sub i64 %1468, 1551
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 5
  store i64 %1471, i64* %PC
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1469, i64* %1472, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %1473 = load i64, i64* %RBP
  %1474 = sub i64 %1473, 12
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 7
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1474 to i32*
  store i32 7, i32* %1477
  br label %block_4006bf

block_400b36:                                     ; preds = %block_400586
  %1478 = load i64, i64* %RBP
  %1479 = sub i64 %1478, 12
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 7
  store i64 %1481, i64* %PC
  %1482 = inttoptr i64 %1479 to i32*
  store i32 30, i32* %1482
  br label %block_400b3d

block_4008b3:                                     ; preds = %block_40056b, %block_4008ac
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.32, %block_4008ac ], [ %MEMORY.10, %block_40056b ]
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 12
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = zext i32 %1488 to i64
  store i64 %1489, i64* %RDI, align 8, !tbaa !2428
  %1490 = load i64, i64* %PC
  %1491 = sub i64 %1490, 934
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 5
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  store i64 %1495, i64* %PC
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1497 = load i64, i64* %1496, align 8, !tbaa !2428
  %1498 = add i64 %1497, -8
  %1499 = inttoptr i64 %1498 to i64*
  store i64 %1493, i64* %1499
  store i64 %1498, i64* %1496, align 8, !tbaa !2428
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1491, i64* %1500, align 8, !tbaa !2428
  %1501 = load i64, i64* %PC
  %1502 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1501, %struct.Memory* %MEMORY.14)
  %1503 = load i64, i64* %RBP
  %1504 = sub i64 %1503, 8
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 4
  store i64 %1506, i64* %PC
  %1507 = inttoptr i64 %1504 to i64*
  %1508 = load i64, i64* %1507
  store i64 %1508, i64* %RAX, align 8, !tbaa !2428
  %1509 = load i64, i64* %RAX
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 3
  store i64 %1511, i64* %PC
  store i64 %1509, i64* %RCX, align 8, !tbaa !2428
  %1512 = load i64, i64* %RCX
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 4
  store i64 %1514, i64* %PC
  %1515 = add i64 4, %1512
  store i64 %1515, i64* %RCX, align 8, !tbaa !2428
  %1516 = icmp ult i64 %1515, %1512
  %1517 = icmp ult i64 %1515, 4
  %1518 = or i1 %1516, %1517
  %1519 = zext i1 %1518 to i8
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1519, i8* %1520, align 1, !tbaa !2432
  %1521 = trunc i64 %1515 to i32
  %1522 = and i32 %1521, 255
  %1523 = call i32 @llvm.ctpop.i32(i32 %1522) #16
  %1524 = trunc i32 %1523 to i8
  %1525 = and i8 %1524, 1
  %1526 = xor i8 %1525, 1
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1526, i8* %1527, align 1, !tbaa !2446
  %1528 = xor i64 4, %1512
  %1529 = xor i64 %1528, %1515
  %1530 = lshr i64 %1529, 4
  %1531 = trunc i64 %1530 to i8
  %1532 = and i8 %1531, 1
  %1533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1532, i8* %1533, align 1, !tbaa !2447
  %1534 = icmp eq i64 %1515, 0
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1535, i8* %1536, align 1, !tbaa !2448
  %1537 = lshr i64 %1515, 63
  %1538 = trunc i64 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1538, i8* %1539, align 1, !tbaa !2449
  %1540 = lshr i64 %1512, 63
  %1541 = xor i64 %1537, %1540
  %1542 = add nuw nsw i64 %1541, %1537
  %1543 = icmp eq i64 %1542, 2
  %1544 = zext i1 %1543 to i8
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1544, i8* %1545, align 1, !tbaa !2450
  %1546 = load i64, i64* %RBP
  %1547 = sub i64 %1546, 8
  %1548 = load i64, i64* %RCX
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 4
  store i64 %1550, i64* %PC
  %1551 = inttoptr i64 %1547 to i64*
  store i64 %1548, i64* %1551
  %1552 = load i64, i64* %RAX
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 3
  store i64 %1554, i64* %PC
  %1555 = inttoptr i64 %1552 to i32*
  %1556 = load i32, i32* %1555
  %1557 = sext i32 %1556 to i64
  store i64 %1557, i64* %RAX, align 8, !tbaa !2428
  %1558 = load i64, i64* %RAX
  %1559 = mul i64 %1558, 8
  %1560 = add i64 %1559, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 8
  store i64 %1562, i64* %PC
  %1563 = inttoptr i64 %1560 to i64*
  %1564 = load i64, i64* %1563
  store i64 %1564, i64* %RAX, align 8, !tbaa !2428
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 40
  %1567 = load i64, i64* %RAX
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 4
  store i64 %1569, i64* %PC
  %1570 = inttoptr i64 %1566 to i64*
  store i64 %1567, i64* %1570
  %1571 = load i64, i64* %PC
  %1572 = sub i64 %1571, 851
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 5
  store i64 %1574, i64* %PC
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1572, i64* %1575, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 12
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 7
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to i32*
  store i32 12, i32* %1580
  br label %block_4007b9

block_400a75:                                     ; preds = %block_40056b, %block_400a6e
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.32, %block_400a6e ], [ %MEMORY.10, %block_40056b ]
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 12
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RDI, align 8, !tbaa !2428
  %1588 = load i64, i64* %PC
  %1589 = sub i64 %1588, 1384
  %1590 = load i64, i64* %PC
  %1591 = add i64 %1590, 5
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 5
  store i64 %1593, i64* %PC
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1595 = load i64, i64* %1594, align 8, !tbaa !2428
  %1596 = add i64 %1595, -8
  %1597 = inttoptr i64 %1596 to i64*
  store i64 %1591, i64* %1597
  store i64 %1596, i64* %1594, align 8, !tbaa !2428
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1589, i64* %1598, align 8, !tbaa !2428
  %1599 = load i64, i64* %PC
  %1600 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1599, %struct.Memory* %MEMORY.15)
  %1601 = load i64, i64* %RBP
  %1602 = sub i64 %1601, 8
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 4
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1602 to i64*
  %1606 = load i64, i64* %1605
  store i64 %1606, i64* %RAX, align 8, !tbaa !2428
  %1607 = load i64, i64* %RAX
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 3
  store i64 %1609, i64* %PC
  store i64 %1607, i64* %RCX, align 8, !tbaa !2428
  %1610 = load i64, i64* %RCX
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 4
  store i64 %1612, i64* %PC
  %1613 = add i64 4, %1610
  store i64 %1613, i64* %RCX, align 8, !tbaa !2428
  %1614 = icmp ult i64 %1613, %1610
  %1615 = icmp ult i64 %1613, 4
  %1616 = or i1 %1614, %1615
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1617, i8* %1618, align 1, !tbaa !2432
  %1619 = trunc i64 %1613 to i32
  %1620 = and i32 %1619, 255
  %1621 = call i32 @llvm.ctpop.i32(i32 %1620) #16
  %1622 = trunc i32 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = xor i8 %1623, 1
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1624, i8* %1625, align 1, !tbaa !2446
  %1626 = xor i64 4, %1610
  %1627 = xor i64 %1626, %1613
  %1628 = lshr i64 %1627, 4
  %1629 = trunc i64 %1628 to i8
  %1630 = and i8 %1629, 1
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1630, i8* %1631, align 1, !tbaa !2447
  %1632 = icmp eq i64 %1613, 0
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1633, i8* %1634, align 1, !tbaa !2448
  %1635 = lshr i64 %1613, 63
  %1636 = trunc i64 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1636, i8* %1637, align 1, !tbaa !2449
  %1638 = lshr i64 %1610, 63
  %1639 = xor i64 %1635, %1638
  %1640 = add nuw nsw i64 %1639, %1635
  %1641 = icmp eq i64 %1640, 2
  %1642 = zext i1 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1642, i8* %1643, align 1, !tbaa !2450
  %1644 = load i64, i64* %RBP
  %1645 = sub i64 %1644, 8
  %1646 = load i64, i64* %RCX
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 4
  store i64 %1648, i64* %PC
  %1649 = inttoptr i64 %1645 to i64*
  store i64 %1646, i64* %1649
  %1650 = load i64, i64* %RAX
  %1651 = load i64, i64* %PC
  %1652 = add i64 %1651, 3
  store i64 %1652, i64* %PC
  %1653 = inttoptr i64 %1650 to i32*
  %1654 = load i32, i32* %1653
  %1655 = sext i32 %1654 to i64
  store i64 %1655, i64* %RAX, align 8, !tbaa !2428
  %1656 = load i64, i64* %RAX
  %1657 = mul i64 %1656, 8
  %1658 = add i64 %1657, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 8
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i64*
  %1662 = load i64, i64* %1661
  store i64 %1662, i64* %RAX, align 8, !tbaa !2428
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 40
  %1665 = load i64, i64* %RAX
  %1666 = load i64, i64* %PC
  %1667 = add i64 %1666, 4
  store i64 %1667, i64* %PC
  %1668 = inttoptr i64 %1664 to i64*
  store i64 %1665, i64* %1668
  %1669 = load i64, i64* %PC
  %1670 = sub i64 %1669, 1301
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 5
  store i64 %1672, i64* %PC
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1670, i64* %1673, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 12
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 7
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to i32*
  store i32 2, i32* %1678
  br label %block_4005c5

block_4009ad:                                     ; preds = %block_40056b, %block_4009a6
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.32, %block_4009a6 ], [ %MEMORY.10, %block_40056b ]
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 12
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 3
  store i64 %1682, i64* %PC
  %1683 = inttoptr i64 %1680 to i32*
  %1684 = load i32, i32* %1683
  %1685 = zext i32 %1684 to i64
  store i64 %1685, i64* %RDI, align 8, !tbaa !2428
  %1686 = load i64, i64* %PC
  %1687 = sub i64 %1686, 1184
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 5
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 5
  store i64 %1691, i64* %PC
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1693 = load i64, i64* %1692, align 8, !tbaa !2428
  %1694 = add i64 %1693, -8
  %1695 = inttoptr i64 %1694 to i64*
  store i64 %1689, i64* %1695
  store i64 %1694, i64* %1692, align 8, !tbaa !2428
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1687, i64* %1696, align 8, !tbaa !2428
  %1697 = load i64, i64* %PC
  %1698 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1697, %struct.Memory* %MEMORY.16)
  %1699 = load i64, i64* %RBP
  %1700 = sub i64 %1699, 8
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 4
  store i64 %1702, i64* %PC
  %1703 = inttoptr i64 %1700 to i64*
  %1704 = load i64, i64* %1703
  store i64 %1704, i64* %RAX, align 8, !tbaa !2428
  %1705 = load i64, i64* %RAX
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 3
  store i64 %1707, i64* %PC
  store i64 %1705, i64* %RCX, align 8, !tbaa !2428
  %1708 = load i64, i64* %RCX
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 4
  store i64 %1710, i64* %PC
  %1711 = add i64 4, %1708
  store i64 %1711, i64* %RCX, align 8, !tbaa !2428
  %1712 = icmp ult i64 %1711, %1708
  %1713 = icmp ult i64 %1711, 4
  %1714 = or i1 %1712, %1713
  %1715 = zext i1 %1714 to i8
  %1716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1715, i8* %1716, align 1, !tbaa !2432
  %1717 = trunc i64 %1711 to i32
  %1718 = and i32 %1717, 255
  %1719 = call i32 @llvm.ctpop.i32(i32 %1718) #16
  %1720 = trunc i32 %1719 to i8
  %1721 = and i8 %1720, 1
  %1722 = xor i8 %1721, 1
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1722, i8* %1723, align 1, !tbaa !2446
  %1724 = xor i64 4, %1708
  %1725 = xor i64 %1724, %1711
  %1726 = lshr i64 %1725, 4
  %1727 = trunc i64 %1726 to i8
  %1728 = and i8 %1727, 1
  %1729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1728, i8* %1729, align 1, !tbaa !2447
  %1730 = icmp eq i64 %1711, 0
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1731, i8* %1732, align 1, !tbaa !2448
  %1733 = lshr i64 %1711, 63
  %1734 = trunc i64 %1733 to i8
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1734, i8* %1735, align 1, !tbaa !2449
  %1736 = lshr i64 %1708, 63
  %1737 = xor i64 %1733, %1736
  %1738 = add nuw nsw i64 %1737, %1733
  %1739 = icmp eq i64 %1738, 2
  %1740 = zext i1 %1739 to i8
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1740, i8* %1741, align 1, !tbaa !2450
  %1742 = load i64, i64* %RBP
  %1743 = sub i64 %1742, 8
  %1744 = load i64, i64* %RCX
  %1745 = load i64, i64* %PC
  %1746 = add i64 %1745, 4
  store i64 %1746, i64* %PC
  %1747 = inttoptr i64 %1743 to i64*
  store i64 %1744, i64* %1747
  %1748 = load i64, i64* %RAX
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 3
  store i64 %1750, i64* %PC
  %1751 = inttoptr i64 %1748 to i32*
  %1752 = load i32, i32* %1751
  %1753 = sext i32 %1752 to i64
  store i64 %1753, i64* %RAX, align 8, !tbaa !2428
  %1754 = load i64, i64* %RAX
  %1755 = mul i64 %1754, 8
  %1756 = add i64 %1755, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 8
  store i64 %1758, i64* %PC
  %1759 = inttoptr i64 %1756 to i64*
  %1760 = load i64, i64* %1759
  store i64 %1760, i64* %RAX, align 8, !tbaa !2428
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 40
  %1763 = load i64, i64* %RAX
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 4
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1762 to i64*
  store i64 %1763, i64* %1766
  %1767 = load i64, i64* %PC
  %1768 = sub i64 %1767, 1101
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 5
  store i64 %1770, i64* %PC
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1768, i64* %1771, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 12
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 7
  store i64 %1775, i64* %PC
  %1776 = inttoptr i64 %1773 to i32*
  store i32 17, i32* %1776
  br label %block_4008b3

block_400629:                                     ; preds = %block_40056b, %block_400622
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.32, %block_400622 ], [ %MEMORY.10, %block_40056b ]
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 12
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = zext i32 %1782 to i64
  store i64 %1783, i64* %RDI, align 8, !tbaa !2428
  %1784 = load i64, i64* %PC
  %1785 = sub i64 %1784, 284
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 5
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 5
  store i64 %1789, i64* %PC
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1791 = load i64, i64* %1790, align 8, !tbaa !2428
  %1792 = add i64 %1791, -8
  %1793 = inttoptr i64 %1792 to i64*
  store i64 %1787, i64* %1793
  store i64 %1792, i64* %1790, align 8, !tbaa !2428
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1785, i64* %1794, align 8, !tbaa !2428
  %1795 = load i64, i64* %PC
  %1796 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1795, %struct.Memory* %MEMORY.17)
  %1797 = load i64, i64* %RBP
  %1798 = sub i64 %1797, 8
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 4
  store i64 %1800, i64* %PC
  %1801 = inttoptr i64 %1798 to i64*
  %1802 = load i64, i64* %1801
  store i64 %1802, i64* %RAX, align 8, !tbaa !2428
  %1803 = load i64, i64* %RAX
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 3
  store i64 %1805, i64* %PC
  store i64 %1803, i64* %RCX, align 8, !tbaa !2428
  %1806 = load i64, i64* %RCX
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 4
  store i64 %1808, i64* %PC
  %1809 = add i64 4, %1806
  store i64 %1809, i64* %RCX, align 8, !tbaa !2428
  %1810 = icmp ult i64 %1809, %1806
  %1811 = icmp ult i64 %1809, 4
  %1812 = or i1 %1810, %1811
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1813, i8* %1814, align 1, !tbaa !2432
  %1815 = trunc i64 %1809 to i32
  %1816 = and i32 %1815, 255
  %1817 = call i32 @llvm.ctpop.i32(i32 %1816) #16
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1820, i8* %1821, align 1, !tbaa !2446
  %1822 = xor i64 4, %1806
  %1823 = xor i64 %1822, %1809
  %1824 = lshr i64 %1823, 4
  %1825 = trunc i64 %1824 to i8
  %1826 = and i8 %1825, 1
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1826, i8* %1827, align 1, !tbaa !2447
  %1828 = icmp eq i64 %1809, 0
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1829, i8* %1830, align 1, !tbaa !2448
  %1831 = lshr i64 %1809, 63
  %1832 = trunc i64 %1831 to i8
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1832, i8* %1833, align 1, !tbaa !2449
  %1834 = lshr i64 %1806, 63
  %1835 = xor i64 %1831, %1834
  %1836 = add nuw nsw i64 %1835, %1831
  %1837 = icmp eq i64 %1836, 2
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1838, i8* %1839, align 1, !tbaa !2450
  %1840 = load i64, i64* %RBP
  %1841 = sub i64 %1840, 8
  %1842 = load i64, i64* %RCX
  %1843 = load i64, i64* %PC
  %1844 = add i64 %1843, 4
  store i64 %1844, i64* %PC
  %1845 = inttoptr i64 %1841 to i64*
  store i64 %1842, i64* %1845
  %1846 = load i64, i64* %RAX
  %1847 = load i64, i64* %PC
  %1848 = add i64 %1847, 3
  store i64 %1848, i64* %PC
  %1849 = inttoptr i64 %1846 to i32*
  %1850 = load i32, i32* %1849
  %1851 = sext i32 %1850 to i64
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = load i64, i64* %RAX
  %1853 = mul i64 %1852, 8
  %1854 = add i64 %1853, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1855 = load i64, i64* %PC
  %1856 = add i64 %1855, 8
  store i64 %1856, i64* %PC
  %1857 = inttoptr i64 %1854 to i64*
  %1858 = load i64, i64* %1857
  store i64 %1858, i64* %RAX, align 8, !tbaa !2428
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 40
  %1861 = load i64, i64* %RAX
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 4
  store i64 %1863, i64* %PC
  %1864 = inttoptr i64 %1860 to i64*
  store i64 %1861, i64* %1864
  %1865 = load i64, i64* %PC
  %1866 = sub i64 %1865, 201
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 5
  store i64 %1868, i64* %PC
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1866, i64* %1869, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 12
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 7
  store i64 %1873, i64* %PC
  %1874 = inttoptr i64 %1871 to i32*
  store i32 3, i32* %1874
  br label %block_4005f7

block_400aa7:                                     ; preds = %block_40056b, %block_400aa0
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.32, %block_400aa0 ], [ %MEMORY.10, %block_40056b ]
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 12
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 3
  store i64 %1878, i64* %PC
  %1879 = inttoptr i64 %1876 to i32*
  %1880 = load i32, i32* %1879
  %1881 = zext i32 %1880 to i64
  store i64 %1881, i64* %RDI, align 8, !tbaa !2428
  %1882 = load i64, i64* %PC
  %1883 = sub i64 %1882, 1434
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 5
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 5
  store i64 %1887, i64* %PC
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1889 = load i64, i64* %1888, align 8, !tbaa !2428
  %1890 = add i64 %1889, -8
  %1891 = inttoptr i64 %1890 to i64*
  store i64 %1885, i64* %1891
  store i64 %1890, i64* %1888, align 8, !tbaa !2428
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1883, i64* %1892, align 8, !tbaa !2428
  %1893 = load i64, i64* %PC
  %1894 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1893, %struct.Memory* %MEMORY.18)
  %1895 = load i64, i64* %RBP
  %1896 = sub i64 %1895, 8
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 4
  store i64 %1898, i64* %PC
  %1899 = inttoptr i64 %1896 to i64*
  %1900 = load i64, i64* %1899
  store i64 %1900, i64* %RAX, align 8, !tbaa !2428
  %1901 = load i64, i64* %RAX
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 3
  store i64 %1903, i64* %PC
  store i64 %1901, i64* %RCX, align 8, !tbaa !2428
  %1904 = load i64, i64* %RCX
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 4
  store i64 %1906, i64* %PC
  %1907 = add i64 4, %1904
  store i64 %1907, i64* %RCX, align 8, !tbaa !2428
  %1908 = icmp ult i64 %1907, %1904
  %1909 = icmp ult i64 %1907, 4
  %1910 = or i1 %1908, %1909
  %1911 = zext i1 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1911, i8* %1912, align 1, !tbaa !2432
  %1913 = trunc i64 %1907 to i32
  %1914 = and i32 %1913, 255
  %1915 = call i32 @llvm.ctpop.i32(i32 %1914) #16
  %1916 = trunc i32 %1915 to i8
  %1917 = and i8 %1916, 1
  %1918 = xor i8 %1917, 1
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1918, i8* %1919, align 1, !tbaa !2446
  %1920 = xor i64 4, %1904
  %1921 = xor i64 %1920, %1907
  %1922 = lshr i64 %1921, 4
  %1923 = trunc i64 %1922 to i8
  %1924 = and i8 %1923, 1
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1924, i8* %1925, align 1, !tbaa !2447
  %1926 = icmp eq i64 %1907, 0
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1927, i8* %1928, align 1, !tbaa !2448
  %1929 = lshr i64 %1907, 63
  %1930 = trunc i64 %1929 to i8
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1930, i8* %1931, align 1, !tbaa !2449
  %1932 = lshr i64 %1904, 63
  %1933 = xor i64 %1929, %1932
  %1934 = add nuw nsw i64 %1933, %1929
  %1935 = icmp eq i64 %1934, 2
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1936, i8* %1937, align 1, !tbaa !2450
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 8
  %1940 = load i64, i64* %RCX
  %1941 = load i64, i64* %PC
  %1942 = add i64 %1941, 4
  store i64 %1942, i64* %PC
  %1943 = inttoptr i64 %1939 to i64*
  store i64 %1940, i64* %1943
  %1944 = load i64, i64* %RAX
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 3
  store i64 %1946, i64* %PC
  %1947 = inttoptr i64 %1944 to i32*
  %1948 = load i32, i32* %1947
  %1949 = sext i32 %1948 to i64
  store i64 %1949, i64* %RAX, align 8, !tbaa !2428
  %1950 = load i64, i64* %RAX
  %1951 = mul i64 %1950, 8
  %1952 = add i64 %1951, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 8
  store i64 %1954, i64* %PC
  %1955 = inttoptr i64 %1952 to i64*
  %1956 = load i64, i64* %1955
  store i64 %1956, i64* %RAX, align 8, !tbaa !2428
  %1957 = load i64, i64* %RBP
  %1958 = sub i64 %1957, 40
  %1959 = load i64, i64* %RAX
  %1960 = load i64, i64* %PC
  %1961 = add i64 %1960, 4
  store i64 %1961, i64* %PC
  %1962 = inttoptr i64 %1958 to i64*
  store i64 %1959, i64* %1962
  %1963 = load i64, i64* %PC
  %1964 = sub i64 %1963, 1351
  %1965 = load i64, i64* %PC
  %1966 = add i64 %1965, 5
  store i64 %1966, i64* %PC
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1964, i64* %1967, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1968 = load i64, i64* %RBP
  %1969 = sub i64 %1968, 12
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 7
  store i64 %1971, i64* %PC
  %1972 = inttoptr i64 %1969 to i32*
  store i32 22, i32* %1972
  br label %block_4009ad

block_400b3d:                                     ; preds = %block_40056b, %block_400b36
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.32, %block_400b36 ], [ %MEMORY.10, %block_40056b ]
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 12
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 3
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1974 to i32*
  %1978 = load i32, i32* %1977
  %1979 = zext i32 %1978 to i64
  store i64 %1979, i64* %RDI, align 8, !tbaa !2428
  %1980 = load i64, i64* %PC
  %1981 = sub i64 %1980, 1584
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 5
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  store i64 %1985, i64* %PC
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1987 = load i64, i64* %1986, align 8, !tbaa !2428
  %1988 = add i64 %1987, -8
  %1989 = inttoptr i64 %1988 to i64*
  store i64 %1983, i64* %1989
  store i64 %1988, i64* %1986, align 8, !tbaa !2428
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1981, i64* %1990, align 8, !tbaa !2428
  %1991 = load i64, i64* %PC
  %1992 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1991, %struct.Memory* %MEMORY.19)
  %1993 = load i64, i64* %RBP
  %1994 = sub i64 %1993, 8
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 4
  store i64 %1996, i64* %PC
  %1997 = inttoptr i64 %1994 to i64*
  %1998 = load i64, i64* %1997
  store i64 %1998, i64* %RAX, align 8, !tbaa !2428
  %1999 = load i64, i64* %RAX
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 3
  store i64 %2001, i64* %PC
  store i64 %1999, i64* %RCX, align 8, !tbaa !2428
  %2002 = load i64, i64* %RCX
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 4
  store i64 %2004, i64* %PC
  %2005 = add i64 4, %2002
  store i64 %2005, i64* %RCX, align 8, !tbaa !2428
  %2006 = icmp ult i64 %2005, %2002
  %2007 = icmp ult i64 %2005, 4
  %2008 = or i1 %2006, %2007
  %2009 = zext i1 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2009, i8* %2010, align 1, !tbaa !2432
  %2011 = trunc i64 %2005 to i32
  %2012 = and i32 %2011, 255
  %2013 = call i32 @llvm.ctpop.i32(i32 %2012) #16
  %2014 = trunc i32 %2013 to i8
  %2015 = and i8 %2014, 1
  %2016 = xor i8 %2015, 1
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2016, i8* %2017, align 1, !tbaa !2446
  %2018 = xor i64 4, %2002
  %2019 = xor i64 %2018, %2005
  %2020 = lshr i64 %2019, 4
  %2021 = trunc i64 %2020 to i8
  %2022 = and i8 %2021, 1
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2022, i8* %2023, align 1, !tbaa !2447
  %2024 = icmp eq i64 %2005, 0
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2025, i8* %2026, align 1, !tbaa !2448
  %2027 = lshr i64 %2005, 63
  %2028 = trunc i64 %2027 to i8
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2028, i8* %2029, align 1, !tbaa !2449
  %2030 = lshr i64 %2002, 63
  %2031 = xor i64 %2027, %2030
  %2032 = add nuw nsw i64 %2031, %2027
  %2033 = icmp eq i64 %2032, 2
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2034, i8* %2035, align 1, !tbaa !2450
  %2036 = load i64, i64* %RBP
  %2037 = sub i64 %2036, 8
  %2038 = load i64, i64* %RCX
  %2039 = load i64, i64* %PC
  %2040 = add i64 %2039, 4
  store i64 %2040, i64* %PC
  %2041 = inttoptr i64 %2037 to i64*
  store i64 %2038, i64* %2041
  %2042 = load i64, i64* %RAX
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 3
  store i64 %2044, i64* %PC
  %2045 = inttoptr i64 %2042 to i32*
  %2046 = load i32, i32* %2045
  %2047 = sext i32 %2046 to i64
  store i64 %2047, i64* %RAX, align 8, !tbaa !2428
  %2048 = load i64, i64* %RAX
  %2049 = mul i64 %2048, 8
  %2050 = add i64 %2049, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 8
  store i64 %2052, i64* %PC
  %2053 = inttoptr i64 %2050 to i64*
  %2054 = load i64, i64* %2053
  store i64 %2054, i64* %RAX, align 8, !tbaa !2428
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 40
  %2057 = load i64, i64* %RAX
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 4
  store i64 %2059, i64* %PC
  %2060 = inttoptr i64 %2056 to i64*
  store i64 %2057, i64* %2060
  %2061 = load i64, i64* %PC
  %2062 = sub i64 %2061, 1501
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 5
  store i64 %2064, i64* %PC
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2062, i64* %2065, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 12
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 7
  store i64 %2069, i64* %PC
  %2070 = inttoptr i64 %2067 to i32*
  store i32 6, i32* %2070
  br label %block_40068d

block_400579:                                     ; preds = %block_400586
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 12
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 7
  store i64 %2074, i64* %PC
  %2075 = inttoptr i64 %2072 to i32*
  store i32 0, i32* %2075
  br label %block_400580

block_400723:                                     ; preds = %block_40056b, %block_40071c
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.32, %block_40071c ], [ %MEMORY.10, %block_40056b ]
  %2076 = load i64, i64* %RBP
  %2077 = sub i64 %2076, 12
  %2078 = load i64, i64* %PC
  %2079 = add i64 %2078, 3
  store i64 %2079, i64* %PC
  %2080 = inttoptr i64 %2077 to i32*
  %2081 = load i32, i32* %2080
  %2082 = zext i32 %2081 to i64
  store i64 %2082, i64* %RDI, align 8, !tbaa !2428
  %2083 = load i64, i64* %PC
  %2084 = sub i64 %2083, 534
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 5
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 5
  store i64 %2088, i64* %PC
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2090 = load i64, i64* %2089, align 8, !tbaa !2428
  %2091 = add i64 %2090, -8
  %2092 = inttoptr i64 %2091 to i64*
  store i64 %2086, i64* %2092
  store i64 %2091, i64* %2089, align 8, !tbaa !2428
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2084, i64* %2093, align 8, !tbaa !2428
  %2094 = load i64, i64* %PC
  %2095 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2094, %struct.Memory* %MEMORY.20)
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 8
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 4
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i64*
  %2101 = load i64, i64* %2100
  store i64 %2101, i64* %RAX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RAX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 3
  store i64 %2104, i64* %PC
  store i64 %2102, i64* %RCX, align 8, !tbaa !2428
  %2105 = load i64, i64* %RCX
  %2106 = load i64, i64* %PC
  %2107 = add i64 %2106, 4
  store i64 %2107, i64* %PC
  %2108 = add i64 4, %2105
  store i64 %2108, i64* %RCX, align 8, !tbaa !2428
  %2109 = icmp ult i64 %2108, %2105
  %2110 = icmp ult i64 %2108, 4
  %2111 = or i1 %2109, %2110
  %2112 = zext i1 %2111 to i8
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2112, i8* %2113, align 1, !tbaa !2432
  %2114 = trunc i64 %2108 to i32
  %2115 = and i32 %2114, 255
  %2116 = call i32 @llvm.ctpop.i32(i32 %2115) #16
  %2117 = trunc i32 %2116 to i8
  %2118 = and i8 %2117, 1
  %2119 = xor i8 %2118, 1
  %2120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2119, i8* %2120, align 1, !tbaa !2446
  %2121 = xor i64 4, %2105
  %2122 = xor i64 %2121, %2108
  %2123 = lshr i64 %2122, 4
  %2124 = trunc i64 %2123 to i8
  %2125 = and i8 %2124, 1
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2125, i8* %2126, align 1, !tbaa !2447
  %2127 = icmp eq i64 %2108, 0
  %2128 = zext i1 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2128, i8* %2129, align 1, !tbaa !2448
  %2130 = lshr i64 %2108, 63
  %2131 = trunc i64 %2130 to i8
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2131, i8* %2132, align 1, !tbaa !2449
  %2133 = lshr i64 %2105, 63
  %2134 = xor i64 %2130, %2133
  %2135 = add nuw nsw i64 %2134, %2130
  %2136 = icmp eq i64 %2135, 2
  %2137 = zext i1 %2136 to i8
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2137, i8* %2138, align 1, !tbaa !2450
  %2139 = load i64, i64* %RBP
  %2140 = sub i64 %2139, 8
  %2141 = load i64, i64* %RCX
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 4
  store i64 %2143, i64* %PC
  %2144 = inttoptr i64 %2140 to i64*
  store i64 %2141, i64* %2144
  %2145 = load i64, i64* %RAX
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 3
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2145 to i32*
  %2149 = load i32, i32* %2148
  %2150 = sext i32 %2149 to i64
  store i64 %2150, i64* %RAX, align 8, !tbaa !2428
  %2151 = load i64, i64* %RAX
  %2152 = mul i64 %2151, 8
  %2153 = add i64 %2152, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2154 = load i64, i64* %PC
  %2155 = add i64 %2154, 8
  store i64 %2155, i64* %PC
  %2156 = inttoptr i64 %2153 to i64*
  %2157 = load i64, i64* %2156
  store i64 %2157, i64* %RAX, align 8, !tbaa !2428
  %2158 = load i64, i64* %RBP
  %2159 = sub i64 %2158, 40
  %2160 = load i64, i64* %RAX
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 4
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2159 to i64*
  store i64 %2160, i64* %2163
  %2164 = load i64, i64* %PC
  %2165 = sub i64 %2164, 451
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 5
  store i64 %2167, i64* %PC
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2165, i64* %2168, align 8, !tbaa !2428
  br label %block_400586

block_400ad9:                                     ; preds = %block_40056b, %block_400ad2
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.32, %block_400ad2 ], [ %MEMORY.10, %block_40056b ]
  %2169 = load i64, i64* %RBP
  %2170 = sub i64 %2169, 12
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 3
  store i64 %2172, i64* %PC
  %2173 = inttoptr i64 %2170 to i32*
  %2174 = load i32, i32* %2173
  %2175 = zext i32 %2174 to i64
  store i64 %2175, i64* %RDI, align 8, !tbaa !2428
  %2176 = load i64, i64* %PC
  %2177 = sub i64 %2176, 1484
  %2178 = load i64, i64* %PC
  %2179 = add i64 %2178, 5
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  store i64 %2181, i64* %PC
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2183 = load i64, i64* %2182, align 8, !tbaa !2428
  %2184 = add i64 %2183, -8
  %2185 = inttoptr i64 %2184 to i64*
  store i64 %2179, i64* %2185
  store i64 %2184, i64* %2182, align 8, !tbaa !2428
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2177, i64* %2186, align 8, !tbaa !2428
  %2187 = load i64, i64* %PC
  %2188 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2187, %struct.Memory* %MEMORY.21)
  %2189 = load i64, i64* %RBP
  %2190 = sub i64 %2189, 8
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 4
  store i64 %2192, i64* %PC
  %2193 = inttoptr i64 %2190 to i64*
  %2194 = load i64, i64* %2193
  store i64 %2194, i64* %RAX, align 8, !tbaa !2428
  %2195 = load i64, i64* %RAX
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 3
  store i64 %2197, i64* %PC
  store i64 %2195, i64* %RCX, align 8, !tbaa !2428
  %2198 = load i64, i64* %RCX
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 4
  store i64 %2200, i64* %PC
  %2201 = add i64 4, %2198
  store i64 %2201, i64* %RCX, align 8, !tbaa !2428
  %2202 = icmp ult i64 %2201, %2198
  %2203 = icmp ult i64 %2201, 4
  %2204 = or i1 %2202, %2203
  %2205 = zext i1 %2204 to i8
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2205, i8* %2206, align 1, !tbaa !2432
  %2207 = trunc i64 %2201 to i32
  %2208 = and i32 %2207, 255
  %2209 = call i32 @llvm.ctpop.i32(i32 %2208) #16
  %2210 = trunc i32 %2209 to i8
  %2211 = and i8 %2210, 1
  %2212 = xor i8 %2211, 1
  %2213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2212, i8* %2213, align 1, !tbaa !2446
  %2214 = xor i64 4, %2198
  %2215 = xor i64 %2214, %2201
  %2216 = lshr i64 %2215, 4
  %2217 = trunc i64 %2216 to i8
  %2218 = and i8 %2217, 1
  %2219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2218, i8* %2219, align 1, !tbaa !2447
  %2220 = icmp eq i64 %2201, 0
  %2221 = zext i1 %2220 to i8
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2221, i8* %2222, align 1, !tbaa !2448
  %2223 = lshr i64 %2201, 63
  %2224 = trunc i64 %2223 to i8
  %2225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2224, i8* %2225, align 1, !tbaa !2449
  %2226 = lshr i64 %2198, 63
  %2227 = xor i64 %2223, %2226
  %2228 = add nuw nsw i64 %2227, %2223
  %2229 = icmp eq i64 %2228, 2
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2230, i8* %2231, align 1, !tbaa !2450
  %2232 = load i64, i64* %RBP
  %2233 = sub i64 %2232, 8
  %2234 = load i64, i64* %RCX
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 4
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2233 to i64*
  store i64 %2234, i64* %2237
  %2238 = load i64, i64* %RAX
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 3
  store i64 %2240, i64* %PC
  %2241 = inttoptr i64 %2238 to i32*
  %2242 = load i32, i32* %2241
  %2243 = sext i32 %2242 to i64
  store i64 %2243, i64* %RAX, align 8, !tbaa !2428
  %2244 = load i64, i64* %RAX
  %2245 = mul i64 %2244, 8
  %2246 = add i64 %2245, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2247 = load i64, i64* %PC
  %2248 = add i64 %2247, 8
  store i64 %2248, i64* %PC
  %2249 = inttoptr i64 %2246 to i64*
  %2250 = load i64, i64* %2249
  store i64 %2250, i64* %RAX, align 8, !tbaa !2428
  %2251 = load i64, i64* %RBP
  %2252 = sub i64 %2251, 40
  %2253 = load i64, i64* %RAX
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 4
  store i64 %2255, i64* %PC
  %2256 = inttoptr i64 %2252 to i64*
  store i64 %2253, i64* %2256
  %2257 = load i64, i64* %PC
  %2258 = sub i64 %2257, 1401
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 5
  store i64 %2260, i64* %PC
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2258, i64* %2261, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 12
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 7
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  store i32 4, i32* %2266
  br label %block_400629

block_400aa0:                                     ; preds = %block_400586
  %2267 = load i64, i64* %RBP
  %2268 = sub i64 %2267, 12
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 7
  store i64 %2270, i64* %PC
  %2271 = inttoptr i64 %2268 to i32*
  store i32 27, i32* %2271
  br label %block_400aa7

block_400a3c:                                     ; preds = %block_400586
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 12
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 7
  store i64 %2275, i64* %PC
  %2276 = inttoptr i64 %2273 to i32*
  store i32 25, i32* %2276
  br label %block_400a43

block_400b9f:                                     ; preds = %block_400586
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 1
  store i64 %2278, i64* %PC
  %2279 = load i64, i64* %PC
  %2280 = tail call %struct.Memory* @sub_400ba0_main(%struct.State* %0, i64 %2279, %struct.Memory* %MEMORY.32)
  ret %struct.Memory* %2280

block_40081d:                                     ; preds = %block_40056b, %block_400816
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.32, %block_400816 ], [ %MEMORY.10, %block_40056b ]
  %2281 = load i64, i64* %RBP
  %2282 = sub i64 %2281, 12
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 3
  store i64 %2284, i64* %PC
  %2285 = inttoptr i64 %2282 to i32*
  %2286 = load i32, i32* %2285
  %2287 = zext i32 %2286 to i64
  store i64 %2287, i64* %RDI, align 8, !tbaa !2428
  %2288 = load i64, i64* %PC
  %2289 = sub i64 %2288, 784
  %2290 = load i64, i64* %PC
  %2291 = add i64 %2290, 5
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 5
  store i64 %2293, i64* %PC
  %2294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2295 = load i64, i64* %2294, align 8, !tbaa !2428
  %2296 = add i64 %2295, -8
  %2297 = inttoptr i64 %2296 to i64*
  store i64 %2291, i64* %2297
  store i64 %2296, i64* %2294, align 8, !tbaa !2428
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2289, i64* %2298, align 8, !tbaa !2428
  %2299 = load i64, i64* %PC
  %2300 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2299, %struct.Memory* %MEMORY.22)
  %2301 = load i64, i64* %RBP
  %2302 = sub i64 %2301, 8
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 4
  store i64 %2304, i64* %PC
  %2305 = inttoptr i64 %2302 to i64*
  %2306 = load i64, i64* %2305
  store i64 %2306, i64* %RAX, align 8, !tbaa !2428
  %2307 = load i64, i64* %RAX
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 3
  store i64 %2309, i64* %PC
  store i64 %2307, i64* %RCX, align 8, !tbaa !2428
  %2310 = load i64, i64* %RCX
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 4
  store i64 %2312, i64* %PC
  %2313 = add i64 4, %2310
  store i64 %2313, i64* %RCX, align 8, !tbaa !2428
  %2314 = icmp ult i64 %2313, %2310
  %2315 = icmp ult i64 %2313, 4
  %2316 = or i1 %2314, %2315
  %2317 = zext i1 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2317, i8* %2318, align 1, !tbaa !2432
  %2319 = trunc i64 %2313 to i32
  %2320 = and i32 %2319, 255
  %2321 = call i32 @llvm.ctpop.i32(i32 %2320) #16
  %2322 = trunc i32 %2321 to i8
  %2323 = and i8 %2322, 1
  %2324 = xor i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2324, i8* %2325, align 1, !tbaa !2446
  %2326 = xor i64 4, %2310
  %2327 = xor i64 %2326, %2313
  %2328 = lshr i64 %2327, 4
  %2329 = trunc i64 %2328 to i8
  %2330 = and i8 %2329, 1
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2330, i8* %2331, align 1, !tbaa !2447
  %2332 = icmp eq i64 %2313, 0
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2333, i8* %2334, align 1, !tbaa !2448
  %2335 = lshr i64 %2313, 63
  %2336 = trunc i64 %2335 to i8
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2336, i8* %2337, align 1, !tbaa !2449
  %2338 = lshr i64 %2310, 63
  %2339 = xor i64 %2335, %2338
  %2340 = add nuw nsw i64 %2339, %2335
  %2341 = icmp eq i64 %2340, 2
  %2342 = zext i1 %2341 to i8
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2342, i8* %2343, align 1, !tbaa !2450
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 8
  %2346 = load i64, i64* %RCX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2345 to i64*
  store i64 %2346, i64* %2349
  %2350 = load i64, i64* %RAX
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 3
  store i64 %2352, i64* %PC
  %2353 = inttoptr i64 %2350 to i32*
  %2354 = load i32, i32* %2353
  %2355 = sext i32 %2354 to i64
  store i64 %2355, i64* %RAX, align 8, !tbaa !2428
  %2356 = load i64, i64* %RAX
  %2357 = mul i64 %2356, 8
  %2358 = add i64 %2357, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 8
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2358 to i64*
  %2362 = load i64, i64* %2361
  store i64 %2362, i64* %RAX, align 8, !tbaa !2428
  %2363 = load i64, i64* %RBP
  %2364 = sub i64 %2363, 40
  %2365 = load i64, i64* %RAX
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 4
  store i64 %2367, i64* %PC
  %2368 = inttoptr i64 %2364 to i64*
  store i64 %2365, i64* %2368
  %2369 = load i64, i64* %PC
  %2370 = sub i64 %2369, 701
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2370, i64* %2373, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2374 = load i64, i64* %RBP
  %2375 = sub i64 %2374, 12
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 7
  store i64 %2377, i64* %PC
  %2378 = inttoptr i64 %2375 to i32*
  store i32 9, i32* %2378
  br label %block_400723

block_400917:                                     ; preds = %block_40056b, %block_400910
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.32, %block_400910 ], [ %MEMORY.10, %block_40056b ]
  %2379 = load i64, i64* %RBP
  %2380 = sub i64 %2379, 12
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 3
  store i64 %2382, i64* %PC
  %2383 = inttoptr i64 %2380 to i32*
  %2384 = load i32, i32* %2383
  %2385 = zext i32 %2384 to i64
  store i64 %2385, i64* %RDI, align 8, !tbaa !2428
  %2386 = load i64, i64* %PC
  %2387 = sub i64 %2386, 1034
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 5
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 5
  store i64 %2391, i64* %PC
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2393 = load i64, i64* %2392, align 8, !tbaa !2428
  %2394 = add i64 %2393, -8
  %2395 = inttoptr i64 %2394 to i64*
  store i64 %2389, i64* %2395
  store i64 %2394, i64* %2392, align 8, !tbaa !2428
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2387, i64* %2396, align 8, !tbaa !2428
  %2397 = load i64, i64* %PC
  %2398 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2397, %struct.Memory* %MEMORY.23)
  %2399 = load i64, i64* %RBP
  %2400 = sub i64 %2399, 8
  %2401 = load i64, i64* %PC
  %2402 = add i64 %2401, 4
  store i64 %2402, i64* %PC
  %2403 = inttoptr i64 %2400 to i64*
  %2404 = load i64, i64* %2403
  store i64 %2404, i64* %RAX, align 8, !tbaa !2428
  %2405 = load i64, i64* %RAX
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 3
  store i64 %2407, i64* %PC
  store i64 %2405, i64* %RCX, align 8, !tbaa !2428
  %2408 = load i64, i64* %RCX
  %2409 = load i64, i64* %PC
  %2410 = add i64 %2409, 4
  store i64 %2410, i64* %PC
  %2411 = add i64 4, %2408
  store i64 %2411, i64* %RCX, align 8, !tbaa !2428
  %2412 = icmp ult i64 %2411, %2408
  %2413 = icmp ult i64 %2411, 4
  %2414 = or i1 %2412, %2413
  %2415 = zext i1 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2415, i8* %2416, align 1, !tbaa !2432
  %2417 = trunc i64 %2411 to i32
  %2418 = and i32 %2417, 255
  %2419 = call i32 @llvm.ctpop.i32(i32 %2418) #16
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2422, i8* %2423, align 1, !tbaa !2446
  %2424 = xor i64 4, %2408
  %2425 = xor i64 %2424, %2411
  %2426 = lshr i64 %2425, 4
  %2427 = trunc i64 %2426 to i8
  %2428 = and i8 %2427, 1
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2428, i8* %2429, align 1, !tbaa !2447
  %2430 = icmp eq i64 %2411, 0
  %2431 = zext i1 %2430 to i8
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2431, i8* %2432, align 1, !tbaa !2448
  %2433 = lshr i64 %2411, 63
  %2434 = trunc i64 %2433 to i8
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2434, i8* %2435, align 1, !tbaa !2449
  %2436 = lshr i64 %2408, 63
  %2437 = xor i64 %2433, %2436
  %2438 = add nuw nsw i64 %2437, %2433
  %2439 = icmp eq i64 %2438, 2
  %2440 = zext i1 %2439 to i8
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2440, i8* %2441, align 1, !tbaa !2450
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 8
  %2444 = load i64, i64* %RCX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 4
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2443 to i64*
  store i64 %2444, i64* %2447
  %2448 = load i64, i64* %RAX
  %2449 = load i64, i64* %PC
  %2450 = add i64 %2449, 3
  store i64 %2450, i64* %PC
  %2451 = inttoptr i64 %2448 to i32*
  %2452 = load i32, i32* %2451
  %2453 = sext i32 %2452 to i64
  store i64 %2453, i64* %RAX, align 8, !tbaa !2428
  %2454 = load i64, i64* %RAX
  %2455 = mul i64 %2454, 8
  %2456 = add i64 %2455, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 8
  store i64 %2458, i64* %PC
  %2459 = inttoptr i64 %2456 to i64*
  %2460 = load i64, i64* %2459
  store i64 %2460, i64* %RAX, align 8, !tbaa !2428
  %2461 = load i64, i64* %RBP
  %2462 = sub i64 %2461, 40
  %2463 = load i64, i64* %RAX
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 4
  store i64 %2465, i64* %PC
  %2466 = inttoptr i64 %2462 to i64*
  store i64 %2463, i64* %2466
  %2467 = load i64, i64* %PC
  %2468 = sub i64 %2467, 951
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2468, i64* %2471, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2472 = load i64, i64* %RBP
  %2473 = sub i64 %2472, 12
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 7
  store i64 %2475, i64* %PC
  %2476 = inttoptr i64 %2473 to i32*
  store i32 14, i32* %2476
  br label %block_40081d

block_400593:                                     ; preds = %block_40056b, %block_40058c
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.32, %block_40058c ], [ %MEMORY.10, %block_40056b ]
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 12
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 3
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2478 to i32*
  %2482 = load i32, i32* %2481
  %2483 = zext i32 %2482 to i64
  store i64 %2483, i64* %RDI, align 8, !tbaa !2428
  %2484 = load i64, i64* %PC
  %2485 = sub i64 %2484, 134
  %2486 = load i64, i64* %PC
  %2487 = add i64 %2486, 5
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 5
  store i64 %2489, i64* %PC
  %2490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2491 = load i64, i64* %2490, align 8, !tbaa !2428
  %2492 = add i64 %2491, -8
  %2493 = inttoptr i64 %2492 to i64*
  store i64 %2487, i64* %2493
  store i64 %2492, i64* %2490, align 8, !tbaa !2428
  %2494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2485, i64* %2494, align 8, !tbaa !2428
  %2495 = load i64, i64* %PC
  %2496 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2495, %struct.Memory* %MEMORY.24)
  %2497 = load i64, i64* %RBP
  %2498 = sub i64 %2497, 8
  %2499 = load i64, i64* %PC
  %2500 = add i64 %2499, 4
  store i64 %2500, i64* %PC
  %2501 = inttoptr i64 %2498 to i64*
  %2502 = load i64, i64* %2501
  store i64 %2502, i64* %RAX, align 8, !tbaa !2428
  %2503 = load i64, i64* %RAX
  %2504 = load i64, i64* %PC
  %2505 = add i64 %2504, 3
  store i64 %2505, i64* %PC
  store i64 %2503, i64* %RCX, align 8, !tbaa !2428
  %2506 = load i64, i64* %RCX
  %2507 = load i64, i64* %PC
  %2508 = add i64 %2507, 4
  store i64 %2508, i64* %PC
  %2509 = add i64 4, %2506
  store i64 %2509, i64* %RCX, align 8, !tbaa !2428
  %2510 = icmp ult i64 %2509, %2506
  %2511 = icmp ult i64 %2509, 4
  %2512 = or i1 %2510, %2511
  %2513 = zext i1 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2513, i8* %2514, align 1, !tbaa !2432
  %2515 = trunc i64 %2509 to i32
  %2516 = and i32 %2515, 255
  %2517 = call i32 @llvm.ctpop.i32(i32 %2516) #16
  %2518 = trunc i32 %2517 to i8
  %2519 = and i8 %2518, 1
  %2520 = xor i8 %2519, 1
  %2521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2520, i8* %2521, align 1, !tbaa !2446
  %2522 = xor i64 4, %2506
  %2523 = xor i64 %2522, %2509
  %2524 = lshr i64 %2523, 4
  %2525 = trunc i64 %2524 to i8
  %2526 = and i8 %2525, 1
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2526, i8* %2527, align 1, !tbaa !2447
  %2528 = icmp eq i64 %2509, 0
  %2529 = zext i1 %2528 to i8
  %2530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2529, i8* %2530, align 1, !tbaa !2448
  %2531 = lshr i64 %2509, 63
  %2532 = trunc i64 %2531 to i8
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2532, i8* %2533, align 1, !tbaa !2449
  %2534 = lshr i64 %2506, 63
  %2535 = xor i64 %2531, %2534
  %2536 = add nuw nsw i64 %2535, %2531
  %2537 = icmp eq i64 %2536, 2
  %2538 = zext i1 %2537 to i8
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2538, i8* %2539, align 1, !tbaa !2450
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 8
  %2542 = load i64, i64* %RCX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2541 to i64*
  store i64 %2542, i64* %2545
  %2546 = load i64, i64* %RAX
  %2547 = load i64, i64* %PC
  %2548 = add i64 %2547, 3
  store i64 %2548, i64* %PC
  %2549 = inttoptr i64 %2546 to i32*
  %2550 = load i32, i32* %2549
  %2551 = sext i32 %2550 to i64
  store i64 %2551, i64* %RAX, align 8, !tbaa !2428
  %2552 = load i64, i64* %RAX
  %2553 = mul i64 %2552, 8
  %2554 = add i64 %2553, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 8
  store i64 %2556, i64* %PC
  %2557 = inttoptr i64 %2554 to i64*
  %2558 = load i64, i64* %2557
  store i64 %2558, i64* %RAX, align 8, !tbaa !2428
  %2559 = load i64, i64* %RBP
  %2560 = sub i64 %2559, 40
  %2561 = load i64, i64* %RAX
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 4
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2560 to i64*
  store i64 %2561, i64* %2564
  %2565 = load i64, i64* %PC
  %2566 = sub i64 %2565, 51
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  store i64 %2568, i64* %PC
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2566, i64* %2569, align 8, !tbaa !2428
  br label %block_400586

block_400881:                                     ; preds = %block_40056b, %block_40087a
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.32, %block_40087a ], [ %MEMORY.10, %block_40056b ]
  %2570 = load i64, i64* %RBP
  %2571 = sub i64 %2570, 12
  %2572 = load i64, i64* %PC
  %2573 = add i64 %2572, 3
  store i64 %2573, i64* %PC
  %2574 = inttoptr i64 %2571 to i32*
  %2575 = load i32, i32* %2574
  %2576 = zext i32 %2575 to i64
  store i64 %2576, i64* %RDI, align 8, !tbaa !2428
  %2577 = load i64, i64* %PC
  %2578 = sub i64 %2577, 884
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 5
  %2581 = load i64, i64* %PC
  %2582 = add i64 %2581, 5
  store i64 %2582, i64* %PC
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2584 = load i64, i64* %2583, align 8, !tbaa !2428
  %2585 = add i64 %2584, -8
  %2586 = inttoptr i64 %2585 to i64*
  store i64 %2580, i64* %2586
  store i64 %2585, i64* %2583, align 8, !tbaa !2428
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2578, i64* %2587, align 8, !tbaa !2428
  %2588 = load i64, i64* %PC
  %2589 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2588, %struct.Memory* %MEMORY.25)
  %2590 = load i64, i64* %RBP
  %2591 = sub i64 %2590, 8
  %2592 = load i64, i64* %PC
  %2593 = add i64 %2592, 4
  store i64 %2593, i64* %PC
  %2594 = inttoptr i64 %2591 to i64*
  %2595 = load i64, i64* %2594
  store i64 %2595, i64* %RAX, align 8, !tbaa !2428
  %2596 = load i64, i64* %RAX
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 3
  store i64 %2598, i64* %PC
  store i64 %2596, i64* %RCX, align 8, !tbaa !2428
  %2599 = load i64, i64* %RCX
  %2600 = load i64, i64* %PC
  %2601 = add i64 %2600, 4
  store i64 %2601, i64* %PC
  %2602 = add i64 4, %2599
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = icmp ult i64 %2602, %2599
  %2604 = icmp ult i64 %2602, 4
  %2605 = or i1 %2603, %2604
  %2606 = zext i1 %2605 to i8
  %2607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2606, i8* %2607, align 1, !tbaa !2432
  %2608 = trunc i64 %2602 to i32
  %2609 = and i32 %2608, 255
  %2610 = call i32 @llvm.ctpop.i32(i32 %2609) #16
  %2611 = trunc i32 %2610 to i8
  %2612 = and i8 %2611, 1
  %2613 = xor i8 %2612, 1
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2613, i8* %2614, align 1, !tbaa !2446
  %2615 = xor i64 4, %2599
  %2616 = xor i64 %2615, %2602
  %2617 = lshr i64 %2616, 4
  %2618 = trunc i64 %2617 to i8
  %2619 = and i8 %2618, 1
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2619, i8* %2620, align 1, !tbaa !2447
  %2621 = icmp eq i64 %2602, 0
  %2622 = zext i1 %2621 to i8
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2622, i8* %2623, align 1, !tbaa !2448
  %2624 = lshr i64 %2602, 63
  %2625 = trunc i64 %2624 to i8
  %2626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2625, i8* %2626, align 1, !tbaa !2449
  %2627 = lshr i64 %2599, 63
  %2628 = xor i64 %2624, %2627
  %2629 = add nuw nsw i64 %2628, %2624
  %2630 = icmp eq i64 %2629, 2
  %2631 = zext i1 %2630 to i8
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2631, i8* %2632, align 1, !tbaa !2450
  %2633 = load i64, i64* %RBP
  %2634 = sub i64 %2633, 8
  %2635 = load i64, i64* %RCX
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 4
  store i64 %2637, i64* %PC
  %2638 = inttoptr i64 %2634 to i64*
  store i64 %2635, i64* %2638
  %2639 = load i64, i64* %RAX
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 3
  store i64 %2641, i64* %PC
  %2642 = inttoptr i64 %2639 to i32*
  %2643 = load i32, i32* %2642
  %2644 = sext i32 %2643 to i64
  store i64 %2644, i64* %RAX, align 8, !tbaa !2428
  %2645 = load i64, i64* %RAX
  %2646 = mul i64 %2645, 8
  %2647 = add i64 %2646, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 8
  store i64 %2649, i64* %PC
  %2650 = inttoptr i64 %2647 to i64*
  %2651 = load i64, i64* %2650
  store i64 %2651, i64* %RAX, align 8, !tbaa !2428
  %2652 = load i64, i64* %RBP
  %2653 = sub i64 %2652, 40
  %2654 = load i64, i64* %RAX
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 4
  store i64 %2656, i64* %PC
  %2657 = inttoptr i64 %2653 to i64*
  store i64 %2654, i64* %2657
  %2658 = load i64, i64* %PC
  %2659 = sub i64 %2658, 801
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 5
  store i64 %2661, i64* %PC
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2659, i64* %2662, align 8, !tbaa !2428
  br label %block_400586

block_400a11:                                     ; preds = %block_40056b, %block_400a0a
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.32, %block_400a0a ], [ %MEMORY.10, %block_40056b ]
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 12
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 3
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i32*
  %2668 = load i32, i32* %2667
  %2669 = zext i32 %2668 to i64
  store i64 %2669, i64* %RDI, align 8, !tbaa !2428
  %2670 = load i64, i64* %PC
  %2671 = sub i64 %2670, 1284
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 5
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 5
  store i64 %2675, i64* %PC
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2677 = load i64, i64* %2676, align 8, !tbaa !2428
  %2678 = add i64 %2677, -8
  %2679 = inttoptr i64 %2678 to i64*
  store i64 %2673, i64* %2679
  store i64 %2678, i64* %2676, align 8, !tbaa !2428
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2671, i64* %2680, align 8, !tbaa !2428
  %2681 = load i64, i64* %PC
  %2682 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2681, %struct.Memory* %MEMORY.26)
  %2683 = load i64, i64* %RBP
  %2684 = sub i64 %2683, 8
  %2685 = load i64, i64* %PC
  %2686 = add i64 %2685, 4
  store i64 %2686, i64* %PC
  %2687 = inttoptr i64 %2684 to i64*
  %2688 = load i64, i64* %2687
  store i64 %2688, i64* %RAX, align 8, !tbaa !2428
  %2689 = load i64, i64* %RAX
  %2690 = load i64, i64* %PC
  %2691 = add i64 %2690, 3
  store i64 %2691, i64* %PC
  store i64 %2689, i64* %RCX, align 8, !tbaa !2428
  %2692 = load i64, i64* %RCX
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 4
  store i64 %2694, i64* %PC
  %2695 = add i64 4, %2692
  store i64 %2695, i64* %RCX, align 8, !tbaa !2428
  %2696 = icmp ult i64 %2695, %2692
  %2697 = icmp ult i64 %2695, 4
  %2698 = or i1 %2696, %2697
  %2699 = zext i1 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2699, i8* %2700, align 1, !tbaa !2432
  %2701 = trunc i64 %2695 to i32
  %2702 = and i32 %2701, 255
  %2703 = call i32 @llvm.ctpop.i32(i32 %2702) #16
  %2704 = trunc i32 %2703 to i8
  %2705 = and i8 %2704, 1
  %2706 = xor i8 %2705, 1
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2706, i8* %2707, align 1, !tbaa !2446
  %2708 = xor i64 4, %2692
  %2709 = xor i64 %2708, %2695
  %2710 = lshr i64 %2709, 4
  %2711 = trunc i64 %2710 to i8
  %2712 = and i8 %2711, 1
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2712, i8* %2713, align 1, !tbaa !2447
  %2714 = icmp eq i64 %2695, 0
  %2715 = zext i1 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2715, i8* %2716, align 1, !tbaa !2448
  %2717 = lshr i64 %2695, 63
  %2718 = trunc i64 %2717 to i8
  %2719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2718, i8* %2719, align 1, !tbaa !2449
  %2720 = lshr i64 %2692, 63
  %2721 = xor i64 %2717, %2720
  %2722 = add nuw nsw i64 %2721, %2717
  %2723 = icmp eq i64 %2722, 2
  %2724 = zext i1 %2723 to i8
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2724, i8* %2725, align 1, !tbaa !2450
  %2726 = load i64, i64* %RBP
  %2727 = sub i64 %2726, 8
  %2728 = load i64, i64* %RCX
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 4
  store i64 %2730, i64* %PC
  %2731 = inttoptr i64 %2727 to i64*
  store i64 %2728, i64* %2731
  %2732 = load i64, i64* %RAX
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 3
  store i64 %2734, i64* %PC
  %2735 = inttoptr i64 %2732 to i32*
  %2736 = load i32, i32* %2735
  %2737 = sext i32 %2736 to i64
  store i64 %2737, i64* %RAX, align 8, !tbaa !2428
  %2738 = load i64, i64* %RAX
  %2739 = mul i64 %2738, 8
  %2740 = add i64 %2739, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 8
  store i64 %2742, i64* %PC
  %2743 = inttoptr i64 %2740 to i64*
  %2744 = load i64, i64* %2743
  store i64 %2744, i64* %RAX, align 8, !tbaa !2428
  %2745 = load i64, i64* %RBP
  %2746 = sub i64 %2745, 40
  %2747 = load i64, i64* %RAX
  %2748 = load i64, i64* %PC
  %2749 = add i64 %2748, 4
  store i64 %2749, i64* %PC
  %2750 = inttoptr i64 %2746 to i64*
  store i64 %2747, i64* %2750
  %2751 = load i64, i64* %PC
  %2752 = sub i64 %2751, 1201
  %2753 = load i64, i64* %PC
  %2754 = add i64 %2753, 5
  store i64 %2754, i64* %PC
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2752, i64* %2755, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2756 = load i64, i64* %RBP
  %2757 = sub i64 %2756, 12
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 7
  store i64 %2759, i64* %PC
  %2760 = inttoptr i64 %2757 to i32*
  store i32 19, i32* %2760
  br label %block_400917

block_40068d:                                     ; preds = %block_40056b, %block_400686
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.32, %block_400686 ], [ %MEMORY.10, %block_40056b ]
  %2761 = load i64, i64* %RBP
  %2762 = sub i64 %2761, 12
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 3
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %2762 to i32*
  %2766 = load i32, i32* %2765
  %2767 = zext i32 %2766 to i64
  store i64 %2767, i64* %RDI, align 8, !tbaa !2428
  %2768 = load i64, i64* %PC
  %2769 = sub i64 %2768, 384
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 5
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 5
  store i64 %2773, i64* %PC
  %2774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2775 = load i64, i64* %2774, align 8, !tbaa !2428
  %2776 = add i64 %2775, -8
  %2777 = inttoptr i64 %2776 to i64*
  store i64 %2771, i64* %2777
  store i64 %2776, i64* %2774, align 8, !tbaa !2428
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2769, i64* %2778, align 8, !tbaa !2428
  %2779 = load i64, i64* %PC
  %2780 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2779, %struct.Memory* %MEMORY.27)
  %2781 = load i64, i64* %RBP
  %2782 = sub i64 %2781, 8
  %2783 = load i64, i64* %PC
  %2784 = add i64 %2783, 4
  store i64 %2784, i64* %PC
  %2785 = inttoptr i64 %2782 to i64*
  %2786 = load i64, i64* %2785
  store i64 %2786, i64* %RAX, align 8, !tbaa !2428
  %2787 = load i64, i64* %RAX
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 3
  store i64 %2789, i64* %PC
  store i64 %2787, i64* %RCX, align 8, !tbaa !2428
  %2790 = load i64, i64* %RCX
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 4
  store i64 %2792, i64* %PC
  %2793 = add i64 4, %2790
  store i64 %2793, i64* %RCX, align 8, !tbaa !2428
  %2794 = icmp ult i64 %2793, %2790
  %2795 = icmp ult i64 %2793, 4
  %2796 = or i1 %2794, %2795
  %2797 = zext i1 %2796 to i8
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2797, i8* %2798, align 1, !tbaa !2432
  %2799 = trunc i64 %2793 to i32
  %2800 = and i32 %2799, 255
  %2801 = call i32 @llvm.ctpop.i32(i32 %2800) #16
  %2802 = trunc i32 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = xor i8 %2803, 1
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2804, i8* %2805, align 1, !tbaa !2446
  %2806 = xor i64 4, %2790
  %2807 = xor i64 %2806, %2793
  %2808 = lshr i64 %2807, 4
  %2809 = trunc i64 %2808 to i8
  %2810 = and i8 %2809, 1
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2810, i8* %2811, align 1, !tbaa !2447
  %2812 = icmp eq i64 %2793, 0
  %2813 = zext i1 %2812 to i8
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2813, i8* %2814, align 1, !tbaa !2448
  %2815 = lshr i64 %2793, 63
  %2816 = trunc i64 %2815 to i8
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2816, i8* %2817, align 1, !tbaa !2449
  %2818 = lshr i64 %2790, 63
  %2819 = xor i64 %2815, %2818
  %2820 = add nuw nsw i64 %2819, %2815
  %2821 = icmp eq i64 %2820, 2
  %2822 = zext i1 %2821 to i8
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2822, i8* %2823, align 1, !tbaa !2450
  %2824 = load i64, i64* %RBP
  %2825 = sub i64 %2824, 8
  %2826 = load i64, i64* %RCX
  %2827 = load i64, i64* %PC
  %2828 = add i64 %2827, 4
  store i64 %2828, i64* %PC
  %2829 = inttoptr i64 %2825 to i64*
  store i64 %2826, i64* %2829
  %2830 = load i64, i64* %RAX
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 3
  store i64 %2832, i64* %PC
  %2833 = inttoptr i64 %2830 to i32*
  %2834 = load i32, i32* %2833
  %2835 = sext i32 %2834 to i64
  store i64 %2835, i64* %RAX, align 8, !tbaa !2428
  %2836 = load i64, i64* %RAX
  %2837 = mul i64 %2836, 8
  %2838 = add i64 %2837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 8
  store i64 %2840, i64* %PC
  %2841 = inttoptr i64 %2838 to i64*
  %2842 = load i64, i64* %2841
  store i64 %2842, i64* %RAX, align 8, !tbaa !2428
  %2843 = load i64, i64* %RBP
  %2844 = sub i64 %2843, 40
  %2845 = load i64, i64* %RAX
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 4
  store i64 %2847, i64* %PC
  %2848 = inttoptr i64 %2844 to i64*
  store i64 %2845, i64* %2848
  %2849 = load i64, i64* %PC
  %2850 = sub i64 %2849, 301
  %2851 = load i64, i64* %PC
  %2852 = add i64 %2851, 5
  store i64 %2852, i64* %PC
  %2853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2850, i64* %2853, align 8, !tbaa !2428
  br label %block_400586

block_400a43:                                     ; preds = %block_40056b, %block_400a3c
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.32, %block_400a3c ], [ %MEMORY.10, %block_40056b ]
  %2854 = load i64, i64* %RBP
  %2855 = sub i64 %2854, 12
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 3
  store i64 %2857, i64* %PC
  %2858 = inttoptr i64 %2855 to i32*
  %2859 = load i32, i32* %2858
  %2860 = zext i32 %2859 to i64
  store i64 %2860, i64* %RDI, align 8, !tbaa !2428
  %2861 = load i64, i64* %PC
  %2862 = sub i64 %2861, 1334
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 5
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 5
  store i64 %2866, i64* %PC
  %2867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2868 = load i64, i64* %2867, align 8, !tbaa !2428
  %2869 = add i64 %2868, -8
  %2870 = inttoptr i64 %2869 to i64*
  store i64 %2864, i64* %2870
  store i64 %2869, i64* %2867, align 8, !tbaa !2428
  %2871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2862, i64* %2871, align 8, !tbaa !2428
  %2872 = load i64, i64* %PC
  %2873 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2872, %struct.Memory* %MEMORY.28)
  %2874 = load i64, i64* %RBP
  %2875 = sub i64 %2874, 8
  %2876 = load i64, i64* %PC
  %2877 = add i64 %2876, 4
  store i64 %2877, i64* %PC
  %2878 = inttoptr i64 %2875 to i64*
  %2879 = load i64, i64* %2878
  store i64 %2879, i64* %RAX, align 8, !tbaa !2428
  %2880 = load i64, i64* %RAX
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 3
  store i64 %2882, i64* %PC
  store i64 %2880, i64* %RCX, align 8, !tbaa !2428
  %2883 = load i64, i64* %RCX
  %2884 = load i64, i64* %PC
  %2885 = add i64 %2884, 4
  store i64 %2885, i64* %PC
  %2886 = add i64 4, %2883
  store i64 %2886, i64* %RCX, align 8, !tbaa !2428
  %2887 = icmp ult i64 %2886, %2883
  %2888 = icmp ult i64 %2886, 4
  %2889 = or i1 %2887, %2888
  %2890 = zext i1 %2889 to i8
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2890, i8* %2891, align 1, !tbaa !2432
  %2892 = trunc i64 %2886 to i32
  %2893 = and i32 %2892, 255
  %2894 = call i32 @llvm.ctpop.i32(i32 %2893) #16
  %2895 = trunc i32 %2894 to i8
  %2896 = and i8 %2895, 1
  %2897 = xor i8 %2896, 1
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2897, i8* %2898, align 1, !tbaa !2446
  %2899 = xor i64 4, %2883
  %2900 = xor i64 %2899, %2886
  %2901 = lshr i64 %2900, 4
  %2902 = trunc i64 %2901 to i8
  %2903 = and i8 %2902, 1
  %2904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2903, i8* %2904, align 1, !tbaa !2447
  %2905 = icmp eq i64 %2886, 0
  %2906 = zext i1 %2905 to i8
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2906, i8* %2907, align 1, !tbaa !2448
  %2908 = lshr i64 %2886, 63
  %2909 = trunc i64 %2908 to i8
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2909, i8* %2910, align 1, !tbaa !2449
  %2911 = lshr i64 %2883, 63
  %2912 = xor i64 %2908, %2911
  %2913 = add nuw nsw i64 %2912, %2908
  %2914 = icmp eq i64 %2913, 2
  %2915 = zext i1 %2914 to i8
  %2916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2915, i8* %2916, align 1, !tbaa !2450
  %2917 = load i64, i64* %RBP
  %2918 = sub i64 %2917, 8
  %2919 = load i64, i64* %RCX
  %2920 = load i64, i64* %PC
  %2921 = add i64 %2920, 4
  store i64 %2921, i64* %PC
  %2922 = inttoptr i64 %2918 to i64*
  store i64 %2919, i64* %2922
  %2923 = load i64, i64* %RAX
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 3
  store i64 %2925, i64* %PC
  %2926 = inttoptr i64 %2923 to i32*
  %2927 = load i32, i32* %2926
  %2928 = sext i32 %2927 to i64
  store i64 %2928, i64* %RAX, align 8, !tbaa !2428
  %2929 = load i64, i64* %RAX
  %2930 = mul i64 %2929, 8
  %2931 = add i64 %2930, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2932 = load i64, i64* %PC
  %2933 = add i64 %2932, 8
  store i64 %2933, i64* %PC
  %2934 = inttoptr i64 %2931 to i64*
  %2935 = load i64, i64* %2934
  store i64 %2935, i64* %RAX, align 8, !tbaa !2428
  %2936 = load i64, i64* %RBP
  %2937 = sub i64 %2936, 40
  %2938 = load i64, i64* %RAX
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 4
  store i64 %2940, i64* %PC
  %2941 = inttoptr i64 %2937 to i64*
  store i64 %2938, i64* %2941
  %2942 = load i64, i64* %PC
  %2943 = sub i64 %2942, 1251
  %2944 = load i64, i64* %PC
  %2945 = add i64 %2944, 5
  store i64 %2945, i64* %PC
  %2946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2943, i64* %2946, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2947 = load i64, i64* %RBP
  %2948 = sub i64 %2947, 12
  %2949 = load i64, i64* %PC
  %2950 = add i64 %2949, 7
  store i64 %2950, i64* %PC
  %2951 = inttoptr i64 %2948 to i32*
  store i32 1, i32* %2951
  br label %block_400593

block_400654:                                     ; preds = %block_400586
  %2952 = load i64, i64* %RBP
  %2953 = sub i64 %2952, 12
  %2954 = load i64, i64* %PC
  %2955 = add i64 %2954, 7
  store i64 %2955, i64* %PC
  %2956 = inttoptr i64 %2953 to i32*
  store i32 5, i32* %2956
  br label %block_40065b

block_400b0b:                                     ; preds = %block_40056b, %block_400b04
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.32, %block_400b04 ], [ %MEMORY.10, %block_40056b ]
  %2957 = load i64, i64* %RBP
  %2958 = sub i64 %2957, 12
  %2959 = load i64, i64* %PC
  %2960 = add i64 %2959, 3
  store i64 %2960, i64* %PC
  %2961 = inttoptr i64 %2958 to i32*
  %2962 = load i32, i32* %2961
  %2963 = zext i32 %2962 to i64
  store i64 %2963, i64* %RDI, align 8, !tbaa !2428
  %2964 = load i64, i64* %PC
  %2965 = sub i64 %2964, 1534
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 5
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 5
  store i64 %2969, i64* %PC
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2971 = load i64, i64* %2970, align 8, !tbaa !2428
  %2972 = add i64 %2971, -8
  %2973 = inttoptr i64 %2972 to i64*
  store i64 %2967, i64* %2973
  store i64 %2972, i64* %2970, align 8, !tbaa !2428
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2965, i64* %2974, align 8, !tbaa !2428
  %2975 = load i64, i64* %PC
  %2976 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2975, %struct.Memory* %MEMORY.29)
  %2977 = load i64, i64* %RBP
  %2978 = sub i64 %2977, 8
  %2979 = load i64, i64* %PC
  %2980 = add i64 %2979, 4
  store i64 %2980, i64* %PC
  %2981 = inttoptr i64 %2978 to i64*
  %2982 = load i64, i64* %2981
  store i64 %2982, i64* %RAX, align 8, !tbaa !2428
  %2983 = load i64, i64* %RAX
  %2984 = load i64, i64* %PC
  %2985 = add i64 %2984, 3
  store i64 %2985, i64* %PC
  store i64 %2983, i64* %RCX, align 8, !tbaa !2428
  %2986 = load i64, i64* %RCX
  %2987 = load i64, i64* %PC
  %2988 = add i64 %2987, 4
  store i64 %2988, i64* %PC
  %2989 = add i64 4, %2986
  store i64 %2989, i64* %RCX, align 8, !tbaa !2428
  %2990 = icmp ult i64 %2989, %2986
  %2991 = icmp ult i64 %2989, 4
  %2992 = or i1 %2990, %2991
  %2993 = zext i1 %2992 to i8
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2993, i8* %2994, align 1, !tbaa !2432
  %2995 = trunc i64 %2989 to i32
  %2996 = and i32 %2995, 255
  %2997 = call i32 @llvm.ctpop.i32(i32 %2996) #16
  %2998 = trunc i32 %2997 to i8
  %2999 = and i8 %2998, 1
  %3000 = xor i8 %2999, 1
  %3001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3000, i8* %3001, align 1, !tbaa !2446
  %3002 = xor i64 4, %2986
  %3003 = xor i64 %3002, %2989
  %3004 = lshr i64 %3003, 4
  %3005 = trunc i64 %3004 to i8
  %3006 = and i8 %3005, 1
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3006, i8* %3007, align 1, !tbaa !2447
  %3008 = icmp eq i64 %2989, 0
  %3009 = zext i1 %3008 to i8
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3009, i8* %3010, align 1, !tbaa !2448
  %3011 = lshr i64 %2989, 63
  %3012 = trunc i64 %3011 to i8
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3012, i8* %3013, align 1, !tbaa !2449
  %3014 = lshr i64 %2986, 63
  %3015 = xor i64 %3011, %3014
  %3016 = add nuw nsw i64 %3015, %3011
  %3017 = icmp eq i64 %3016, 2
  %3018 = zext i1 %3017 to i8
  %3019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3018, i8* %3019, align 1, !tbaa !2450
  %3020 = load i64, i64* %RBP
  %3021 = sub i64 %3020, 8
  %3022 = load i64, i64* %RCX
  %3023 = load i64, i64* %PC
  %3024 = add i64 %3023, 4
  store i64 %3024, i64* %PC
  %3025 = inttoptr i64 %3021 to i64*
  store i64 %3022, i64* %3025
  %3026 = load i64, i64* %RAX
  %3027 = load i64, i64* %PC
  %3028 = add i64 %3027, 3
  store i64 %3028, i64* %PC
  %3029 = inttoptr i64 %3026 to i32*
  %3030 = load i32, i32* %3029
  %3031 = sext i32 %3030 to i64
  store i64 %3031, i64* %RAX, align 8, !tbaa !2428
  %3032 = load i64, i64* %RAX
  %3033 = mul i64 %3032, 8
  %3034 = add i64 %3033, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3035 = load i64, i64* %PC
  %3036 = add i64 %3035, 8
  store i64 %3036, i64* %PC
  %3037 = inttoptr i64 %3034 to i64*
  %3038 = load i64, i64* %3037
  store i64 %3038, i64* %RAX, align 8, !tbaa !2428
  %3039 = load i64, i64* %RBP
  %3040 = sub i64 %3039, 40
  %3041 = load i64, i64* %RAX
  %3042 = load i64, i64* %PC
  %3043 = add i64 %3042, 4
  store i64 %3043, i64* %PC
  %3044 = inttoptr i64 %3040 to i64*
  store i64 %3041, i64* %3044
  %3045 = load i64, i64* %PC
  %3046 = sub i64 %3045, 1451
  %3047 = load i64, i64* %PC
  %3048 = add i64 %3047, 5
  store i64 %3048, i64* %PC
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3046, i64* %3049, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %3050 = load i64, i64* %RBP
  %3051 = sub i64 %3050, 12
  %3052 = load i64, i64* %PC
  %3053 = add i64 %3052, 7
  store i64 %3053, i64* %PC
  %3054 = inttoptr i64 %3051 to i32*
  store i32 24, i32* %3054
  br label %block_400a11

block_400787:                                     ; preds = %block_400780, %block_40056b
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.32, %block_400780 ], [ %MEMORY.10, %block_40056b ]
  %3055 = load i64, i64* %RBP
  %3056 = sub i64 %3055, 12
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 3
  store i64 %3058, i64* %PC
  %3059 = inttoptr i64 %3056 to i32*
  %3060 = load i32, i32* %3059
  %3061 = zext i32 %3060 to i64
  store i64 %3061, i64* %RDI, align 8, !tbaa !2428
  %3062 = load i64, i64* %PC
  %3063 = sub i64 %3062, 634
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 5
  %3066 = load i64, i64* %PC
  %3067 = add i64 %3066, 5
  store i64 %3067, i64* %PC
  %3068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3069 = load i64, i64* %3068, align 8, !tbaa !2428
  %3070 = add i64 %3069, -8
  %3071 = inttoptr i64 %3070 to i64*
  store i64 %3065, i64* %3071
  store i64 %3070, i64* %3068, align 8, !tbaa !2428
  %3072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3063, i64* %3072, align 8, !tbaa !2428
  %3073 = load i64, i64* %PC
  %3074 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %3073, %struct.Memory* %MEMORY.30)
  %3075 = load i64, i64* %RBP
  %3076 = sub i64 %3075, 8
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 4
  store i64 %3078, i64* %PC
  %3079 = inttoptr i64 %3076 to i64*
  %3080 = load i64, i64* %3079
  store i64 %3080, i64* %RAX, align 8, !tbaa !2428
  %3081 = load i64, i64* %RAX
  %3082 = load i64, i64* %PC
  %3083 = add i64 %3082, 3
  store i64 %3083, i64* %PC
  store i64 %3081, i64* %RCX, align 8, !tbaa !2428
  %3084 = load i64, i64* %RCX
  %3085 = load i64, i64* %PC
  %3086 = add i64 %3085, 4
  store i64 %3086, i64* %PC
  %3087 = add i64 4, %3084
  store i64 %3087, i64* %RCX, align 8, !tbaa !2428
  %3088 = icmp ult i64 %3087, %3084
  %3089 = icmp ult i64 %3087, 4
  %3090 = or i1 %3088, %3089
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3091, i8* %3092, align 1, !tbaa !2432
  %3093 = trunc i64 %3087 to i32
  %3094 = and i32 %3093, 255
  %3095 = call i32 @llvm.ctpop.i32(i32 %3094) #16
  %3096 = trunc i32 %3095 to i8
  %3097 = and i8 %3096, 1
  %3098 = xor i8 %3097, 1
  %3099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3098, i8* %3099, align 1, !tbaa !2446
  %3100 = xor i64 4, %3084
  %3101 = xor i64 %3100, %3087
  %3102 = lshr i64 %3101, 4
  %3103 = trunc i64 %3102 to i8
  %3104 = and i8 %3103, 1
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3104, i8* %3105, align 1, !tbaa !2447
  %3106 = icmp eq i64 %3087, 0
  %3107 = zext i1 %3106 to i8
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3107, i8* %3108, align 1, !tbaa !2448
  %3109 = lshr i64 %3087, 63
  %3110 = trunc i64 %3109 to i8
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3110, i8* %3111, align 1, !tbaa !2449
  %3112 = lshr i64 %3084, 63
  %3113 = xor i64 %3109, %3112
  %3114 = add nuw nsw i64 %3113, %3109
  %3115 = icmp eq i64 %3114, 2
  %3116 = zext i1 %3115 to i8
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3116, i8* %3117, align 1, !tbaa !2450
  %3118 = load i64, i64* %RBP
  %3119 = sub i64 %3118, 8
  %3120 = load i64, i64* %RCX
  %3121 = load i64, i64* %PC
  %3122 = add i64 %3121, 4
  store i64 %3122, i64* %PC
  %3123 = inttoptr i64 %3119 to i64*
  store i64 %3120, i64* %3123
  %3124 = load i64, i64* %RAX
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 3
  store i64 %3126, i64* %PC
  %3127 = inttoptr i64 %3124 to i32*
  %3128 = load i32, i32* %3127
  %3129 = sext i32 %3128 to i64
  store i64 %3129, i64* %RAX, align 8, !tbaa !2428
  %3130 = load i64, i64* %RAX
  %3131 = mul i64 %3130, 8
  %3132 = add i64 %3131, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3133 = load i64, i64* %PC
  %3134 = add i64 %3133, 8
  store i64 %3134, i64* %PC
  %3135 = inttoptr i64 %3132 to i64*
  %3136 = load i64, i64* %3135
  store i64 %3136, i64* %RAX, align 8, !tbaa !2428
  %3137 = load i64, i64* %RBP
  %3138 = sub i64 %3137, 40
  %3139 = load i64, i64* %RAX
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 4
  store i64 %3141, i64* %PC
  %3142 = inttoptr i64 %3138 to i64*
  store i64 %3139, i64* %3142
  %3143 = load i64, i64* %PC
  %3144 = sub i64 %3143, 551
  %3145 = load i64, i64* %PC
  %3146 = add i64 %3145, 5
  store i64 %3146, i64* %PC
  %3147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3144, i64* %3147, align 8, !tbaa !2428
  br label %block_400586

block_40065b:                                     ; preds = %block_40056b, %block_400654
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.32, %block_400654 ], [ %MEMORY.10, %block_40056b ]
  %3148 = load i64, i64* %RBP
  %3149 = sub i64 %3148, 12
  %3150 = load i64, i64* %PC
  %3151 = add i64 %3150, 3
  store i64 %3151, i64* %PC
  %3152 = inttoptr i64 %3149 to i32*
  %3153 = load i32, i32* %3152
  %3154 = zext i32 %3153 to i64
  store i64 %3154, i64* %RDI, align 8, !tbaa !2428
  %3155 = load i64, i64* %PC
  %3156 = sub i64 %3155, 334
  %3157 = load i64, i64* %PC
  %3158 = add i64 %3157, 5
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 5
  store i64 %3160, i64* %PC
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3162 = load i64, i64* %3161, align 8, !tbaa !2428
  %3163 = add i64 %3162, -8
  %3164 = inttoptr i64 %3163 to i64*
  store i64 %3158, i64* %3164
  store i64 %3163, i64* %3161, align 8, !tbaa !2428
  %3165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3156, i64* %3165, align 8, !tbaa !2428
  %3166 = load i64, i64* %PC
  %3167 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %3166, %struct.Memory* %MEMORY.31)
  %3168 = load i64, i64* %RBP
  %3169 = sub i64 %3168, 8
  %3170 = load i64, i64* %PC
  %3171 = add i64 %3170, 4
  store i64 %3171, i64* %PC
  %3172 = inttoptr i64 %3169 to i64*
  %3173 = load i64, i64* %3172
  store i64 %3173, i64* %RAX, align 8, !tbaa !2428
  %3174 = load i64, i64* %RAX
  %3175 = load i64, i64* %PC
  %3176 = add i64 %3175, 3
  store i64 %3176, i64* %PC
  store i64 %3174, i64* %RCX, align 8, !tbaa !2428
  %3177 = load i64, i64* %RCX
  %3178 = load i64, i64* %PC
  %3179 = add i64 %3178, 4
  store i64 %3179, i64* %PC
  %3180 = add i64 4, %3177
  store i64 %3180, i64* %RCX, align 8, !tbaa !2428
  %3181 = icmp ult i64 %3180, %3177
  %3182 = icmp ult i64 %3180, 4
  %3183 = or i1 %3181, %3182
  %3184 = zext i1 %3183 to i8
  %3185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3184, i8* %3185, align 1, !tbaa !2432
  %3186 = trunc i64 %3180 to i32
  %3187 = and i32 %3186, 255
  %3188 = call i32 @llvm.ctpop.i32(i32 %3187) #16
  %3189 = trunc i32 %3188 to i8
  %3190 = and i8 %3189, 1
  %3191 = xor i8 %3190, 1
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3191, i8* %3192, align 1, !tbaa !2446
  %3193 = xor i64 4, %3177
  %3194 = xor i64 %3193, %3180
  %3195 = lshr i64 %3194, 4
  %3196 = trunc i64 %3195 to i8
  %3197 = and i8 %3196, 1
  %3198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3197, i8* %3198, align 1, !tbaa !2447
  %3199 = icmp eq i64 %3180, 0
  %3200 = zext i1 %3199 to i8
  %3201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3200, i8* %3201, align 1, !tbaa !2448
  %3202 = lshr i64 %3180, 63
  %3203 = trunc i64 %3202 to i8
  %3204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3203, i8* %3204, align 1, !tbaa !2449
  %3205 = lshr i64 %3177, 63
  %3206 = xor i64 %3202, %3205
  %3207 = add nuw nsw i64 %3206, %3202
  %3208 = icmp eq i64 %3207, 2
  %3209 = zext i1 %3208 to i8
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3209, i8* %3210, align 1, !tbaa !2450
  %3211 = load i64, i64* %RBP
  %3212 = sub i64 %3211, 8
  %3213 = load i64, i64* %RCX
  %3214 = load i64, i64* %PC
  %3215 = add i64 %3214, 4
  store i64 %3215, i64* %PC
  %3216 = inttoptr i64 %3212 to i64*
  store i64 %3213, i64* %3216
  %3217 = load i64, i64* %RAX
  %3218 = load i64, i64* %PC
  %3219 = add i64 %3218, 3
  store i64 %3219, i64* %PC
  %3220 = inttoptr i64 %3217 to i32*
  %3221 = load i32, i32* %3220
  %3222 = sext i32 %3221 to i64
  store i64 %3222, i64* %RAX, align 8, !tbaa !2428
  %3223 = load i64, i64* %RAX
  %3224 = mul i64 %3223, 8
  %3225 = add i64 %3224, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3226 = load i64, i64* %PC
  %3227 = add i64 %3226, 8
  store i64 %3227, i64* %PC
  %3228 = inttoptr i64 %3225 to i64*
  %3229 = load i64, i64* %3228
  store i64 %3229, i64* %RAX, align 8, !tbaa !2428
  %3230 = load i64, i64* %RBP
  %3231 = sub i64 %3230, 40
  %3232 = load i64, i64* %RAX
  %3233 = load i64, i64* %PC
  %3234 = add i64 %3233, 4
  store i64 %3234, i64* %PC
  %3235 = inttoptr i64 %3231 to i64*
  store i64 %3232, i64* %3235
  %3236 = load i64, i64* %PC
  %3237 = sub i64 %3236, 251
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 5
  store i64 %3239, i64* %PC
  %3240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3237, i64* %3240, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_40065b, %block_400787, %block_400b0b, %block_400a43, %block_40068d, %block_400a11, %block_400881, %block_400593, %block_400917, %block_40081d, %block_400ad9, %block_400723, %block_400b3d, %block_400aa7, %block_400629, %block_4009ad, %block_400a75, %block_4008b3, %block_400b6f, %block_4007b9, %block_4006bf, %block_4005c5, %block_400949, %block_40084f, %block_400755, %block_4009df, %block_4008e5, %block_4007eb, %block_4006f1, %block_4005f7, %block_40097b
  %MEMORY.32 = phi %struct.Memory* [ %986, %block_4005c5 ], [ %1796, %block_400629 ], [ %2780, %block_40068d ], [ %1698, %block_4009ad ], [ %1502, %block_4008b3 ], [ %1600, %block_400a75 ], [ %1306, %block_4007b9 ], [ %1992, %block_400b3d ], [ %1213, %block_4006bf ], [ %888, %block_400949 ], [ %496, %block_4008e5 ], [ %197, %block_4005f7 ], [ %790, %block_40084f ], [ %99, %block_40097b ], [ %692, %block_400755 ], [ %2496, %block_400593 ], [ %594, %block_4009df ], [ %2589, %block_400881 ], [ %295, %block_4006f1 ], [ %1399, %block_400b6f ], [ %393, %block_4007eb ], [ %2188, %block_400ad9 ], [ %1894, %block_400aa7 ], [ %2873, %block_400a43 ], [ %2095, %block_400723 ], [ %2300, %block_40081d ], [ %2398, %block_400917 ], [ %3167, %block_40065b ], [ %2682, %block_400a11 ], [ %2976, %block_400b0b ], [ %3074, %block_400787 ]
  %3241 = load i64, i64* %RBP
  %3242 = sub i64 %3241, 40
  %3243 = load i64, i64* %PC
  %3244 = add i64 %3243, 4
  store i64 %3244, i64* %PC
  %3245 = inttoptr i64 %3242 to i64*
  %3246 = load i64, i64* %3245
  store i64 %3246, i64* %RAX, align 8, !tbaa !2428
  %3247 = load i64, i64* %RAX
  %3248 = load i64, i64* %PC
  %3249 = add i64 %3248, 2
  store i64 %3249, i64* %PC
  %3250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3247, i64* %3250, align 8, !tbaa !2428
  %3251 = load i64, i64* %PC
  switch i64 %3251, label %3334 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4195924, label %block_400654
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196174, label %block_40074e
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4197279, label %block_400b9f
    i64 4196574, label %block_4008de
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4195774, label %block_4005be
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195974, label %block_400686
    i64 4195874, label %block_400622
  ]

block_400b04:                                     ; preds = %block_400586
  %3252 = load i64, i64* %RBP
  %3253 = sub i64 %3252, 12
  %3254 = load i64, i64* %PC
  %3255 = add i64 %3254, 7
  store i64 %3255, i64* %PC
  %3256 = inttoptr i64 %3253 to i32*
  store i32 29, i32* %3256
  br label %block_400b0b

block_40056b:                                     ; preds = %block_400543
  %3257 = load i64, i64* %RBP
  %3258 = sub i64 %3257, 24
  %3259 = load i64, i64* %PC
  %3260 = add i64 %3259, 4
  store i64 %3260, i64* %PC
  %3261 = inttoptr i64 %3258 to i64*
  %3262 = load i64, i64* %3261
  store i64 %3262, i64* %RAX, align 8, !tbaa !2428
  %3263 = load i64, i64* %RAX
  %3264 = mul i64 %3263, 8
  %3265 = add i64 %3264, add (i64 ptrtoint (%seg_400d00__rodata_type* @seg_400d00__rodata to i64), i64 8)
  %3266 = load i64, i64* %PC
  %3267 = add i64 %3266, 8
  store i64 %3267, i64* %PC
  %3268 = inttoptr i64 %3265 to i64*
  %3269 = load i64, i64* %3268
  store i64 %3269, i64* %RCX, align 8, !tbaa !2428
  %3270 = load i64, i64* %RCX
  %3271 = load i64, i64* %PC
  %3272 = add i64 %3271, 2
  store i64 %3272, i64* %PC
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3270, i64* %3273, align 8, !tbaa !2428
  %3274 = load i64, i64* %PC
  switch i64 %3274, label %3337 [
    i64 4197081, label %block_400ad9
    i64 4196181, label %block_400755
    i64 4196431, label %block_40084f
    i64 4196681, label %block_400949
    i64 4196031, label %block_4006bf
    i64 4197181, label %block_400b3d
    i64 4196281, label %block_4007b9
    i64 4196531, label %block_4008b3
    i64 4196781, label %block_4009ad
    i64 4195931, label %block_40065b
    i64 4196831, label %block_4009df
    i64 4196581, label %block_4008e5
    i64 4196381, label %block_40081d
    i64 4195831, label %block_4005f7
    i64 4196731, label %block_40097b
    i64 4196631, label %block_400917
    i64 4196081, label %block_4006f1
    i64 4197231, label %block_400b6f
    i64 4196131, label %block_400723
    i64 4196331, label %block_4007eb
    i64 4195731, label %block_400593
    i64 4196881, label %block_400a11
    i64 4197031, label %block_400aa7
    i64 4195881, label %block_400629
    i64 4196481, label %block_400881
    i64 4196231, label %block_400787
    i64 4195981, label %block_40068d
    i64 4197131, label %block_400b0b
    i64 4196981, label %block_400a75
    i64 4195712, label %block_400580
    i64 4196931, label %block_400a43
    i64 4195781, label %block_4005c5
  ]

block_400780:                                     ; preds = %block_400586
  %3275 = load i64, i64* %RBP
  %3276 = sub i64 %3275, 12
  %3277 = load i64, i64* %PC
  %3278 = add i64 %3277, 7
  store i64 %3278, i64* %PC
  %3279 = inttoptr i64 %3276 to i32*
  store i32 11, i32* %3279
  br label %block_400787

block_400b9a:                                     ; preds = %block_400543
  %3280 = load i64, i64* %PC
  %3281 = sub i64 %3280, 1623
  %3282 = load i64, i64* %PC
  %3283 = add i64 %3282, 5
  store i64 %3283, i64* %PC
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3281, i64* %3284, align 8, !tbaa !2428
  br label %block_400543

block_400580:                                     ; preds = %block_40056b, %block_400579
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.32, %block_400579 ], [ %MEMORY.10, %block_40056b ]
  %3285 = load i64, i64* %RSP
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 4
  store i64 %3287, i64* %PC
  %3288 = add i64 48, %3285
  store i64 %3288, i64* %RSP, align 8, !tbaa !2428
  %3289 = icmp ult i64 %3288, %3285
  %3290 = icmp ult i64 %3288, 48
  %3291 = or i1 %3289, %3290
  %3292 = zext i1 %3291 to i8
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3292, i8* %3293, align 1, !tbaa !2432
  %3294 = trunc i64 %3288 to i32
  %3295 = and i32 %3294, 255
  %3296 = call i32 @llvm.ctpop.i32(i32 %3295) #16
  %3297 = trunc i32 %3296 to i8
  %3298 = and i8 %3297, 1
  %3299 = xor i8 %3298, 1
  %3300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3299, i8* %3300, align 1, !tbaa !2446
  %3301 = xor i64 48, %3285
  %3302 = xor i64 %3301, %3288
  %3303 = lshr i64 %3302, 4
  %3304 = trunc i64 %3303 to i8
  %3305 = and i8 %3304, 1
  %3306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3305, i8* %3306, align 1, !tbaa !2447
  %3307 = icmp eq i64 %3288, 0
  %3308 = zext i1 %3307 to i8
  %3309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3308, i8* %3309, align 1, !tbaa !2448
  %3310 = lshr i64 %3288, 63
  %3311 = trunc i64 %3310 to i8
  %3312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3311, i8* %3312, align 1, !tbaa !2449
  %3313 = lshr i64 %3285, 63
  %3314 = xor i64 %3310, %3313
  %3315 = add nuw nsw i64 %3314, %3310
  %3316 = icmp eq i64 %3315, 2
  %3317 = zext i1 %3316 to i8
  %3318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3317, i8* %3318, align 1, !tbaa !2450
  %3319 = load i64, i64* %PC
  %3320 = add i64 %3319, 1
  store i64 %3320, i64* %PC
  %3321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3322 = load i64, i64* %3321, align 8, !tbaa !2428
  %3323 = add i64 %3322, 8
  %3324 = inttoptr i64 %3322 to i64*
  %3325 = load i64, i64* %3324
  store i64 %3325, i64* %RBP, align 8, !tbaa !2428
  store i64 %3323, i64* %3321, align 8, !tbaa !2428
  %3326 = load i64, i64* %PC
  %3327 = add i64 %3326, 1
  store i64 %3327, i64* %PC
  %3328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3330 = load i64, i64* %3329, align 8, !tbaa !2428
  %3331 = inttoptr i64 %3330 to i64*
  %3332 = load i64, i64* %3331
  store i64 %3332, i64* %3328, align 8, !tbaa !2428
  %3333 = add i64 %3330, 8
  store i64 %3333, i64* %3329, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.33

; <label>:3334:                                   ; preds = %block_400586
  %3335 = load i64, i64* %PC
  %3336 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3335, %struct.Memory* %MEMORY.32)
  ret %struct.Memory* %3336

; <label>:3337:                                   ; preds = %block_40056b
  %3338 = load i64, i64* %PC
  %3339 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %3338, %struct.Memory* %MEMORY.10)
  ret %struct.Memory* %3339
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b3d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400b3d

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_4005f7(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007e4:                                     ; preds = %block_400586
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 13, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %31, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %32

block_4008de:                                     ; preds = %block_400586
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 18, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %38, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %39

block_4009d8:                                     ; preds = %block_400586
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 23, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %46

block_400ad2:                                     ; preds = %block_400586
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 28, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %53

block_4006b8:                                     ; preds = %block_400586
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 7, i32* %58
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 12
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 434
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %77, %struct.Memory* %MEMORY.1)
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 8
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = load i64, i64* %RAX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  store i64 %85, i64* %RCX, align 8, !tbaa !2428
  %88 = load i64, i64* %RCX
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = add i64 4, %88
  store i64 %91, i64* %RCX, align 8, !tbaa !2428
  %92 = icmp ult i64 %91, %88
  %93 = icmp ult i64 %91, 4
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = trunc i64 %91 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2446
  %104 = xor i64 4, %88
  %105 = xor i64 %104, %91
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i64 %91, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %91, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i64 %88, 63
  %117 = xor i64 %113, %116
  %118 = add nuw nsw i64 %117, %113
  %119 = icmp eq i64 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %RCX
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %123 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  %132 = load i32, i32* %131
  %133 = sext i32 %132 to i64
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RAX
  %135 = mul i64 %134, 8
  %136 = add i64 %135, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 8
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 40
  %143 = load i64, i64* %RAX
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %146
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 351
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %151, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 12, i32* %156
  %157 = load i64, i64* %PC
  %158 = tail call %struct.Memory* @sub_4007b9(%struct.State* %0, i64 %157, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %158

block_4008ac:                                     ; preds = %block_400586
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 17, i32* %163
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %164, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %165

block_4009a6:                                     ; preds = %block_400586
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 12
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  store i32 22, i32* %170
  %171 = load i64, i64* %PC
  %172 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %172

block_400aa0:                                     ; preds = %block_400586
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 27, i32* %177
  %178 = load i64, i64* %PC
  %179 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %178, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %179

block_40058c:                                     ; preds = %block_400586
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 12
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 7
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  store i32 1, i32* %184
  %185 = load i64, i64* %PC
  %186 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %185, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %186

block_400686:                                     ; preds = %block_400586
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 6, i32* %191
  %192 = load i64, i64* %PC
  %193 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %192, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %193

block_40087a:                                     ; preds = %block_400586
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 12
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  store i32 16, i32* %198
  %199 = load i64, i64* %PC
  %200 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %199, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %200

block_400974:                                     ; preds = %block_400586
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 12
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 7
  store i64 %204, i64* %PC
  %205 = inttoptr i64 %202 to i32*
  store i32 21, i32* %205
  %206 = load i64, i64* %PC
  %207 = tail call %struct.Memory* @sub_40097b(%struct.State* %0, i64 %206, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %207

block_400a6e:                                     ; preds = %block_400586
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 12
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i32*
  store i32 26, i32* %212
  %213 = load i64, i64* %PC
  %214 = tail call %struct.Memory* @sub_400a75(%struct.State* %0, i64 %213, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %214

block_400780:                                     ; preds = %block_400586
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 11, i32* %219
  %220 = load i64, i64* %PC
  %221 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %220, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %221

block_400b68:                                     ; preds = %block_400586
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 31, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %228

block_400654:                                     ; preds = %block_400586
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 5, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %235

block_40074e:                                     ; preds = %block_400586
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 10, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %242

block_400848:                                     ; preds = %block_400586
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 15, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %249

block_4005be:                                     ; preds = %block_400586
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 2, i32* %254
  %255 = load i64, i64* %PC
  %256 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_400942:                                     ; preds = %block_400586
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  store i32 20, i32* %261
  %262 = load i64, i64* %PC
  %263 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %262, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %263

block_4006ea:                                     ; preds = %block_400586
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 12
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 7
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  store i32 8, i32* %268
  %269 = load i64, i64* %PC
  %270 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %270

block_400579:                                     ; preds = %block_400586
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 0, i32* %275
  %276 = load i64, i64* %PC
  %277 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %276, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %277

block_400b3d:                                     ; preds = %block_400b36, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400b36 ]
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 3
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  %283 = load i32, i32* %282
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RDI, align 8, !tbaa !2428
  %285 = load i64, i64* %PC
  %286 = sub i64 %285, 1584
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 5
  store i64 %290, i64* %PC
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %292 = load i64, i64* %291, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %288, i64* %294
  store i64 %293, i64* %291, align 8, !tbaa !2428
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %286, i64* %295, align 8, !tbaa !2428
  %296 = load i64, i64* %PC
  %297 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %296, %struct.Memory* %MEMORY.0)
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 8
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  store i64 %304, i64* %RCX, align 8, !tbaa !2428
  %307 = load i64, i64* %RCX
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = add i64 4, %307
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %311 = icmp ult i64 %310, %307
  %312 = icmp ult i64 %310, 4
  %313 = or i1 %311, %312
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %314, i8* %315, align 1, !tbaa !2432
  %316 = trunc i64 %310 to i32
  %317 = and i32 %316, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2446
  %323 = xor i64 4, %307
  %324 = xor i64 %323, %310
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2447
  %329 = icmp eq i64 %310, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2448
  %332 = lshr i64 %310, 63
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2449
  %335 = lshr i64 %307, 63
  %336 = xor i64 %332, %335
  %337 = add nuw nsw i64 %336, %332
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %339, i8* %340, align 1, !tbaa !2450
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 8
  %343 = load i64, i64* %RCX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %342 to i64*
  store i64 %343, i64* %346
  %347 = load i64, i64* %RAX
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = load i64, i64* %RAX
  %354 = mul i64 %353, 8
  %355 = add i64 %354, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 8
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 40
  %362 = load i64, i64* %RAX
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %361 to i64*
  store i64 %362, i64* %365
  %366 = load i64, i64* %PC
  %367 = sub i64 %366, 1501
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 5
  store i64 %369, i64* %PC
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %367, i64* %370, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 12
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 7
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i32*
  store i32 25, i32* %375
  %376 = load i64, i64* %PC
  %377 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %376, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %377

block_400b36:                                     ; preds = %block_400586
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 12
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 7
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  store i32 30, i32* %382
  br label %block_400b3d

block_400622:                                     ; preds = %block_400586
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 12
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 7
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  store i32 4, i32* %387
  %388 = load i64, i64* %PC
  %389 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %388, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %389

block_40071c:                                     ; preds = %block_400586
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  store i32 9, i32* %394
  %395 = load i64, i64* %PC
  %396 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %395, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %396

block_400586:                                     ; preds = %block_400b3d, %block_4006b8
  %MEMORY.1 = phi %struct.Memory* [ %297, %block_400b3d ], [ %78, %block_4006b8 ]
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 40
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 2
  store i64 %405, i64* %PC
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %403, i64* %406, align 8, !tbaa !2428
  %407 = load i64, i64* %PC
  switch i64 %407, label %436 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4196224, label %block_400780
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4195774, label %block_4005be
    i64 4196674, label %block_400942
  ]

block_400816:                                     ; preds = %block_400586
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 12
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i32*
  store i32 14, i32* %412
  %413 = load i64, i64* %PC
  %414 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %414

block_400910:                                     ; preds = %block_400586
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 12
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 7
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  store i32 19, i32* %419
  %420 = load i64, i64* %PC
  %421 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %420, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %421

block_400a0a:                                     ; preds = %block_400586
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 12
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 7
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i32*
  store i32 24, i32* %426
  %427 = load i64, i64* %PC
  %428 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %427, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %428

block_400b04:                                     ; preds = %block_400586
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 12
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 7
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i32*
  store i32 29, i32* %433
  %434 = load i64, i64* %PC
  %435 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %434, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %435

; <label>:436:                                    ; preds = %block_400586
  %437 = load i64, i64* %PC
  %438 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %437, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %438
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007eb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4007eb

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4007eb:                                     ; preds = %block_4007e4, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007e4 ]
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %PC
  %233 = sub i64 %232, 734
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %239 = load i64, i64* %238, align 8, !tbaa !2428
  %240 = add i64 %239, -8
  %241 = inttoptr i64 %240 to i64*
  store i64 %235, i64* %241
  store i64 %240, i64* %238, align 8, !tbaa !2428
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %233, i64* %242, align 8, !tbaa !2428
  %243 = load i64, i64* %PC
  %244 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %243, %struct.Memory* %MEMORY.0)
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 8
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %RAX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %254 = load i64, i64* %RCX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  %257 = add i64 4, %254
  store i64 %257, i64* %RCX, align 8, !tbaa !2428
  %258 = icmp ult i64 %257, %254
  %259 = icmp ult i64 %257, 4
  %260 = or i1 %258, %259
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %261, i8* %262, align 1, !tbaa !2432
  %263 = trunc i64 %257 to i32
  %264 = and i32 %263, 255
  %265 = call i32 @llvm.ctpop.i32(i32 %264) #16
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %268, i8* %269, align 1, !tbaa !2446
  %270 = xor i64 4, %254
  %271 = xor i64 %270, %257
  %272 = lshr i64 %271, 4
  %273 = trunc i64 %272 to i8
  %274 = and i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = icmp eq i64 %257, 0
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %277, i8* %278, align 1, !tbaa !2448
  %279 = lshr i64 %257, 63
  %280 = trunc i64 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %280, i8* %281, align 1, !tbaa !2449
  %282 = lshr i64 %254, 63
  %283 = xor i64 %279, %282
  %284 = add nuw nsw i64 %283, %279
  %285 = icmp eq i64 %284, 2
  %286 = zext i1 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %286, i8* %287, align 1, !tbaa !2450
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 8
  %290 = load i64, i64* %RCX
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %293
  %294 = load i64, i64* %RAX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = sext i32 %298 to i64
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = mul i64 %300, 8
  %302 = add i64 %301, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 8
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %RAX, align 8, !tbaa !2428
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 40
  %309 = load i64, i64* %RAX
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %308 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %PC
  %314 = sub i64 %313, 651
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %314, i64* %317, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 12
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 7
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i32*
  store i32 8, i32* %322
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RDI, align 8, !tbaa !2428
  %330 = load i64, i64* %PC
  %331 = sub i64 %330, 484
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %337 = load i64, i64* %336, align 8, !tbaa !2428
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %333, i64* %339
  store i64 %338, i64* %336, align 8, !tbaa !2428
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %331, i64* %340, align 8, !tbaa !2428
  %341 = load i64, i64* %PC
  %342 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %341, %struct.Memory* %MEMORY.1)
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 8
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 4
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = load i64, i64* %RAX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 3
  store i64 %351, i64* %PC
  store i64 %349, i64* %RCX, align 8, !tbaa !2428
  %352 = load i64, i64* %RCX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = add i64 4, %352
  store i64 %355, i64* %RCX, align 8, !tbaa !2428
  %356 = icmp ult i64 %355, %352
  %357 = icmp ult i64 %355, 4
  %358 = or i1 %356, %357
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %359, i8* %360, align 1, !tbaa !2432
  %361 = trunc i64 %355 to i32
  %362 = and i32 %361, 255
  %363 = call i32 @llvm.ctpop.i32(i32 %362) #16
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %366, i8* %367, align 1, !tbaa !2446
  %368 = xor i64 4, %352
  %369 = xor i64 %368, %355
  %370 = lshr i64 %369, 4
  %371 = trunc i64 %370 to i8
  %372 = and i8 %371, 1
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %372, i8* %373, align 1, !tbaa !2447
  %374 = icmp eq i64 %355, 0
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %375, i8* %376, align 1, !tbaa !2448
  %377 = lshr i64 %355, 63
  %378 = trunc i64 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = lshr i64 %352, 63
  %381 = xor i64 %377, %380
  %382 = add nuw nsw i64 %381, %377
  %383 = icmp eq i64 %382, 2
  %384 = zext i1 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %384, i8* %385, align 1, !tbaa !2450
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 8
  %388 = load i64, i64* %RCX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %387 to i64*
  store i64 %388, i64* %391
  %392 = load i64, i64* %RAX
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i32*
  %396 = load i32, i32* %395
  %397 = sext i32 %396 to i64
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = load i64, i64* %RAX
  %399 = mul i64 %398, 8
  %400 = add i64 %399, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 8
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %400 to i64*
  %404 = load i64, i64* %403
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 40
  %407 = load i64, i64* %RAX
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 4
  store i64 %409, i64* %PC
  %410 = inttoptr i64 %406 to i64*
  store i64 %407, i64* %410
  %411 = load i64, i64* %PC
  %412 = sub i64 %411, 401
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  store i64 %414, i64* %PC
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %412, i64* %415, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 12
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 7
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  store i32 31, i32* %420
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RDI, align 8, !tbaa !2428
  %428 = load i64, i64* %PC
  %429 = sub i64 %428, 1634
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 5
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %435 = load i64, i64* %434, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %431, i64* %437
  store i64 %436, i64* %434, align 8, !tbaa !2428
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %429, i64* %438, align 8, !tbaa !2428
  %439 = load i64, i64* %PC
  %440 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %439, %struct.Memory* %MEMORY.1)
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 8
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = load i64, i64* %RAX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  store i64 %447, i64* %RCX, align 8, !tbaa !2428
  %450 = load i64, i64* %RCX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = add i64 4, %450
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = icmp ult i64 %453, %450
  %455 = icmp ult i64 %453, 4
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %457, i8* %458, align 1, !tbaa !2432
  %459 = trunc i64 %453 to i32
  %460 = and i32 %459, 255
  %461 = call i32 @llvm.ctpop.i32(i32 %460) #16
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %464, i8* %465, align 1, !tbaa !2446
  %466 = xor i64 4, %450
  %467 = xor i64 %466, %453
  %468 = lshr i64 %467, 4
  %469 = trunc i64 %468 to i8
  %470 = and i8 %469, 1
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %470, i8* %471, align 1, !tbaa !2447
  %472 = icmp eq i64 %453, 0
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %473, i8* %474, align 1, !tbaa !2448
  %475 = lshr i64 %453, 63
  %476 = trunc i64 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %476, i8* %477, align 1, !tbaa !2449
  %478 = lshr i64 %450, 63
  %479 = xor i64 %475, %478
  %480 = add nuw nsw i64 %479, %475
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %482, i8* %483, align 1, !tbaa !2450
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 8
  %486 = load i64, i64* %RCX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %485 to i64*
  store i64 %486, i64* %489
  %490 = load i64, i64* %RAX
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493
  %495 = sext i32 %494 to i64
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = load i64, i64* %RAX
  %497 = mul i64 %496, 8
  %498 = add i64 %497, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 8
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %503 = load i64, i64* %RBP
  %504 = sub i64 %503, 40
  %505 = load i64, i64* %RAX
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %504 to i64*
  store i64 %505, i64* %508
  %509 = load i64, i64* %PC
  %510 = sub i64 %509, 1551
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 5
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %510, i64* %513, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 12
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 7
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i32*
  store i32 13, i32* %518
  br label %block_4007eb

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %PC
  %525 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %524, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %525

block_4009d8:                                     ; preds = %block_400586
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 12
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 7
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i32*
  store i32 23, i32* %530
  %531 = load i64, i64* %PC
  %532 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %531, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %532

block_400ad2:                                     ; preds = %block_400586
  %533 = load i64, i64* %RBP
  %534 = sub i64 %533, 12
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 7
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %534 to i32*
  store i32 28, i32* %537
  %538 = load i64, i64* %PC
  %539 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %538, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %539

block_400848:                                     ; preds = %block_400586
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 12
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 7
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  store i32 15, i32* %544
  %545 = load i64, i64* %PC
  %546 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %545, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %546

block_400942:                                     ; preds = %block_400586
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 12
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 7
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i32*
  store i32 20, i32* %551
  %552 = load i64, i64* %PC
  %553 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %552, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %553

block_40074e:                                     ; preds = %block_400586
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 12
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  store i32 10, i32* %558
  %559 = load i64, i64* %PC
  %560 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %559, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %560

block_400579:                                     ; preds = %block_400586
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 12
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 7
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  store i32 0, i32* %565
  %566 = load i64, i64* %RSP
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = add i64 48, %566
  store i64 %569, i64* %RSP, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %566
  %571 = icmp ult i64 %569, 48
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %573, i8* %574, align 1, !tbaa !2432
  %575 = trunc i64 %569 to i32
  %576 = and i32 %575, 255
  %577 = call i32 @llvm.ctpop.i32(i32 %576) #16
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %580, i8* %581, align 1, !tbaa !2446
  %582 = xor i64 48, %566
  %583 = xor i64 %582, %569
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i64 %569, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2448
  %591 = lshr i64 %569, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2449
  %594 = lshr i64 %566, 63
  %595 = xor i64 %591, %594
  %596 = add nuw nsw i64 %595, %591
  %597 = icmp eq i64 %596, 2
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %598, i8* %599, align 1, !tbaa !2450
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 1
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %603 = load i64, i64* %602, align 8, !tbaa !2428
  %604 = add i64 %603, 8
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %RBP, align 8, !tbaa !2428
  store i64 %604, i64* %602, align 8, !tbaa !2428
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 1
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %611 = load i64, i64* %610, align 8, !tbaa !2428
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %609, align 8, !tbaa !2428
  %614 = add i64 %611, 8
  store i64 %614, i64* %610, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a3c:                                     ; preds = %block_400586
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 12
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  store i32 25, i32* %619
  %620 = load i64, i64* %PC
  %621 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %620, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %621

block_4006b8:                                     ; preds = %block_400586
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 7
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  store i32 7, i32* %626
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 12
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i32*
  %632 = load i32, i32* %631
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = sub i64 %634, 434
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 5
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %641 = load i64, i64* %640, align 8, !tbaa !2428
  %642 = add i64 %641, -8
  %643 = inttoptr i64 %642 to i64*
  store i64 %637, i64* %643
  store i64 %642, i64* %640, align 8, !tbaa !2428
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %635, i64* %644, align 8, !tbaa !2428
  %645 = load i64, i64* %PC
  %646 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %645, %struct.Memory* %MEMORY.1)
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %656 = load i64, i64* %RCX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = add i64 4, %656
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = icmp ult i64 %659, %656
  %661 = icmp ult i64 %659, 4
  %662 = or i1 %660, %661
  %663 = zext i1 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %663, i8* %664, align 1, !tbaa !2432
  %665 = trunc i64 %659 to i32
  %666 = and i32 %665, 255
  %667 = call i32 @llvm.ctpop.i32(i32 %666) #16
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %670, i8* %671, align 1, !tbaa !2446
  %672 = xor i64 4, %656
  %673 = xor i64 %672, %659
  %674 = lshr i64 %673, 4
  %675 = trunc i64 %674 to i8
  %676 = and i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %676, i8* %677, align 1, !tbaa !2447
  %678 = icmp eq i64 %659, 0
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %679, i8* %680, align 1, !tbaa !2448
  %681 = lshr i64 %659, 63
  %682 = trunc i64 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %682, i8* %683, align 1, !tbaa !2449
  %684 = lshr i64 %656, 63
  %685 = xor i64 %681, %684
  %686 = add nuw nsw i64 %685, %681
  %687 = icmp eq i64 %686, 2
  %688 = zext i1 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %688, i8* %689, align 1, !tbaa !2450
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 8
  %692 = load i64, i64* %RCX
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %691 to i64*
  store i64 %692, i64* %695
  %696 = load i64, i64* %RAX
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  %700 = load i32, i32* %699
  %701 = sext i32 %700 to i64
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RAX
  %703 = mul i64 %702, 8
  %704 = add i64 %703, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 8
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %704 to i64*
  %708 = load i64, i64* %707
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 40
  %711 = load i64, i64* %RAX
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %710 to i64*
  store i64 %711, i64* %714
  %715 = load i64, i64* %PC
  %716 = sub i64 %715, 351
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 7
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  store i32 30, i32* %724
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 12
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 3
  store i64 %728, i64* %PC
  %729 = inttoptr i64 %726 to i32*
  %730 = load i32, i32* %729
  %731 = zext i32 %730 to i64
  store i64 %731, i64* %RDI, align 8, !tbaa !2428
  %732 = load i64, i64* %PC
  %733 = sub i64 %732, 1584
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 5
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 5
  store i64 %737, i64* %PC
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %739 = load i64, i64* %738, align 8, !tbaa !2428
  %740 = add i64 %739, -8
  %741 = inttoptr i64 %740 to i64*
  store i64 %735, i64* %741
  store i64 %740, i64* %738, align 8, !tbaa !2428
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %733, i64* %742, align 8, !tbaa !2428
  %743 = load i64, i64* %PC
  %744 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %743, %struct.Memory* %MEMORY.1)
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %754 = load i64, i64* %RCX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = add i64 4, %754
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = icmp ult i64 %757, %754
  %759 = icmp ult i64 %757, 4
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %761, i8* %762, align 1, !tbaa !2432
  %763 = trunc i64 %757 to i32
  %764 = and i32 %763, 255
  %765 = call i32 @llvm.ctpop.i32(i32 %764) #16
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %768, i8* %769, align 1, !tbaa !2446
  %770 = xor i64 4, %754
  %771 = xor i64 %770, %757
  %772 = lshr i64 %771, 4
  %773 = trunc i64 %772 to i8
  %774 = and i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = icmp eq i64 %757, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i64 %757, 63
  %780 = trunc i64 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = lshr i64 %754, 63
  %783 = xor i64 %779, %782
  %784 = add nuw nsw i64 %783, %779
  %785 = icmp eq i64 %784, 2
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = load i64, i64* %RBP
  %789 = sub i64 %788, 8
  %790 = load i64, i64* %RCX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %789 to i64*
  store i64 %790, i64* %793
  %794 = load i64, i64* %RAX
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797
  %799 = sext i32 %798 to i64
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RAX
  %801 = mul i64 %800, 8
  %802 = add i64 %801, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 8
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i64*
  %806 = load i64, i64* %805
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 40
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %808 to i64*
  store i64 %809, i64* %812
  %813 = load i64, i64* %PC
  %814 = sub i64 %813, 1501
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 5
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %814, i64* %817, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 2, i32* %822
  %823 = load i64, i64* %PC
  %824 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %823, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %824

block_4008ac:                                     ; preds = %block_400586
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 12
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 7
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 17, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 12
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %837 = load i64, i64* %PC
  %838 = sub i64 %837, 934
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %844 = load i64, i64* %843, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %840, i64* %846
  store i64 %845, i64* %843, align 8, !tbaa !2428
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %838, i64* %847, align 8, !tbaa !2428
  %848 = load i64, i64* %PC
  %849 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %848, %struct.Memory* %MEMORY.1)
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 8
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RAX
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = add i64 4, %859
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = icmp ult i64 %862, %859
  %864 = icmp ult i64 %862, 4
  %865 = or i1 %863, %864
  %866 = zext i1 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %866, i8* %867, align 1, !tbaa !2432
  %868 = trunc i64 %862 to i32
  %869 = and i32 %868, 255
  %870 = call i32 @llvm.ctpop.i32(i32 %869) #16
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  %873 = xor i8 %872, 1
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %873, i8* %874, align 1, !tbaa !2446
  %875 = xor i64 4, %859
  %876 = xor i64 %875, %862
  %877 = lshr i64 %876, 4
  %878 = trunc i64 %877 to i8
  %879 = and i8 %878, 1
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %879, i8* %880, align 1, !tbaa !2447
  %881 = icmp eq i64 %862, 0
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %882, i8* %883, align 1, !tbaa !2448
  %884 = lshr i64 %862, 63
  %885 = trunc i64 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %885, i8* %886, align 1, !tbaa !2449
  %887 = lshr i64 %859, 63
  %888 = xor i64 %884, %887
  %889 = add nuw nsw i64 %888, %884
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %891, i8* %892, align 1, !tbaa !2450
  %893 = load i64, i64* %RBP
  %894 = sub i64 %893, 8
  %895 = load i64, i64* %RCX
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %894 to i64*
  store i64 %895, i64* %898
  %899 = load i64, i64* %RAX
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i32*
  %903 = load i32, i32* %902
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RAX
  %906 = mul i64 %905, 8
  %907 = add i64 %906, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 8
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i64*
  %911 = load i64, i64* %910
  store i64 %911, i64* %RAX, align 8, !tbaa !2428
  %912 = load i64, i64* %RBP
  %913 = sub i64 %912, 40
  %914 = load i64, i64* %RAX
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 4
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %913 to i64*
  store i64 %914, i64* %917
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 851
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %922, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 12
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i32*
  store i32 22, i32* %927
  %928 = load i64, i64* %RBP
  %929 = sub i64 %928, 12
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 3
  store i64 %931, i64* %PC
  %932 = inttoptr i64 %929 to i32*
  %933 = load i32, i32* %932
  %934 = zext i32 %933 to i64
  store i64 %934, i64* %RDI, align 8, !tbaa !2428
  %935 = load i64, i64* %PC
  %936 = sub i64 %935, 1184
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 5
  store i64 %940, i64* %PC
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %942 = load i64, i64* %941, align 8, !tbaa !2428
  %943 = add i64 %942, -8
  %944 = inttoptr i64 %943 to i64*
  store i64 %938, i64* %944
  store i64 %943, i64* %941, align 8, !tbaa !2428
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %936, i64* %945, align 8, !tbaa !2428
  %946 = load i64, i64* %PC
  %947 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %946, %struct.Memory* %MEMORY.1)
  %948 = load i64, i64* %RBP
  %949 = sub i64 %948, 8
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RAX
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 3
  store i64 %956, i64* %PC
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %957 = load i64, i64* %RCX
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 4
  store i64 %959, i64* %PC
  %960 = add i64 4, %957
  store i64 %960, i64* %RCX, align 8, !tbaa !2428
  %961 = icmp ult i64 %960, %957
  %962 = icmp ult i64 %960, 4
  %963 = or i1 %961, %962
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %964, i8* %965, align 1, !tbaa !2432
  %966 = trunc i64 %960 to i32
  %967 = and i32 %966, 255
  %968 = call i32 @llvm.ctpop.i32(i32 %967) #16
  %969 = trunc i32 %968 to i8
  %970 = and i8 %969, 1
  %971 = xor i8 %970, 1
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %971, i8* %972, align 1, !tbaa !2446
  %973 = xor i64 4, %957
  %974 = xor i64 %973, %960
  %975 = lshr i64 %974, 4
  %976 = trunc i64 %975 to i8
  %977 = and i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %977, i8* %978, align 1, !tbaa !2447
  %979 = icmp eq i64 %960, 0
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %980, i8* %981, align 1, !tbaa !2448
  %982 = lshr i64 %960, 63
  %983 = trunc i64 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %983, i8* %984, align 1, !tbaa !2449
  %985 = lshr i64 %957, 63
  %986 = xor i64 %982, %985
  %987 = add nuw nsw i64 %986, %982
  %988 = icmp eq i64 %987, 2
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %989, i8* %990, align 1, !tbaa !2450
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 8
  %993 = load i64, i64* %RCX
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 4
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %992 to i64*
  store i64 %993, i64* %996
  %997 = load i64, i64* %RAX
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 3
  store i64 %999, i64* %PC
  %1000 = inttoptr i64 %997 to i32*
  %1001 = load i32, i32* %1000
  %1002 = sext i32 %1001 to i64
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RAX
  %1004 = mul i64 %1003, 8
  %1005 = add i64 %1004, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 8
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i64*
  %1009 = load i64, i64* %1008
  store i64 %1009, i64* %RAX, align 8, !tbaa !2428
  %1010 = load i64, i64* %RBP
  %1011 = sub i64 %1010, 40
  %1012 = load i64, i64* %RAX
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 4
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1011 to i64*
  store i64 %1012, i64* %1015
  %1016 = load i64, i64* %PC
  %1017 = sub i64 %1016, 1101
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  store i64 %1019, i64* %PC
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1017, i64* %1020, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 12
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 7
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1022 to i32*
  store i32 3, i32* %1025
  %1026 = load i64, i64* %RBP
  %1027 = sub i64 %1026, 12
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 3
  store i64 %1029, i64* %PC
  %1030 = inttoptr i64 %1027 to i32*
  %1031 = load i32, i32* %1030
  %1032 = zext i32 %1031 to i64
  store i64 %1032, i64* %RDI, align 8, !tbaa !2428
  %1033 = load i64, i64* %PC
  %1034 = sub i64 %1033, 234
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 5
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 5
  store i64 %1038, i64* %PC
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1040 = load i64, i64* %1039, align 8, !tbaa !2428
  %1041 = add i64 %1040, -8
  %1042 = inttoptr i64 %1041 to i64*
  store i64 %1036, i64* %1042
  store i64 %1041, i64* %1039, align 8, !tbaa !2428
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1034, i64* %1043, align 8, !tbaa !2428
  %1044 = load i64, i64* %PC
  %1045 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1044, %struct.Memory* %MEMORY.1)
  %1046 = load i64, i64* %RBP
  %1047 = sub i64 %1046, 8
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 4
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1047 to i64*
  %1051 = load i64, i64* %1050
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RAX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 3
  store i64 %1054, i64* %PC
  store i64 %1052, i64* %RCX, align 8, !tbaa !2428
  %1055 = load i64, i64* %RCX
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 4
  store i64 %1057, i64* %PC
  %1058 = add i64 4, %1055
  store i64 %1058, i64* %RCX, align 8, !tbaa !2428
  %1059 = icmp ult i64 %1058, %1055
  %1060 = icmp ult i64 %1058, 4
  %1061 = or i1 %1059, %1060
  %1062 = zext i1 %1061 to i8
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1062, i8* %1063, align 1, !tbaa !2432
  %1064 = trunc i64 %1058 to i32
  %1065 = and i32 %1064, 255
  %1066 = call i32 @llvm.ctpop.i32(i32 %1065) #16
  %1067 = trunc i32 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = xor i8 %1068, 1
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1069, i8* %1070, align 1, !tbaa !2446
  %1071 = xor i64 4, %1055
  %1072 = xor i64 %1071, %1058
  %1073 = lshr i64 %1072, 4
  %1074 = trunc i64 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1075, i8* %1076, align 1, !tbaa !2447
  %1077 = icmp eq i64 %1058, 0
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1078, i8* %1079, align 1, !tbaa !2448
  %1080 = lshr i64 %1058, 63
  %1081 = trunc i64 %1080 to i8
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1081, i8* %1082, align 1, !tbaa !2449
  %1083 = lshr i64 %1055, 63
  %1084 = xor i64 %1080, %1083
  %1085 = add nuw nsw i64 %1084, %1080
  %1086 = icmp eq i64 %1085, 2
  %1087 = zext i1 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1087, i8* %1088, align 1, !tbaa !2450
  %1089 = load i64, i64* %RBP
  %1090 = sub i64 %1089, 8
  %1091 = load i64, i64* %RCX
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 4
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1090 to i64*
  store i64 %1091, i64* %1094
  %1095 = load i64, i64* %RAX
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 3
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i32*
  %1099 = load i32, i32* %1098
  %1100 = sext i32 %1099 to i64
  store i64 %1100, i64* %RAX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RAX
  %1102 = mul i64 %1101, 8
  %1103 = add i64 %1102, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 8
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i64*
  %1107 = load i64, i64* %1106
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = load i64, i64* %RBP
  %1109 = sub i64 %1108, 40
  %1110 = load i64, i64* %RAX
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1109 to i64*
  store i64 %1110, i64* %1113
  %1114 = load i64, i64* %PC
  %1115 = sub i64 %1114, 151
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1118, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_4005f0, %block_4009a6, %block_4008ac, %block_400b36, %block_4006b8, %block_400b68, %block_4006ea, %block_4007eb, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %244, %block_4007eb ], [ %947, %block_4009a6 ], [ %849, %block_4008ac ], [ %744, %block_400b36 ], [ %646, %block_4006b8 ], [ %151, %block_400a6e ], [ %1045, %block_4005f0 ], [ %53, %block_400974 ], [ %342, %block_4006ea ], [ %440, %block_400b68 ], [ %1217, %block_4007b2 ]
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 40
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 4
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i64*
  %1124 = load i64, i64* %1123
  store i64 %1124, i64* %RAX, align 8, !tbaa !2428
  %1125 = load i64, i64* %RAX
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 2
  store i64 %1127, i64* %PC
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1128, align 8, !tbaa !2428
  %1129 = load i64, i64* %PC
  switch i64 %1129, label %1305 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400622:                                     ; preds = %block_400586
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 12
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 7
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i32*
  store i32 4, i32* %1134
  %1135 = load i64, i64* %PC
  %1136 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %1135, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1136

block_400aa0:                                     ; preds = %block_400586
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 12
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 7
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i32*
  store i32 27, i32* %1141
  %1142 = load i64, i64* %PC
  %1143 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %1142, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1143

block_40071c:                                     ; preds = %block_400586
  %1144 = load i64, i64* %RBP
  %1145 = sub i64 %1144, 12
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 7
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i32*
  store i32 9, i32* %1148
  %1149 = load i64, i64* %PC
  %1150 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1149, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1150

block_400816:                                     ; preds = %block_400586
  %1151 = load i64, i64* %RBP
  %1152 = sub i64 %1151, 12
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 7
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1152 to i32*
  store i32 14, i32* %1155
  %1156 = load i64, i64* %PC
  %1157 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1156, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1157

block_400910:                                     ; preds = %block_400586
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 12
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 7
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i32*
  store i32 19, i32* %1162
  %1163 = load i64, i64* %PC
  %1164 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1163, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1164

block_40058c:                                     ; preds = %block_400586
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 12
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 7
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to i32*
  store i32 1, i32* %1169
  %1170 = load i64, i64* %PC
  %1171 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1170, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1171

block_400a0a:                                     ; preds = %block_400586
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 12
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 7
  store i64 %1175, i64* %PC
  %1176 = inttoptr i64 %1173 to i32*
  store i32 24, i32* %1176
  %1177 = load i64, i64* %PC
  %1178 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1177, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1178

block_400686:                                     ; preds = %block_400586
  %1179 = load i64, i64* %RBP
  %1180 = sub i64 %1179, 12
  %1181 = load i64, i64* %PC
  %1182 = add i64 %1181, 7
  store i64 %1182, i64* %PC
  %1183 = inttoptr i64 %1180 to i32*
  store i32 6, i32* %1183
  %1184 = load i64, i64* %PC
  %1185 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1185

block_400b04:                                     ; preds = %block_400586
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 12
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 7
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i32*
  store i32 29, i32* %1190
  %1191 = load i64, i64* %PC
  %1192 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1191, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1192

block_4007b2:                                     ; preds = %block_400586
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 12
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 7
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i32*
  store i32 12, i32* %1197
  %1198 = load i64, i64* %RBP
  %1199 = sub i64 %1198, 12
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 3
  store i64 %1201, i64* %PC
  %1202 = inttoptr i64 %1199 to i32*
  %1203 = load i32, i32* %1202
  %1204 = zext i32 %1203 to i64
  store i64 %1204, i64* %RDI, align 8, !tbaa !2428
  %1205 = load i64, i64* %PC
  %1206 = sub i64 %1205, 684
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 5
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 5
  store i64 %1210, i64* %PC
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1212 = load i64, i64* %1211, align 8, !tbaa !2428
  %1213 = add i64 %1212, -8
  %1214 = inttoptr i64 %1213 to i64*
  store i64 %1208, i64* %1214
  store i64 %1213, i64* %1211, align 8, !tbaa !2428
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1206, i64* %1215, align 8, !tbaa !2428
  %1216 = load i64, i64* %PC
  %1217 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1216, %struct.Memory* %MEMORY.1)
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 8
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 4
  store i64 %1221, i64* %PC
  %1222 = inttoptr i64 %1219 to i64*
  %1223 = load i64, i64* %1222
  store i64 %1223, i64* %RAX, align 8, !tbaa !2428
  %1224 = load i64, i64* %RAX
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 3
  store i64 %1226, i64* %PC
  store i64 %1224, i64* %RCX, align 8, !tbaa !2428
  %1227 = load i64, i64* %RCX
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 4
  store i64 %1229, i64* %PC
  %1230 = add i64 4, %1227
  store i64 %1230, i64* %RCX, align 8, !tbaa !2428
  %1231 = icmp ult i64 %1230, %1227
  %1232 = icmp ult i64 %1230, 4
  %1233 = or i1 %1231, %1232
  %1234 = zext i1 %1233 to i8
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1234, i8* %1235, align 1, !tbaa !2432
  %1236 = trunc i64 %1230 to i32
  %1237 = and i32 %1236, 255
  %1238 = call i32 @llvm.ctpop.i32(i32 %1237) #16
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  %1241 = xor i8 %1240, 1
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1241, i8* %1242, align 1, !tbaa !2446
  %1243 = xor i64 4, %1227
  %1244 = xor i64 %1243, %1230
  %1245 = lshr i64 %1244, 4
  %1246 = trunc i64 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1247, i8* %1248, align 1, !tbaa !2447
  %1249 = icmp eq i64 %1230, 0
  %1250 = zext i1 %1249 to i8
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1250, i8* %1251, align 1, !tbaa !2448
  %1252 = lshr i64 %1230, 63
  %1253 = trunc i64 %1252 to i8
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1253, i8* %1254, align 1, !tbaa !2449
  %1255 = lshr i64 %1227, 63
  %1256 = xor i64 %1252, %1255
  %1257 = add nuw nsw i64 %1256, %1252
  %1258 = icmp eq i64 %1257, 2
  %1259 = zext i1 %1258 to i8
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1259, i8* %1260, align 1, !tbaa !2450
  %1261 = load i64, i64* %RBP
  %1262 = sub i64 %1261, 8
  %1263 = load i64, i64* %RCX
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 4
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1262 to i64*
  store i64 %1263, i64* %1266
  %1267 = load i64, i64* %RAX
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 3
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i32*
  %1271 = load i32, i32* %1270
  %1272 = sext i32 %1271 to i64
  store i64 %1272, i64* %RAX, align 8, !tbaa !2428
  %1273 = load i64, i64* %RAX
  %1274 = mul i64 %1273, 8
  %1275 = add i64 %1274, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 8
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1275 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  %1280 = load i64, i64* %RBP
  %1281 = sub i64 %1280, 40
  %1282 = load i64, i64* %RAX
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 4
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1281 to i64*
  store i64 %1282, i64* %1285
  %1286 = load i64, i64* %PC
  %1287 = sub i64 %1286, 601
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1287, i64* %1290, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1291 = load i64, i64* %RBP
  %1292 = sub i64 %1291, 12
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 7
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1292 to i32*
  store i32 11, i32* %1295
  %1296 = load i64, i64* %PC
  %1297 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1296, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1297

block_400654:                                     ; preds = %block_400586
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 7
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  store i32 5, i32* %1302
  %1303 = load i64, i64* %PC
  %1304 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1303, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1304

; <label>:1305:                                   ; preds = %block_400586
  %1306 = load i64, i64* %PC
  %1307 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1306, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1307
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004f0, label %block_4004d9

block_4004f0:                                     ; preds = %block_4004d0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004d9:                                     ; preds = %block_4004d0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_40084f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40084f

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400579:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 0, i32* %33
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = add i64 48, %34
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %37, %34
  %39 = icmp ult i64 %37, 48
  %40 = or i1 %38, %39
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %37 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 48, %34
  %51 = xor i64 %50, %37
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %37, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %37, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %34, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %59
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 1
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !2428
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  store i64 %72, i64* %70, align 8, !tbaa !2428
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4005f0:                                     ; preds = %block_400586
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 12
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 7
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  store i32 3, i32* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 12
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 3
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i32*
  %93 = load i32, i32* %92
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 234
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %96, i64* %105, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %106, %struct.Memory* %MEMORY.1)
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RAX
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  store i64 %114, i64* %RCX, align 8, !tbaa !2428
  %117 = load i64, i64* %RCX
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = add i64 4, %117
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ult i64 %120, %117
  %122 = icmp ult i64 %120, 4
  %123 = or i1 %121, %122
  %124 = zext i1 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %124, i8* %125, align 1, !tbaa !2432
  %126 = trunc i64 %120 to i32
  %127 = and i32 %126, 255
  %128 = call i32 @llvm.ctpop.i32(i32 %127) #16
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %131, i8* %132, align 1, !tbaa !2446
  %133 = xor i64 4, %117
  %134 = xor i64 %133, %120
  %135 = lshr i64 %134, 4
  %136 = trunc i64 %135 to i8
  %137 = and i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %137, i8* %138, align 1, !tbaa !2447
  %139 = icmp eq i64 %120, 0
  %140 = zext i1 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = lshr i64 %120, 63
  %143 = trunc i64 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %117, 63
  %146 = xor i64 %142, %145
  %147 = add nuw nsw i64 %146, %142
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %149, i8* %150, align 1, !tbaa !2450
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 8
  %153 = load i64, i64* %RCX
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %156
  %157 = load i64, i64* %RAX
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = load i64, i64* %RAX
  %164 = mul i64 %163, 8
  %165 = add i64 %164, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 8
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 40
  %172 = load i64, i64* %RAX
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* %PC
  %177 = sub i64 %176, 151
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %180, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 12
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i32*
  store i32 8, i32* %185
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 12
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RDI, align 8, !tbaa !2428
  %193 = load i64, i64* %PC
  %194 = sub i64 %193, 484
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %200 = load i64, i64* %199, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %196, i64* %202
  store i64 %201, i64* %199, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  %205 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %204, %struct.Memory* %MEMORY.1)
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 8
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RAX
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %215 = load i64, i64* %RCX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = add i64 4, %215
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = icmp ult i64 %218, %215
  %220 = icmp ult i64 %218, 4
  %221 = or i1 %219, %220
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %222, i8* %223, align 1, !tbaa !2432
  %224 = trunc i64 %218 to i32
  %225 = and i32 %224, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2446
  %231 = xor i64 4, %215
  %232 = xor i64 %231, %218
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = icmp eq i64 %218, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2448
  %240 = lshr i64 %218, 63
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2449
  %243 = lshr i64 %215, 63
  %244 = xor i64 %240, %243
  %245 = add nuw nsw i64 %244, %240
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2450
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 8
  %251 = load i64, i64* %RCX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  %255 = load i64, i64* %RAX
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 3
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = load i64, i64* %RAX
  %262 = mul i64 %261, 8
  %263 = add i64 %262, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 8
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 40
  %270 = load i64, i64* %RAX
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 4
  store i64 %272, i64* %PC
  %273 = inttoptr i64 %269 to i64*
  store i64 %270, i64* %273
  %274 = load i64, i64* %PC
  %275 = sub i64 %274, 401
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %275, i64* %278, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %279 = load i64, i64* %RBP
  %280 = sub i64 %279, 12
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 7
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %280 to i32*
  store i32 13, i32* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 12
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  %289 = load i32, i32* %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  %291 = load i64, i64* %PC
  %292 = sub i64 %291, 734
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %298 = load i64, i64* %297, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %294, i64* %300
  store i64 %299, i64* %297, align 8, !tbaa !2428
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %292, i64* %301, align 8, !tbaa !2428
  %302 = load i64, i64* %PC
  %303 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %302, %struct.Memory* %MEMORY.1)
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 8
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %313 = load i64, i64* %RCX
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = add i64 4, %313
  store i64 %316, i64* %RCX, align 8, !tbaa !2428
  %317 = icmp ult i64 %316, %313
  %318 = icmp ult i64 %316, 4
  %319 = or i1 %317, %318
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %320, i8* %321, align 1, !tbaa !2432
  %322 = trunc i64 %316 to i32
  %323 = and i32 %322, 255
  %324 = call i32 @llvm.ctpop.i32(i32 %323) #16
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %327, i8* %328, align 1, !tbaa !2446
  %329 = xor i64 4, %313
  %330 = xor i64 %329, %316
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = icmp eq i64 %316, 0
  %336 = zext i1 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %336, i8* %337, align 1, !tbaa !2448
  %338 = lshr i64 %316, 63
  %339 = trunc i64 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %339, i8* %340, align 1, !tbaa !2449
  %341 = lshr i64 %313, 63
  %342 = xor i64 %338, %341
  %343 = add nuw nsw i64 %342, %338
  %344 = icmp eq i64 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 8
  %349 = load i64, i64* %RCX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %348 to i64*
  store i64 %349, i64* %352
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 3
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  %357 = load i32, i32* %356
  %358 = sext i32 %357 to i64
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = load i64, i64* %RAX
  %360 = mul i64 %359, 8
  %361 = add i64 %360, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 8
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 40
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %PC
  %373 = sub i64 %372, 651
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  store i64 %375, i64* %PC
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %376, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 12
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 7
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  store i32 18, i32* %381
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 12
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  %387 = load i32, i32* %386
  %388 = zext i32 %387 to i64
  store i64 %388, i64* %RDI, align 8, !tbaa !2428
  %389 = load i64, i64* %PC
  %390 = sub i64 %389, 984
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %396 = load i64, i64* %395, align 8, !tbaa !2428
  %397 = add i64 %396, -8
  %398 = inttoptr i64 %397 to i64*
  store i64 %392, i64* %398
  store i64 %397, i64* %395, align 8, !tbaa !2428
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %390, i64* %399, align 8, !tbaa !2428
  %400 = load i64, i64* %PC
  %401 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %400, %struct.Memory* %MEMORY.1)
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 8
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = load i64, i64* %RAX
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  store i64 %408, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RCX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = add i64 4, %411
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = icmp ult i64 %414, %411
  %416 = icmp ult i64 %414, 4
  %417 = or i1 %415, %416
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %418, i8* %419, align 1, !tbaa !2432
  %420 = trunc i64 %414 to i32
  %421 = and i32 %420, 255
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %425, i8* %426, align 1, !tbaa !2446
  %427 = xor i64 4, %411
  %428 = xor i64 %427, %414
  %429 = lshr i64 %428, 4
  %430 = trunc i64 %429 to i8
  %431 = and i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %431, i8* %432, align 1, !tbaa !2447
  %433 = icmp eq i64 %414, 0
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %434, i8* %435, align 1, !tbaa !2448
  %436 = lshr i64 %414, 63
  %437 = trunc i64 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %437, i8* %438, align 1, !tbaa !2449
  %439 = lshr i64 %411, 63
  %440 = xor i64 %436, %439
  %441 = add nuw nsw i64 %440, %436
  %442 = icmp eq i64 %441, 2
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %443, i8* %444, align 1, !tbaa !2450
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 8
  %447 = load i64, i64* %RCX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %446 to i64*
  store i64 %447, i64* %450
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = load i64, i64* %RAX
  %458 = mul i64 %457, 8
  %459 = add i64 %458, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 8
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 40
  %466 = load i64, i64* %RAX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = inttoptr i64 %465 to i64*
  store i64 %466, i64* %469
  %470 = load i64, i64* %PC
  %471 = sub i64 %470, 901
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  store i64 %473, i64* %PC
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %471, i64* %474, align 8, !tbaa !2428
  br label %block_400586

block_400974:                                     ; preds = %block_400586
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 12
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 7
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i32*
  store i32 21, i32* %479
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 12
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RDI, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = sub i64 %487, 1134
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  store i64 %492, i64* %PC
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %494 = load i64, i64* %493, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %490, i64* %496
  store i64 %495, i64* %493, align 8, !tbaa !2428
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %488, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  %499 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %498, %struct.Memory* %MEMORY.1)
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  store i64 %506, i64* %RCX, align 8, !tbaa !2428
  %509 = load i64, i64* %RCX
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC
  %512 = add i64 4, %509
  store i64 %512, i64* %RCX, align 8, !tbaa !2428
  %513 = icmp ult i64 %512, %509
  %514 = icmp ult i64 %512, 4
  %515 = or i1 %513, %514
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %516, i8* %517, align 1, !tbaa !2432
  %518 = trunc i64 %512 to i32
  %519 = and i32 %518, 255
  %520 = call i32 @llvm.ctpop.i32(i32 %519) #16
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = xor i8 %522, 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %523, i8* %524, align 1, !tbaa !2446
  %525 = xor i64 4, %509
  %526 = xor i64 %525, %512
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %529, i8* %530, align 1, !tbaa !2447
  %531 = icmp eq i64 %512, 0
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %532, i8* %533, align 1, !tbaa !2448
  %534 = lshr i64 %512, 63
  %535 = trunc i64 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %535, i8* %536, align 1, !tbaa !2449
  %537 = lshr i64 %509, 63
  %538 = xor i64 %534, %537
  %539 = add nuw nsw i64 %538, %534
  %540 = icmp eq i64 %539, 2
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %541, i8* %542, align 1, !tbaa !2450
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 8
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %544 to i64*
  store i64 %545, i64* %548
  %549 = load i64, i64* %RAX
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = sext i32 %553 to i64
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = load i64, i64* %RAX
  %556 = mul i64 %555, 8
  %557 = add i64 %556, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 8
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i64*
  %561 = load i64, i64* %560
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 40
  %564 = load i64, i64* %RAX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %563 to i64*
  store i64 %564, i64* %567
  %568 = load i64, i64* %PC
  %569 = sub i64 %568, 1051
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 5
  store i64 %571, i64* %PC
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %569, i64* %572, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 12
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 7
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i32*
  store i32 26, i32* %577
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 12
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RDI, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = sub i64 %585, 1384
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 5
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 5
  store i64 %590, i64* %PC
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %592 = load i64, i64* %591, align 8, !tbaa !2428
  %593 = add i64 %592, -8
  %594 = inttoptr i64 %593 to i64*
  store i64 %588, i64* %594
  store i64 %593, i64* %591, align 8, !tbaa !2428
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %586, i64* %595, align 8, !tbaa !2428
  %596 = load i64, i64* %PC
  %597 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %596, %struct.Memory* %MEMORY.1)
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %607 = load i64, i64* %RCX
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = add i64 4, %607
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = icmp ult i64 %610, %607
  %612 = icmp ult i64 %610, 4
  %613 = or i1 %611, %612
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %614, i8* %615, align 1, !tbaa !2432
  %616 = trunc i64 %610 to i32
  %617 = and i32 %616, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2446
  %623 = xor i64 4, %607
  %624 = xor i64 %623, %610
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %627, i8* %628, align 1, !tbaa !2447
  %629 = icmp eq i64 %610, 0
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %630, i8* %631, align 1, !tbaa !2448
  %632 = lshr i64 %610, 63
  %633 = trunc i64 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %633, i8* %634, align 1, !tbaa !2449
  %635 = lshr i64 %607, 63
  %636 = xor i64 %632, %635
  %637 = add nuw nsw i64 %636, %632
  %638 = icmp eq i64 %637, 2
  %639 = zext i1 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %639, i8* %640, align 1, !tbaa !2450
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 8
  %643 = load i64, i64* %RCX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %642 to i64*
  store i64 %643, i64* %646
  %647 = load i64, i64* %RAX
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 3
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sext i32 %651 to i64
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = mul i64 %653, 8
  %655 = add i64 %654, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 8
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658
  store i64 %659, i64* %RAX, align 8, !tbaa !2428
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 40
  %662 = load i64, i64* %RAX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %661 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %PC
  %667 = sub i64 %666, 1301
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 5
  store i64 %669, i64* %PC
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %667, i64* %670, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 12
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 7
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %672 to i32*
  store i32 5, i32* %675
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 12
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i32*
  %681 = load i32, i32* %680
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDI, align 8, !tbaa !2428
  %683 = load i64, i64* %PC
  %684 = sub i64 %683, 334
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 5
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  store i64 %688, i64* %PC
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %690 = load i64, i64* %689, align 8, !tbaa !2428
  %691 = add i64 %690, -8
  %692 = inttoptr i64 %691 to i64*
  store i64 %686, i64* %692
  store i64 %691, i64* %689, align 8, !tbaa !2428
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %684, i64* %693, align 8, !tbaa !2428
  %694 = load i64, i64* %PC
  %695 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %694, %struct.Memory* %MEMORY.1)
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %705 = load i64, i64* %RCX
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = add i64 4, %705
  store i64 %708, i64* %RCX, align 8, !tbaa !2428
  %709 = icmp ult i64 %708, %705
  %710 = icmp ult i64 %708, 4
  %711 = or i1 %709, %710
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = trunc i64 %708 to i32
  %715 = and i32 %714, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = xor i64 4, %705
  %722 = xor i64 %721, %708
  %723 = lshr i64 %722, 4
  %724 = trunc i64 %723 to i8
  %725 = and i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = icmp eq i64 %708, 0
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = lshr i64 %708, 63
  %731 = trunc i64 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i64 %705, 63
  %734 = xor i64 %730, %733
  %735 = add nuw nsw i64 %734, %730
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 8
  %741 = load i64, i64* %RCX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %740 to i64*
  store i64 %741, i64* %744
  %745 = load i64, i64* %RAX
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = mul i64 %751, 8
  %753 = add i64 %752, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 8
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 40
  %760 = load i64, i64* %RAX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 4
  store i64 %762, i64* %PC
  %763 = inttoptr i64 %759 to i64*
  store i64 %760, i64* %763
  %764 = load i64, i64* %PC
  %765 = sub i64 %764, 251
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 5
  store i64 %767, i64* %PC
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %765, i64* %768, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 12
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 7
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i32*
  store i32 31, i32* %773
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 12
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to i32*
  %779 = load i32, i32* %778
  %780 = zext i32 %779 to i64
  store i64 %780, i64* %RDI, align 8, !tbaa !2428
  %781 = load i64, i64* %PC
  %782 = sub i64 %781, 1634
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 5
  store i64 %786, i64* %PC
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %788 = load i64, i64* %787, align 8, !tbaa !2428
  %789 = add i64 %788, -8
  %790 = inttoptr i64 %789 to i64*
  store i64 %784, i64* %790
  store i64 %789, i64* %787, align 8, !tbaa !2428
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %782, i64* %791, align 8, !tbaa !2428
  %792 = load i64, i64* %PC
  %793 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %792, %struct.Memory* %MEMORY.1)
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 8
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 4
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RAX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  store i64 %800, i64* %RCX, align 8, !tbaa !2428
  %803 = load i64, i64* %RCX
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 4
  store i64 %805, i64* %PC
  %806 = add i64 4, %803
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %807 = icmp ult i64 %806, %803
  %808 = icmp ult i64 %806, 4
  %809 = or i1 %807, %808
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %810, i8* %811, align 1, !tbaa !2432
  %812 = trunc i64 %806 to i32
  %813 = and i32 %812, 255
  %814 = call i32 @llvm.ctpop.i32(i32 %813) #16
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  %817 = xor i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %817, i8* %818, align 1, !tbaa !2446
  %819 = xor i64 4, %803
  %820 = xor i64 %819, %806
  %821 = lshr i64 %820, 4
  %822 = trunc i64 %821 to i8
  %823 = and i8 %822, 1
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %823, i8* %824, align 1, !tbaa !2447
  %825 = icmp eq i64 %806, 0
  %826 = zext i1 %825 to i8
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %826, i8* %827, align 1, !tbaa !2448
  %828 = lshr i64 %806, 63
  %829 = trunc i64 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %829, i8* %830, align 1, !tbaa !2449
  %831 = lshr i64 %803, 63
  %832 = xor i64 %828, %831
  %833 = add nuw nsw i64 %832, %828
  %834 = icmp eq i64 %833, 2
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %835, i8* %836, align 1, !tbaa !2450
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 8
  %839 = load i64, i64* %RCX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %838 to i64*
  store i64 %839, i64* %842
  %843 = load i64, i64* %RAX
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 3
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  %847 = load i32, i32* %846
  %848 = sext i32 %847 to i64
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = mul i64 %849, 8
  %851 = add i64 %850, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 8
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 40
  %858 = load i64, i64* %RAX
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 4
  store i64 %860, i64* %PC
  %861 = inttoptr i64 %857 to i64*
  store i64 %858, i64* %861
  %862 = load i64, i64* %PC
  %863 = sub i64 %862, 1551
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %863, i64* %866, align 8, !tbaa !2428
  br label %block_400586

block_40084f:                                     ; preds = %block_400848, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400848 ]
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 12
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  %872 = load i32, i32* %871
  %873 = zext i32 %872 to i64
  store i64 %873, i64* %RDI, align 8, !tbaa !2428
  %874 = load i64, i64* %PC
  %875 = sub i64 %874, 834
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 5
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 5
  store i64 %879, i64* %PC
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %881 = load i64, i64* %880, align 8, !tbaa !2428
  %882 = add i64 %881, -8
  %883 = inttoptr i64 %882 to i64*
  store i64 %877, i64* %883
  store i64 %882, i64* %880, align 8, !tbaa !2428
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %875, i64* %884, align 8, !tbaa !2428
  %885 = load i64, i64* %PC
  %886 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %885, %struct.Memory* %MEMORY.0)
  %887 = load i64, i64* %RBP
  %888 = sub i64 %887, 8
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %888 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  store i64 %893, i64* %RCX, align 8, !tbaa !2428
  %896 = load i64, i64* %RCX
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = add i64 4, %896
  store i64 %899, i64* %RCX, align 8, !tbaa !2428
  %900 = icmp ult i64 %899, %896
  %901 = icmp ult i64 %899, 4
  %902 = or i1 %900, %901
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = trunc i64 %899 to i32
  %906 = and i32 %905, 255
  %907 = call i32 @llvm.ctpop.i32(i32 %906) #16
  %908 = trunc i32 %907 to i8
  %909 = and i8 %908, 1
  %910 = xor i8 %909, 1
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %910, i8* %911, align 1, !tbaa !2446
  %912 = xor i64 4, %896
  %913 = xor i64 %912, %899
  %914 = lshr i64 %913, 4
  %915 = trunc i64 %914 to i8
  %916 = and i8 %915, 1
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %916, i8* %917, align 1, !tbaa !2447
  %918 = icmp eq i64 %899, 0
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %919, i8* %920, align 1, !tbaa !2448
  %921 = lshr i64 %899, 63
  %922 = trunc i64 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %922, i8* %923, align 1, !tbaa !2449
  %924 = lshr i64 %896, 63
  %925 = xor i64 %921, %924
  %926 = add nuw nsw i64 %925, %921
  %927 = icmp eq i64 %926, 2
  %928 = zext i1 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %928, i8* %929, align 1, !tbaa !2450
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 8
  %932 = load i64, i64* %RCX
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 4
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %931 to i64*
  store i64 %932, i64* %935
  %936 = load i64, i64* %RAX
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 3
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939
  %941 = sext i32 %940 to i64
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = mul i64 %942, 8
  %944 = add i64 %943, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 8
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i64*
  %948 = load i64, i64* %947
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RBP
  %950 = sub i64 %949, 40
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %950 to i64*
  store i64 %951, i64* %954
  %955 = load i64, i64* %PC
  %956 = sub i64 %955, 751
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 5
  store i64 %958, i64* %PC
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %956, i64* %959, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 12
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 7
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i32*
  store i32 10, i32* %964
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 12
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i32*
  %970 = load i32, i32* %969
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %RDI, align 8, !tbaa !2428
  %972 = load i64, i64* %PC
  %973 = sub i64 %972, 584
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 5
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 5
  store i64 %977, i64* %PC
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %979 = load i64, i64* %978, align 8, !tbaa !2428
  %980 = add i64 %979, -8
  %981 = inttoptr i64 %980 to i64*
  store i64 %975, i64* %981
  store i64 %980, i64* %978, align 8, !tbaa !2428
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %973, i64* %982, align 8, !tbaa !2428
  %983 = load i64, i64* %PC
  %984 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %983, %struct.Memory* %MEMORY.1)
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 8
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i64*
  %990 = load i64, i64* %989
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 3
  store i64 %993, i64* %PC
  store i64 %991, i64* %RCX, align 8, !tbaa !2428
  %994 = load i64, i64* %RCX
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = add i64 4, %994
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = icmp ult i64 %997, %994
  %999 = icmp ult i64 %997, 4
  %1000 = or i1 %998, %999
  %1001 = zext i1 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1001, i8* %1002, align 1, !tbaa !2432
  %1003 = trunc i64 %997 to i32
  %1004 = and i32 %1003, 255
  %1005 = call i32 @llvm.ctpop.i32(i32 %1004) #16
  %1006 = trunc i32 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = xor i8 %1007, 1
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1008, i8* %1009, align 1, !tbaa !2446
  %1010 = xor i64 4, %994
  %1011 = xor i64 %1010, %997
  %1012 = lshr i64 %1011, 4
  %1013 = trunc i64 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1014, i8* %1015, align 1, !tbaa !2447
  %1016 = icmp eq i64 %997, 0
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1017, i8* %1018, align 1, !tbaa !2448
  %1019 = lshr i64 %997, 63
  %1020 = trunc i64 %1019 to i8
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1020, i8* %1021, align 1, !tbaa !2449
  %1022 = lshr i64 %994, 63
  %1023 = xor i64 %1019, %1022
  %1024 = add nuw nsw i64 %1023, %1019
  %1025 = icmp eq i64 %1024, 2
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1026, i8* %1027, align 1, !tbaa !2450
  %1028 = load i64, i64* %RBP
  %1029 = sub i64 %1028, 8
  %1030 = load i64, i64* %RCX
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1029 to i64*
  store i64 %1030, i64* %1033
  %1034 = load i64, i64* %RAX
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 3
  store i64 %1036, i64* %PC
  %1037 = inttoptr i64 %1034 to i32*
  %1038 = load i32, i32* %1037
  %1039 = sext i32 %1038 to i64
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = mul i64 %1040, 8
  %1042 = add i64 %1041, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 8
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RBP
  %1048 = sub i64 %1047, 40
  %1049 = load i64, i64* %RAX
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 4
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1048 to i64*
  store i64 %1049, i64* %1052
  %1053 = load i64, i64* %PC
  %1054 = sub i64 %1053, 501
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1054, i64* %1057, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 12
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 7
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1059 to i32*
  store i32 15, i32* %1062
  br label %block_40084f

block_4009d8:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 23, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 1234
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.1)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 1151
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 2, i32* %1165
  %1166 = load i64, i64* %PC
  %1167 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1166, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1167

block_400ad2:                                     ; preds = %block_400586
  %1168 = load i64, i64* %RBP
  %1169 = sub i64 %1168, 12
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 7
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1169 to i32*
  store i32 28, i32* %1172
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 12
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 3
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to i32*
  %1178 = load i32, i32* %1177
  %1179 = zext i32 %1178 to i64
  store i64 %1179, i64* %RDI, align 8, !tbaa !2428
  %1180 = load i64, i64* %PC
  %1181 = sub i64 %1180, 1484
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 5
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 5
  store i64 %1185, i64* %PC
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1187 = load i64, i64* %1186, align 8, !tbaa !2428
  %1188 = add i64 %1187, -8
  %1189 = inttoptr i64 %1188 to i64*
  store i64 %1183, i64* %1189
  store i64 %1188, i64* %1186, align 8, !tbaa !2428
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1181, i64* %1190, align 8, !tbaa !2428
  %1191 = load i64, i64* %PC
  %1192 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1191, %struct.Memory* %MEMORY.1)
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 8
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197
  store i64 %1198, i64* %RAX, align 8, !tbaa !2428
  %1199 = load i64, i64* %RAX
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 3
  store i64 %1201, i64* %PC
  store i64 %1199, i64* %RCX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RCX
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = add i64 4, %1202
  store i64 %1205, i64* %RCX, align 8, !tbaa !2428
  %1206 = icmp ult i64 %1205, %1202
  %1207 = icmp ult i64 %1205, 4
  %1208 = or i1 %1206, %1207
  %1209 = zext i1 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1209, i8* %1210, align 1, !tbaa !2432
  %1211 = trunc i64 %1205 to i32
  %1212 = and i32 %1211, 255
  %1213 = call i32 @llvm.ctpop.i32(i32 %1212) #16
  %1214 = trunc i32 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = xor i8 %1215, 1
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1216, i8* %1217, align 1, !tbaa !2446
  %1218 = xor i64 4, %1202
  %1219 = xor i64 %1218, %1205
  %1220 = lshr i64 %1219, 4
  %1221 = trunc i64 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1222, i8* %1223, align 1, !tbaa !2447
  %1224 = icmp eq i64 %1205, 0
  %1225 = zext i1 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1225, i8* %1226, align 1, !tbaa !2448
  %1227 = lshr i64 %1205, 63
  %1228 = trunc i64 %1227 to i8
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1228, i8* %1229, align 1, !tbaa !2449
  %1230 = lshr i64 %1202, 63
  %1231 = xor i64 %1227, %1230
  %1232 = add nuw nsw i64 %1231, %1227
  %1233 = icmp eq i64 %1232, 2
  %1234 = zext i1 %1233 to i8
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1234, i8* %1235, align 1, !tbaa !2450
  %1236 = load i64, i64* %RBP
  %1237 = sub i64 %1236, 8
  %1238 = load i64, i64* %RCX
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 4
  store i64 %1240, i64* %PC
  %1241 = inttoptr i64 %1237 to i64*
  store i64 %1238, i64* %1241
  %1242 = load i64, i64* %RAX
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 3
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i32*
  %1246 = load i32, i32* %1245
  %1247 = sext i32 %1246 to i64
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RAX
  %1249 = mul i64 %1248, 8
  %1250 = add i64 %1249, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 8
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to i64*
  %1254 = load i64, i64* %1253
  store i64 %1254, i64* %RAX, align 8, !tbaa !2428
  %1255 = load i64, i64* %RBP
  %1256 = sub i64 %1255, 40
  %1257 = load i64, i64* %RAX
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 4
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1256 to i64*
  store i64 %1257, i64* %1260
  %1261 = load i64, i64* %PC
  %1262 = sub i64 %1261, 1401
  %1263 = load i64, i64* %PC
  %1264 = add i64 %1263, 5
  store i64 %1264, i64* %PC
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1262, i64* %1265, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 12
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 7
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i32*
  store i32 7, i32* %1270
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 12
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 3
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i32*
  %1276 = load i32, i32* %1275
  %1277 = zext i32 %1276 to i64
  store i64 %1277, i64* %RDI, align 8, !tbaa !2428
  %1278 = load i64, i64* %PC
  %1279 = sub i64 %1278, 434
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 5
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 5
  store i64 %1283, i64* %PC
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1285 = load i64, i64* %1284, align 8, !tbaa !2428
  %1286 = add i64 %1285, -8
  %1287 = inttoptr i64 %1286 to i64*
  store i64 %1281, i64* %1287
  store i64 %1286, i64* %1284, align 8, !tbaa !2428
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1279, i64* %1288, align 8, !tbaa !2428
  %1289 = load i64, i64* %PC
  %1290 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1289, %struct.Memory* %MEMORY.1)
  %1291 = load i64, i64* %RBP
  %1292 = sub i64 %1291, 8
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1292 to i64*
  %1296 = load i64, i64* %1295
  store i64 %1296, i64* %RAX, align 8, !tbaa !2428
  %1297 = load i64, i64* %RAX
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 3
  store i64 %1299, i64* %PC
  store i64 %1297, i64* %RCX, align 8, !tbaa !2428
  %1300 = load i64, i64* %RCX
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 4
  store i64 %1302, i64* %PC
  %1303 = add i64 4, %1300
  store i64 %1303, i64* %RCX, align 8, !tbaa !2428
  %1304 = icmp ult i64 %1303, %1300
  %1305 = icmp ult i64 %1303, 4
  %1306 = or i1 %1304, %1305
  %1307 = zext i1 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1307, i8* %1308, align 1, !tbaa !2432
  %1309 = trunc i64 %1303 to i32
  %1310 = and i32 %1309, 255
  %1311 = call i32 @llvm.ctpop.i32(i32 %1310) #16
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1314, i8* %1315, align 1, !tbaa !2446
  %1316 = xor i64 4, %1300
  %1317 = xor i64 %1316, %1303
  %1318 = lshr i64 %1317, 4
  %1319 = trunc i64 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1320, i8* %1321, align 1, !tbaa !2447
  %1322 = icmp eq i64 %1303, 0
  %1323 = zext i1 %1322 to i8
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1323, i8* %1324, align 1, !tbaa !2448
  %1325 = lshr i64 %1303, 63
  %1326 = trunc i64 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1326, i8* %1327, align 1, !tbaa !2449
  %1328 = lshr i64 %1300, 63
  %1329 = xor i64 %1325, %1328
  %1330 = add nuw nsw i64 %1329, %1325
  %1331 = icmp eq i64 %1330, 2
  %1332 = zext i1 %1331 to i8
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1332, i8* %1333, align 1, !tbaa !2450
  %1334 = load i64, i64* %RBP
  %1335 = sub i64 %1334, 8
  %1336 = load i64, i64* %RCX
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 4
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1335 to i64*
  store i64 %1336, i64* %1339
  %1340 = load i64, i64* %RAX
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 3
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i32*
  %1344 = load i32, i32* %1343
  %1345 = sext i32 %1344 to i64
  store i64 %1345, i64* %RAX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RAX
  %1347 = mul i64 %1346, 8
  %1348 = add i64 %1347, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 8
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i64*
  %1352 = load i64, i64* %1351
  store i64 %1352, i64* %RAX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 40
  %1355 = load i64, i64* %RAX
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 4
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1354 to i64*
  store i64 %1355, i64* %1358
  %1359 = load i64, i64* %PC
  %1360 = sub i64 %1359, 351
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 5
  store i64 %1362, i64* %PC
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1360, i64* %1363, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1364 = load i64, i64* %RBP
  %1365 = sub i64 %1364, 12
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 7
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1365 to i32*
  store i32 12, i32* %1368
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 12
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 3
  store i64 %1372, i64* %PC
  %1373 = inttoptr i64 %1370 to i32*
  %1374 = load i32, i32* %1373
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = load i64, i64* %PC
  %1377 = sub i64 %1376, 684
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 5
  store i64 %1381, i64* %PC
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1383 = load i64, i64* %1382, align 8, !tbaa !2428
  %1384 = add i64 %1383, -8
  %1385 = inttoptr i64 %1384 to i64*
  store i64 %1379, i64* %1385
  store i64 %1384, i64* %1382, align 8, !tbaa !2428
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1377, i64* %1386, align 8, !tbaa !2428
  %1387 = load i64, i64* %PC
  %1388 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1387, %struct.Memory* %MEMORY.1)
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 8
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = load i64, i64* %RAX
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  store i64 %1395, i64* %RCX, align 8, !tbaa !2428
  %1398 = load i64, i64* %RCX
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = add i64 4, %1398
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  %1402 = icmp ult i64 %1401, %1398
  %1403 = icmp ult i64 %1401, 4
  %1404 = or i1 %1402, %1403
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1405, i8* %1406, align 1, !tbaa !2432
  %1407 = trunc i64 %1401 to i32
  %1408 = and i32 %1407, 255
  %1409 = call i32 @llvm.ctpop.i32(i32 %1408) #16
  %1410 = trunc i32 %1409 to i8
  %1411 = and i8 %1410, 1
  %1412 = xor i8 %1411, 1
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1412, i8* %1413, align 1, !tbaa !2446
  %1414 = xor i64 4, %1398
  %1415 = xor i64 %1414, %1401
  %1416 = lshr i64 %1415, 4
  %1417 = trunc i64 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1418, i8* %1419, align 1, !tbaa !2447
  %1420 = icmp eq i64 %1401, 0
  %1421 = zext i1 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1421, i8* %1422, align 1, !tbaa !2448
  %1423 = lshr i64 %1401, 63
  %1424 = trunc i64 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1424, i8* %1425, align 1, !tbaa !2449
  %1426 = lshr i64 %1398, 63
  %1427 = xor i64 %1423, %1426
  %1428 = add nuw nsw i64 %1427, %1423
  %1429 = icmp eq i64 %1428, 2
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1430, i8* %1431, align 1, !tbaa !2450
  %1432 = load i64, i64* %RBP
  %1433 = sub i64 %1432, 8
  %1434 = load i64, i64* %RCX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1433 to i64*
  store i64 %1434, i64* %1437
  %1438 = load i64, i64* %RAX
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 3
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sext i32 %1442 to i64
  store i64 %1443, i64* %RAX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RAX
  %1445 = mul i64 %1444, 8
  %1446 = add i64 %1445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 8
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i64*
  %1450 = load i64, i64* %1449
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RBP
  %1452 = sub i64 %1451, 40
  %1453 = load i64, i64* %RAX
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 4
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1452 to i64*
  store i64 %1453, i64* %1456
  %1457 = load i64, i64* %PC
  %1458 = sub i64 %1457, 601
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1458, i64* %1461, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 12
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 7
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1463 to i32*
  store i32 20, i32* %1466
  %1467 = load i64, i64* %PC
  %1468 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1467, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1468

block_4009a6:                                     ; preds = %block_400586
  %1469 = load i64, i64* %RBP
  %1470 = sub i64 %1469, 12
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 7
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i32*
  store i32 22, i32* %1473
  %1474 = load i64, i64* %RBP
  %1475 = sub i64 %1474, 12
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 3
  store i64 %1477, i64* %PC
  %1478 = inttoptr i64 %1475 to i32*
  %1479 = load i32, i32* %1478
  %1480 = zext i32 %1479 to i64
  store i64 %1480, i64* %RDI, align 8, !tbaa !2428
  %1481 = load i64, i64* %PC
  %1482 = sub i64 %1481, 1184
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 5
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 5
  store i64 %1486, i64* %PC
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1488 = load i64, i64* %1487, align 8, !tbaa !2428
  %1489 = add i64 %1488, -8
  %1490 = inttoptr i64 %1489 to i64*
  store i64 %1484, i64* %1490
  store i64 %1489, i64* %1487, align 8, !tbaa !2428
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1482, i64* %1491, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1492, %struct.Memory* %MEMORY.1)
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 8
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RAX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RAX
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  store i64 %1500, i64* %RCX, align 8, !tbaa !2428
  %1503 = load i64, i64* %RCX
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 4
  store i64 %1505, i64* %PC
  %1506 = add i64 4, %1503
  store i64 %1506, i64* %RCX, align 8, !tbaa !2428
  %1507 = icmp ult i64 %1506, %1503
  %1508 = icmp ult i64 %1506, 4
  %1509 = or i1 %1507, %1508
  %1510 = zext i1 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1510, i8* %1511, align 1, !tbaa !2432
  %1512 = trunc i64 %1506 to i32
  %1513 = and i32 %1512, 255
  %1514 = call i32 @llvm.ctpop.i32(i32 %1513) #16
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1517, i8* %1518, align 1, !tbaa !2446
  %1519 = xor i64 4, %1503
  %1520 = xor i64 %1519, %1506
  %1521 = lshr i64 %1520, 4
  %1522 = trunc i64 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1523, i8* %1524, align 1, !tbaa !2447
  %1525 = icmp eq i64 %1506, 0
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1526, i8* %1527, align 1, !tbaa !2448
  %1528 = lshr i64 %1506, 63
  %1529 = trunc i64 %1528 to i8
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1529, i8* %1530, align 1, !tbaa !2449
  %1531 = lshr i64 %1503, 63
  %1532 = xor i64 %1528, %1531
  %1533 = add nuw nsw i64 %1532, %1528
  %1534 = icmp eq i64 %1533, 2
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1535, i8* %1536, align 1, !tbaa !2450
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 8
  %1539 = load i64, i64* %RCX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1538 to i64*
  store i64 %1539, i64* %1542
  %1543 = load i64, i64* %RAX
  %1544 = load i64, i64* %PC
  %1545 = add i64 %1544, 3
  store i64 %1545, i64* %PC
  %1546 = inttoptr i64 %1543 to i32*
  %1547 = load i32, i32* %1546
  %1548 = sext i32 %1547 to i64
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RAX
  %1550 = mul i64 %1549, 8
  %1551 = add i64 %1550, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 8
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1551 to i64*
  %1555 = load i64, i64* %1554
  store i64 %1555, i64* %RAX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RBP
  %1557 = sub i64 %1556, 40
  %1558 = load i64, i64* %RAX
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 4
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1557 to i64*
  store i64 %1558, i64* %1561
  %1562 = load i64, i64* %PC
  %1563 = sub i64 %1562, 1101
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1563, i64* %1566, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400622, %block_400a0a, %block_40058c, %block_400910, %block_4008ac, %block_400816, %block_40071c, %block_400b36, %block_400aa0, %block_4009a6, %block_4007b2, %block_4006b8, %block_400ad2, %block_4009d8, %block_40074e, %block_40084f, %block_400b68, %block_400654, %block_400a6e, %block_400974, %block_4008de, %block_4007e4, %block_4006ea, %block_4005f0
  %MEMORY.1 = phi %struct.Memory* [ %886, %block_40084f ], [ %1609, %block_400aa0 ], [ %1493, %block_4009a6 ], [ %1388, %block_4007b2 ], [ %1707, %block_400b36 ], [ %1290, %block_4006b8 ], [ %1087, %block_4009d8 ], [ %984, %block_40074e ], [ %597, %block_400a6e ], [ %401, %block_4008de ], [ %2197, %block_40058c ], [ %1192, %block_400ad2 ], [ %695, %block_400654 ], [ %303, %block_4007e4 ], [ %499, %block_400974 ], [ %107, %block_4005f0 ], [ %205, %block_4006ea ], [ %793, %block_400b68 ], [ %1805, %block_40071c ], [ %1903, %block_400816 ], [ %2001, %block_4008ac ], [ %2099, %block_400910 ], [ %2295, %block_400a0a ], [ %2407, %block_400622 ]
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 40
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 4
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i64*
  %1572 = load i64, i64* %1571
  store i64 %1572, i64* %RAX, align 8, !tbaa !2428
  %1573 = load i64, i64* %RAX
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 2
  store i64 %1575, i64* %PC
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1573, i64* %1576, align 8, !tbaa !2428
  %1577 = load i64, i64* %PC
  switch i64 %1577, label %2488 [
    i64 4196224, label %block_400780
    i64 4195874, label %block_400622
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196524, label %block_4008ac
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195824, label %block_4005f0
    i64 4196724, label %block_400974
    i64 4196324, label %block_4007e4
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4195724, label %block_40058c
    i64 4196574, label %block_4008de
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196824, label %block_4009d8
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196674, label %block_400942
    i64 4196774, label %block_4009a6
    i64 4197024, label %block_400aa0
  ]

block_400a3c:                                     ; preds = %block_400586
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 12
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 7
  store i64 %1581, i64* %PC
  %1582 = inttoptr i64 %1579 to i32*
  store i32 25, i32* %1582
  %1583 = load i64, i64* %PC
  %1584 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1583, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1584

block_400aa0:                                     ; preds = %block_400586
  %1585 = load i64, i64* %RBP
  %1586 = sub i64 %1585, 12
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 7
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1586 to i32*
  store i32 27, i32* %1589
  %1590 = load i64, i64* %RBP
  %1591 = sub i64 %1590, 12
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 3
  store i64 %1593, i64* %PC
  %1594 = inttoptr i64 %1591 to i32*
  %1595 = load i32, i32* %1594
  %1596 = zext i32 %1595 to i64
  store i64 %1596, i64* %RDI, align 8, !tbaa !2428
  %1597 = load i64, i64* %PC
  %1598 = sub i64 %1597, 1434
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 5
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1604 = load i64, i64* %1603, align 8, !tbaa !2428
  %1605 = add i64 %1604, -8
  %1606 = inttoptr i64 %1605 to i64*
  store i64 %1600, i64* %1606
  store i64 %1605, i64* %1603, align 8, !tbaa !2428
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1598, i64* %1607, align 8, !tbaa !2428
  %1608 = load i64, i64* %PC
  %1609 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1608, %struct.Memory* %MEMORY.1)
  %1610 = load i64, i64* %RBP
  %1611 = sub i64 %1610, 8
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 4
  store i64 %1613, i64* %PC
  %1614 = inttoptr i64 %1611 to i64*
  %1615 = load i64, i64* %1614
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = load i64, i64* %RAX
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 3
  store i64 %1618, i64* %PC
  store i64 %1616, i64* %RCX, align 8, !tbaa !2428
  %1619 = load i64, i64* %RCX
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = add i64 4, %1619
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = icmp ult i64 %1622, %1619
  %1624 = icmp ult i64 %1622, 4
  %1625 = or i1 %1623, %1624
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1626, i8* %1627, align 1, !tbaa !2432
  %1628 = trunc i64 %1622 to i32
  %1629 = and i32 %1628, 255
  %1630 = call i32 @llvm.ctpop.i32(i32 %1629) #16
  %1631 = trunc i32 %1630 to i8
  %1632 = and i8 %1631, 1
  %1633 = xor i8 %1632, 1
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1633, i8* %1634, align 1, !tbaa !2446
  %1635 = xor i64 4, %1619
  %1636 = xor i64 %1635, %1622
  %1637 = lshr i64 %1636, 4
  %1638 = trunc i64 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1639, i8* %1640, align 1, !tbaa !2447
  %1641 = icmp eq i64 %1622, 0
  %1642 = zext i1 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1642, i8* %1643, align 1, !tbaa !2448
  %1644 = lshr i64 %1622, 63
  %1645 = trunc i64 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1645, i8* %1646, align 1, !tbaa !2449
  %1647 = lshr i64 %1619, 63
  %1648 = xor i64 %1644, %1647
  %1649 = add nuw nsw i64 %1648, %1644
  %1650 = icmp eq i64 %1649, 2
  %1651 = zext i1 %1650 to i8
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1651, i8* %1652, align 1, !tbaa !2450
  %1653 = load i64, i64* %RBP
  %1654 = sub i64 %1653, 8
  %1655 = load i64, i64* %RCX
  %1656 = load i64, i64* %PC
  %1657 = add i64 %1656, 4
  store i64 %1657, i64* %PC
  %1658 = inttoptr i64 %1654 to i64*
  store i64 %1655, i64* %1658
  %1659 = load i64, i64* %RAX
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 3
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to i32*
  %1663 = load i32, i32* %1662
  %1664 = sext i32 %1663 to i64
  store i64 %1664, i64* %RAX, align 8, !tbaa !2428
  %1665 = load i64, i64* %RAX
  %1666 = mul i64 %1665, 8
  %1667 = add i64 %1666, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 8
  store i64 %1669, i64* %PC
  %1670 = inttoptr i64 %1667 to i64*
  %1671 = load i64, i64* %1670
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 40
  %1674 = load i64, i64* %RAX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %PC
  %1679 = sub i64 %1678, 1351
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 5
  store i64 %1681, i64* %PC
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1679, i64* %1682, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1683 = load i64, i64* %RBP
  %1684 = sub i64 %1683, 12
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 7
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1684 to i32*
  store i32 30, i32* %1687
  %1688 = load i64, i64* %RBP
  %1689 = sub i64 %1688, 12
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 3
  store i64 %1691, i64* %PC
  %1692 = inttoptr i64 %1689 to i32*
  %1693 = load i32, i32* %1692
  %1694 = zext i32 %1693 to i64
  store i64 %1694, i64* %RDI, align 8, !tbaa !2428
  %1695 = load i64, i64* %PC
  %1696 = sub i64 %1695, 1584
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1702 = load i64, i64* %1701, align 8, !tbaa !2428
  %1703 = add i64 %1702, -8
  %1704 = inttoptr i64 %1703 to i64*
  store i64 %1698, i64* %1704
  store i64 %1703, i64* %1701, align 8, !tbaa !2428
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1696, i64* %1705, align 8, !tbaa !2428
  %1706 = load i64, i64* %PC
  %1707 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1706, %struct.Memory* %MEMORY.1)
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 8
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 4
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to i64*
  %1713 = load i64, i64* %1712
  store i64 %1713, i64* %RAX, align 8, !tbaa !2428
  %1714 = load i64, i64* %RAX
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 3
  store i64 %1716, i64* %PC
  store i64 %1714, i64* %RCX, align 8, !tbaa !2428
  %1717 = load i64, i64* %RCX
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 4
  store i64 %1719, i64* %PC
  %1720 = add i64 4, %1717
  store i64 %1720, i64* %RCX, align 8, !tbaa !2428
  %1721 = icmp ult i64 %1720, %1717
  %1722 = icmp ult i64 %1720, 4
  %1723 = or i1 %1721, %1722
  %1724 = zext i1 %1723 to i8
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1724, i8* %1725, align 1, !tbaa !2432
  %1726 = trunc i64 %1720 to i32
  %1727 = and i32 %1726, 255
  %1728 = call i32 @llvm.ctpop.i32(i32 %1727) #16
  %1729 = trunc i32 %1728 to i8
  %1730 = and i8 %1729, 1
  %1731 = xor i8 %1730, 1
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1731, i8* %1732, align 1, !tbaa !2446
  %1733 = xor i64 4, %1717
  %1734 = xor i64 %1733, %1720
  %1735 = lshr i64 %1734, 4
  %1736 = trunc i64 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1737, i8* %1738, align 1, !tbaa !2447
  %1739 = icmp eq i64 %1720, 0
  %1740 = zext i1 %1739 to i8
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1740, i8* %1741, align 1, !tbaa !2448
  %1742 = lshr i64 %1720, 63
  %1743 = trunc i64 %1742 to i8
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1743, i8* %1744, align 1, !tbaa !2449
  %1745 = lshr i64 %1717, 63
  %1746 = xor i64 %1742, %1745
  %1747 = add nuw nsw i64 %1746, %1742
  %1748 = icmp eq i64 %1747, 2
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1749, i8* %1750, align 1, !tbaa !2450
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 8
  %1753 = load i64, i64* %RCX
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 4
  store i64 %1755, i64* %PC
  %1756 = inttoptr i64 %1752 to i64*
  store i64 %1753, i64* %1756
  %1757 = load i64, i64* %RAX
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 3
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  %1761 = load i32, i32* %1760
  %1762 = sext i32 %1761 to i64
  store i64 %1762, i64* %RAX, align 8, !tbaa !2428
  %1763 = load i64, i64* %RAX
  %1764 = mul i64 %1763, 8
  %1765 = add i64 %1764, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 8
  store i64 %1767, i64* %PC
  %1768 = inttoptr i64 %1765 to i64*
  %1769 = load i64, i64* %1768
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 40
  %1772 = load i64, i64* %RAX
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 4
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1771 to i64*
  store i64 %1772, i64* %1775
  %1776 = load i64, i64* %PC
  %1777 = sub i64 %1776, 1501
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 5
  store i64 %1779, i64* %PC
  %1780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1777, i64* %1780, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 12
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 7
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i32*
  store i32 9, i32* %1785
  %1786 = load i64, i64* %RBP
  %1787 = sub i64 %1786, 12
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to i32*
  %1791 = load i32, i32* %1790
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RDI, align 8, !tbaa !2428
  %1793 = load i64, i64* %PC
  %1794 = sub i64 %1793, 534
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1800 = load i64, i64* %1799, align 8, !tbaa !2428
  %1801 = add i64 %1800, -8
  %1802 = inttoptr i64 %1801 to i64*
  store i64 %1796, i64* %1802
  store i64 %1801, i64* %1799, align 8, !tbaa !2428
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1794, i64* %1803, align 8, !tbaa !2428
  %1804 = load i64, i64* %PC
  %1805 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1804, %struct.Memory* %MEMORY.1)
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 8
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RAX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RAX
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 3
  store i64 %1814, i64* %PC
  store i64 %1812, i64* %RCX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RCX
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 4
  store i64 %1817, i64* %PC
  %1818 = add i64 4, %1815
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = icmp ult i64 %1818, %1815
  %1820 = icmp ult i64 %1818, 4
  %1821 = or i1 %1819, %1820
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1822, i8* %1823, align 1, !tbaa !2432
  %1824 = trunc i64 %1818 to i32
  %1825 = and i32 %1824, 255
  %1826 = call i32 @llvm.ctpop.i32(i32 %1825) #16
  %1827 = trunc i32 %1826 to i8
  %1828 = and i8 %1827, 1
  %1829 = xor i8 %1828, 1
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1829, i8* %1830, align 1, !tbaa !2446
  %1831 = xor i64 4, %1815
  %1832 = xor i64 %1831, %1818
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1835, i8* %1836, align 1, !tbaa !2447
  %1837 = icmp eq i64 %1818, 0
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1838, i8* %1839, align 1, !tbaa !2448
  %1840 = lshr i64 %1818, 63
  %1841 = trunc i64 %1840 to i8
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1841, i8* %1842, align 1, !tbaa !2449
  %1843 = lshr i64 %1815, 63
  %1844 = xor i64 %1840, %1843
  %1845 = add nuw nsw i64 %1844, %1840
  %1846 = icmp eq i64 %1845, 2
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1847, i8* %1848, align 1, !tbaa !2450
  %1849 = load i64, i64* %RBP
  %1850 = sub i64 %1849, 8
  %1851 = load i64, i64* %RCX
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1850 to i64*
  store i64 %1851, i64* %1854
  %1855 = load i64, i64* %RAX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  %1859 = load i32, i32* %1858
  %1860 = sext i32 %1859 to i64
  store i64 %1860, i64* %RAX, align 8, !tbaa !2428
  %1861 = load i64, i64* %RAX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 8
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i64*
  %1867 = load i64, i64* %1866
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 40
  %1870 = load i64, i64* %RAX
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1869 to i64*
  store i64 %1870, i64* %1873
  %1874 = load i64, i64* %PC
  %1875 = sub i64 %1874, 451
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1875, i64* %1878, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 12
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 7
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i32*
  store i32 14, i32* %1883
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 12
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i32*
  %1889 = load i32, i32* %1888
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RDI, align 8, !tbaa !2428
  %1891 = load i64, i64* %PC
  %1892 = sub i64 %1891, 784
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 5
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1898 = load i64, i64* %1897, align 8, !tbaa !2428
  %1899 = add i64 %1898, -8
  %1900 = inttoptr i64 %1899 to i64*
  store i64 %1894, i64* %1900
  store i64 %1899, i64* %1897, align 8, !tbaa !2428
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1892, i64* %1901, align 8, !tbaa !2428
  %1902 = load i64, i64* %PC
  %1903 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1902, %struct.Memory* %MEMORY.1)
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 8
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 4
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RAX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RAX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 3
  store i64 %1912, i64* %PC
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1913 = load i64, i64* %RCX
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = add i64 4, %1913
  store i64 %1916, i64* %RCX, align 8, !tbaa !2428
  %1917 = icmp ult i64 %1916, %1913
  %1918 = icmp ult i64 %1916, 4
  %1919 = or i1 %1917, %1918
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1920, i8* %1921, align 1, !tbaa !2432
  %1922 = trunc i64 %1916 to i32
  %1923 = and i32 %1922, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = xor i64 4, %1913
  %1930 = xor i64 %1929, %1916
  %1931 = lshr i64 %1930, 4
  %1932 = trunc i64 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1933, i8* %1934, align 1, !tbaa !2447
  %1935 = icmp eq i64 %1916, 0
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1936, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1916, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = lshr i64 %1913, 63
  %1942 = xor i64 %1938, %1941
  %1943 = add nuw nsw i64 %1942, %1938
  %1944 = icmp eq i64 %1943, 2
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1945, i8* %1946, align 1, !tbaa !2450
  %1947 = load i64, i64* %RBP
  %1948 = sub i64 %1947, 8
  %1949 = load i64, i64* %RCX
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1948 to i64*
  store i64 %1949, i64* %1952
  %1953 = load i64, i64* %RAX
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 3
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  %1957 = load i32, i32* %1956
  %1958 = sext i32 %1957 to i64
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RAX
  %1960 = mul i64 %1959, 8
  %1961 = add i64 %1960, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 40
  %1968 = load i64, i64* %RAX
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 4
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1967 to i64*
  store i64 %1968, i64* %1971
  %1972 = load i64, i64* %PC
  %1973 = sub i64 %1972, 701
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 5
  store i64 %1975, i64* %PC
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1973, i64* %1976, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 12
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 7
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i32*
  store i32 17, i32* %1981
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 12
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  %1986 = inttoptr i64 %1983 to i32*
  %1987 = load i32, i32* %1986
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RDI, align 8, !tbaa !2428
  %1989 = load i64, i64* %PC
  %1990 = sub i64 %1989, 934
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1996 = load i64, i64* %1995, align 8, !tbaa !2428
  %1997 = add i64 %1996, -8
  %1998 = inttoptr i64 %1997 to i64*
  store i64 %1992, i64* %1998
  store i64 %1997, i64* %1995, align 8, !tbaa !2428
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1990, i64* %1999, align 8, !tbaa !2428
  %2000 = load i64, i64* %PC
  %2001 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2000, %struct.Memory* %MEMORY.1)
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 8
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i64*
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = load i64, i64* %RAX
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 3
  store i64 %2010, i64* %PC
  store i64 %2008, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RCX
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = add i64 4, %2011
  store i64 %2014, i64* %RCX, align 8, !tbaa !2428
  %2015 = icmp ult i64 %2014, %2011
  %2016 = icmp ult i64 %2014, 4
  %2017 = or i1 %2015, %2016
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2018, i8* %2019, align 1, !tbaa !2432
  %2020 = trunc i64 %2014 to i32
  %2021 = and i32 %2020, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = xor i64 4, %2011
  %2028 = xor i64 %2027, %2014
  %2029 = lshr i64 %2028, 4
  %2030 = trunc i64 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2031, i8* %2032, align 1, !tbaa !2447
  %2033 = icmp eq i64 %2014, 0
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2034, i8* %2035, align 1, !tbaa !2448
  %2036 = lshr i64 %2014, 63
  %2037 = trunc i64 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2037, i8* %2038, align 1, !tbaa !2449
  %2039 = lshr i64 %2011, 63
  %2040 = xor i64 %2036, %2039
  %2041 = add nuw nsw i64 %2040, %2036
  %2042 = icmp eq i64 %2041, 2
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2044, align 1, !tbaa !2450
  %2045 = load i64, i64* %RBP
  %2046 = sub i64 %2045, 8
  %2047 = load i64, i64* %RCX
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 4
  store i64 %2049, i64* %PC
  %2050 = inttoptr i64 %2046 to i64*
  store i64 %2047, i64* %2050
  %2051 = load i64, i64* %RAX
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 3
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = mul i64 %2057, 8
  %2059 = add i64 %2058, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 8
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to i64*
  %2063 = load i64, i64* %2062
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RBP
  %2065 = sub i64 %2064, 40
  %2066 = load i64, i64* %RAX
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 4
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2065 to i64*
  store i64 %2066, i64* %2069
  %2070 = load i64, i64* %PC
  %2071 = sub i64 %2070, 851
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 5
  store i64 %2073, i64* %PC
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2071, i64* %2074, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 12
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 7
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i32*
  store i32 19, i32* %2079
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 12
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2081 to i32*
  %2085 = load i32, i32* %2084
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDI, align 8, !tbaa !2428
  %2087 = load i64, i64* %PC
  %2088 = sub i64 %2087, 1034
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  store i64 %2092, i64* %PC
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2094 = load i64, i64* %2093, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2090, i64* %2096
  store i64 %2095, i64* %2093, align 8, !tbaa !2428
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2088, i64* %2097, align 8, !tbaa !2428
  %2098 = load i64, i64* %PC
  %2099 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2098, %struct.Memory* %MEMORY.1)
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 8
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 4
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to i64*
  %2105 = load i64, i64* %2104
  store i64 %2105, i64* %RAX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2109 = load i64, i64* %RCX
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = add i64 4, %2109
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = icmp ult i64 %2112, %2109
  %2114 = icmp ult i64 %2112, 4
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2116, i8* %2117, align 1, !tbaa !2432
  %2118 = trunc i64 %2112 to i32
  %2119 = and i32 %2118, 255
  %2120 = call i32 @llvm.ctpop.i32(i32 %2119) #16
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = xor i8 %2122, 1
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2123, i8* %2124, align 1, !tbaa !2446
  %2125 = xor i64 4, %2109
  %2126 = xor i64 %2125, %2112
  %2127 = lshr i64 %2126, 4
  %2128 = trunc i64 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2129, i8* %2130, align 1, !tbaa !2447
  %2131 = icmp eq i64 %2112, 0
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2132, i8* %2133, align 1, !tbaa !2448
  %2134 = lshr i64 %2112, 63
  %2135 = trunc i64 %2134 to i8
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2135, i8* %2136, align 1, !tbaa !2449
  %2137 = lshr i64 %2109, 63
  %2138 = xor i64 %2134, %2137
  %2139 = add nuw nsw i64 %2138, %2134
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2141, i8* %2142, align 1, !tbaa !2450
  %2143 = load i64, i64* %RBP
  %2144 = sub i64 %2143, 8
  %2145 = load i64, i64* %RCX
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2144 to i64*
  store i64 %2145, i64* %2148
  %2149 = load i64, i64* %RAX
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 3
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RAX
  %2156 = mul i64 %2155, 8
  %2157 = add i64 %2156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 8
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2157 to i64*
  %2161 = load i64, i64* %2160
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 40
  %2164 = load i64, i64* %RAX
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2163 to i64*
  store i64 %2164, i64* %2167
  %2168 = load i64, i64* %PC
  %2169 = sub i64 %2168, 951
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 5
  store i64 %2171, i64* %PC
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2169, i64* %2172, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 12
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 7
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  store i32 1, i32* %2177
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 12
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i32*
  %2183 = load i32, i32* %2182
  %2184 = zext i32 %2183 to i64
  store i64 %2184, i64* %RDI, align 8, !tbaa !2428
  %2185 = load i64, i64* %PC
  %2186 = sub i64 %2185, 134
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2192 = load i64, i64* %2191, align 8, !tbaa !2428
  %2193 = add i64 %2192, -8
  %2194 = inttoptr i64 %2193 to i64*
  store i64 %2188, i64* %2194
  store i64 %2193, i64* %2191, align 8, !tbaa !2428
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2186, i64* %2195, align 8, !tbaa !2428
  %2196 = load i64, i64* %PC
  %2197 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2196, %struct.Memory* %MEMORY.1)
  %2198 = load i64, i64* %RBP
  %2199 = sub i64 %2198, 8
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 4
  store i64 %2201, i64* %PC
  %2202 = inttoptr i64 %2199 to i64*
  %2203 = load i64, i64* %2202
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = load i64, i64* %RAX
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  store i64 %2204, i64* %RCX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RCX
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = add i64 4, %2207
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = icmp ult i64 %2210, %2207
  %2212 = icmp ult i64 %2210, 4
  %2213 = or i1 %2211, %2212
  %2214 = zext i1 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2214, i8* %2215, align 1, !tbaa !2432
  %2216 = trunc i64 %2210 to i32
  %2217 = and i32 %2216, 255
  %2218 = call i32 @llvm.ctpop.i32(i32 %2217) #16
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = xor i8 %2220, 1
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2221, i8* %2222, align 1, !tbaa !2446
  %2223 = xor i64 4, %2207
  %2224 = xor i64 %2223, %2210
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2227, i8* %2228, align 1, !tbaa !2447
  %2229 = icmp eq i64 %2210, 0
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2230, i8* %2231, align 1, !tbaa !2448
  %2232 = lshr i64 %2210, 63
  %2233 = trunc i64 %2232 to i8
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2233, i8* %2234, align 1, !tbaa !2449
  %2235 = lshr i64 %2207, 63
  %2236 = xor i64 %2232, %2235
  %2237 = add nuw nsw i64 %2236, %2232
  %2238 = icmp eq i64 %2237, 2
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2239, i8* %2240, align 1, !tbaa !2450
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 8
  %2243 = load i64, i64* %RCX
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2242 to i64*
  store i64 %2243, i64* %2246
  %2247 = load i64, i64* %RAX
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RAX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 8
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2255 to i64*
  %2259 = load i64, i64* %2258
  store i64 %2259, i64* %RAX, align 8, !tbaa !2428
  %2260 = load i64, i64* %RBP
  %2261 = sub i64 %2260, 40
  %2262 = load i64, i64* %RAX
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 4
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2261 to i64*
  store i64 %2262, i64* %2265
  %2266 = load i64, i64* %PC
  %2267 = sub i64 %2266, 51
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 5
  store i64 %2269, i64* %PC
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2267, i64* %2270, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 12
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 7
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i32*
  store i32 24, i32* %2275
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 12
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 3
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to i32*
  %2281 = load i32, i32* %2280
  %2282 = zext i32 %2281 to i64
  store i64 %2282, i64* %RDI, align 8, !tbaa !2428
  %2283 = load i64, i64* %PC
  %2284 = sub i64 %2283, 1284
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 5
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 5
  store i64 %2288, i64* %PC
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2290 = load i64, i64* %2289, align 8, !tbaa !2428
  %2291 = add i64 %2290, -8
  %2292 = inttoptr i64 %2291 to i64*
  store i64 %2286, i64* %2292
  store i64 %2291, i64* %2289, align 8, !tbaa !2428
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2284, i64* %2293, align 8, !tbaa !2428
  %2294 = load i64, i64* %PC
  %2295 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2294, %struct.Memory* %MEMORY.1)
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 8
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RAX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RAX
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 3
  store i64 %2304, i64* %PC
  store i64 %2302, i64* %RCX, align 8, !tbaa !2428
  %2305 = load i64, i64* %RCX
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 4
  store i64 %2307, i64* %PC
  %2308 = add i64 4, %2305
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = icmp ult i64 %2308, %2305
  %2310 = icmp ult i64 %2308, 4
  %2311 = or i1 %2309, %2310
  %2312 = zext i1 %2311 to i8
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2312, i8* %2313, align 1, !tbaa !2432
  %2314 = trunc i64 %2308 to i32
  %2315 = and i32 %2314, 255
  %2316 = call i32 @llvm.ctpop.i32(i32 %2315) #16
  %2317 = trunc i32 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = xor i8 %2318, 1
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2319, i8* %2320, align 1, !tbaa !2446
  %2321 = xor i64 4, %2305
  %2322 = xor i64 %2321, %2308
  %2323 = lshr i64 %2322, 4
  %2324 = trunc i64 %2323 to i8
  %2325 = and i8 %2324, 1
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2325, i8* %2326, align 1, !tbaa !2447
  %2327 = icmp eq i64 %2308, 0
  %2328 = zext i1 %2327 to i8
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2328, i8* %2329, align 1, !tbaa !2448
  %2330 = lshr i64 %2308, 63
  %2331 = trunc i64 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2331, i8* %2332, align 1, !tbaa !2449
  %2333 = lshr i64 %2305, 63
  %2334 = xor i64 %2330, %2333
  %2335 = add nuw nsw i64 %2334, %2330
  %2336 = icmp eq i64 %2335, 2
  %2337 = zext i1 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2337, i8* %2338, align 1, !tbaa !2450
  %2339 = load i64, i64* %RBP
  %2340 = sub i64 %2339, 8
  %2341 = load i64, i64* %RCX
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 4
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2340 to i64*
  store i64 %2341, i64* %2344
  %2345 = load i64, i64* %RAX
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 3
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sext i32 %2349 to i64
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RAX
  %2352 = mul i64 %2351, 8
  %2353 = add i64 %2352, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 8
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to i64*
  %2357 = load i64, i64* %2356
  store i64 %2357, i64* %RAX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RBP
  %2359 = sub i64 %2358, 40
  %2360 = load i64, i64* %RAX
  %2361 = load i64, i64* %PC
  %2362 = add i64 %2361, 4
  store i64 %2362, i64* %PC
  %2363 = inttoptr i64 %2359 to i64*
  store i64 %2360, i64* %2363
  %2364 = load i64, i64* %PC
  %2365 = sub i64 %2364, 1201
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 5
  store i64 %2367, i64* %PC
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2365, i64* %2368, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2369 = load i64, i64* %RBP
  %2370 = sub i64 %2369, 12
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 7
  store i64 %2372, i64* %PC
  %2373 = inttoptr i64 %2370 to i32*
  store i32 6, i32* %2373
  %2374 = load i64, i64* %PC
  %2375 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %2374, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2375

block_400b04:                                     ; preds = %block_400586
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 12
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 7
  store i64 %2379, i64* %PC
  %2380 = inttoptr i64 %2377 to i32*
  store i32 29, i32* %2380
  %2381 = load i64, i64* %PC
  %2382 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2381, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2382

block_400622:                                     ; preds = %block_400586
  %2383 = load i64, i64* %RBP
  %2384 = sub i64 %2383, 12
  %2385 = load i64, i64* %PC
  %2386 = add i64 %2385, 7
  store i64 %2386, i64* %PC
  %2387 = inttoptr i64 %2384 to i32*
  store i32 4, i32* %2387
  %2388 = load i64, i64* %RBP
  %2389 = sub i64 %2388, 12
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 3
  store i64 %2391, i64* %PC
  %2392 = inttoptr i64 %2389 to i32*
  %2393 = load i32, i32* %2392
  %2394 = zext i32 %2393 to i64
  store i64 %2394, i64* %RDI, align 8, !tbaa !2428
  %2395 = load i64, i64* %PC
  %2396 = sub i64 %2395, 284
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 5
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 5
  store i64 %2400, i64* %PC
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2402 = load i64, i64* %2401, align 8, !tbaa !2428
  %2403 = add i64 %2402, -8
  %2404 = inttoptr i64 %2403 to i64*
  store i64 %2398, i64* %2404
  store i64 %2403, i64* %2401, align 8, !tbaa !2428
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2396, i64* %2405, align 8, !tbaa !2428
  %2406 = load i64, i64* %PC
  %2407 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2406, %struct.Memory* %MEMORY.1)
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 8
  %2410 = load i64, i64* %PC
  %2411 = add i64 %2410, 4
  store i64 %2411, i64* %PC
  %2412 = inttoptr i64 %2409 to i64*
  %2413 = load i64, i64* %2412
  store i64 %2413, i64* %RAX, align 8, !tbaa !2428
  %2414 = load i64, i64* %RAX
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 3
  store i64 %2416, i64* %PC
  store i64 %2414, i64* %RCX, align 8, !tbaa !2428
  %2417 = load i64, i64* %RCX
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 4
  store i64 %2419, i64* %PC
  %2420 = add i64 4, %2417
  store i64 %2420, i64* %RCX, align 8, !tbaa !2428
  %2421 = icmp ult i64 %2420, %2417
  %2422 = icmp ult i64 %2420, 4
  %2423 = or i1 %2421, %2422
  %2424 = zext i1 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2424, i8* %2425, align 1, !tbaa !2432
  %2426 = trunc i64 %2420 to i32
  %2427 = and i32 %2426, 255
  %2428 = call i32 @llvm.ctpop.i32(i32 %2427) #16
  %2429 = trunc i32 %2428 to i8
  %2430 = and i8 %2429, 1
  %2431 = xor i8 %2430, 1
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2431, i8* %2432, align 1, !tbaa !2446
  %2433 = xor i64 4, %2417
  %2434 = xor i64 %2433, %2420
  %2435 = lshr i64 %2434, 4
  %2436 = trunc i64 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2437, i8* %2438, align 1, !tbaa !2447
  %2439 = icmp eq i64 %2420, 0
  %2440 = zext i1 %2439 to i8
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2440, i8* %2441, align 1, !tbaa !2448
  %2442 = lshr i64 %2420, 63
  %2443 = trunc i64 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2443, i8* %2444, align 1, !tbaa !2449
  %2445 = lshr i64 %2417, 63
  %2446 = xor i64 %2442, %2445
  %2447 = add nuw nsw i64 %2446, %2442
  %2448 = icmp eq i64 %2447, 2
  %2449 = zext i1 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2449, i8* %2450, align 1, !tbaa !2450
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 8
  %2453 = load i64, i64* %RCX
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 4
  store i64 %2455, i64* %PC
  %2456 = inttoptr i64 %2452 to i64*
  store i64 %2453, i64* %2456
  %2457 = load i64, i64* %RAX
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 3
  store i64 %2459, i64* %PC
  %2460 = inttoptr i64 %2457 to i32*
  %2461 = load i32, i32* %2460
  %2462 = sext i32 %2461 to i64
  store i64 %2462, i64* %RAX, align 8, !tbaa !2428
  %2463 = load i64, i64* %RAX
  %2464 = mul i64 %2463, 8
  %2465 = add i64 %2464, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2466 = load i64, i64* %PC
  %2467 = add i64 %2466, 8
  store i64 %2467, i64* %PC
  %2468 = inttoptr i64 %2465 to i64*
  %2469 = load i64, i64* %2468
  store i64 %2469, i64* %RAX, align 8, !tbaa !2428
  %2470 = load i64, i64* %RBP
  %2471 = sub i64 %2470, 40
  %2472 = load i64, i64* %RAX
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 4
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2471 to i64*
  store i64 %2472, i64* %2475
  %2476 = load i64, i64* %PC
  %2477 = sub i64 %2476, 201
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 5
  store i64 %2479, i64* %PC
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2477, i64* %2480, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2481 = load i64, i64* %RBP
  %2482 = sub i64 %2481, 12
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 7
  store i64 %2484, i64* %PC
  %2485 = inttoptr i64 %2482 to i32*
  store i32 11, i32* %2485
  %2486 = load i64, i64* %PC
  %2487 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2486, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2487

; <label>:2488:                                   ; preds = %block_400586
  %2489 = load i64, i64* %PC
  %2490 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2489, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2490
}

; Function Attrs: noinline
define %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400488, label %block_400471

block_40047b:                                     ; preds = %block_400471
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195466, label %block_40048a
    i64 4195459, label %block_400483
  ]

block_400471:                                     ; preds = %block_400460
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400488, label %block_40047b

block_400488:                                     ; preds = %block_400483, %block_400471, %block_400460
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400460 ], [ %2, %block_400471 ], [ %2, %block_400483 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40048a:                                     ; preds = %block_40047b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400483:                                     ; preds = %block_40047b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400488

; <label>:163:                                    ; preds = %block_40047b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400949(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400949

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.1)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400949:                                     ; preds = %block_400942, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400942 ]
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 3
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  %1166 = load i32, i32* %1165
  %1167 = zext i32 %1166 to i64
  store i64 %1167, i64* %RDI, align 8, !tbaa !2428
  %1168 = load i64, i64* %PC
  %1169 = sub i64 %1168, 1084
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 5
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  store i64 %1173, i64* %PC
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1175 = load i64, i64* %1174, align 8, !tbaa !2428
  %1176 = add i64 %1175, -8
  %1177 = inttoptr i64 %1176 to i64*
  store i64 %1171, i64* %1177
  store i64 %1176, i64* %1174, align 8, !tbaa !2428
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1169, i64* %1178, align 8, !tbaa !2428
  %1179 = load i64, i64* %PC
  %1180 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1179, %struct.Memory* %MEMORY.0)
  %1181 = load i64, i64* %RBP
  %1182 = sub i64 %1181, 8
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1182 to i64*
  %1186 = load i64, i64* %1185
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i64, i64* %RAX
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 3
  store i64 %1189, i64* %PC
  store i64 %1187, i64* %RCX, align 8, !tbaa !2428
  %1190 = load i64, i64* %RCX
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 4
  store i64 %1192, i64* %PC
  %1193 = add i64 4, %1190
  store i64 %1193, i64* %RCX, align 8, !tbaa !2428
  %1194 = icmp ult i64 %1193, %1190
  %1195 = icmp ult i64 %1193, 4
  %1196 = or i1 %1194, %1195
  %1197 = zext i1 %1196 to i8
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1197, i8* %1198, align 1, !tbaa !2432
  %1199 = trunc i64 %1193 to i32
  %1200 = and i32 %1199, 255
  %1201 = call i32 @llvm.ctpop.i32(i32 %1200) #16
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1204, i8* %1205, align 1, !tbaa !2446
  %1206 = xor i64 4, %1190
  %1207 = xor i64 %1206, %1193
  %1208 = lshr i64 %1207, 4
  %1209 = trunc i64 %1208 to i8
  %1210 = and i8 %1209, 1
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1210, i8* %1211, align 1, !tbaa !2447
  %1212 = icmp eq i64 %1193, 0
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1213, i8* %1214, align 1, !tbaa !2448
  %1215 = lshr i64 %1193, 63
  %1216 = trunc i64 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1216, i8* %1217, align 1, !tbaa !2449
  %1218 = lshr i64 %1190, 63
  %1219 = xor i64 %1215, %1218
  %1220 = add nuw nsw i64 %1219, %1215
  %1221 = icmp eq i64 %1220, 2
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1222, i8* %1223, align 1, !tbaa !2450
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 8
  %1226 = load i64, i64* %RCX
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 4
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1225 to i64*
  store i64 %1226, i64* %1229
  %1230 = load i64, i64* %RAX
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 3
  store i64 %1232, i64* %PC
  %1233 = inttoptr i64 %1230 to i32*
  %1234 = load i32, i32* %1233
  %1235 = sext i32 %1234 to i64
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RAX
  %1237 = mul i64 %1236, 8
  %1238 = add i64 %1237, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 8
  store i64 %1240, i64* %PC
  %1241 = inttoptr i64 %1238 to i64*
  %1242 = load i64, i64* %1241
  store i64 %1242, i64* %RAX, align 8, !tbaa !2428
  %1243 = load i64, i64* %RBP
  %1244 = sub i64 %1243, 40
  %1245 = load i64, i64* %RAX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 4
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1244 to i64*
  store i64 %1245, i64* %1248
  %1249 = load i64, i64* %PC
  %1250 = sub i64 %1249, 1001
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %PC
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1250, i64* %1253, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1254 = load i64, i64* %RBP
  %1255 = sub i64 %1254, 12
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 7
  store i64 %1257, i64* %PC
  %1258 = inttoptr i64 %1255 to i32*
  store i32 15, i32* %1258
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  %1264 = load i32, i32* %1263
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RDI, align 8, !tbaa !2428
  %1266 = load i64, i64* %PC
  %1267 = sub i64 %1266, 834
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1277, %struct.Memory* %MEMORY.1)
  %1279 = load i64, i64* %RBP
  %1280 = sub i64 %1279, 8
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %PC
  %1283 = inttoptr i64 %1280 to i64*
  %1284 = load i64, i64* %1283
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 3
  store i64 %1287, i64* %PC
  store i64 %1285, i64* %RCX, align 8, !tbaa !2428
  %1288 = load i64, i64* %RCX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = add i64 4, %1288
  store i64 %1291, i64* %RCX, align 8, !tbaa !2428
  %1292 = icmp ult i64 %1291, %1288
  %1293 = icmp ult i64 %1291, 4
  %1294 = or i1 %1292, %1293
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = trunc i64 %1291 to i32
  %1298 = and i32 %1297, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2446
  %1304 = xor i64 4, %1288
  %1305 = xor i64 %1304, %1291
  %1306 = lshr i64 %1305, 4
  %1307 = trunc i64 %1306 to i8
  %1308 = and i8 %1307, 1
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1308, i8* %1309, align 1, !tbaa !2447
  %1310 = icmp eq i64 %1291, 0
  %1311 = zext i1 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1311, i8* %1312, align 1, !tbaa !2448
  %1313 = lshr i64 %1291, 63
  %1314 = trunc i64 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1314, i8* %1315, align 1, !tbaa !2449
  %1316 = lshr i64 %1288, 63
  %1317 = xor i64 %1313, %1316
  %1318 = add nuw nsw i64 %1317, %1313
  %1319 = icmp eq i64 %1318, 2
  %1320 = zext i1 %1319 to i8
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1320, i8* %1321, align 1, !tbaa !2450
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 8
  %1324 = load i64, i64* %RCX
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1323 to i64*
  store i64 %1324, i64* %1327
  %1328 = load i64, i64* %RAX
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 3
  store i64 %1330, i64* %PC
  %1331 = inttoptr i64 %1328 to i32*
  %1332 = load i32, i32* %1331
  %1333 = sext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX
  %1335 = mul i64 %1334, 8
  %1336 = add i64 %1335, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 8
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %RAX, align 8, !tbaa !2428
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 40
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %PC
  %1348 = sub i64 %1347, 751
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  store i64 %1350, i64* %PC
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1348, i64* %1351, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 12
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 7
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i32*
  store i32 20, i32* %1356
  br label %block_400949

block_4005be:                                     ; preds = %block_400586
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 12
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 7
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  store i32 2, i32* %1361
  %1362 = load i64, i64* %PC
  %1363 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1362, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1363

block_4006b8:                                     ; preds = %block_400586
  %1364 = load i64, i64* %RBP
  %1365 = sub i64 %1364, 12
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 7
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1365 to i32*
  store i32 7, i32* %1368
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 12
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 3
  store i64 %1372, i64* %PC
  %1373 = inttoptr i64 %1370 to i32*
  %1374 = load i32, i32* %1373
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = load i64, i64* %PC
  %1377 = sub i64 %1376, 434
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 5
  store i64 %1381, i64* %PC
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1383 = load i64, i64* %1382, align 8, !tbaa !2428
  %1384 = add i64 %1383, -8
  %1385 = inttoptr i64 %1384 to i64*
  store i64 %1379, i64* %1385
  store i64 %1384, i64* %1382, align 8, !tbaa !2428
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1377, i64* %1386, align 8, !tbaa !2428
  %1387 = load i64, i64* %PC
  %1388 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1387, %struct.Memory* %MEMORY.1)
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 8
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = load i64, i64* %RAX
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  store i64 %1395, i64* %RCX, align 8, !tbaa !2428
  %1398 = load i64, i64* %RCX
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = add i64 4, %1398
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  %1402 = icmp ult i64 %1401, %1398
  %1403 = icmp ult i64 %1401, 4
  %1404 = or i1 %1402, %1403
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1405, i8* %1406, align 1, !tbaa !2432
  %1407 = trunc i64 %1401 to i32
  %1408 = and i32 %1407, 255
  %1409 = call i32 @llvm.ctpop.i32(i32 %1408) #16
  %1410 = trunc i32 %1409 to i8
  %1411 = and i8 %1410, 1
  %1412 = xor i8 %1411, 1
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1412, i8* %1413, align 1, !tbaa !2446
  %1414 = xor i64 4, %1398
  %1415 = xor i64 %1414, %1401
  %1416 = lshr i64 %1415, 4
  %1417 = trunc i64 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1418, i8* %1419, align 1, !tbaa !2447
  %1420 = icmp eq i64 %1401, 0
  %1421 = zext i1 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1421, i8* %1422, align 1, !tbaa !2448
  %1423 = lshr i64 %1401, 63
  %1424 = trunc i64 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1424, i8* %1425, align 1, !tbaa !2449
  %1426 = lshr i64 %1398, 63
  %1427 = xor i64 %1423, %1426
  %1428 = add nuw nsw i64 %1427, %1423
  %1429 = icmp eq i64 %1428, 2
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1430, i8* %1431, align 1, !tbaa !2450
  %1432 = load i64, i64* %RBP
  %1433 = sub i64 %1432, 8
  %1434 = load i64, i64* %RCX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1433 to i64*
  store i64 %1434, i64* %1437
  %1438 = load i64, i64* %RAX
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 3
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sext i32 %1442 to i64
  store i64 %1443, i64* %RAX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RAX
  %1445 = mul i64 %1444, 8
  %1446 = add i64 %1445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 8
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i64*
  %1450 = load i64, i64* %1449
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RBP
  %1452 = sub i64 %1451, 40
  %1453 = load i64, i64* %RAX
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 4
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1452 to i64*
  store i64 %1453, i64* %1456
  %1457 = load i64, i64* %PC
  %1458 = sub i64 %1457, 351
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1458, i64* %1461, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 12
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 7
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1463 to i32*
  store i32 30, i32* %1466
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 12
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 3
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1468 to i32*
  %1472 = load i32, i32* %1471
  %1473 = zext i32 %1472 to i64
  store i64 %1473, i64* %RDI, align 8, !tbaa !2428
  %1474 = load i64, i64* %PC
  %1475 = sub i64 %1474, 1584
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 5
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 5
  store i64 %1479, i64* %PC
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1481 = load i64, i64* %1480, align 8, !tbaa !2428
  %1482 = add i64 %1481, -8
  %1483 = inttoptr i64 %1482 to i64*
  store i64 %1477, i64* %1483
  store i64 %1482, i64* %1480, align 8, !tbaa !2428
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1475, i64* %1484, align 8, !tbaa !2428
  %1485 = load i64, i64* %PC
  %1486 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1485, %struct.Memory* %MEMORY.1)
  %1487 = load i64, i64* %RBP
  %1488 = sub i64 %1487, 8
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 4
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1488 to i64*
  %1492 = load i64, i64* %1491
  store i64 %1492, i64* %RAX, align 8, !tbaa !2428
  %1493 = load i64, i64* %RAX
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 3
  store i64 %1495, i64* %PC
  store i64 %1493, i64* %RCX, align 8, !tbaa !2428
  %1496 = load i64, i64* %RCX
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 4
  store i64 %1498, i64* %PC
  %1499 = add i64 4, %1496
  store i64 %1499, i64* %RCX, align 8, !tbaa !2428
  %1500 = icmp ult i64 %1499, %1496
  %1501 = icmp ult i64 %1499, 4
  %1502 = or i1 %1500, %1501
  %1503 = zext i1 %1502 to i8
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1503, i8* %1504, align 1, !tbaa !2432
  %1505 = trunc i64 %1499 to i32
  %1506 = and i32 %1505, 255
  %1507 = call i32 @llvm.ctpop.i32(i32 %1506) #16
  %1508 = trunc i32 %1507 to i8
  %1509 = and i8 %1508, 1
  %1510 = xor i8 %1509, 1
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1510, i8* %1511, align 1, !tbaa !2446
  %1512 = xor i64 4, %1496
  %1513 = xor i64 %1512, %1499
  %1514 = lshr i64 %1513, 4
  %1515 = trunc i64 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1516, i8* %1517, align 1, !tbaa !2447
  %1518 = icmp eq i64 %1499, 0
  %1519 = zext i1 %1518 to i8
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1519, i8* %1520, align 1, !tbaa !2448
  %1521 = lshr i64 %1499, 63
  %1522 = trunc i64 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1522, i8* %1523, align 1, !tbaa !2449
  %1524 = lshr i64 %1496, 63
  %1525 = xor i64 %1521, %1524
  %1526 = add nuw nsw i64 %1525, %1521
  %1527 = icmp eq i64 %1526, 2
  %1528 = zext i1 %1527 to i8
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1528, i8* %1529, align 1, !tbaa !2450
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 8
  %1532 = load i64, i64* %RCX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1531 to i64*
  store i64 %1532, i64* %1535
  %1536 = load i64, i64* %RAX
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 3
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i32*
  %1540 = load i32, i32* %1539
  %1541 = sext i32 %1540 to i64
  store i64 %1541, i64* %RAX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RAX
  %1543 = mul i64 %1542, 8
  %1544 = add i64 %1543, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 8
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1544 to i64*
  %1548 = load i64, i64* %1547
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RBP
  %1550 = sub i64 %1549, 40
  %1551 = load i64, i64* %RAX
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 4
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1550 to i64*
  store i64 %1551, i64* %1554
  %1555 = load i64, i64* %PC
  %1556 = sub i64 %1555, 1501
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 5
  store i64 %1558, i64* %PC
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1556, i64* %1559, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1560 = load i64, i64* %RBP
  %1561 = sub i64 %1560, 12
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 7
  store i64 %1563, i64* %PC
  %1564 = inttoptr i64 %1561 to i32*
  store i32 12, i32* %1564
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 12
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 3
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1566 to i32*
  %1570 = load i32, i32* %1569
  %1571 = zext i32 %1570 to i64
  store i64 %1571, i64* %RDI, align 8, !tbaa !2428
  %1572 = load i64, i64* %PC
  %1573 = sub i64 %1572, 684
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 5
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 5
  store i64 %1577, i64* %PC
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1579 = load i64, i64* %1578, align 8, !tbaa !2428
  %1580 = add i64 %1579, -8
  %1581 = inttoptr i64 %1580 to i64*
  store i64 %1575, i64* %1581
  store i64 %1580, i64* %1578, align 8, !tbaa !2428
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1573, i64* %1582, align 8, !tbaa !2428
  %1583 = load i64, i64* %PC
  %1584 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1583, %struct.Memory* %MEMORY.1)
  %1585 = load i64, i64* %RBP
  %1586 = sub i64 %1585, 8
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 4
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1586 to i64*
  %1590 = load i64, i64* %1589
  store i64 %1590, i64* %RAX, align 8, !tbaa !2428
  %1591 = load i64, i64* %RAX
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 3
  store i64 %1593, i64* %PC
  store i64 %1591, i64* %RCX, align 8, !tbaa !2428
  %1594 = load i64, i64* %RCX
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 4
  store i64 %1596, i64* %PC
  %1597 = add i64 4, %1594
  store i64 %1597, i64* %RCX, align 8, !tbaa !2428
  %1598 = icmp ult i64 %1597, %1594
  %1599 = icmp ult i64 %1597, 4
  %1600 = or i1 %1598, %1599
  %1601 = zext i1 %1600 to i8
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1601, i8* %1602, align 1, !tbaa !2432
  %1603 = trunc i64 %1597 to i32
  %1604 = and i32 %1603, 255
  %1605 = call i32 @llvm.ctpop.i32(i32 %1604) #16
  %1606 = trunc i32 %1605 to i8
  %1607 = and i8 %1606, 1
  %1608 = xor i8 %1607, 1
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1608, i8* %1609, align 1, !tbaa !2446
  %1610 = xor i64 4, %1594
  %1611 = xor i64 %1610, %1597
  %1612 = lshr i64 %1611, 4
  %1613 = trunc i64 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1614, i8* %1615, align 1, !tbaa !2447
  %1616 = icmp eq i64 %1597, 0
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1617, i8* %1618, align 1, !tbaa !2448
  %1619 = lshr i64 %1597, 63
  %1620 = trunc i64 %1619 to i8
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1620, i8* %1621, align 1, !tbaa !2449
  %1622 = lshr i64 %1594, 63
  %1623 = xor i64 %1619, %1622
  %1624 = add nuw nsw i64 %1623, %1619
  %1625 = icmp eq i64 %1624, 2
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1626, i8* %1627, align 1, !tbaa !2450
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 8
  %1630 = load i64, i64* %RCX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1629 to i64*
  store i64 %1630, i64* %1633
  %1634 = load i64, i64* %RAX
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 3
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i32*
  %1638 = load i32, i32* %1637
  %1639 = sext i32 %1638 to i64
  store i64 %1639, i64* %RAX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RAX
  %1641 = mul i64 %1640, 8
  %1642 = add i64 %1641, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 8
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1642 to i64*
  %1646 = load i64, i64* %1645
  store i64 %1646, i64* %RAX, align 8, !tbaa !2428
  %1647 = load i64, i64* %RBP
  %1648 = sub i64 %1647, 40
  %1649 = load i64, i64* %RAX
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 4
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1648 to i64*
  store i64 %1649, i64* %1652
  %1653 = load i64, i64* %PC
  %1654 = sub i64 %1653, 601
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 5
  store i64 %1656, i64* %PC
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1654, i64* %1657, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1658 = load i64, i64* %RBP
  %1659 = sub i64 %1658, 12
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 7
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to i32*
  store i32 17, i32* %1662
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 12
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 3
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1664 to i32*
  %1668 = load i32, i32* %1667
  %1669 = zext i32 %1668 to i64
  store i64 %1669, i64* %RDI, align 8, !tbaa !2428
  %1670 = load i64, i64* %PC
  %1671 = sub i64 %1670, 934
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 5
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 5
  store i64 %1675, i64* %PC
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1677 = load i64, i64* %1676, align 8, !tbaa !2428
  %1678 = add i64 %1677, -8
  %1679 = inttoptr i64 %1678 to i64*
  store i64 %1673, i64* %1679
  store i64 %1678, i64* %1676, align 8, !tbaa !2428
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1671, i64* %1680, align 8, !tbaa !2428
  %1681 = load i64, i64* %PC
  %1682 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1681, %struct.Memory* %MEMORY.1)
  %1683 = load i64, i64* %RBP
  %1684 = sub i64 %1683, 8
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1684 to i64*
  %1688 = load i64, i64* %1687
  store i64 %1688, i64* %RAX, align 8, !tbaa !2428
  %1689 = load i64, i64* %RAX
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 3
  store i64 %1691, i64* %PC
  store i64 %1689, i64* %RCX, align 8, !tbaa !2428
  %1692 = load i64, i64* %RCX
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 4
  store i64 %1694, i64* %PC
  %1695 = add i64 4, %1692
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = icmp ult i64 %1695, %1692
  %1697 = icmp ult i64 %1695, 4
  %1698 = or i1 %1696, %1697
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1699, i8* %1700, align 1, !tbaa !2432
  %1701 = trunc i64 %1695 to i32
  %1702 = and i32 %1701, 255
  %1703 = call i32 @llvm.ctpop.i32(i32 %1702) #16
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = xor i8 %1705, 1
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1706, i8* %1707, align 1, !tbaa !2446
  %1708 = xor i64 4, %1692
  %1709 = xor i64 %1708, %1695
  %1710 = lshr i64 %1709, 4
  %1711 = trunc i64 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1712, i8* %1713, align 1, !tbaa !2447
  %1714 = icmp eq i64 %1695, 0
  %1715 = zext i1 %1714 to i8
  %1716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1715, i8* %1716, align 1, !tbaa !2448
  %1717 = lshr i64 %1695, 63
  %1718 = trunc i64 %1717 to i8
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1718, i8* %1719, align 1, !tbaa !2449
  %1720 = lshr i64 %1692, 63
  %1721 = xor i64 %1717, %1720
  %1722 = add nuw nsw i64 %1721, %1717
  %1723 = icmp eq i64 %1722, 2
  %1724 = zext i1 %1723 to i8
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1724, i8* %1725, align 1, !tbaa !2450
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 8
  %1728 = load i64, i64* %RCX
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 4
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1727 to i64*
  store i64 %1728, i64* %1731
  %1732 = load i64, i64* %RAX
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 3
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i32*
  %1736 = load i32, i32* %1735
  %1737 = sext i32 %1736 to i64
  store i64 %1737, i64* %RAX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RAX
  %1739 = mul i64 %1738, 8
  %1740 = add i64 %1739, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 8
  store i64 %1742, i64* %PC
  %1743 = inttoptr i64 %1740 to i64*
  %1744 = load i64, i64* %1743
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RBP
  %1746 = sub i64 %1745, 40
  %1747 = load i64, i64* %RAX
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 4
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1746 to i64*
  store i64 %1747, i64* %1750
  %1751 = load i64, i64* %PC
  %1752 = sub i64 %1751, 851
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 5
  store i64 %1754, i64* %PC
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1752, i64* %1755, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 12
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 7
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  store i32 22, i32* %1760
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 12
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RDI, align 8, !tbaa !2428
  %1768 = load i64, i64* %PC
  %1769 = sub i64 %1768, 1184
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 5
  store i64 %1773, i64* %PC
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1775 = load i64, i64* %1774, align 8, !tbaa !2428
  %1776 = add i64 %1775, -8
  %1777 = inttoptr i64 %1776 to i64*
  store i64 %1771, i64* %1777
  store i64 %1776, i64* %1774, align 8, !tbaa !2428
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1769, i64* %1778, align 8, !tbaa !2428
  %1779 = load i64, i64* %PC
  %1780 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1779, %struct.Memory* %MEMORY.1)
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 8
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i64*
  %1786 = load i64, i64* %1785
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RAX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 4
  store i64 %1792, i64* %PC
  %1793 = add i64 4, %1790
  store i64 %1793, i64* %RCX, align 8, !tbaa !2428
  %1794 = icmp ult i64 %1793, %1790
  %1795 = icmp ult i64 %1793, 4
  %1796 = or i1 %1794, %1795
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = trunc i64 %1793 to i32
  %1800 = and i32 %1799, 255
  %1801 = call i32 @llvm.ctpop.i32(i32 %1800) #16
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1804, i8* %1805, align 1, !tbaa !2446
  %1806 = xor i64 4, %1790
  %1807 = xor i64 %1806, %1793
  %1808 = lshr i64 %1807, 4
  %1809 = trunc i64 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i64 %1793, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i64 %1793, 63
  %1816 = trunc i64 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i64 %1790, 63
  %1819 = xor i64 %1815, %1818
  %1820 = add nuw nsw i64 %1819, %1815
  %1821 = icmp eq i64 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 8
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1825 to i64*
  store i64 %1826, i64* %1829
  %1830 = load i64, i64* %RAX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 3
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = mul i64 %1836, 8
  %1838 = add i64 %1837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 8
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %RAX
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1844 to i64*
  store i64 %1845, i64* %1848
  %1849 = load i64, i64* %PC
  %1850 = sub i64 %1849, 1101
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 5
  store i64 %1852, i64* %PC
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1850, i64* %1853, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1854 = load i64, i64* %RBP
  %1855 = sub i64 %1854, 12
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 7
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  store i32 25, i32* %1858
  %1859 = load i64, i64* %PC
  %1860 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1859, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1860

block_400586:                                     ; preds = %block_400b04, %block_400686, %block_400a0a, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400848, %block_400949, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %1180, %block_400949 ], [ %1780, %block_4009a6 ], [ %1682, %block_4008ac ], [ %1584, %block_4007b2 ], [ %1486, %block_400b36 ], [ %1388, %block_4006b8 ], [ %1278, %block_400848 ], [ %1087, %block_40074e ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2386, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %1896, %block_400622 ], [ %1994, %block_400aa0 ], [ %2092, %block_40071c ], [ %2190, %block_400816 ], [ %2288, %block_400910 ], [ %2484, %block_400a0a ], [ %2582, %block_400686 ], [ %2680, %block_400b04 ]
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 40
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 4
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i64*
  %1866 = load i64, i64* %1865
  store i64 %1866, i64* %RAX, align 8, !tbaa !2428
  %1867 = load i64, i64* %RAX
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 2
  store i64 %1869, i64* %PC
  %1870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1867, i64* %1870, align 8, !tbaa !2428
  %1871 = load i64, i64* %PC
  switch i64 %1871, label %2761 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400622:                                     ; preds = %block_400586
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 12
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 7
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i32*
  store i32 4, i32* %1876
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 12
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = zext i32 %1882 to i64
  store i64 %1883, i64* %RDI, align 8, !tbaa !2428
  %1884 = load i64, i64* %PC
  %1885 = sub i64 %1884, 284
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 5
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 5
  store i64 %1889, i64* %PC
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1891 = load i64, i64* %1890, align 8, !tbaa !2428
  %1892 = add i64 %1891, -8
  %1893 = inttoptr i64 %1892 to i64*
  store i64 %1887, i64* %1893
  store i64 %1892, i64* %1890, align 8, !tbaa !2428
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1885, i64* %1894, align 8, !tbaa !2428
  %1895 = load i64, i64* %PC
  %1896 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1895, %struct.Memory* %MEMORY.1)
  %1897 = load i64, i64* %RBP
  %1898 = sub i64 %1897, 8
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 4
  store i64 %1900, i64* %PC
  %1901 = inttoptr i64 %1898 to i64*
  %1902 = load i64, i64* %1901
  store i64 %1902, i64* %RAX, align 8, !tbaa !2428
  %1903 = load i64, i64* %RAX
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1906 = load i64, i64* %RCX
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 4
  store i64 %1908, i64* %PC
  %1909 = add i64 4, %1906
  store i64 %1909, i64* %RCX, align 8, !tbaa !2428
  %1910 = icmp ult i64 %1909, %1906
  %1911 = icmp ult i64 %1909, 4
  %1912 = or i1 %1910, %1911
  %1913 = zext i1 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1913, i8* %1914, align 1, !tbaa !2432
  %1915 = trunc i64 %1909 to i32
  %1916 = and i32 %1915, 255
  %1917 = call i32 @llvm.ctpop.i32(i32 %1916) #16
  %1918 = trunc i32 %1917 to i8
  %1919 = and i8 %1918, 1
  %1920 = xor i8 %1919, 1
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1920, i8* %1921, align 1, !tbaa !2446
  %1922 = xor i64 4, %1906
  %1923 = xor i64 %1922, %1909
  %1924 = lshr i64 %1923, 4
  %1925 = trunc i64 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1926, i8* %1927, align 1, !tbaa !2447
  %1928 = icmp eq i64 %1909, 0
  %1929 = zext i1 %1928 to i8
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1929, i8* %1930, align 1, !tbaa !2448
  %1931 = lshr i64 %1909, 63
  %1932 = trunc i64 %1931 to i8
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1932, i8* %1933, align 1, !tbaa !2449
  %1934 = lshr i64 %1906, 63
  %1935 = xor i64 %1931, %1934
  %1936 = add nuw nsw i64 %1935, %1931
  %1937 = icmp eq i64 %1936, 2
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1938, i8* %1939, align 1, !tbaa !2450
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 8
  %1942 = load i64, i64* %RCX
  %1943 = load i64, i64* %PC
  %1944 = add i64 %1943, 4
  store i64 %1944, i64* %PC
  %1945 = inttoptr i64 %1941 to i64*
  store i64 %1942, i64* %1945
  %1946 = load i64, i64* %RAX
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 3
  store i64 %1948, i64* %PC
  %1949 = inttoptr i64 %1946 to i32*
  %1950 = load i32, i32* %1949
  %1951 = sext i32 %1950 to i64
  store i64 %1951, i64* %RAX, align 8, !tbaa !2428
  %1952 = load i64, i64* %RAX
  %1953 = mul i64 %1952, 8
  %1954 = add i64 %1953, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 8
  store i64 %1956, i64* %PC
  %1957 = inttoptr i64 %1954 to i64*
  %1958 = load i64, i64* %1957
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RBP
  %1960 = sub i64 %1959, 40
  %1961 = load i64, i64* %RAX
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 4
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1960 to i64*
  store i64 %1961, i64* %1964
  %1965 = load i64, i64* %PC
  %1966 = sub i64 %1965, 201
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 5
  store i64 %1968, i64* %PC
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1966, i64* %1969, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1970 = load i64, i64* %RBP
  %1971 = sub i64 %1970, 12
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 7
  store i64 %1973, i64* %PC
  %1974 = inttoptr i64 %1971 to i32*
  store i32 27, i32* %1974
  %1975 = load i64, i64* %RBP
  %1976 = sub i64 %1975, 12
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 3
  store i64 %1978, i64* %PC
  %1979 = inttoptr i64 %1976 to i32*
  %1980 = load i32, i32* %1979
  %1981 = zext i32 %1980 to i64
  store i64 %1981, i64* %RDI, align 8, !tbaa !2428
  %1982 = load i64, i64* %PC
  %1983 = sub i64 %1982, 1434
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 5
  store i64 %1987, i64* %PC
  %1988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1989 = load i64, i64* %1988, align 8, !tbaa !2428
  %1990 = add i64 %1989, -8
  %1991 = inttoptr i64 %1990 to i64*
  store i64 %1985, i64* %1991
  store i64 %1990, i64* %1988, align 8, !tbaa !2428
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1983, i64* %1992, align 8, !tbaa !2428
  %1993 = load i64, i64* %PC
  %1994 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1993, %struct.Memory* %MEMORY.1)
  %1995 = load i64, i64* %RBP
  %1996 = sub i64 %1995, 8
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 4
  store i64 %1998, i64* %PC
  %1999 = inttoptr i64 %1996 to i64*
  %2000 = load i64, i64* %1999
  store i64 %2000, i64* %RAX, align 8, !tbaa !2428
  %2001 = load i64, i64* %RAX
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 3
  store i64 %2003, i64* %PC
  store i64 %2001, i64* %RCX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RCX
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 4
  store i64 %2006, i64* %PC
  %2007 = add i64 4, %2004
  store i64 %2007, i64* %RCX, align 8, !tbaa !2428
  %2008 = icmp ult i64 %2007, %2004
  %2009 = icmp ult i64 %2007, 4
  %2010 = or i1 %2008, %2009
  %2011 = zext i1 %2010 to i8
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2011, i8* %2012, align 1, !tbaa !2432
  %2013 = trunc i64 %2007 to i32
  %2014 = and i32 %2013, 255
  %2015 = call i32 @llvm.ctpop.i32(i32 %2014) #16
  %2016 = trunc i32 %2015 to i8
  %2017 = and i8 %2016, 1
  %2018 = xor i8 %2017, 1
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2018, i8* %2019, align 1, !tbaa !2446
  %2020 = xor i64 4, %2004
  %2021 = xor i64 %2020, %2007
  %2022 = lshr i64 %2021, 4
  %2023 = trunc i64 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2024, i8* %2025, align 1, !tbaa !2447
  %2026 = icmp eq i64 %2007, 0
  %2027 = zext i1 %2026 to i8
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2027, i8* %2028, align 1, !tbaa !2448
  %2029 = lshr i64 %2007, 63
  %2030 = trunc i64 %2029 to i8
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2030, i8* %2031, align 1, !tbaa !2449
  %2032 = lshr i64 %2004, 63
  %2033 = xor i64 %2029, %2032
  %2034 = add nuw nsw i64 %2033, %2029
  %2035 = icmp eq i64 %2034, 2
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2036, i8* %2037, align 1, !tbaa !2450
  %2038 = load i64, i64* %RBP
  %2039 = sub i64 %2038, 8
  %2040 = load i64, i64* %RCX
  %2041 = load i64, i64* %PC
  %2042 = add i64 %2041, 4
  store i64 %2042, i64* %PC
  %2043 = inttoptr i64 %2039 to i64*
  store i64 %2040, i64* %2043
  %2044 = load i64, i64* %RAX
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 3
  store i64 %2046, i64* %PC
  %2047 = inttoptr i64 %2044 to i32*
  %2048 = load i32, i32* %2047
  %2049 = sext i32 %2048 to i64
  store i64 %2049, i64* %RAX, align 8, !tbaa !2428
  %2050 = load i64, i64* %RAX
  %2051 = mul i64 %2050, 8
  %2052 = add i64 %2051, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 8
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 40
  %2059 = load i64, i64* %RAX
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 4
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2058 to i64*
  store i64 %2059, i64* %2062
  %2063 = load i64, i64* %PC
  %2064 = sub i64 %2063, 1351
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 5
  store i64 %2066, i64* %PC
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2064, i64* %2067, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 12
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 7
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  store i32 9, i32* %2072
  %2073 = load i64, i64* %RBP
  %2074 = sub i64 %2073, 12
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 3
  store i64 %2076, i64* %PC
  %2077 = inttoptr i64 %2074 to i32*
  %2078 = load i32, i32* %2077
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDI, align 8, !tbaa !2428
  %2080 = load i64, i64* %PC
  %2081 = sub i64 %2080, 534
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 5
  store i64 %2085, i64* %PC
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2087 = load i64, i64* %2086, align 8, !tbaa !2428
  %2088 = add i64 %2087, -8
  %2089 = inttoptr i64 %2088 to i64*
  store i64 %2083, i64* %2089
  store i64 %2088, i64* %2086, align 8, !tbaa !2428
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2081, i64* %2090, align 8, !tbaa !2428
  %2091 = load i64, i64* %PC
  %2092 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2091, %struct.Memory* %MEMORY.1)
  %2093 = load i64, i64* %RBP
  %2094 = sub i64 %2093, 8
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 4
  store i64 %2096, i64* %PC
  %2097 = inttoptr i64 %2094 to i64*
  %2098 = load i64, i64* %2097
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = load i64, i64* %RAX
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 3
  store i64 %2101, i64* %PC
  store i64 %2099, i64* %RCX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RCX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = add i64 4, %2102
  store i64 %2105, i64* %RCX, align 8, !tbaa !2428
  %2106 = icmp ult i64 %2105, %2102
  %2107 = icmp ult i64 %2105, 4
  %2108 = or i1 %2106, %2107
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2109, i8* %2110, align 1, !tbaa !2432
  %2111 = trunc i64 %2105 to i32
  %2112 = and i32 %2111, 255
  %2113 = call i32 @llvm.ctpop.i32(i32 %2112) #16
  %2114 = trunc i32 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = xor i8 %2115, 1
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2116, i8* %2117, align 1, !tbaa !2446
  %2118 = xor i64 4, %2102
  %2119 = xor i64 %2118, %2105
  %2120 = lshr i64 %2119, 4
  %2121 = trunc i64 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2122, i8* %2123, align 1, !tbaa !2447
  %2124 = icmp eq i64 %2105, 0
  %2125 = zext i1 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2125, i8* %2126, align 1, !tbaa !2448
  %2127 = lshr i64 %2105, 63
  %2128 = trunc i64 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2128, i8* %2129, align 1, !tbaa !2449
  %2130 = lshr i64 %2102, 63
  %2131 = xor i64 %2127, %2130
  %2132 = add nuw nsw i64 %2131, %2127
  %2133 = icmp eq i64 %2132, 2
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2134, i8* %2135, align 1, !tbaa !2450
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 8
  %2138 = load i64, i64* %RCX
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 4
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2137 to i64*
  store i64 %2138, i64* %2141
  %2142 = load i64, i64* %RAX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RAX
  %2149 = mul i64 %2148, 8
  %2150 = add i64 %2149, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 8
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 40
  %2157 = load i64, i64* %RAX
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 4
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2156 to i64*
  store i64 %2157, i64* %2160
  %2161 = load i64, i64* %PC
  %2162 = sub i64 %2161, 451
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 5
  store i64 %2164, i64* %PC
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2162, i64* %2165, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 12
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 7
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  store i32 14, i32* %2170
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 12
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to i32*
  %2176 = load i32, i32* %2175
  %2177 = zext i32 %2176 to i64
  store i64 %2177, i64* %RDI, align 8, !tbaa !2428
  %2178 = load i64, i64* %PC
  %2179 = sub i64 %2178, 784
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC
  %2184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2185 = load i64, i64* %2184, align 8, !tbaa !2428
  %2186 = add i64 %2185, -8
  %2187 = inttoptr i64 %2186 to i64*
  store i64 %2181, i64* %2187
  store i64 %2186, i64* %2184, align 8, !tbaa !2428
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2179, i64* %2188, align 8, !tbaa !2428
  %2189 = load i64, i64* %PC
  %2190 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2189, %struct.Memory* %MEMORY.1)
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 8
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i64*
  %2196 = load i64, i64* %2195
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RAX
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 3
  store i64 %2199, i64* %PC
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2200 = load i64, i64* %RCX
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 4
  store i64 %2202, i64* %PC
  %2203 = add i64 4, %2200
  store i64 %2203, i64* %RCX, align 8, !tbaa !2428
  %2204 = icmp ult i64 %2203, %2200
  %2205 = icmp ult i64 %2203, 4
  %2206 = or i1 %2204, %2205
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2207, i8* %2208, align 1, !tbaa !2432
  %2209 = trunc i64 %2203 to i32
  %2210 = and i32 %2209, 255
  %2211 = call i32 @llvm.ctpop.i32(i32 %2210) #16
  %2212 = trunc i32 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = xor i8 %2213, 1
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2214, i8* %2215, align 1, !tbaa !2446
  %2216 = xor i64 4, %2200
  %2217 = xor i64 %2216, %2203
  %2218 = lshr i64 %2217, 4
  %2219 = trunc i64 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2220, i8* %2221, align 1, !tbaa !2447
  %2222 = icmp eq i64 %2203, 0
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2223, i8* %2224, align 1, !tbaa !2448
  %2225 = lshr i64 %2203, 63
  %2226 = trunc i64 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2226, i8* %2227, align 1, !tbaa !2449
  %2228 = lshr i64 %2200, 63
  %2229 = xor i64 %2225, %2228
  %2230 = add nuw nsw i64 %2229, %2225
  %2231 = icmp eq i64 %2230, 2
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2232, i8* %2233, align 1, !tbaa !2450
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 8
  %2236 = load i64, i64* %RCX
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 4
  store i64 %2238, i64* %PC
  %2239 = inttoptr i64 %2235 to i64*
  store i64 %2236, i64* %2239
  %2240 = load i64, i64* %RAX
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i32*
  %2244 = load i32, i32* %2243
  %2245 = sext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RAX
  %2247 = mul i64 %2246, 8
  %2248 = add i64 %2247, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 8
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2248 to i64*
  %2252 = load i64, i64* %2251
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RBP
  %2254 = sub i64 %2253, 40
  %2255 = load i64, i64* %RAX
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 4
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2254 to i64*
  store i64 %2255, i64* %2258
  %2259 = load i64, i64* %PC
  %2260 = sub i64 %2259, 701
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 5
  store i64 %2262, i64* %PC
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2260, i64* %2263, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 12
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 7
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2265 to i32*
  store i32 19, i32* %2268
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 12
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 3
  store i64 %2272, i64* %PC
  %2273 = inttoptr i64 %2270 to i32*
  %2274 = load i32, i32* %2273
  %2275 = zext i32 %2274 to i64
  store i64 %2275, i64* %RDI, align 8, !tbaa !2428
  %2276 = load i64, i64* %PC
  %2277 = sub i64 %2276, 1034
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 5
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 5
  store i64 %2281, i64* %PC
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2283 = load i64, i64* %2282, align 8, !tbaa !2428
  %2284 = add i64 %2283, -8
  %2285 = inttoptr i64 %2284 to i64*
  store i64 %2279, i64* %2285
  store i64 %2284, i64* %2282, align 8, !tbaa !2428
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2277, i64* %2286, align 8, !tbaa !2428
  %2287 = load i64, i64* %PC
  %2288 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2287, %struct.Memory* %MEMORY.1)
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 8
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 4
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = load i64, i64* %RAX
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RCX
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 4
  store i64 %2300, i64* %PC
  %2301 = add i64 4, %2298
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = icmp ult i64 %2301, %2298
  %2303 = icmp ult i64 %2301, 4
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = trunc i64 %2301 to i32
  %2308 = and i32 %2307, 255
  %2309 = call i32 @llvm.ctpop.i32(i32 %2308) #16
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2312, i8* %2313, align 1, !tbaa !2446
  %2314 = xor i64 4, %2298
  %2315 = xor i64 %2314, %2301
  %2316 = lshr i64 %2315, 4
  %2317 = trunc i64 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2318, i8* %2319, align 1, !tbaa !2447
  %2320 = icmp eq i64 %2301, 0
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2321, i8* %2322, align 1, !tbaa !2448
  %2323 = lshr i64 %2301, 63
  %2324 = trunc i64 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2324, i8* %2325, align 1, !tbaa !2449
  %2326 = lshr i64 %2298, 63
  %2327 = xor i64 %2323, %2326
  %2328 = add nuw nsw i64 %2327, %2323
  %2329 = icmp eq i64 %2328, 2
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2330, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 8
  %2334 = load i64, i64* %RCX
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2333 to i64*
  store i64 %2334, i64* %2337
  %2338 = load i64, i64* %RAX
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 3
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341
  %2343 = sext i32 %2342 to i64
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = mul i64 %2344, 8
  %2346 = add i64 %2345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 8
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i64*
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 40
  %2353 = load i64, i64* %RAX
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2352 to i64*
  store i64 %2353, i64* %2356
  %2357 = load i64, i64* %PC
  %2358 = sub i64 %2357, 951
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2358, i64* %2361, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 12
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i32*
  store i32 1, i32* %2366
  %2367 = load i64, i64* %RBP
  %2368 = sub i64 %2367, 12
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 3
  store i64 %2370, i64* %PC
  %2371 = inttoptr i64 %2368 to i32*
  %2372 = load i32, i32* %2371
  %2373 = zext i32 %2372 to i64
  store i64 %2373, i64* %RDI, align 8, !tbaa !2428
  %2374 = load i64, i64* %PC
  %2375 = sub i64 %2374, 134
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 5
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  store i64 %2379, i64* %PC
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2381 = load i64, i64* %2380, align 8, !tbaa !2428
  %2382 = add i64 %2381, -8
  %2383 = inttoptr i64 %2382 to i64*
  store i64 %2377, i64* %2383
  store i64 %2382, i64* %2380, align 8, !tbaa !2428
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2375, i64* %2384, align 8, !tbaa !2428
  %2385 = load i64, i64* %PC
  %2386 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2385, %struct.Memory* %MEMORY.1)
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 8
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 4
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to i64*
  %2392 = load i64, i64* %2391
  store i64 %2392, i64* %RAX, align 8, !tbaa !2428
  %2393 = load i64, i64* %RAX
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 3
  store i64 %2395, i64* %PC
  store i64 %2393, i64* %RCX, align 8, !tbaa !2428
  %2396 = load i64, i64* %RCX
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 4
  store i64 %2398, i64* %PC
  %2399 = add i64 4, %2396
  store i64 %2399, i64* %RCX, align 8, !tbaa !2428
  %2400 = icmp ult i64 %2399, %2396
  %2401 = icmp ult i64 %2399, 4
  %2402 = or i1 %2400, %2401
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2403, i8* %2404, align 1, !tbaa !2432
  %2405 = trunc i64 %2399 to i32
  %2406 = and i32 %2405, 255
  %2407 = call i32 @llvm.ctpop.i32(i32 %2406) #16
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = xor i8 %2409, 1
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2410, i8* %2411, align 1, !tbaa !2446
  %2412 = xor i64 4, %2396
  %2413 = xor i64 %2412, %2399
  %2414 = lshr i64 %2413, 4
  %2415 = trunc i64 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2416, i8* %2417, align 1, !tbaa !2447
  %2418 = icmp eq i64 %2399, 0
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2419, i8* %2420, align 1, !tbaa !2448
  %2421 = lshr i64 %2399, 63
  %2422 = trunc i64 %2421 to i8
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2422, i8* %2423, align 1, !tbaa !2449
  %2424 = lshr i64 %2396, 63
  %2425 = xor i64 %2421, %2424
  %2426 = add nuw nsw i64 %2425, %2421
  %2427 = icmp eq i64 %2426, 2
  %2428 = zext i1 %2427 to i8
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2428, i8* %2429, align 1, !tbaa !2450
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 8
  %2432 = load i64, i64* %RCX
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 4
  store i64 %2434, i64* %PC
  %2435 = inttoptr i64 %2431 to i64*
  store i64 %2432, i64* %2435
  %2436 = load i64, i64* %RAX
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %PC
  %2439 = inttoptr i64 %2436 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RAX
  %2443 = mul i64 %2442, 8
  %2444 = add i64 %2443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 8
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2444 to i64*
  %2448 = load i64, i64* %2447
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %RAX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 4
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2450 to i64*
  store i64 %2451, i64* %2454
  %2455 = load i64, i64* %PC
  %2456 = sub i64 %2455, 51
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 5
  store i64 %2458, i64* %PC
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2456, i64* %2459, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2460 = load i64, i64* %RBP
  %2461 = sub i64 %2460, 12
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 7
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to i32*
  store i32 24, i32* %2464
  %2465 = load i64, i64* %RBP
  %2466 = sub i64 %2465, 12
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 3
  store i64 %2468, i64* %PC
  %2469 = inttoptr i64 %2466 to i32*
  %2470 = load i32, i32* %2469
  %2471 = zext i32 %2470 to i64
  store i64 %2471, i64* %RDI, align 8, !tbaa !2428
  %2472 = load i64, i64* %PC
  %2473 = sub i64 %2472, 1284
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2479 = load i64, i64* %2478, align 8, !tbaa !2428
  %2480 = add i64 %2479, -8
  %2481 = inttoptr i64 %2480 to i64*
  store i64 %2475, i64* %2481
  store i64 %2480, i64* %2478, align 8, !tbaa !2428
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2473, i64* %2482, align 8, !tbaa !2428
  %2483 = load i64, i64* %PC
  %2484 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2483, %struct.Memory* %MEMORY.1)
  %2485 = load i64, i64* %RBP
  %2486 = sub i64 %2485, 8
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 4
  store i64 %2488, i64* %PC
  %2489 = inttoptr i64 %2486 to i64*
  %2490 = load i64, i64* %2489
  store i64 %2490, i64* %RAX, align 8, !tbaa !2428
  %2491 = load i64, i64* %RAX
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 3
  store i64 %2493, i64* %PC
  store i64 %2491, i64* %RCX, align 8, !tbaa !2428
  %2494 = load i64, i64* %RCX
  %2495 = load i64, i64* %PC
  %2496 = add i64 %2495, 4
  store i64 %2496, i64* %PC
  %2497 = add i64 4, %2494
  store i64 %2497, i64* %RCX, align 8, !tbaa !2428
  %2498 = icmp ult i64 %2497, %2494
  %2499 = icmp ult i64 %2497, 4
  %2500 = or i1 %2498, %2499
  %2501 = zext i1 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2501, i8* %2502, align 1, !tbaa !2432
  %2503 = trunc i64 %2497 to i32
  %2504 = and i32 %2503, 255
  %2505 = call i32 @llvm.ctpop.i32(i32 %2504) #16
  %2506 = trunc i32 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = xor i8 %2507, 1
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2508, i8* %2509, align 1, !tbaa !2446
  %2510 = xor i64 4, %2494
  %2511 = xor i64 %2510, %2497
  %2512 = lshr i64 %2511, 4
  %2513 = trunc i64 %2512 to i8
  %2514 = and i8 %2513, 1
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2514, i8* %2515, align 1, !tbaa !2447
  %2516 = icmp eq i64 %2497, 0
  %2517 = zext i1 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2517, i8* %2518, align 1, !tbaa !2448
  %2519 = lshr i64 %2497, 63
  %2520 = trunc i64 %2519 to i8
  %2521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2520, i8* %2521, align 1, !tbaa !2449
  %2522 = lshr i64 %2494, 63
  %2523 = xor i64 %2519, %2522
  %2524 = add nuw nsw i64 %2523, %2519
  %2525 = icmp eq i64 %2524, 2
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2527, align 1, !tbaa !2450
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 8
  %2530 = load i64, i64* %RCX
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2529 to i64*
  store i64 %2530, i64* %2533
  %2534 = load i64, i64* %RAX
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 3
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RAX
  %2541 = mul i64 %2540, 8
  %2542 = add i64 %2541, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 8
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to i64*
  %2546 = load i64, i64* %2545
  store i64 %2546, i64* %RAX, align 8, !tbaa !2428
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 40
  %2549 = load i64, i64* %RAX
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 4
  store i64 %2551, i64* %PC
  %2552 = inttoptr i64 %2548 to i64*
  store i64 %2549, i64* %2552
  %2553 = load i64, i64* %PC
  %2554 = sub i64 %2553, 1201
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 5
  store i64 %2556, i64* %PC
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2554, i64* %2557, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 12
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 7
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  store i32 6, i32* %2562
  %2563 = load i64, i64* %RBP
  %2564 = sub i64 %2563, 12
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 3
  store i64 %2566, i64* %PC
  %2567 = inttoptr i64 %2564 to i32*
  %2568 = load i32, i32* %2567
  %2569 = zext i32 %2568 to i64
  store i64 %2569, i64* %RDI, align 8, !tbaa !2428
  %2570 = load i64, i64* %PC
  %2571 = sub i64 %2570, 384
  %2572 = load i64, i64* %PC
  %2573 = add i64 %2572, 5
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 5
  store i64 %2575, i64* %PC
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2577 = load i64, i64* %2576, align 8, !tbaa !2428
  %2578 = add i64 %2577, -8
  %2579 = inttoptr i64 %2578 to i64*
  store i64 %2573, i64* %2579
  store i64 %2578, i64* %2576, align 8, !tbaa !2428
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2571, i64* %2580, align 8, !tbaa !2428
  %2581 = load i64, i64* %PC
  %2582 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2581, %struct.Memory* %MEMORY.1)
  %2583 = load i64, i64* %RBP
  %2584 = sub i64 %2583, 8
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 4
  store i64 %2586, i64* %PC
  %2587 = inttoptr i64 %2584 to i64*
  %2588 = load i64, i64* %2587
  store i64 %2588, i64* %RAX, align 8, !tbaa !2428
  %2589 = load i64, i64* %RAX
  %2590 = load i64, i64* %PC
  %2591 = add i64 %2590, 3
  store i64 %2591, i64* %PC
  store i64 %2589, i64* %RCX, align 8, !tbaa !2428
  %2592 = load i64, i64* %RCX
  %2593 = load i64, i64* %PC
  %2594 = add i64 %2593, 4
  store i64 %2594, i64* %PC
  %2595 = add i64 4, %2592
  store i64 %2595, i64* %RCX, align 8, !tbaa !2428
  %2596 = icmp ult i64 %2595, %2592
  %2597 = icmp ult i64 %2595, 4
  %2598 = or i1 %2596, %2597
  %2599 = zext i1 %2598 to i8
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2599, i8* %2600, align 1, !tbaa !2432
  %2601 = trunc i64 %2595 to i32
  %2602 = and i32 %2601, 255
  %2603 = call i32 @llvm.ctpop.i32(i32 %2602) #16
  %2604 = trunc i32 %2603 to i8
  %2605 = and i8 %2604, 1
  %2606 = xor i8 %2605, 1
  %2607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2606, i8* %2607, align 1, !tbaa !2446
  %2608 = xor i64 4, %2592
  %2609 = xor i64 %2608, %2595
  %2610 = lshr i64 %2609, 4
  %2611 = trunc i64 %2610 to i8
  %2612 = and i8 %2611, 1
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2612, i8* %2613, align 1, !tbaa !2447
  %2614 = icmp eq i64 %2595, 0
  %2615 = zext i1 %2614 to i8
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2615, i8* %2616, align 1, !tbaa !2448
  %2617 = lshr i64 %2595, 63
  %2618 = trunc i64 %2617 to i8
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2618, i8* %2619, align 1, !tbaa !2449
  %2620 = lshr i64 %2592, 63
  %2621 = xor i64 %2617, %2620
  %2622 = add nuw nsw i64 %2621, %2617
  %2623 = icmp eq i64 %2622, 2
  %2624 = zext i1 %2623 to i8
  %2625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2624, i8* %2625, align 1, !tbaa !2450
  %2626 = load i64, i64* %RBP
  %2627 = sub i64 %2626, 8
  %2628 = load i64, i64* %RCX
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 4
  store i64 %2630, i64* %PC
  %2631 = inttoptr i64 %2627 to i64*
  store i64 %2628, i64* %2631
  %2632 = load i64, i64* %RAX
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 3
  store i64 %2634, i64* %PC
  %2635 = inttoptr i64 %2632 to i32*
  %2636 = load i32, i32* %2635
  %2637 = sext i32 %2636 to i64
  store i64 %2637, i64* %RAX, align 8, !tbaa !2428
  %2638 = load i64, i64* %RAX
  %2639 = mul i64 %2638, 8
  %2640 = add i64 %2639, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 8
  store i64 %2642, i64* %PC
  %2643 = inttoptr i64 %2640 to i64*
  %2644 = load i64, i64* %2643
  store i64 %2644, i64* %RAX, align 8, !tbaa !2428
  %2645 = load i64, i64* %RBP
  %2646 = sub i64 %2645, 40
  %2647 = load i64, i64* %RAX
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 4
  store i64 %2649, i64* %PC
  %2650 = inttoptr i64 %2646 to i64*
  store i64 %2647, i64* %2650
  %2651 = load i64, i64* %PC
  %2652 = sub i64 %2651, 301
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 5
  store i64 %2654, i64* %PC
  %2655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2652, i64* %2655, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2656 = load i64, i64* %RBP
  %2657 = sub i64 %2656, 12
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 7
  store i64 %2659, i64* %PC
  %2660 = inttoptr i64 %2657 to i32*
  store i32 29, i32* %2660
  %2661 = load i64, i64* %RBP
  %2662 = sub i64 %2661, 12
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 3
  store i64 %2664, i64* %PC
  %2665 = inttoptr i64 %2662 to i32*
  %2666 = load i32, i32* %2665
  %2667 = zext i32 %2666 to i64
  store i64 %2667, i64* %RDI, align 8, !tbaa !2428
  %2668 = load i64, i64* %PC
  %2669 = sub i64 %2668, 1534
  %2670 = load i64, i64* %PC
  %2671 = add i64 %2670, 5
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 5
  store i64 %2673, i64* %PC
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2675 = load i64, i64* %2674, align 8, !tbaa !2428
  %2676 = add i64 %2675, -8
  %2677 = inttoptr i64 %2676 to i64*
  store i64 %2671, i64* %2677
  store i64 %2676, i64* %2674, align 8, !tbaa !2428
  %2678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2669, i64* %2678, align 8, !tbaa !2428
  %2679 = load i64, i64* %PC
  %2680 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2679, %struct.Memory* %MEMORY.1)
  %2681 = load i64, i64* %RBP
  %2682 = sub i64 %2681, 8
  %2683 = load i64, i64* %PC
  %2684 = add i64 %2683, 4
  store i64 %2684, i64* %PC
  %2685 = inttoptr i64 %2682 to i64*
  %2686 = load i64, i64* %2685
  store i64 %2686, i64* %RAX, align 8, !tbaa !2428
  %2687 = load i64, i64* %RAX
  %2688 = load i64, i64* %PC
  %2689 = add i64 %2688, 3
  store i64 %2689, i64* %PC
  store i64 %2687, i64* %RCX, align 8, !tbaa !2428
  %2690 = load i64, i64* %RCX
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 4
  store i64 %2692, i64* %PC
  %2693 = add i64 4, %2690
  store i64 %2693, i64* %RCX, align 8, !tbaa !2428
  %2694 = icmp ult i64 %2693, %2690
  %2695 = icmp ult i64 %2693, 4
  %2696 = or i1 %2694, %2695
  %2697 = zext i1 %2696 to i8
  %2698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2697, i8* %2698, align 1, !tbaa !2432
  %2699 = trunc i64 %2693 to i32
  %2700 = and i32 %2699, 255
  %2701 = call i32 @llvm.ctpop.i32(i32 %2700) #16
  %2702 = trunc i32 %2701 to i8
  %2703 = and i8 %2702, 1
  %2704 = xor i8 %2703, 1
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2704, i8* %2705, align 1, !tbaa !2446
  %2706 = xor i64 4, %2690
  %2707 = xor i64 %2706, %2693
  %2708 = lshr i64 %2707, 4
  %2709 = trunc i64 %2708 to i8
  %2710 = and i8 %2709, 1
  %2711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2710, i8* %2711, align 1, !tbaa !2447
  %2712 = icmp eq i64 %2693, 0
  %2713 = zext i1 %2712 to i8
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2713, i8* %2714, align 1, !tbaa !2448
  %2715 = lshr i64 %2693, 63
  %2716 = trunc i64 %2715 to i8
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2716, i8* %2717, align 1, !tbaa !2449
  %2718 = lshr i64 %2690, 63
  %2719 = xor i64 %2715, %2718
  %2720 = add nuw nsw i64 %2719, %2715
  %2721 = icmp eq i64 %2720, 2
  %2722 = zext i1 %2721 to i8
  %2723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2722, i8* %2723, align 1, !tbaa !2450
  %2724 = load i64, i64* %RBP
  %2725 = sub i64 %2724, 8
  %2726 = load i64, i64* %RCX
  %2727 = load i64, i64* %PC
  %2728 = add i64 %2727, 4
  store i64 %2728, i64* %PC
  %2729 = inttoptr i64 %2725 to i64*
  store i64 %2726, i64* %2729
  %2730 = load i64, i64* %RAX
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 3
  store i64 %2732, i64* %PC
  %2733 = inttoptr i64 %2730 to i32*
  %2734 = load i32, i32* %2733
  %2735 = sext i32 %2734 to i64
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = load i64, i64* %RAX
  %2737 = mul i64 %2736, 8
  %2738 = add i64 %2737, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 8
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2738 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %RAX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 40
  %2745 = load i64, i64* %RAX
  %2746 = load i64, i64* %PC
  %2747 = add i64 %2746, 4
  store i64 %2747, i64* %PC
  %2748 = inttoptr i64 %2744 to i64*
  store i64 %2745, i64* %2748
  %2749 = load i64, i64* %PC
  %2750 = sub i64 %2749, 1451
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 5
  store i64 %2752, i64* %PC
  %2753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2750, i64* %2753, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2754 = load i64, i64* %RBP
  %2755 = sub i64 %2754, 12
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 7
  store i64 %2757, i64* %PC
  %2758 = inttoptr i64 %2755 to i32*
  store i32 11, i32* %2758
  %2759 = load i64, i64* %PC
  %2760 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2759, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2760

; <label>:2761:                                   ; preds = %block_400586
  %2762 = load i64, i64* %PC
  %2763 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2762, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2763
}

; Function Attrs: noinline
define %struct.Memory* @sub_400aa7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400aa7

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %PC
  %525 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %524, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %525

block_4009d8:                                     ; preds = %block_400586
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 12
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 7
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i32*
  store i32 23, i32* %530
  %531 = load i64, i64* %PC
  %532 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %531, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %532

block_400ad2:                                     ; preds = %block_400586
  %533 = load i64, i64* %RBP
  %534 = sub i64 %533, 12
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 7
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %534 to i32*
  store i32 28, i32* %537
  %538 = load i64, i64* %PC
  %539 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %538, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %539

block_400848:                                     ; preds = %block_400586
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 12
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 7
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  store i32 15, i32* %544
  %545 = load i64, i64* %PC
  %546 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %545, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %546

block_400942:                                     ; preds = %block_400586
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 12
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 7
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i32*
  store i32 20, i32* %551
  %552 = load i64, i64* %PC
  %553 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %552, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %553

block_40074e:                                     ; preds = %block_400586
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 12
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  store i32 10, i32* %558
  %559 = load i64, i64* %PC
  %560 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %559, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %560

block_400579:                                     ; preds = %block_400586
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 12
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 7
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  store i32 0, i32* %565
  %566 = load i64, i64* %RSP
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = add i64 48, %566
  store i64 %569, i64* %RSP, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %566
  %571 = icmp ult i64 %569, 48
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %573, i8* %574, align 1, !tbaa !2432
  %575 = trunc i64 %569 to i32
  %576 = and i32 %575, 255
  %577 = call i32 @llvm.ctpop.i32(i32 %576) #16
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %580, i8* %581, align 1, !tbaa !2446
  %582 = xor i64 48, %566
  %583 = xor i64 %582, %569
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i64 %569, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2448
  %591 = lshr i64 %569, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2449
  %594 = lshr i64 %566, 63
  %595 = xor i64 %591, %594
  %596 = add nuw nsw i64 %595, %591
  %597 = icmp eq i64 %596, 2
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %598, i8* %599, align 1, !tbaa !2450
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 1
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %603 = load i64, i64* %602, align 8, !tbaa !2428
  %604 = add i64 %603, 8
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %RBP, align 8, !tbaa !2428
  store i64 %604, i64* %602, align 8, !tbaa !2428
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 1
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %611 = load i64, i64* %610, align 8, !tbaa !2428
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %609, align 8, !tbaa !2428
  %614 = add i64 %611, 8
  store i64 %614, i64* %610, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a3c:                                     ; preds = %block_400586
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 12
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  store i32 25, i32* %619
  %620 = load i64, i64* %PC
  %621 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %620, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %621

block_400b36:                                     ; preds = %block_400586
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 7
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  store i32 30, i32* %626
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 12
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i32*
  %632 = load i32, i32* %631
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = sub i64 %634, 1584
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 5
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %641 = load i64, i64* %640, align 8, !tbaa !2428
  %642 = add i64 %641, -8
  %643 = inttoptr i64 %642 to i64*
  store i64 %637, i64* %643
  store i64 %642, i64* %640, align 8, !tbaa !2428
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %635, i64* %644, align 8, !tbaa !2428
  %645 = load i64, i64* %PC
  %646 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %645, %struct.Memory* %MEMORY.1)
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %656 = load i64, i64* %RCX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = add i64 4, %656
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = icmp ult i64 %659, %656
  %661 = icmp ult i64 %659, 4
  %662 = or i1 %660, %661
  %663 = zext i1 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %663, i8* %664, align 1, !tbaa !2432
  %665 = trunc i64 %659 to i32
  %666 = and i32 %665, 255
  %667 = call i32 @llvm.ctpop.i32(i32 %666) #16
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %670, i8* %671, align 1, !tbaa !2446
  %672 = xor i64 4, %656
  %673 = xor i64 %672, %659
  %674 = lshr i64 %673, 4
  %675 = trunc i64 %674 to i8
  %676 = and i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %676, i8* %677, align 1, !tbaa !2447
  %678 = icmp eq i64 %659, 0
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %679, i8* %680, align 1, !tbaa !2448
  %681 = lshr i64 %659, 63
  %682 = trunc i64 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %682, i8* %683, align 1, !tbaa !2449
  %684 = lshr i64 %656, 63
  %685 = xor i64 %681, %684
  %686 = add nuw nsw i64 %685, %681
  %687 = icmp eq i64 %686, 2
  %688 = zext i1 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %688, i8* %689, align 1, !tbaa !2450
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 8
  %692 = load i64, i64* %RCX
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %691 to i64*
  store i64 %692, i64* %695
  %696 = load i64, i64* %RAX
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  %700 = load i32, i32* %699
  %701 = sext i32 %700 to i64
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RAX
  %703 = mul i64 %702, 8
  %704 = add i64 %703, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 8
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %704 to i64*
  %708 = load i64, i64* %707
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 40
  %711 = load i64, i64* %RAX
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %710 to i64*
  store i64 %711, i64* %714
  %715 = load i64, i64* %PC
  %716 = sub i64 %715, 1501
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 7
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  store i32 2, i32* %724
  %725 = load i64, i64* %PC
  %726 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %725, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %726

block_4008ac:                                     ; preds = %block_400586
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 12
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 7
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i32*
  store i32 17, i32* %731
  %732 = load i64, i64* %RBP
  %733 = sub i64 %732, 12
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 3
  store i64 %735, i64* %PC
  %736 = inttoptr i64 %733 to i32*
  %737 = load i32, i32* %736
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RDI, align 8, !tbaa !2428
  %739 = load i64, i64* %PC
  %740 = sub i64 %739, 934
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  store i64 %744, i64* %PC
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %746 = load i64, i64* %745, align 8, !tbaa !2428
  %747 = add i64 %746, -8
  %748 = inttoptr i64 %747 to i64*
  store i64 %742, i64* %748
  store i64 %747, i64* %745, align 8, !tbaa !2428
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %740, i64* %749, align 8, !tbaa !2428
  %750 = load i64, i64* %PC
  %751 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %750, %struct.Memory* %MEMORY.1)
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 8
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 4
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = load i64, i64* %RAX
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 3
  store i64 %760, i64* %PC
  store i64 %758, i64* %RCX, align 8, !tbaa !2428
  %761 = load i64, i64* %RCX
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 4
  store i64 %763, i64* %PC
  %764 = add i64 4, %761
  store i64 %764, i64* %RCX, align 8, !tbaa !2428
  %765 = icmp ult i64 %764, %761
  %766 = icmp ult i64 %764, 4
  %767 = or i1 %765, %766
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %768, i8* %769, align 1, !tbaa !2432
  %770 = trunc i64 %764 to i32
  %771 = and i32 %770, 255
  %772 = call i32 @llvm.ctpop.i32(i32 %771) #16
  %773 = trunc i32 %772 to i8
  %774 = and i8 %773, 1
  %775 = xor i8 %774, 1
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %775, i8* %776, align 1, !tbaa !2446
  %777 = xor i64 4, %761
  %778 = xor i64 %777, %764
  %779 = lshr i64 %778, 4
  %780 = trunc i64 %779 to i8
  %781 = and i8 %780, 1
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %781, i8* %782, align 1, !tbaa !2447
  %783 = icmp eq i64 %764, 0
  %784 = zext i1 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %784, i8* %785, align 1, !tbaa !2448
  %786 = lshr i64 %764, 63
  %787 = trunc i64 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %787, i8* %788, align 1, !tbaa !2449
  %789 = lshr i64 %761, 63
  %790 = xor i64 %786, %789
  %791 = add nuw nsw i64 %790, %786
  %792 = icmp eq i64 %791, 2
  %793 = zext i1 %792 to i8
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %793, i8* %794, align 1, !tbaa !2450
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 8
  %797 = load i64, i64* %RCX
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 4
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %796 to i64*
  store i64 %797, i64* %800
  %801 = load i64, i64* %RAX
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 3
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i32*
  %805 = load i32, i32* %804
  %806 = sext i32 %805 to i64
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = load i64, i64* %RAX
  %808 = mul i64 %807, 8
  %809 = add i64 %808, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 8
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i64*
  %813 = load i64, i64* %812
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 40
  %816 = load i64, i64* %RAX
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 4
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %815 to i64*
  store i64 %816, i64* %819
  %820 = load i64, i64* %PC
  %821 = sub i64 %820, 851
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %821, i64* %824, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 12
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 7
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 7, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 12
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %837 = load i64, i64* %PC
  %838 = sub i64 %837, 434
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %844 = load i64, i64* %843, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %840, i64* %846
  store i64 %845, i64* %843, align 8, !tbaa !2428
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %838, i64* %847, align 8, !tbaa !2428
  %848 = load i64, i64* %PC
  %849 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %848, %struct.Memory* %MEMORY.1)
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 8
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RAX
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = add i64 4, %859
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = icmp ult i64 %862, %859
  %864 = icmp ult i64 %862, 4
  %865 = or i1 %863, %864
  %866 = zext i1 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %866, i8* %867, align 1, !tbaa !2432
  %868 = trunc i64 %862 to i32
  %869 = and i32 %868, 255
  %870 = call i32 @llvm.ctpop.i32(i32 %869) #16
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  %873 = xor i8 %872, 1
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %873, i8* %874, align 1, !tbaa !2446
  %875 = xor i64 4, %859
  %876 = xor i64 %875, %862
  %877 = lshr i64 %876, 4
  %878 = trunc i64 %877 to i8
  %879 = and i8 %878, 1
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %879, i8* %880, align 1, !tbaa !2447
  %881 = icmp eq i64 %862, 0
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %882, i8* %883, align 1, !tbaa !2448
  %884 = lshr i64 %862, 63
  %885 = trunc i64 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %885, i8* %886, align 1, !tbaa !2449
  %887 = lshr i64 %859, 63
  %888 = xor i64 %884, %887
  %889 = add nuw nsw i64 %888, %884
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %891, i8* %892, align 1, !tbaa !2450
  %893 = load i64, i64* %RBP
  %894 = sub i64 %893, 8
  %895 = load i64, i64* %RCX
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %894 to i64*
  store i64 %895, i64* %898
  %899 = load i64, i64* %RAX
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i32*
  %903 = load i32, i32* %902
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RAX
  %906 = mul i64 %905, 8
  %907 = add i64 %906, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 8
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i64*
  %911 = load i64, i64* %910
  store i64 %911, i64* %RAX, align 8, !tbaa !2428
  %912 = load i64, i64* %RBP
  %913 = sub i64 %912, 40
  %914 = load i64, i64* %RAX
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 4
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %913 to i64*
  store i64 %914, i64* %917
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 351
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %922, align 8, !tbaa !2428
  br label %block_400586

block_400aa7:                                     ; preds = %block_400aa0, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400aa0 ]
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 12
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 3
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i32*
  %928 = load i32, i32* %927
  %929 = zext i32 %928 to i64
  store i64 %929, i64* %RDI, align 8, !tbaa !2428
  %930 = load i64, i64* %PC
  %931 = sub i64 %930, 1434
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  store i64 %935, i64* %PC
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %937 = load i64, i64* %936, align 8, !tbaa !2428
  %938 = add i64 %937, -8
  %939 = inttoptr i64 %938 to i64*
  store i64 %933, i64* %939
  store i64 %938, i64* %936, align 8, !tbaa !2428
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %931, i64* %940, align 8, !tbaa !2428
  %941 = load i64, i64* %PC
  %942 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %941, %struct.Memory* %MEMORY.0)
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 8
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i64*
  %948 = load i64, i64* %947
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RAX
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  store i64 %949, i64* %RCX, align 8, !tbaa !2428
  %952 = load i64, i64* %RCX
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = add i64 4, %952
  store i64 %955, i64* %RCX, align 8, !tbaa !2428
  %956 = icmp ult i64 %955, %952
  %957 = icmp ult i64 %955, 4
  %958 = or i1 %956, %957
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2432
  %961 = trunc i64 %955 to i32
  %962 = and i32 %961, 255
  %963 = call i32 @llvm.ctpop.i32(i32 %962) #16
  %964 = trunc i32 %963 to i8
  %965 = and i8 %964, 1
  %966 = xor i8 %965, 1
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %966, i8* %967, align 1, !tbaa !2446
  %968 = xor i64 4, %952
  %969 = xor i64 %968, %955
  %970 = lshr i64 %969, 4
  %971 = trunc i64 %970 to i8
  %972 = and i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %972, i8* %973, align 1, !tbaa !2447
  %974 = icmp eq i64 %955, 0
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %975, i8* %976, align 1, !tbaa !2448
  %977 = lshr i64 %955, 63
  %978 = trunc i64 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %978, i8* %979, align 1, !tbaa !2449
  %980 = lshr i64 %952, 63
  %981 = xor i64 %977, %980
  %982 = add nuw nsw i64 %981, %977
  %983 = icmp eq i64 %982, 2
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %984, i8* %985, align 1, !tbaa !2450
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 8
  %988 = load i64, i64* %RCX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %987 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %RAX
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = inttoptr i64 %992 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RAX
  %999 = mul i64 %998, 8
  %1000 = add i64 %999, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 8
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i64*
  %1004 = load i64, i64* %1003
  store i64 %1004, i64* %RAX, align 8, !tbaa !2428
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 40
  %1007 = load i64, i64* %RAX
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1006 to i64*
  store i64 %1007, i64* %1010
  %1011 = load i64, i64* %PC
  %1012 = sub i64 %1011, 1351
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 5
  store i64 %1014, i64* %PC
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1012, i64* %1015, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 7
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  store i32 22, i32* %1020
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 12
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 3
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1022 to i32*
  %1026 = load i32, i32* %1025
  %1027 = zext i32 %1026 to i64
  store i64 %1027, i64* %RDI, align 8, !tbaa !2428
  %1028 = load i64, i64* %PC
  %1029 = sub i64 %1028, 1184
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 5
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  store i64 %1033, i64* %PC
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1035 = load i64, i64* %1034, align 8, !tbaa !2428
  %1036 = add i64 %1035, -8
  %1037 = inttoptr i64 %1036 to i64*
  store i64 %1031, i64* %1037
  store i64 %1036, i64* %1034, align 8, !tbaa !2428
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1029, i64* %1038, align 8, !tbaa !2428
  %1039 = load i64, i64* %PC
  %1040 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1039, %struct.Memory* %MEMORY.1)
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 8
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RAX
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 3
  store i64 %1049, i64* %PC
  store i64 %1047, i64* %RCX, align 8, !tbaa !2428
  %1050 = load i64, i64* %RCX
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = add i64 4, %1050
  store i64 %1053, i64* %RCX, align 8, !tbaa !2428
  %1054 = icmp ult i64 %1053, %1050
  %1055 = icmp ult i64 %1053, 4
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1057, i8* %1058, align 1, !tbaa !2432
  %1059 = trunc i64 %1053 to i32
  %1060 = and i32 %1059, 255
  %1061 = call i32 @llvm.ctpop.i32(i32 %1060) #16
  %1062 = trunc i32 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = xor i8 %1063, 1
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1064, i8* %1065, align 1, !tbaa !2446
  %1066 = xor i64 4, %1050
  %1067 = xor i64 %1066, %1053
  %1068 = lshr i64 %1067, 4
  %1069 = trunc i64 %1068 to i8
  %1070 = and i8 %1069, 1
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1070, i8* %1071, align 1, !tbaa !2447
  %1072 = icmp eq i64 %1053, 0
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1073, i8* %1074, align 1, !tbaa !2448
  %1075 = lshr i64 %1053, 63
  %1076 = trunc i64 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1076, i8* %1077, align 1, !tbaa !2449
  %1078 = lshr i64 %1050, 63
  %1079 = xor i64 %1075, %1078
  %1080 = add nuw nsw i64 %1079, %1075
  %1081 = icmp eq i64 %1080, 2
  %1082 = zext i1 %1081 to i8
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1082, i8* %1083, align 1, !tbaa !2450
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 8
  %1086 = load i64, i64* %RCX
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 4
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1085 to i64*
  store i64 %1086, i64* %1089
  %1090 = load i64, i64* %RAX
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093
  %1095 = sext i32 %1094 to i64
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RAX
  %1097 = mul i64 %1096, 8
  %1098 = add i64 %1097, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 8
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1098 to i64*
  %1102 = load i64, i64* %1101
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 40
  %1105 = load i64, i64* %RAX
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1104 to i64*
  store i64 %1105, i64* %1108
  %1109 = load i64, i64* %PC
  %1110 = sub i64 %1109, 1101
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 5
  store i64 %1112, i64* %PC
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1110, i64* %1113, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 12
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 7
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  store i32 3, i32* %1118
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 12
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 3
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i32*
  %1124 = load i32, i32* %1123
  %1125 = zext i32 %1124 to i64
  store i64 %1125, i64* %RDI, align 8, !tbaa !2428
  %1126 = load i64, i64* %PC
  %1127 = sub i64 %1126, 234
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 5
  store i64 %1131, i64* %PC
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1133 = load i64, i64* %1132, align 8, !tbaa !2428
  %1134 = add i64 %1133, -8
  %1135 = inttoptr i64 %1134 to i64*
  store i64 %1129, i64* %1135
  store i64 %1134, i64* %1132, align 8, !tbaa !2428
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1127, i64* %1136, align 8, !tbaa !2428
  %1137 = load i64, i64* %PC
  %1138 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1137, %struct.Memory* %MEMORY.1)
  %1139 = load i64, i64* %RBP
  %1140 = sub i64 %1139, 8
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = load i64, i64* %RAX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 3
  store i64 %1147, i64* %PC
  store i64 %1145, i64* %RCX, align 8, !tbaa !2428
  %1148 = load i64, i64* %RCX
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  %1151 = add i64 4, %1148
  store i64 %1151, i64* %RCX, align 8, !tbaa !2428
  %1152 = icmp ult i64 %1151, %1148
  %1153 = icmp ult i64 %1151, 4
  %1154 = or i1 %1152, %1153
  %1155 = zext i1 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1155, i8* %1156, align 1, !tbaa !2432
  %1157 = trunc i64 %1151 to i32
  %1158 = and i32 %1157, 255
  %1159 = call i32 @llvm.ctpop.i32(i32 %1158) #16
  %1160 = trunc i32 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = xor i8 %1161, 1
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1162, i8* %1163, align 1, !tbaa !2446
  %1164 = xor i64 4, %1148
  %1165 = xor i64 %1164, %1151
  %1166 = lshr i64 %1165, 4
  %1167 = trunc i64 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1168, i8* %1169, align 1, !tbaa !2447
  %1170 = icmp eq i64 %1151, 0
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1171, i8* %1172, align 1, !tbaa !2448
  %1173 = lshr i64 %1151, 63
  %1174 = trunc i64 %1173 to i8
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1174, i8* %1175, align 1, !tbaa !2449
  %1176 = lshr i64 %1148, 63
  %1177 = xor i64 %1173, %1176
  %1178 = add nuw nsw i64 %1177, %1173
  %1179 = icmp eq i64 %1178, 2
  %1180 = zext i1 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1180, i8* %1181, align 1, !tbaa !2450
  %1182 = load i64, i64* %RBP
  %1183 = sub i64 %1182, 8
  %1184 = load i64, i64* %RCX
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 4
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1183 to i64*
  store i64 %1184, i64* %1187
  %1188 = load i64, i64* %RAX
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 3
  store i64 %1190, i64* %PC
  %1191 = inttoptr i64 %1188 to i32*
  %1192 = load i32, i32* %1191
  %1193 = sext i32 %1192 to i64
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RAX
  %1195 = mul i64 %1194, 8
  %1196 = add i64 %1195, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 8
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i64*
  %1200 = load i64, i64* %1199
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 40
  %1203 = load i64, i64* %RAX
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 4
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1202 to i64*
  store i64 %1203, i64* %1206
  %1207 = load i64, i64* %PC
  %1208 = sub i64 %1207, 151
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 5
  store i64 %1210, i64* %PC
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1208, i64* %1211, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_400622, %block_4005f0, %block_4009a6, %block_400aa7, %block_4006b8, %block_4008ac, %block_400b36, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %942, %block_400aa7 ], [ %1247, %block_400622 ], [ %1040, %block_4009a6 ], [ %751, %block_4008ac ], [ %849, %block_4006b8 ], [ %646, %block_400b36 ], [ %151, %block_400a6e ], [ %1138, %block_4005f0 ], [ %53, %block_400974 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %1399, %block_4007b2 ]
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 40
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 4
  store i64 %1215, i64* %PC
  %1216 = inttoptr i64 %1213 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %RAX, align 8, !tbaa !2428
  %1218 = load i64, i64* %RAX
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 2
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1221, align 8, !tbaa !2428
  %1222 = load i64, i64* %PC
  switch i64 %1222, label %1487 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4197174, label %block_400b36
    i64 4196024, label %block_4006b8
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400622:                                     ; preds = %block_400586
  %1223 = load i64, i64* %RBP
  %1224 = sub i64 %1223, 12
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 7
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1224 to i32*
  store i32 4, i32* %1227
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 12
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 3
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i32*
  %1233 = load i32, i32* %1232
  %1234 = zext i32 %1233 to i64
  store i64 %1234, i64* %RDI, align 8, !tbaa !2428
  %1235 = load i64, i64* %PC
  %1236 = sub i64 %1235, 284
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 5
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 5
  store i64 %1240, i64* %PC
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1242 = load i64, i64* %1241, align 8, !tbaa !2428
  %1243 = add i64 %1242, -8
  %1244 = inttoptr i64 %1243 to i64*
  store i64 %1238, i64* %1244
  store i64 %1243, i64* %1241, align 8, !tbaa !2428
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1236, i64* %1245, align 8, !tbaa !2428
  %1246 = load i64, i64* %PC
  %1247 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1246, %struct.Memory* %MEMORY.1)
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 8
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 4
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to i64*
  %1253 = load i64, i64* %1252
  store i64 %1253, i64* %RAX, align 8, !tbaa !2428
  %1254 = load i64, i64* %RAX
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 3
  store i64 %1256, i64* %PC
  store i64 %1254, i64* %RCX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RCX
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 4
  store i64 %1259, i64* %PC
  %1260 = add i64 4, %1257
  store i64 %1260, i64* %RCX, align 8, !tbaa !2428
  %1261 = icmp ult i64 %1260, %1257
  %1262 = icmp ult i64 %1260, 4
  %1263 = or i1 %1261, %1262
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1264, i8* %1265, align 1, !tbaa !2432
  %1266 = trunc i64 %1260 to i32
  %1267 = and i32 %1266, 255
  %1268 = call i32 @llvm.ctpop.i32(i32 %1267) #16
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  %1271 = xor i8 %1270, 1
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1271, i8* %1272, align 1, !tbaa !2446
  %1273 = xor i64 4, %1257
  %1274 = xor i64 %1273, %1260
  %1275 = lshr i64 %1274, 4
  %1276 = trunc i64 %1275 to i8
  %1277 = and i8 %1276, 1
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1277, i8* %1278, align 1, !tbaa !2447
  %1279 = icmp eq i64 %1260, 0
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1280, i8* %1281, align 1, !tbaa !2448
  %1282 = lshr i64 %1260, 63
  %1283 = trunc i64 %1282 to i8
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1283, i8* %1284, align 1, !tbaa !2449
  %1285 = lshr i64 %1257, 63
  %1286 = xor i64 %1282, %1285
  %1287 = add nuw nsw i64 %1286, %1282
  %1288 = icmp eq i64 %1287, 2
  %1289 = zext i1 %1288 to i8
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1289, i8* %1290, align 1, !tbaa !2450
  %1291 = load i64, i64* %RBP
  %1292 = sub i64 %1291, 8
  %1293 = load i64, i64* %RCX
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1292 to i64*
  store i64 %1293, i64* %1296
  %1297 = load i64, i64* %RAX
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 3
  store i64 %1299, i64* %PC
  %1300 = inttoptr i64 %1297 to i32*
  %1301 = load i32, i32* %1300
  %1302 = sext i32 %1301 to i64
  store i64 %1302, i64* %RAX, align 8, !tbaa !2428
  %1303 = load i64, i64* %RAX
  %1304 = mul i64 %1303, 8
  %1305 = add i64 %1304, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 8
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1305 to i64*
  %1309 = load i64, i64* %1308
  store i64 %1309, i64* %RAX, align 8, !tbaa !2428
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 40
  %1312 = load i64, i64* %RAX
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 4
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1311 to i64*
  store i64 %1312, i64* %1315
  %1316 = load i64, i64* %PC
  %1317 = sub i64 %1316, 201
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 5
  store i64 %1319, i64* %PC
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1317, i64* %1320, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1321 = load i64, i64* %RBP
  %1322 = sub i64 %1321, 12
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 7
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i32*
  store i32 27, i32* %1325
  br label %block_400aa7

block_40071c:                                     ; preds = %block_400586
  %1326 = load i64, i64* %RBP
  %1327 = sub i64 %1326, 12
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 7
  store i64 %1329, i64* %PC
  %1330 = inttoptr i64 %1327 to i32*
  store i32 9, i32* %1330
  %1331 = load i64, i64* %PC
  %1332 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1331, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1332

block_400816:                                     ; preds = %block_400586
  %1333 = load i64, i64* %RBP
  %1334 = sub i64 %1333, 12
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 7
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1334 to i32*
  store i32 14, i32* %1337
  %1338 = load i64, i64* %PC
  %1339 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1338, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1339

block_400910:                                     ; preds = %block_400586
  %1340 = load i64, i64* %RBP
  %1341 = sub i64 %1340, 12
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 7
  store i64 %1343, i64* %PC
  %1344 = inttoptr i64 %1341 to i32*
  store i32 19, i32* %1344
  %1345 = load i64, i64* %PC
  %1346 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1345, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1346

block_40058c:                                     ; preds = %block_400586
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 12
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 7
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i32*
  store i32 1, i32* %1351
  %1352 = load i64, i64* %PC
  %1353 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1352, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1353

block_400a0a:                                     ; preds = %block_400586
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 12
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 7
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i32*
  store i32 24, i32* %1358
  %1359 = load i64, i64* %PC
  %1360 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1359, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1360

block_400686:                                     ; preds = %block_400586
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 12
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 7
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1362 to i32*
  store i32 6, i32* %1365
  %1366 = load i64, i64* %PC
  %1367 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1366, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1367

block_400b04:                                     ; preds = %block_400586
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 12
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 7
  store i64 %1371, i64* %PC
  %1372 = inttoptr i64 %1369 to i32*
  store i32 29, i32* %1372
  %1373 = load i64, i64* %PC
  %1374 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1373, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1374

block_4007b2:                                     ; preds = %block_400586
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 12
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 7
  store i64 %1378, i64* %PC
  %1379 = inttoptr i64 %1376 to i32*
  store i32 12, i32* %1379
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 12
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 3
  store i64 %1383, i64* %PC
  %1384 = inttoptr i64 %1381 to i32*
  %1385 = load i32, i32* %1384
  %1386 = zext i32 %1385 to i64
  store i64 %1386, i64* %RDI, align 8, !tbaa !2428
  %1387 = load i64, i64* %PC
  %1388 = sub i64 %1387, 684
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 5
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  store i64 %1392, i64* %PC
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1394 = load i64, i64* %1393, align 8, !tbaa !2428
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1390, i64* %1396
  store i64 %1395, i64* %1393, align 8, !tbaa !2428
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1388, i64* %1397, align 8, !tbaa !2428
  %1398 = load i64, i64* %PC
  %1399 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1398, %struct.Memory* %MEMORY.1)
  %1400 = load i64, i64* %RBP
  %1401 = sub i64 %1400, 8
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  store i64 %1405, i64* %RAX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RAX
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 3
  store i64 %1408, i64* %PC
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1409 = load i64, i64* %RCX
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 4
  store i64 %1411, i64* %PC
  %1412 = add i64 4, %1409
  store i64 %1412, i64* %RCX, align 8, !tbaa !2428
  %1413 = icmp ult i64 %1412, %1409
  %1414 = icmp ult i64 %1412, 4
  %1415 = or i1 %1413, %1414
  %1416 = zext i1 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1416, i8* %1417, align 1, !tbaa !2432
  %1418 = trunc i64 %1412 to i32
  %1419 = and i32 %1418, 255
  %1420 = call i32 @llvm.ctpop.i32(i32 %1419) #16
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  %1423 = xor i8 %1422, 1
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1423, i8* %1424, align 1, !tbaa !2446
  %1425 = xor i64 4, %1409
  %1426 = xor i64 %1425, %1412
  %1427 = lshr i64 %1426, 4
  %1428 = trunc i64 %1427 to i8
  %1429 = and i8 %1428, 1
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1429, i8* %1430, align 1, !tbaa !2447
  %1431 = icmp eq i64 %1412, 0
  %1432 = zext i1 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1432, i8* %1433, align 1, !tbaa !2448
  %1434 = lshr i64 %1412, 63
  %1435 = trunc i64 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1435, i8* %1436, align 1, !tbaa !2449
  %1437 = lshr i64 %1409, 63
  %1438 = xor i64 %1434, %1437
  %1439 = add nuw nsw i64 %1438, %1434
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1442, align 1, !tbaa !2450
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 8
  %1445 = load i64, i64* %RCX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 4
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1444 to i64*
  store i64 %1445, i64* %1448
  %1449 = load i64, i64* %RAX
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 3
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1449 to i32*
  %1453 = load i32, i32* %1452
  %1454 = sext i32 %1453 to i64
  store i64 %1454, i64* %RAX, align 8, !tbaa !2428
  %1455 = load i64, i64* %RAX
  %1456 = mul i64 %1455, 8
  %1457 = add i64 %1456, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1458 = load i64, i64* %PC
  %1459 = add i64 %1458, 8
  store i64 %1459, i64* %PC
  %1460 = inttoptr i64 %1457 to i64*
  %1461 = load i64, i64* %1460
  store i64 %1461, i64* %RAX, align 8, !tbaa !2428
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 40
  %1464 = load i64, i64* %RAX
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 4
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1463 to i64*
  store i64 %1464, i64* %1467
  %1468 = load i64, i64* %PC
  %1469 = sub i64 %1468, 601
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 5
  store i64 %1471, i64* %PC
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1469, i64* %1472, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1473 = load i64, i64* %RBP
  %1474 = sub i64 %1473, 12
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 7
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1474 to i32*
  store i32 11, i32* %1477
  %1478 = load i64, i64* %PC
  %1479 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1478, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1479

block_400654:                                     ; preds = %block_400586
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 12
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 7
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i32*
  store i32 5, i32* %1484
  %1485 = load i64, i64* %PC
  %1486 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1485, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1486

; <label>:1487:                                   ; preds = %block_400586
  %1488 = load i64, i64* %PC
  %1489 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1488, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1489
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_execute(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 4
  %30 = load i32, i32* %EDI
  %31 = zext i32 %30 to i64
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %34
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 4
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %36 to i32*
  %40 = load i32, i32* %39
  %41 = zext i32 %40 to i64
  store i64 %41, i64* %RDI, align 8, !tbaa !2428
  %42 = load i64, i64* %RDI
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 7
  store i64 %44, i64* %PC
  %45 = trunc i64 %42 to i32
  %46 = load i32, i32* bitcast (%sum_type* @sum to i32*)
  %47 = add i32 %46, %45
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = icmp ult i32 %47, %45
  %50 = icmp ult i32 %47, %46
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %47, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i32 %46, %45
  %61 = xor i32 %60, %47
  %62 = lshr i32 %61, 4
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i32 %47, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i32 %47, 31
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i32 %45, 31
  %73 = lshr i32 %46, 31
  %74 = xor i32 %69, %72
  %75 = xor i32 %69, %73
  %76 = add nuw nsw i32 %74, %75
  %77 = icmp eq i32 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2450
  %80 = load i32, i32* %EDI
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i32 %80, i32* bitcast (%sum_type* @sum to i32*)
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 1
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RBP, align 8, !tbaa !2428
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 1
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %93, align 8, !tbaa !2428
  %98 = add i64 %95, 8
  store i64 %98, i64* %94, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400593(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400593

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 13, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 734
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 651
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 18, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 984
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 901
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 1234
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 1151
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 5, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 334
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 251
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 28, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1484
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1401
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 10, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 584
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 501
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 15, i32* %1013
  %1014 = load i64, i64* %PC
  %1015 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %1014, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1015

block_400942:                                     ; preds = %block_400586
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 7
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  store i32 20, i32* %1020
  %1021 = load i64, i64* %PC
  %1022 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1021, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1022

block_4005be:                                     ; preds = %block_400586
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 12
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 7
  store i64 %1026, i64* %PC
  %1027 = inttoptr i64 %1024 to i32*
  store i32 2, i32* %1027
  %1028 = load i64, i64* %PC
  %1029 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1028, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1029

block_4005f0:                                     ; preds = %block_400586
  %1030 = load i64, i64* %RBP
  %1031 = sub i64 %1030, 12
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 7
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  store i32 3, i32* %1034
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 12
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 3
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = zext i32 %1040 to i64
  store i64 %1041, i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = sub i64 %1042, 234
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 5
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 5
  store i64 %1047, i64* %PC
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1049 = load i64, i64* %1048, align 8, !tbaa !2428
  %1050 = add i64 %1049, -8
  %1051 = inttoptr i64 %1050 to i64*
  store i64 %1045, i64* %1051
  store i64 %1050, i64* %1048, align 8, !tbaa !2428
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1043, i64* %1052, align 8, !tbaa !2428
  %1053 = load i64, i64* %PC
  %1054 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1053, %struct.Memory* %MEMORY.0)
  %1055 = load i64, i64* %RBP
  %1056 = sub i64 %1055, 8
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 4
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1056 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %RAX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RAX
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1064 = load i64, i64* %RCX
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = add i64 4, %1064
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = icmp ult i64 %1067, %1064
  %1069 = icmp ult i64 %1067, 4
  %1070 = or i1 %1068, %1069
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1071, i8* %1072, align 1, !tbaa !2432
  %1073 = trunc i64 %1067 to i32
  %1074 = and i32 %1073, 255
  %1075 = call i32 @llvm.ctpop.i32(i32 %1074) #16
  %1076 = trunc i32 %1075 to i8
  %1077 = and i8 %1076, 1
  %1078 = xor i8 %1077, 1
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1078, i8* %1079, align 1, !tbaa !2446
  %1080 = xor i64 4, %1064
  %1081 = xor i64 %1080, %1067
  %1082 = lshr i64 %1081, 4
  %1083 = trunc i64 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1084, i8* %1085, align 1, !tbaa !2447
  %1086 = icmp eq i64 %1067, 0
  %1087 = zext i1 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1087, i8* %1088, align 1, !tbaa !2448
  %1089 = lshr i64 %1067, 63
  %1090 = trunc i64 %1089 to i8
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1090, i8* %1091, align 1, !tbaa !2449
  %1092 = lshr i64 %1064, 63
  %1093 = xor i64 %1089, %1092
  %1094 = add nuw nsw i64 %1093, %1089
  %1095 = icmp eq i64 %1094, 2
  %1096 = zext i1 %1095 to i8
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1096, i8* %1097, align 1, !tbaa !2450
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 8
  %1100 = load i64, i64* %RCX
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1099 to i64*
  store i64 %1100, i64* %1103
  %1104 = load i64, i64* %RAX
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 3
  store i64 %1106, i64* %PC
  %1107 = inttoptr i64 %1104 to i32*
  %1108 = load i32, i32* %1107
  %1109 = sext i32 %1108 to i64
  store i64 %1109, i64* %RAX, align 8, !tbaa !2428
  %1110 = load i64, i64* %RAX
  %1111 = mul i64 %1110, 8
  %1112 = add i64 %1111, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 8
  store i64 %1114, i64* %PC
  %1115 = inttoptr i64 %1112 to i64*
  %1116 = load i64, i64* %1115
  store i64 %1116, i64* %RAX, align 8, !tbaa !2428
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 40
  %1119 = load i64, i64* %RAX
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 4
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1118 to i64*
  store i64 %1119, i64* %1122
  %1123 = load i64, i64* %PC
  %1124 = sub i64 %1123, 151
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1124, i64* %1127, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 12
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 7
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i32*
  store i32 25, i32* %1132
  %1133 = load i64, i64* %PC
  %1134 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1133, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1134

block_4006b8:                                     ; preds = %block_400586
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 12
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 7
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i32*
  store i32 7, i32* %1139
  %1140 = load i64, i64* %RBP
  %1141 = sub i64 %1140, 12
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 3
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i32*
  %1145 = load i32, i32* %1144
  %1146 = zext i32 %1145 to i64
  store i64 %1146, i64* %RDI, align 8, !tbaa !2428
  %1147 = load i64, i64* %PC
  %1148 = sub i64 %1147, 434
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 5
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1154 = load i64, i64* %1153, align 8, !tbaa !2428
  %1155 = add i64 %1154, -8
  %1156 = inttoptr i64 %1155 to i64*
  store i64 %1150, i64* %1156
  store i64 %1155, i64* %1153, align 8, !tbaa !2428
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1148, i64* %1157, align 8, !tbaa !2428
  %1158 = load i64, i64* %PC
  %1159 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1158, %struct.Memory* %MEMORY.0)
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 8
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 4
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = load i64, i64* %RAX
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 3
  store i64 %1168, i64* %PC
  store i64 %1166, i64* %RCX, align 8, !tbaa !2428
  %1169 = load i64, i64* %RCX
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 4
  store i64 %1171, i64* %PC
  %1172 = add i64 4, %1169
  store i64 %1172, i64* %RCX, align 8, !tbaa !2428
  %1173 = icmp ult i64 %1172, %1169
  %1174 = icmp ult i64 %1172, 4
  %1175 = or i1 %1173, %1174
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1176, i8* %1177, align 1, !tbaa !2432
  %1178 = trunc i64 %1172 to i32
  %1179 = and i32 %1178, 255
  %1180 = call i32 @llvm.ctpop.i32(i32 %1179) #16
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = xor i8 %1182, 1
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1183, i8* %1184, align 1, !tbaa !2446
  %1185 = xor i64 4, %1169
  %1186 = xor i64 %1185, %1172
  %1187 = lshr i64 %1186, 4
  %1188 = trunc i64 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1189, i8* %1190, align 1, !tbaa !2447
  %1191 = icmp eq i64 %1172, 0
  %1192 = zext i1 %1191 to i8
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1192, i8* %1193, align 1, !tbaa !2448
  %1194 = lshr i64 %1172, 63
  %1195 = trunc i64 %1194 to i8
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1195, i8* %1196, align 1, !tbaa !2449
  %1197 = lshr i64 %1169, 63
  %1198 = xor i64 %1194, %1197
  %1199 = add nuw nsw i64 %1198, %1194
  %1200 = icmp eq i64 %1199, 2
  %1201 = zext i1 %1200 to i8
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1201, i8* %1202, align 1, !tbaa !2450
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 8
  %1205 = load i64, i64* %RCX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1204 to i64*
  store i64 %1205, i64* %1208
  %1209 = load i64, i64* %RAX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = sext i32 %1213 to i64
  store i64 %1214, i64* %RAX, align 8, !tbaa !2428
  %1215 = load i64, i64* %RAX
  %1216 = mul i64 %1215, 8
  %1217 = add i64 %1216, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 8
  store i64 %1219, i64* %PC
  %1220 = inttoptr i64 %1217 to i64*
  %1221 = load i64, i64* %1220
  store i64 %1221, i64* %RAX, align 8, !tbaa !2428
  %1222 = load i64, i64* %RBP
  %1223 = sub i64 %1222, 40
  %1224 = load i64, i64* %RAX
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 4
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1223 to i64*
  store i64 %1224, i64* %1227
  %1228 = load i64, i64* %PC
  %1229 = sub i64 %1228, 351
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  store i64 %1231, i64* %PC
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1229, i64* %1232, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 12
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 7
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1234 to i32*
  store i32 30, i32* %1237
  %1238 = load i64, i64* %RBP
  %1239 = sub i64 %1238, 12
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 3
  store i64 %1241, i64* %PC
  %1242 = inttoptr i64 %1239 to i32*
  %1243 = load i32, i32* %1242
  %1244 = zext i32 %1243 to i64
  store i64 %1244, i64* %RDI, align 8, !tbaa !2428
  %1245 = load i64, i64* %PC
  %1246 = sub i64 %1245, 1584
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 5
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 5
  store i64 %1250, i64* %PC
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1252 = load i64, i64* %1251, align 8, !tbaa !2428
  %1253 = add i64 %1252, -8
  %1254 = inttoptr i64 %1253 to i64*
  store i64 %1248, i64* %1254
  store i64 %1253, i64* %1251, align 8, !tbaa !2428
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1246, i64* %1255, align 8, !tbaa !2428
  %1256 = load i64, i64* %PC
  %1257 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1256, %struct.Memory* %MEMORY.0)
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 8
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 4
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1259 to i64*
  %1263 = load i64, i64* %1262
  store i64 %1263, i64* %RAX, align 8, !tbaa !2428
  %1264 = load i64, i64* %RAX
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC
  store i64 %1264, i64* %RCX, align 8, !tbaa !2428
  %1267 = load i64, i64* %RCX
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = add i64 4, %1267
  store i64 %1270, i64* %RCX, align 8, !tbaa !2428
  %1271 = icmp ult i64 %1270, %1267
  %1272 = icmp ult i64 %1270, 4
  %1273 = or i1 %1271, %1272
  %1274 = zext i1 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1274, i8* %1275, align 1, !tbaa !2432
  %1276 = trunc i64 %1270 to i32
  %1277 = and i32 %1276, 255
  %1278 = call i32 @llvm.ctpop.i32(i32 %1277) #16
  %1279 = trunc i32 %1278 to i8
  %1280 = and i8 %1279, 1
  %1281 = xor i8 %1280, 1
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1281, i8* %1282, align 1, !tbaa !2446
  %1283 = xor i64 4, %1267
  %1284 = xor i64 %1283, %1270
  %1285 = lshr i64 %1284, 4
  %1286 = trunc i64 %1285 to i8
  %1287 = and i8 %1286, 1
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1287, i8* %1288, align 1, !tbaa !2447
  %1289 = icmp eq i64 %1270, 0
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1290, i8* %1291, align 1, !tbaa !2448
  %1292 = lshr i64 %1270, 63
  %1293 = trunc i64 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1293, i8* %1294, align 1, !tbaa !2449
  %1295 = lshr i64 %1267, 63
  %1296 = xor i64 %1292, %1295
  %1297 = add nuw nsw i64 %1296, %1292
  %1298 = icmp eq i64 %1297, 2
  %1299 = zext i1 %1298 to i8
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1299, i8* %1300, align 1, !tbaa !2450
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 8
  %1303 = load i64, i64* %RCX
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 4
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1302 to i64*
  store i64 %1303, i64* %1306
  %1307 = load i64, i64* %RAX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 3
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310
  %1312 = sext i32 %1311 to i64
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = load i64, i64* %RAX
  %1314 = mul i64 %1313, 8
  %1315 = add i64 %1314, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 8
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i64*
  %1319 = load i64, i64* %1318
  store i64 %1319, i64* %RAX, align 8, !tbaa !2428
  %1320 = load i64, i64* %RBP
  %1321 = sub i64 %1320, 40
  %1322 = load i64, i64* %RAX
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 4
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1321 to i64*
  store i64 %1322, i64* %1325
  %1326 = load i64, i64* %PC
  %1327 = sub i64 %1326, 1501
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  store i64 %1329, i64* %PC
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1327, i64* %1330, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 12
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 7
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to i32*
  store i32 0, i32* %1335
  %1336 = load i64, i64* %RSP
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 4
  store i64 %1338, i64* %PC
  %1339 = add i64 48, %1336
  store i64 %1339, i64* %RSP, align 8, !tbaa !2428
  %1340 = icmp ult i64 %1339, %1336
  %1341 = icmp ult i64 %1339, 48
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1343, i8* %1344, align 1, !tbaa !2432
  %1345 = trunc i64 %1339 to i32
  %1346 = and i32 %1345, 255
  %1347 = call i32 @llvm.ctpop.i32(i32 %1346) #16
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = xor i8 %1349, 1
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1350, i8* %1351, align 1, !tbaa !2446
  %1352 = xor i64 48, %1336
  %1353 = xor i64 %1352, %1339
  %1354 = lshr i64 %1353, 4
  %1355 = trunc i64 %1354 to i8
  %1356 = and i8 %1355, 1
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1356, i8* %1357, align 1, !tbaa !2447
  %1358 = icmp eq i64 %1339, 0
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1359, i8* %1360, align 1, !tbaa !2448
  %1361 = lshr i64 %1339, 63
  %1362 = trunc i64 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1362, i8* %1363, align 1, !tbaa !2449
  %1364 = lshr i64 %1336, 63
  %1365 = xor i64 %1361, %1364
  %1366 = add nuw nsw i64 %1365, %1361
  %1367 = icmp eq i64 %1366, 2
  %1368 = zext i1 %1367 to i8
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1368, i8* %1369, align 1, !tbaa !2450
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 1
  store i64 %1371, i64* %PC
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1373 = load i64, i64* %1372, align 8, !tbaa !2428
  %1374 = add i64 %1373, 8
  %1375 = inttoptr i64 %1373 to i64*
  %1376 = load i64, i64* %1375
  store i64 %1376, i64* %RBP, align 8, !tbaa !2428
  store i64 %1374, i64* %1372, align 8, !tbaa !2428
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 1
  store i64 %1378, i64* %PC
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1381 = load i64, i64* %1380, align 8, !tbaa !2428
  %1382 = inttoptr i64 %1381 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %1379, align 8, !tbaa !2428
  %1384 = add i64 %1381, 8
  store i64 %1384, i64* %1380, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007b2:                                     ; preds = %block_400586
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 12
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 7
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i32*
  store i32 12, i32* %1389
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 12
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = zext i32 %1395 to i64
  store i64 %1396, i64* %RDI, align 8, !tbaa !2428
  %1397 = load i64, i64* %PC
  %1398 = sub i64 %1397, 684
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 5
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1404 = load i64, i64* %1403, align 8, !tbaa !2428
  %1405 = add i64 %1404, -8
  %1406 = inttoptr i64 %1405 to i64*
  store i64 %1400, i64* %1406
  store i64 %1405, i64* %1403, align 8, !tbaa !2428
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1398, i64* %1407, align 8, !tbaa !2428
  %1408 = load i64, i64* %PC
  %1409 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1408, %struct.Memory* %MEMORY.0)
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 8
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i64*
  %1415 = load i64, i64* %1414
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = load i64, i64* %RAX
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  store i64 %1416, i64* %RCX, align 8, !tbaa !2428
  %1419 = load i64, i64* %RCX
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 4
  store i64 %1421, i64* %PC
  %1422 = add i64 4, %1419
  store i64 %1422, i64* %RCX, align 8, !tbaa !2428
  %1423 = icmp ult i64 %1422, %1419
  %1424 = icmp ult i64 %1422, 4
  %1425 = or i1 %1423, %1424
  %1426 = zext i1 %1425 to i8
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1426, i8* %1427, align 1, !tbaa !2432
  %1428 = trunc i64 %1422 to i32
  %1429 = and i32 %1428, 255
  %1430 = call i32 @llvm.ctpop.i32(i32 %1429) #16
  %1431 = trunc i32 %1430 to i8
  %1432 = and i8 %1431, 1
  %1433 = xor i8 %1432, 1
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1433, i8* %1434, align 1, !tbaa !2446
  %1435 = xor i64 4, %1419
  %1436 = xor i64 %1435, %1422
  %1437 = lshr i64 %1436, 4
  %1438 = trunc i64 %1437 to i8
  %1439 = and i8 %1438, 1
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1439, i8* %1440, align 1, !tbaa !2447
  %1441 = icmp eq i64 %1422, 0
  %1442 = zext i1 %1441 to i8
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1442, i8* %1443, align 1, !tbaa !2448
  %1444 = lshr i64 %1422, 63
  %1445 = trunc i64 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1445, i8* %1446, align 1, !tbaa !2449
  %1447 = lshr i64 %1419, 63
  %1448 = xor i64 %1444, %1447
  %1449 = add nuw nsw i64 %1448, %1444
  %1450 = icmp eq i64 %1449, 2
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1451, i8* %1452, align 1, !tbaa !2450
  %1453 = load i64, i64* %RBP
  %1454 = sub i64 %1453, 8
  %1455 = load i64, i64* %RCX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 4
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1454 to i64*
  store i64 %1455, i64* %1458
  %1459 = load i64, i64* %RAX
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 3
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1459 to i32*
  %1463 = load i32, i32* %1462
  %1464 = sext i32 %1463 to i64
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RAX
  %1466 = mul i64 %1465, 8
  %1467 = add i64 %1466, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 8
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1467 to i64*
  %1471 = load i64, i64* %1470
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 40
  %1474 = load i64, i64* %RAX
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 4
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1473 to i64*
  store i64 %1474, i64* %1477
  %1478 = load i64, i64* %PC
  %1479 = sub i64 %1478, 601
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 5
  store i64 %1481, i64* %PC
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1479, i64* %1482, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 12
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 7
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  store i32 17, i32* %1487
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 12
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 3
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = zext i32 %1493 to i64
  store i64 %1494, i64* %RDI, align 8, !tbaa !2428
  %1495 = load i64, i64* %PC
  %1496 = sub i64 %1495, 934
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 5
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 5
  store i64 %1500, i64* %PC
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1502 = load i64, i64* %1501, align 8, !tbaa !2428
  %1503 = add i64 %1502, -8
  %1504 = inttoptr i64 %1503 to i64*
  store i64 %1498, i64* %1504
  store i64 %1503, i64* %1501, align 8, !tbaa !2428
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1496, i64* %1505, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1506, %struct.Memory* %MEMORY.0)
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 8
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 4
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i64*
  %1513 = load i64, i64* %1512
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = load i64, i64* %RAX
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  store i64 %1514, i64* %RCX, align 8, !tbaa !2428
  %1517 = load i64, i64* %RCX
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 4
  store i64 %1519, i64* %PC
  %1520 = add i64 4, %1517
  store i64 %1520, i64* %RCX, align 8, !tbaa !2428
  %1521 = icmp ult i64 %1520, %1517
  %1522 = icmp ult i64 %1520, 4
  %1523 = or i1 %1521, %1522
  %1524 = zext i1 %1523 to i8
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1524, i8* %1525, align 1, !tbaa !2432
  %1526 = trunc i64 %1520 to i32
  %1527 = and i32 %1526, 255
  %1528 = call i32 @llvm.ctpop.i32(i32 %1527) #16
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = xor i8 %1530, 1
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1531, i8* %1532, align 1, !tbaa !2446
  %1533 = xor i64 4, %1517
  %1534 = xor i64 %1533, %1520
  %1535 = lshr i64 %1534, 4
  %1536 = trunc i64 %1535 to i8
  %1537 = and i8 %1536, 1
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1537, i8* %1538, align 1, !tbaa !2447
  %1539 = icmp eq i64 %1520, 0
  %1540 = zext i1 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1540, i8* %1541, align 1, !tbaa !2448
  %1542 = lshr i64 %1520, 63
  %1543 = trunc i64 %1542 to i8
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1543, i8* %1544, align 1, !tbaa !2449
  %1545 = lshr i64 %1517, 63
  %1546 = xor i64 %1542, %1545
  %1547 = add nuw nsw i64 %1546, %1542
  %1548 = icmp eq i64 %1547, 2
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1549, i8* %1550, align 1, !tbaa !2450
  %1551 = load i64, i64* %RBP
  %1552 = sub i64 %1551, 8
  %1553 = load i64, i64* %RCX
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 4
  store i64 %1555, i64* %PC
  %1556 = inttoptr i64 %1552 to i64*
  store i64 %1553, i64* %1556
  %1557 = load i64, i64* %RAX
  %1558 = load i64, i64* %PC
  %1559 = add i64 %1558, 3
  store i64 %1559, i64* %PC
  %1560 = inttoptr i64 %1557 to i32*
  %1561 = load i32, i32* %1560
  %1562 = sext i32 %1561 to i64
  store i64 %1562, i64* %RAX, align 8, !tbaa !2428
  %1563 = load i64, i64* %RAX
  %1564 = mul i64 %1563, 8
  %1565 = add i64 %1564, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 8
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1565 to i64*
  %1569 = load i64, i64* %1568
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = load i64, i64* %RBP
  %1571 = sub i64 %1570, 40
  %1572 = load i64, i64* %RAX
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 4
  store i64 %1574, i64* %PC
  %1575 = inttoptr i64 %1571 to i64*
  store i64 %1572, i64* %1575
  %1576 = load i64, i64* %PC
  %1577 = sub i64 %1576, 851
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 5
  store i64 %1579, i64* %PC
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1577, i64* %1580, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4009a6, %block_400910, %block_400593, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_4005f0, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %2003, %block_400593 ], [ %1616, %block_400622 ], [ %1507, %block_4008ac ], [ %1409, %block_4007b2 ], [ %1257, %block_400b36 ], [ %1159, %block_4006b8 ], [ %151, %block_400a6e ], [ %935, %block_40074e ], [ %1054, %block_4005f0 ], [ %53, %block_400974 ], [ %641, %block_4009d8 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %445, %block_4007e4 ], [ %543, %block_4008de ], [ %739, %block_400654 ], [ %837, %block_400ad2 ], [ %1714, %block_400aa0 ], [ %1812, %block_40071c ], [ %1910, %block_400816 ], [ %2101, %block_400910 ], [ %2232, %block_4009a6 ]
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 4
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i64*
  %1586 = load i64, i64* %1585
  store i64 %1586, i64* %RAX, align 8, !tbaa !2428
  %1587 = load i64, i64* %RAX
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 2
  store i64 %1589, i64* %PC
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1587, i64* %1590, align 8, !tbaa !2428
  %1591 = load i64, i64* %PC
  switch i64 %1591, label %2306 [
    i64 4196774, label %block_4009a6
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4195874, label %block_400622
  ]

block_400622:                                     ; preds = %block_400586
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 12
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 7
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i32*
  store i32 4, i32* %1596
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = sub i64 %1604, 284
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 5
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1611 = load i64, i64* %1610, align 8, !tbaa !2428
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1607, i64* %1613
  store i64 %1612, i64* %1610, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1605, i64* %1614, align 8, !tbaa !2428
  %1615 = load i64, i64* %PC
  %1616 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1615, %struct.Memory* %MEMORY.0)
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 8
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RAX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 3
  store i64 %1625, i64* %PC
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RCX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 4
  store i64 %1628, i64* %PC
  %1629 = add i64 4, %1626
  store i64 %1629, i64* %RCX, align 8, !tbaa !2428
  %1630 = icmp ult i64 %1629, %1626
  %1631 = icmp ult i64 %1629, 4
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1634, align 1, !tbaa !2432
  %1635 = trunc i64 %1629 to i32
  %1636 = and i32 %1635, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #16
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 4, %1626
  %1643 = xor i64 %1642, %1629
  %1644 = lshr i64 %1643, 4
  %1645 = trunc i64 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1646, i8* %1647, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1629, 0
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = lshr i64 %1629, 63
  %1652 = trunc i64 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1652, i8* %1653, align 1, !tbaa !2449
  %1654 = lshr i64 %1626, 63
  %1655 = xor i64 %1651, %1654
  %1656 = add nuw nsw i64 %1655, %1651
  %1657 = icmp eq i64 %1656, 2
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 8
  %1662 = load i64, i64* %RCX
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1661 to i64*
  store i64 %1662, i64* %1665
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RAX
  %1673 = mul i64 %1672, 8
  %1674 = add i64 %1673, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 8
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %PC
  %1686 = sub i64 %1685, 201
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1686, i64* %1689, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 12
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 27, i32* %1694
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDI, align 8, !tbaa !2428
  %1702 = load i64, i64* %PC
  %1703 = sub i64 %1702, 1434
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  store i64 %1707, i64* %PC
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1709 = load i64, i64* %1708, align 8, !tbaa !2428
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1705, i64* %1711
  store i64 %1710, i64* %1708, align 8, !tbaa !2428
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1703, i64* %1712, align 8, !tbaa !2428
  %1713 = load i64, i64* %PC
  %1714 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1713, %struct.Memory* %MEMORY.0)
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 8
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = load i64, i64* %RAX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 4
  store i64 %1726, i64* %PC
  %1727 = add i64 4, %1724
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = icmp ult i64 %1727, %1724
  %1729 = icmp ult i64 %1727, 4
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1731, i8* %1732, align 1, !tbaa !2432
  %1733 = trunc i64 %1727 to i32
  %1734 = and i32 %1733, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #16
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2446
  %1740 = xor i64 4, %1724
  %1741 = xor i64 %1740, %1727
  %1742 = lshr i64 %1741, 4
  %1743 = trunc i64 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1744, i8* %1745, align 1, !tbaa !2447
  %1746 = icmp eq i64 %1727, 0
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1747, i8* %1748, align 1, !tbaa !2448
  %1749 = lshr i64 %1727, 63
  %1750 = trunc i64 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1750, i8* %1751, align 1, !tbaa !2449
  %1752 = lshr i64 %1724, 63
  %1753 = xor i64 %1749, %1752
  %1754 = add nuw nsw i64 %1753, %1749
  %1755 = icmp eq i64 %1754, 2
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1756, i8* %1757, align 1, !tbaa !2450
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 8
  %1760 = load i64, i64* %RCX
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1759 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %RAX
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 3
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RAX
  %1771 = mul i64 %1770, 8
  %1772 = add i64 %1771, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 40
  %1779 = load i64, i64* %RAX
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1778 to i64*
  store i64 %1779, i64* %1782
  %1783 = load i64, i64* %PC
  %1784 = sub i64 %1783, 1351
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1784, i64* %1787, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 7
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i32*
  store i32 9, i32* %1792
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %PC
  %1801 = sub i64 %1800, 534
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 5
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1807 = load i64, i64* %1806, align 8, !tbaa !2428
  %1808 = add i64 %1807, -8
  %1809 = inttoptr i64 %1808 to i64*
  store i64 %1803, i64* %1809
  store i64 %1808, i64* %1806, align 8, !tbaa !2428
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1801, i64* %1810, align 8, !tbaa !2428
  %1811 = load i64, i64* %PC
  %1812 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1811, %struct.Memory* %MEMORY.0)
  %1813 = load i64, i64* %RBP
  %1814 = sub i64 %1813, 8
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1814 to i64*
  %1818 = load i64, i64* %1817
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  store i64 %1819, i64* %RCX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RCX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = add i64 4, %1822
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i64 %1825, %1822
  %1827 = icmp ult i64 %1825, 4
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2432
  %1831 = trunc i64 %1825 to i32
  %1832 = and i32 %1831, 255
  %1833 = call i32 @llvm.ctpop.i32(i32 %1832) #16
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1836, i8* %1837, align 1, !tbaa !2446
  %1838 = xor i64 4, %1822
  %1839 = xor i64 %1838, %1825
  %1840 = lshr i64 %1839, 4
  %1841 = trunc i64 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = icmp eq i64 %1825, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1825, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = lshr i64 %1822, 63
  %1851 = xor i64 %1847, %1850
  %1852 = add nuw nsw i64 %1851, %1847
  %1853 = icmp eq i64 %1852, 2
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = sext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RAX
  %1869 = mul i64 %1868, 8
  %1870 = add i64 %1869, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 8
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 40
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1876 to i64*
  store i64 %1877, i64* %1880
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 451
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  store i64 %1884, i64* %PC
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1885, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 12
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  store i32 14, i32* %1890
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 12
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RDI, align 8, !tbaa !2428
  %1898 = load i64, i64* %PC
  %1899 = sub i64 %1898, 784
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1905 = load i64, i64* %1904, align 8, !tbaa !2428
  %1906 = add i64 %1905, -8
  %1907 = inttoptr i64 %1906 to i64*
  store i64 %1901, i64* %1907
  store i64 %1906, i64* %1904, align 8, !tbaa !2428
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1908, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1909, %struct.Memory* %MEMORY.0)
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 8
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i64*
  %1916 = load i64, i64* %1915
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RCX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 4
  store i64 %1922, i64* %PC
  %1923 = add i64 4, %1920
  store i64 %1923, i64* %RCX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1920
  %1925 = icmp ult i64 %1923, 4
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i64 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = xor i64 4, %1920
  %1937 = xor i64 %1936, %1923
  %1938 = lshr i64 %1937, 4
  %1939 = trunc i64 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1940, i8* %1941, align 1, !tbaa !2447
  %1942 = icmp eq i64 %1923, 0
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1943, i8* %1944, align 1, !tbaa !2448
  %1945 = lshr i64 %1923, 63
  %1946 = trunc i64 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1946, i8* %1947, align 1, !tbaa !2449
  %1948 = lshr i64 %1920, 63
  %1949 = xor i64 %1945, %1948
  %1950 = add nuw nsw i64 %1949, %1945
  %1951 = icmp eq i64 %1950, 2
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1952, i8* %1953, align 1, !tbaa !2450
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 8
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 4
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RAX
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 3
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  %1964 = load i32, i32* %1963
  %1965 = sext i32 %1964 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 8
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 40
  %1975 = load i64, i64* %RAX
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 4
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1974 to i64*
  store i64 %1975, i64* %1978
  %1979 = load i64, i64* %PC
  %1980 = sub i64 %1979, 701
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1980, i64* %1983, align 8, !tbaa !2428
  br label %block_400586

block_400593:                                     ; preds = %block_40058c, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40058c ]
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 12
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 3
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i32*
  %1989 = load i32, i32* %1988
  %1990 = zext i32 %1989 to i64
  store i64 %1990, i64* %RDI, align 8, !tbaa !2428
  %1991 = load i64, i64* %PC
  %1992 = sub i64 %1991, 134
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1998 = load i64, i64* %1997, align 8, !tbaa !2428
  %1999 = add i64 %1998, -8
  %2000 = inttoptr i64 %1999 to i64*
  store i64 %1994, i64* %2000
  store i64 %1999, i64* %1997, align 8, !tbaa !2428
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1992, i64* %2001, align 8, !tbaa !2428
  %2002 = load i64, i64* %PC
  %2003 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2002, %struct.Memory* %MEMORY.1)
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 8
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i64*
  %2009 = load i64, i64* %2008
  store i64 %2009, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RAX
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  store i64 %2010, i64* %RCX, align 8, !tbaa !2428
  %2013 = load i64, i64* %RCX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 4
  store i64 %2015, i64* %PC
  %2016 = add i64 4, %2013
  store i64 %2016, i64* %RCX, align 8, !tbaa !2428
  %2017 = icmp ult i64 %2016, %2013
  %2018 = icmp ult i64 %2016, 4
  %2019 = or i1 %2017, %2018
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2020, i8* %2021, align 1, !tbaa !2432
  %2022 = trunc i64 %2016 to i32
  %2023 = and i32 %2022, 255
  %2024 = call i32 @llvm.ctpop.i32(i32 %2023) #16
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = xor i8 %2026, 1
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2027, i8* %2028, align 1, !tbaa !2446
  %2029 = xor i64 4, %2013
  %2030 = xor i64 %2029, %2016
  %2031 = lshr i64 %2030, 4
  %2032 = trunc i64 %2031 to i8
  %2033 = and i8 %2032, 1
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2033, i8* %2034, align 1, !tbaa !2447
  %2035 = icmp eq i64 %2016, 0
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2036, i8* %2037, align 1, !tbaa !2448
  %2038 = lshr i64 %2016, 63
  %2039 = trunc i64 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2039, i8* %2040, align 1, !tbaa !2449
  %2041 = lshr i64 %2013, 63
  %2042 = xor i64 %2038, %2041
  %2043 = add nuw nsw i64 %2042, %2038
  %2044 = icmp eq i64 %2043, 2
  %2045 = zext i1 %2044 to i8
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2045, i8* %2046, align 1, !tbaa !2450
  %2047 = load i64, i64* %RBP
  %2048 = sub i64 %2047, 8
  %2049 = load i64, i64* %RCX
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 4
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2048 to i64*
  store i64 %2049, i64* %2052
  %2053 = load i64, i64* %RAX
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 3
  store i64 %2055, i64* %PC
  %2056 = inttoptr i64 %2053 to i32*
  %2057 = load i32, i32* %2056
  %2058 = sext i32 %2057 to i64
  store i64 %2058, i64* %RAX, align 8, !tbaa !2428
  %2059 = load i64, i64* %RAX
  %2060 = mul i64 %2059, 8
  %2061 = add i64 %2060, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 8
  store i64 %2063, i64* %PC
  %2064 = inttoptr i64 %2061 to i64*
  %2065 = load i64, i64* %2064
  store i64 %2065, i64* %RAX, align 8, !tbaa !2428
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 40
  %2068 = load i64, i64* %RAX
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 4
  store i64 %2070, i64* %PC
  %2071 = inttoptr i64 %2067 to i64*
  store i64 %2068, i64* %2071
  %2072 = load i64, i64* %PC
  %2073 = sub i64 %2072, 51
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 5
  store i64 %2075, i64* %PC
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2073, i64* %2076, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 12
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 7
  store i64 %2080, i64* %PC
  %2081 = inttoptr i64 %2078 to i32*
  store i32 19, i32* %2081
  %2082 = load i64, i64* %RBP
  %2083 = sub i64 %2082, 12
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 3
  store i64 %2085, i64* %PC
  %2086 = inttoptr i64 %2083 to i32*
  %2087 = load i32, i32* %2086
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %RDI, align 8, !tbaa !2428
  %2089 = load i64, i64* %PC
  %2090 = sub i64 %2089, 1034
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 5
  store i64 %2094, i64* %PC
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2096 = load i64, i64* %2095, align 8, !tbaa !2428
  %2097 = add i64 %2096, -8
  %2098 = inttoptr i64 %2097 to i64*
  store i64 %2092, i64* %2098
  store i64 %2097, i64* %2095, align 8, !tbaa !2428
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2090, i64* %2099, align 8, !tbaa !2428
  %2100 = load i64, i64* %PC
  %2101 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2100, %struct.Memory* %MEMORY.0)
  %2102 = load i64, i64* %RBP
  %2103 = sub i64 %2102, 8
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 4
  store i64 %2105, i64* %PC
  %2106 = inttoptr i64 %2103 to i64*
  %2107 = load i64, i64* %2106
  store i64 %2107, i64* %RAX, align 8, !tbaa !2428
  %2108 = load i64, i64* %RAX
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 3
  store i64 %2110, i64* %PC
  store i64 %2108, i64* %RCX, align 8, !tbaa !2428
  %2111 = load i64, i64* %RCX
  %2112 = load i64, i64* %PC
  %2113 = add i64 %2112, 4
  store i64 %2113, i64* %PC
  %2114 = add i64 4, %2111
  store i64 %2114, i64* %RCX, align 8, !tbaa !2428
  %2115 = icmp ult i64 %2114, %2111
  %2116 = icmp ult i64 %2114, 4
  %2117 = or i1 %2115, %2116
  %2118 = zext i1 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2118, i8* %2119, align 1, !tbaa !2432
  %2120 = trunc i64 %2114 to i32
  %2121 = and i32 %2120, 255
  %2122 = call i32 @llvm.ctpop.i32(i32 %2121) #16
  %2123 = trunc i32 %2122 to i8
  %2124 = and i8 %2123, 1
  %2125 = xor i8 %2124, 1
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2125, i8* %2126, align 1, !tbaa !2446
  %2127 = xor i64 4, %2111
  %2128 = xor i64 %2127, %2114
  %2129 = lshr i64 %2128, 4
  %2130 = trunc i64 %2129 to i8
  %2131 = and i8 %2130, 1
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2131, i8* %2132, align 1, !tbaa !2447
  %2133 = icmp eq i64 %2114, 0
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2134, i8* %2135, align 1, !tbaa !2448
  %2136 = lshr i64 %2114, 63
  %2137 = trunc i64 %2136 to i8
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2137, i8* %2138, align 1, !tbaa !2449
  %2139 = lshr i64 %2111, 63
  %2140 = xor i64 %2136, %2139
  %2141 = add nuw nsw i64 %2140, %2136
  %2142 = icmp eq i64 %2141, 2
  %2143 = zext i1 %2142 to i8
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2143, i8* %2144, align 1, !tbaa !2450
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 8
  %2147 = load i64, i64* %RCX
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 4
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2146 to i64*
  store i64 %2147, i64* %2150
  %2151 = load i64, i64* %RAX
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 3
  store i64 %2153, i64* %PC
  %2154 = inttoptr i64 %2151 to i32*
  %2155 = load i32, i32* %2154
  %2156 = sext i32 %2155 to i64
  store i64 %2156, i64* %RAX, align 8, !tbaa !2428
  %2157 = load i64, i64* %RAX
  %2158 = mul i64 %2157, 8
  %2159 = add i64 %2158, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 8
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i64*
  %2163 = load i64, i64* %2162
  store i64 %2163, i64* %RAX, align 8, !tbaa !2428
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 40
  %2166 = load i64, i64* %RAX
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 4
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2165 to i64*
  store i64 %2166, i64* %2169
  %2170 = load i64, i64* %PC
  %2171 = sub i64 %2170, 951
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 5
  store i64 %2173, i64* %PC
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2171, i64* %2174, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2175 = load i64, i64* %RBP
  %2176 = sub i64 %2175, 12
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 7
  store i64 %2178, i64* %PC
  %2179 = inttoptr i64 %2176 to i32*
  store i32 1, i32* %2179
  br label %block_400593

block_400a0a:                                     ; preds = %block_400586
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 12
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 7
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i32*
  store i32 24, i32* %2184
  %2185 = load i64, i64* %PC
  %2186 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %2185, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2186

block_400686:                                     ; preds = %block_400586
  %2187 = load i64, i64* %RBP
  %2188 = sub i64 %2187, 12
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 7
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2188 to i32*
  store i32 6, i32* %2191
  %2192 = load i64, i64* %PC
  %2193 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %2192, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2193

block_400b04:                                     ; preds = %block_400586
  %2194 = load i64, i64* %RBP
  %2195 = sub i64 %2194, 12
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 7
  store i64 %2197, i64* %PC
  %2198 = inttoptr i64 %2195 to i32*
  store i32 29, i32* %2198
  %2199 = load i64, i64* %PC
  %2200 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2199, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2200

block_400780:                                     ; preds = %block_400586
  %2201 = load i64, i64* %RBP
  %2202 = sub i64 %2201, 12
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 7
  store i64 %2204, i64* %PC
  %2205 = inttoptr i64 %2202 to i32*
  store i32 11, i32* %2205
  %2206 = load i64, i64* %PC
  %2207 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2206, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2207

block_4009a6:                                     ; preds = %block_400586
  %2208 = load i64, i64* %RBP
  %2209 = sub i64 %2208, 12
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 7
  store i64 %2211, i64* %PC
  %2212 = inttoptr i64 %2209 to i32*
  store i32 22, i32* %2212
  %2213 = load i64, i64* %RBP
  %2214 = sub i64 %2213, 12
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 3
  store i64 %2216, i64* %PC
  %2217 = inttoptr i64 %2214 to i32*
  %2218 = load i32, i32* %2217
  %2219 = zext i32 %2218 to i64
  store i64 %2219, i64* %RDI, align 8, !tbaa !2428
  %2220 = load i64, i64* %PC
  %2221 = sub i64 %2220, 1184
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 5
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 5
  store i64 %2225, i64* %PC
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2227 = load i64, i64* %2226, align 8, !tbaa !2428
  %2228 = add i64 %2227, -8
  %2229 = inttoptr i64 %2228 to i64*
  store i64 %2223, i64* %2229
  store i64 %2228, i64* %2226, align 8, !tbaa !2428
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2221, i64* %2230, align 8, !tbaa !2428
  %2231 = load i64, i64* %PC
  %2232 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2231, %struct.Memory* %MEMORY.0)
  %2233 = load i64, i64* %RBP
  %2234 = sub i64 %2233, 8
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 4
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2234 to i64*
  %2238 = load i64, i64* %2237
  store i64 %2238, i64* %RAX, align 8, !tbaa !2428
  %2239 = load i64, i64* %RAX
  %2240 = load i64, i64* %PC
  %2241 = add i64 %2240, 3
  store i64 %2241, i64* %PC
  store i64 %2239, i64* %RCX, align 8, !tbaa !2428
  %2242 = load i64, i64* %RCX
  %2243 = load i64, i64* %PC
  %2244 = add i64 %2243, 4
  store i64 %2244, i64* %PC
  %2245 = add i64 4, %2242
  store i64 %2245, i64* %RCX, align 8, !tbaa !2428
  %2246 = icmp ult i64 %2245, %2242
  %2247 = icmp ult i64 %2245, 4
  %2248 = or i1 %2246, %2247
  %2249 = zext i1 %2248 to i8
  %2250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2249, i8* %2250, align 1, !tbaa !2432
  %2251 = trunc i64 %2245 to i32
  %2252 = and i32 %2251, 255
  %2253 = call i32 @llvm.ctpop.i32(i32 %2252) #16
  %2254 = trunc i32 %2253 to i8
  %2255 = and i8 %2254, 1
  %2256 = xor i8 %2255, 1
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2256, i8* %2257, align 1, !tbaa !2446
  %2258 = xor i64 4, %2242
  %2259 = xor i64 %2258, %2245
  %2260 = lshr i64 %2259, 4
  %2261 = trunc i64 %2260 to i8
  %2262 = and i8 %2261, 1
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2262, i8* %2263, align 1, !tbaa !2447
  %2264 = icmp eq i64 %2245, 0
  %2265 = zext i1 %2264 to i8
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2265, i8* %2266, align 1, !tbaa !2448
  %2267 = lshr i64 %2245, 63
  %2268 = trunc i64 %2267 to i8
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2268, i8* %2269, align 1, !tbaa !2449
  %2270 = lshr i64 %2242, 63
  %2271 = xor i64 %2267, %2270
  %2272 = add nuw nsw i64 %2271, %2267
  %2273 = icmp eq i64 %2272, 2
  %2274 = zext i1 %2273 to i8
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2274, i8* %2275, align 1, !tbaa !2450
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 8
  %2278 = load i64, i64* %RCX
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2277 to i64*
  store i64 %2278, i64* %2281
  %2282 = load i64, i64* %RAX
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 3
  store i64 %2284, i64* %PC
  %2285 = inttoptr i64 %2282 to i32*
  %2286 = load i32, i32* %2285
  %2287 = sext i32 %2286 to i64
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i64, i64* %RAX
  %2289 = mul i64 %2288, 8
  %2290 = add i64 %2289, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 8
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = load i64, i64* %RBP
  %2296 = sub i64 %2295, 40
  %2297 = load i64, i64* %RAX
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2296 to i64*
  store i64 %2297, i64* %2300
  %2301 = load i64, i64* %PC
  %2302 = sub i64 %2301, 1101
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 5
  store i64 %2304, i64* %PC
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2302, i64* %2305, align 8, !tbaa !2428
  br label %block_400586

; <label>:2306:                                   ; preds = %block_400586
  %2307 = load i64, i64* %PC
  %2308 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2307, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2308
}

; Function Attrs: noinline
define %struct.Memory* @sub_400420__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400420:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_400cf0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_400c80___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_602150___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400881(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400881

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  br label %block_400881

block_400974:                                     ; preds = %block_400586
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 12
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 7
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %28 to i32*
  store i32 21, i32* %31
  %32 = load i64, i64* %RBP
  %33 = sub i64 %32, 12
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %33 to i32*
  %37 = load i32, i32* %36
  %38 = zext i32 %37 to i64
  store i64 %38, i64* %RDI, align 8, !tbaa !2428
  %39 = load i64, i64* %PC
  %40 = sub i64 %39, 1134
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 5
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %40, i64* %49, align 8, !tbaa !2428
  %50 = load i64, i64* %PC
  %51 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %50, %struct.Memory* %MEMORY.0)
  %52 = load i64, i64* %RBP
  %53 = sub i64 %52, 8
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = load i64, i64* %RAX
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  store i64 %58, i64* %RCX, align 8, !tbaa !2428
  %61 = load i64, i64* %RCX
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = add i64 4, %61
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = icmp ult i64 %64, %61
  %66 = icmp ult i64 %64, 4
  %67 = or i1 %65, %66
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %68, i8* %69, align 1, !tbaa !2432
  %70 = trunc i64 %64 to i32
  %71 = and i32 %70, 255
  %72 = call i32 @llvm.ctpop.i32(i32 %71) #16
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %75, i8* %76, align 1, !tbaa !2446
  %77 = xor i64 4, %61
  %78 = xor i64 %77, %64
  %79 = lshr i64 %78, 4
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %81, i8* %82, align 1, !tbaa !2447
  %83 = icmp eq i64 %64, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = lshr i64 %64, 63
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i64 %61, 63
  %90 = xor i64 %86, %89
  %91 = add nuw nsw i64 %90, %86
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %93, i8* %94, align 1, !tbaa !2450
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RAX
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i32*
  %105 = load i32, i32* %104
  %106 = sext i32 %105 to i64
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = load i64, i64* %RAX
  %108 = mul i64 %107, 8
  %109 = add i64 %108, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 8
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 40
  %116 = load i64, i64* %RAX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %PC
  %121 = sub i64 %120, 1051
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 5
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 12
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 7
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  store i32 26, i32* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 12
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 3
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i32*
  %135 = load i32, i32* %134
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = sub i64 %137, 1384
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %140, i64* %146
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %138, i64* %147, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %148, %struct.Memory* %MEMORY.0)
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 8
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %159 = load i64, i64* %RCX
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = add i64 4, %159
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %163 = icmp ult i64 %162, %159
  %164 = icmp ult i64 %162, 4
  %165 = or i1 %163, %164
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %166, i8* %167, align 1, !tbaa !2432
  %168 = trunc i64 %162 to i32
  %169 = and i32 %168, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = xor i64 4, %159
  %176 = xor i64 %175, %162
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = icmp eq i64 %162, 0
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %182, i8* %183, align 1, !tbaa !2448
  %184 = lshr i64 %162, 63
  %185 = trunc i64 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %185, i8* %186, align 1, !tbaa !2449
  %187 = lshr i64 %159, 63
  %188 = xor i64 %184, %187
  %189 = add nuw nsw i64 %188, %184
  %190 = icmp eq i64 %189, 2
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 8
  %195 = load i64, i64* %RCX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  %203 = load i32, i32* %202
  %204 = sext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RAX
  %206 = mul i64 %205, 8
  %207 = add i64 %206, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 8
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 40
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 1301
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %222, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 12
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 7
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i32*
  store i32 8, i32* %227
  %228 = load i64, i64* %RBP
  %229 = sub i64 %228, 12
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 3
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %229 to i32*
  %233 = load i32, i32* %232
  %234 = zext i32 %233 to i64
  store i64 %234, i64* %RDI, align 8, !tbaa !2428
  %235 = load i64, i64* %PC
  %236 = sub i64 %235, 484
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  store i64 %240, i64* %PC
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %242 = load i64, i64* %241, align 8, !tbaa !2428
  %243 = add i64 %242, -8
  %244 = inttoptr i64 %243 to i64*
  store i64 %238, i64* %244
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %236, i64* %245, align 8, !tbaa !2428
  %246 = load i64, i64* %PC
  %247 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %246, %struct.Memory* %MEMORY.0)
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %257 = load i64, i64* %RCX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 4
  store i64 %259, i64* %PC
  %260 = add i64 4, %257
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = icmp ult i64 %260, %257
  %262 = icmp ult i64 %260, 4
  %263 = or i1 %261, %262
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %264, i8* %265, align 1, !tbaa !2432
  %266 = trunc i64 %260 to i32
  %267 = and i32 %266, 255
  %268 = call i32 @llvm.ctpop.i32(i32 %267) #16
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %271, i8* %272, align 1, !tbaa !2446
  %273 = xor i64 4, %257
  %274 = xor i64 %273, %260
  %275 = lshr i64 %274, 4
  %276 = trunc i64 %275 to i8
  %277 = and i8 %276, 1
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %277, i8* %278, align 1, !tbaa !2447
  %279 = icmp eq i64 %260, 0
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %280, i8* %281, align 1, !tbaa !2448
  %282 = lshr i64 %260, 63
  %283 = trunc i64 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = lshr i64 %257, 63
  %286 = xor i64 %282, %285
  %287 = add nuw nsw i64 %286, %282
  %288 = icmp eq i64 %287, 2
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %289, i8* %290, align 1, !tbaa !2450
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 8
  %293 = load i64, i64* %RCX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 3
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300
  %302 = sext i32 %301 to i64
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RAX
  %304 = mul i64 %303, 8
  %305 = add i64 %304, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 8
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 40
  %312 = load i64, i64* %RAX
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %311 to i64*
  store i64 %312, i64* %315
  %316 = load i64, i64* %PC
  %317 = sub i64 %316, 401
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %317, i64* %320, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 12
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 7
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  store i32 31, i32* %325
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 12
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = sub i64 %333, 1634
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %340 = load i64, i64* %339, align 8, !tbaa !2428
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %336, i64* %342
  store i64 %341, i64* %339, align 8, !tbaa !2428
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %334, i64* %343, align 8, !tbaa !2428
  %344 = load i64, i64* %PC
  %345 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %344, %struct.Memory* %MEMORY.0)
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %355 = load i64, i64* %RCX
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = add i64 4, %355
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = icmp ult i64 %358, %355
  %360 = icmp ult i64 %358, 4
  %361 = or i1 %359, %360
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %362, i8* %363, align 1, !tbaa !2432
  %364 = trunc i64 %358 to i32
  %365 = and i32 %364, 255
  %366 = call i32 @llvm.ctpop.i32(i32 %365) #16
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %369, i8* %370, align 1, !tbaa !2446
  %371 = xor i64 4, %355
  %372 = xor i64 %371, %358
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %375, i8* %376, align 1, !tbaa !2447
  %377 = icmp eq i64 %358, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2448
  %380 = lshr i64 %358, 63
  %381 = trunc i64 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %381, i8* %382, align 1, !tbaa !2449
  %383 = lshr i64 %355, 63
  %384 = xor i64 %380, %383
  %385 = add nuw nsw i64 %384, %380
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %387, i8* %388, align 1, !tbaa !2450
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 8
  %391 = load i64, i64* %RCX
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %390 to i64*
  store i64 %391, i64* %394
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sext i32 %399 to i64
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = load i64, i64* %RAX
  %402 = mul i64 %401, 8
  %403 = add i64 %402, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 8
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 40
  %410 = load i64, i64* %RAX
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = inttoptr i64 %409 to i64*
  store i64 %410, i64* %413
  %414 = load i64, i64* %PC
  %415 = sub i64 %414, 1551
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %415, i64* %418, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 12
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 7
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i32*
  store i32 13, i32* %423
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 12
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i32*
  %429 = load i32, i32* %428
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %RDI, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  %432 = sub i64 %431, 734
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %438 = load i64, i64* %437, align 8, !tbaa !2428
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %434, i64* %440
  store i64 %439, i64* %437, align 8, !tbaa !2428
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %432, i64* %441, align 8, !tbaa !2428
  %442 = load i64, i64* %PC
  %443 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %442, %struct.Memory* %MEMORY.0)
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 8
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = load i64, i64* %RAX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %453 = load i64, i64* %RCX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = add i64 4, %453
  store i64 %456, i64* %RCX, align 8, !tbaa !2428
  %457 = icmp ult i64 %456, %453
  %458 = icmp ult i64 %456, 4
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %460, i8* %461, align 1, !tbaa !2432
  %462 = trunc i64 %456 to i32
  %463 = and i32 %462, 255
  %464 = call i32 @llvm.ctpop.i32(i32 %463) #16
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  %467 = xor i8 %466, 1
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %467, i8* %468, align 1, !tbaa !2446
  %469 = xor i64 4, %453
  %470 = xor i64 %469, %456
  %471 = lshr i64 %470, 4
  %472 = trunc i64 %471 to i8
  %473 = and i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %473, i8* %474, align 1, !tbaa !2447
  %475 = icmp eq i64 %456, 0
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %476, i8* %477, align 1, !tbaa !2448
  %478 = lshr i64 %456, 63
  %479 = trunc i64 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %479, i8* %480, align 1, !tbaa !2449
  %481 = lshr i64 %453, 63
  %482 = xor i64 %478, %481
  %483 = add nuw nsw i64 %482, %478
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2450
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 8
  %489 = load i64, i64* %RCX
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %488 to i64*
  store i64 %489, i64* %492
  %493 = load i64, i64* %RAX
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 3
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to i32*
  %497 = load i32, i32* %496
  %498 = sext i32 %497 to i64
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = load i64, i64* %RAX
  %500 = mul i64 %499, 8
  %501 = add i64 %500, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 8
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 40
  %508 = load i64, i64* %RAX
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %507 to i64*
  store i64 %508, i64* %511
  %512 = load i64, i64* %PC
  %513 = sub i64 %512, 651
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 5
  store i64 %515, i64* %PC
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %513, i64* %516, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 12
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 7
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  store i32 23, i32* %521
  %522 = load i64, i64* %RBP
  %523 = sub i64 %522, 12
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 3
  store i64 %525, i64* %PC
  %526 = inttoptr i64 %523 to i32*
  %527 = load i32, i32* %526
  %528 = zext i32 %527 to i64
  store i64 %528, i64* %RDI, align 8, !tbaa !2428
  %529 = load i64, i64* %PC
  %530 = sub i64 %529, 1234
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 5
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %536 = load i64, i64* %535, align 8, !tbaa !2428
  %537 = add i64 %536, -8
  %538 = inttoptr i64 %537 to i64*
  store i64 %532, i64* %538
  store i64 %537, i64* %535, align 8, !tbaa !2428
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %530, i64* %539, align 8, !tbaa !2428
  %540 = load i64, i64* %PC
  %541 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %540, %struct.Memory* %MEMORY.0)
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 8
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = load i64, i64* %RAX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 3
  store i64 %550, i64* %PC
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %551 = load i64, i64* %RCX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC
  %554 = add i64 4, %551
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = icmp ult i64 %554, %551
  %556 = icmp ult i64 %554, 4
  %557 = or i1 %555, %556
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %558, i8* %559, align 1, !tbaa !2432
  %560 = trunc i64 %554 to i32
  %561 = and i32 %560, 255
  %562 = call i32 @llvm.ctpop.i32(i32 %561) #16
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  %565 = xor i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %565, i8* %566, align 1, !tbaa !2446
  %567 = xor i64 4, %551
  %568 = xor i64 %567, %554
  %569 = lshr i64 %568, 4
  %570 = trunc i64 %569 to i8
  %571 = and i8 %570, 1
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %571, i8* %572, align 1, !tbaa !2447
  %573 = icmp eq i64 %554, 0
  %574 = zext i1 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %574, i8* %575, align 1, !tbaa !2448
  %576 = lshr i64 %554, 63
  %577 = trunc i64 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %577, i8* %578, align 1, !tbaa !2449
  %579 = lshr i64 %551, 63
  %580 = xor i64 %576, %579
  %581 = add nuw nsw i64 %580, %576
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %583, i8* %584, align 1, !tbaa !2450
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 8
  %587 = load i64, i64* %RCX
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %586 to i64*
  store i64 %587, i64* %590
  %591 = load i64, i64* %RAX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = load i64, i64* %RAX
  %598 = mul i64 %597, 8
  %599 = add i64 %598, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 8
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 40
  %606 = load i64, i64* %RAX
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 4
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %605 to i64*
  store i64 %606, i64* %609
  %610 = load i64, i64* %PC
  %611 = sub i64 %610, 1151
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 5
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %611, i64* %614, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 12
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  store i32 28, i32* %619
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 12
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 3
  store i64 %623, i64* %PC
  %624 = inttoptr i64 %621 to i32*
  %625 = load i32, i32* %624
  %626 = zext i32 %625 to i64
  store i64 %626, i64* %RDI, align 8, !tbaa !2428
  %627 = load i64, i64* %PC
  %628 = sub i64 %627, 1484
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 5
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  store i64 %632, i64* %PC
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %634 = load i64, i64* %633, align 8, !tbaa !2428
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %630, i64* %636
  store i64 %635, i64* %633, align 8, !tbaa !2428
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %628, i64* %637, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %638, %struct.Memory* %MEMORY.0)
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 8
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 4
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i64*
  %645 = load i64, i64* %644
  store i64 %645, i64* %RAX, align 8, !tbaa !2428
  %646 = load i64, i64* %RAX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 3
  store i64 %648, i64* %PC
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %649 = load i64, i64* %RCX
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = add i64 4, %649
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = icmp ult i64 %652, %649
  %654 = icmp ult i64 %652, 4
  %655 = or i1 %653, %654
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = trunc i64 %652 to i32
  %659 = and i32 %658, 255
  %660 = call i32 @llvm.ctpop.i32(i32 %659) #16
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %663, i8* %664, align 1, !tbaa !2446
  %665 = xor i64 4, %649
  %666 = xor i64 %665, %652
  %667 = lshr i64 %666, 4
  %668 = trunc i64 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i64 %652, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i64 %652, 63
  %675 = trunc i64 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i64 %649, 63
  %678 = xor i64 %674, %677
  %679 = add nuw nsw i64 %678, %674
  %680 = icmp eq i64 %679, 2
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %681, i8* %682, align 1, !tbaa !2450
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 8
  %685 = load i64, i64* %RCX
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %684 to i64*
  store i64 %685, i64* %688
  %689 = load i64, i64* %RAX
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 3
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692
  %694 = sext i32 %693 to i64
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = load i64, i64* %RAX
  %696 = mul i64 %695, 8
  %697 = add i64 %696, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 8
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 40
  %704 = load i64, i64* %RAX
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 4
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %703 to i64*
  store i64 %704, i64* %707
  %708 = load i64, i64* %PC
  %709 = sub i64 %708, 1401
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 5
  store i64 %711, i64* %PC
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %709, i64* %712, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 12
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i32*
  store i32 10, i32* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 12
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %725 = load i64, i64* %PC
  %726 = sub i64 %725, 584
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %732 = load i64, i64* %731, align 8, !tbaa !2428
  %733 = add i64 %732, -8
  %734 = inttoptr i64 %733 to i64*
  store i64 %728, i64* %734
  store i64 %733, i64* %731, align 8, !tbaa !2428
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %726, i64* %735, align 8, !tbaa !2428
  %736 = load i64, i64* %PC
  %737 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %736, %struct.Memory* %MEMORY.0)
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 8
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RCX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = add i64 4, %747
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ult i64 %750, %747
  %752 = icmp ult i64 %750, 4
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = trunc i64 %750 to i32
  %757 = and i32 %756, 255
  %758 = call i32 @llvm.ctpop.i32(i32 %757) #16
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %761, i8* %762, align 1, !tbaa !2446
  %763 = xor i64 4, %747
  %764 = xor i64 %763, %750
  %765 = lshr i64 %764, 4
  %766 = trunc i64 %765 to i8
  %767 = and i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %767, i8* %768, align 1, !tbaa !2447
  %769 = icmp eq i64 %750, 0
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %770, i8* %771, align 1, !tbaa !2448
  %772 = lshr i64 %750, 63
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %773, i8* %774, align 1, !tbaa !2449
  %775 = lshr i64 %747, 63
  %776 = xor i64 %772, %775
  %777 = add nuw nsw i64 %776, %772
  %778 = icmp eq i64 %777, 2
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %779, i8* %780, align 1, !tbaa !2450
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 8
  %783 = load i64, i64* %RCX
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  %791 = load i32, i32* %790
  %792 = sext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = load i64, i64* %RAX
  %794 = mul i64 %793, 8
  %795 = add i64 %794, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 8
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 40
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %801 to i64*
  store i64 %802, i64* %805
  %806 = load i64, i64* %PC
  %807 = sub i64 %806, 501
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 5
  store i64 %809, i64* %PC
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %807, i64* %810, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 12
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i32*
  store i32 11, i32* %815
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 12
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i32*
  %821 = load i32, i32* %820
  %822 = zext i32 %821 to i64
  store i64 %822, i64* %RDI, align 8, !tbaa !2428
  %823 = load i64, i64* %PC
  %824 = sub i64 %823, 634
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 5
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  store i64 %828, i64* %PC
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %830 = load i64, i64* %829, align 8, !tbaa !2428
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %826, i64* %832
  store i64 %831, i64* %829, align 8, !tbaa !2428
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %824, i64* %833, align 8, !tbaa !2428
  %834 = load i64, i64* %PC
  %835 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %834, %struct.Memory* %MEMORY.0)
  %836 = load i64, i64* %RBP
  %837 = sub i64 %836, 8
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 4
  store i64 %839, i64* %PC
  %840 = inttoptr i64 %837 to i64*
  %841 = load i64, i64* %840
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = load i64, i64* %RAX
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 3
  store i64 %844, i64* %PC
  store i64 %842, i64* %RCX, align 8, !tbaa !2428
  %845 = load i64, i64* %RCX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = add i64 4, %845
  store i64 %848, i64* %RCX, align 8, !tbaa !2428
  %849 = icmp ult i64 %848, %845
  %850 = icmp ult i64 %848, 4
  %851 = or i1 %849, %850
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %852, i8* %853, align 1, !tbaa !2432
  %854 = trunc i64 %848 to i32
  %855 = and i32 %854, 255
  %856 = call i32 @llvm.ctpop.i32(i32 %855) #16
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  %859 = xor i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %859, i8* %860, align 1, !tbaa !2446
  %861 = xor i64 4, %845
  %862 = xor i64 %861, %848
  %863 = lshr i64 %862, 4
  %864 = trunc i64 %863 to i8
  %865 = and i8 %864, 1
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %865, i8* %866, align 1, !tbaa !2447
  %867 = icmp eq i64 %848, 0
  %868 = zext i1 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %868, i8* %869, align 1, !tbaa !2448
  %870 = lshr i64 %848, 63
  %871 = trunc i64 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %871, i8* %872, align 1, !tbaa !2449
  %873 = lshr i64 %845, 63
  %874 = xor i64 %870, %873
  %875 = add nuw nsw i64 %874, %870
  %876 = icmp eq i64 %875, 2
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %877, i8* %878, align 1, !tbaa !2450
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 8
  %881 = load i64, i64* %RCX
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 4
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %880 to i64*
  store i64 %881, i64* %884
  %885 = load i64, i64* %RAX
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 3
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i32*
  %889 = load i32, i32* %888
  %890 = sext i32 %889 to i64
  store i64 %890, i64* %RAX, align 8, !tbaa !2428
  %891 = load i64, i64* %RAX
  %892 = mul i64 %891, 8
  %893 = add i64 %892, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 8
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 40
  %900 = load i64, i64* %RAX
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 4
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %899 to i64*
  store i64 %900, i64* %903
  %904 = load i64, i64* %PC
  %905 = sub i64 %904, 551
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 5
  store i64 %907, i64* %PC
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %905, i64* %908, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 12
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 7
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i32*
  store i32 15, i32* %913
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 12
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 3
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i32*
  %919 = load i32, i32* %918
  %920 = zext i32 %919 to i64
  store i64 %920, i64* %RDI, align 8, !tbaa !2428
  %921 = load i64, i64* %PC
  %922 = sub i64 %921, 834
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 5
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  store i64 %926, i64* %PC
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %928 = load i64, i64* %927, align 8, !tbaa !2428
  %929 = add i64 %928, -8
  %930 = inttoptr i64 %929 to i64*
  store i64 %924, i64* %930
  store i64 %929, i64* %927, align 8, !tbaa !2428
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %922, i64* %931, align 8, !tbaa !2428
  %932 = load i64, i64* %PC
  %933 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %932, %struct.Memory* %MEMORY.0)
  %934 = load i64, i64* %RBP
  %935 = sub i64 %934, 8
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC
  %938 = inttoptr i64 %935 to i64*
  %939 = load i64, i64* %938
  store i64 %939, i64* %RAX, align 8, !tbaa !2428
  %940 = load i64, i64* %RAX
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 3
  store i64 %942, i64* %PC
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %943 = load i64, i64* %RCX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = add i64 4, %943
  store i64 %946, i64* %RCX, align 8, !tbaa !2428
  %947 = icmp ult i64 %946, %943
  %948 = icmp ult i64 %946, 4
  %949 = or i1 %947, %948
  %950 = zext i1 %949 to i8
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %950, i8* %951, align 1, !tbaa !2432
  %952 = trunc i64 %946 to i32
  %953 = and i32 %952, 255
  %954 = call i32 @llvm.ctpop.i32(i32 %953) #16
  %955 = trunc i32 %954 to i8
  %956 = and i8 %955, 1
  %957 = xor i8 %956, 1
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %957, i8* %958, align 1, !tbaa !2446
  %959 = xor i64 4, %943
  %960 = xor i64 %959, %946
  %961 = lshr i64 %960, 4
  %962 = trunc i64 %961 to i8
  %963 = and i8 %962, 1
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %963, i8* %964, align 1, !tbaa !2447
  %965 = icmp eq i64 %946, 0
  %966 = zext i1 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %966, i8* %967, align 1, !tbaa !2448
  %968 = lshr i64 %946, 63
  %969 = trunc i64 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %969, i8* %970, align 1, !tbaa !2449
  %971 = lshr i64 %943, 63
  %972 = xor i64 %968, %971
  %973 = add nuw nsw i64 %972, %968
  %974 = icmp eq i64 %973, 2
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %975, i8* %976, align 1, !tbaa !2450
  %977 = load i64, i64* %RBP
  %978 = sub i64 %977, 8
  %979 = load i64, i64* %RCX
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 4
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %978 to i64*
  store i64 %979, i64* %982
  %983 = load i64, i64* %RAX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  %987 = load i32, i32* %986
  %988 = sext i32 %987 to i64
  store i64 %988, i64* %RAX, align 8, !tbaa !2428
  %989 = load i64, i64* %RAX
  %990 = mul i64 %989, 8
  %991 = add i64 %990, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 8
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i64*
  %995 = load i64, i64* %994
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RBP
  %997 = sub i64 %996, 40
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %997 to i64*
  store i64 %998, i64* %1001
  %1002 = load i64, i64* %PC
  %1003 = sub i64 %1002, 751
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 5
  store i64 %1005, i64* %PC
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1003, i64* %1006, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 12
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 7
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1008 to i32*
  store i32 18, i32* %1011
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 12
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 3
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i32*
  %1017 = load i32, i32* %1016
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RDI, align 8, !tbaa !2428
  %1019 = load i64, i64* %PC
  %1020 = sub i64 %1019, 984
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 5
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  store i64 %1024, i64* %PC
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1026 = load i64, i64* %1025, align 8, !tbaa !2428
  %1027 = add i64 %1026, -8
  %1028 = inttoptr i64 %1027 to i64*
  store i64 %1022, i64* %1028
  store i64 %1027, i64* %1025, align 8, !tbaa !2428
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1020, i64* %1029, align 8, !tbaa !2428
  %1030 = load i64, i64* %PC
  %1031 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1030, %struct.Memory* %MEMORY.0)
  %1032 = load i64, i64* %RBP
  %1033 = sub i64 %1032, 8
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 4
  store i64 %1035, i64* %PC
  %1036 = inttoptr i64 %1033 to i64*
  %1037 = load i64, i64* %1036
  store i64 %1037, i64* %RAX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RAX
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 3
  store i64 %1040, i64* %PC
  store i64 %1038, i64* %RCX, align 8, !tbaa !2428
  %1041 = load i64, i64* %RCX
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 4
  store i64 %1043, i64* %PC
  %1044 = add i64 4, %1041
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = icmp ult i64 %1044, %1041
  %1046 = icmp ult i64 %1044, 4
  %1047 = or i1 %1045, %1046
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1048, i8* %1049, align 1, !tbaa !2432
  %1050 = trunc i64 %1044 to i32
  %1051 = and i32 %1050, 255
  %1052 = call i32 @llvm.ctpop.i32(i32 %1051) #16
  %1053 = trunc i32 %1052 to i8
  %1054 = and i8 %1053, 1
  %1055 = xor i8 %1054, 1
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1055, i8* %1056, align 1, !tbaa !2446
  %1057 = xor i64 4, %1041
  %1058 = xor i64 %1057, %1044
  %1059 = lshr i64 %1058, 4
  %1060 = trunc i64 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1061, i8* %1062, align 1, !tbaa !2447
  %1063 = icmp eq i64 %1044, 0
  %1064 = zext i1 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1064, i8* %1065, align 1, !tbaa !2448
  %1066 = lshr i64 %1044, 63
  %1067 = trunc i64 %1066 to i8
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1067, i8* %1068, align 1, !tbaa !2449
  %1069 = lshr i64 %1041, 63
  %1070 = xor i64 %1066, %1069
  %1071 = add nuw nsw i64 %1070, %1066
  %1072 = icmp eq i64 %1071, 2
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1073, i8* %1074, align 1, !tbaa !2450
  %1075 = load i64, i64* %RBP
  %1076 = sub i64 %1075, 8
  %1077 = load i64, i64* %RCX
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1076 to i64*
  store i64 %1077, i64* %1080
  %1081 = load i64, i64* %RAX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i32*
  %1085 = load i32, i32* %1084
  %1086 = sext i32 %1085 to i64
  store i64 %1086, i64* %RAX, align 8, !tbaa !2428
  %1087 = load i64, i64* %RAX
  %1088 = mul i64 %1087, 8
  %1089 = add i64 %1088, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 8
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 40
  %1096 = load i64, i64* %RAX
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 4
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1095 to i64*
  store i64 %1096, i64* %1099
  %1100 = load i64, i64* %PC
  %1101 = sub i64 %1100, 901
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 5
  store i64 %1103, i64* %PC
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1101, i64* %1104, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 12
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 7
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i32*
  store i32 20, i32* %1109
  %1110 = load i64, i64* %RBP
  %1111 = sub i64 %1110, 12
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 3
  store i64 %1113, i64* %PC
  %1114 = inttoptr i64 %1111 to i32*
  %1115 = load i32, i32* %1114
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %RDI, align 8, !tbaa !2428
  %1117 = load i64, i64* %PC
  %1118 = sub i64 %1117, 1084
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 5
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  store i64 %1122, i64* %PC
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1124 = load i64, i64* %1123, align 8, !tbaa !2428
  %1125 = add i64 %1124, -8
  %1126 = inttoptr i64 %1125 to i64*
  store i64 %1120, i64* %1126
  store i64 %1125, i64* %1123, align 8, !tbaa !2428
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1118, i64* %1127, align 8, !tbaa !2428
  %1128 = load i64, i64* %PC
  %1129 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1128, %struct.Memory* %MEMORY.0)
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 8
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 4
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i64*
  %1135 = load i64, i64* %1134
  store i64 %1135, i64* %RAX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RAX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 3
  store i64 %1138, i64* %PC
  store i64 %1136, i64* %RCX, align 8, !tbaa !2428
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 4
  store i64 %1141, i64* %PC
  %1142 = add i64 4, %1139
  store i64 %1142, i64* %RCX, align 8, !tbaa !2428
  %1143 = icmp ult i64 %1142, %1139
  %1144 = icmp ult i64 %1142, 4
  %1145 = or i1 %1143, %1144
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1146, i8* %1147, align 1, !tbaa !2432
  %1148 = trunc i64 %1142 to i32
  %1149 = and i32 %1148, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #16
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 4, %1139
  %1156 = xor i64 %1155, %1142
  %1157 = lshr i64 %1156, 4
  %1158 = trunc i64 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1159, i8* %1160, align 1, !tbaa !2447
  %1161 = icmp eq i64 %1142, 0
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1162, i8* %1163, align 1, !tbaa !2448
  %1164 = lshr i64 %1142, 63
  %1165 = trunc i64 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1165, i8* %1166, align 1, !tbaa !2449
  %1167 = lshr i64 %1139, 63
  %1168 = xor i64 %1164, %1167
  %1169 = add nuw nsw i64 %1168, %1164
  %1170 = icmp eq i64 %1169, 2
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1171, i8* %1172, align 1, !tbaa !2450
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 8
  %1175 = load i64, i64* %RCX
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 4
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1174 to i64*
  store i64 %1175, i64* %1178
  %1179 = load i64, i64* %RAX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 3
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i32*
  %1183 = load i32, i32* %1182
  %1184 = sext i32 %1183 to i64
  store i64 %1184, i64* %RAX, align 8, !tbaa !2428
  %1185 = load i64, i64* %RAX
  %1186 = mul i64 %1185, 8
  %1187 = add i64 %1186, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 8
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RBP
  %1193 = sub i64 %1192, 40
  %1194 = load i64, i64* %RAX
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1193 to i64*
  store i64 %1194, i64* %1197
  %1198 = load i64, i64* %PC
  %1199 = sub i64 %1198, 1001
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 5
  store i64 %1201, i64* %PC
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1199, i64* %1202, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 12
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 7
  store i64 %1206, i64* %PC
  %1207 = inttoptr i64 %1204 to i32*
  store i32 2, i32* %1207
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 12
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RDI, align 8, !tbaa !2428
  %1215 = load i64, i64* %PC
  %1216 = sub i64 %1215, 184
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 5
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1222 = load i64, i64* %1221, align 8, !tbaa !2428
  %1223 = add i64 %1222, -8
  %1224 = inttoptr i64 %1223 to i64*
  store i64 %1218, i64* %1224
  store i64 %1223, i64* %1221, align 8, !tbaa !2428
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1225, align 8, !tbaa !2428
  %1226 = load i64, i64* %PC
  %1227 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1226, %struct.Memory* %MEMORY.0)
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 8
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i64*
  %1233 = load i64, i64* %1232
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RAX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 3
  store i64 %1236, i64* %PC
  store i64 %1234, i64* %RCX, align 8, !tbaa !2428
  %1237 = load i64, i64* %RCX
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 4
  store i64 %1239, i64* %PC
  %1240 = add i64 4, %1237
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = icmp ult i64 %1240, %1237
  %1242 = icmp ult i64 %1240, 4
  %1243 = or i1 %1241, %1242
  %1244 = zext i1 %1243 to i8
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1244, i8* %1245, align 1, !tbaa !2432
  %1246 = trunc i64 %1240 to i32
  %1247 = and i32 %1246, 255
  %1248 = call i32 @llvm.ctpop.i32(i32 %1247) #16
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1251, i8* %1252, align 1, !tbaa !2446
  %1253 = xor i64 4, %1237
  %1254 = xor i64 %1253, %1240
  %1255 = lshr i64 %1254, 4
  %1256 = trunc i64 %1255 to i8
  %1257 = and i8 %1256, 1
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1257, i8* %1258, align 1, !tbaa !2447
  %1259 = icmp eq i64 %1240, 0
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1260, i8* %1261, align 1, !tbaa !2448
  %1262 = lshr i64 %1240, 63
  %1263 = trunc i64 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1263, i8* %1264, align 1, !tbaa !2449
  %1265 = lshr i64 %1237, 63
  %1266 = xor i64 %1262, %1265
  %1267 = add nuw nsw i64 %1266, %1262
  %1268 = icmp eq i64 %1267, 2
  %1269 = zext i1 %1268 to i8
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1269, i8* %1270, align 1, !tbaa !2450
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 8
  %1273 = load i64, i64* %RCX
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1272 to i64*
  store i64 %1273, i64* %1276
  %1277 = load i64, i64* %RAX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i32*
  %1281 = load i32, i32* %1280
  %1282 = sext i32 %1281 to i64
  store i64 %1282, i64* %RAX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RAX
  %1284 = mul i64 %1283, 8
  %1285 = add i64 %1284, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 8
  store i64 %1287, i64* %PC
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 40
  %1292 = load i64, i64* %RAX
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1291 to i64*
  store i64 %1292, i64* %1295
  %1296 = load i64, i64* %PC
  %1297 = sub i64 %1296, 101
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1297, i64* %1300, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 12
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 7
  store i64 %1304, i64* %PC
  %1305 = inttoptr i64 %1302 to i32*
  store i32 25, i32* %1305
  %1306 = load i64, i64* %RBP
  %1307 = sub i64 %1306, 12
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 3
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310
  %1312 = zext i32 %1311 to i64
  store i64 %1312, i64* %RDI, align 8, !tbaa !2428
  %1313 = load i64, i64* %PC
  %1314 = sub i64 %1313, 1334
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 5
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 5
  store i64 %1318, i64* %PC
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1320 = load i64, i64* %1319, align 8, !tbaa !2428
  %1321 = add i64 %1320, -8
  %1322 = inttoptr i64 %1321 to i64*
  store i64 %1316, i64* %1322
  store i64 %1321, i64* %1319, align 8, !tbaa !2428
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1314, i64* %1323, align 8, !tbaa !2428
  %1324 = load i64, i64* %PC
  %1325 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1324, %struct.Memory* %MEMORY.0)
  %1326 = load i64, i64* %RBP
  %1327 = sub i64 %1326, 8
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 4
  store i64 %1329, i64* %PC
  %1330 = inttoptr i64 %1327 to i64*
  %1331 = load i64, i64* %1330
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = load i64, i64* %RAX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 3
  store i64 %1334, i64* %PC
  store i64 %1332, i64* %RCX, align 8, !tbaa !2428
  %1335 = load i64, i64* %RCX
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 4
  store i64 %1337, i64* %PC
  %1338 = add i64 4, %1335
  store i64 %1338, i64* %RCX, align 8, !tbaa !2428
  %1339 = icmp ult i64 %1338, %1335
  %1340 = icmp ult i64 %1338, 4
  %1341 = or i1 %1339, %1340
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1342, i8* %1343, align 1, !tbaa !2432
  %1344 = trunc i64 %1338 to i32
  %1345 = and i32 %1344, 255
  %1346 = call i32 @llvm.ctpop.i32(i32 %1345) #16
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1349, i8* %1350, align 1, !tbaa !2446
  %1351 = xor i64 4, %1335
  %1352 = xor i64 %1351, %1338
  %1353 = lshr i64 %1352, 4
  %1354 = trunc i64 %1353 to i8
  %1355 = and i8 %1354, 1
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1355, i8* %1356, align 1, !tbaa !2447
  %1357 = icmp eq i64 %1338, 0
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1358, i8* %1359, align 1, !tbaa !2448
  %1360 = lshr i64 %1338, 63
  %1361 = trunc i64 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1361, i8* %1362, align 1, !tbaa !2449
  %1363 = lshr i64 %1335, 63
  %1364 = xor i64 %1360, %1363
  %1365 = add nuw nsw i64 %1364, %1360
  %1366 = icmp eq i64 %1365, 2
  %1367 = zext i1 %1366 to i8
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1367, i8* %1368, align 1, !tbaa !2450
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 8
  %1371 = load i64, i64* %RCX
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 4
  store i64 %1373, i64* %PC
  %1374 = inttoptr i64 %1370 to i64*
  store i64 %1371, i64* %1374
  %1375 = load i64, i64* %RAX
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 3
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1375 to i32*
  %1379 = load i32, i32* %1378
  %1380 = sext i32 %1379 to i64
  store i64 %1380, i64* %RAX, align 8, !tbaa !2428
  %1381 = load i64, i64* %RAX
  %1382 = mul i64 %1381, 8
  %1383 = add i64 %1382, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 8
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1383 to i64*
  %1387 = load i64, i64* %1386
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1388 = load i64, i64* %RBP
  %1389 = sub i64 %1388, 40
  %1390 = load i64, i64* %RAX
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1389 to i64*
  store i64 %1390, i64* %1393
  %1394 = load i64, i64* %PC
  %1395 = sub i64 %1394, 1251
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  store i64 %1397, i64* %PC
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1395, i64* %1398, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 12
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 7
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i32*
  store i32 7, i32* %1403
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 12
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 3
  store i64 %1407, i64* %PC
  %1408 = inttoptr i64 %1405 to i32*
  %1409 = load i32, i32* %1408
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RDI, align 8, !tbaa !2428
  %1411 = load i64, i64* %PC
  %1412 = sub i64 %1411, 434
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 5
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 5
  store i64 %1416, i64* %PC
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1418 = load i64, i64* %1417, align 8, !tbaa !2428
  %1419 = add i64 %1418, -8
  %1420 = inttoptr i64 %1419 to i64*
  store i64 %1414, i64* %1420
  store i64 %1419, i64* %1417, align 8, !tbaa !2428
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1412, i64* %1421, align 8, !tbaa !2428
  %1422 = load i64, i64* %PC
  %1423 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1422, %struct.Memory* %MEMORY.0)
  %1424 = load i64, i64* %RBP
  %1425 = sub i64 %1424, 8
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 4
  store i64 %1427, i64* %PC
  %1428 = inttoptr i64 %1425 to i64*
  %1429 = load i64, i64* %1428
  store i64 %1429, i64* %RAX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RAX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 3
  store i64 %1432, i64* %PC
  store i64 %1430, i64* %RCX, align 8, !tbaa !2428
  %1433 = load i64, i64* %RCX
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 4
  store i64 %1435, i64* %PC
  %1436 = add i64 4, %1433
  store i64 %1436, i64* %RCX, align 8, !tbaa !2428
  %1437 = icmp ult i64 %1436, %1433
  %1438 = icmp ult i64 %1436, 4
  %1439 = or i1 %1437, %1438
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1440, i8* %1441, align 1, !tbaa !2432
  %1442 = trunc i64 %1436 to i32
  %1443 = and i32 %1442, 255
  %1444 = call i32 @llvm.ctpop.i32(i32 %1443) #16
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  %1447 = xor i8 %1446, 1
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1447, i8* %1448, align 1, !tbaa !2446
  %1449 = xor i64 4, %1433
  %1450 = xor i64 %1449, %1436
  %1451 = lshr i64 %1450, 4
  %1452 = trunc i64 %1451 to i8
  %1453 = and i8 %1452, 1
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1453, i8* %1454, align 1, !tbaa !2447
  %1455 = icmp eq i64 %1436, 0
  %1456 = zext i1 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1456, i8* %1457, align 1, !tbaa !2448
  %1458 = lshr i64 %1436, 63
  %1459 = trunc i64 %1458 to i8
  %1460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1459, i8* %1460, align 1, !tbaa !2449
  %1461 = lshr i64 %1433, 63
  %1462 = xor i64 %1458, %1461
  %1463 = add nuw nsw i64 %1462, %1458
  %1464 = icmp eq i64 %1463, 2
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1465, i8* %1466, align 1, !tbaa !2450
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 8
  %1469 = load i64, i64* %RCX
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 4
  store i64 %1471, i64* %PC
  %1472 = inttoptr i64 %1468 to i64*
  store i64 %1469, i64* %1472
  %1473 = load i64, i64* %RAX
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 3
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1473 to i32*
  %1477 = load i32, i32* %1476
  %1478 = sext i32 %1477 to i64
  store i64 %1478, i64* %RAX, align 8, !tbaa !2428
  %1479 = load i64, i64* %RAX
  %1480 = mul i64 %1479, 8
  %1481 = add i64 %1480, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 8
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i64*
  %1485 = load i64, i64* %1484
  store i64 %1485, i64* %RAX, align 8, !tbaa !2428
  %1486 = load i64, i64* %RBP
  %1487 = sub i64 %1486, 40
  %1488 = load i64, i64* %RAX
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 4
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1487 to i64*
  store i64 %1488, i64* %1491
  %1492 = load i64, i64* %PC
  %1493 = sub i64 %1492, 351
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  store i64 %1495, i64* %PC
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1493, i64* %1496, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 12
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 7
  store i64 %1500, i64* %PC
  %1501 = inttoptr i64 %1498 to i32*
  store i32 30, i32* %1501
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 12
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 3
  store i64 %1505, i64* %PC
  %1506 = inttoptr i64 %1503 to i32*
  %1507 = load i32, i32* %1506
  %1508 = zext i32 %1507 to i64
  store i64 %1508, i64* %RDI, align 8, !tbaa !2428
  %1509 = load i64, i64* %PC
  %1510 = sub i64 %1509, 1584
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 5
  store i64 %1514, i64* %PC
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1516 = load i64, i64* %1515, align 8, !tbaa !2428
  %1517 = add i64 %1516, -8
  %1518 = inttoptr i64 %1517 to i64*
  store i64 %1512, i64* %1518
  store i64 %1517, i64* %1515, align 8, !tbaa !2428
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1510, i64* %1519, align 8, !tbaa !2428
  %1520 = load i64, i64* %PC
  %1521 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1520, %struct.Memory* %MEMORY.0)
  %1522 = load i64, i64* %RBP
  %1523 = sub i64 %1522, 8
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 4
  store i64 %1525, i64* %PC
  %1526 = inttoptr i64 %1523 to i64*
  %1527 = load i64, i64* %1526
  store i64 %1527, i64* %RAX, align 8, !tbaa !2428
  %1528 = load i64, i64* %RAX
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 3
  store i64 %1530, i64* %PC
  store i64 %1528, i64* %RCX, align 8, !tbaa !2428
  %1531 = load i64, i64* %RCX
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 4
  store i64 %1533, i64* %PC
  %1534 = add i64 4, %1531
  store i64 %1534, i64* %RCX, align 8, !tbaa !2428
  %1535 = icmp ult i64 %1534, %1531
  %1536 = icmp ult i64 %1534, 4
  %1537 = or i1 %1535, %1536
  %1538 = zext i1 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1538, i8* %1539, align 1, !tbaa !2432
  %1540 = trunc i64 %1534 to i32
  %1541 = and i32 %1540, 255
  %1542 = call i32 @llvm.ctpop.i32(i32 %1541) #16
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1545, i8* %1546, align 1, !tbaa !2446
  %1547 = xor i64 4, %1531
  %1548 = xor i64 %1547, %1534
  %1549 = lshr i64 %1548, 4
  %1550 = trunc i64 %1549 to i8
  %1551 = and i8 %1550, 1
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1551, i8* %1552, align 1, !tbaa !2447
  %1553 = icmp eq i64 %1534, 0
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1554, i8* %1555, align 1, !tbaa !2448
  %1556 = lshr i64 %1534, 63
  %1557 = trunc i64 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1557, i8* %1558, align 1, !tbaa !2449
  %1559 = lshr i64 %1531, 63
  %1560 = xor i64 %1556, %1559
  %1561 = add nuw nsw i64 %1560, %1556
  %1562 = icmp eq i64 %1561, 2
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1563, i8* %1564, align 1, !tbaa !2450
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 8
  %1567 = load i64, i64* %RCX
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 4
  store i64 %1569, i64* %PC
  %1570 = inttoptr i64 %1566 to i64*
  store i64 %1567, i64* %1570
  %1571 = load i64, i64* %RAX
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 3
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1571 to i32*
  %1575 = load i32, i32* %1574
  %1576 = sext i32 %1575 to i64
  store i64 %1576, i64* %RAX, align 8, !tbaa !2428
  %1577 = load i64, i64* %RAX
  %1578 = mul i64 %1577, 8
  %1579 = add i64 %1578, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 8
  store i64 %1581, i64* %PC
  %1582 = inttoptr i64 %1579 to i64*
  %1583 = load i64, i64* %1582
  store i64 %1583, i64* %RAX, align 8, !tbaa !2428
  %1584 = load i64, i64* %RBP
  %1585 = sub i64 %1584, 40
  %1586 = load i64, i64* %RAX
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 4
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1585 to i64*
  store i64 %1586, i64* %1589
  %1590 = load i64, i64* %PC
  %1591 = sub i64 %1590, 1501
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 5
  store i64 %1593, i64* %PC
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1591, i64* %1594, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 12
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 7
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i32*
  store i32 12, i32* %1599
  %1600 = load i64, i64* %RBP
  %1601 = sub i64 %1600, 12
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 3
  store i64 %1603, i64* %PC
  %1604 = inttoptr i64 %1601 to i32*
  %1605 = load i32, i32* %1604
  %1606 = zext i32 %1605 to i64
  store i64 %1606, i64* %RDI, align 8, !tbaa !2428
  %1607 = load i64, i64* %PC
  %1608 = sub i64 %1607, 684
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 5
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 5
  store i64 %1612, i64* %PC
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1614 = load i64, i64* %1613, align 8, !tbaa !2428
  %1615 = add i64 %1614, -8
  %1616 = inttoptr i64 %1615 to i64*
  store i64 %1610, i64* %1616
  store i64 %1615, i64* %1613, align 8, !tbaa !2428
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1608, i64* %1617, align 8, !tbaa !2428
  %1618 = load i64, i64* %PC
  %1619 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1618, %struct.Memory* %MEMORY.0)
  %1620 = load i64, i64* %RBP
  %1621 = sub i64 %1620, 8
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 4
  store i64 %1623, i64* %PC
  %1624 = inttoptr i64 %1621 to i64*
  %1625 = load i64, i64* %1624
  store i64 %1625, i64* %RAX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RAX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 3
  store i64 %1628, i64* %PC
  store i64 %1626, i64* %RCX, align 8, !tbaa !2428
  %1629 = load i64, i64* %RCX
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 4
  store i64 %1631, i64* %PC
  %1632 = add i64 4, %1629
  store i64 %1632, i64* %RCX, align 8, !tbaa !2428
  %1633 = icmp ult i64 %1632, %1629
  %1634 = icmp ult i64 %1632, 4
  %1635 = or i1 %1633, %1634
  %1636 = zext i1 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1636, i8* %1637, align 1, !tbaa !2432
  %1638 = trunc i64 %1632 to i32
  %1639 = and i32 %1638, 255
  %1640 = call i32 @llvm.ctpop.i32(i32 %1639) #16
  %1641 = trunc i32 %1640 to i8
  %1642 = and i8 %1641, 1
  %1643 = xor i8 %1642, 1
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1643, i8* %1644, align 1, !tbaa !2446
  %1645 = xor i64 4, %1629
  %1646 = xor i64 %1645, %1632
  %1647 = lshr i64 %1646, 4
  %1648 = trunc i64 %1647 to i8
  %1649 = and i8 %1648, 1
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1649, i8* %1650, align 1, !tbaa !2447
  %1651 = icmp eq i64 %1632, 0
  %1652 = zext i1 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1652, i8* %1653, align 1, !tbaa !2448
  %1654 = lshr i64 %1632, 63
  %1655 = trunc i64 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1655, i8* %1656, align 1, !tbaa !2449
  %1657 = lshr i64 %1629, 63
  %1658 = xor i64 %1654, %1657
  %1659 = add nuw nsw i64 %1658, %1654
  %1660 = icmp eq i64 %1659, 2
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1661, i8* %1662, align 1, !tbaa !2450
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 8
  %1665 = load i64, i64* %RCX
  %1666 = load i64, i64* %PC
  %1667 = add i64 %1666, 4
  store i64 %1667, i64* %PC
  %1668 = inttoptr i64 %1664 to i64*
  store i64 %1665, i64* %1668
  %1669 = load i64, i64* %RAX
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 3
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1669 to i32*
  %1673 = load i32, i32* %1672
  %1674 = sext i32 %1673 to i64
  store i64 %1674, i64* %RAX, align 8, !tbaa !2428
  %1675 = load i64, i64* %RAX
  %1676 = mul i64 %1675, 8
  %1677 = add i64 %1676, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 8
  store i64 %1679, i64* %PC
  %1680 = inttoptr i64 %1677 to i64*
  %1681 = load i64, i64* %1680
  store i64 %1681, i64* %RAX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RBP
  %1683 = sub i64 %1682, 40
  %1684 = load i64, i64* %RAX
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1683 to i64*
  store i64 %1684, i64* %1687
  %1688 = load i64, i64* %PC
  %1689 = sub i64 %1688, 601
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 5
  store i64 %1691, i64* %PC
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1689, i64* %1692, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 12
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 7
  store i64 %1696, i64* %PC
  %1697 = inttoptr i64 %1694 to i32*
  store i32 17, i32* %1697
  %1698 = load i64, i64* %RBP
  %1699 = sub i64 %1698, 12
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 3
  store i64 %1701, i64* %PC
  %1702 = inttoptr i64 %1699 to i32*
  %1703 = load i32, i32* %1702
  %1704 = zext i32 %1703 to i64
  store i64 %1704, i64* %RDI, align 8, !tbaa !2428
  %1705 = load i64, i64* %PC
  %1706 = sub i64 %1705, 934
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 5
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 5
  store i64 %1710, i64* %PC
  %1711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1712 = load i64, i64* %1711, align 8, !tbaa !2428
  %1713 = add i64 %1712, -8
  %1714 = inttoptr i64 %1713 to i64*
  store i64 %1708, i64* %1714
  store i64 %1713, i64* %1711, align 8, !tbaa !2428
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1706, i64* %1715, align 8, !tbaa !2428
  %1716 = load i64, i64* %PC
  %1717 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1716, %struct.Memory* %MEMORY.0)
  %1718 = load i64, i64* %RBP
  %1719 = sub i64 %1718, 8
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 4
  store i64 %1721, i64* %PC
  %1722 = inttoptr i64 %1719 to i64*
  %1723 = load i64, i64* %1722
  store i64 %1723, i64* %RAX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RAX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 3
  store i64 %1726, i64* %PC
  store i64 %1724, i64* %RCX, align 8, !tbaa !2428
  %1727 = load i64, i64* %RCX
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 4
  store i64 %1729, i64* %PC
  %1730 = add i64 4, %1727
  store i64 %1730, i64* %RCX, align 8, !tbaa !2428
  %1731 = icmp ult i64 %1730, %1727
  %1732 = icmp ult i64 %1730, 4
  %1733 = or i1 %1731, %1732
  %1734 = zext i1 %1733 to i8
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1734, i8* %1735, align 1, !tbaa !2432
  %1736 = trunc i64 %1730 to i32
  %1737 = and i32 %1736, 255
  %1738 = call i32 @llvm.ctpop.i32(i32 %1737) #16
  %1739 = trunc i32 %1738 to i8
  %1740 = and i8 %1739, 1
  %1741 = xor i8 %1740, 1
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1741, i8* %1742, align 1, !tbaa !2446
  %1743 = xor i64 4, %1727
  %1744 = xor i64 %1743, %1730
  %1745 = lshr i64 %1744, 4
  %1746 = trunc i64 %1745 to i8
  %1747 = and i8 %1746, 1
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1747, i8* %1748, align 1, !tbaa !2447
  %1749 = icmp eq i64 %1730, 0
  %1750 = zext i1 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1750, i8* %1751, align 1, !tbaa !2448
  %1752 = lshr i64 %1730, 63
  %1753 = trunc i64 %1752 to i8
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1753, i8* %1754, align 1, !tbaa !2449
  %1755 = lshr i64 %1727, 63
  %1756 = xor i64 %1752, %1755
  %1757 = add nuw nsw i64 %1756, %1752
  %1758 = icmp eq i64 %1757, 2
  %1759 = zext i1 %1758 to i8
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1759, i8* %1760, align 1, !tbaa !2450
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 8
  %1763 = load i64, i64* %RCX
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 4
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1762 to i64*
  store i64 %1763, i64* %1766
  %1767 = load i64, i64* %RAX
  %1768 = load i64, i64* %PC
  %1769 = add i64 %1768, 3
  store i64 %1769, i64* %PC
  %1770 = inttoptr i64 %1767 to i32*
  %1771 = load i32, i32* %1770
  %1772 = sext i32 %1771 to i64
  store i64 %1772, i64* %RAX, align 8, !tbaa !2428
  %1773 = load i64, i64* %RAX
  %1774 = mul i64 %1773, 8
  %1775 = add i64 %1774, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 8
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to i64*
  %1779 = load i64, i64* %1778
  store i64 %1779, i64* %RAX, align 8, !tbaa !2428
  %1780 = load i64, i64* %RBP
  %1781 = sub i64 %1780, 40
  %1782 = load i64, i64* %RAX
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1781 to i64*
  store i64 %1782, i64* %1785
  %1786 = load i64, i64* %PC
  %1787 = sub i64 %1786, 851
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 5
  store i64 %1789, i64* %PC
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1787, i64* %1790, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1791 = load i64, i64* %RBP
  %1792 = sub i64 %1791, 12
  %1793 = load i64, i64* %PC
  %1794 = add i64 %1793, 7
  store i64 %1794, i64* %PC
  %1795 = inttoptr i64 %1792 to i32*
  store i32 3, i32* %1795
  %1796 = load i64, i64* %RBP
  %1797 = sub i64 %1796, 12
  %1798 = load i64, i64* %PC
  %1799 = add i64 %1798, 3
  store i64 %1799, i64* %PC
  %1800 = inttoptr i64 %1797 to i32*
  %1801 = load i32, i32* %1800
  %1802 = zext i32 %1801 to i64
  store i64 %1802, i64* %RDI, align 8, !tbaa !2428
  %1803 = load i64, i64* %PC
  %1804 = sub i64 %1803, 234
  %1805 = load i64, i64* %PC
  %1806 = add i64 %1805, 5
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 5
  store i64 %1808, i64* %PC
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1810 = load i64, i64* %1809, align 8, !tbaa !2428
  %1811 = add i64 %1810, -8
  %1812 = inttoptr i64 %1811 to i64*
  store i64 %1806, i64* %1812
  store i64 %1811, i64* %1809, align 8, !tbaa !2428
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1804, i64* %1813, align 8, !tbaa !2428
  %1814 = load i64, i64* %PC
  %1815 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1814, %struct.Memory* %MEMORY.0)
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 8
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 4
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to i64*
  %1821 = load i64, i64* %1820
  store i64 %1821, i64* %RAX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RAX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 3
  store i64 %1824, i64* %PC
  store i64 %1822, i64* %RCX, align 8, !tbaa !2428
  %1825 = load i64, i64* %RCX
  %1826 = load i64, i64* %PC
  %1827 = add i64 %1826, 4
  store i64 %1827, i64* %PC
  %1828 = add i64 4, %1825
  store i64 %1828, i64* %RCX, align 8, !tbaa !2428
  %1829 = icmp ult i64 %1828, %1825
  %1830 = icmp ult i64 %1828, 4
  %1831 = or i1 %1829, %1830
  %1832 = zext i1 %1831 to i8
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1832, i8* %1833, align 1, !tbaa !2432
  %1834 = trunc i64 %1828 to i32
  %1835 = and i32 %1834, 255
  %1836 = call i32 @llvm.ctpop.i32(i32 %1835) #16
  %1837 = trunc i32 %1836 to i8
  %1838 = and i8 %1837, 1
  %1839 = xor i8 %1838, 1
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1839, i8* %1840, align 1, !tbaa !2446
  %1841 = xor i64 4, %1825
  %1842 = xor i64 %1841, %1828
  %1843 = lshr i64 %1842, 4
  %1844 = trunc i64 %1843 to i8
  %1845 = and i8 %1844, 1
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1845, i8* %1846, align 1, !tbaa !2447
  %1847 = icmp eq i64 %1828, 0
  %1848 = zext i1 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1848, i8* %1849, align 1, !tbaa !2448
  %1850 = lshr i64 %1828, 63
  %1851 = trunc i64 %1850 to i8
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1851, i8* %1852, align 1, !tbaa !2449
  %1853 = lshr i64 %1825, 63
  %1854 = xor i64 %1850, %1853
  %1855 = add nuw nsw i64 %1854, %1850
  %1856 = icmp eq i64 %1855, 2
  %1857 = zext i1 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1857, i8* %1858, align 1, !tbaa !2450
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 8
  %1861 = load i64, i64* %RCX
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 4
  store i64 %1863, i64* %PC
  %1864 = inttoptr i64 %1860 to i64*
  store i64 %1861, i64* %1864
  %1865 = load i64, i64* %RAX
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 3
  store i64 %1867, i64* %PC
  %1868 = inttoptr i64 %1865 to i32*
  %1869 = load i32, i32* %1868
  %1870 = sext i32 %1869 to i64
  store i64 %1870, i64* %RAX, align 8, !tbaa !2428
  %1871 = load i64, i64* %RAX
  %1872 = mul i64 %1871, 8
  %1873 = add i64 %1872, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 8
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i64*
  %1877 = load i64, i64* %1876
  store i64 %1877, i64* %RAX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RBP
  %1879 = sub i64 %1878, 40
  %1880 = load i64, i64* %RAX
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 4
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1879 to i64*
  store i64 %1880, i64* %1883
  %1884 = load i64, i64* %PC
  %1885 = sub i64 %1884, 151
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 5
  store i64 %1887, i64* %PC
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1885, i64* %1888, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1889 = load i64, i64* %RBP
  %1890 = sub i64 %1889, 12
  %1891 = load i64, i64* %PC
  %1892 = add i64 %1891, 7
  store i64 %1892, i64* %PC
  %1893 = inttoptr i64 %1890 to i32*
  store i32 22, i32* %1893
  %1894 = load i64, i64* %RBP
  %1895 = sub i64 %1894, 12
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 3
  store i64 %1897, i64* %PC
  %1898 = inttoptr i64 %1895 to i32*
  %1899 = load i32, i32* %1898
  %1900 = zext i32 %1899 to i64
  store i64 %1900, i64* %RDI, align 8, !tbaa !2428
  %1901 = load i64, i64* %PC
  %1902 = sub i64 %1901, 1184
  %1903 = load i64, i64* %PC
  %1904 = add i64 %1903, 5
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 5
  store i64 %1906, i64* %PC
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1908 = load i64, i64* %1907, align 8, !tbaa !2428
  %1909 = add i64 %1908, -8
  %1910 = inttoptr i64 %1909 to i64*
  store i64 %1904, i64* %1910
  store i64 %1909, i64* %1907, align 8, !tbaa !2428
  %1911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1902, i64* %1911, align 8, !tbaa !2428
  %1912 = load i64, i64* %PC
  %1913 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1912, %struct.Memory* %MEMORY.0)
  %1914 = load i64, i64* %RBP
  %1915 = sub i64 %1914, 8
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 4
  store i64 %1917, i64* %PC
  %1918 = inttoptr i64 %1915 to i64*
  %1919 = load i64, i64* %1918
  store i64 %1919, i64* %RAX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RAX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 3
  store i64 %1922, i64* %PC
  store i64 %1920, i64* %RCX, align 8, !tbaa !2428
  %1923 = load i64, i64* %RCX
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 4
  store i64 %1925, i64* %PC
  %1926 = add i64 4, %1923
  store i64 %1926, i64* %RCX, align 8, !tbaa !2428
  %1927 = icmp ult i64 %1926, %1923
  %1928 = icmp ult i64 %1926, 4
  %1929 = or i1 %1927, %1928
  %1930 = zext i1 %1929 to i8
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1930, i8* %1931, align 1, !tbaa !2432
  %1932 = trunc i64 %1926 to i32
  %1933 = and i32 %1932, 255
  %1934 = call i32 @llvm.ctpop.i32(i32 %1933) #16
  %1935 = trunc i32 %1934 to i8
  %1936 = and i8 %1935, 1
  %1937 = xor i8 %1936, 1
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1937, i8* %1938, align 1, !tbaa !2446
  %1939 = xor i64 4, %1923
  %1940 = xor i64 %1939, %1926
  %1941 = lshr i64 %1940, 4
  %1942 = trunc i64 %1941 to i8
  %1943 = and i8 %1942, 1
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1943, i8* %1944, align 1, !tbaa !2447
  %1945 = icmp eq i64 %1926, 0
  %1946 = zext i1 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1946, i8* %1947, align 1, !tbaa !2448
  %1948 = lshr i64 %1926, 63
  %1949 = trunc i64 %1948 to i8
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1949, i8* %1950, align 1, !tbaa !2449
  %1951 = lshr i64 %1923, 63
  %1952 = xor i64 %1948, %1951
  %1953 = add nuw nsw i64 %1952, %1948
  %1954 = icmp eq i64 %1953, 2
  %1955 = zext i1 %1954 to i8
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1955, i8* %1956, align 1, !tbaa !2450
  %1957 = load i64, i64* %RBP
  %1958 = sub i64 %1957, 8
  %1959 = load i64, i64* %RCX
  %1960 = load i64, i64* %PC
  %1961 = add i64 %1960, 4
  store i64 %1961, i64* %PC
  %1962 = inttoptr i64 %1958 to i64*
  store i64 %1959, i64* %1962
  %1963 = load i64, i64* %RAX
  %1964 = load i64, i64* %PC
  %1965 = add i64 %1964, 3
  store i64 %1965, i64* %PC
  %1966 = inttoptr i64 %1963 to i32*
  %1967 = load i32, i32* %1966
  %1968 = sext i32 %1967 to i64
  store i64 %1968, i64* %RAX, align 8, !tbaa !2428
  %1969 = load i64, i64* %RAX
  %1970 = mul i64 %1969, 8
  %1971 = add i64 %1970, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 8
  store i64 %1973, i64* %PC
  %1974 = inttoptr i64 %1971 to i64*
  %1975 = load i64, i64* %1974
  store i64 %1975, i64* %RAX, align 8, !tbaa !2428
  %1976 = load i64, i64* %RBP
  %1977 = sub i64 %1976, 40
  %1978 = load i64, i64* %RAX
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 4
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1977 to i64*
  store i64 %1978, i64* %1981
  %1982 = load i64, i64* %PC
  %1983 = sub i64 %1982, 1101
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  store i64 %1985, i64* %PC
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1983, i64* %1986, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400881, %block_400b04, %block_400686, %block_400a0a, %block_400654, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4005f0, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400a3c, %block_4005be, %block_400942, %block_4008de, %block_400848, %block_400780, %block_40074e, %block_400ad2, %block_4009d8, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %3051, %block_400881 ], [ %1913, %block_4009a6 ], [ %1717, %block_4008ac ], [ %1619, %block_4007b2 ], [ %1521, %block_400b36 ], [ %1423, %block_4006b8 ], [ %149, %block_400a6e ], [ %1325, %block_400a3c ], [ %1227, %block_4005be ], [ %1129, %block_400942 ], [ %1031, %block_4008de ], [ %933, %block_400848 ], [ %1815, %block_4005f0 ], [ %51, %block_400974 ], [ %737, %block_40074e ], [ %2566, %block_40058c ], [ %541, %block_4009d8 ], [ %247, %block_4006ea ], [ %345, %block_400b68 ], [ %443, %block_4007e4 ], [ %639, %block_400ad2 ], [ %835, %block_400780 ], [ %2076, %block_400622 ], [ %2174, %block_400aa0 ], [ %2272, %block_40071c ], [ %2370, %block_400816 ], [ %2468, %block_400910 ], [ %2664, %block_400654 ], [ %2762, %block_400a0a ], [ %2860, %block_400686 ], [ %2958, %block_400b04 ]
  %1987 = load i64, i64* %RBP
  %1988 = sub i64 %1987, 40
  %1989 = load i64, i64* %PC
  %1990 = add i64 %1989, 4
  store i64 %1990, i64* %PC
  %1991 = inttoptr i64 %1988 to i64*
  %1992 = load i64, i64* %1991
  store i64 %1992, i64* %RAX, align 8, !tbaa !2428
  %1993 = load i64, i64* %RAX
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 2
  store i64 %1995, i64* %PC
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1993, i64* %1996, align 8, !tbaa !2428
  %1997 = load i64, i64* %PC
  switch i64 %1997, label %3125 [
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4195924, label %block_400654
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196224, label %block_400780
    i64 4197074, label %block_400ad2
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196174, label %block_40074e
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196424, label %block_400848
    i64 4196574, label %block_4008de
    i64 4196674, label %block_400942
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400579:                                     ; preds = %block_400586
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 12
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 7
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  store i32 0, i32* %2002
  %2003 = load i64, i64* %RSP
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = add i64 48, %2003
  store i64 %2006, i64* %RSP, align 8, !tbaa !2428
  %2007 = icmp ult i64 %2006, %2003
  %2008 = icmp ult i64 %2006, 48
  %2009 = or i1 %2007, %2008
  %2010 = zext i1 %2009 to i8
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2010, i8* %2011, align 1, !tbaa !2432
  %2012 = trunc i64 %2006 to i32
  %2013 = and i32 %2012, 255
  %2014 = call i32 @llvm.ctpop.i32(i32 %2013) #16
  %2015 = trunc i32 %2014 to i8
  %2016 = and i8 %2015, 1
  %2017 = xor i8 %2016, 1
  %2018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2017, i8* %2018, align 1, !tbaa !2446
  %2019 = xor i64 48, %2003
  %2020 = xor i64 %2019, %2006
  %2021 = lshr i64 %2020, 4
  %2022 = trunc i64 %2021 to i8
  %2023 = and i8 %2022, 1
  %2024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2023, i8* %2024, align 1, !tbaa !2447
  %2025 = icmp eq i64 %2006, 0
  %2026 = zext i1 %2025 to i8
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2026, i8* %2027, align 1, !tbaa !2448
  %2028 = lshr i64 %2006, 63
  %2029 = trunc i64 %2028 to i8
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2029, i8* %2030, align 1, !tbaa !2449
  %2031 = lshr i64 %2003, 63
  %2032 = xor i64 %2028, %2031
  %2033 = add nuw nsw i64 %2032, %2028
  %2034 = icmp eq i64 %2033, 2
  %2035 = zext i1 %2034 to i8
  %2036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2035, i8* %2036, align 1, !tbaa !2450
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 1
  store i64 %2038, i64* %PC
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2040 = load i64, i64* %2039, align 8, !tbaa !2428
  %2041 = add i64 %2040, 8
  %2042 = inttoptr i64 %2040 to i64*
  %2043 = load i64, i64* %2042
  store i64 %2043, i64* %RBP, align 8, !tbaa !2428
  store i64 %2041, i64* %2039, align 8, !tbaa !2428
  %2044 = load i64, i64* %PC
  %2045 = add i64 %2044, 1
  store i64 %2045, i64* %PC
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2048 = load i64, i64* %2047, align 8, !tbaa !2428
  %2049 = inttoptr i64 %2048 to i64*
  %2050 = load i64, i64* %2049
  store i64 %2050, i64* %2046, align 8, !tbaa !2428
  %2051 = add i64 %2048, 8
  store i64 %2051, i64* %2047, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400622:                                     ; preds = %block_400586
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 12
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 7
  store i64 %2055, i64* %PC
  %2056 = inttoptr i64 %2053 to i32*
  store i32 4, i32* %2056
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 12
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i32*
  %2062 = load i32, i32* %2061
  %2063 = zext i32 %2062 to i64
  store i64 %2063, i64* %RDI, align 8, !tbaa !2428
  %2064 = load i64, i64* %PC
  %2065 = sub i64 %2064, 284
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 5
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 5
  store i64 %2069, i64* %PC
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2071 = load i64, i64* %2070, align 8, !tbaa !2428
  %2072 = add i64 %2071, -8
  %2073 = inttoptr i64 %2072 to i64*
  store i64 %2067, i64* %2073
  store i64 %2072, i64* %2070, align 8, !tbaa !2428
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2065, i64* %2074, align 8, !tbaa !2428
  %2075 = load i64, i64* %PC
  %2076 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2075, %struct.Memory* %MEMORY.0)
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 8
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 4
  store i64 %2080, i64* %PC
  %2081 = inttoptr i64 %2078 to i64*
  %2082 = load i64, i64* %2081
  store i64 %2082, i64* %RAX, align 8, !tbaa !2428
  %2083 = load i64, i64* %RAX
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 3
  store i64 %2085, i64* %PC
  store i64 %2083, i64* %RCX, align 8, !tbaa !2428
  %2086 = load i64, i64* %RCX
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 4
  store i64 %2088, i64* %PC
  %2089 = add i64 4, %2086
  store i64 %2089, i64* %RCX, align 8, !tbaa !2428
  %2090 = icmp ult i64 %2089, %2086
  %2091 = icmp ult i64 %2089, 4
  %2092 = or i1 %2090, %2091
  %2093 = zext i1 %2092 to i8
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2093, i8* %2094, align 1, !tbaa !2432
  %2095 = trunc i64 %2089 to i32
  %2096 = and i32 %2095, 255
  %2097 = call i32 @llvm.ctpop.i32(i32 %2096) #16
  %2098 = trunc i32 %2097 to i8
  %2099 = and i8 %2098, 1
  %2100 = xor i8 %2099, 1
  %2101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2100, i8* %2101, align 1, !tbaa !2446
  %2102 = xor i64 4, %2086
  %2103 = xor i64 %2102, %2089
  %2104 = lshr i64 %2103, 4
  %2105 = trunc i64 %2104 to i8
  %2106 = and i8 %2105, 1
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2106, i8* %2107, align 1, !tbaa !2447
  %2108 = icmp eq i64 %2089, 0
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2109, i8* %2110, align 1, !tbaa !2448
  %2111 = lshr i64 %2089, 63
  %2112 = trunc i64 %2111 to i8
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2112, i8* %2113, align 1, !tbaa !2449
  %2114 = lshr i64 %2086, 63
  %2115 = xor i64 %2111, %2114
  %2116 = add nuw nsw i64 %2115, %2111
  %2117 = icmp eq i64 %2116, 2
  %2118 = zext i1 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2118, i8* %2119, align 1, !tbaa !2450
  %2120 = load i64, i64* %RBP
  %2121 = sub i64 %2120, 8
  %2122 = load i64, i64* %RCX
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 4
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2121 to i64*
  store i64 %2122, i64* %2125
  %2126 = load i64, i64* %RAX
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 3
  store i64 %2128, i64* %PC
  %2129 = inttoptr i64 %2126 to i32*
  %2130 = load i32, i32* %2129
  %2131 = sext i32 %2130 to i64
  store i64 %2131, i64* %RAX, align 8, !tbaa !2428
  %2132 = load i64, i64* %RAX
  %2133 = mul i64 %2132, 8
  %2134 = add i64 %2133, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2135 = load i64, i64* %PC
  %2136 = add i64 %2135, 8
  store i64 %2136, i64* %PC
  %2137 = inttoptr i64 %2134 to i64*
  %2138 = load i64, i64* %2137
  store i64 %2138, i64* %RAX, align 8, !tbaa !2428
  %2139 = load i64, i64* %RBP
  %2140 = sub i64 %2139, 40
  %2141 = load i64, i64* %RAX
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 4
  store i64 %2143, i64* %PC
  %2144 = inttoptr i64 %2140 to i64*
  store i64 %2141, i64* %2144
  %2145 = load i64, i64* %PC
  %2146 = sub i64 %2145, 201
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  store i64 %2148, i64* %PC
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2146, i64* %2149, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %2150 = load i64, i64* %RBP
  %2151 = sub i64 %2150, 12
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 7
  store i64 %2153, i64* %PC
  %2154 = inttoptr i64 %2151 to i32*
  store i32 27, i32* %2154
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 12
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 3
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2156 to i32*
  %2160 = load i32, i32* %2159
  %2161 = zext i32 %2160 to i64
  store i64 %2161, i64* %RDI, align 8, !tbaa !2428
  %2162 = load i64, i64* %PC
  %2163 = sub i64 %2162, 1434
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 5
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 5
  store i64 %2167, i64* %PC
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2169 = load i64, i64* %2168, align 8, !tbaa !2428
  %2170 = add i64 %2169, -8
  %2171 = inttoptr i64 %2170 to i64*
  store i64 %2165, i64* %2171
  store i64 %2170, i64* %2168, align 8, !tbaa !2428
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2163, i64* %2172, align 8, !tbaa !2428
  %2173 = load i64, i64* %PC
  %2174 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2173, %struct.Memory* %MEMORY.0)
  %2175 = load i64, i64* %RBP
  %2176 = sub i64 %2175, 8
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 4
  store i64 %2178, i64* %PC
  %2179 = inttoptr i64 %2176 to i64*
  %2180 = load i64, i64* %2179
  store i64 %2180, i64* %RAX, align 8, !tbaa !2428
  %2181 = load i64, i64* %RAX
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 3
  store i64 %2183, i64* %PC
  store i64 %2181, i64* %RCX, align 8, !tbaa !2428
  %2184 = load i64, i64* %RCX
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 4
  store i64 %2186, i64* %PC
  %2187 = add i64 4, %2184
  store i64 %2187, i64* %RCX, align 8, !tbaa !2428
  %2188 = icmp ult i64 %2187, %2184
  %2189 = icmp ult i64 %2187, 4
  %2190 = or i1 %2188, %2189
  %2191 = zext i1 %2190 to i8
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2191, i8* %2192, align 1, !tbaa !2432
  %2193 = trunc i64 %2187 to i32
  %2194 = and i32 %2193, 255
  %2195 = call i32 @llvm.ctpop.i32(i32 %2194) #16
  %2196 = trunc i32 %2195 to i8
  %2197 = and i8 %2196, 1
  %2198 = xor i8 %2197, 1
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2198, i8* %2199, align 1, !tbaa !2446
  %2200 = xor i64 4, %2184
  %2201 = xor i64 %2200, %2187
  %2202 = lshr i64 %2201, 4
  %2203 = trunc i64 %2202 to i8
  %2204 = and i8 %2203, 1
  %2205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2204, i8* %2205, align 1, !tbaa !2447
  %2206 = icmp eq i64 %2187, 0
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2207, i8* %2208, align 1, !tbaa !2448
  %2209 = lshr i64 %2187, 63
  %2210 = trunc i64 %2209 to i8
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2210, i8* %2211, align 1, !tbaa !2449
  %2212 = lshr i64 %2184, 63
  %2213 = xor i64 %2209, %2212
  %2214 = add nuw nsw i64 %2213, %2209
  %2215 = icmp eq i64 %2214, 2
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2216, i8* %2217, align 1, !tbaa !2450
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 8
  %2220 = load i64, i64* %RCX
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 4
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2219 to i64*
  store i64 %2220, i64* %2223
  %2224 = load i64, i64* %RAX
  %2225 = load i64, i64* %PC
  %2226 = add i64 %2225, 3
  store i64 %2226, i64* %PC
  %2227 = inttoptr i64 %2224 to i32*
  %2228 = load i32, i32* %2227
  %2229 = sext i32 %2228 to i64
  store i64 %2229, i64* %RAX, align 8, !tbaa !2428
  %2230 = load i64, i64* %RAX
  %2231 = mul i64 %2230, 8
  %2232 = add i64 %2231, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 8
  store i64 %2234, i64* %PC
  %2235 = inttoptr i64 %2232 to i64*
  %2236 = load i64, i64* %2235
  store i64 %2236, i64* %RAX, align 8, !tbaa !2428
  %2237 = load i64, i64* %RBP
  %2238 = sub i64 %2237, 40
  %2239 = load i64, i64* %RAX
  %2240 = load i64, i64* %PC
  %2241 = add i64 %2240, 4
  store i64 %2241, i64* %PC
  %2242 = inttoptr i64 %2238 to i64*
  store i64 %2239, i64* %2242
  %2243 = load i64, i64* %PC
  %2244 = sub i64 %2243, 1351
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 5
  store i64 %2246, i64* %PC
  %2247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2244, i64* %2247, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2248 = load i64, i64* %RBP
  %2249 = sub i64 %2248, 12
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 7
  store i64 %2251, i64* %PC
  %2252 = inttoptr i64 %2249 to i32*
  store i32 9, i32* %2252
  %2253 = load i64, i64* %RBP
  %2254 = sub i64 %2253, 12
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 3
  store i64 %2256, i64* %PC
  %2257 = inttoptr i64 %2254 to i32*
  %2258 = load i32, i32* %2257
  %2259 = zext i32 %2258 to i64
  store i64 %2259, i64* %RDI, align 8, !tbaa !2428
  %2260 = load i64, i64* %PC
  %2261 = sub i64 %2260, 534
  %2262 = load i64, i64* %PC
  %2263 = add i64 %2262, 5
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 5
  store i64 %2265, i64* %PC
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2267 = load i64, i64* %2266, align 8, !tbaa !2428
  %2268 = add i64 %2267, -8
  %2269 = inttoptr i64 %2268 to i64*
  store i64 %2263, i64* %2269
  store i64 %2268, i64* %2266, align 8, !tbaa !2428
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2261, i64* %2270, align 8, !tbaa !2428
  %2271 = load i64, i64* %PC
  %2272 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2271, %struct.Memory* %MEMORY.0)
  %2273 = load i64, i64* %RBP
  %2274 = sub i64 %2273, 8
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 4
  store i64 %2276, i64* %PC
  %2277 = inttoptr i64 %2274 to i64*
  %2278 = load i64, i64* %2277
  store i64 %2278, i64* %RAX, align 8, !tbaa !2428
  %2279 = load i64, i64* %RAX
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 3
  store i64 %2281, i64* %PC
  store i64 %2279, i64* %RCX, align 8, !tbaa !2428
  %2282 = load i64, i64* %RCX
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 4
  store i64 %2284, i64* %PC
  %2285 = add i64 4, %2282
  store i64 %2285, i64* %RCX, align 8, !tbaa !2428
  %2286 = icmp ult i64 %2285, %2282
  %2287 = icmp ult i64 %2285, 4
  %2288 = or i1 %2286, %2287
  %2289 = zext i1 %2288 to i8
  %2290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2289, i8* %2290, align 1, !tbaa !2432
  %2291 = trunc i64 %2285 to i32
  %2292 = and i32 %2291, 255
  %2293 = call i32 @llvm.ctpop.i32(i32 %2292) #16
  %2294 = trunc i32 %2293 to i8
  %2295 = and i8 %2294, 1
  %2296 = xor i8 %2295, 1
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2296, i8* %2297, align 1, !tbaa !2446
  %2298 = xor i64 4, %2282
  %2299 = xor i64 %2298, %2285
  %2300 = lshr i64 %2299, 4
  %2301 = trunc i64 %2300 to i8
  %2302 = and i8 %2301, 1
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2302, i8* %2303, align 1, !tbaa !2447
  %2304 = icmp eq i64 %2285, 0
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2305, i8* %2306, align 1, !tbaa !2448
  %2307 = lshr i64 %2285, 63
  %2308 = trunc i64 %2307 to i8
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2308, i8* %2309, align 1, !tbaa !2449
  %2310 = lshr i64 %2282, 63
  %2311 = xor i64 %2307, %2310
  %2312 = add nuw nsw i64 %2311, %2307
  %2313 = icmp eq i64 %2312, 2
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2314, i8* %2315, align 1, !tbaa !2450
  %2316 = load i64, i64* %RBP
  %2317 = sub i64 %2316, 8
  %2318 = load i64, i64* %RCX
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 4
  store i64 %2320, i64* %PC
  %2321 = inttoptr i64 %2317 to i64*
  store i64 %2318, i64* %2321
  %2322 = load i64, i64* %RAX
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 3
  store i64 %2324, i64* %PC
  %2325 = inttoptr i64 %2322 to i32*
  %2326 = load i32, i32* %2325
  %2327 = sext i32 %2326 to i64
  store i64 %2327, i64* %RAX, align 8, !tbaa !2428
  %2328 = load i64, i64* %RAX
  %2329 = mul i64 %2328, 8
  %2330 = add i64 %2329, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 8
  store i64 %2332, i64* %PC
  %2333 = inttoptr i64 %2330 to i64*
  %2334 = load i64, i64* %2333
  store i64 %2334, i64* %RAX, align 8, !tbaa !2428
  %2335 = load i64, i64* %RBP
  %2336 = sub i64 %2335, 40
  %2337 = load i64, i64* %RAX
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 4
  store i64 %2339, i64* %PC
  %2340 = inttoptr i64 %2336 to i64*
  store i64 %2337, i64* %2340
  %2341 = load i64, i64* %PC
  %2342 = sub i64 %2341, 451
  %2343 = load i64, i64* %PC
  %2344 = add i64 %2343, 5
  store i64 %2344, i64* %PC
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2342, i64* %2345, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2346 = load i64, i64* %RBP
  %2347 = sub i64 %2346, 12
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 7
  store i64 %2349, i64* %PC
  %2350 = inttoptr i64 %2347 to i32*
  store i32 14, i32* %2350
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 12
  %2353 = load i64, i64* %PC
  %2354 = add i64 %2353, 3
  store i64 %2354, i64* %PC
  %2355 = inttoptr i64 %2352 to i32*
  %2356 = load i32, i32* %2355
  %2357 = zext i32 %2356 to i64
  store i64 %2357, i64* %RDI, align 8, !tbaa !2428
  %2358 = load i64, i64* %PC
  %2359 = sub i64 %2358, 784
  %2360 = load i64, i64* %PC
  %2361 = add i64 %2360, 5
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 5
  store i64 %2363, i64* %PC
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2365 = load i64, i64* %2364, align 8, !tbaa !2428
  %2366 = add i64 %2365, -8
  %2367 = inttoptr i64 %2366 to i64*
  store i64 %2361, i64* %2367
  store i64 %2366, i64* %2364, align 8, !tbaa !2428
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2359, i64* %2368, align 8, !tbaa !2428
  %2369 = load i64, i64* %PC
  %2370 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2369, %struct.Memory* %MEMORY.0)
  %2371 = load i64, i64* %RBP
  %2372 = sub i64 %2371, 8
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 4
  store i64 %2374, i64* %PC
  %2375 = inttoptr i64 %2372 to i64*
  %2376 = load i64, i64* %2375
  store i64 %2376, i64* %RAX, align 8, !tbaa !2428
  %2377 = load i64, i64* %RAX
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 3
  store i64 %2379, i64* %PC
  store i64 %2377, i64* %RCX, align 8, !tbaa !2428
  %2380 = load i64, i64* %RCX
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 4
  store i64 %2382, i64* %PC
  %2383 = add i64 4, %2380
  store i64 %2383, i64* %RCX, align 8, !tbaa !2428
  %2384 = icmp ult i64 %2383, %2380
  %2385 = icmp ult i64 %2383, 4
  %2386 = or i1 %2384, %2385
  %2387 = zext i1 %2386 to i8
  %2388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2387, i8* %2388, align 1, !tbaa !2432
  %2389 = trunc i64 %2383 to i32
  %2390 = and i32 %2389, 255
  %2391 = call i32 @llvm.ctpop.i32(i32 %2390) #16
  %2392 = trunc i32 %2391 to i8
  %2393 = and i8 %2392, 1
  %2394 = xor i8 %2393, 1
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2394, i8* %2395, align 1, !tbaa !2446
  %2396 = xor i64 4, %2380
  %2397 = xor i64 %2396, %2383
  %2398 = lshr i64 %2397, 4
  %2399 = trunc i64 %2398 to i8
  %2400 = and i8 %2399, 1
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2400, i8* %2401, align 1, !tbaa !2447
  %2402 = icmp eq i64 %2383, 0
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2403, i8* %2404, align 1, !tbaa !2448
  %2405 = lshr i64 %2383, 63
  %2406 = trunc i64 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2406, i8* %2407, align 1, !tbaa !2449
  %2408 = lshr i64 %2380, 63
  %2409 = xor i64 %2405, %2408
  %2410 = add nuw nsw i64 %2409, %2405
  %2411 = icmp eq i64 %2410, 2
  %2412 = zext i1 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2412, i8* %2413, align 1, !tbaa !2450
  %2414 = load i64, i64* %RBP
  %2415 = sub i64 %2414, 8
  %2416 = load i64, i64* %RCX
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 4
  store i64 %2418, i64* %PC
  %2419 = inttoptr i64 %2415 to i64*
  store i64 %2416, i64* %2419
  %2420 = load i64, i64* %RAX
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 3
  store i64 %2422, i64* %PC
  %2423 = inttoptr i64 %2420 to i32*
  %2424 = load i32, i32* %2423
  %2425 = sext i32 %2424 to i64
  store i64 %2425, i64* %RAX, align 8, !tbaa !2428
  %2426 = load i64, i64* %RAX
  %2427 = mul i64 %2426, 8
  %2428 = add i64 %2427, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 8
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to i64*
  %2432 = load i64, i64* %2431
  store i64 %2432, i64* %RAX, align 8, !tbaa !2428
  %2433 = load i64, i64* %RBP
  %2434 = sub i64 %2433, 40
  %2435 = load i64, i64* %RAX
  %2436 = load i64, i64* %PC
  %2437 = add i64 %2436, 4
  store i64 %2437, i64* %PC
  %2438 = inttoptr i64 %2434 to i64*
  store i64 %2435, i64* %2438
  %2439 = load i64, i64* %PC
  %2440 = sub i64 %2439, 701
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 5
  store i64 %2442, i64* %PC
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2440, i64* %2443, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2444 = load i64, i64* %RBP
  %2445 = sub i64 %2444, 12
  %2446 = load i64, i64* %PC
  %2447 = add i64 %2446, 7
  store i64 %2447, i64* %PC
  %2448 = inttoptr i64 %2445 to i32*
  store i32 19, i32* %2448
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 12
  %2451 = load i64, i64* %PC
  %2452 = add i64 %2451, 3
  store i64 %2452, i64* %PC
  %2453 = inttoptr i64 %2450 to i32*
  %2454 = load i32, i32* %2453
  %2455 = zext i32 %2454 to i64
  store i64 %2455, i64* %RDI, align 8, !tbaa !2428
  %2456 = load i64, i64* %PC
  %2457 = sub i64 %2456, 1034
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 5
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 5
  store i64 %2461, i64* %PC
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2463 = load i64, i64* %2462, align 8, !tbaa !2428
  %2464 = add i64 %2463, -8
  %2465 = inttoptr i64 %2464 to i64*
  store i64 %2459, i64* %2465
  store i64 %2464, i64* %2462, align 8, !tbaa !2428
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2457, i64* %2466, align 8, !tbaa !2428
  %2467 = load i64, i64* %PC
  %2468 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2467, %struct.Memory* %MEMORY.0)
  %2469 = load i64, i64* %RBP
  %2470 = sub i64 %2469, 8
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 4
  store i64 %2472, i64* %PC
  %2473 = inttoptr i64 %2470 to i64*
  %2474 = load i64, i64* %2473
  store i64 %2474, i64* %RAX, align 8, !tbaa !2428
  %2475 = load i64, i64* %RAX
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 3
  store i64 %2477, i64* %PC
  store i64 %2475, i64* %RCX, align 8, !tbaa !2428
  %2478 = load i64, i64* %RCX
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 4
  store i64 %2480, i64* %PC
  %2481 = add i64 4, %2478
  store i64 %2481, i64* %RCX, align 8, !tbaa !2428
  %2482 = icmp ult i64 %2481, %2478
  %2483 = icmp ult i64 %2481, 4
  %2484 = or i1 %2482, %2483
  %2485 = zext i1 %2484 to i8
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2485, i8* %2486, align 1, !tbaa !2432
  %2487 = trunc i64 %2481 to i32
  %2488 = and i32 %2487, 255
  %2489 = call i32 @llvm.ctpop.i32(i32 %2488) #16
  %2490 = trunc i32 %2489 to i8
  %2491 = and i8 %2490, 1
  %2492 = xor i8 %2491, 1
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2492, i8* %2493, align 1, !tbaa !2446
  %2494 = xor i64 4, %2478
  %2495 = xor i64 %2494, %2481
  %2496 = lshr i64 %2495, 4
  %2497 = trunc i64 %2496 to i8
  %2498 = and i8 %2497, 1
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2498, i8* %2499, align 1, !tbaa !2447
  %2500 = icmp eq i64 %2481, 0
  %2501 = zext i1 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2501, i8* %2502, align 1, !tbaa !2448
  %2503 = lshr i64 %2481, 63
  %2504 = trunc i64 %2503 to i8
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2504, i8* %2505, align 1, !tbaa !2449
  %2506 = lshr i64 %2478, 63
  %2507 = xor i64 %2503, %2506
  %2508 = add nuw nsw i64 %2507, %2503
  %2509 = icmp eq i64 %2508, 2
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2510, i8* %2511, align 1, !tbaa !2450
  %2512 = load i64, i64* %RBP
  %2513 = sub i64 %2512, 8
  %2514 = load i64, i64* %RCX
  %2515 = load i64, i64* %PC
  %2516 = add i64 %2515, 4
  store i64 %2516, i64* %PC
  %2517 = inttoptr i64 %2513 to i64*
  store i64 %2514, i64* %2517
  %2518 = load i64, i64* %RAX
  %2519 = load i64, i64* %PC
  %2520 = add i64 %2519, 3
  store i64 %2520, i64* %PC
  %2521 = inttoptr i64 %2518 to i32*
  %2522 = load i32, i32* %2521
  %2523 = sext i32 %2522 to i64
  store i64 %2523, i64* %RAX, align 8, !tbaa !2428
  %2524 = load i64, i64* %RAX
  %2525 = mul i64 %2524, 8
  %2526 = add i64 %2525, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2527 = load i64, i64* %PC
  %2528 = add i64 %2527, 8
  store i64 %2528, i64* %PC
  %2529 = inttoptr i64 %2526 to i64*
  %2530 = load i64, i64* %2529
  store i64 %2530, i64* %RAX, align 8, !tbaa !2428
  %2531 = load i64, i64* %RBP
  %2532 = sub i64 %2531, 40
  %2533 = load i64, i64* %RAX
  %2534 = load i64, i64* %PC
  %2535 = add i64 %2534, 4
  store i64 %2535, i64* %PC
  %2536 = inttoptr i64 %2532 to i64*
  store i64 %2533, i64* %2536
  %2537 = load i64, i64* %PC
  %2538 = sub i64 %2537, 951
  %2539 = load i64, i64* %PC
  %2540 = add i64 %2539, 5
  store i64 %2540, i64* %PC
  %2541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2538, i64* %2541, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2542 = load i64, i64* %RBP
  %2543 = sub i64 %2542, 12
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 7
  store i64 %2545, i64* %PC
  %2546 = inttoptr i64 %2543 to i32*
  store i32 1, i32* %2546
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 12
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 3
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i32*
  %2552 = load i32, i32* %2551
  %2553 = zext i32 %2552 to i64
  store i64 %2553, i64* %RDI, align 8, !tbaa !2428
  %2554 = load i64, i64* %PC
  %2555 = sub i64 %2554, 134
  %2556 = load i64, i64* %PC
  %2557 = add i64 %2556, 5
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 5
  store i64 %2559, i64* %PC
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2561 = load i64, i64* %2560, align 8, !tbaa !2428
  %2562 = add i64 %2561, -8
  %2563 = inttoptr i64 %2562 to i64*
  store i64 %2557, i64* %2563
  store i64 %2562, i64* %2560, align 8, !tbaa !2428
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2555, i64* %2564, align 8, !tbaa !2428
  %2565 = load i64, i64* %PC
  %2566 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2565, %struct.Memory* %MEMORY.0)
  %2567 = load i64, i64* %RBP
  %2568 = sub i64 %2567, 8
  %2569 = load i64, i64* %PC
  %2570 = add i64 %2569, 4
  store i64 %2570, i64* %PC
  %2571 = inttoptr i64 %2568 to i64*
  %2572 = load i64, i64* %2571
  store i64 %2572, i64* %RAX, align 8, !tbaa !2428
  %2573 = load i64, i64* %RAX
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 3
  store i64 %2575, i64* %PC
  store i64 %2573, i64* %RCX, align 8, !tbaa !2428
  %2576 = load i64, i64* %RCX
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 4
  store i64 %2578, i64* %PC
  %2579 = add i64 4, %2576
  store i64 %2579, i64* %RCX, align 8, !tbaa !2428
  %2580 = icmp ult i64 %2579, %2576
  %2581 = icmp ult i64 %2579, 4
  %2582 = or i1 %2580, %2581
  %2583 = zext i1 %2582 to i8
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2583, i8* %2584, align 1, !tbaa !2432
  %2585 = trunc i64 %2579 to i32
  %2586 = and i32 %2585, 255
  %2587 = call i32 @llvm.ctpop.i32(i32 %2586) #16
  %2588 = trunc i32 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = xor i8 %2589, 1
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2590, i8* %2591, align 1, !tbaa !2446
  %2592 = xor i64 4, %2576
  %2593 = xor i64 %2592, %2579
  %2594 = lshr i64 %2593, 4
  %2595 = trunc i64 %2594 to i8
  %2596 = and i8 %2595, 1
  %2597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2596, i8* %2597, align 1, !tbaa !2447
  %2598 = icmp eq i64 %2579, 0
  %2599 = zext i1 %2598 to i8
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2599, i8* %2600, align 1, !tbaa !2448
  %2601 = lshr i64 %2579, 63
  %2602 = trunc i64 %2601 to i8
  %2603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2602, i8* %2603, align 1, !tbaa !2449
  %2604 = lshr i64 %2576, 63
  %2605 = xor i64 %2601, %2604
  %2606 = add nuw nsw i64 %2605, %2601
  %2607 = icmp eq i64 %2606, 2
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2608, i8* %2609, align 1, !tbaa !2450
  %2610 = load i64, i64* %RBP
  %2611 = sub i64 %2610, 8
  %2612 = load i64, i64* %RCX
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 4
  store i64 %2614, i64* %PC
  %2615 = inttoptr i64 %2611 to i64*
  store i64 %2612, i64* %2615
  %2616 = load i64, i64* %RAX
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 3
  store i64 %2618, i64* %PC
  %2619 = inttoptr i64 %2616 to i32*
  %2620 = load i32, i32* %2619
  %2621 = sext i32 %2620 to i64
  store i64 %2621, i64* %RAX, align 8, !tbaa !2428
  %2622 = load i64, i64* %RAX
  %2623 = mul i64 %2622, 8
  %2624 = add i64 %2623, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2625 = load i64, i64* %PC
  %2626 = add i64 %2625, 8
  store i64 %2626, i64* %PC
  %2627 = inttoptr i64 %2624 to i64*
  %2628 = load i64, i64* %2627
  store i64 %2628, i64* %RAX, align 8, !tbaa !2428
  %2629 = load i64, i64* %RBP
  %2630 = sub i64 %2629, 40
  %2631 = load i64, i64* %RAX
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 4
  store i64 %2633, i64* %PC
  %2634 = inttoptr i64 %2630 to i64*
  store i64 %2631, i64* %2634
  %2635 = load i64, i64* %PC
  %2636 = sub i64 %2635, 51
  %2637 = load i64, i64* %PC
  %2638 = add i64 %2637, 5
  store i64 %2638, i64* %PC
  %2639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2636, i64* %2639, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 12
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 7
  store i64 %2643, i64* %PC
  %2644 = inttoptr i64 %2641 to i32*
  store i32 5, i32* %2644
  %2645 = load i64, i64* %RBP
  %2646 = sub i64 %2645, 12
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 3
  store i64 %2648, i64* %PC
  %2649 = inttoptr i64 %2646 to i32*
  %2650 = load i32, i32* %2649
  %2651 = zext i32 %2650 to i64
  store i64 %2651, i64* %RDI, align 8, !tbaa !2428
  %2652 = load i64, i64* %PC
  %2653 = sub i64 %2652, 334
  %2654 = load i64, i64* %PC
  %2655 = add i64 %2654, 5
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 5
  store i64 %2657, i64* %PC
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2659 = load i64, i64* %2658, align 8, !tbaa !2428
  %2660 = add i64 %2659, -8
  %2661 = inttoptr i64 %2660 to i64*
  store i64 %2655, i64* %2661
  store i64 %2660, i64* %2658, align 8, !tbaa !2428
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2653, i64* %2662, align 8, !tbaa !2428
  %2663 = load i64, i64* %PC
  %2664 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2663, %struct.Memory* %MEMORY.0)
  %2665 = load i64, i64* %RBP
  %2666 = sub i64 %2665, 8
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 4
  store i64 %2668, i64* %PC
  %2669 = inttoptr i64 %2666 to i64*
  %2670 = load i64, i64* %2669
  store i64 %2670, i64* %RAX, align 8, !tbaa !2428
  %2671 = load i64, i64* %RAX
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 3
  store i64 %2673, i64* %PC
  store i64 %2671, i64* %RCX, align 8, !tbaa !2428
  %2674 = load i64, i64* %RCX
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 4
  store i64 %2676, i64* %PC
  %2677 = add i64 4, %2674
  store i64 %2677, i64* %RCX, align 8, !tbaa !2428
  %2678 = icmp ult i64 %2677, %2674
  %2679 = icmp ult i64 %2677, 4
  %2680 = or i1 %2678, %2679
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2681, i8* %2682, align 1, !tbaa !2432
  %2683 = trunc i64 %2677 to i32
  %2684 = and i32 %2683, 255
  %2685 = call i32 @llvm.ctpop.i32(i32 %2684) #16
  %2686 = trunc i32 %2685 to i8
  %2687 = and i8 %2686, 1
  %2688 = xor i8 %2687, 1
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2688, i8* %2689, align 1, !tbaa !2446
  %2690 = xor i64 4, %2674
  %2691 = xor i64 %2690, %2677
  %2692 = lshr i64 %2691, 4
  %2693 = trunc i64 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2694, i8* %2695, align 1, !tbaa !2447
  %2696 = icmp eq i64 %2677, 0
  %2697 = zext i1 %2696 to i8
  %2698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2697, i8* %2698, align 1, !tbaa !2448
  %2699 = lshr i64 %2677, 63
  %2700 = trunc i64 %2699 to i8
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2700, i8* %2701, align 1, !tbaa !2449
  %2702 = lshr i64 %2674, 63
  %2703 = xor i64 %2699, %2702
  %2704 = add nuw nsw i64 %2703, %2699
  %2705 = icmp eq i64 %2704, 2
  %2706 = zext i1 %2705 to i8
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2706, i8* %2707, align 1, !tbaa !2450
  %2708 = load i64, i64* %RBP
  %2709 = sub i64 %2708, 8
  %2710 = load i64, i64* %RCX
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 4
  store i64 %2712, i64* %PC
  %2713 = inttoptr i64 %2709 to i64*
  store i64 %2710, i64* %2713
  %2714 = load i64, i64* %RAX
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 3
  store i64 %2716, i64* %PC
  %2717 = inttoptr i64 %2714 to i32*
  %2718 = load i32, i32* %2717
  %2719 = sext i32 %2718 to i64
  store i64 %2719, i64* %RAX, align 8, !tbaa !2428
  %2720 = load i64, i64* %RAX
  %2721 = mul i64 %2720, 8
  %2722 = add i64 %2721, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2723 = load i64, i64* %PC
  %2724 = add i64 %2723, 8
  store i64 %2724, i64* %PC
  %2725 = inttoptr i64 %2722 to i64*
  %2726 = load i64, i64* %2725
  store i64 %2726, i64* %RAX, align 8, !tbaa !2428
  %2727 = load i64, i64* %RBP
  %2728 = sub i64 %2727, 40
  %2729 = load i64, i64* %RAX
  %2730 = load i64, i64* %PC
  %2731 = add i64 %2730, 4
  store i64 %2731, i64* %PC
  %2732 = inttoptr i64 %2728 to i64*
  store i64 %2729, i64* %2732
  %2733 = load i64, i64* %PC
  %2734 = sub i64 %2733, 251
  %2735 = load i64, i64* %PC
  %2736 = add i64 %2735, 5
  store i64 %2736, i64* %PC
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2734, i64* %2737, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2738 = load i64, i64* %RBP
  %2739 = sub i64 %2738, 12
  %2740 = load i64, i64* %PC
  %2741 = add i64 %2740, 7
  store i64 %2741, i64* %PC
  %2742 = inttoptr i64 %2739 to i32*
  store i32 24, i32* %2742
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 12
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 3
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RDI, align 8, !tbaa !2428
  %2750 = load i64, i64* %PC
  %2751 = sub i64 %2750, 1284
  %2752 = load i64, i64* %PC
  %2753 = add i64 %2752, 5
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 5
  store i64 %2755, i64* %PC
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2757 = load i64, i64* %2756, align 8, !tbaa !2428
  %2758 = add i64 %2757, -8
  %2759 = inttoptr i64 %2758 to i64*
  store i64 %2753, i64* %2759
  store i64 %2758, i64* %2756, align 8, !tbaa !2428
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2751, i64* %2760, align 8, !tbaa !2428
  %2761 = load i64, i64* %PC
  %2762 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2761, %struct.Memory* %MEMORY.0)
  %2763 = load i64, i64* %RBP
  %2764 = sub i64 %2763, 8
  %2765 = load i64, i64* %PC
  %2766 = add i64 %2765, 4
  store i64 %2766, i64* %PC
  %2767 = inttoptr i64 %2764 to i64*
  %2768 = load i64, i64* %2767
  store i64 %2768, i64* %RAX, align 8, !tbaa !2428
  %2769 = load i64, i64* %RAX
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 3
  store i64 %2771, i64* %PC
  store i64 %2769, i64* %RCX, align 8, !tbaa !2428
  %2772 = load i64, i64* %RCX
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 4
  store i64 %2774, i64* %PC
  %2775 = add i64 4, %2772
  store i64 %2775, i64* %RCX, align 8, !tbaa !2428
  %2776 = icmp ult i64 %2775, %2772
  %2777 = icmp ult i64 %2775, 4
  %2778 = or i1 %2776, %2777
  %2779 = zext i1 %2778 to i8
  %2780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2779, i8* %2780, align 1, !tbaa !2432
  %2781 = trunc i64 %2775 to i32
  %2782 = and i32 %2781, 255
  %2783 = call i32 @llvm.ctpop.i32(i32 %2782) #16
  %2784 = trunc i32 %2783 to i8
  %2785 = and i8 %2784, 1
  %2786 = xor i8 %2785, 1
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2786, i8* %2787, align 1, !tbaa !2446
  %2788 = xor i64 4, %2772
  %2789 = xor i64 %2788, %2775
  %2790 = lshr i64 %2789, 4
  %2791 = trunc i64 %2790 to i8
  %2792 = and i8 %2791, 1
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2792, i8* %2793, align 1, !tbaa !2447
  %2794 = icmp eq i64 %2775, 0
  %2795 = zext i1 %2794 to i8
  %2796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2795, i8* %2796, align 1, !tbaa !2448
  %2797 = lshr i64 %2775, 63
  %2798 = trunc i64 %2797 to i8
  %2799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2798, i8* %2799, align 1, !tbaa !2449
  %2800 = lshr i64 %2772, 63
  %2801 = xor i64 %2797, %2800
  %2802 = add nuw nsw i64 %2801, %2797
  %2803 = icmp eq i64 %2802, 2
  %2804 = zext i1 %2803 to i8
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2804, i8* %2805, align 1, !tbaa !2450
  %2806 = load i64, i64* %RBP
  %2807 = sub i64 %2806, 8
  %2808 = load i64, i64* %RCX
  %2809 = load i64, i64* %PC
  %2810 = add i64 %2809, 4
  store i64 %2810, i64* %PC
  %2811 = inttoptr i64 %2807 to i64*
  store i64 %2808, i64* %2811
  %2812 = load i64, i64* %RAX
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 3
  store i64 %2814, i64* %PC
  %2815 = inttoptr i64 %2812 to i32*
  %2816 = load i32, i32* %2815
  %2817 = sext i32 %2816 to i64
  store i64 %2817, i64* %RAX, align 8, !tbaa !2428
  %2818 = load i64, i64* %RAX
  %2819 = mul i64 %2818, 8
  %2820 = add i64 %2819, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 8
  store i64 %2822, i64* %PC
  %2823 = inttoptr i64 %2820 to i64*
  %2824 = load i64, i64* %2823
  store i64 %2824, i64* %RAX, align 8, !tbaa !2428
  %2825 = load i64, i64* %RBP
  %2826 = sub i64 %2825, 40
  %2827 = load i64, i64* %RAX
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 4
  store i64 %2829, i64* %PC
  %2830 = inttoptr i64 %2826 to i64*
  store i64 %2827, i64* %2830
  %2831 = load i64, i64* %PC
  %2832 = sub i64 %2831, 1201
  %2833 = load i64, i64* %PC
  %2834 = add i64 %2833, 5
  store i64 %2834, i64* %PC
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2832, i64* %2835, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2836 = load i64, i64* %RBP
  %2837 = sub i64 %2836, 12
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 7
  store i64 %2839, i64* %PC
  %2840 = inttoptr i64 %2837 to i32*
  store i32 6, i32* %2840
  %2841 = load i64, i64* %RBP
  %2842 = sub i64 %2841, 12
  %2843 = load i64, i64* %PC
  %2844 = add i64 %2843, 3
  store i64 %2844, i64* %PC
  %2845 = inttoptr i64 %2842 to i32*
  %2846 = load i32, i32* %2845
  %2847 = zext i32 %2846 to i64
  store i64 %2847, i64* %RDI, align 8, !tbaa !2428
  %2848 = load i64, i64* %PC
  %2849 = sub i64 %2848, 384
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 5
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 5
  store i64 %2853, i64* %PC
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2855 = load i64, i64* %2854, align 8, !tbaa !2428
  %2856 = add i64 %2855, -8
  %2857 = inttoptr i64 %2856 to i64*
  store i64 %2851, i64* %2857
  store i64 %2856, i64* %2854, align 8, !tbaa !2428
  %2858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2849, i64* %2858, align 8, !tbaa !2428
  %2859 = load i64, i64* %PC
  %2860 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2859, %struct.Memory* %MEMORY.0)
  %2861 = load i64, i64* %RBP
  %2862 = sub i64 %2861, 8
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 4
  store i64 %2864, i64* %PC
  %2865 = inttoptr i64 %2862 to i64*
  %2866 = load i64, i64* %2865
  store i64 %2866, i64* %RAX, align 8, !tbaa !2428
  %2867 = load i64, i64* %RAX
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 3
  store i64 %2869, i64* %PC
  store i64 %2867, i64* %RCX, align 8, !tbaa !2428
  %2870 = load i64, i64* %RCX
  %2871 = load i64, i64* %PC
  %2872 = add i64 %2871, 4
  store i64 %2872, i64* %PC
  %2873 = add i64 4, %2870
  store i64 %2873, i64* %RCX, align 8, !tbaa !2428
  %2874 = icmp ult i64 %2873, %2870
  %2875 = icmp ult i64 %2873, 4
  %2876 = or i1 %2874, %2875
  %2877 = zext i1 %2876 to i8
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2877, i8* %2878, align 1, !tbaa !2432
  %2879 = trunc i64 %2873 to i32
  %2880 = and i32 %2879, 255
  %2881 = call i32 @llvm.ctpop.i32(i32 %2880) #16
  %2882 = trunc i32 %2881 to i8
  %2883 = and i8 %2882, 1
  %2884 = xor i8 %2883, 1
  %2885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2884, i8* %2885, align 1, !tbaa !2446
  %2886 = xor i64 4, %2870
  %2887 = xor i64 %2886, %2873
  %2888 = lshr i64 %2887, 4
  %2889 = trunc i64 %2888 to i8
  %2890 = and i8 %2889, 1
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2890, i8* %2891, align 1, !tbaa !2447
  %2892 = icmp eq i64 %2873, 0
  %2893 = zext i1 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2893, i8* %2894, align 1, !tbaa !2448
  %2895 = lshr i64 %2873, 63
  %2896 = trunc i64 %2895 to i8
  %2897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2896, i8* %2897, align 1, !tbaa !2449
  %2898 = lshr i64 %2870, 63
  %2899 = xor i64 %2895, %2898
  %2900 = add nuw nsw i64 %2899, %2895
  %2901 = icmp eq i64 %2900, 2
  %2902 = zext i1 %2901 to i8
  %2903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2902, i8* %2903, align 1, !tbaa !2450
  %2904 = load i64, i64* %RBP
  %2905 = sub i64 %2904, 8
  %2906 = load i64, i64* %RCX
  %2907 = load i64, i64* %PC
  %2908 = add i64 %2907, 4
  store i64 %2908, i64* %PC
  %2909 = inttoptr i64 %2905 to i64*
  store i64 %2906, i64* %2909
  %2910 = load i64, i64* %RAX
  %2911 = load i64, i64* %PC
  %2912 = add i64 %2911, 3
  store i64 %2912, i64* %PC
  %2913 = inttoptr i64 %2910 to i32*
  %2914 = load i32, i32* %2913
  %2915 = sext i32 %2914 to i64
  store i64 %2915, i64* %RAX, align 8, !tbaa !2428
  %2916 = load i64, i64* %RAX
  %2917 = mul i64 %2916, 8
  %2918 = add i64 %2917, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 8
  store i64 %2920, i64* %PC
  %2921 = inttoptr i64 %2918 to i64*
  %2922 = load i64, i64* %2921
  store i64 %2922, i64* %RAX, align 8, !tbaa !2428
  %2923 = load i64, i64* %RBP
  %2924 = sub i64 %2923, 40
  %2925 = load i64, i64* %RAX
  %2926 = load i64, i64* %PC
  %2927 = add i64 %2926, 4
  store i64 %2927, i64* %PC
  %2928 = inttoptr i64 %2924 to i64*
  store i64 %2925, i64* %2928
  %2929 = load i64, i64* %PC
  %2930 = sub i64 %2929, 301
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 5
  store i64 %2932, i64* %PC
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2930, i64* %2933, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 12
  %2936 = load i64, i64* %PC
  %2937 = add i64 %2936, 7
  store i64 %2937, i64* %PC
  %2938 = inttoptr i64 %2935 to i32*
  store i32 29, i32* %2938
  %2939 = load i64, i64* %RBP
  %2940 = sub i64 %2939, 12
  %2941 = load i64, i64* %PC
  %2942 = add i64 %2941, 3
  store i64 %2942, i64* %PC
  %2943 = inttoptr i64 %2940 to i32*
  %2944 = load i32, i32* %2943
  %2945 = zext i32 %2944 to i64
  store i64 %2945, i64* %RDI, align 8, !tbaa !2428
  %2946 = load i64, i64* %PC
  %2947 = sub i64 %2946, 1534
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 5
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 5
  store i64 %2951, i64* %PC
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2953 = load i64, i64* %2952, align 8, !tbaa !2428
  %2954 = add i64 %2953, -8
  %2955 = inttoptr i64 %2954 to i64*
  store i64 %2949, i64* %2955
  store i64 %2954, i64* %2952, align 8, !tbaa !2428
  %2956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2947, i64* %2956, align 8, !tbaa !2428
  %2957 = load i64, i64* %PC
  %2958 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2957, %struct.Memory* %MEMORY.0)
  %2959 = load i64, i64* %RBP
  %2960 = sub i64 %2959, 8
  %2961 = load i64, i64* %PC
  %2962 = add i64 %2961, 4
  store i64 %2962, i64* %PC
  %2963 = inttoptr i64 %2960 to i64*
  %2964 = load i64, i64* %2963
  store i64 %2964, i64* %RAX, align 8, !tbaa !2428
  %2965 = load i64, i64* %RAX
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 3
  store i64 %2967, i64* %PC
  store i64 %2965, i64* %RCX, align 8, !tbaa !2428
  %2968 = load i64, i64* %RCX
  %2969 = load i64, i64* %PC
  %2970 = add i64 %2969, 4
  store i64 %2970, i64* %PC
  %2971 = add i64 4, %2968
  store i64 %2971, i64* %RCX, align 8, !tbaa !2428
  %2972 = icmp ult i64 %2971, %2968
  %2973 = icmp ult i64 %2971, 4
  %2974 = or i1 %2972, %2973
  %2975 = zext i1 %2974 to i8
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2975, i8* %2976, align 1, !tbaa !2432
  %2977 = trunc i64 %2971 to i32
  %2978 = and i32 %2977, 255
  %2979 = call i32 @llvm.ctpop.i32(i32 %2978) #16
  %2980 = trunc i32 %2979 to i8
  %2981 = and i8 %2980, 1
  %2982 = xor i8 %2981, 1
  %2983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2982, i8* %2983, align 1, !tbaa !2446
  %2984 = xor i64 4, %2968
  %2985 = xor i64 %2984, %2971
  %2986 = lshr i64 %2985, 4
  %2987 = trunc i64 %2986 to i8
  %2988 = and i8 %2987, 1
  %2989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2988, i8* %2989, align 1, !tbaa !2447
  %2990 = icmp eq i64 %2971, 0
  %2991 = zext i1 %2990 to i8
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2991, i8* %2992, align 1, !tbaa !2448
  %2993 = lshr i64 %2971, 63
  %2994 = trunc i64 %2993 to i8
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2994, i8* %2995, align 1, !tbaa !2449
  %2996 = lshr i64 %2968, 63
  %2997 = xor i64 %2993, %2996
  %2998 = add nuw nsw i64 %2997, %2993
  %2999 = icmp eq i64 %2998, 2
  %3000 = zext i1 %2999 to i8
  %3001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3000, i8* %3001, align 1, !tbaa !2450
  %3002 = load i64, i64* %RBP
  %3003 = sub i64 %3002, 8
  %3004 = load i64, i64* %RCX
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 4
  store i64 %3006, i64* %PC
  %3007 = inttoptr i64 %3003 to i64*
  store i64 %3004, i64* %3007
  %3008 = load i64, i64* %RAX
  %3009 = load i64, i64* %PC
  %3010 = add i64 %3009, 3
  store i64 %3010, i64* %PC
  %3011 = inttoptr i64 %3008 to i32*
  %3012 = load i32, i32* %3011
  %3013 = sext i32 %3012 to i64
  store i64 %3013, i64* %RAX, align 8, !tbaa !2428
  %3014 = load i64, i64* %RAX
  %3015 = mul i64 %3014, 8
  %3016 = add i64 %3015, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3017 = load i64, i64* %PC
  %3018 = add i64 %3017, 8
  store i64 %3018, i64* %PC
  %3019 = inttoptr i64 %3016 to i64*
  %3020 = load i64, i64* %3019
  store i64 %3020, i64* %RAX, align 8, !tbaa !2428
  %3021 = load i64, i64* %RBP
  %3022 = sub i64 %3021, 40
  %3023 = load i64, i64* %RAX
  %3024 = load i64, i64* %PC
  %3025 = add i64 %3024, 4
  store i64 %3025, i64* %PC
  %3026 = inttoptr i64 %3022 to i64*
  store i64 %3023, i64* %3026
  %3027 = load i64, i64* %PC
  %3028 = sub i64 %3027, 1451
  %3029 = load i64, i64* %PC
  %3030 = add i64 %3029, 5
  store i64 %3030, i64* %PC
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3028, i64* %3031, align 8, !tbaa !2428
  br label %block_400586

block_400881:                                     ; preds = %block_40087a, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40087a ]
  %3032 = load i64, i64* %RBP
  %3033 = sub i64 %3032, 12
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 3
  store i64 %3035, i64* %PC
  %3036 = inttoptr i64 %3033 to i32*
  %3037 = load i32, i32* %3036
  %3038 = zext i32 %3037 to i64
  store i64 %3038, i64* %RDI, align 8, !tbaa !2428
  %3039 = load i64, i64* %PC
  %3040 = sub i64 %3039, 884
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 5
  %3043 = load i64, i64* %PC
  %3044 = add i64 %3043, 5
  store i64 %3044, i64* %PC
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3046 = load i64, i64* %3045, align 8, !tbaa !2428
  %3047 = add i64 %3046, -8
  %3048 = inttoptr i64 %3047 to i64*
  store i64 %3042, i64* %3048
  store i64 %3047, i64* %3045, align 8, !tbaa !2428
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3040, i64* %3049, align 8, !tbaa !2428
  %3050 = load i64, i64* %PC
  %3051 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %3050, %struct.Memory* %MEMORY.1)
  %3052 = load i64, i64* %RBP
  %3053 = sub i64 %3052, 8
  %3054 = load i64, i64* %PC
  %3055 = add i64 %3054, 4
  store i64 %3055, i64* %PC
  %3056 = inttoptr i64 %3053 to i64*
  %3057 = load i64, i64* %3056
  store i64 %3057, i64* %RAX, align 8, !tbaa !2428
  %3058 = load i64, i64* %RAX
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 3
  store i64 %3060, i64* %PC
  store i64 %3058, i64* %RCX, align 8, !tbaa !2428
  %3061 = load i64, i64* %RCX
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 4
  store i64 %3063, i64* %PC
  %3064 = add i64 4, %3061
  store i64 %3064, i64* %RCX, align 8, !tbaa !2428
  %3065 = icmp ult i64 %3064, %3061
  %3066 = icmp ult i64 %3064, 4
  %3067 = or i1 %3065, %3066
  %3068 = zext i1 %3067 to i8
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3068, i8* %3069, align 1, !tbaa !2432
  %3070 = trunc i64 %3064 to i32
  %3071 = and i32 %3070, 255
  %3072 = call i32 @llvm.ctpop.i32(i32 %3071) #16
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3075, i8* %3076, align 1, !tbaa !2446
  %3077 = xor i64 4, %3061
  %3078 = xor i64 %3077, %3064
  %3079 = lshr i64 %3078, 4
  %3080 = trunc i64 %3079 to i8
  %3081 = and i8 %3080, 1
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3081, i8* %3082, align 1, !tbaa !2447
  %3083 = icmp eq i64 %3064, 0
  %3084 = zext i1 %3083 to i8
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3084, i8* %3085, align 1, !tbaa !2448
  %3086 = lshr i64 %3064, 63
  %3087 = trunc i64 %3086 to i8
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3087, i8* %3088, align 1, !tbaa !2449
  %3089 = lshr i64 %3061, 63
  %3090 = xor i64 %3086, %3089
  %3091 = add nuw nsw i64 %3090, %3086
  %3092 = icmp eq i64 %3091, 2
  %3093 = zext i1 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3093, i8* %3094, align 1, !tbaa !2450
  %3095 = load i64, i64* %RBP
  %3096 = sub i64 %3095, 8
  %3097 = load i64, i64* %RCX
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 4
  store i64 %3099, i64* %PC
  %3100 = inttoptr i64 %3096 to i64*
  store i64 %3097, i64* %3100
  %3101 = load i64, i64* %RAX
  %3102 = load i64, i64* %PC
  %3103 = add i64 %3102, 3
  store i64 %3103, i64* %PC
  %3104 = inttoptr i64 %3101 to i32*
  %3105 = load i32, i32* %3104
  %3106 = sext i32 %3105 to i64
  store i64 %3106, i64* %RAX, align 8, !tbaa !2428
  %3107 = load i64, i64* %RAX
  %3108 = mul i64 %3107, 8
  %3109 = add i64 %3108, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3110 = load i64, i64* %PC
  %3111 = add i64 %3110, 8
  store i64 %3111, i64* %PC
  %3112 = inttoptr i64 %3109 to i64*
  %3113 = load i64, i64* %3112
  store i64 %3113, i64* %RAX, align 8, !tbaa !2428
  %3114 = load i64, i64* %RBP
  %3115 = sub i64 %3114, 40
  %3116 = load i64, i64* %RAX
  %3117 = load i64, i64* %PC
  %3118 = add i64 %3117, 4
  store i64 %3118, i64* %PC
  %3119 = inttoptr i64 %3115 to i64*
  store i64 %3116, i64* %3119
  %3120 = load i64, i64* %PC
  %3121 = sub i64 %3120, 801
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 5
  store i64 %3123, i64* %PC
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3121, i64* %3124, align 8, !tbaa !2428
  br label %block_400586

; <label>:3125:                                   ; preds = %block_400586
  %3126 = load i64, i64* %PC
  %3127 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3126, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %3127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ba0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400ba0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 8224
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 8224
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 8224, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  store i32 2048, i32* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8212
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 10
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  store i32 0, i32* %99
  br label %block_400bc3

block_400c55:                                     ; preds = %block_400c25
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 10
  store i64 %101, i64* %PC
  store i64 add (i64 ptrtoint (%seg_400d00__rodata_type* @seg_400d00__rodata to i64), i64 264), i64* %RDI, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 7
  store i64 %103, i64* %PC
  %104 = load i32, i32* bitcast (%sum_type* @sum to i32*)
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %108 = load i64, i64* %PC
  %109 = sub i64 %108, 2136
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %111, i64* %117
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %109, i64* %118, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = call %struct.Memory* @ext_602138_printf(%struct.State* %0, i64 %119, %struct.Memory* %MEMORY.0)
  %121 = load i64, i64* %RSI
  %122 = load i32, i32* %ESI
  %123 = zext i32 %122 to i64
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 2
  store i64 %125, i64* %PC
  %126 = xor i64 %123, %121
  %127 = trunc i64 %126 to i32
  %128 = and i64 %126, 4294967295
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %129, align 1, !tbaa !2432
  %130 = and i32 %127, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = icmp eq i32 %127, 0
  %137 = zext i1 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = lshr i32 %127, 31
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %140, i8* %141, align 1, !tbaa !2449
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %142, align 1, !tbaa !2450
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %143, align 1, !tbaa !2447
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 8224
  %146 = load i32, i32* %EAX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 6
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %145 to i32*
  store i32 %146, i32* %150
  %151 = load i32, i32* %ESI
  %152 = zext i32 %151 to i64
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = and i64 %152, 4294967295
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RSP
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = add i64 8224, %156
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  %160 = icmp ult i64 %159, %156
  %161 = icmp ult i64 %159, 8224
  %162 = or i1 %160, %161
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2432
  %165 = trunc i64 %159 to i32
  %166 = and i32 %165, 255
  %167 = call i32 @llvm.ctpop.i32(i32 %166) #16
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %170, i8* %171, align 1, !tbaa !2446
  %172 = xor i64 8224, %156
  %173 = xor i64 %172, %159
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = icmp eq i64 %159, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = lshr i64 %159, 63
  %182 = trunc i64 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2449
  %184 = lshr i64 %156, 63
  %185 = xor i64 %181, %184
  %186 = add nuw nsw i64 %185, %181
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %188, i8* %189, align 1, !tbaa !2450
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 1
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %199, align 8, !tbaa !2428
  %204 = add i64 %201, 8
  store i64 %204, i64* %200, align 8, !tbaa !2428
  ret %struct.Memory* %120

block_400c14:                                     ; preds = %block_400bc3
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 20
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  store i32 0, i32* %209
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 8216
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 10
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  store i32 0, i32* %214
  br label %block_400c25

block_400c35:                                     ; preds = %block_400c25
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 8208
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %219 = load i64, i64* %PC
  %220 = sub i64 %219, 1804
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 5
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 5
  store i64 %224, i64* %PC
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %226 = load i64, i64* %225, align 8, !tbaa !2428
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  store i64 %222, i64* %228
  store i64 %227, i64* %225, align 8, !tbaa !2428
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %220, i64* %229, align 8, !tbaa !2428
  %230 = load i64, i64* %PC
  %231 = call %struct.Memory* @sub_400530_eval(%struct.State* %0, i64 %230, %struct.Memory* %MEMORY.0)
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 8216
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = trunc i64 %239 to i32
  %243 = add i32 1, %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = icmp ult i32 %243, %242
  %246 = icmp ult i32 %243, 1
  %247 = or i1 %245, %246
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %243, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 1, %239
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, %243
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2447
  %263 = icmp eq i32 %243, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = lshr i32 %243, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i32 %242, 31
  %270 = xor i32 %266, %269
  %271 = add nuw nsw i32 %270, %266
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8216
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 6
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 43
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_400c25

block_400bd3:                                     ; preds = %block_400bc3
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  store i64 31, i64* %RAX, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 8212
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 6
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 8220
  %298 = load i32, i32* %EAX
  %299 = zext i32 %298 to i64
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %297 to i32*
  store i32 %298, i32* %302
  %303 = load i32, i32* %ECX
  %304 = zext i32 %303 to i64
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 2
  store i64 %306, i64* %PC
  %307 = and i64 %304, 4294967295
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 1
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %312 = bitcast %union.anon* %311 to i32*
  %313 = load i32, i32* %312, align 8, !tbaa !2452
  %314 = sext i32 %313 to i64
  %315 = lshr i64 %314, 32
  store i64 %315, i64* %310, align 8, !tbaa !2428
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8220
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 6
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = zext i32 %321 to i64
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = load i32, i32* %ECX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 2
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %328 = bitcast %union.anon* %327 to i32*
  %329 = load i32, i32* %328, align 8, !tbaa !2452
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %332 = bitcast %union.anon* %331 to i32*
  %333 = load i32, i32* %332, align 8, !tbaa !2452
  %334 = zext i32 %333 to i64
  %335 = shl i64 %324, 32
  %336 = ashr exact i64 %335, 32
  %337 = shl nuw i64 %334, 32
  %338 = or i64 %337, %330
  %339 = sdiv i64 %338, %336
  %340 = shl i64 %339, 32
  %341 = ashr exact i64 %340, 32
  %342 = icmp eq i64 %339, %341
  br i1 %342, label %347, label %343

; <label>:343:                                    ; preds = %block_400bd3
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %345 = load i64, i64* %344, align 8, !tbaa !2428
  %346 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %345, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:347:                                    ; preds = %block_400bd3
  %348 = srem i64 %338, %336
  %349 = getelementptr inbounds %union.anon, %union.anon* %327, i64 0, i32 0
  %350 = and i64 %339, 4294967295
  store i64 %350, i64* %349, align 8, !tbaa !2428
  %351 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %352 = and i64 %348, 4294967295
  store i64 %352, i64* %351, align 8, !tbaa !2428
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %353, align 1, !tbaa !2432
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %354, align 1, !tbaa !2446
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %355, align 1, !tbaa !2447
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %356, align 1, !tbaa !2448
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %357, align 1, !tbaa !2449
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %358, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %343, %347
  %359 = phi %struct.Memory* [ %346, %343 ], [ %MEMORY.1, %347 ]
  %360 = load i64, i64* %RDX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = trunc i64 %360 to i32
  %364 = add i32 1, %363
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RDX, align 8, !tbaa !2428
  %366 = icmp ult i32 %364, %363
  %367 = icmp ult i32 %364, 1
  %368 = or i1 %366, %367
  %369 = zext i1 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %369, i8* %370, align 1, !tbaa !2432
  %371 = and i32 %364, 255
  %372 = call i32 @llvm.ctpop.i32(i32 %371) #16
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %375, i8* %376, align 1, !tbaa !2446
  %377 = xor i64 1, %360
  %378 = trunc i64 %377 to i32
  %379 = xor i32 %378, %364
  %380 = lshr i32 %379, 4
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %382, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i32 %364, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = lshr i32 %364, 31
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %388, i8* %389, align 1, !tbaa !2449
  %390 = lshr i32 %363, 31
  %391 = xor i32 %387, %390
  %392 = add nuw nsw i32 %391, %387
  %393 = icmp eq i32 %392, 2
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %394, i8* %395, align 1, !tbaa !2450
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 8212
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = load i64, i64* %RBP
  %404 = load i64, i64* %RSI
  %405 = mul i64 %404, 4
  %406 = add i64 %403, -8208
  %407 = add i64 %406, %405
  %408 = load i32, i32* %EDX
  %409 = zext i32 %408 to i64
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %412
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 8212
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 6
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %414 to i32*
  %418 = load i32, i32* %417
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RAX, align 8, !tbaa !2428
  %420 = load i64, i64* %RAX
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = trunc i64 %420 to i32
  %424 = add i32 1, %423
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = icmp ult i32 %424, %423
  %427 = icmp ult i32 %424, 1
  %428 = or i1 %426, %427
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %429, i8* %430, align 1, !tbaa !2432
  %431 = and i32 %424, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 1, %420
  %438 = trunc i64 %437 to i32
  %439 = xor i32 %438, %424
  %440 = lshr i32 %439, 4
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %442, i8* %443, align 1, !tbaa !2447
  %444 = icmp eq i32 %424, 0
  %445 = zext i1 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = lshr i32 %424, 31
  %448 = trunc i32 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %423, 31
  %451 = xor i32 %447, %450
  %452 = add nuw nsw i32 %451, %447
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %454, i8* %455, align 1, !tbaa !2450
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 8212
  %458 = load i32, i32* %EAX
  %459 = zext i32 %458 to i64
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 6
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %457 to i32*
  store i32 %458, i32* %462
  %463 = load i64, i64* %PC
  %464 = sub i64 %463, 76
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 5
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %464, i64* %467, align 8, !tbaa !2428
  br label %block_400bc3

block_400c25:                                     ; preds = %block_400c35, %block_400c14
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400c14 ], [ %231, %block_400c35 ]
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 8216
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 10
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %469 to i32*
  %473 = load i32, i32* %472
  %474 = sub i32 %473, 100000
  %475 = icmp ult i32 %473, 100000
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %476, i8* %477, align 1, !tbaa !2432
  %478 = and i32 %474, 255
  %479 = call i32 @llvm.ctpop.i32(i32 %478) #16
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %482, i8* %483, align 1, !tbaa !2446
  %484 = xor i32 %473, 100000
  %485 = xor i32 %484, %474
  %486 = lshr i32 %485, 4
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %488, i8* %489, align 1, !tbaa !2447
  %490 = icmp eq i32 %474, 0
  %491 = zext i1 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %491, i8* %492, align 1, !tbaa !2448
  %493 = lshr i32 %474, 31
  %494 = trunc i32 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %494, i8* %495, align 1, !tbaa !2449
  %496 = lshr i32 %473, 31
  %497 = xor i32 %493, %496
  %498 = add nuw nsw i32 %497, %496
  %499 = icmp eq i32 %498, 2
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %500, i8* %501, align 1, !tbaa !2450
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 38
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 6
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 6
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %509 = load i8, i8* %508, align 1, !tbaa !2449
  %510 = icmp ne i8 %509, 0
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %512 = load i8, i8* %511, align 1, !tbaa !2450
  %513 = icmp ne i8 %512, 0
  %514 = xor i1 %510, %513
  %515 = xor i1 %514, true
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %518 = select i1 %514, i64 %505, i64 %503
  store i64 %518, i64* %517, align 8, !tbaa !2428
  %519 = load i8, i8* %BRANCH_TAKEN
  %520 = icmp eq i8 %519, 1
  br i1 %520, label %block_400c55, label %block_400c35

block_400bc3:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400ba0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400ba0 ], [ %359, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 8212
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 10
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = sub i32 %526, 2047
  %528 = icmp ult i32 %526, 2047
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = and i32 %527, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = xor i32 %526, 2047
  %538 = xor i32 %537, %527
  %539 = lshr i32 %538, 4
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %541, i8* %542, align 1, !tbaa !2447
  %543 = icmp eq i32 %527, 0
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %544, i8* %545, align 1, !tbaa !2448
  %546 = lshr i32 %527, 31
  %547 = trunc i32 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %547, i8* %548, align 1, !tbaa !2449
  %549 = lshr i32 %526, 31
  %550 = xor i32 %546, %549
  %551 = add nuw nsw i32 %550, %549
  %552 = icmp eq i32 %551, 2
  %553 = zext i1 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %553, i8* %554, align 1, !tbaa !2450
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 71
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 6
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 6
  store i64 %560, i64* %PC
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %562 = load i8, i8* %561, align 1, !tbaa !2449
  %563 = icmp ne i8 %562, 0
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %565 = load i8, i8* %564, align 1, !tbaa !2450
  %566 = icmp ne i8 %565, 0
  %567 = xor i1 %563, %566
  %568 = xor i1 %567, true
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %571 = select i1 %567, i64 %558, i64 %556
  store i64 %571, i64* %570, align 8, !tbaa !2428
  %572 = load i8, i8* %BRANCH_TAKEN
  %573 = icmp eq i8 %572, 1
  br i1 %573, label %block_400c14, label %block_400bd3
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005f7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4005f7

block_4005f0:                                     ; preds = %block_400586
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 3, i32* %23
  br label %block_4005f7

block_4007e4:                                     ; preds = %block_400586
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 7
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  store i32 13, i32* %28
  %29 = load i64, i64* %PC
  %30 = tail call %struct.Memory* @sub_4007eb(%struct.State* %0, i64 %29, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %30

block_4008de:                                     ; preds = %block_400586
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 12
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 7
  store i64 %34, i64* %PC
  %35 = inttoptr i64 %32 to i32*
  store i32 18, i32* %35
  %36 = load i64, i64* %PC
  %37 = tail call %struct.Memory* @sub_4008e5(%struct.State* %0, i64 %36, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %37

block_4009d8:                                     ; preds = %block_400586
  %38 = load i64, i64* %RBP
  %39 = sub i64 %38, 12
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 7
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %39 to i32*
  store i32 23, i32* %42
  %43 = load i64, i64* %PC
  %44 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %43, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %44

block_400ad2:                                     ; preds = %block_400586
  %45 = load i64, i64* %RBP
  %46 = sub i64 %45, 12
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 7
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %46 to i32*
  store i32 28, i32* %49
  %50 = load i64, i64* %PC
  %51 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %50, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %51

block_4006b8:                                     ; preds = %block_400586
  %52 = load i64, i64* %RBP
  %53 = sub i64 %52, 12
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i32*
  store i32 7, i32* %56
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 12
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = sub i64 %64, 434
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 5
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %67, i64* %73
  store i64 %72, i64* %70, align 8, !tbaa !2428
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %65, i64* %74, align 8, !tbaa !2428
  %75 = load i64, i64* %PC
  %76 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %75, %struct.Memory* %MEMORY.1)
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 8
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %RAX
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  store i64 %83, i64* %RCX, align 8, !tbaa !2428
  %86 = load i64, i64* %RCX
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = add i64 4, %86
  store i64 %89, i64* %RCX, align 8, !tbaa !2428
  %90 = icmp ult i64 %89, %86
  %91 = icmp ult i64 %89, 4
  %92 = or i1 %90, %91
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %93, i8* %94, align 1, !tbaa !2432
  %95 = trunc i64 %89 to i32
  %96 = and i32 %95, 255
  %97 = call i32 @llvm.ctpop.i32(i32 %96) #16
  %98 = trunc i32 %97 to i8
  %99 = and i8 %98, 1
  %100 = xor i8 %99, 1
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %100, i8* %101, align 1, !tbaa !2446
  %102 = xor i64 4, %86
  %103 = xor i64 %102, %89
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %106, i8* %107, align 1, !tbaa !2447
  %108 = icmp eq i64 %89, 0
  %109 = zext i1 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %109, i8* %110, align 1, !tbaa !2448
  %111 = lshr i64 %89, 63
  %112 = trunc i64 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = lshr i64 %86, 63
  %115 = xor i64 %111, %114
  %116 = add nuw nsw i64 %115, %111
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %118, i8* %119, align 1, !tbaa !2450
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 8
  %122 = load i64, i64* %RCX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %121 to i64*
  store i64 %122, i64* %125
  %126 = load i64, i64* %RAX
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %RAX
  %133 = mul i64 %132, 8
  %134 = add i64 %133, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 8
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 40
  %141 = load i64, i64* %RAX
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 4
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %140 to i64*
  store i64 %141, i64* %144
  %145 = load i64, i64* %PC
  %146 = sub i64 %145, 351
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %146, i64* %149, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 12
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 7
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 12, i32* %154
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 12
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  %160 = load i32, i32* %159
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %RDI, align 8, !tbaa !2428
  %162 = load i64, i64* %PC
  %163 = sub i64 %162, 684
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %165, i64* %171
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %172, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %173, %struct.Memory* %MEMORY.1)
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 8
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = load i64, i64* %RAX
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  store i64 %181, i64* %RCX, align 8, !tbaa !2428
  %184 = load i64, i64* %RCX
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC
  %187 = add i64 4, %184
  store i64 %187, i64* %RCX, align 8, !tbaa !2428
  %188 = icmp ult i64 %187, %184
  %189 = icmp ult i64 %187, 4
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %191, i8* %192, align 1, !tbaa !2432
  %193 = trunc i64 %187 to i32
  %194 = and i32 %193, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2446
  %200 = xor i64 4, %184
  %201 = xor i64 %200, %187
  %202 = lshr i64 %201, 4
  %203 = trunc i64 %202 to i8
  %204 = and i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = icmp eq i64 %187, 0
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %207, i8* %208, align 1, !tbaa !2448
  %209 = lshr i64 %187, 63
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %210, i8* %211, align 1, !tbaa !2449
  %212 = lshr i64 %184, 63
  %213 = xor i64 %209, %212
  %214 = add nuw nsw i64 %213, %209
  %215 = icmp eq i64 %214, 2
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 8
  %220 = load i64, i64* %RCX
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %219 to i64*
  store i64 %220, i64* %223
  %224 = load i64, i64* %RAX
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227
  %229 = sext i32 %228 to i64
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RAX
  %231 = mul i64 %230, 8
  %232 = add i64 %231, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 8
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 40
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242
  %243 = load i64, i64* %PC
  %244 = sub i64 %243, 601
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 5
  store i64 %246, i64* %PC
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %244, i64* %247, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 12
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 7
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i32*
  store i32 17, i32* %252
  %253 = load i64, i64* %PC
  %254 = tail call %struct.Memory* @sub_4008b3(%struct.State* %0, i64 %253, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %254

block_4005f7:                                     ; preds = %block_4005f0, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4005f0 ]
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 12
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 234
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %272, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %273, %struct.Memory* %MEMORY.0)
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RAX
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %284 = load i64, i64* %RCX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 4, %284
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 4
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2432
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2446
  %300 = xor i64 4, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2447
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2450
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %RCX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX
  %331 = mul i64 %330, 8
  %332 = add i64 %331, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 8
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 40
  %339 = load i64, i64* %RAX
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 151
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %347, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 12
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  store i32 22, i32* %352
  %353 = load i64, i64* %PC
  %354 = tail call %struct.Memory* @sub_4009ad(%struct.State* %0, i64 %353, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %354

block_400aa0:                                     ; preds = %block_400586
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 12
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 7
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i32*
  store i32 27, i32* %359
  %360 = load i64, i64* %PC
  %361 = tail call %struct.Memory* @sub_400aa7(%struct.State* %0, i64 %360, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %361

block_40058c:                                     ; preds = %block_400586
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 12
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 7
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  store i32 1, i32* %366
  %367 = load i64, i64* %PC
  %368 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %367, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %368

block_400686:                                     ; preds = %block_400586
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 6, i32* %373
  %374 = load i64, i64* %PC
  %375 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %374, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %375

block_40087a:                                     ; preds = %block_400586
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 12
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 7
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  store i32 16, i32* %380
  %381 = load i64, i64* %PC
  %382 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %381, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %382

block_400974:                                     ; preds = %block_400586
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 12
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 7
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  store i32 21, i32* %387
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 12
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 3
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to i32*
  %393 = load i32, i32* %392
  %394 = zext i32 %393 to i64
  store i64 %394, i64* %RDI, align 8, !tbaa !2428
  %395 = load i64, i64* %PC
  %396 = sub i64 %395, 1134
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 5
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 5
  store i64 %400, i64* %PC
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %402 = load i64, i64* %401, align 8, !tbaa !2428
  %403 = add i64 %402, -8
  %404 = inttoptr i64 %403 to i64*
  store i64 %398, i64* %404
  store i64 %403, i64* %401, align 8, !tbaa !2428
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %396, i64* %405, align 8, !tbaa !2428
  %406 = load i64, i64* %PC
  %407 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %406, %struct.Memory* %MEMORY.1)
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 8
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i64, i64* %RAX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 3
  store i64 %416, i64* %PC
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %417 = load i64, i64* %RCX
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  %420 = add i64 4, %417
  store i64 %420, i64* %RCX, align 8, !tbaa !2428
  %421 = icmp ult i64 %420, %417
  %422 = icmp ult i64 %420, 4
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %424, i8* %425, align 1, !tbaa !2432
  %426 = trunc i64 %420 to i32
  %427 = and i32 %426, 255
  %428 = call i32 @llvm.ctpop.i32(i32 %427) #16
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %431, i8* %432, align 1, !tbaa !2446
  %433 = xor i64 4, %417
  %434 = xor i64 %433, %420
  %435 = lshr i64 %434, 4
  %436 = trunc i64 %435 to i8
  %437 = and i8 %436, 1
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %437, i8* %438, align 1, !tbaa !2447
  %439 = icmp eq i64 %420, 0
  %440 = zext i1 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %440, i8* %441, align 1, !tbaa !2448
  %442 = lshr i64 %420, 63
  %443 = trunc i64 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %443, i8* %444, align 1, !tbaa !2449
  %445 = lshr i64 %417, 63
  %446 = xor i64 %442, %445
  %447 = add nuw nsw i64 %446, %442
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %449, i8* %450, align 1, !tbaa !2450
  %451 = load i64, i64* %RBP
  %452 = sub i64 %451, 8
  %453 = load i64, i64* %RCX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = inttoptr i64 %452 to i64*
  store i64 %453, i64* %456
  %457 = load i64, i64* %RAX
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460
  %462 = sext i32 %461 to i64
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = mul i64 %463, 8
  %465 = add i64 %464, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 8
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RBP
  %471 = sub i64 %470, 40
  %472 = load i64, i64* %RAX
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %471 to i64*
  store i64 %472, i64* %475
  %476 = load i64, i64* %PC
  %477 = sub i64 %476, 1051
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %477, i64* %480, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 7
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  store i32 26, i32* %485
  %486 = load i64, i64* %PC
  %487 = tail call %struct.Memory* @sub_400a75(%struct.State* %0, i64 %486, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %487

block_400780:                                     ; preds = %block_400586
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 12
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i32*
  store i32 11, i32* %492
  %493 = load i64, i64* %PC
  %494 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %493, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %494

block_400b68:                                     ; preds = %block_400586
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 12
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 7
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  store i32 31, i32* %499
  %500 = load i64, i64* %PC
  %501 = tail call %struct.Memory* @sub_400b6f(%struct.State* %0, i64 %500, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %501

block_400654:                                     ; preds = %block_400586
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 12
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 7
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i32*
  store i32 5, i32* %506
  %507 = load i64, i64* %PC
  %508 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %507, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %508

block_40074e:                                     ; preds = %block_400586
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 12
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 7
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  store i32 10, i32* %513
  %514 = load i64, i64* %PC
  %515 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %514, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %515

block_400848:                                     ; preds = %block_400586
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 15, i32* %520
  %521 = load i64, i64* %PC
  %522 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %521, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %522

block_4005be:                                     ; preds = %block_400586
  %523 = load i64, i64* %RBP
  %524 = sub i64 %523, 12
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 7
  store i64 %526, i64* %PC
  %527 = inttoptr i64 %524 to i32*
  store i32 2, i32* %527
  %528 = load i64, i64* %PC
  %529 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %528, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %529

block_400942:                                     ; preds = %block_400586
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 20, i32* %534
  %535 = load i64, i64* %PC
  %536 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %535, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %536

block_4006ea:                                     ; preds = %block_400586
  %537 = load i64, i64* %RBP
  %538 = sub i64 %537, 12
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 7
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %538 to i32*
  store i32 8, i32* %541
  %542 = load i64, i64* %PC
  %543 = tail call %struct.Memory* @sub_4006f1(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %543

block_400579:                                     ; preds = %block_400586
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 12
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 7
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i32*
  store i32 0, i32* %548
  %549 = load i64, i64* %PC
  %550 = tail call %struct.Memory* @sub_400580(%struct.State* %0, i64 %549, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %550

block_400a3c:                                     ; preds = %block_400586
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 12
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 7
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i32*
  store i32 25, i32* %555
  %556 = load i64, i64* %PC
  %557 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %556, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %557

block_400b36:                                     ; preds = %block_400586
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 12
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 7
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %559 to i32*
  store i32 30, i32* %562
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 12
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %RDI, align 8, !tbaa !2428
  %570 = load i64, i64* %PC
  %571 = sub i64 %570, 1584
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 5
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 5
  store i64 %575, i64* %PC
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %577 = load i64, i64* %576, align 8, !tbaa !2428
  %578 = add i64 %577, -8
  %579 = inttoptr i64 %578 to i64*
  store i64 %573, i64* %579
  store i64 %578, i64* %576, align 8, !tbaa !2428
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %571, i64* %580, align 8, !tbaa !2428
  %581 = load i64, i64* %PC
  %582 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %581, %struct.Memory* %MEMORY.1)
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 8
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = load i64, i64* %RAX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %592 = load i64, i64* %RCX
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC
  %595 = add i64 4, %592
  store i64 %595, i64* %RCX, align 8, !tbaa !2428
  %596 = icmp ult i64 %595, %592
  %597 = icmp ult i64 %595, 4
  %598 = or i1 %596, %597
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %599, i8* %600, align 1, !tbaa !2432
  %601 = trunc i64 %595 to i32
  %602 = and i32 %601, 255
  %603 = call i32 @llvm.ctpop.i32(i32 %602) #16
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %606, i8* %607, align 1, !tbaa !2446
  %608 = xor i64 4, %592
  %609 = xor i64 %608, %595
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %612, i8* %613, align 1, !tbaa !2447
  %614 = icmp eq i64 %595, 0
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %615, i8* %616, align 1, !tbaa !2448
  %617 = lshr i64 %595, 63
  %618 = trunc i64 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %618, i8* %619, align 1, !tbaa !2449
  %620 = lshr i64 %592, 63
  %621 = xor i64 %617, %620
  %622 = add nuw nsw i64 %621, %617
  %623 = icmp eq i64 %622, 2
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %624, i8* %625, align 1, !tbaa !2450
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 8
  %628 = load i64, i64* %RCX
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 4
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %627 to i64*
  store i64 %628, i64* %631
  %632 = load i64, i64* %RAX
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 3
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i32*
  %636 = load i32, i32* %635
  %637 = sext i32 %636 to i64
  store i64 %637, i64* %RAX, align 8, !tbaa !2428
  %638 = load i64, i64* %RAX
  %639 = mul i64 %638, 8
  %640 = add i64 %639, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 8
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 40
  %647 = load i64, i64* %RAX
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 4
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %646 to i64*
  store i64 %647, i64* %650
  %651 = load i64, i64* %PC
  %652 = sub i64 %651, 1501
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 5
  store i64 %654, i64* %PC
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %652, i64* %655, align 8, !tbaa !2428
  br label %block_400586

block_400622:                                     ; preds = %block_400586
  %656 = load i64, i64* %RBP
  %657 = sub i64 %656, 12
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 7
  store i64 %659, i64* %PC
  %660 = inttoptr i64 %657 to i32*
  store i32 4, i32* %660
  %661 = load i64, i64* %PC
  %662 = tail call %struct.Memory* @sub_400629(%struct.State* %0, i64 %661, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %662

block_40071c:                                     ; preds = %block_400586
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 12
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 7
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i32*
  store i32 9, i32* %667
  %668 = load i64, i64* %PC
  %669 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %668, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %669

block_400586:                                     ; preds = %block_400b36, %block_400974, %block_4005f7, %block_4007b2, %block_4006b8
  %MEMORY.1 = phi %struct.Memory* [ %274, %block_4005f7 ], [ %407, %block_400974 ], [ %174, %block_4007b2 ], [ %76, %block_4006b8 ], [ %582, %block_400b36 ]
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 40
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674
  store i64 %675, i64* %RAX, align 8, !tbaa !2428
  %676 = load i64, i64* %RAX
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 2
  store i64 %678, i64* %PC
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %676, i64* %679, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  switch i64 %680, label %709 [
    i64 4197124, label %block_400b04
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195874, label %block_400622
    i64 4197174, label %block_400b36
    i64 4196924, label %block_400a3c
    i64 4197024, label %block_400aa0
    i64 4196774, label %block_4009a6
    i64 4196524, label %block_4008ac
    i64 4197074, label %block_400ad2
    i64 4195924, label %block_400654
    i64 4195824, label %block_4005f0
    i64 4195705, label %block_400579
    i64 4196974, label %block_400a6e
    i64 4196324, label %block_4007e4
    i64 4196024, label %block_4006b8
    i64 4196574, label %block_4008de
    i64 4196274, label %block_4007b2
    i64 4195724, label %block_40058c
    i64 4196824, label %block_4009d8
    i64 4195974, label %block_400686
    i64 4196474, label %block_40087a
    i64 4196724, label %block_400974
    i64 4196224, label %block_400780
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4195774, label %block_4005be
    i64 4196674, label %block_400942
  ]

block_400816:                                     ; preds = %block_400586
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 12
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 7
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %682 to i32*
  store i32 14, i32* %685
  %686 = load i64, i64* %PC
  %687 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %686, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %687

block_400910:                                     ; preds = %block_400586
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 12
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  store i32 19, i32* %692
  %693 = load i64, i64* %PC
  %694 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %693, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %694

block_400a0a:                                     ; preds = %block_400586
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 12
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  store i32 24, i32* %699
  %700 = load i64, i64* %PC
  %701 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %700, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %701

block_400b04:                                     ; preds = %block_400586
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 12
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 7
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i32*
  store i32 29, i32* %706
  %707 = load i64, i64* %PC
  %708 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %707, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %708

; <label>:709:                                    ; preds = %block_400586
  %710 = load i64, i64* %PC
  %711 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %710, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %711
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a11(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400a11

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400579:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 0, i32* %33
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = add i64 48, %34
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %37, %34
  %39 = icmp ult i64 %37, 48
  %40 = or i1 %38, %39
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %37 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 48, %34
  %51 = xor i64 %50, %37
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %37, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %37, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %34, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %59
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 1
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !2428
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  store i64 %72, i64* %70, align 8, !tbaa !2428
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005f0:                                     ; preds = %block_400586
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 12
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 7
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  store i32 3, i32* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 12
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 3
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i32*
  %93 = load i32, i32* %92
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 234
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %96, i64* %105, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %106, %struct.Memory* %MEMORY.0)
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RAX
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  store i64 %114, i64* %RCX, align 8, !tbaa !2428
  %117 = load i64, i64* %RCX
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = add i64 4, %117
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ult i64 %120, %117
  %122 = icmp ult i64 %120, 4
  %123 = or i1 %121, %122
  %124 = zext i1 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %124, i8* %125, align 1, !tbaa !2432
  %126 = trunc i64 %120 to i32
  %127 = and i32 %126, 255
  %128 = call i32 @llvm.ctpop.i32(i32 %127) #16
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %131, i8* %132, align 1, !tbaa !2446
  %133 = xor i64 4, %117
  %134 = xor i64 %133, %120
  %135 = lshr i64 %134, 4
  %136 = trunc i64 %135 to i8
  %137 = and i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %137, i8* %138, align 1, !tbaa !2447
  %139 = icmp eq i64 %120, 0
  %140 = zext i1 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = lshr i64 %120, 63
  %143 = trunc i64 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %117, 63
  %146 = xor i64 %142, %145
  %147 = add nuw nsw i64 %146, %142
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %149, i8* %150, align 1, !tbaa !2450
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 8
  %153 = load i64, i64* %RCX
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %156
  %157 = load i64, i64* %RAX
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = load i64, i64* %RAX
  %164 = mul i64 %163, 8
  %165 = add i64 %164, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 8
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 40
  %172 = load i64, i64* %RAX
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* %PC
  %177 = sub i64 %176, 151
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %180, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 12
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i32*
  store i32 8, i32* %185
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 12
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RDI, align 8, !tbaa !2428
  %193 = load i64, i64* %PC
  %194 = sub i64 %193, 484
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %200 = load i64, i64* %199, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %196, i64* %202
  store i64 %201, i64* %199, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  %205 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %204, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 8
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RAX
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %215 = load i64, i64* %RCX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = add i64 4, %215
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = icmp ult i64 %218, %215
  %220 = icmp ult i64 %218, 4
  %221 = or i1 %219, %220
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %222, i8* %223, align 1, !tbaa !2432
  %224 = trunc i64 %218 to i32
  %225 = and i32 %224, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2446
  %231 = xor i64 4, %215
  %232 = xor i64 %231, %218
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = icmp eq i64 %218, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2448
  %240 = lshr i64 %218, 63
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2449
  %243 = lshr i64 %215, 63
  %244 = xor i64 %240, %243
  %245 = add nuw nsw i64 %244, %240
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2450
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 8
  %251 = load i64, i64* %RCX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  %255 = load i64, i64* %RAX
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 3
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = load i64, i64* %RAX
  %262 = mul i64 %261, 8
  %263 = add i64 %262, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 8
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 40
  %270 = load i64, i64* %RAX
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 4
  store i64 %272, i64* %PC
  %273 = inttoptr i64 %269 to i64*
  store i64 %270, i64* %273
  %274 = load i64, i64* %PC
  %275 = sub i64 %274, 401
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %275, i64* %278, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %279 = load i64, i64* %RBP
  %280 = sub i64 %279, 12
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 7
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %280 to i32*
  store i32 31, i32* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 12
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  %289 = load i32, i32* %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  %291 = load i64, i64* %PC
  %292 = sub i64 %291, 1634
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %298 = load i64, i64* %297, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %294, i64* %300
  store i64 %299, i64* %297, align 8, !tbaa !2428
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %292, i64* %301, align 8, !tbaa !2428
  %302 = load i64, i64* %PC
  %303 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %302, %struct.Memory* %MEMORY.0)
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 8
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %313 = load i64, i64* %RCX
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = add i64 4, %313
  store i64 %316, i64* %RCX, align 8, !tbaa !2428
  %317 = icmp ult i64 %316, %313
  %318 = icmp ult i64 %316, 4
  %319 = or i1 %317, %318
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %320, i8* %321, align 1, !tbaa !2432
  %322 = trunc i64 %316 to i32
  %323 = and i32 %322, 255
  %324 = call i32 @llvm.ctpop.i32(i32 %323) #16
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %327, i8* %328, align 1, !tbaa !2446
  %329 = xor i64 4, %313
  %330 = xor i64 %329, %316
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = icmp eq i64 %316, 0
  %336 = zext i1 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %336, i8* %337, align 1, !tbaa !2448
  %338 = lshr i64 %316, 63
  %339 = trunc i64 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %339, i8* %340, align 1, !tbaa !2449
  %341 = lshr i64 %313, 63
  %342 = xor i64 %338, %341
  %343 = add nuw nsw i64 %342, %338
  %344 = icmp eq i64 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 8
  %349 = load i64, i64* %RCX
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %348 to i64*
  store i64 %349, i64* %352
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 3
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  %357 = load i32, i32* %356
  %358 = sext i32 %357 to i64
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = load i64, i64* %RAX
  %360 = mul i64 %359, 8
  %361 = add i64 %360, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 8
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 40
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %PC
  %373 = sub i64 %372, 1551
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  store i64 %375, i64* %PC
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %376, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 12
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 7
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  store i32 13, i32* %381
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 12
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  %387 = load i32, i32* %386
  %388 = zext i32 %387 to i64
  store i64 %388, i64* %RDI, align 8, !tbaa !2428
  %389 = load i64, i64* %PC
  %390 = sub i64 %389, 734
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %396 = load i64, i64* %395, align 8, !tbaa !2428
  %397 = add i64 %396, -8
  %398 = inttoptr i64 %397 to i64*
  store i64 %392, i64* %398
  store i64 %397, i64* %395, align 8, !tbaa !2428
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %390, i64* %399, align 8, !tbaa !2428
  %400 = load i64, i64* %PC
  %401 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %400, %struct.Memory* %MEMORY.0)
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 8
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = load i64, i64* %RAX
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  store i64 %408, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RCX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = add i64 4, %411
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = icmp ult i64 %414, %411
  %416 = icmp ult i64 %414, 4
  %417 = or i1 %415, %416
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %418, i8* %419, align 1, !tbaa !2432
  %420 = trunc i64 %414 to i32
  %421 = and i32 %420, 255
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %425, i8* %426, align 1, !tbaa !2446
  %427 = xor i64 4, %411
  %428 = xor i64 %427, %414
  %429 = lshr i64 %428, 4
  %430 = trunc i64 %429 to i8
  %431 = and i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %431, i8* %432, align 1, !tbaa !2447
  %433 = icmp eq i64 %414, 0
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %434, i8* %435, align 1, !tbaa !2448
  %436 = lshr i64 %414, 63
  %437 = trunc i64 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %437, i8* %438, align 1, !tbaa !2449
  %439 = lshr i64 %411, 63
  %440 = xor i64 %436, %439
  %441 = add nuw nsw i64 %440, %436
  %442 = icmp eq i64 %441, 2
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %443, i8* %444, align 1, !tbaa !2450
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 8
  %447 = load i64, i64* %RCX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %446 to i64*
  store i64 %447, i64* %450
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = load i64, i64* %RAX
  %458 = mul i64 %457, 8
  %459 = add i64 %458, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 8
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 40
  %466 = load i64, i64* %RAX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = inttoptr i64 %465 to i64*
  store i64 %466, i64* %469
  %470 = load i64, i64* %PC
  %471 = sub i64 %470, 651
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  store i64 %473, i64* %PC
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %471, i64* %474, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 12
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 7
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i32*
  store i32 18, i32* %479
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 12
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RDI, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = sub i64 %487, 984
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  store i64 %492, i64* %PC
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %494 = load i64, i64* %493, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %490, i64* %496
  store i64 %495, i64* %493, align 8, !tbaa !2428
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %488, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  %499 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %498, %struct.Memory* %MEMORY.0)
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  store i64 %506, i64* %RCX, align 8, !tbaa !2428
  %509 = load i64, i64* %RCX
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC
  %512 = add i64 4, %509
  store i64 %512, i64* %RCX, align 8, !tbaa !2428
  %513 = icmp ult i64 %512, %509
  %514 = icmp ult i64 %512, 4
  %515 = or i1 %513, %514
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %516, i8* %517, align 1, !tbaa !2432
  %518 = trunc i64 %512 to i32
  %519 = and i32 %518, 255
  %520 = call i32 @llvm.ctpop.i32(i32 %519) #16
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = xor i8 %522, 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %523, i8* %524, align 1, !tbaa !2446
  %525 = xor i64 4, %509
  %526 = xor i64 %525, %512
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %529, i8* %530, align 1, !tbaa !2447
  %531 = icmp eq i64 %512, 0
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %532, i8* %533, align 1, !tbaa !2448
  %534 = lshr i64 %512, 63
  %535 = trunc i64 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %535, i8* %536, align 1, !tbaa !2449
  %537 = lshr i64 %509, 63
  %538 = xor i64 %534, %537
  %539 = add nuw nsw i64 %538, %534
  %540 = icmp eq i64 %539, 2
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %541, i8* %542, align 1, !tbaa !2450
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 8
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %544 to i64*
  store i64 %545, i64* %548
  %549 = load i64, i64* %RAX
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = sext i32 %553 to i64
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = load i64, i64* %RAX
  %556 = mul i64 %555, 8
  %557 = add i64 %556, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 8
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i64*
  %561 = load i64, i64* %560
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 40
  %564 = load i64, i64* %RAX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %563 to i64*
  store i64 %564, i64* %567
  %568 = load i64, i64* %PC
  %569 = sub i64 %568, 901
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 5
  store i64 %571, i64* %PC
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %569, i64* %572, align 8, !tbaa !2428
  br label %block_400586

block_400974:                                     ; preds = %block_400586
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 12
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 7
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i32*
  store i32 21, i32* %577
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 12
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RDI, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = sub i64 %585, 1134
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 5
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 5
  store i64 %590, i64* %PC
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %592 = load i64, i64* %591, align 8, !tbaa !2428
  %593 = add i64 %592, -8
  %594 = inttoptr i64 %593 to i64*
  store i64 %588, i64* %594
  store i64 %593, i64* %591, align 8, !tbaa !2428
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %586, i64* %595, align 8, !tbaa !2428
  %596 = load i64, i64* %PC
  %597 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %596, %struct.Memory* %MEMORY.0)
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %607 = load i64, i64* %RCX
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = add i64 4, %607
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = icmp ult i64 %610, %607
  %612 = icmp ult i64 %610, 4
  %613 = or i1 %611, %612
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %614, i8* %615, align 1, !tbaa !2432
  %616 = trunc i64 %610 to i32
  %617 = and i32 %616, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2446
  %623 = xor i64 4, %607
  %624 = xor i64 %623, %610
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %627, i8* %628, align 1, !tbaa !2447
  %629 = icmp eq i64 %610, 0
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %630, i8* %631, align 1, !tbaa !2448
  %632 = lshr i64 %610, 63
  %633 = trunc i64 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %633, i8* %634, align 1, !tbaa !2449
  %635 = lshr i64 %607, 63
  %636 = xor i64 %632, %635
  %637 = add nuw nsw i64 %636, %632
  %638 = icmp eq i64 %637, 2
  %639 = zext i1 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %639, i8* %640, align 1, !tbaa !2450
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 8
  %643 = load i64, i64* %RCX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %642 to i64*
  store i64 %643, i64* %646
  %647 = load i64, i64* %RAX
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 3
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sext i32 %651 to i64
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = mul i64 %653, 8
  %655 = add i64 %654, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 8
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658
  store i64 %659, i64* %RAX, align 8, !tbaa !2428
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 40
  %662 = load i64, i64* %RAX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %661 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %PC
  %667 = sub i64 %666, 1051
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 5
  store i64 %669, i64* %PC
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %667, i64* %670, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 12
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 7
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %672 to i32*
  store i32 26, i32* %675
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 12
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i32*
  %681 = load i32, i32* %680
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDI, align 8, !tbaa !2428
  %683 = load i64, i64* %PC
  %684 = sub i64 %683, 1384
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 5
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  store i64 %688, i64* %PC
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %690 = load i64, i64* %689, align 8, !tbaa !2428
  %691 = add i64 %690, -8
  %692 = inttoptr i64 %691 to i64*
  store i64 %686, i64* %692
  store i64 %691, i64* %689, align 8, !tbaa !2428
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %684, i64* %693, align 8, !tbaa !2428
  %694 = load i64, i64* %PC
  %695 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %694, %struct.Memory* %MEMORY.0)
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %705 = load i64, i64* %RCX
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = add i64 4, %705
  store i64 %708, i64* %RCX, align 8, !tbaa !2428
  %709 = icmp ult i64 %708, %705
  %710 = icmp ult i64 %708, 4
  %711 = or i1 %709, %710
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = trunc i64 %708 to i32
  %715 = and i32 %714, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = xor i64 4, %705
  %722 = xor i64 %721, %708
  %723 = lshr i64 %722, 4
  %724 = trunc i64 %723 to i8
  %725 = and i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = icmp eq i64 %708, 0
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = lshr i64 %708, 63
  %731 = trunc i64 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i64 %705, 63
  %734 = xor i64 %730, %733
  %735 = add nuw nsw i64 %734, %730
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 8
  %741 = load i64, i64* %RCX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %740 to i64*
  store i64 %741, i64* %744
  %745 = load i64, i64* %RAX
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = mul i64 %751, 8
  %753 = add i64 %752, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 8
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 40
  %760 = load i64, i64* %RAX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 4
  store i64 %762, i64* %PC
  %763 = inttoptr i64 %759 to i64*
  store i64 %760, i64* %763
  %764 = load i64, i64* %PC
  %765 = sub i64 %764, 1301
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 5
  store i64 %767, i64* %PC
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %765, i64* %768, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 12
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 7
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i32*
  store i32 5, i32* %773
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 12
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to i32*
  %779 = load i32, i32* %778
  %780 = zext i32 %779 to i64
  store i64 %780, i64* %RDI, align 8, !tbaa !2428
  %781 = load i64, i64* %PC
  %782 = sub i64 %781, 334
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 5
  store i64 %786, i64* %PC
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %788 = load i64, i64* %787, align 8, !tbaa !2428
  %789 = add i64 %788, -8
  %790 = inttoptr i64 %789 to i64*
  store i64 %784, i64* %790
  store i64 %789, i64* %787, align 8, !tbaa !2428
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %782, i64* %791, align 8, !tbaa !2428
  %792 = load i64, i64* %PC
  %793 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %792, %struct.Memory* %MEMORY.0)
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 8
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 4
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RAX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  store i64 %800, i64* %RCX, align 8, !tbaa !2428
  %803 = load i64, i64* %RCX
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 4
  store i64 %805, i64* %PC
  %806 = add i64 4, %803
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %807 = icmp ult i64 %806, %803
  %808 = icmp ult i64 %806, 4
  %809 = or i1 %807, %808
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %810, i8* %811, align 1, !tbaa !2432
  %812 = trunc i64 %806 to i32
  %813 = and i32 %812, 255
  %814 = call i32 @llvm.ctpop.i32(i32 %813) #16
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  %817 = xor i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %817, i8* %818, align 1, !tbaa !2446
  %819 = xor i64 4, %803
  %820 = xor i64 %819, %806
  %821 = lshr i64 %820, 4
  %822 = trunc i64 %821 to i8
  %823 = and i8 %822, 1
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %823, i8* %824, align 1, !tbaa !2447
  %825 = icmp eq i64 %806, 0
  %826 = zext i1 %825 to i8
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %826, i8* %827, align 1, !tbaa !2448
  %828 = lshr i64 %806, 63
  %829 = trunc i64 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %829, i8* %830, align 1, !tbaa !2449
  %831 = lshr i64 %803, 63
  %832 = xor i64 %828, %831
  %833 = add nuw nsw i64 %832, %828
  %834 = icmp eq i64 %833, 2
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %835, i8* %836, align 1, !tbaa !2450
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 8
  %839 = load i64, i64* %RCX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %838 to i64*
  store i64 %839, i64* %842
  %843 = load i64, i64* %RAX
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 3
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  %847 = load i32, i32* %846
  %848 = sext i32 %847 to i64
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = mul i64 %849, 8
  %851 = add i64 %850, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 8
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 40
  %858 = load i64, i64* %RAX
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 4
  store i64 %860, i64* %PC
  %861 = inttoptr i64 %857 to i64*
  store i64 %858, i64* %861
  %862 = load i64, i64* %PC
  %863 = sub i64 %862, 251
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %863, i64* %866, align 8, !tbaa !2428
  br label %block_400586

block_40074e:                                     ; preds = %block_400586
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 12
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 7
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  store i32 10, i32* %871
  %872 = load i64, i64* %RBP
  %873 = sub i64 %872, 12
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 3
  store i64 %875, i64* %PC
  %876 = inttoptr i64 %873 to i32*
  %877 = load i32, i32* %876
  %878 = zext i32 %877 to i64
  store i64 %878, i64* %RDI, align 8, !tbaa !2428
  %879 = load i64, i64* %PC
  %880 = sub i64 %879, 584
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 5
  store i64 %884, i64* %PC
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %886 = load i64, i64* %885, align 8, !tbaa !2428
  %887 = add i64 %886, -8
  %888 = inttoptr i64 %887 to i64*
  store i64 %882, i64* %888
  store i64 %887, i64* %885, align 8, !tbaa !2428
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %880, i64* %889, align 8, !tbaa !2428
  %890 = load i64, i64* %PC
  %891 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %890, %struct.Memory* %MEMORY.0)
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 8
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RAX
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 3
  store i64 %900, i64* %PC
  store i64 %898, i64* %RCX, align 8, !tbaa !2428
  %901 = load i64, i64* %RCX
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC
  %904 = add i64 4, %901
  store i64 %904, i64* %RCX, align 8, !tbaa !2428
  %905 = icmp ult i64 %904, %901
  %906 = icmp ult i64 %904, 4
  %907 = or i1 %905, %906
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %908, i8* %909, align 1, !tbaa !2432
  %910 = trunc i64 %904 to i32
  %911 = and i32 %910, 255
  %912 = call i32 @llvm.ctpop.i32(i32 %911) #16
  %913 = trunc i32 %912 to i8
  %914 = and i8 %913, 1
  %915 = xor i8 %914, 1
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %915, i8* %916, align 1, !tbaa !2446
  %917 = xor i64 4, %901
  %918 = xor i64 %917, %904
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %921, i8* %922, align 1, !tbaa !2447
  %923 = icmp eq i64 %904, 0
  %924 = zext i1 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %924, i8* %925, align 1, !tbaa !2448
  %926 = lshr i64 %904, 63
  %927 = trunc i64 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %927, i8* %928, align 1, !tbaa !2449
  %929 = lshr i64 %901, 63
  %930 = xor i64 %926, %929
  %931 = add nuw nsw i64 %930, %926
  %932 = icmp eq i64 %931, 2
  %933 = zext i1 %932 to i8
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %933, i8* %934, align 1, !tbaa !2450
  %935 = load i64, i64* %RBP
  %936 = sub i64 %935, 8
  %937 = load i64, i64* %RCX
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %936 to i64*
  store i64 %937, i64* %940
  %941 = load i64, i64* %RAX
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = sext i32 %945 to i64
  store i64 %946, i64* %RAX, align 8, !tbaa !2428
  %947 = load i64, i64* %RAX
  %948 = mul i64 %947, 8
  %949 = add i64 %948, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 8
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 40
  %956 = load i64, i64* %RAX
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 4
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %955 to i64*
  store i64 %956, i64* %959
  %960 = load i64, i64* %PC
  %961 = sub i64 %960, 501
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 5
  store i64 %963, i64* %PC
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %961, i64* %964, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 12
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 7
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i32*
  store i32 15, i32* %969
  %970 = load i64, i64* %PC
  %971 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %970, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %971

block_4009d8:                                     ; preds = %block_400586
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 12
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 7
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i32*
  store i32 23, i32* %976
  %977 = load i64, i64* %RBP
  %978 = sub i64 %977, 12
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 3
  store i64 %980, i64* %PC
  %981 = inttoptr i64 %978 to i32*
  %982 = load i32, i32* %981
  %983 = zext i32 %982 to i64
  store i64 %983, i64* %RDI, align 8, !tbaa !2428
  %984 = load i64, i64* %PC
  %985 = sub i64 %984, 1234
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 5
  store i64 %989, i64* %PC
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %991 = load i64, i64* %990, align 8, !tbaa !2428
  %992 = add i64 %991, -8
  %993 = inttoptr i64 %992 to i64*
  store i64 %987, i64* %993
  store i64 %992, i64* %990, align 8, !tbaa !2428
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %985, i64* %994, align 8, !tbaa !2428
  %995 = load i64, i64* %PC
  %996 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %995, %struct.Memory* %MEMORY.0)
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 8
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RAX
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 3
  store i64 %1005, i64* %PC
  store i64 %1003, i64* %RCX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RCX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 4
  store i64 %1008, i64* %PC
  %1009 = add i64 4, %1006
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = icmp ult i64 %1009, %1006
  %1011 = icmp ult i64 %1009, 4
  %1012 = or i1 %1010, %1011
  %1013 = zext i1 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1013, i8* %1014, align 1, !tbaa !2432
  %1015 = trunc i64 %1009 to i32
  %1016 = and i32 %1015, 255
  %1017 = call i32 @llvm.ctpop.i32(i32 %1016) #16
  %1018 = trunc i32 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = xor i8 %1019, 1
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1020, i8* %1021, align 1, !tbaa !2446
  %1022 = xor i64 4, %1006
  %1023 = xor i64 %1022, %1009
  %1024 = lshr i64 %1023, 4
  %1025 = trunc i64 %1024 to i8
  %1026 = and i8 %1025, 1
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1026, i8* %1027, align 1, !tbaa !2447
  %1028 = icmp eq i64 %1009, 0
  %1029 = zext i1 %1028 to i8
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1029, i8* %1030, align 1, !tbaa !2448
  %1031 = lshr i64 %1009, 63
  %1032 = trunc i64 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1032, i8* %1033, align 1, !tbaa !2449
  %1034 = lshr i64 %1006, 63
  %1035 = xor i64 %1031, %1034
  %1036 = add nuw nsw i64 %1035, %1031
  %1037 = icmp eq i64 %1036, 2
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1038, i8* %1039, align 1, !tbaa !2450
  %1040 = load i64, i64* %RBP
  %1041 = sub i64 %1040, 8
  %1042 = load i64, i64* %RCX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1041 to i64*
  store i64 %1042, i64* %1045
  %1046 = load i64, i64* %RAX
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049
  %1051 = sext i32 %1050 to i64
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RAX
  %1053 = mul i64 %1052, 8
  %1054 = add i64 %1053, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 8
  store i64 %1056, i64* %PC
  %1057 = inttoptr i64 %1054 to i64*
  %1058 = load i64, i64* %1057
  store i64 %1058, i64* %RAX, align 8, !tbaa !2428
  %1059 = load i64, i64* %RBP
  %1060 = sub i64 %1059, 40
  %1061 = load i64, i64* %RAX
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1060 to i64*
  store i64 %1061, i64* %1064
  %1065 = load i64, i64* %PC
  %1066 = sub i64 %1065, 1151
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 5
  store i64 %1068, i64* %PC
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1066, i64* %1069, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1070 = load i64, i64* %RBP
  %1071 = sub i64 %1070, 12
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 7
  store i64 %1073, i64* %PC
  %1074 = inttoptr i64 %1071 to i32*
  store i32 2, i32* %1074
  %1075 = load i64, i64* %PC
  %1076 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1075, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1076

block_400ad2:                                     ; preds = %block_400586
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 12
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 7
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1078 to i32*
  store i32 28, i32* %1081
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 12
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = zext i32 %1087 to i64
  store i64 %1088, i64* %RDI, align 8, !tbaa !2428
  %1089 = load i64, i64* %PC
  %1090 = sub i64 %1089, 1484
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 5
  store i64 %1094, i64* %PC
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1096 = load i64, i64* %1095, align 8, !tbaa !2428
  %1097 = add i64 %1096, -8
  %1098 = inttoptr i64 %1097 to i64*
  store i64 %1092, i64* %1098
  store i64 %1097, i64* %1095, align 8, !tbaa !2428
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1090, i64* %1099, align 8, !tbaa !2428
  %1100 = load i64, i64* %PC
  %1101 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1100, %struct.Memory* %MEMORY.0)
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 8
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i64*
  %1107 = load i64, i64* %1106
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = load i64, i64* %RAX
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  store i64 %1108, i64* %RCX, align 8, !tbaa !2428
  %1111 = load i64, i64* %RCX
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 4
  store i64 %1113, i64* %PC
  %1114 = add i64 4, %1111
  store i64 %1114, i64* %RCX, align 8, !tbaa !2428
  %1115 = icmp ult i64 %1114, %1111
  %1116 = icmp ult i64 %1114, 4
  %1117 = or i1 %1115, %1116
  %1118 = zext i1 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1118, i8* %1119, align 1, !tbaa !2432
  %1120 = trunc i64 %1114 to i32
  %1121 = and i32 %1120, 255
  %1122 = call i32 @llvm.ctpop.i32(i32 %1121) #16
  %1123 = trunc i32 %1122 to i8
  %1124 = and i8 %1123, 1
  %1125 = xor i8 %1124, 1
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1125, i8* %1126, align 1, !tbaa !2446
  %1127 = xor i64 4, %1111
  %1128 = xor i64 %1127, %1114
  %1129 = lshr i64 %1128, 4
  %1130 = trunc i64 %1129 to i8
  %1131 = and i8 %1130, 1
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1131, i8* %1132, align 1, !tbaa !2447
  %1133 = icmp eq i64 %1114, 0
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1134, i8* %1135, align 1, !tbaa !2448
  %1136 = lshr i64 %1114, 63
  %1137 = trunc i64 %1136 to i8
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1137, i8* %1138, align 1, !tbaa !2449
  %1139 = lshr i64 %1111, 63
  %1140 = xor i64 %1136, %1139
  %1141 = add nuw nsw i64 %1140, %1136
  %1142 = icmp eq i64 %1141, 2
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1143, i8* %1144, align 1, !tbaa !2450
  %1145 = load i64, i64* %RBP
  %1146 = sub i64 %1145, 8
  %1147 = load i64, i64* %RCX
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC
  %1150 = inttoptr i64 %1146 to i64*
  store i64 %1147, i64* %1150
  %1151 = load i64, i64* %RAX
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 3
  store i64 %1153, i64* %PC
  %1154 = inttoptr i64 %1151 to i32*
  %1155 = load i32, i32* %1154
  %1156 = sext i32 %1155 to i64
  store i64 %1156, i64* %RAX, align 8, !tbaa !2428
  %1157 = load i64, i64* %RAX
  %1158 = mul i64 %1157, 8
  %1159 = add i64 %1158, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 8
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i64*
  %1163 = load i64, i64* %1162
  store i64 %1163, i64* %RAX, align 8, !tbaa !2428
  %1164 = load i64, i64* %RBP
  %1165 = sub i64 %1164, 40
  %1166 = load i64, i64* %RAX
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1165 to i64*
  store i64 %1166, i64* %1169
  %1170 = load i64, i64* %PC
  %1171 = sub i64 %1170, 1401
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  store i64 %1173, i64* %PC
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1171, i64* %1174, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 12
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 7
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  store i32 7, i32* %1179
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 12
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184
  %1186 = zext i32 %1185 to i64
  store i64 %1186, i64* %RDI, align 8, !tbaa !2428
  %1187 = load i64, i64* %PC
  %1188 = sub i64 %1187, 434
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 5
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 5
  store i64 %1192, i64* %PC
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1194 = load i64, i64* %1193, align 8, !tbaa !2428
  %1195 = add i64 %1194, -8
  %1196 = inttoptr i64 %1195 to i64*
  store i64 %1190, i64* %1196
  store i64 %1195, i64* %1193, align 8, !tbaa !2428
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1188, i64* %1197, align 8, !tbaa !2428
  %1198 = load i64, i64* %PC
  %1199 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1198, %struct.Memory* %MEMORY.0)
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 8
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 4
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1201 to i64*
  %1205 = load i64, i64* %1204
  store i64 %1205, i64* %RAX, align 8, !tbaa !2428
  %1206 = load i64, i64* %RAX
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 3
  store i64 %1208, i64* %PC
  store i64 %1206, i64* %RCX, align 8, !tbaa !2428
  %1209 = load i64, i64* %RCX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 4
  store i64 %1211, i64* %PC
  %1212 = add i64 4, %1209
  store i64 %1212, i64* %RCX, align 8, !tbaa !2428
  %1213 = icmp ult i64 %1212, %1209
  %1214 = icmp ult i64 %1212, 4
  %1215 = or i1 %1213, %1214
  %1216 = zext i1 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1216, i8* %1217, align 1, !tbaa !2432
  %1218 = trunc i64 %1212 to i32
  %1219 = and i32 %1218, 255
  %1220 = call i32 @llvm.ctpop.i32(i32 %1219) #16
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1223, i8* %1224, align 1, !tbaa !2446
  %1225 = xor i64 4, %1209
  %1226 = xor i64 %1225, %1212
  %1227 = lshr i64 %1226, 4
  %1228 = trunc i64 %1227 to i8
  %1229 = and i8 %1228, 1
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1229, i8* %1230, align 1, !tbaa !2447
  %1231 = icmp eq i64 %1212, 0
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1232, i8* %1233, align 1, !tbaa !2448
  %1234 = lshr i64 %1212, 63
  %1235 = trunc i64 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1235, i8* %1236, align 1, !tbaa !2449
  %1237 = lshr i64 %1209, 63
  %1238 = xor i64 %1234, %1237
  %1239 = add nuw nsw i64 %1238, %1234
  %1240 = icmp eq i64 %1239, 2
  %1241 = zext i1 %1240 to i8
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1241, i8* %1242, align 1, !tbaa !2450
  %1243 = load i64, i64* %RBP
  %1244 = sub i64 %1243, 8
  %1245 = load i64, i64* %RCX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 4
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1244 to i64*
  store i64 %1245, i64* %1248
  %1249 = load i64, i64* %RAX
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 3
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to i32*
  %1253 = load i32, i32* %1252
  %1254 = sext i32 %1253 to i64
  store i64 %1254, i64* %RAX, align 8, !tbaa !2428
  %1255 = load i64, i64* %RAX
  %1256 = mul i64 %1255, 8
  %1257 = add i64 %1256, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 8
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i64*
  %1261 = load i64, i64* %1260
  store i64 %1261, i64* %RAX, align 8, !tbaa !2428
  %1262 = load i64, i64* %RBP
  %1263 = sub i64 %1262, 40
  %1264 = load i64, i64* %RAX
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 4
  store i64 %1266, i64* %PC
  %1267 = inttoptr i64 %1263 to i64*
  store i64 %1264, i64* %1267
  %1268 = load i64, i64* %PC
  %1269 = sub i64 %1268, 351
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1269, i64* %1272, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 12
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 7
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  store i32 12, i32* %1277
  %1278 = load i64, i64* %RBP
  %1279 = sub i64 %1278, 12
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RDI, align 8, !tbaa !2428
  %1285 = load i64, i64* %PC
  %1286 = sub i64 %1285, 684
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 5
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 5
  store i64 %1290, i64* %PC
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1292 = load i64, i64* %1291, align 8, !tbaa !2428
  %1293 = add i64 %1292, -8
  %1294 = inttoptr i64 %1293 to i64*
  store i64 %1288, i64* %1294
  store i64 %1293, i64* %1291, align 8, !tbaa !2428
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1286, i64* %1295, align 8, !tbaa !2428
  %1296 = load i64, i64* %PC
  %1297 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1296, %struct.Memory* %MEMORY.0)
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 8
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i64*
  %1303 = load i64, i64* %1302
  store i64 %1303, i64* %RAX, align 8, !tbaa !2428
  %1304 = load i64, i64* %RAX
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1307 = load i64, i64* %RCX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = add i64 4, %1307
  store i64 %1310, i64* %RCX, align 8, !tbaa !2428
  %1311 = icmp ult i64 %1310, %1307
  %1312 = icmp ult i64 %1310, 4
  %1313 = or i1 %1311, %1312
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1314, i8* %1315, align 1, !tbaa !2432
  %1316 = trunc i64 %1310 to i32
  %1317 = and i32 %1316, 255
  %1318 = call i32 @llvm.ctpop.i32(i32 %1317) #16
  %1319 = trunc i32 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = xor i8 %1320, 1
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1321, i8* %1322, align 1, !tbaa !2446
  %1323 = xor i64 4, %1307
  %1324 = xor i64 %1323, %1310
  %1325 = lshr i64 %1324, 4
  %1326 = trunc i64 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1327, i8* %1328, align 1, !tbaa !2447
  %1329 = icmp eq i64 %1310, 0
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1330, i8* %1331, align 1, !tbaa !2448
  %1332 = lshr i64 %1310, 63
  %1333 = trunc i64 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1333, i8* %1334, align 1, !tbaa !2449
  %1335 = lshr i64 %1307, 63
  %1336 = xor i64 %1332, %1335
  %1337 = add nuw nsw i64 %1336, %1332
  %1338 = icmp eq i64 %1337, 2
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1339, i8* %1340, align 1, !tbaa !2450
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 8
  %1343 = load i64, i64* %RCX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  %1347 = load i64, i64* %RAX
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = sext i32 %1351 to i64
  store i64 %1352, i64* %RAX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RAX
  %1354 = mul i64 %1353, 8
  %1355 = add i64 %1354, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 8
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i64*
  %1359 = load i64, i64* %1358
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 40
  %1362 = load i64, i64* %RAX
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1361 to i64*
  store i64 %1362, i64* %1365
  %1366 = load i64, i64* %PC
  %1367 = sub i64 %1366, 601
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1367, i64* %1370, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 12
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 7
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  store i32 20, i32* %1375
  %1376 = load i64, i64* %PC
  %1377 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %1376, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1377

block_4009a6:                                     ; preds = %block_400586
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 12
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 7
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i32*
  store i32 22, i32* %1382
  %1383 = load i64, i64* %RBP
  %1384 = sub i64 %1383, 12
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 3
  store i64 %1386, i64* %PC
  %1387 = inttoptr i64 %1384 to i32*
  %1388 = load i32, i32* %1387
  %1389 = zext i32 %1388 to i64
  store i64 %1389, i64* %RDI, align 8, !tbaa !2428
  %1390 = load i64, i64* %PC
  %1391 = sub i64 %1390, 1184
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 5
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 5
  store i64 %1395, i64* %PC
  %1396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1397 = load i64, i64* %1396, align 8, !tbaa !2428
  %1398 = add i64 %1397, -8
  %1399 = inttoptr i64 %1398 to i64*
  store i64 %1393, i64* %1399
  store i64 %1398, i64* %1396, align 8, !tbaa !2428
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1391, i64* %1400, align 8, !tbaa !2428
  %1401 = load i64, i64* %PC
  %1402 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1401, %struct.Memory* %MEMORY.0)
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 8
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 4
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i64*
  %1408 = load i64, i64* %1407
  store i64 %1408, i64* %RAX, align 8, !tbaa !2428
  %1409 = load i64, i64* %RAX
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC
  store i64 %1409, i64* %RCX, align 8, !tbaa !2428
  %1412 = load i64, i64* %RCX
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 4
  store i64 %1414, i64* %PC
  %1415 = add i64 4, %1412
  store i64 %1415, i64* %RCX, align 8, !tbaa !2428
  %1416 = icmp ult i64 %1415, %1412
  %1417 = icmp ult i64 %1415, 4
  %1418 = or i1 %1416, %1417
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1419, i8* %1420, align 1, !tbaa !2432
  %1421 = trunc i64 %1415 to i32
  %1422 = and i32 %1421, 255
  %1423 = call i32 @llvm.ctpop.i32(i32 %1422) #16
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = xor i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1426, i8* %1427, align 1, !tbaa !2446
  %1428 = xor i64 4, %1412
  %1429 = xor i64 %1428, %1415
  %1430 = lshr i64 %1429, 4
  %1431 = trunc i64 %1430 to i8
  %1432 = and i8 %1431, 1
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1432, i8* %1433, align 1, !tbaa !2447
  %1434 = icmp eq i64 %1415, 0
  %1435 = zext i1 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1435, i8* %1436, align 1, !tbaa !2448
  %1437 = lshr i64 %1415, 63
  %1438 = trunc i64 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1438, i8* %1439, align 1, !tbaa !2449
  %1440 = lshr i64 %1412, 63
  %1441 = xor i64 %1437, %1440
  %1442 = add nuw nsw i64 %1441, %1437
  %1443 = icmp eq i64 %1442, 2
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1444, i8* %1445, align 1, !tbaa !2450
  %1446 = load i64, i64* %RBP
  %1447 = sub i64 %1446, 8
  %1448 = load i64, i64* %RCX
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 4
  store i64 %1450, i64* %PC
  %1451 = inttoptr i64 %1447 to i64*
  store i64 %1448, i64* %1451
  %1452 = load i64, i64* %RAX
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 3
  store i64 %1454, i64* %PC
  %1455 = inttoptr i64 %1452 to i32*
  %1456 = load i32, i32* %1455
  %1457 = sext i32 %1456 to i64
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = load i64, i64* %RAX
  %1459 = mul i64 %1458, 8
  %1460 = add i64 %1459, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 8
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 40
  %1467 = load i64, i64* %RAX
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 4
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1466 to i64*
  store i64 %1467, i64* %1470
  %1471 = load i64, i64* %PC
  %1472 = sub i64 %1471, 1101
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 5
  store i64 %1474, i64* %PC
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1472, i64* %1475, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_400622, %block_40058c, %block_400910, %block_400a11, %block_4008ac, %block_400816, %block_40071c, %block_400b36, %block_400aa0, %block_4009a6, %block_4007b2, %block_4006b8, %block_400ad2, %block_4009d8, %block_40074e, %block_400654, %block_400a6e, %block_400974, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_4005f0
  %MEMORY.0 = phi %struct.Memory* [ %2003, %block_400a11 ], [ %1518, %block_400aa0 ], [ %1402, %block_4009a6 ], [ %1297, %block_4007b2 ], [ %1616, %block_400b36 ], [ %1199, %block_4006b8 ], [ %996, %block_4009d8 ], [ %891, %block_40074e ], [ %695, %block_400a6e ], [ %499, %block_4008de ], [ %2199, %block_40058c ], [ %1101, %block_400ad2 ], [ %793, %block_400654 ], [ %205, %block_4006ea ], [ %303, %block_400b68 ], [ %401, %block_4007e4 ], [ %597, %block_400974 ], [ %107, %block_4005f0 ], [ %1714, %block_40071c ], [ %1812, %block_400816 ], [ %1910, %block_4008ac ], [ %2101, %block_400910 ], [ %2316, %block_400622 ]
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 40
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 4
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i64*
  %1481 = load i64, i64* %1480
  store i64 %1481, i64* %RAX, align 8, !tbaa !2428
  %1482 = load i64, i64* %RAX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 2
  store i64 %1484, i64* %PC
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1482, i64* %1485, align 8, !tbaa !2428
  %1486 = load i64, i64* %PC
  switch i64 %1486, label %2397 [
    i64 4196224, label %block_400780
    i64 4195874, label %block_400622
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196524, label %block_4008ac
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4195824, label %block_4005f0
    i64 4196724, label %block_400974
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4195724, label %block_40058c
    i64 4196574, label %block_4008de
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196824, label %block_4009d8
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196674, label %block_400942
    i64 4196774, label %block_4009a6
    i64 4197024, label %block_400aa0
  ]

block_400a3c:                                     ; preds = %block_400586
  %1487 = load i64, i64* %RBP
  %1488 = sub i64 %1487, 12
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 7
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1488 to i32*
  store i32 25, i32* %1491
  %1492 = load i64, i64* %PC
  %1493 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1492, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1493

block_400aa0:                                     ; preds = %block_400586
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 12
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 7
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i32*
  store i32 27, i32* %1498
  %1499 = load i64, i64* %RBP
  %1500 = sub i64 %1499, 12
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1500 to i32*
  %1504 = load i32, i32* %1503
  %1505 = zext i32 %1504 to i64
  store i64 %1505, i64* %RDI, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = sub i64 %1506, 1434
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 5
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1513 = load i64, i64* %1512, align 8, !tbaa !2428
  %1514 = add i64 %1513, -8
  %1515 = inttoptr i64 %1514 to i64*
  store i64 %1509, i64* %1515
  store i64 %1514, i64* %1512, align 8, !tbaa !2428
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1507, i64* %1516, align 8, !tbaa !2428
  %1517 = load i64, i64* %PC
  %1518 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1517, %struct.Memory* %MEMORY.0)
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 8
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to i64*
  %1524 = load i64, i64* %1523
  store i64 %1524, i64* %RAX, align 8, !tbaa !2428
  %1525 = load i64, i64* %RAX
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 3
  store i64 %1527, i64* %PC
  store i64 %1525, i64* %RCX, align 8, !tbaa !2428
  %1528 = load i64, i64* %RCX
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 4
  store i64 %1530, i64* %PC
  %1531 = add i64 4, %1528
  store i64 %1531, i64* %RCX, align 8, !tbaa !2428
  %1532 = icmp ult i64 %1531, %1528
  %1533 = icmp ult i64 %1531, 4
  %1534 = or i1 %1532, %1533
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1535, i8* %1536, align 1, !tbaa !2432
  %1537 = trunc i64 %1531 to i32
  %1538 = and i32 %1537, 255
  %1539 = call i32 @llvm.ctpop.i32(i32 %1538) #16
  %1540 = trunc i32 %1539 to i8
  %1541 = and i8 %1540, 1
  %1542 = xor i8 %1541, 1
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1542, i8* %1543, align 1, !tbaa !2446
  %1544 = xor i64 4, %1528
  %1545 = xor i64 %1544, %1531
  %1546 = lshr i64 %1545, 4
  %1547 = trunc i64 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1548, i8* %1549, align 1, !tbaa !2447
  %1550 = icmp eq i64 %1531, 0
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1551, i8* %1552, align 1, !tbaa !2448
  %1553 = lshr i64 %1531, 63
  %1554 = trunc i64 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1554, i8* %1555, align 1, !tbaa !2449
  %1556 = lshr i64 %1528, 63
  %1557 = xor i64 %1553, %1556
  %1558 = add nuw nsw i64 %1557, %1553
  %1559 = icmp eq i64 %1558, 2
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1560, i8* %1561, align 1, !tbaa !2450
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 8
  %1564 = load i64, i64* %RCX
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 4
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1563 to i64*
  store i64 %1564, i64* %1567
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = sext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i64, i64* %RAX
  %1575 = mul i64 %1574, 8
  %1576 = add i64 %1575, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 8
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %RAX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1582 to i64*
  store i64 %1583, i64* %1586
  %1587 = load i64, i64* %PC
  %1588 = sub i64 %1587, 1351
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1588, i64* %1591, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 12
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 7
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i32*
  store i32 30, i32* %1596
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = sub i64 %1604, 1584
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 5
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1611 = load i64, i64* %1610, align 8, !tbaa !2428
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1607, i64* %1613
  store i64 %1612, i64* %1610, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1605, i64* %1614, align 8, !tbaa !2428
  %1615 = load i64, i64* %PC
  %1616 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1615, %struct.Memory* %MEMORY.0)
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 8
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RAX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 3
  store i64 %1625, i64* %PC
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RCX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 4
  store i64 %1628, i64* %PC
  %1629 = add i64 4, %1626
  store i64 %1629, i64* %RCX, align 8, !tbaa !2428
  %1630 = icmp ult i64 %1629, %1626
  %1631 = icmp ult i64 %1629, 4
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1634, align 1, !tbaa !2432
  %1635 = trunc i64 %1629 to i32
  %1636 = and i32 %1635, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #16
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 4, %1626
  %1643 = xor i64 %1642, %1629
  %1644 = lshr i64 %1643, 4
  %1645 = trunc i64 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1646, i8* %1647, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1629, 0
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = lshr i64 %1629, 63
  %1652 = trunc i64 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1652, i8* %1653, align 1, !tbaa !2449
  %1654 = lshr i64 %1626, 63
  %1655 = xor i64 %1651, %1654
  %1656 = add nuw nsw i64 %1655, %1651
  %1657 = icmp eq i64 %1656, 2
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 8
  %1662 = load i64, i64* %RCX
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1661 to i64*
  store i64 %1662, i64* %1665
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RAX
  %1673 = mul i64 %1672, 8
  %1674 = add i64 %1673, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 8
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %PC
  %1686 = sub i64 %1685, 1501
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1686, i64* %1689, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 12
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 9, i32* %1694
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDI, align 8, !tbaa !2428
  %1702 = load i64, i64* %PC
  %1703 = sub i64 %1702, 534
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  store i64 %1707, i64* %PC
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1709 = load i64, i64* %1708, align 8, !tbaa !2428
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1705, i64* %1711
  store i64 %1710, i64* %1708, align 8, !tbaa !2428
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1703, i64* %1712, align 8, !tbaa !2428
  %1713 = load i64, i64* %PC
  %1714 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1713, %struct.Memory* %MEMORY.0)
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 8
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = load i64, i64* %RAX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 4
  store i64 %1726, i64* %PC
  %1727 = add i64 4, %1724
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = icmp ult i64 %1727, %1724
  %1729 = icmp ult i64 %1727, 4
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1731, i8* %1732, align 1, !tbaa !2432
  %1733 = trunc i64 %1727 to i32
  %1734 = and i32 %1733, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #16
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2446
  %1740 = xor i64 4, %1724
  %1741 = xor i64 %1740, %1727
  %1742 = lshr i64 %1741, 4
  %1743 = trunc i64 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1744, i8* %1745, align 1, !tbaa !2447
  %1746 = icmp eq i64 %1727, 0
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1747, i8* %1748, align 1, !tbaa !2448
  %1749 = lshr i64 %1727, 63
  %1750 = trunc i64 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1750, i8* %1751, align 1, !tbaa !2449
  %1752 = lshr i64 %1724, 63
  %1753 = xor i64 %1749, %1752
  %1754 = add nuw nsw i64 %1753, %1749
  %1755 = icmp eq i64 %1754, 2
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1756, i8* %1757, align 1, !tbaa !2450
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 8
  %1760 = load i64, i64* %RCX
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1759 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %RAX
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 3
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RAX
  %1771 = mul i64 %1770, 8
  %1772 = add i64 %1771, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 40
  %1779 = load i64, i64* %RAX
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1778 to i64*
  store i64 %1779, i64* %1782
  %1783 = load i64, i64* %PC
  %1784 = sub i64 %1783, 451
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1784, i64* %1787, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 7
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i32*
  store i32 14, i32* %1792
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %PC
  %1801 = sub i64 %1800, 784
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 5
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1807 = load i64, i64* %1806, align 8, !tbaa !2428
  %1808 = add i64 %1807, -8
  %1809 = inttoptr i64 %1808 to i64*
  store i64 %1803, i64* %1809
  store i64 %1808, i64* %1806, align 8, !tbaa !2428
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1801, i64* %1810, align 8, !tbaa !2428
  %1811 = load i64, i64* %PC
  %1812 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1811, %struct.Memory* %MEMORY.0)
  %1813 = load i64, i64* %RBP
  %1814 = sub i64 %1813, 8
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1814 to i64*
  %1818 = load i64, i64* %1817
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  store i64 %1819, i64* %RCX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RCX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = add i64 4, %1822
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i64 %1825, %1822
  %1827 = icmp ult i64 %1825, 4
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2432
  %1831 = trunc i64 %1825 to i32
  %1832 = and i32 %1831, 255
  %1833 = call i32 @llvm.ctpop.i32(i32 %1832) #16
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1836, i8* %1837, align 1, !tbaa !2446
  %1838 = xor i64 4, %1822
  %1839 = xor i64 %1838, %1825
  %1840 = lshr i64 %1839, 4
  %1841 = trunc i64 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = icmp eq i64 %1825, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1825, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = lshr i64 %1822, 63
  %1851 = xor i64 %1847, %1850
  %1852 = add nuw nsw i64 %1851, %1847
  %1853 = icmp eq i64 %1852, 2
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = sext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RAX
  %1869 = mul i64 %1868, 8
  %1870 = add i64 %1869, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 8
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 40
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1876 to i64*
  store i64 %1877, i64* %1880
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 701
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  store i64 %1884, i64* %PC
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1885, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 12
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  store i32 17, i32* %1890
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 12
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RDI, align 8, !tbaa !2428
  %1898 = load i64, i64* %PC
  %1899 = sub i64 %1898, 934
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1905 = load i64, i64* %1904, align 8, !tbaa !2428
  %1906 = add i64 %1905, -8
  %1907 = inttoptr i64 %1906 to i64*
  store i64 %1901, i64* %1907
  store i64 %1906, i64* %1904, align 8, !tbaa !2428
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1908, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1909, %struct.Memory* %MEMORY.0)
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 8
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i64*
  %1916 = load i64, i64* %1915
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RCX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 4
  store i64 %1922, i64* %PC
  %1923 = add i64 4, %1920
  store i64 %1923, i64* %RCX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1920
  %1925 = icmp ult i64 %1923, 4
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i64 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = xor i64 4, %1920
  %1937 = xor i64 %1936, %1923
  %1938 = lshr i64 %1937, 4
  %1939 = trunc i64 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1940, i8* %1941, align 1, !tbaa !2447
  %1942 = icmp eq i64 %1923, 0
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1943, i8* %1944, align 1, !tbaa !2448
  %1945 = lshr i64 %1923, 63
  %1946 = trunc i64 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1946, i8* %1947, align 1, !tbaa !2449
  %1948 = lshr i64 %1920, 63
  %1949 = xor i64 %1945, %1948
  %1950 = add nuw nsw i64 %1949, %1945
  %1951 = icmp eq i64 %1950, 2
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1952, i8* %1953, align 1, !tbaa !2450
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 8
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 4
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RAX
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 3
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  %1964 = load i32, i32* %1963
  %1965 = sext i32 %1964 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 8
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 40
  %1975 = load i64, i64* %RAX
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 4
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1974 to i64*
  store i64 %1975, i64* %1978
  %1979 = load i64, i64* %PC
  %1980 = sub i64 %1979, 851
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1980, i64* %1983, align 8, !tbaa !2428
  br label %block_400586

block_400a11:                                     ; preds = %block_400a0a, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a0a ]
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 12
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 3
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i32*
  %1989 = load i32, i32* %1988
  %1990 = zext i32 %1989 to i64
  store i64 %1990, i64* %RDI, align 8, !tbaa !2428
  %1991 = load i64, i64* %PC
  %1992 = sub i64 %1991, 1284
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1998 = load i64, i64* %1997, align 8, !tbaa !2428
  %1999 = add i64 %1998, -8
  %2000 = inttoptr i64 %1999 to i64*
  store i64 %1994, i64* %2000
  store i64 %1999, i64* %1997, align 8, !tbaa !2428
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1992, i64* %2001, align 8, !tbaa !2428
  %2002 = load i64, i64* %PC
  %2003 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2002, %struct.Memory* %MEMORY.1)
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 8
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i64*
  %2009 = load i64, i64* %2008
  store i64 %2009, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RAX
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  store i64 %2010, i64* %RCX, align 8, !tbaa !2428
  %2013 = load i64, i64* %RCX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 4
  store i64 %2015, i64* %PC
  %2016 = add i64 4, %2013
  store i64 %2016, i64* %RCX, align 8, !tbaa !2428
  %2017 = icmp ult i64 %2016, %2013
  %2018 = icmp ult i64 %2016, 4
  %2019 = or i1 %2017, %2018
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2020, i8* %2021, align 1, !tbaa !2432
  %2022 = trunc i64 %2016 to i32
  %2023 = and i32 %2022, 255
  %2024 = call i32 @llvm.ctpop.i32(i32 %2023) #16
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = xor i8 %2026, 1
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2027, i8* %2028, align 1, !tbaa !2446
  %2029 = xor i64 4, %2013
  %2030 = xor i64 %2029, %2016
  %2031 = lshr i64 %2030, 4
  %2032 = trunc i64 %2031 to i8
  %2033 = and i8 %2032, 1
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2033, i8* %2034, align 1, !tbaa !2447
  %2035 = icmp eq i64 %2016, 0
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2036, i8* %2037, align 1, !tbaa !2448
  %2038 = lshr i64 %2016, 63
  %2039 = trunc i64 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2039, i8* %2040, align 1, !tbaa !2449
  %2041 = lshr i64 %2013, 63
  %2042 = xor i64 %2038, %2041
  %2043 = add nuw nsw i64 %2042, %2038
  %2044 = icmp eq i64 %2043, 2
  %2045 = zext i1 %2044 to i8
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2045, i8* %2046, align 1, !tbaa !2450
  %2047 = load i64, i64* %RBP
  %2048 = sub i64 %2047, 8
  %2049 = load i64, i64* %RCX
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 4
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2048 to i64*
  store i64 %2049, i64* %2052
  %2053 = load i64, i64* %RAX
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 3
  store i64 %2055, i64* %PC
  %2056 = inttoptr i64 %2053 to i32*
  %2057 = load i32, i32* %2056
  %2058 = sext i32 %2057 to i64
  store i64 %2058, i64* %RAX, align 8, !tbaa !2428
  %2059 = load i64, i64* %RAX
  %2060 = mul i64 %2059, 8
  %2061 = add i64 %2060, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 8
  store i64 %2063, i64* %PC
  %2064 = inttoptr i64 %2061 to i64*
  %2065 = load i64, i64* %2064
  store i64 %2065, i64* %RAX, align 8, !tbaa !2428
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 40
  %2068 = load i64, i64* %RAX
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 4
  store i64 %2070, i64* %PC
  %2071 = inttoptr i64 %2067 to i64*
  store i64 %2068, i64* %2071
  %2072 = load i64, i64* %PC
  %2073 = sub i64 %2072, 1201
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 5
  store i64 %2075, i64* %PC
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2073, i64* %2076, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 12
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 7
  store i64 %2080, i64* %PC
  %2081 = inttoptr i64 %2078 to i32*
  store i32 19, i32* %2081
  %2082 = load i64, i64* %RBP
  %2083 = sub i64 %2082, 12
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 3
  store i64 %2085, i64* %PC
  %2086 = inttoptr i64 %2083 to i32*
  %2087 = load i32, i32* %2086
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %RDI, align 8, !tbaa !2428
  %2089 = load i64, i64* %PC
  %2090 = sub i64 %2089, 1034
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 5
  store i64 %2094, i64* %PC
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2096 = load i64, i64* %2095, align 8, !tbaa !2428
  %2097 = add i64 %2096, -8
  %2098 = inttoptr i64 %2097 to i64*
  store i64 %2092, i64* %2098
  store i64 %2097, i64* %2095, align 8, !tbaa !2428
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2090, i64* %2099, align 8, !tbaa !2428
  %2100 = load i64, i64* %PC
  %2101 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2100, %struct.Memory* %MEMORY.0)
  %2102 = load i64, i64* %RBP
  %2103 = sub i64 %2102, 8
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 4
  store i64 %2105, i64* %PC
  %2106 = inttoptr i64 %2103 to i64*
  %2107 = load i64, i64* %2106
  store i64 %2107, i64* %RAX, align 8, !tbaa !2428
  %2108 = load i64, i64* %RAX
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 3
  store i64 %2110, i64* %PC
  store i64 %2108, i64* %RCX, align 8, !tbaa !2428
  %2111 = load i64, i64* %RCX
  %2112 = load i64, i64* %PC
  %2113 = add i64 %2112, 4
  store i64 %2113, i64* %PC
  %2114 = add i64 4, %2111
  store i64 %2114, i64* %RCX, align 8, !tbaa !2428
  %2115 = icmp ult i64 %2114, %2111
  %2116 = icmp ult i64 %2114, 4
  %2117 = or i1 %2115, %2116
  %2118 = zext i1 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2118, i8* %2119, align 1, !tbaa !2432
  %2120 = trunc i64 %2114 to i32
  %2121 = and i32 %2120, 255
  %2122 = call i32 @llvm.ctpop.i32(i32 %2121) #16
  %2123 = trunc i32 %2122 to i8
  %2124 = and i8 %2123, 1
  %2125 = xor i8 %2124, 1
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2125, i8* %2126, align 1, !tbaa !2446
  %2127 = xor i64 4, %2111
  %2128 = xor i64 %2127, %2114
  %2129 = lshr i64 %2128, 4
  %2130 = trunc i64 %2129 to i8
  %2131 = and i8 %2130, 1
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2131, i8* %2132, align 1, !tbaa !2447
  %2133 = icmp eq i64 %2114, 0
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2134, i8* %2135, align 1, !tbaa !2448
  %2136 = lshr i64 %2114, 63
  %2137 = trunc i64 %2136 to i8
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2137, i8* %2138, align 1, !tbaa !2449
  %2139 = lshr i64 %2111, 63
  %2140 = xor i64 %2136, %2139
  %2141 = add nuw nsw i64 %2140, %2136
  %2142 = icmp eq i64 %2141, 2
  %2143 = zext i1 %2142 to i8
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2143, i8* %2144, align 1, !tbaa !2450
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 8
  %2147 = load i64, i64* %RCX
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 4
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2146 to i64*
  store i64 %2147, i64* %2150
  %2151 = load i64, i64* %RAX
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 3
  store i64 %2153, i64* %PC
  %2154 = inttoptr i64 %2151 to i32*
  %2155 = load i32, i32* %2154
  %2156 = sext i32 %2155 to i64
  store i64 %2156, i64* %RAX, align 8, !tbaa !2428
  %2157 = load i64, i64* %RAX
  %2158 = mul i64 %2157, 8
  %2159 = add i64 %2158, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 8
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i64*
  %2163 = load i64, i64* %2162
  store i64 %2163, i64* %RAX, align 8, !tbaa !2428
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 40
  %2166 = load i64, i64* %RAX
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 4
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2165 to i64*
  store i64 %2166, i64* %2169
  %2170 = load i64, i64* %PC
  %2171 = sub i64 %2170, 951
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 5
  store i64 %2173, i64* %PC
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2171, i64* %2174, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2175 = load i64, i64* %RBP
  %2176 = sub i64 %2175, 12
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 7
  store i64 %2178, i64* %PC
  %2179 = inttoptr i64 %2176 to i32*
  store i32 1, i32* %2179
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 12
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 3
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i32*
  %2185 = load i32, i32* %2184
  %2186 = zext i32 %2185 to i64
  store i64 %2186, i64* %RDI, align 8, !tbaa !2428
  %2187 = load i64, i64* %PC
  %2188 = sub i64 %2187, 134
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2194 = load i64, i64* %2193, align 8, !tbaa !2428
  %2195 = add i64 %2194, -8
  %2196 = inttoptr i64 %2195 to i64*
  store i64 %2190, i64* %2196
  store i64 %2195, i64* %2193, align 8, !tbaa !2428
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2188, i64* %2197, align 8, !tbaa !2428
  %2198 = load i64, i64* %PC
  %2199 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2198, %struct.Memory* %MEMORY.0)
  %2200 = load i64, i64* %RBP
  %2201 = sub i64 %2200, 8
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 4
  store i64 %2203, i64* %PC
  %2204 = inttoptr i64 %2201 to i64*
  %2205 = load i64, i64* %2204
  store i64 %2205, i64* %RAX, align 8, !tbaa !2428
  %2206 = load i64, i64* %RAX
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 3
  store i64 %2208, i64* %PC
  store i64 %2206, i64* %RCX, align 8, !tbaa !2428
  %2209 = load i64, i64* %RCX
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 4
  store i64 %2211, i64* %PC
  %2212 = add i64 4, %2209
  store i64 %2212, i64* %RCX, align 8, !tbaa !2428
  %2213 = icmp ult i64 %2212, %2209
  %2214 = icmp ult i64 %2212, 4
  %2215 = or i1 %2213, %2214
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2216, i8* %2217, align 1, !tbaa !2432
  %2218 = trunc i64 %2212 to i32
  %2219 = and i32 %2218, 255
  %2220 = call i32 @llvm.ctpop.i32(i32 %2219) #16
  %2221 = trunc i32 %2220 to i8
  %2222 = and i8 %2221, 1
  %2223 = xor i8 %2222, 1
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2223, i8* %2224, align 1, !tbaa !2446
  %2225 = xor i64 4, %2209
  %2226 = xor i64 %2225, %2212
  %2227 = lshr i64 %2226, 4
  %2228 = trunc i64 %2227 to i8
  %2229 = and i8 %2228, 1
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2229, i8* %2230, align 1, !tbaa !2447
  %2231 = icmp eq i64 %2212, 0
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2232, i8* %2233, align 1, !tbaa !2448
  %2234 = lshr i64 %2212, 63
  %2235 = trunc i64 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2235, i8* %2236, align 1, !tbaa !2449
  %2237 = lshr i64 %2209, 63
  %2238 = xor i64 %2234, %2237
  %2239 = add nuw nsw i64 %2238, %2234
  %2240 = icmp eq i64 %2239, 2
  %2241 = zext i1 %2240 to i8
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2241, i8* %2242, align 1, !tbaa !2450
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 8
  %2245 = load i64, i64* %RCX
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 4
  store i64 %2247, i64* %PC
  %2248 = inttoptr i64 %2244 to i64*
  store i64 %2245, i64* %2248
  %2249 = load i64, i64* %RAX
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 3
  store i64 %2251, i64* %PC
  %2252 = inttoptr i64 %2249 to i32*
  %2253 = load i32, i32* %2252
  %2254 = sext i32 %2253 to i64
  store i64 %2254, i64* %RAX, align 8, !tbaa !2428
  %2255 = load i64, i64* %RAX
  %2256 = mul i64 %2255, 8
  %2257 = add i64 %2256, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 8
  store i64 %2259, i64* %PC
  %2260 = inttoptr i64 %2257 to i64*
  %2261 = load i64, i64* %2260
  store i64 %2261, i64* %RAX, align 8, !tbaa !2428
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 40
  %2264 = load i64, i64* %RAX
  %2265 = load i64, i64* %PC
  %2266 = add i64 %2265, 4
  store i64 %2266, i64* %PC
  %2267 = inttoptr i64 %2263 to i64*
  store i64 %2264, i64* %2267
  %2268 = load i64, i64* %PC
  %2269 = sub i64 %2268, 51
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2269, i64* %2272, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2273 = load i64, i64* %RBP
  %2274 = sub i64 %2273, 12
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 7
  store i64 %2276, i64* %PC
  %2277 = inttoptr i64 %2274 to i32*
  store i32 24, i32* %2277
  br label %block_400a11

block_400686:                                     ; preds = %block_400586
  %2278 = load i64, i64* %RBP
  %2279 = sub i64 %2278, 12
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 7
  store i64 %2281, i64* %PC
  %2282 = inttoptr i64 %2279 to i32*
  store i32 6, i32* %2282
  %2283 = load i64, i64* %PC
  %2284 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %2283, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2284

block_400b04:                                     ; preds = %block_400586
  %2285 = load i64, i64* %RBP
  %2286 = sub i64 %2285, 12
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 7
  store i64 %2288, i64* %PC
  %2289 = inttoptr i64 %2286 to i32*
  store i32 29, i32* %2289
  %2290 = load i64, i64* %PC
  %2291 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %2290, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2291

block_400622:                                     ; preds = %block_400586
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 12
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 7
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i32*
  store i32 4, i32* %2296
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 12
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 3
  store i64 %2300, i64* %PC
  %2301 = inttoptr i64 %2298 to i32*
  %2302 = load i32, i32* %2301
  %2303 = zext i32 %2302 to i64
  store i64 %2303, i64* %RDI, align 8, !tbaa !2428
  %2304 = load i64, i64* %PC
  %2305 = sub i64 %2304, 284
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 5
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 5
  store i64 %2309, i64* %PC
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2311 = load i64, i64* %2310, align 8, !tbaa !2428
  %2312 = add i64 %2311, -8
  %2313 = inttoptr i64 %2312 to i64*
  store i64 %2307, i64* %2313
  store i64 %2312, i64* %2310, align 8, !tbaa !2428
  %2314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2305, i64* %2314, align 8, !tbaa !2428
  %2315 = load i64, i64* %PC
  %2316 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2315, %struct.Memory* %MEMORY.0)
  %2317 = load i64, i64* %RBP
  %2318 = sub i64 %2317, 8
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 4
  store i64 %2320, i64* %PC
  %2321 = inttoptr i64 %2318 to i64*
  %2322 = load i64, i64* %2321
  store i64 %2322, i64* %RAX, align 8, !tbaa !2428
  %2323 = load i64, i64* %RAX
  %2324 = load i64, i64* %PC
  %2325 = add i64 %2324, 3
  store i64 %2325, i64* %PC
  store i64 %2323, i64* %RCX, align 8, !tbaa !2428
  %2326 = load i64, i64* %RCX
  %2327 = load i64, i64* %PC
  %2328 = add i64 %2327, 4
  store i64 %2328, i64* %PC
  %2329 = add i64 4, %2326
  store i64 %2329, i64* %RCX, align 8, !tbaa !2428
  %2330 = icmp ult i64 %2329, %2326
  %2331 = icmp ult i64 %2329, 4
  %2332 = or i1 %2330, %2331
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2333, i8* %2334, align 1, !tbaa !2432
  %2335 = trunc i64 %2329 to i32
  %2336 = and i32 %2335, 255
  %2337 = call i32 @llvm.ctpop.i32(i32 %2336) #16
  %2338 = trunc i32 %2337 to i8
  %2339 = and i8 %2338, 1
  %2340 = xor i8 %2339, 1
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2340, i8* %2341, align 1, !tbaa !2446
  %2342 = xor i64 4, %2326
  %2343 = xor i64 %2342, %2329
  %2344 = lshr i64 %2343, 4
  %2345 = trunc i64 %2344 to i8
  %2346 = and i8 %2345, 1
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2346, i8* %2347, align 1, !tbaa !2447
  %2348 = icmp eq i64 %2329, 0
  %2349 = zext i1 %2348 to i8
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2349, i8* %2350, align 1, !tbaa !2448
  %2351 = lshr i64 %2329, 63
  %2352 = trunc i64 %2351 to i8
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2352, i8* %2353, align 1, !tbaa !2449
  %2354 = lshr i64 %2326, 63
  %2355 = xor i64 %2351, %2354
  %2356 = add nuw nsw i64 %2355, %2351
  %2357 = icmp eq i64 %2356, 2
  %2358 = zext i1 %2357 to i8
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2358, i8* %2359, align 1, !tbaa !2450
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 8
  %2362 = load i64, i64* %RCX
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 4
  store i64 %2364, i64* %PC
  %2365 = inttoptr i64 %2361 to i64*
  store i64 %2362, i64* %2365
  %2366 = load i64, i64* %RAX
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 3
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = sext i32 %2370 to i64
  store i64 %2371, i64* %RAX, align 8, !tbaa !2428
  %2372 = load i64, i64* %RAX
  %2373 = mul i64 %2372, 8
  %2374 = add i64 %2373, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 8
  store i64 %2376, i64* %PC
  %2377 = inttoptr i64 %2374 to i64*
  %2378 = load i64, i64* %2377
  store i64 %2378, i64* %RAX, align 8, !tbaa !2428
  %2379 = load i64, i64* %RBP
  %2380 = sub i64 %2379, 40
  %2381 = load i64, i64* %RAX
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2380 to i64*
  store i64 %2381, i64* %2384
  %2385 = load i64, i64* %PC
  %2386 = sub i64 %2385, 201
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 5
  store i64 %2388, i64* %PC
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2386, i64* %2389, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 12
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 7
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to i32*
  store i32 11, i32* %2394
  %2395 = load i64, i64* %PC
  %2396 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %2395, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2396

; <label>:2397:                                   ; preds = %block_400586
  %2398 = load i64, i64* %PC
  %2399 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2398, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2399
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008e5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4008e5

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 26, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1384
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 1301
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 8, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 484
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 401
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 31, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1634
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1551
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_4008e5:                                     ; preds = %block_4008de, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008de ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RDI, align 8, !tbaa !2428
  %428 = load i64, i64* %PC
  %429 = sub i64 %428, 984
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 5
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %435 = load i64, i64* %434, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %431, i64* %437
  store i64 %436, i64* %434, align 8, !tbaa !2428
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %429, i64* %438, align 8, !tbaa !2428
  %439 = load i64, i64* %PC
  %440 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %439, %struct.Memory* %MEMORY.0)
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 8
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = load i64, i64* %RAX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  store i64 %447, i64* %RCX, align 8, !tbaa !2428
  %450 = load i64, i64* %RCX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = add i64 4, %450
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = icmp ult i64 %453, %450
  %455 = icmp ult i64 %453, 4
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %457, i8* %458, align 1, !tbaa !2432
  %459 = trunc i64 %453 to i32
  %460 = and i32 %459, 255
  %461 = call i32 @llvm.ctpop.i32(i32 %460) #16
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %464, i8* %465, align 1, !tbaa !2446
  %466 = xor i64 4, %450
  %467 = xor i64 %466, %453
  %468 = lshr i64 %467, 4
  %469 = trunc i64 %468 to i8
  %470 = and i8 %469, 1
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %470, i8* %471, align 1, !tbaa !2447
  %472 = icmp eq i64 %453, 0
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %473, i8* %474, align 1, !tbaa !2448
  %475 = lshr i64 %453, 63
  %476 = trunc i64 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %476, i8* %477, align 1, !tbaa !2449
  %478 = lshr i64 %450, 63
  %479 = xor i64 %475, %478
  %480 = add nuw nsw i64 %479, %475
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %482, i8* %483, align 1, !tbaa !2450
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 8
  %486 = load i64, i64* %RCX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %485 to i64*
  store i64 %486, i64* %489
  %490 = load i64, i64* %RAX
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493
  %495 = sext i32 %494 to i64
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = load i64, i64* %RAX
  %497 = mul i64 %496, 8
  %498 = add i64 %497, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 8
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %503 = load i64, i64* %RBP
  %504 = sub i64 %503, 40
  %505 = load i64, i64* %RAX
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %504 to i64*
  store i64 %505, i64* %508
  %509 = load i64, i64* %PC
  %510 = sub i64 %509, 901
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 5
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %510, i64* %513, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 12
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 7
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i32*
  store i32 13, i32* %518
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 3
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  %524 = load i32, i32* %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RDI, align 8, !tbaa !2428
  %526 = load i64, i64* %PC
  %527 = sub i64 %526, 734
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 5
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  store i64 %531, i64* %PC
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %533 = load i64, i64* %532, align 8, !tbaa !2428
  %534 = add i64 %533, -8
  %535 = inttoptr i64 %534 to i64*
  store i64 %529, i64* %535
  store i64 %534, i64* %532, align 8, !tbaa !2428
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %527, i64* %536, align 8, !tbaa !2428
  %537 = load i64, i64* %PC
  %538 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %537, %struct.Memory* %MEMORY.1)
  %539 = load i64, i64* %RBP
  %540 = sub i64 %539, 8
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 4
  store i64 %542, i64* %PC
  %543 = inttoptr i64 %540 to i64*
  %544 = load i64, i64* %543
  store i64 %544, i64* %RAX, align 8, !tbaa !2428
  %545 = load i64, i64* %RAX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  %548 = load i64, i64* %RCX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = add i64 4, %548
  store i64 %551, i64* %RCX, align 8, !tbaa !2428
  %552 = icmp ult i64 %551, %548
  %553 = icmp ult i64 %551, 4
  %554 = or i1 %552, %553
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %555, i8* %556, align 1, !tbaa !2432
  %557 = trunc i64 %551 to i32
  %558 = and i32 %557, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #16
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2446
  %564 = xor i64 4, %548
  %565 = xor i64 %564, %551
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %568, i8* %569, align 1, !tbaa !2447
  %570 = icmp eq i64 %551, 0
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %571, i8* %572, align 1, !tbaa !2448
  %573 = lshr i64 %551, 63
  %574 = trunc i64 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %574, i8* %575, align 1, !tbaa !2449
  %576 = lshr i64 %548, 63
  %577 = xor i64 %573, %576
  %578 = add nuw nsw i64 %577, %573
  %579 = icmp eq i64 %578, 2
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %581, align 1, !tbaa !2450
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 8
  %584 = load i64, i64* %RCX
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %583 to i64*
  store i64 %584, i64* %587
  %588 = load i64, i64* %RAX
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 3
  store i64 %590, i64* %PC
  %591 = inttoptr i64 %588 to i32*
  %592 = load i32, i32* %591
  %593 = sext i32 %592 to i64
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = load i64, i64* %RAX
  %595 = mul i64 %594, 8
  %596 = add i64 %595, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 8
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = load i64, i64* %RBP
  %602 = sub i64 %601, 40
  %603 = load i64, i64* %RAX
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %602 to i64*
  store i64 %603, i64* %606
  %607 = load i64, i64* %PC
  %608 = sub i64 %607, 651
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %608, i64* %611, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 12
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 7
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i32*
  store i32 18, i32* %616
  br label %block_4008e5

block_4009d8:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 23, i32* %621
  %622 = load i64, i64* %PC
  %623 = tail call %struct.Memory* @sub_4009df(%struct.State* %0, i64 %622, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %623

block_400ad2:                                     ; preds = %block_400586
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 12
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 7
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i32*
  store i32 28, i32* %628
  %629 = load i64, i64* %PC
  %630 = tail call %struct.Memory* @sub_400ad9(%struct.State* %0, i64 %629, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %630

block_400848:                                     ; preds = %block_400586
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 12
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 7
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i32*
  store i32 15, i32* %635
  %636 = load i64, i64* %PC
  %637 = tail call %struct.Memory* @sub_40084f(%struct.State* %0, i64 %636, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %637

block_400942:                                     ; preds = %block_400586
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 12
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 7
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i32*
  store i32 20, i32* %642
  %643 = load i64, i64* %PC
  %644 = tail call %struct.Memory* @sub_400949(%struct.State* %0, i64 %643, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %644

block_40074e:                                     ; preds = %block_400586
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 12
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 7
  store i64 %648, i64* %PC
  %649 = inttoptr i64 %646 to i32*
  store i32 10, i32* %649
  %650 = load i64, i64* %PC
  %651 = tail call %struct.Memory* @sub_400755(%struct.State* %0, i64 %650, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %651

block_400579:                                     ; preds = %block_400586
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 12
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 7
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i32*
  store i32 0, i32* %656
  %657 = load i64, i64* %RSP
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = add i64 48, %657
  store i64 %660, i64* %RSP, align 8, !tbaa !2428
  %661 = icmp ult i64 %660, %657
  %662 = icmp ult i64 %660, 48
  %663 = or i1 %661, %662
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %664, i8* %665, align 1, !tbaa !2432
  %666 = trunc i64 %660 to i32
  %667 = and i32 %666, 255
  %668 = call i32 @llvm.ctpop.i32(i32 %667) #16
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %671, i8* %672, align 1, !tbaa !2446
  %673 = xor i64 48, %657
  %674 = xor i64 %673, %660
  %675 = lshr i64 %674, 4
  %676 = trunc i64 %675 to i8
  %677 = and i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = icmp eq i64 %660, 0
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %680, i8* %681, align 1, !tbaa !2448
  %682 = lshr i64 %660, 63
  %683 = trunc i64 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %683, i8* %684, align 1, !tbaa !2449
  %685 = lshr i64 %657, 63
  %686 = xor i64 %682, %685
  %687 = add nuw nsw i64 %686, %682
  %688 = icmp eq i64 %687, 2
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 1
  store i64 %692, i64* %PC
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %694 = load i64, i64* %693, align 8, !tbaa !2428
  %695 = add i64 %694, 8
  %696 = inttoptr i64 %694 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %RBP, align 8, !tbaa !2428
  store i64 %695, i64* %693, align 8, !tbaa !2428
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 1
  store i64 %699, i64* %PC
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %702 = load i64, i64* %701, align 8, !tbaa !2428
  %703 = inttoptr i64 %702 to i64*
  %704 = load i64, i64* %703
  store i64 %704, i64* %700, align 8, !tbaa !2428
  %705 = add i64 %702, 8
  store i64 %705, i64* %701, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400a3c:                                     ; preds = %block_400586
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 12
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 7
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i32*
  store i32 25, i32* %710
  %711 = load i64, i64* %PC
  %712 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %711, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %712

block_400b36:                                     ; preds = %block_400586
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 12
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i32*
  store i32 30, i32* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 12
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %725 = load i64, i64* %PC
  %726 = sub i64 %725, 1584
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %732 = load i64, i64* %731, align 8, !tbaa !2428
  %733 = add i64 %732, -8
  %734 = inttoptr i64 %733 to i64*
  store i64 %728, i64* %734
  store i64 %733, i64* %731, align 8, !tbaa !2428
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %726, i64* %735, align 8, !tbaa !2428
  %736 = load i64, i64* %PC
  %737 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %736, %struct.Memory* %MEMORY.1)
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 8
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RCX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = add i64 4, %747
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ult i64 %750, %747
  %752 = icmp ult i64 %750, 4
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = trunc i64 %750 to i32
  %757 = and i32 %756, 255
  %758 = call i32 @llvm.ctpop.i32(i32 %757) #16
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %761, i8* %762, align 1, !tbaa !2446
  %763 = xor i64 4, %747
  %764 = xor i64 %763, %750
  %765 = lshr i64 %764, 4
  %766 = trunc i64 %765 to i8
  %767 = and i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %767, i8* %768, align 1, !tbaa !2447
  %769 = icmp eq i64 %750, 0
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %770, i8* %771, align 1, !tbaa !2448
  %772 = lshr i64 %750, 63
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %773, i8* %774, align 1, !tbaa !2449
  %775 = lshr i64 %747, 63
  %776 = xor i64 %772, %775
  %777 = add nuw nsw i64 %776, %772
  %778 = icmp eq i64 %777, 2
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %779, i8* %780, align 1, !tbaa !2450
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 8
  %783 = load i64, i64* %RCX
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  %791 = load i32, i32* %790
  %792 = sext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = load i64, i64* %RAX
  %794 = mul i64 %793, 8
  %795 = add i64 %794, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 8
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 40
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %801 to i64*
  store i64 %802, i64* %805
  %806 = load i64, i64* %PC
  %807 = sub i64 %806, 1501
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 5
  store i64 %809, i64* %PC
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %807, i64* %810, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 12
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i32*
  store i32 2, i32* %815
  %816 = load i64, i64* %PC
  %817 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %816, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %817

block_4008ac:                                     ; preds = %block_400586
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 7
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  store i32 17, i32* %822
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 12
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 3
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RDI, align 8, !tbaa !2428
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 934
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %837 = load i64, i64* %836, align 8, !tbaa !2428
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  store i64 %833, i64* %839
  store i64 %838, i64* %836, align 8, !tbaa !2428
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %840, align 8, !tbaa !2428
  %841 = load i64, i64* %PC
  %842 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %841, %struct.Memory* %MEMORY.1)
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 8
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  store i64 %849, i64* %RCX, align 8, !tbaa !2428
  %852 = load i64, i64* %RCX
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = add i64 4, %852
  store i64 %855, i64* %RCX, align 8, !tbaa !2428
  %856 = icmp ult i64 %855, %852
  %857 = icmp ult i64 %855, 4
  %858 = or i1 %856, %857
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %859, i8* %860, align 1, !tbaa !2432
  %861 = trunc i64 %855 to i32
  %862 = and i32 %861, 255
  %863 = call i32 @llvm.ctpop.i32(i32 %862) #16
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %866, i8* %867, align 1, !tbaa !2446
  %868 = xor i64 4, %852
  %869 = xor i64 %868, %855
  %870 = lshr i64 %869, 4
  %871 = trunc i64 %870 to i8
  %872 = and i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = icmp eq i64 %855, 0
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %875, i8* %876, align 1, !tbaa !2448
  %877 = lshr i64 %855, 63
  %878 = trunc i64 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %878, i8* %879, align 1, !tbaa !2449
  %880 = lshr i64 %852, 63
  %881 = xor i64 %877, %880
  %882 = add nuw nsw i64 %881, %877
  %883 = icmp eq i64 %882, 2
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 8
  %888 = load i64, i64* %RCX
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %887 to i64*
  store i64 %888, i64* %891
  %892 = load i64, i64* %RAX
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895
  %897 = sext i32 %896 to i64
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RAX
  %899 = mul i64 %898, 8
  %900 = add i64 %899, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 8
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 40
  %907 = load i64, i64* %RAX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %906 to i64*
  store i64 %907, i64* %910
  %911 = load i64, i64* %PC
  %912 = sub i64 %911, 851
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 5
  store i64 %914, i64* %PC
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %912, i64* %915, align 8, !tbaa !2428
  br label %block_400586

block_4006b8:                                     ; preds = %block_400586
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 7
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  store i32 7, i32* %920
  %921 = load i64, i64* %RBP
  %922 = sub i64 %921, 12
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %922 to i32*
  %926 = load i32, i32* %925
  %927 = zext i32 %926 to i64
  store i64 %927, i64* %RDI, align 8, !tbaa !2428
  %928 = load i64, i64* %PC
  %929 = sub i64 %928, 434
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %935 = load i64, i64* %934, align 8, !tbaa !2428
  %936 = add i64 %935, -8
  %937 = inttoptr i64 %936 to i64*
  store i64 %931, i64* %937
  store i64 %936, i64* %934, align 8, !tbaa !2428
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %929, i64* %938, align 8, !tbaa !2428
  %939 = load i64, i64* %PC
  %940 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %939, %struct.Memory* %MEMORY.1)
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 8
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i64*
  %946 = load i64, i64* %945
  store i64 %946, i64* %RAX, align 8, !tbaa !2428
  %947 = load i64, i64* %RAX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 3
  store i64 %949, i64* %PC
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %950 = load i64, i64* %RCX
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 4
  store i64 %952, i64* %PC
  %953 = add i64 4, %950
  store i64 %953, i64* %RCX, align 8, !tbaa !2428
  %954 = icmp ult i64 %953, %950
  %955 = icmp ult i64 %953, 4
  %956 = or i1 %954, %955
  %957 = zext i1 %956 to i8
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %957, i8* %958, align 1, !tbaa !2432
  %959 = trunc i64 %953 to i32
  %960 = and i32 %959, 255
  %961 = call i32 @llvm.ctpop.i32(i32 %960) #16
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  %964 = xor i8 %963, 1
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %964, i8* %965, align 1, !tbaa !2446
  %966 = xor i64 4, %950
  %967 = xor i64 %966, %953
  %968 = lshr i64 %967, 4
  %969 = trunc i64 %968 to i8
  %970 = and i8 %969, 1
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %970, i8* %971, align 1, !tbaa !2447
  %972 = icmp eq i64 %953, 0
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %973, i8* %974, align 1, !tbaa !2448
  %975 = lshr i64 %953, 63
  %976 = trunc i64 %975 to i8
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %976, i8* %977, align 1, !tbaa !2449
  %978 = lshr i64 %950, 63
  %979 = xor i64 %975, %978
  %980 = add nuw nsw i64 %979, %975
  %981 = icmp eq i64 %980, 2
  %982 = zext i1 %981 to i8
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %982, i8* %983, align 1, !tbaa !2450
  %984 = load i64, i64* %RBP
  %985 = sub i64 %984, 8
  %986 = load i64, i64* %RCX
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %985 to i64*
  store i64 %986, i64* %989
  %990 = load i64, i64* %RAX
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %990 to i32*
  %994 = load i32, i32* %993
  %995 = sext i32 %994 to i64
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RAX
  %997 = mul i64 %996, 8
  %998 = add i64 %997, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 8
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 40
  %1005 = load i64, i64* %RAX
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 4
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1004 to i64*
  store i64 %1005, i64* %1008
  %1009 = load i64, i64* %PC
  %1010 = sub i64 %1009, 351
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 5
  store i64 %1012, i64* %PC
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1010, i64* %1013, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 7
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  store i32 22, i32* %1018
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 12
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RDI, align 8, !tbaa !2428
  %1026 = load i64, i64* %PC
  %1027 = sub i64 %1026, 1184
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 5
  store i64 %1031, i64* %PC
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1033 = load i64, i64* %1032, align 8, !tbaa !2428
  %1034 = add i64 %1033, -8
  %1035 = inttoptr i64 %1034 to i64*
  store i64 %1029, i64* %1035
  store i64 %1034, i64* %1032, align 8, !tbaa !2428
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1027, i64* %1036, align 8, !tbaa !2428
  %1037 = load i64, i64* %PC
  %1038 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1037, %struct.Memory* %MEMORY.1)
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 8
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1040 to i64*
  %1044 = load i64, i64* %1043
  store i64 %1044, i64* %RAX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RAX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 3
  store i64 %1047, i64* %PC
  store i64 %1045, i64* %RCX, align 8, !tbaa !2428
  %1048 = load i64, i64* %RCX
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 4
  store i64 %1050, i64* %PC
  %1051 = add i64 4, %1048
  store i64 %1051, i64* %RCX, align 8, !tbaa !2428
  %1052 = icmp ult i64 %1051, %1048
  %1053 = icmp ult i64 %1051, 4
  %1054 = or i1 %1052, %1053
  %1055 = zext i1 %1054 to i8
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1055, i8* %1056, align 1, !tbaa !2432
  %1057 = trunc i64 %1051 to i32
  %1058 = and i32 %1057, 255
  %1059 = call i32 @llvm.ctpop.i32(i32 %1058) #16
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1062, i8* %1063, align 1, !tbaa !2446
  %1064 = xor i64 4, %1048
  %1065 = xor i64 %1064, %1051
  %1066 = lshr i64 %1065, 4
  %1067 = trunc i64 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1068, i8* %1069, align 1, !tbaa !2447
  %1070 = icmp eq i64 %1051, 0
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1071, i8* %1072, align 1, !tbaa !2448
  %1073 = lshr i64 %1051, 63
  %1074 = trunc i64 %1073 to i8
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1074, i8* %1075, align 1, !tbaa !2449
  %1076 = lshr i64 %1048, 63
  %1077 = xor i64 %1073, %1076
  %1078 = add nuw nsw i64 %1077, %1073
  %1079 = icmp eq i64 %1078, 2
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1080, i8* %1081, align 1, !tbaa !2450
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 8
  %1084 = load i64, i64* %RCX
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1083 to i64*
  store i64 %1084, i64* %1087
  %1088 = load i64, i64* %RAX
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 3
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1088 to i32*
  %1092 = load i32, i32* %1091
  %1093 = sext i32 %1092 to i64
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = mul i64 %1094, 8
  %1096 = add i64 %1095, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 8
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i64*
  %1100 = load i64, i64* %1099
  store i64 %1100, i64* %RAX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RBP
  %1102 = sub i64 %1101, 40
  %1103 = load i64, i64* %RAX
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1102 to i64*
  store i64 %1103, i64* %1106
  %1107 = load i64, i64* %PC
  %1108 = sub i64 %1107, 1101
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 5
  store i64 %1110, i64* %PC
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1108, i64* %1111, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  store i32 3, i32* %1116
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 12
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 3
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i32*
  %1122 = load i32, i32* %1121
  %1123 = zext i32 %1122 to i64
  store i64 %1123, i64* %RDI, align 8, !tbaa !2428
  %1124 = load i64, i64* %PC
  %1125 = sub i64 %1124, 234
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  store i64 %1129, i64* %PC
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1131 = load i64, i64* %1130, align 8, !tbaa !2428
  %1132 = add i64 %1131, -8
  %1133 = inttoptr i64 %1132 to i64*
  store i64 %1127, i64* %1133
  store i64 %1132, i64* %1130, align 8, !tbaa !2428
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1134, align 8, !tbaa !2428
  %1135 = load i64, i64* %PC
  %1136 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1135, %struct.Memory* %MEMORY.1)
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 8
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1146 = load i64, i64* %RCX
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 4
  store i64 %1148, i64* %PC
  %1149 = add i64 4, %1146
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = icmp ult i64 %1149, %1146
  %1151 = icmp ult i64 %1149, 4
  %1152 = or i1 %1150, %1151
  %1153 = zext i1 %1152 to i8
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1153, i8* %1154, align 1, !tbaa !2432
  %1155 = trunc i64 %1149 to i32
  %1156 = and i32 %1155, 255
  %1157 = call i32 @llvm.ctpop.i32(i32 %1156) #16
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1160, i8* %1161, align 1, !tbaa !2446
  %1162 = xor i64 4, %1146
  %1163 = xor i64 %1162, %1149
  %1164 = lshr i64 %1163, 4
  %1165 = trunc i64 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1166, i8* %1167, align 1, !tbaa !2447
  %1168 = icmp eq i64 %1149, 0
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1169, i8* %1170, align 1, !tbaa !2448
  %1171 = lshr i64 %1149, 63
  %1172 = trunc i64 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1172, i8* %1173, align 1, !tbaa !2449
  %1174 = lshr i64 %1146, 63
  %1175 = xor i64 %1171, %1174
  %1176 = add nuw nsw i64 %1175, %1171
  %1177 = icmp eq i64 %1176, 2
  %1178 = zext i1 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1178, i8* %1179, align 1, !tbaa !2450
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 8
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1181 to i64*
  store i64 %1182, i64* %1185
  %1186 = load i64, i64* %RAX
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 3
  store i64 %1188, i64* %PC
  %1189 = inttoptr i64 %1186 to i32*
  %1190 = load i32, i32* %1189
  %1191 = sext i32 %1190 to i64
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = mul i64 %1192, 8
  %1194 = add i64 %1193, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 8
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197
  store i64 %1198, i64* %RAX, align 8, !tbaa !2428
  %1199 = load i64, i64* %RBP
  %1200 = sub i64 %1199, 40
  %1201 = load i64, i64* %RAX
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 4
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1200 to i64*
  store i64 %1201, i64* %1204
  %1205 = load i64, i64* %PC
  %1206 = sub i64 %1205, 151
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 5
  store i64 %1208, i64* %PC
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1206, i64* %1209, align 8, !tbaa !2428
  br label %block_400586

block_400586:                                     ; preds = %block_4007b2, %block_400aa0, %block_400622, %block_4005f0, %block_4009a6, %block_4006b8, %block_4008ac, %block_400b36, %block_4007e4, %block_4008e5, %block_400b68, %block_4006ea, %block_400a6e, %block_400974
  %MEMORY.1 = phi %struct.Memory* [ %440, %block_4008e5 ], [ %1343, %block_400aa0 ], [ %1245, %block_400622 ], [ %1038, %block_4009a6 ], [ %842, %block_4008ac ], [ %940, %block_4006b8 ], [ %737, %block_400b36 ], [ %151, %block_400a6e ], [ %1136, %block_4005f0 ], [ %53, %block_400974 ], [ %249, %block_4006ea ], [ %347, %block_400b68 ], [ %538, %block_4007e4 ], [ %1490, %block_4007b2 ]
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 40
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 4
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i64*
  %1215 = load i64, i64* %1214
  store i64 %1215, i64* %RAX, align 8, !tbaa !2428
  %1216 = load i64, i64* %RAX
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 2
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1219, align 8, !tbaa !2428
  %1220 = load i64, i64* %PC
  switch i64 %1220, label %1578 [
    i64 4195924, label %block_400654
    i64 4196224, label %block_400780
    i64 4196274, label %block_4007b2
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197074, label %block_400ad2
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4196424, label %block_400848
    i64 4195824, label %block_4005f0
    i64 4196674, label %block_400942
    i64 4196174, label %block_40074e
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4196924, label %block_400a3c
    i64 4195774, label %block_4005be
    i64 4197174, label %block_400b36
    i64 4196024, label %block_4006b8
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
    i64 4195874, label %block_400622
    i64 4197024, label %block_400aa0
  ]

block_400622:                                     ; preds = %block_400586
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 12
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 7
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1222 to i32*
  store i32 4, i32* %1225
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 12
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 3
  store i64 %1229, i64* %PC
  %1230 = inttoptr i64 %1227 to i32*
  %1231 = load i32, i32* %1230
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %RDI, align 8, !tbaa !2428
  %1233 = load i64, i64* %PC
  %1234 = sub i64 %1233, 284
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 5
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 5
  store i64 %1238, i64* %PC
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1240 = load i64, i64* %1239, align 8, !tbaa !2428
  %1241 = add i64 %1240, -8
  %1242 = inttoptr i64 %1241 to i64*
  store i64 %1236, i64* %1242
  store i64 %1241, i64* %1239, align 8, !tbaa !2428
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1234, i64* %1243, align 8, !tbaa !2428
  %1244 = load i64, i64* %PC
  %1245 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1244, %struct.Memory* %MEMORY.1)
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 8
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i64*
  %1251 = load i64, i64* %1250
  store i64 %1251, i64* %RAX, align 8, !tbaa !2428
  %1252 = load i64, i64* %RAX
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 3
  store i64 %1254, i64* %PC
  store i64 %1252, i64* %RCX, align 8, !tbaa !2428
  %1255 = load i64, i64* %RCX
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 4
  store i64 %1257, i64* %PC
  %1258 = add i64 4, %1255
  store i64 %1258, i64* %RCX, align 8, !tbaa !2428
  %1259 = icmp ult i64 %1258, %1255
  %1260 = icmp ult i64 %1258, 4
  %1261 = or i1 %1259, %1260
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1262, i8* %1263, align 1, !tbaa !2432
  %1264 = trunc i64 %1258 to i32
  %1265 = and i32 %1264, 255
  %1266 = call i32 @llvm.ctpop.i32(i32 %1265) #16
  %1267 = trunc i32 %1266 to i8
  %1268 = and i8 %1267, 1
  %1269 = xor i8 %1268, 1
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1269, i8* %1270, align 1, !tbaa !2446
  %1271 = xor i64 4, %1255
  %1272 = xor i64 %1271, %1258
  %1273 = lshr i64 %1272, 4
  %1274 = trunc i64 %1273 to i8
  %1275 = and i8 %1274, 1
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1275, i8* %1276, align 1, !tbaa !2447
  %1277 = icmp eq i64 %1258, 0
  %1278 = zext i1 %1277 to i8
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1278, i8* %1279, align 1, !tbaa !2448
  %1280 = lshr i64 %1258, 63
  %1281 = trunc i64 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1281, i8* %1282, align 1, !tbaa !2449
  %1283 = lshr i64 %1255, 63
  %1284 = xor i64 %1280, %1283
  %1285 = add nuw nsw i64 %1284, %1280
  %1286 = icmp eq i64 %1285, 2
  %1287 = zext i1 %1286 to i8
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1287, i8* %1288, align 1, !tbaa !2450
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 8
  %1291 = load i64, i64* %RCX
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1290 to i64*
  store i64 %1291, i64* %1294
  %1295 = load i64, i64* %RAX
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 3
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i32*
  %1299 = load i32, i32* %1298
  %1300 = sext i32 %1299 to i64
  store i64 %1300, i64* %RAX, align 8, !tbaa !2428
  %1301 = load i64, i64* %RAX
  %1302 = mul i64 %1301, 8
  %1303 = add i64 %1302, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 8
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1303 to i64*
  %1307 = load i64, i64* %1306
  store i64 %1307, i64* %RAX, align 8, !tbaa !2428
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 40
  %1310 = load i64, i64* %RAX
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1309 to i64*
  store i64 %1310, i64* %1313
  %1314 = load i64, i64* %PC
  %1315 = sub i64 %1314, 201
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 5
  store i64 %1317, i64* %PC
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1315, i64* %1318, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 12
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  store i32 27, i32* %1323
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 12
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %RDI, align 8, !tbaa !2428
  %1331 = load i64, i64* %PC
  %1332 = sub i64 %1331, 1434
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1338 = load i64, i64* %1337, align 8, !tbaa !2428
  %1339 = add i64 %1338, -8
  %1340 = inttoptr i64 %1339 to i64*
  store i64 %1334, i64* %1340
  store i64 %1339, i64* %1337, align 8, !tbaa !2428
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1332, i64* %1341, align 8, !tbaa !2428
  %1342 = load i64, i64* %PC
  %1343 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1342, %struct.Memory* %MEMORY.1)
  %1344 = load i64, i64* %RBP
  %1345 = sub i64 %1344, 8
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 4
  store i64 %1347, i64* %PC
  %1348 = inttoptr i64 %1345 to i64*
  %1349 = load i64, i64* %1348
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = load i64, i64* %RAX
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  store i64 %1350, i64* %RCX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RCX
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = add i64 4, %1353
  store i64 %1356, i64* %RCX, align 8, !tbaa !2428
  %1357 = icmp ult i64 %1356, %1353
  %1358 = icmp ult i64 %1356, 4
  %1359 = or i1 %1357, %1358
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1360, i8* %1361, align 1, !tbaa !2432
  %1362 = trunc i64 %1356 to i32
  %1363 = and i32 %1362, 255
  %1364 = call i32 @llvm.ctpop.i32(i32 %1363) #16
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1367, i8* %1368, align 1, !tbaa !2446
  %1369 = xor i64 4, %1353
  %1370 = xor i64 %1369, %1356
  %1371 = lshr i64 %1370, 4
  %1372 = trunc i64 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1373, i8* %1374, align 1, !tbaa !2447
  %1375 = icmp eq i64 %1356, 0
  %1376 = zext i1 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1376, i8* %1377, align 1, !tbaa !2448
  %1378 = lshr i64 %1356, 63
  %1379 = trunc i64 %1378 to i8
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1379, i8* %1380, align 1, !tbaa !2449
  %1381 = lshr i64 %1353, 63
  %1382 = xor i64 %1378, %1381
  %1383 = add nuw nsw i64 %1382, %1378
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 8
  %1389 = load i64, i64* %RCX
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 4
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1388 to i64*
  store i64 %1389, i64* %1392
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i32*
  %1397 = load i32, i32* %1396
  %1398 = sext i32 %1397 to i64
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RAX
  %1400 = mul i64 %1399, 8
  %1401 = add i64 %1400, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 8
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  store i64 %1405, i64* %RAX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 40
  %1408 = load i64, i64* %RAX
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 4
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1407 to i64*
  store i64 %1408, i64* %1411
  %1412 = load i64, i64* %PC
  %1413 = sub i64 %1412, 1351
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 5
  store i64 %1415, i64* %PC
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1413, i64* %1416, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 12
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 7
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i32*
  store i32 9, i32* %1421
  %1422 = load i64, i64* %PC
  %1423 = tail call %struct.Memory* @sub_400723(%struct.State* %0, i64 %1422, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1423

block_400816:                                     ; preds = %block_400586
  %1424 = load i64, i64* %RBP
  %1425 = sub i64 %1424, 12
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 7
  store i64 %1427, i64* %PC
  %1428 = inttoptr i64 %1425 to i32*
  store i32 14, i32* %1428
  %1429 = load i64, i64* %PC
  %1430 = tail call %struct.Memory* @sub_40081d(%struct.State* %0, i64 %1429, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1430

block_400910:                                     ; preds = %block_400586
  %1431 = load i64, i64* %RBP
  %1432 = sub i64 %1431, 12
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 7
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1432 to i32*
  store i32 19, i32* %1435
  %1436 = load i64, i64* %PC
  %1437 = tail call %struct.Memory* @sub_400917(%struct.State* %0, i64 %1436, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1437

block_40058c:                                     ; preds = %block_400586
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 12
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 7
  store i64 %1441, i64* %PC
  %1442 = inttoptr i64 %1439 to i32*
  store i32 1, i32* %1442
  %1443 = load i64, i64* %PC
  %1444 = tail call %struct.Memory* @sub_400593(%struct.State* %0, i64 %1443, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1444

block_400a0a:                                     ; preds = %block_400586
  %1445 = load i64, i64* %RBP
  %1446 = sub i64 %1445, 12
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 7
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i32*
  store i32 24, i32* %1449
  %1450 = load i64, i64* %PC
  %1451 = tail call %struct.Memory* @sub_400a11(%struct.State* %0, i64 %1450, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1451

block_400686:                                     ; preds = %block_400586
  %1452 = load i64, i64* %RBP
  %1453 = sub i64 %1452, 12
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 7
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to i32*
  store i32 6, i32* %1456
  %1457 = load i64, i64* %PC
  %1458 = tail call %struct.Memory* @sub_40068d(%struct.State* %0, i64 %1457, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1458

block_400b04:                                     ; preds = %block_400586
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 12
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 7
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i32*
  store i32 29, i32* %1463
  %1464 = load i64, i64* %PC
  %1465 = tail call %struct.Memory* @sub_400b0b(%struct.State* %0, i64 %1464, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1465

block_4007b2:                                     ; preds = %block_400586
  %1466 = load i64, i64* %RBP
  %1467 = sub i64 %1466, 12
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1467 to i32*
  store i32 12, i32* %1470
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 12
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 3
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i32*
  %1476 = load i32, i32* %1475
  %1477 = zext i32 %1476 to i64
  store i64 %1477, i64* %RDI, align 8, !tbaa !2428
  %1478 = load i64, i64* %PC
  %1479 = sub i64 %1478, 684
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 5
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 5
  store i64 %1483, i64* %PC
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1485 = load i64, i64* %1484, align 8, !tbaa !2428
  %1486 = add i64 %1485, -8
  %1487 = inttoptr i64 %1486 to i64*
  store i64 %1481, i64* %1487
  store i64 %1486, i64* %1484, align 8, !tbaa !2428
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1479, i64* %1488, align 8, !tbaa !2428
  %1489 = load i64, i64* %PC
  %1490 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1489, %struct.Memory* %MEMORY.1)
  %1491 = load i64, i64* %RBP
  %1492 = sub i64 %1491, 8
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 4
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 3
  store i64 %1499, i64* %PC
  store i64 %1497, i64* %RCX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RCX
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 4
  store i64 %1502, i64* %PC
  %1503 = add i64 4, %1500
  store i64 %1503, i64* %RCX, align 8, !tbaa !2428
  %1504 = icmp ult i64 %1503, %1500
  %1505 = icmp ult i64 %1503, 4
  %1506 = or i1 %1504, %1505
  %1507 = zext i1 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1507, i8* %1508, align 1, !tbaa !2432
  %1509 = trunc i64 %1503 to i32
  %1510 = and i32 %1509, 255
  %1511 = call i32 @llvm.ctpop.i32(i32 %1510) #16
  %1512 = trunc i32 %1511 to i8
  %1513 = and i8 %1512, 1
  %1514 = xor i8 %1513, 1
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1514, i8* %1515, align 1, !tbaa !2446
  %1516 = xor i64 4, %1500
  %1517 = xor i64 %1516, %1503
  %1518 = lshr i64 %1517, 4
  %1519 = trunc i64 %1518 to i8
  %1520 = and i8 %1519, 1
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1520, i8* %1521, align 1, !tbaa !2447
  %1522 = icmp eq i64 %1503, 0
  %1523 = zext i1 %1522 to i8
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1523, i8* %1524, align 1, !tbaa !2448
  %1525 = lshr i64 %1503, 63
  %1526 = trunc i64 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1526, i8* %1527, align 1, !tbaa !2449
  %1528 = lshr i64 %1500, 63
  %1529 = xor i64 %1525, %1528
  %1530 = add nuw nsw i64 %1529, %1525
  %1531 = icmp eq i64 %1530, 2
  %1532 = zext i1 %1531 to i8
  %1533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1532, i8* %1533, align 1, !tbaa !2450
  %1534 = load i64, i64* %RBP
  %1535 = sub i64 %1534, 8
  %1536 = load i64, i64* %RCX
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1535 to i64*
  store i64 %1536, i64* %1539
  %1540 = load i64, i64* %RAX
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 3
  store i64 %1542, i64* %PC
  %1543 = inttoptr i64 %1540 to i32*
  %1544 = load i32, i32* %1543
  %1545 = sext i32 %1544 to i64
  store i64 %1545, i64* %RAX, align 8, !tbaa !2428
  %1546 = load i64, i64* %RAX
  %1547 = mul i64 %1546, 8
  %1548 = add i64 %1547, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 8
  store i64 %1550, i64* %PC
  %1551 = inttoptr i64 %1548 to i64*
  %1552 = load i64, i64* %1551
  store i64 %1552, i64* %RAX, align 8, !tbaa !2428
  %1553 = load i64, i64* %RBP
  %1554 = sub i64 %1553, 40
  %1555 = load i64, i64* %RAX
  %1556 = load i64, i64* %PC
  %1557 = add i64 %1556, 4
  store i64 %1557, i64* %PC
  %1558 = inttoptr i64 %1554 to i64*
  store i64 %1555, i64* %1558
  %1559 = load i64, i64* %PC
  %1560 = sub i64 %1559, 601
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 5
  store i64 %1562, i64* %PC
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1560, i64* %1563, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %1564 = load i64, i64* %RBP
  %1565 = sub i64 %1564, 12
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 7
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1565 to i32*
  store i32 11, i32* %1568
  %1569 = load i64, i64* %PC
  %1570 = tail call %struct.Memory* @sub_400787(%struct.State* %0, i64 %1569, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1570

block_400654:                                     ; preds = %block_400586
  %1571 = load i64, i64* %RBP
  %1572 = sub i64 %1571, 12
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 7
  store i64 %1574, i64* %PC
  %1575 = inttoptr i64 %1572 to i32*
  store i32 5, i32* %1575
  %1576 = load i64, i64* %PC
  %1577 = tail call %struct.Memory* @sub_40065b(%struct.State* %0, i64 %1576, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1577

; <label>:1578:                                   ; preds = %block_400586
  %1579 = load i64, i64* %PC
  %1580 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1579, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1580
}

; Function Attrs: noinline
define %struct.Memory* @sub_400787(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400787

block_40087a:                                     ; preds = %block_400586
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 16, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400881(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_400974:                                     ; preds = %block_400586
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 21, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 1134
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 1051
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400586

block_4005f0:                                     ; preds = %block_400586
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 3, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 234
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 151
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400586

block_400a6e:                                     ; preds = %block_400586
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 26, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400586

block_4006ea:                                     ; preds = %block_400586
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 484
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 401
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400586

block_400b68:                                     ; preds = %block_400586
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 31, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 1634
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 1551
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400586

block_4007e4:                                     ; preds = %block_400586
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 13, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 734
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 651
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400586

block_4008de:                                     ; preds = %block_400586
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 18, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 984
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 901
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400586

block_4009d8:                                     ; preds = %block_400586
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 23, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 1234
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 1151
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400586

block_400654:                                     ; preds = %block_400586
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 5, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 334
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 251
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400586

block_400ad2:                                     ; preds = %block_400586
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 28, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1484
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 1401
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400586

block_400579:                                     ; preds = %block_400586
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 0, i32* %1013
  %1014 = load i64, i64* %RSP
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 4
  store i64 %1016, i64* %PC
  %1017 = add i64 48, %1014
  store i64 %1017, i64* %RSP, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %1014
  %1019 = icmp ult i64 %1017, 48
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i64 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = xor i64 48, %1014
  %1031 = xor i64 %1030, %1017
  %1032 = lshr i64 %1031, 4
  %1033 = trunc i64 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1017, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i64 %1017, 63
  %1040 = trunc i64 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i64 %1014, 63
  %1043 = xor i64 %1039, %1042
  %1044 = add nuw nsw i64 %1043, %1039
  %1045 = icmp eq i64 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8, !tbaa !2428
  %1052 = add i64 %1051, 8
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RBP, align 8, !tbaa !2428
  store i64 %1052, i64* %1050, align 8, !tbaa !2428
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %PC
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1059 = load i64, i64* %1058, align 8, !tbaa !2428
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %1057, align 8, !tbaa !2428
  %1062 = add i64 %1059, 8
  store i64 %1062, i64* %1058, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40074e:                                     ; preds = %block_400586
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 12
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 7
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  store i32 10, i32* %1067
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDI, align 8, !tbaa !2428
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 584
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1082 = load i64, i64* %1081, align 8, !tbaa !2428
  %1083 = add i64 %1082, -8
  %1084 = inttoptr i64 %1083 to i64*
  store i64 %1078, i64* %1084
  store i64 %1083, i64* %1081, align 8, !tbaa !2428
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1085, align 8, !tbaa !2428
  %1086 = load i64, i64* %PC
  %1087 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1086, %struct.Memory* %MEMORY.0)
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 8
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RAX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = add i64 4, %1097
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i64 %1100, %1097
  %1102 = icmp ult i64 %1100, 4
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = trunc i64 %1100 to i32
  %1107 = and i32 %1106, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #16
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 4, %1097
  %1114 = xor i64 %1113, %1100
  %1115 = lshr i64 %1114, 4
  %1116 = trunc i64 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i64 %1100, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i64 %1100, 63
  %1123 = trunc i64 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i64 %1097, 63
  %1126 = xor i64 %1122, %1125
  %1127 = add nuw nsw i64 %1126, %1122
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1132 to i64*
  store i64 %1133, i64* %1136
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140
  %1142 = sext i32 %1141 to i64
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RAX
  %1144 = mul i64 %1143, 8
  %1145 = add i64 %1144, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 8
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 40
  %1152 = load i64, i64* %RAX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1151 to i64*
  store i64 %1152, i64* %1155
  %1156 = load i64, i64* %PC
  %1157 = sub i64 %1156, 501
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1157, i64* %1160, align 8, !tbaa !2428
  br label %block_400586

block_400848:                                     ; preds = %block_400586
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 12
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 7
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  store i32 15, i32* %1165
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDI, align 8, !tbaa !2428
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 834
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1180 = load i64, i64* %1179, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1176, i64* %1182
  store i64 %1181, i64* %1179, align 8, !tbaa !2428
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1183, align 8, !tbaa !2428
  %1184 = load i64, i64* %PC
  %1185 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1184, %struct.Memory* %MEMORY.0)
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 8
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 3
  store i64 %1194, i64* %PC
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = add i64 4, %1195
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1195
  %1200 = icmp ult i64 %1198, 4
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1202, i8* %1203, align 1, !tbaa !2432
  %1204 = trunc i64 %1198 to i32
  %1205 = and i32 %1204, 255
  %1206 = call i32 @llvm.ctpop.i32(i32 %1205) #16
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1209, i8* %1210, align 1, !tbaa !2446
  %1211 = xor i64 4, %1195
  %1212 = xor i64 %1211, %1198
  %1213 = lshr i64 %1212, 4
  %1214 = trunc i64 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1215, i8* %1216, align 1, !tbaa !2447
  %1217 = icmp eq i64 %1198, 0
  %1218 = zext i1 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1218, i8* %1219, align 1, !tbaa !2448
  %1220 = lshr i64 %1198, 63
  %1221 = trunc i64 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1221, i8* %1222, align 1, !tbaa !2449
  %1223 = lshr i64 %1195, 63
  %1224 = xor i64 %1220, %1223
  %1225 = add nuw nsw i64 %1224, %1220
  %1226 = icmp eq i64 %1225, 2
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1227, i8* %1228, align 1, !tbaa !2450
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 8
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1230 to i64*
  store i64 %1231, i64* %1234
  %1235 = load i64, i64* %RAX
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RAX
  %1242 = mul i64 %1241, 8
  %1243 = add i64 %1242, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 8
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 40
  %1250 = load i64, i64* %RAX
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 4
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1249 to i64*
  store i64 %1250, i64* %1253
  %1254 = load i64, i64* %PC
  %1255 = sub i64 %1254, 751
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 5
  store i64 %1257, i64* %PC
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1255, i64* %1258, align 8, !tbaa !2428
  br label %block_400586

block_400942:                                     ; preds = %block_400586
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 12
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 7
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  store i32 20, i32* %1263
  %1264 = load i64, i64* %RBP
  %1265 = sub i64 %1264, 12
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 3
  store i64 %1267, i64* %PC
  %1268 = inttoptr i64 %1265 to i32*
  %1269 = load i32, i32* %1268
  %1270 = zext i32 %1269 to i64
  store i64 %1270, i64* %RDI, align 8, !tbaa !2428
  %1271 = load i64, i64* %PC
  %1272 = sub i64 %1271, 1084
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 5
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 5
  store i64 %1276, i64* %PC
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1278 = load i64, i64* %1277, align 8, !tbaa !2428
  %1279 = add i64 %1278, -8
  %1280 = inttoptr i64 %1279 to i64*
  store i64 %1274, i64* %1280
  store i64 %1279, i64* %1277, align 8, !tbaa !2428
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1272, i64* %1281, align 8, !tbaa !2428
  %1282 = load i64, i64* %PC
  %1283 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1282, %struct.Memory* %MEMORY.0)
  %1284 = load i64, i64* %RBP
  %1285 = sub i64 %1284, 8
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 4
  store i64 %1287, i64* %PC
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = load i64, i64* %RAX
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 3
  store i64 %1292, i64* %PC
  store i64 %1290, i64* %RCX, align 8, !tbaa !2428
  %1293 = load i64, i64* %RCX
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = add i64 4, %1293
  store i64 %1296, i64* %RCX, align 8, !tbaa !2428
  %1297 = icmp ult i64 %1296, %1293
  %1298 = icmp ult i64 %1296, 4
  %1299 = or i1 %1297, %1298
  %1300 = zext i1 %1299 to i8
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1300, i8* %1301, align 1, !tbaa !2432
  %1302 = trunc i64 %1296 to i32
  %1303 = and i32 %1302, 255
  %1304 = call i32 @llvm.ctpop.i32(i32 %1303) #16
  %1305 = trunc i32 %1304 to i8
  %1306 = and i8 %1305, 1
  %1307 = xor i8 %1306, 1
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1307, i8* %1308, align 1, !tbaa !2446
  %1309 = xor i64 4, %1293
  %1310 = xor i64 %1309, %1296
  %1311 = lshr i64 %1310, 4
  %1312 = trunc i64 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1313, i8* %1314, align 1, !tbaa !2447
  %1315 = icmp eq i64 %1296, 0
  %1316 = zext i1 %1315 to i8
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1316, i8* %1317, align 1, !tbaa !2448
  %1318 = lshr i64 %1296, 63
  %1319 = trunc i64 %1318 to i8
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1319, i8* %1320, align 1, !tbaa !2449
  %1321 = lshr i64 %1293, 63
  %1322 = xor i64 %1318, %1321
  %1323 = add nuw nsw i64 %1322, %1318
  %1324 = icmp eq i64 %1323, 2
  %1325 = zext i1 %1324 to i8
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1325, i8* %1326, align 1, !tbaa !2450
  %1327 = load i64, i64* %RBP
  %1328 = sub i64 %1327, 8
  %1329 = load i64, i64* %RCX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 4
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1328 to i64*
  store i64 %1329, i64* %1332
  %1333 = load i64, i64* %RAX
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 3
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1333 to i32*
  %1337 = load i32, i32* %1336
  %1338 = sext i32 %1337 to i64
  store i64 %1338, i64* %RAX, align 8, !tbaa !2428
  %1339 = load i64, i64* %RAX
  %1340 = mul i64 %1339, 8
  %1341 = add i64 %1340, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 8
  store i64 %1343, i64* %PC
  %1344 = inttoptr i64 %1341 to i64*
  %1345 = load i64, i64* %1344
  store i64 %1345, i64* %RAX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RBP
  %1347 = sub i64 %1346, 40
  %1348 = load i64, i64* %RAX
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 4
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1347 to i64*
  store i64 %1348, i64* %1351
  %1352 = load i64, i64* %PC
  %1353 = sub i64 %1352, 1001
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 5
  store i64 %1355, i64* %PC
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1353, i64* %1356, align 8, !tbaa !2428
  br label %block_400586

block_4005be:                                     ; preds = %block_400586
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 12
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 7
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  store i32 2, i32* %1361
  %1362 = load i64, i64* %PC
  %1363 = tail call %struct.Memory* @sub_4005c5(%struct.State* %0, i64 %1362, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1363

block_4006b8:                                     ; preds = %block_400586
  %1364 = load i64, i64* %RBP
  %1365 = sub i64 %1364, 12
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 7
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1365 to i32*
  store i32 7, i32* %1368
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 12
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 3
  store i64 %1372, i64* %PC
  %1373 = inttoptr i64 %1370 to i32*
  %1374 = load i32, i32* %1373
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = load i64, i64* %PC
  %1377 = sub i64 %1376, 434
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 5
  store i64 %1381, i64* %PC
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1383 = load i64, i64* %1382, align 8, !tbaa !2428
  %1384 = add i64 %1383, -8
  %1385 = inttoptr i64 %1384 to i64*
  store i64 %1379, i64* %1385
  store i64 %1384, i64* %1382, align 8, !tbaa !2428
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1377, i64* %1386, align 8, !tbaa !2428
  %1387 = load i64, i64* %PC
  %1388 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1387, %struct.Memory* %MEMORY.0)
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 8
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = load i64, i64* %RAX
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  store i64 %1395, i64* %RCX, align 8, !tbaa !2428
  %1398 = load i64, i64* %RCX
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = add i64 4, %1398
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  %1402 = icmp ult i64 %1401, %1398
  %1403 = icmp ult i64 %1401, 4
  %1404 = or i1 %1402, %1403
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1405, i8* %1406, align 1, !tbaa !2432
  %1407 = trunc i64 %1401 to i32
  %1408 = and i32 %1407, 255
  %1409 = call i32 @llvm.ctpop.i32(i32 %1408) #16
  %1410 = trunc i32 %1409 to i8
  %1411 = and i8 %1410, 1
  %1412 = xor i8 %1411, 1
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1412, i8* %1413, align 1, !tbaa !2446
  %1414 = xor i64 4, %1398
  %1415 = xor i64 %1414, %1401
  %1416 = lshr i64 %1415, 4
  %1417 = trunc i64 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1418, i8* %1419, align 1, !tbaa !2447
  %1420 = icmp eq i64 %1401, 0
  %1421 = zext i1 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1421, i8* %1422, align 1, !tbaa !2448
  %1423 = lshr i64 %1401, 63
  %1424 = trunc i64 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1424, i8* %1425, align 1, !tbaa !2449
  %1426 = lshr i64 %1398, 63
  %1427 = xor i64 %1423, %1426
  %1428 = add nuw nsw i64 %1427, %1423
  %1429 = icmp eq i64 %1428, 2
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1430, i8* %1431, align 1, !tbaa !2450
  %1432 = load i64, i64* %RBP
  %1433 = sub i64 %1432, 8
  %1434 = load i64, i64* %RCX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1433 to i64*
  store i64 %1434, i64* %1437
  %1438 = load i64, i64* %RAX
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 3
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sext i32 %1442 to i64
  store i64 %1443, i64* %RAX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RAX
  %1445 = mul i64 %1444, 8
  %1446 = add i64 %1445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 8
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i64*
  %1450 = load i64, i64* %1449
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RBP
  %1452 = sub i64 %1451, 40
  %1453 = load i64, i64* %RAX
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 4
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1452 to i64*
  store i64 %1453, i64* %1456
  %1457 = load i64, i64* %PC
  %1458 = sub i64 %1457, 351
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1458, i64* %1461, align 8, !tbaa !2428
  br label %block_400586

block_400b36:                                     ; preds = %block_400586
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 12
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 7
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1463 to i32*
  store i32 30, i32* %1466
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 12
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 3
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1468 to i32*
  %1472 = load i32, i32* %1471
  %1473 = zext i32 %1472 to i64
  store i64 %1473, i64* %RDI, align 8, !tbaa !2428
  %1474 = load i64, i64* %PC
  %1475 = sub i64 %1474, 1584
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 5
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 5
  store i64 %1479, i64* %PC
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1481 = load i64, i64* %1480, align 8, !tbaa !2428
  %1482 = add i64 %1481, -8
  %1483 = inttoptr i64 %1482 to i64*
  store i64 %1477, i64* %1483
  store i64 %1482, i64* %1480, align 8, !tbaa !2428
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1475, i64* %1484, align 8, !tbaa !2428
  %1485 = load i64, i64* %PC
  %1486 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1485, %struct.Memory* %MEMORY.0)
  %1487 = load i64, i64* %RBP
  %1488 = sub i64 %1487, 8
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 4
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1488 to i64*
  %1492 = load i64, i64* %1491
  store i64 %1492, i64* %RAX, align 8, !tbaa !2428
  %1493 = load i64, i64* %RAX
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 3
  store i64 %1495, i64* %PC
  store i64 %1493, i64* %RCX, align 8, !tbaa !2428
  %1496 = load i64, i64* %RCX
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 4
  store i64 %1498, i64* %PC
  %1499 = add i64 4, %1496
  store i64 %1499, i64* %RCX, align 8, !tbaa !2428
  %1500 = icmp ult i64 %1499, %1496
  %1501 = icmp ult i64 %1499, 4
  %1502 = or i1 %1500, %1501
  %1503 = zext i1 %1502 to i8
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1503, i8* %1504, align 1, !tbaa !2432
  %1505 = trunc i64 %1499 to i32
  %1506 = and i32 %1505, 255
  %1507 = call i32 @llvm.ctpop.i32(i32 %1506) #16
  %1508 = trunc i32 %1507 to i8
  %1509 = and i8 %1508, 1
  %1510 = xor i8 %1509, 1
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1510, i8* %1511, align 1, !tbaa !2446
  %1512 = xor i64 4, %1496
  %1513 = xor i64 %1512, %1499
  %1514 = lshr i64 %1513, 4
  %1515 = trunc i64 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1516, i8* %1517, align 1, !tbaa !2447
  %1518 = icmp eq i64 %1499, 0
  %1519 = zext i1 %1518 to i8
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1519, i8* %1520, align 1, !tbaa !2448
  %1521 = lshr i64 %1499, 63
  %1522 = trunc i64 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1522, i8* %1523, align 1, !tbaa !2449
  %1524 = lshr i64 %1496, 63
  %1525 = xor i64 %1521, %1524
  %1526 = add nuw nsw i64 %1525, %1521
  %1527 = icmp eq i64 %1526, 2
  %1528 = zext i1 %1527 to i8
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1528, i8* %1529, align 1, !tbaa !2450
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 8
  %1532 = load i64, i64* %RCX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1531 to i64*
  store i64 %1532, i64* %1535
  %1536 = load i64, i64* %RAX
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 3
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i32*
  %1540 = load i32, i32* %1539
  %1541 = sext i32 %1540 to i64
  store i64 %1541, i64* %RAX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RAX
  %1543 = mul i64 %1542, 8
  %1544 = add i64 %1543, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 8
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1544 to i64*
  %1548 = load i64, i64* %1547
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RBP
  %1550 = sub i64 %1549, 40
  %1551 = load i64, i64* %RAX
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 4
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1550 to i64*
  store i64 %1551, i64* %1554
  %1555 = load i64, i64* %PC
  %1556 = sub i64 %1555, 1501
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 5
  store i64 %1558, i64* %PC
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1556, i64* %1559, align 8, !tbaa !2428
  br label %block_400586

block_4007b2:                                     ; preds = %block_400586
  %1560 = load i64, i64* %RBP
  %1561 = sub i64 %1560, 12
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 7
  store i64 %1563, i64* %PC
  %1564 = inttoptr i64 %1561 to i32*
  store i32 12, i32* %1564
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 12
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 3
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1566 to i32*
  %1570 = load i32, i32* %1569
  %1571 = zext i32 %1570 to i64
  store i64 %1571, i64* %RDI, align 8, !tbaa !2428
  %1572 = load i64, i64* %PC
  %1573 = sub i64 %1572, 684
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 5
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 5
  store i64 %1577, i64* %PC
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1579 = load i64, i64* %1578, align 8, !tbaa !2428
  %1580 = add i64 %1579, -8
  %1581 = inttoptr i64 %1580 to i64*
  store i64 %1575, i64* %1581
  store i64 %1580, i64* %1578, align 8, !tbaa !2428
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1573, i64* %1582, align 8, !tbaa !2428
  %1583 = load i64, i64* %PC
  %1584 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1583, %struct.Memory* %MEMORY.0)
  %1585 = load i64, i64* %RBP
  %1586 = sub i64 %1585, 8
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 4
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1586 to i64*
  %1590 = load i64, i64* %1589
  store i64 %1590, i64* %RAX, align 8, !tbaa !2428
  %1591 = load i64, i64* %RAX
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 3
  store i64 %1593, i64* %PC
  store i64 %1591, i64* %RCX, align 8, !tbaa !2428
  %1594 = load i64, i64* %RCX
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 4
  store i64 %1596, i64* %PC
  %1597 = add i64 4, %1594
  store i64 %1597, i64* %RCX, align 8, !tbaa !2428
  %1598 = icmp ult i64 %1597, %1594
  %1599 = icmp ult i64 %1597, 4
  %1600 = or i1 %1598, %1599
  %1601 = zext i1 %1600 to i8
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1601, i8* %1602, align 1, !tbaa !2432
  %1603 = trunc i64 %1597 to i32
  %1604 = and i32 %1603, 255
  %1605 = call i32 @llvm.ctpop.i32(i32 %1604) #16
  %1606 = trunc i32 %1605 to i8
  %1607 = and i8 %1606, 1
  %1608 = xor i8 %1607, 1
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1608, i8* %1609, align 1, !tbaa !2446
  %1610 = xor i64 4, %1594
  %1611 = xor i64 %1610, %1597
  %1612 = lshr i64 %1611, 4
  %1613 = trunc i64 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1614, i8* %1615, align 1, !tbaa !2447
  %1616 = icmp eq i64 %1597, 0
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1617, i8* %1618, align 1, !tbaa !2448
  %1619 = lshr i64 %1597, 63
  %1620 = trunc i64 %1619 to i8
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1620, i8* %1621, align 1, !tbaa !2449
  %1622 = lshr i64 %1594, 63
  %1623 = xor i64 %1619, %1622
  %1624 = add nuw nsw i64 %1623, %1619
  %1625 = icmp eq i64 %1624, 2
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1626, i8* %1627, align 1, !tbaa !2450
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 8
  %1630 = load i64, i64* %RCX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1629 to i64*
  store i64 %1630, i64* %1633
  %1634 = load i64, i64* %RAX
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 3
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i32*
  %1638 = load i32, i32* %1637
  %1639 = sext i32 %1638 to i64
  store i64 %1639, i64* %RAX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RAX
  %1641 = mul i64 %1640, 8
  %1642 = add i64 %1641, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 8
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1642 to i64*
  %1646 = load i64, i64* %1645
  store i64 %1646, i64* %RAX, align 8, !tbaa !2428
  %1647 = load i64, i64* %RBP
  %1648 = sub i64 %1647, 40
  %1649 = load i64, i64* %RAX
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 4
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1648 to i64*
  store i64 %1649, i64* %1652
  %1653 = load i64, i64* %PC
  %1654 = sub i64 %1653, 601
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 5
  store i64 %1656, i64* %PC
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1654, i64* %1657, align 8, !tbaa !2428
  br label %block_400586

block_4008ac:                                     ; preds = %block_400586
  %1658 = load i64, i64* %RBP
  %1659 = sub i64 %1658, 12
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 7
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to i32*
  store i32 17, i32* %1662
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 12
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 3
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1664 to i32*
  %1668 = load i32, i32* %1667
  %1669 = zext i32 %1668 to i64
  store i64 %1669, i64* %RDI, align 8, !tbaa !2428
  %1670 = load i64, i64* %PC
  %1671 = sub i64 %1670, 934
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 5
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 5
  store i64 %1675, i64* %PC
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1677 = load i64, i64* %1676, align 8, !tbaa !2428
  %1678 = add i64 %1677, -8
  %1679 = inttoptr i64 %1678 to i64*
  store i64 %1673, i64* %1679
  store i64 %1678, i64* %1676, align 8, !tbaa !2428
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1671, i64* %1680, align 8, !tbaa !2428
  %1681 = load i64, i64* %PC
  %1682 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1681, %struct.Memory* %MEMORY.0)
  %1683 = load i64, i64* %RBP
  %1684 = sub i64 %1683, 8
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1684 to i64*
  %1688 = load i64, i64* %1687
  store i64 %1688, i64* %RAX, align 8, !tbaa !2428
  %1689 = load i64, i64* %RAX
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 3
  store i64 %1691, i64* %PC
  store i64 %1689, i64* %RCX, align 8, !tbaa !2428
  %1692 = load i64, i64* %RCX
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 4
  store i64 %1694, i64* %PC
  %1695 = add i64 4, %1692
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = icmp ult i64 %1695, %1692
  %1697 = icmp ult i64 %1695, 4
  %1698 = or i1 %1696, %1697
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1699, i8* %1700, align 1, !tbaa !2432
  %1701 = trunc i64 %1695 to i32
  %1702 = and i32 %1701, 255
  %1703 = call i32 @llvm.ctpop.i32(i32 %1702) #16
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = xor i8 %1705, 1
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1706, i8* %1707, align 1, !tbaa !2446
  %1708 = xor i64 4, %1692
  %1709 = xor i64 %1708, %1695
  %1710 = lshr i64 %1709, 4
  %1711 = trunc i64 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1712, i8* %1713, align 1, !tbaa !2447
  %1714 = icmp eq i64 %1695, 0
  %1715 = zext i1 %1714 to i8
  %1716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1715, i8* %1716, align 1, !tbaa !2448
  %1717 = lshr i64 %1695, 63
  %1718 = trunc i64 %1717 to i8
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1718, i8* %1719, align 1, !tbaa !2449
  %1720 = lshr i64 %1692, 63
  %1721 = xor i64 %1717, %1720
  %1722 = add nuw nsw i64 %1721, %1717
  %1723 = icmp eq i64 %1722, 2
  %1724 = zext i1 %1723 to i8
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1724, i8* %1725, align 1, !tbaa !2450
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 8
  %1728 = load i64, i64* %RCX
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 4
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1727 to i64*
  store i64 %1728, i64* %1731
  %1732 = load i64, i64* %RAX
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 3
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i32*
  %1736 = load i32, i32* %1735
  %1737 = sext i32 %1736 to i64
  store i64 %1737, i64* %RAX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RAX
  %1739 = mul i64 %1738, 8
  %1740 = add i64 %1739, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 8
  store i64 %1742, i64* %PC
  %1743 = inttoptr i64 %1740 to i64*
  %1744 = load i64, i64* %1743
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RBP
  %1746 = sub i64 %1745, 40
  %1747 = load i64, i64* %RAX
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 4
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1746 to i64*
  store i64 %1747, i64* %1750
  %1751 = load i64, i64* %PC
  %1752 = sub i64 %1751, 851
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 5
  store i64 %1754, i64* %PC
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1752, i64* %1755, align 8, !tbaa !2428
  br label %block_400586

block_4009a6:                                     ; preds = %block_400586
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 12
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 7
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  store i32 22, i32* %1760
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 12
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RDI, align 8, !tbaa !2428
  %1768 = load i64, i64* %PC
  %1769 = sub i64 %1768, 1184
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 5
  store i64 %1773, i64* %PC
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1775 = load i64, i64* %1774, align 8, !tbaa !2428
  %1776 = add i64 %1775, -8
  %1777 = inttoptr i64 %1776 to i64*
  store i64 %1771, i64* %1777
  store i64 %1776, i64* %1774, align 8, !tbaa !2428
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1769, i64* %1778, align 8, !tbaa !2428
  %1779 = load i64, i64* %PC
  %1780 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1779, %struct.Memory* %MEMORY.0)
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 8
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i64*
  %1786 = load i64, i64* %1785
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RAX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 4
  store i64 %1792, i64* %PC
  %1793 = add i64 4, %1790
  store i64 %1793, i64* %RCX, align 8, !tbaa !2428
  %1794 = icmp ult i64 %1793, %1790
  %1795 = icmp ult i64 %1793, 4
  %1796 = or i1 %1794, %1795
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = trunc i64 %1793 to i32
  %1800 = and i32 %1799, 255
  %1801 = call i32 @llvm.ctpop.i32(i32 %1800) #16
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1804, i8* %1805, align 1, !tbaa !2446
  %1806 = xor i64 4, %1790
  %1807 = xor i64 %1806, %1793
  %1808 = lshr i64 %1807, 4
  %1809 = trunc i64 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i64 %1793, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i64 %1793, 63
  %1816 = trunc i64 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i64 %1790, 63
  %1819 = xor i64 %1815, %1818
  %1820 = add nuw nsw i64 %1819, %1815
  %1821 = icmp eq i64 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 8
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1825 to i64*
  store i64 %1826, i64* %1829
  %1830 = load i64, i64* %RAX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 3
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = mul i64 %1836, 8
  %1838 = add i64 %1837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 8
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %RAX
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1844 to i64*
  store i64 %1845, i64* %1848
  %1849 = load i64, i64* %PC
  %1850 = sub i64 %1849, 1101
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 5
  store i64 %1852, i64* %PC
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1850, i64* %1853, align 8, !tbaa !2428
  br label %block_400586

block_400a3c:                                     ; preds = %block_400586
  %1854 = load i64, i64* %RBP
  %1855 = sub i64 %1854, 12
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 7
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  store i32 25, i32* %1858
  %1859 = load i64, i64* %PC
  %1860 = tail call %struct.Memory* @sub_400a43(%struct.State* %0, i64 %1859, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1860

block_400586:                                     ; preds = %block_400b04, %block_400686, %block_400787, %block_400a0a, %block_40058c, %block_400910, %block_400816, %block_40071c, %block_400aa0, %block_400622, %block_4009a6, %block_4008ac, %block_4007b2, %block_400b36, %block_4006b8, %block_400942, %block_400848, %block_40074e, %block_400ad2, %block_400654, %block_4009d8, %block_4008de, %block_4007e4, %block_400b68, %block_4006ea, %block_400a6e, %block_4005f0, %block_400974
  %MEMORY.0 = phi %struct.Memory* [ %2577, %block_400787 ], [ %1780, %block_4009a6 ], [ %1682, %block_4008ac ], [ %1584, %block_4007b2 ], [ %1486, %block_400b36 ], [ %1388, %block_4006b8 ], [ %1283, %block_400942 ], [ %1185, %block_400848 ], [ %1087, %block_40074e ], [ %249, %block_400a6e ], [ %151, %block_4005f0 ], [ %53, %block_400974 ], [ %2386, %block_40058c ], [ %739, %block_4009d8 ], [ %935, %block_400ad2 ], [ %837, %block_400654 ], [ %347, %block_4006ea ], [ %445, %block_400b68 ], [ %543, %block_4007e4 ], [ %641, %block_4008de ], [ %1896, %block_400622 ], [ %1994, %block_400aa0 ], [ %2092, %block_40071c ], [ %2190, %block_400816 ], [ %2288, %block_400910 ], [ %2484, %block_400a0a ], [ %2675, %block_400686 ], [ %2773, %block_400b04 ]
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 40
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 4
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i64*
  %1866 = load i64, i64* %1865
  store i64 %1866, i64* %RAX, align 8, !tbaa !2428
  %1867 = load i64, i64* %RAX
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 2
  store i64 %1869, i64* %PC
  %1870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1867, i64* %1870, align 8, !tbaa !2428
  %1871 = load i64, i64* %PC
  switch i64 %1871, label %2852 [
    i64 4196224, label %block_400780
    i64 4197124, label %block_400b04
    i64 4195974, label %block_400686
    i64 4196874, label %block_400a0a
    i64 4196624, label %block_400910
    i64 4196374, label %block_400816
    i64 4196124, label %block_40071c
    i64 4197024, label %block_400aa0
    i64 4195874, label %block_400622
    i64 4196574, label %block_4008de
    i64 4196324, label %block_4007e4
    i64 4197224, label %block_400b68
    i64 4196074, label %block_4006ea
    i64 4195924, label %block_400654
    i64 4197074, label %block_400ad2
    i64 4196474, label %block_40087a
    i64 4196824, label %block_4009d8
    i64 4195724, label %block_40058c
    i64 4196724, label %block_400974
    i64 4195824, label %block_4005f0
    i64 4196974, label %block_400a6e
    i64 4195705, label %block_400579
    i64 4195774, label %block_4005be
    i64 4196924, label %block_400a3c
    i64 4196174, label %block_40074e
    i64 4196424, label %block_400848
    i64 4196674, label %block_400942
    i64 4196024, label %block_4006b8
    i64 4197174, label %block_400b36
    i64 4196274, label %block_4007b2
    i64 4196524, label %block_4008ac
    i64 4196774, label %block_4009a6
  ]

block_400622:                                     ; preds = %block_400586
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 12
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 7
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i32*
  store i32 4, i32* %1876
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 12
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = zext i32 %1882 to i64
  store i64 %1883, i64* %RDI, align 8, !tbaa !2428
  %1884 = load i64, i64* %PC
  %1885 = sub i64 %1884, 284
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 5
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 5
  store i64 %1889, i64* %PC
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1891 = load i64, i64* %1890, align 8, !tbaa !2428
  %1892 = add i64 %1891, -8
  %1893 = inttoptr i64 %1892 to i64*
  store i64 %1887, i64* %1893
  store i64 %1892, i64* %1890, align 8, !tbaa !2428
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1885, i64* %1894, align 8, !tbaa !2428
  %1895 = load i64, i64* %PC
  %1896 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1895, %struct.Memory* %MEMORY.0)
  %1897 = load i64, i64* %RBP
  %1898 = sub i64 %1897, 8
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 4
  store i64 %1900, i64* %PC
  %1901 = inttoptr i64 %1898 to i64*
  %1902 = load i64, i64* %1901
  store i64 %1902, i64* %RAX, align 8, !tbaa !2428
  %1903 = load i64, i64* %RAX
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1906 = load i64, i64* %RCX
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 4
  store i64 %1908, i64* %PC
  %1909 = add i64 4, %1906
  store i64 %1909, i64* %RCX, align 8, !tbaa !2428
  %1910 = icmp ult i64 %1909, %1906
  %1911 = icmp ult i64 %1909, 4
  %1912 = or i1 %1910, %1911
  %1913 = zext i1 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1913, i8* %1914, align 1, !tbaa !2432
  %1915 = trunc i64 %1909 to i32
  %1916 = and i32 %1915, 255
  %1917 = call i32 @llvm.ctpop.i32(i32 %1916) #16
  %1918 = trunc i32 %1917 to i8
  %1919 = and i8 %1918, 1
  %1920 = xor i8 %1919, 1
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1920, i8* %1921, align 1, !tbaa !2446
  %1922 = xor i64 4, %1906
  %1923 = xor i64 %1922, %1909
  %1924 = lshr i64 %1923, 4
  %1925 = trunc i64 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1926, i8* %1927, align 1, !tbaa !2447
  %1928 = icmp eq i64 %1909, 0
  %1929 = zext i1 %1928 to i8
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1929, i8* %1930, align 1, !tbaa !2448
  %1931 = lshr i64 %1909, 63
  %1932 = trunc i64 %1931 to i8
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1932, i8* %1933, align 1, !tbaa !2449
  %1934 = lshr i64 %1906, 63
  %1935 = xor i64 %1931, %1934
  %1936 = add nuw nsw i64 %1935, %1931
  %1937 = icmp eq i64 %1936, 2
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1938, i8* %1939, align 1, !tbaa !2450
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 8
  %1942 = load i64, i64* %RCX
  %1943 = load i64, i64* %PC
  %1944 = add i64 %1943, 4
  store i64 %1944, i64* %PC
  %1945 = inttoptr i64 %1941 to i64*
  store i64 %1942, i64* %1945
  %1946 = load i64, i64* %RAX
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 3
  store i64 %1948, i64* %PC
  %1949 = inttoptr i64 %1946 to i32*
  %1950 = load i32, i32* %1949
  %1951 = sext i32 %1950 to i64
  store i64 %1951, i64* %RAX, align 8, !tbaa !2428
  %1952 = load i64, i64* %RAX
  %1953 = mul i64 %1952, 8
  %1954 = add i64 %1953, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 8
  store i64 %1956, i64* %PC
  %1957 = inttoptr i64 %1954 to i64*
  %1958 = load i64, i64* %1957
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RBP
  %1960 = sub i64 %1959, 40
  %1961 = load i64, i64* %RAX
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 4
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1960 to i64*
  store i64 %1961, i64* %1964
  %1965 = load i64, i64* %PC
  %1966 = sub i64 %1965, 201
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 5
  store i64 %1968, i64* %PC
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1966, i64* %1969, align 8, !tbaa !2428
  br label %block_400586

block_400aa0:                                     ; preds = %block_400586
  %1970 = load i64, i64* %RBP
  %1971 = sub i64 %1970, 12
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 7
  store i64 %1973, i64* %PC
  %1974 = inttoptr i64 %1971 to i32*
  store i32 27, i32* %1974
  %1975 = load i64, i64* %RBP
  %1976 = sub i64 %1975, 12
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 3
  store i64 %1978, i64* %PC
  %1979 = inttoptr i64 %1976 to i32*
  %1980 = load i32, i32* %1979
  %1981 = zext i32 %1980 to i64
  store i64 %1981, i64* %RDI, align 8, !tbaa !2428
  %1982 = load i64, i64* %PC
  %1983 = sub i64 %1982, 1434
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 5
  store i64 %1987, i64* %PC
  %1988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1989 = load i64, i64* %1988, align 8, !tbaa !2428
  %1990 = add i64 %1989, -8
  %1991 = inttoptr i64 %1990 to i64*
  store i64 %1985, i64* %1991
  store i64 %1990, i64* %1988, align 8, !tbaa !2428
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1983, i64* %1992, align 8, !tbaa !2428
  %1993 = load i64, i64* %PC
  %1994 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1993, %struct.Memory* %MEMORY.0)
  %1995 = load i64, i64* %RBP
  %1996 = sub i64 %1995, 8
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 4
  store i64 %1998, i64* %PC
  %1999 = inttoptr i64 %1996 to i64*
  %2000 = load i64, i64* %1999
  store i64 %2000, i64* %RAX, align 8, !tbaa !2428
  %2001 = load i64, i64* %RAX
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 3
  store i64 %2003, i64* %PC
  store i64 %2001, i64* %RCX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RCX
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 4
  store i64 %2006, i64* %PC
  %2007 = add i64 4, %2004
  store i64 %2007, i64* %RCX, align 8, !tbaa !2428
  %2008 = icmp ult i64 %2007, %2004
  %2009 = icmp ult i64 %2007, 4
  %2010 = or i1 %2008, %2009
  %2011 = zext i1 %2010 to i8
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2011, i8* %2012, align 1, !tbaa !2432
  %2013 = trunc i64 %2007 to i32
  %2014 = and i32 %2013, 255
  %2015 = call i32 @llvm.ctpop.i32(i32 %2014) #16
  %2016 = trunc i32 %2015 to i8
  %2017 = and i8 %2016, 1
  %2018 = xor i8 %2017, 1
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2018, i8* %2019, align 1, !tbaa !2446
  %2020 = xor i64 4, %2004
  %2021 = xor i64 %2020, %2007
  %2022 = lshr i64 %2021, 4
  %2023 = trunc i64 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2024, i8* %2025, align 1, !tbaa !2447
  %2026 = icmp eq i64 %2007, 0
  %2027 = zext i1 %2026 to i8
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2027, i8* %2028, align 1, !tbaa !2448
  %2029 = lshr i64 %2007, 63
  %2030 = trunc i64 %2029 to i8
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2030, i8* %2031, align 1, !tbaa !2449
  %2032 = lshr i64 %2004, 63
  %2033 = xor i64 %2029, %2032
  %2034 = add nuw nsw i64 %2033, %2029
  %2035 = icmp eq i64 %2034, 2
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2036, i8* %2037, align 1, !tbaa !2450
  %2038 = load i64, i64* %RBP
  %2039 = sub i64 %2038, 8
  %2040 = load i64, i64* %RCX
  %2041 = load i64, i64* %PC
  %2042 = add i64 %2041, 4
  store i64 %2042, i64* %PC
  %2043 = inttoptr i64 %2039 to i64*
  store i64 %2040, i64* %2043
  %2044 = load i64, i64* %RAX
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 3
  store i64 %2046, i64* %PC
  %2047 = inttoptr i64 %2044 to i32*
  %2048 = load i32, i32* %2047
  %2049 = sext i32 %2048 to i64
  store i64 %2049, i64* %RAX, align 8, !tbaa !2428
  %2050 = load i64, i64* %RAX
  %2051 = mul i64 %2050, 8
  %2052 = add i64 %2051, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 8
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 40
  %2059 = load i64, i64* %RAX
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 4
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2058 to i64*
  store i64 %2059, i64* %2062
  %2063 = load i64, i64* %PC
  %2064 = sub i64 %2063, 1351
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 5
  store i64 %2066, i64* %PC
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2064, i64* %2067, align 8, !tbaa !2428
  br label %block_400586

block_40071c:                                     ; preds = %block_400586
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 12
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 7
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  store i32 9, i32* %2072
  %2073 = load i64, i64* %RBP
  %2074 = sub i64 %2073, 12
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 3
  store i64 %2076, i64* %PC
  %2077 = inttoptr i64 %2074 to i32*
  %2078 = load i32, i32* %2077
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDI, align 8, !tbaa !2428
  %2080 = load i64, i64* %PC
  %2081 = sub i64 %2080, 534
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 5
  store i64 %2085, i64* %PC
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2087 = load i64, i64* %2086, align 8, !tbaa !2428
  %2088 = add i64 %2087, -8
  %2089 = inttoptr i64 %2088 to i64*
  store i64 %2083, i64* %2089
  store i64 %2088, i64* %2086, align 8, !tbaa !2428
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2081, i64* %2090, align 8, !tbaa !2428
  %2091 = load i64, i64* %PC
  %2092 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2091, %struct.Memory* %MEMORY.0)
  %2093 = load i64, i64* %RBP
  %2094 = sub i64 %2093, 8
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 4
  store i64 %2096, i64* %PC
  %2097 = inttoptr i64 %2094 to i64*
  %2098 = load i64, i64* %2097
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = load i64, i64* %RAX
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 3
  store i64 %2101, i64* %PC
  store i64 %2099, i64* %RCX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RCX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = add i64 4, %2102
  store i64 %2105, i64* %RCX, align 8, !tbaa !2428
  %2106 = icmp ult i64 %2105, %2102
  %2107 = icmp ult i64 %2105, 4
  %2108 = or i1 %2106, %2107
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2109, i8* %2110, align 1, !tbaa !2432
  %2111 = trunc i64 %2105 to i32
  %2112 = and i32 %2111, 255
  %2113 = call i32 @llvm.ctpop.i32(i32 %2112) #16
  %2114 = trunc i32 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = xor i8 %2115, 1
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2116, i8* %2117, align 1, !tbaa !2446
  %2118 = xor i64 4, %2102
  %2119 = xor i64 %2118, %2105
  %2120 = lshr i64 %2119, 4
  %2121 = trunc i64 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2122, i8* %2123, align 1, !tbaa !2447
  %2124 = icmp eq i64 %2105, 0
  %2125 = zext i1 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2125, i8* %2126, align 1, !tbaa !2448
  %2127 = lshr i64 %2105, 63
  %2128 = trunc i64 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2128, i8* %2129, align 1, !tbaa !2449
  %2130 = lshr i64 %2102, 63
  %2131 = xor i64 %2127, %2130
  %2132 = add nuw nsw i64 %2131, %2127
  %2133 = icmp eq i64 %2132, 2
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2134, i8* %2135, align 1, !tbaa !2450
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 8
  %2138 = load i64, i64* %RCX
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 4
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2137 to i64*
  store i64 %2138, i64* %2141
  %2142 = load i64, i64* %RAX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RAX
  %2149 = mul i64 %2148, 8
  %2150 = add i64 %2149, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 8
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 40
  %2157 = load i64, i64* %RAX
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 4
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2156 to i64*
  store i64 %2157, i64* %2160
  %2161 = load i64, i64* %PC
  %2162 = sub i64 %2161, 451
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 5
  store i64 %2164, i64* %PC
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2162, i64* %2165, align 8, !tbaa !2428
  br label %block_400586

block_400816:                                     ; preds = %block_400586
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 12
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 7
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  store i32 14, i32* %2170
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 12
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to i32*
  %2176 = load i32, i32* %2175
  %2177 = zext i32 %2176 to i64
  store i64 %2177, i64* %RDI, align 8, !tbaa !2428
  %2178 = load i64, i64* %PC
  %2179 = sub i64 %2178, 784
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC
  %2184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2185 = load i64, i64* %2184, align 8, !tbaa !2428
  %2186 = add i64 %2185, -8
  %2187 = inttoptr i64 %2186 to i64*
  store i64 %2181, i64* %2187
  store i64 %2186, i64* %2184, align 8, !tbaa !2428
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2179, i64* %2188, align 8, !tbaa !2428
  %2189 = load i64, i64* %PC
  %2190 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2189, %struct.Memory* %MEMORY.0)
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 8
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i64*
  %2196 = load i64, i64* %2195
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RAX
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 3
  store i64 %2199, i64* %PC
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2200 = load i64, i64* %RCX
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 4
  store i64 %2202, i64* %PC
  %2203 = add i64 4, %2200
  store i64 %2203, i64* %RCX, align 8, !tbaa !2428
  %2204 = icmp ult i64 %2203, %2200
  %2205 = icmp ult i64 %2203, 4
  %2206 = or i1 %2204, %2205
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2207, i8* %2208, align 1, !tbaa !2432
  %2209 = trunc i64 %2203 to i32
  %2210 = and i32 %2209, 255
  %2211 = call i32 @llvm.ctpop.i32(i32 %2210) #16
  %2212 = trunc i32 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = xor i8 %2213, 1
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2214, i8* %2215, align 1, !tbaa !2446
  %2216 = xor i64 4, %2200
  %2217 = xor i64 %2216, %2203
  %2218 = lshr i64 %2217, 4
  %2219 = trunc i64 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2220, i8* %2221, align 1, !tbaa !2447
  %2222 = icmp eq i64 %2203, 0
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2223, i8* %2224, align 1, !tbaa !2448
  %2225 = lshr i64 %2203, 63
  %2226 = trunc i64 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2226, i8* %2227, align 1, !tbaa !2449
  %2228 = lshr i64 %2200, 63
  %2229 = xor i64 %2225, %2228
  %2230 = add nuw nsw i64 %2229, %2225
  %2231 = icmp eq i64 %2230, 2
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2232, i8* %2233, align 1, !tbaa !2450
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 8
  %2236 = load i64, i64* %RCX
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 4
  store i64 %2238, i64* %PC
  %2239 = inttoptr i64 %2235 to i64*
  store i64 %2236, i64* %2239
  %2240 = load i64, i64* %RAX
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i32*
  %2244 = load i32, i32* %2243
  %2245 = sext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RAX
  %2247 = mul i64 %2246, 8
  %2248 = add i64 %2247, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 8
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2248 to i64*
  %2252 = load i64, i64* %2251
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RBP
  %2254 = sub i64 %2253, 40
  %2255 = load i64, i64* %RAX
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 4
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2254 to i64*
  store i64 %2255, i64* %2258
  %2259 = load i64, i64* %PC
  %2260 = sub i64 %2259, 701
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 5
  store i64 %2262, i64* %PC
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2260, i64* %2263, align 8, !tbaa !2428
  br label %block_400586

block_400910:                                     ; preds = %block_400586
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 12
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 7
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2265 to i32*
  store i32 19, i32* %2268
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 12
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 3
  store i64 %2272, i64* %PC
  %2273 = inttoptr i64 %2270 to i32*
  %2274 = load i32, i32* %2273
  %2275 = zext i32 %2274 to i64
  store i64 %2275, i64* %RDI, align 8, !tbaa !2428
  %2276 = load i64, i64* %PC
  %2277 = sub i64 %2276, 1034
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 5
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 5
  store i64 %2281, i64* %PC
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2283 = load i64, i64* %2282, align 8, !tbaa !2428
  %2284 = add i64 %2283, -8
  %2285 = inttoptr i64 %2284 to i64*
  store i64 %2279, i64* %2285
  store i64 %2284, i64* %2282, align 8, !tbaa !2428
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2277, i64* %2286, align 8, !tbaa !2428
  %2287 = load i64, i64* %PC
  %2288 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2287, %struct.Memory* %MEMORY.0)
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 8
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 4
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = load i64, i64* %RAX
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RCX
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 4
  store i64 %2300, i64* %PC
  %2301 = add i64 4, %2298
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = icmp ult i64 %2301, %2298
  %2303 = icmp ult i64 %2301, 4
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = trunc i64 %2301 to i32
  %2308 = and i32 %2307, 255
  %2309 = call i32 @llvm.ctpop.i32(i32 %2308) #16
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2312, i8* %2313, align 1, !tbaa !2446
  %2314 = xor i64 4, %2298
  %2315 = xor i64 %2314, %2301
  %2316 = lshr i64 %2315, 4
  %2317 = trunc i64 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2318, i8* %2319, align 1, !tbaa !2447
  %2320 = icmp eq i64 %2301, 0
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2321, i8* %2322, align 1, !tbaa !2448
  %2323 = lshr i64 %2301, 63
  %2324 = trunc i64 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2324, i8* %2325, align 1, !tbaa !2449
  %2326 = lshr i64 %2298, 63
  %2327 = xor i64 %2323, %2326
  %2328 = add nuw nsw i64 %2327, %2323
  %2329 = icmp eq i64 %2328, 2
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2330, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 8
  %2334 = load i64, i64* %RCX
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2333 to i64*
  store i64 %2334, i64* %2337
  %2338 = load i64, i64* %RAX
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 3
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341
  %2343 = sext i32 %2342 to i64
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = mul i64 %2344, 8
  %2346 = add i64 %2345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 8
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i64*
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 40
  %2353 = load i64, i64* %RAX
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2352 to i64*
  store i64 %2353, i64* %2356
  %2357 = load i64, i64* %PC
  %2358 = sub i64 %2357, 951
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2358, i64* %2361, align 8, !tbaa !2428
  br label %block_400586

block_40058c:                                     ; preds = %block_400586
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 12
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i32*
  store i32 1, i32* %2366
  %2367 = load i64, i64* %RBP
  %2368 = sub i64 %2367, 12
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 3
  store i64 %2370, i64* %PC
  %2371 = inttoptr i64 %2368 to i32*
  %2372 = load i32, i32* %2371
  %2373 = zext i32 %2372 to i64
  store i64 %2373, i64* %RDI, align 8, !tbaa !2428
  %2374 = load i64, i64* %PC
  %2375 = sub i64 %2374, 134
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 5
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  store i64 %2379, i64* %PC
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2381 = load i64, i64* %2380, align 8, !tbaa !2428
  %2382 = add i64 %2381, -8
  %2383 = inttoptr i64 %2382 to i64*
  store i64 %2377, i64* %2383
  store i64 %2382, i64* %2380, align 8, !tbaa !2428
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2375, i64* %2384, align 8, !tbaa !2428
  %2385 = load i64, i64* %PC
  %2386 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2385, %struct.Memory* %MEMORY.0)
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 8
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 4
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to i64*
  %2392 = load i64, i64* %2391
  store i64 %2392, i64* %RAX, align 8, !tbaa !2428
  %2393 = load i64, i64* %RAX
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 3
  store i64 %2395, i64* %PC
  store i64 %2393, i64* %RCX, align 8, !tbaa !2428
  %2396 = load i64, i64* %RCX
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 4
  store i64 %2398, i64* %PC
  %2399 = add i64 4, %2396
  store i64 %2399, i64* %RCX, align 8, !tbaa !2428
  %2400 = icmp ult i64 %2399, %2396
  %2401 = icmp ult i64 %2399, 4
  %2402 = or i1 %2400, %2401
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2403, i8* %2404, align 1, !tbaa !2432
  %2405 = trunc i64 %2399 to i32
  %2406 = and i32 %2405, 255
  %2407 = call i32 @llvm.ctpop.i32(i32 %2406) #16
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = xor i8 %2409, 1
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2410, i8* %2411, align 1, !tbaa !2446
  %2412 = xor i64 4, %2396
  %2413 = xor i64 %2412, %2399
  %2414 = lshr i64 %2413, 4
  %2415 = trunc i64 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2416, i8* %2417, align 1, !tbaa !2447
  %2418 = icmp eq i64 %2399, 0
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2419, i8* %2420, align 1, !tbaa !2448
  %2421 = lshr i64 %2399, 63
  %2422 = trunc i64 %2421 to i8
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2422, i8* %2423, align 1, !tbaa !2449
  %2424 = lshr i64 %2396, 63
  %2425 = xor i64 %2421, %2424
  %2426 = add nuw nsw i64 %2425, %2421
  %2427 = icmp eq i64 %2426, 2
  %2428 = zext i1 %2427 to i8
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2428, i8* %2429, align 1, !tbaa !2450
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 8
  %2432 = load i64, i64* %RCX
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 4
  store i64 %2434, i64* %PC
  %2435 = inttoptr i64 %2431 to i64*
  store i64 %2432, i64* %2435
  %2436 = load i64, i64* %RAX
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %PC
  %2439 = inttoptr i64 %2436 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RAX
  %2443 = mul i64 %2442, 8
  %2444 = add i64 %2443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 8
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2444 to i64*
  %2448 = load i64, i64* %2447
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %RAX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 4
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2450 to i64*
  store i64 %2451, i64* %2454
  %2455 = load i64, i64* %PC
  %2456 = sub i64 %2455, 51
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 5
  store i64 %2458, i64* %PC
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2456, i64* %2459, align 8, !tbaa !2428
  br label %block_400586

block_400a0a:                                     ; preds = %block_400586
  %2460 = load i64, i64* %RBP
  %2461 = sub i64 %2460, 12
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 7
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to i32*
  store i32 24, i32* %2464
  %2465 = load i64, i64* %RBP
  %2466 = sub i64 %2465, 12
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 3
  store i64 %2468, i64* %PC
  %2469 = inttoptr i64 %2466 to i32*
  %2470 = load i32, i32* %2469
  %2471 = zext i32 %2470 to i64
  store i64 %2471, i64* %RDI, align 8, !tbaa !2428
  %2472 = load i64, i64* %PC
  %2473 = sub i64 %2472, 1284
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2479 = load i64, i64* %2478, align 8, !tbaa !2428
  %2480 = add i64 %2479, -8
  %2481 = inttoptr i64 %2480 to i64*
  store i64 %2475, i64* %2481
  store i64 %2480, i64* %2478, align 8, !tbaa !2428
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2473, i64* %2482, align 8, !tbaa !2428
  %2483 = load i64, i64* %PC
  %2484 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2483, %struct.Memory* %MEMORY.0)
  %2485 = load i64, i64* %RBP
  %2486 = sub i64 %2485, 8
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 4
  store i64 %2488, i64* %PC
  %2489 = inttoptr i64 %2486 to i64*
  %2490 = load i64, i64* %2489
  store i64 %2490, i64* %RAX, align 8, !tbaa !2428
  %2491 = load i64, i64* %RAX
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 3
  store i64 %2493, i64* %PC
  store i64 %2491, i64* %RCX, align 8, !tbaa !2428
  %2494 = load i64, i64* %RCX
  %2495 = load i64, i64* %PC
  %2496 = add i64 %2495, 4
  store i64 %2496, i64* %PC
  %2497 = add i64 4, %2494
  store i64 %2497, i64* %RCX, align 8, !tbaa !2428
  %2498 = icmp ult i64 %2497, %2494
  %2499 = icmp ult i64 %2497, 4
  %2500 = or i1 %2498, %2499
  %2501 = zext i1 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2501, i8* %2502, align 1, !tbaa !2432
  %2503 = trunc i64 %2497 to i32
  %2504 = and i32 %2503, 255
  %2505 = call i32 @llvm.ctpop.i32(i32 %2504) #16
  %2506 = trunc i32 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = xor i8 %2507, 1
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2508, i8* %2509, align 1, !tbaa !2446
  %2510 = xor i64 4, %2494
  %2511 = xor i64 %2510, %2497
  %2512 = lshr i64 %2511, 4
  %2513 = trunc i64 %2512 to i8
  %2514 = and i8 %2513, 1
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2514, i8* %2515, align 1, !tbaa !2447
  %2516 = icmp eq i64 %2497, 0
  %2517 = zext i1 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2517, i8* %2518, align 1, !tbaa !2448
  %2519 = lshr i64 %2497, 63
  %2520 = trunc i64 %2519 to i8
  %2521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2520, i8* %2521, align 1, !tbaa !2449
  %2522 = lshr i64 %2494, 63
  %2523 = xor i64 %2519, %2522
  %2524 = add nuw nsw i64 %2523, %2519
  %2525 = icmp eq i64 %2524, 2
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2527, align 1, !tbaa !2450
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 8
  %2530 = load i64, i64* %RCX
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2529 to i64*
  store i64 %2530, i64* %2533
  %2534 = load i64, i64* %RAX
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 3
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RAX
  %2541 = mul i64 %2540, 8
  %2542 = add i64 %2541, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 8
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to i64*
  %2546 = load i64, i64* %2545
  store i64 %2546, i64* %RAX, align 8, !tbaa !2428
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 40
  %2549 = load i64, i64* %RAX
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 4
  store i64 %2551, i64* %PC
  %2552 = inttoptr i64 %2548 to i64*
  store i64 %2549, i64* %2552
  %2553 = load i64, i64* %PC
  %2554 = sub i64 %2553, 1201
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 5
  store i64 %2556, i64* %PC
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2554, i64* %2557, align 8, !tbaa !2428
  br label %block_400586

block_400787:                                     ; preds = %block_400780, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400780 ]
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 12
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 3
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  %2563 = load i32, i32* %2562
  %2564 = zext i32 %2563 to i64
  store i64 %2564, i64* %RDI, align 8, !tbaa !2428
  %2565 = load i64, i64* %PC
  %2566 = sub i64 %2565, 634
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  %2569 = load i64, i64* %PC
  %2570 = add i64 %2569, 5
  store i64 %2570, i64* %PC
  %2571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2572 = load i64, i64* %2571, align 8, !tbaa !2428
  %2573 = add i64 %2572, -8
  %2574 = inttoptr i64 %2573 to i64*
  store i64 %2568, i64* %2574
  store i64 %2573, i64* %2571, align 8, !tbaa !2428
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2566, i64* %2575, align 8, !tbaa !2428
  %2576 = load i64, i64* %PC
  %2577 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2576, %struct.Memory* %MEMORY.1)
  %2578 = load i64, i64* %RBP
  %2579 = sub i64 %2578, 8
  %2580 = load i64, i64* %PC
  %2581 = add i64 %2580, 4
  store i64 %2581, i64* %PC
  %2582 = inttoptr i64 %2579 to i64*
  %2583 = load i64, i64* %2582
  store i64 %2583, i64* %RAX, align 8, !tbaa !2428
  %2584 = load i64, i64* %RAX
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 3
  store i64 %2586, i64* %PC
  store i64 %2584, i64* %RCX, align 8, !tbaa !2428
  %2587 = load i64, i64* %RCX
  %2588 = load i64, i64* %PC
  %2589 = add i64 %2588, 4
  store i64 %2589, i64* %PC
  %2590 = add i64 4, %2587
  store i64 %2590, i64* %RCX, align 8, !tbaa !2428
  %2591 = icmp ult i64 %2590, %2587
  %2592 = icmp ult i64 %2590, 4
  %2593 = or i1 %2591, %2592
  %2594 = zext i1 %2593 to i8
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2594, i8* %2595, align 1, !tbaa !2432
  %2596 = trunc i64 %2590 to i32
  %2597 = and i32 %2596, 255
  %2598 = call i32 @llvm.ctpop.i32(i32 %2597) #16
  %2599 = trunc i32 %2598 to i8
  %2600 = and i8 %2599, 1
  %2601 = xor i8 %2600, 1
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2601, i8* %2602, align 1, !tbaa !2446
  %2603 = xor i64 4, %2587
  %2604 = xor i64 %2603, %2590
  %2605 = lshr i64 %2604, 4
  %2606 = trunc i64 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2607, i8* %2608, align 1, !tbaa !2447
  %2609 = icmp eq i64 %2590, 0
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2610, i8* %2611, align 1, !tbaa !2448
  %2612 = lshr i64 %2590, 63
  %2613 = trunc i64 %2612 to i8
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2613, i8* %2614, align 1, !tbaa !2449
  %2615 = lshr i64 %2587, 63
  %2616 = xor i64 %2612, %2615
  %2617 = add nuw nsw i64 %2616, %2612
  %2618 = icmp eq i64 %2617, 2
  %2619 = zext i1 %2618 to i8
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2619, i8* %2620, align 1, !tbaa !2450
  %2621 = load i64, i64* %RBP
  %2622 = sub i64 %2621, 8
  %2623 = load i64, i64* %RCX
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 4
  store i64 %2625, i64* %PC
  %2626 = inttoptr i64 %2622 to i64*
  store i64 %2623, i64* %2626
  %2627 = load i64, i64* %RAX
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 3
  store i64 %2629, i64* %PC
  %2630 = inttoptr i64 %2627 to i32*
  %2631 = load i32, i32* %2630
  %2632 = sext i32 %2631 to i64
  store i64 %2632, i64* %RAX, align 8, !tbaa !2428
  %2633 = load i64, i64* %RAX
  %2634 = mul i64 %2633, 8
  %2635 = add i64 %2634, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 8
  store i64 %2637, i64* %PC
  %2638 = inttoptr i64 %2635 to i64*
  %2639 = load i64, i64* %2638
  store i64 %2639, i64* %RAX, align 8, !tbaa !2428
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 40
  %2642 = load i64, i64* %RAX
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 4
  store i64 %2644, i64* %PC
  %2645 = inttoptr i64 %2641 to i64*
  store i64 %2642, i64* %2645
  %2646 = load i64, i64* %PC
  %2647 = sub i64 %2646, 551
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 5
  store i64 %2649, i64* %PC
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2647, i64* %2650, align 8, !tbaa !2428
  br label %block_400586

block_400686:                                     ; preds = %block_400586
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 12
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 7
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  store i32 6, i32* %2655
  %2656 = load i64, i64* %RBP
  %2657 = sub i64 %2656, 12
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 3
  store i64 %2659, i64* %PC
  %2660 = inttoptr i64 %2657 to i32*
  %2661 = load i32, i32* %2660
  %2662 = zext i32 %2661 to i64
  store i64 %2662, i64* %RDI, align 8, !tbaa !2428
  %2663 = load i64, i64* %PC
  %2664 = sub i64 %2663, 384
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 5
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 5
  store i64 %2668, i64* %PC
  %2669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2670 = load i64, i64* %2669, align 8, !tbaa !2428
  %2671 = add i64 %2670, -8
  %2672 = inttoptr i64 %2671 to i64*
  store i64 %2666, i64* %2672
  store i64 %2671, i64* %2669, align 8, !tbaa !2428
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2664, i64* %2673, align 8, !tbaa !2428
  %2674 = load i64, i64* %PC
  %2675 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2674, %struct.Memory* %MEMORY.0)
  %2676 = load i64, i64* %RBP
  %2677 = sub i64 %2676, 8
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 4
  store i64 %2679, i64* %PC
  %2680 = inttoptr i64 %2677 to i64*
  %2681 = load i64, i64* %2680
  store i64 %2681, i64* %RAX, align 8, !tbaa !2428
  %2682 = load i64, i64* %RAX
  %2683 = load i64, i64* %PC
  %2684 = add i64 %2683, 3
  store i64 %2684, i64* %PC
  store i64 %2682, i64* %RCX, align 8, !tbaa !2428
  %2685 = load i64, i64* %RCX
  %2686 = load i64, i64* %PC
  %2687 = add i64 %2686, 4
  store i64 %2687, i64* %PC
  %2688 = add i64 4, %2685
  store i64 %2688, i64* %RCX, align 8, !tbaa !2428
  %2689 = icmp ult i64 %2688, %2685
  %2690 = icmp ult i64 %2688, 4
  %2691 = or i1 %2689, %2690
  %2692 = zext i1 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2692, i8* %2693, align 1, !tbaa !2432
  %2694 = trunc i64 %2688 to i32
  %2695 = and i32 %2694, 255
  %2696 = call i32 @llvm.ctpop.i32(i32 %2695) #16
  %2697 = trunc i32 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = xor i8 %2698, 1
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2699, i8* %2700, align 1, !tbaa !2446
  %2701 = xor i64 4, %2685
  %2702 = xor i64 %2701, %2688
  %2703 = lshr i64 %2702, 4
  %2704 = trunc i64 %2703 to i8
  %2705 = and i8 %2704, 1
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2705, i8* %2706, align 1, !tbaa !2447
  %2707 = icmp eq i64 %2688, 0
  %2708 = zext i1 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2708, i8* %2709, align 1, !tbaa !2448
  %2710 = lshr i64 %2688, 63
  %2711 = trunc i64 %2710 to i8
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2711, i8* %2712, align 1, !tbaa !2449
  %2713 = lshr i64 %2685, 63
  %2714 = xor i64 %2710, %2713
  %2715 = add nuw nsw i64 %2714, %2710
  %2716 = icmp eq i64 %2715, 2
  %2717 = zext i1 %2716 to i8
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2717, i8* %2718, align 1, !tbaa !2450
  %2719 = load i64, i64* %RBP
  %2720 = sub i64 %2719, 8
  %2721 = load i64, i64* %RCX
  %2722 = load i64, i64* %PC
  %2723 = add i64 %2722, 4
  store i64 %2723, i64* %PC
  %2724 = inttoptr i64 %2720 to i64*
  store i64 %2721, i64* %2724
  %2725 = load i64, i64* %RAX
  %2726 = load i64, i64* %PC
  %2727 = add i64 %2726, 3
  store i64 %2727, i64* %PC
  %2728 = inttoptr i64 %2725 to i32*
  %2729 = load i32, i32* %2728
  %2730 = sext i32 %2729 to i64
  store i64 %2730, i64* %RAX, align 8, !tbaa !2428
  %2731 = load i64, i64* %RAX
  %2732 = mul i64 %2731, 8
  %2733 = add i64 %2732, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 8
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2733 to i64*
  %2737 = load i64, i64* %2736
  store i64 %2737, i64* %RAX, align 8, !tbaa !2428
  %2738 = load i64, i64* %RBP
  %2739 = sub i64 %2738, 40
  %2740 = load i64, i64* %RAX
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 4
  store i64 %2742, i64* %PC
  %2743 = inttoptr i64 %2739 to i64*
  store i64 %2740, i64* %2743
  %2744 = load i64, i64* %PC
  %2745 = sub i64 %2744, 301
  %2746 = load i64, i64* %PC
  %2747 = add i64 %2746, 5
  store i64 %2747, i64* %PC
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2745, i64* %2748, align 8, !tbaa !2428
  br label %block_400586

block_400b04:                                     ; preds = %block_400586
  %2749 = load i64, i64* %RBP
  %2750 = sub i64 %2749, 12
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 7
  store i64 %2752, i64* %PC
  %2753 = inttoptr i64 %2750 to i32*
  store i32 29, i32* %2753
  %2754 = load i64, i64* %RBP
  %2755 = sub i64 %2754, 12
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 3
  store i64 %2757, i64* %PC
  %2758 = inttoptr i64 %2755 to i32*
  %2759 = load i32, i32* %2758
  %2760 = zext i32 %2759 to i64
  store i64 %2760, i64* %RDI, align 8, !tbaa !2428
  %2761 = load i64, i64* %PC
  %2762 = sub i64 %2761, 1534
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 5
  %2765 = load i64, i64* %PC
  %2766 = add i64 %2765, 5
  store i64 %2766, i64* %PC
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2768 = load i64, i64* %2767, align 8, !tbaa !2428
  %2769 = add i64 %2768, -8
  %2770 = inttoptr i64 %2769 to i64*
  store i64 %2764, i64* %2770
  store i64 %2769, i64* %2767, align 8, !tbaa !2428
  %2771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2762, i64* %2771, align 8, !tbaa !2428
  %2772 = load i64, i64* %PC
  %2773 = call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %2772, %struct.Memory* %MEMORY.0)
  %2774 = load i64, i64* %RBP
  %2775 = sub i64 %2774, 8
  %2776 = load i64, i64* %PC
  %2777 = add i64 %2776, 4
  store i64 %2777, i64* %PC
  %2778 = inttoptr i64 %2775 to i64*
  %2779 = load i64, i64* %2778
  store i64 %2779, i64* %RAX, align 8, !tbaa !2428
  %2780 = load i64, i64* %RAX
  %2781 = load i64, i64* %PC
  %2782 = add i64 %2781, 3
  store i64 %2782, i64* %PC
  store i64 %2780, i64* %RCX, align 8, !tbaa !2428
  %2783 = load i64, i64* %RCX
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 4
  store i64 %2785, i64* %PC
  %2786 = add i64 4, %2783
  store i64 %2786, i64* %RCX, align 8, !tbaa !2428
  %2787 = icmp ult i64 %2786, %2783
  %2788 = icmp ult i64 %2786, 4
  %2789 = or i1 %2787, %2788
  %2790 = zext i1 %2789 to i8
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2790, i8* %2791, align 1, !tbaa !2432
  %2792 = trunc i64 %2786 to i32
  %2793 = and i32 %2792, 255
  %2794 = call i32 @llvm.ctpop.i32(i32 %2793) #16
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2797, i8* %2798, align 1, !tbaa !2446
  %2799 = xor i64 4, %2783
  %2800 = xor i64 %2799, %2786
  %2801 = lshr i64 %2800, 4
  %2802 = trunc i64 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2803, i8* %2804, align 1, !tbaa !2447
  %2805 = icmp eq i64 %2786, 0
  %2806 = zext i1 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2806, i8* %2807, align 1, !tbaa !2448
  %2808 = lshr i64 %2786, 63
  %2809 = trunc i64 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2809, i8* %2810, align 1, !tbaa !2449
  %2811 = lshr i64 %2783, 63
  %2812 = xor i64 %2808, %2811
  %2813 = add nuw nsw i64 %2812, %2808
  %2814 = icmp eq i64 %2813, 2
  %2815 = zext i1 %2814 to i8
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2815, i8* %2816, align 1, !tbaa !2450
  %2817 = load i64, i64* %RBP
  %2818 = sub i64 %2817, 8
  %2819 = load i64, i64* %RCX
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 4
  store i64 %2821, i64* %PC
  %2822 = inttoptr i64 %2818 to i64*
  store i64 %2819, i64* %2822
  %2823 = load i64, i64* %RAX
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 3
  store i64 %2825, i64* %PC
  %2826 = inttoptr i64 %2823 to i32*
  %2827 = load i32, i32* %2826
  %2828 = sext i32 %2827 to i64
  store i64 %2828, i64* %RAX, align 8, !tbaa !2428
  %2829 = load i64, i64* %RAX
  %2830 = mul i64 %2829, 8
  %2831 = add i64 %2830, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 8
  store i64 %2833, i64* %PC
  %2834 = inttoptr i64 %2831 to i64*
  %2835 = load i64, i64* %2834
  store i64 %2835, i64* %RAX, align 8, !tbaa !2428
  %2836 = load i64, i64* %RBP
  %2837 = sub i64 %2836, 40
  %2838 = load i64, i64* %RAX
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 4
  store i64 %2840, i64* %PC
  %2841 = inttoptr i64 %2837 to i64*
  store i64 %2838, i64* %2841
  %2842 = load i64, i64* %PC
  %2843 = sub i64 %2842, 1451
  %2844 = load i64, i64* %PC
  %2845 = add i64 %2844, 5
  store i64 %2845, i64* %PC
  %2846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2843, i64* %2846, align 8, !tbaa !2428
  br label %block_400586

block_400780:                                     ; preds = %block_400586
  %2847 = load i64, i64* %RBP
  %2848 = sub i64 %2847, 12
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 7
  store i64 %2850, i64* %PC
  %2851 = inttoptr i64 %2848 to i32*
  store i32 11, i32* %2851
  br label %block_400787

; <label>:2852:                                   ; preds = %block_400586
  %2853 = load i64, i64* %PC
  %2854 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2853, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2854
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400500_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400500_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400500_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004d0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004d0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400cf0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400cf0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cf0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400c80___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400c80___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400c80___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400ba0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400ba0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602150___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602138_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @eval() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400530;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @eval_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400530_eval(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cf4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cf4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @execute() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @execute_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_execute(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_400c80___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_400cf0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
