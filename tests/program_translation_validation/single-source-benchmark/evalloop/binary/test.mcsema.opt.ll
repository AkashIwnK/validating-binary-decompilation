; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400400__text_type = type <{ [2258 x i8] }>
%seg_400ce0__rodata_type = type <{ [264 x i8], [9 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602020__data_type = type <{ [16 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%__bss_start_type = type <{ [4 x i8] }>
%sum_type = type <{ [4 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400400__text = internal constant %seg_400400__text_type <{ [2258 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\D0\0C@\00H\C7\C1`\0C@\00H\C7\C7\80\0B@\00\FF\15\C6\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80!`\00H=0!`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0!`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0!`\00UH\81\EE0!`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0!`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=y\1C \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05g\1C \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\8B}\FC\03<%4!`\00\89<%4!`\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC0H\89}\F8\C7E\F4\00\00\00\00H\8BE\F8H\89\C1H\83\C1\04H\89M\F8\8B\10\89\D0H\89\C1H\83\E9\1FH\89E\E8H\89M\E0\0F\87/\06\00\00H\8BE\E8H\8B\0C\C5\E8\0C@\00\FF\E1\C7E\F4\00\00\00\00H\83\C40]\C3H\8BE\D8\FF\E0\C7E\F4\01\00\00\00\8B}\F4\E8u\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\C8\FF\FF\FF\C7E\F4\02\00\00\00\8B}\F4\E8C\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\96\FF\FF\FF\C7E\F4\03\00\00\00\8B}\F4\E8\11\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9d\FF\FF\FF\C7E\F4\04\00\00\00\8B}\F4\E8\DF\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E92\FF\FF\FF\C7E\F4\05\00\00\00\8B}\F4\E8\AD\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\00\FF\FF\FF\C7E\F4\06\00\00\00\8B}\F4\E8{\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\CE\FE\FF\FF\C7E\F4\07\00\00\00\8B}\F4\E8I\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\9C\FE\FF\FF\C7E\F4\08\00\00\00\8B}\F4\E8\17\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9j\FE\FF\FF\C7E\F4\09\00\00\00\8B}\F4\E8\E5\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E98\FE\FF\FF\C7E\F4\0A\00\00\00\8B}\F4\E8\B3\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\06\FE\FF\FF\C7E\F4\0B\00\00\00\8B}\F4\E8\81\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\D4\FD\FF\FF\C7E\F4\0C\00\00\00\8B}\F4\E8O\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A2\FD\FF\FF\C7E\F4\0D\00\00\00\8B}\F4\E8\1D\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9p\FD\FF\FF\C7E\F4\0E\00\00\00\8B}\F4\E8\EB\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9>\FD\FF\FF\C7E\F4\0F\00\00\00\8B}\F4\E8\B9\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\0C\FD\FF\FF\C7E\F4\10\00\00\00\8B}\F4\E8\87\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\DA\FC\FF\FF\C7E\F4\11\00\00\00\8B}\F4\E8U\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A8\FC\FF\FF\C7E\F4\12\00\00\00\8B}\F4\E8#\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9v\FC\FF\FF\C7E\F4\13\00\00\00\8B}\F4\E8\F1\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9D\FC\FF\FF\C7E\F4\14\00\00\00\8B}\F4\E8\BF\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\12\FC\FF\FF\C7E\F4\15\00\00\00\8B}\F4\E8\8D\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E0\FB\FF\FF\C7E\F4\16\00\00\00\8B}\F4\E8[\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\AE\FB\FF\FF\C7E\F4\17\00\00\00\8B}\F4\E8)\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9|\FB\FF\FF\C7E\F4\18\00\00\00\8B}\F4\E8\F7\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9J\FB\FF\FF\C7E\F4\19\00\00\00\8B}\F4\E8\C5\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\18\FB\FF\FF\C7E\F4\1A\00\00\00\8B}\F4\E8\93\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E6\FA\FF\FF\C7E\F4\1B\00\00\00\8B}\F4\E8a\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\B4\FA\FF\FF\C7E\F4\1C\00\00\00\8B}\F4\E8/\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\82\FA\FF\FF\C7E\F4\1D\00\00\00\8B}\F4\E8\FD\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9P\FA\FF\FF\C7E\F4\1E\00\00\00\8B}\F4\E8\CB\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\1E\FA\FF\FF\C7E\F4\1F\00\00\00\8B}\F4\E8\99\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\EC\F9\FF\FF\E9\A4\F9\FF\FF\90UH\89\E5H\81\EC  \00\00\C7E\FC\00\00\00\00\C7E\F8\00\08\00\00\C7\85\EC\DF\FF\FF\00\00\00\00\81\BD\EC\DF\FF\FF\FF\07\00\00\0F\8DA\00\00\00\B8\1F\00\00\00\8B\8D\EC\DF\FF\FF\89\85\E4\DF\FF\FF\89\C8\99\8B\8D\E4\DF\FF\FF\F7\F9\83\C2\01Hc\B5\EC\DF\FF\FF\89\94\B5\F0\DF\FF\FF\8B\85\EC\DF\FF\FF\83\C0\01\89\85\EC\DF\FF\FF\E9\AF\FF\FF\FF\C7E\EC\00\00\00\00\C7\85\E8\DF\FF\FF\00\00\00\00\81\BD\E8\DF\FF\FF\A0\86\01\00\0F\8D \00\00\00H\8D\BD\F0\DF\FF\FF\E8\EF\F8\FF\FF\8B\85\E8\DF\FF\FF\83\C0\01\89\85\E8\DF\FF\FF\E9\D0\FF\FF\FFH\BF\E8\0D@\00\00\00\00\00\8B4%4!`\00\B0\00\E8\A3\F7\FF\FF1\F6\89\85\E0\DF\FF\FF\89\F0H\81\C4  \00\00]\C3AWAVI\89\D7AUATL\8D%~\11 \00UH\8D-~\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E87\F7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_400ce0__rodata = internal constant %seg_400ce0__rodata_type <{ [264 x i8] c"\01\00\02\00\00\00\00\00`\05@\00\00\00\00\00s\05@\00\00\00\00\00\A5\05@\00\00\00\00\00\D7\05@\00\00\00\00\00\09\06@\00\00\00\00\00;\06@\00\00\00\00\00m\06@\00\00\00\00\00\9F\06@\00\00\00\00\00\D1\06@\00\00\00\00\00\03\07@\00\00\00\00\005\07@\00\00\00\00\00g\07@\00\00\00\00\00\99\07@\00\00\00\00\00\CB\07@\00\00\00\00\00\FD\07@\00\00\00\00\00/\08@\00\00\00\00\00a\08@\00\00\00\00\00\93\08@\00\00\00\00\00\C5\08@\00\00\00\00\00\F7\08@\00\00\00\00\00)\09@\00\00\00\00\00[\09@\00\00\00\00\00\8D\09@\00\00\00\00\00\BF\09@\00\00\00\00\00\F1\09@\00\00\00\00\00#\0A@\00\00\00\00\00U\0A@\00\00\00\00\00\87\0A@\00\00\00\00\00\B9\0A@\00\00\00\00\00\EB\0A@\00\00\00\00\00\1D\0B@\00\00\00\00\00O\0B@\00\00\00\00\00", [9 x i8] c"Sum: %u\0A\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004b0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602020__data = internal global %seg_602020__data_type <{ [16 x i8] zeroinitializer, i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 345), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 364), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 414), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 464), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 514), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 564), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 614), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 664), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 714), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 764), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 814), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 864), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 914), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 964), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1014), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1064), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1114), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1164), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1214), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1264), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1314), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1364), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1414), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1464), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1514), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1564), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1614), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1664), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1714), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1764), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1814), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1864) }>
@__bss_start = global %__bss_start_type zeroinitializer
@sum = local_unnamed_addr global %sum_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400cd0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400c60___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @eval_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @execute_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400510_eval_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_4009bf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4009bf

block_4006fc:                                     ; preds = %block_4009bf
  %11 = add i64 %147, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %101)
  ret %struct.Memory* %14

block_4007f6:                                     ; preds = %block_4009bf
  %15 = add i64 %147, -12
  store i64 4196349, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 14, i32* %16, align 4
  %17 = load i64, i64* %PC, align 8
  %18 = tail call %struct.Memory* @sub_4007fd(%struct.State* nonnull %0, i64 %17, %struct.Memory* %101)
  ret %struct.Memory* %18

block_4008f0:                                     ; preds = %block_4009bf
  %19 = add i64 %147, -12
  store i64 4196599, i64* %PC, align 8
  %20 = inttoptr i64 %19 to i32*
  store i32 19, i32* %20, align 4
  %21 = load i64, i64* %PC, align 8
  %22 = tail call %struct.Memory* @sub_4008f7(%struct.State* nonnull %0, i64 %21, %struct.Memory* %101)
  ret %struct.Memory* %22

block_40056c:                                     ; preds = %block_4009bf
  %23 = add i64 %147, -12
  store i64 4195699, i64* %PC, align 8
  %24 = inttoptr i64 %23 to i32*
  store i32 1, i32* %24, align 4
  %25 = load i64, i64* %PC, align 8
  %26 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %25, %struct.Memory* %101)
  ret %struct.Memory* %26

block_4009ea:                                     ; preds = %block_4009bf
  %27 = add i64 %147, -12
  store i64 4196849, i64* %PC, align 8
  %28 = inttoptr i64 %27 to i32*
  store i32 24, i32* %28, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %29, %struct.Memory* %101)
  ret %struct.Memory* %30

block_400666:                                     ; preds = %block_4009bf
  %31 = add i64 %147, -12
  store i64 4195949, i64* %PC, align 8
  %32 = inttoptr i64 %31 to i32*
  store i32 6, i32* %32, align 4
  %33 = load i64, i64* %PC, align 8
  %34 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %33, %struct.Memory* %101)
  ret %struct.Memory* %34

block_400ae4:                                     ; preds = %block_4009bf
  %35 = add i64 %147, -12
  store i64 4197099, i64* %PC, align 8
  %36 = inttoptr i64 %35 to i32*
  store i32 29, i32* %36, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %37, %struct.Memory* %101)
  ret %struct.Memory* %38

block_400760:                                     ; preds = %block_4009bf
  %39 = add i64 %147, -12
  store i64 4196199, i64* %PC, align 8
  %40 = inttoptr i64 %39 to i32*
  store i32 11, i32* %40, align 4
  %41 = load i64, i64* %PC, align 8
  %42 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %41, %struct.Memory* %101)
  ret %struct.Memory* %42

block_40085a:                                     ; preds = %block_4009bf
  %43 = add i64 %147, -12
  store i64 4196449, i64* %PC, align 8
  %44 = inttoptr i64 %43 to i32*
  store i32 16, i32* %44, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %45, %struct.Memory* %101)
  ret %struct.Memory* %46

block_4005d0:                                     ; preds = %block_4009bf
  %47 = add i64 %147, -12
  store i64 4195799, i64* %PC, align 8
  %48 = inttoptr i64 %47 to i32*
  store i32 3, i32* %48, align 4
  %49 = load i64, i64* %PC, align 8
  %50 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %49, %struct.Memory* %101)
  ret %struct.Memory* %50

block_400a4e:                                     ; preds = %block_4009bf
  %51 = add i64 %147, -12
  store i64 4196949, i64* %PC, align 8
  %52 = inttoptr i64 %51 to i32*
  store i32 26, i32* %52, align 4
  %53 = load i64, i64* %PC, align 8
  %54 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %53, %struct.Memory* %101)
  ret %struct.Memory* %54

block_4006ca:                                     ; preds = %block_4009bf
  %55 = add i64 %147, -12
  store i64 4196049, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 8, i32* %56, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %57, %struct.Memory* %101)
  ret %struct.Memory* %58

block_400b48:                                     ; preds = %block_4009bf
  %59 = add i64 %147, -12
  store i64 4197199, i64* %PC, align 8
  %60 = inttoptr i64 %59 to i32*
  store i32 31, i32* %60, align 4
  %61 = load i64, i64* %PC, align 8
  %62 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %61, %struct.Memory* %101)
  ret %struct.Memory* %62

block_4007c4:                                     ; preds = %block_4009bf
  %63 = add i64 %147, -12
  store i64 4196299, i64* %PC, align 8
  %64 = inttoptr i64 %63 to i32*
  store i32 13, i32* %64, align 4
  %65 = load i64, i64* %PC, align 8
  %66 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %65, %struct.Memory* %101)
  ret %struct.Memory* %66

block_4008be:                                     ; preds = %block_4009bf
  %67 = add i64 %147, -12
  store i64 4196549, i64* %PC, align 8
  %68 = inttoptr i64 %67 to i32*
  store i32 18, i32* %68, align 4
  %69 = load i64, i64* %PC, align 8
  %70 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %69, %struct.Memory* %101)
  ret %struct.Memory* %70

block_4009b8:                                     ; preds = %block_4009bf
  %71 = add i64 %147, -12
  store i64 4196799, i64* %PC, align 8
  %72 = inttoptr i64 %71 to i32*
  store i32 23, i32* %72, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4009bf

block_400634:                                     ; preds = %block_4009bf
  %73 = add i64 %147, -12
  store i64 4195899, i64* %PC, align 8
  %74 = inttoptr i64 %73 to i32*
  store i32 5, i32* %74, align 4
  %75 = load i64, i64* %PC, align 8
  %76 = tail call %struct.Memory* @sub_40063b(%struct.State* nonnull %0, i64 %75, %struct.Memory* %101)
  ret %struct.Memory* %76

block_400559:                                     ; preds = %block_4009bf
  %77 = add i64 %147, -12
  store i64 4195680, i64* %PC, align 8
  %78 = inttoptr i64 %77 to i32*
  store i32 0, i32* %78, align 4
  %79 = load i64, i64* %PC, align 8
  %80 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %79, %struct.Memory* %101)
  ret %struct.Memory* %80

block_400ab2:                                     ; preds = %block_4009bf
  %81 = add i64 %147, -12
  store i64 4197049, i64* %PC, align 8
  %82 = inttoptr i64 %81 to i32*
  store i32 28, i32* %82, align 4
  %83 = load i64, i64* %PC, align 8
  %84 = tail call %struct.Memory* @sub_400ab9(%struct.State* nonnull %0, i64 %83, %struct.Memory* %101)
  ret %struct.Memory* %84

block_40072e:                                     ; preds = %block_4009bf
  %85 = add i64 %147, -12
  store i64 4196149, i64* %PC, align 8
  %86 = inttoptr i64 %85 to i32*
  store i32 10, i32* %86, align 4
  %87 = load i64, i64* %PC, align 8
  %88 = tail call %struct.Memory* @sub_400735(%struct.State* nonnull %0, i64 %87, %struct.Memory* %101)
  ret %struct.Memory* %88

block_4009bf:                                     ; preds = %block_4009b8, %3
  %89 = phi i64 [ %1, %3 ], [ %.pre, %block_4009b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %101, %block_4009b8 ]
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -12
  %92 = add i64 %89, 3
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %96 = add i64 %89, -1231
  %97 = add i64 %89, 8
  %98 = load i64, i64* %4, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %4, align 8, !tbaa !2428
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %101 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %96, %struct.Memory* %MEMORY.0)
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -8
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = add i64 %107, 4
  store i64 %108, i64* %RCX, align 8, !tbaa !2428
  %109 = icmp ugt i64 %107, -5
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %5, align 1, !tbaa !2432
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #8
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %6, align 1, !tbaa !2446
  %117 = xor i64 %107, %108
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %7, align 1, !tbaa !2447
  %121 = icmp eq i64 %108, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %8, align 1, !tbaa !2448
  %123 = lshr i64 %108, 63
  %124 = trunc i64 %123 to i8
  store i8 %124, i8* %9, align 1, !tbaa !2449
  %125 = lshr i64 %107, 63
  %126 = xor i64 %123, %125
  %127 = add nuw nsw i64 %126, %123
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %10, align 1, !tbaa !2450
  %130 = add i64 %104, 15
  store i64 %130, i64* %PC, align 8
  store i64 %108, i64* %106, align 8
  %131 = bitcast i64* %RAX to i32**
  %132 = load i32*, i32** %131, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC, align 8
  %135 = load i32, i32* %132, align 4
  %136 = sext i32 %135 to i64
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = shl nsw i64 %136, 3
  %138 = add i64 %137, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %139 = add i64 %133, 11
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -40
  %144 = add i64 %133, 15
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  store i64 %141, i64* %145, align 8
  %146 = load i64, i64* %PC, align 8
  %147 = load i64, i64* %RBP, align 8
  %148 = add i64 %147, -40
  %149 = add i64 %146, -1147
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  store i64 %151, i64* %PC, align 8, !tbaa !2428
  switch i64 %151, label %200 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4195792, label %block_4005d0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196692, label %block_400954
    i64 4196642, label %block_400922
  ]

block_400828:                                     ; preds = %block_4009bf
  %152 = add i64 %147, -12
  store i64 4196399, i64* %PC, align 8
  %153 = inttoptr i64 %152 to i32*
  store i32 15, i32* %153, align 4
  %154 = load i64, i64* %PC, align 8
  %155 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %154, %struct.Memory* %101)
  ret %struct.Memory* %155

block_400954:                                     ; preds = %block_4009bf
  %156 = add i64 %147, -12
  store i64 4196699, i64* %PC, align 8
  %157 = inttoptr i64 %156 to i32*
  store i32 21, i32* %157, align 4
  %158 = load i64, i64* %PC, align 8
  %159 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %158, %struct.Memory* %101)
  ret %struct.Memory* %159

block_400922:                                     ; preds = %block_4009bf
  %160 = add i64 %147, -12
  store i64 4196649, i64* %PC, align 8
  %161 = inttoptr i64 %160 to i32*
  store i32 20, i32* %161, align 4
  %162 = load i64, i64* %PC, align 8
  %163 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %162, %struct.Memory* %101)
  ret %struct.Memory* %163

block_40059e:                                     ; preds = %block_4009bf
  %164 = add i64 %147, -12
  store i64 4195749, i64* %PC, align 8
  %165 = inttoptr i64 %164 to i32*
  store i32 2, i32* %165, align 4
  %166 = load i64, i64* %PC, align 8
  %167 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %166, %struct.Memory* %101)
  ret %struct.Memory* %167

block_400a1c:                                     ; preds = %block_4009bf
  %168 = add i64 %147, -12
  store i64 4196899, i64* %PC, align 8
  %169 = inttoptr i64 %168 to i32*
  store i32 25, i32* %169, align 4
  %170 = load i64, i64* %PC, align 8
  %171 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %170, %struct.Memory* %101)
  ret %struct.Memory* %171

block_400698:                                     ; preds = %block_4009bf
  %172 = add i64 %147, -12
  store i64 4195999, i64* %PC, align 8
  %173 = inttoptr i64 %172 to i32*
  store i32 7, i32* %173, align 4
  %174 = load i64, i64* %PC, align 8
  %175 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %174, %struct.Memory* %101)
  ret %struct.Memory* %175

block_400b16:                                     ; preds = %block_4009bf
  %176 = add i64 %147, -12
  store i64 4197149, i64* %PC, align 8
  %177 = inttoptr i64 %176 to i32*
  store i32 30, i32* %177, align 4
  %178 = load i64, i64* %PC, align 8
  %179 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %178, %struct.Memory* %101)
  ret %struct.Memory* %179

block_400792:                                     ; preds = %block_4009bf
  %180 = add i64 %147, -12
  store i64 4196249, i64* %PC, align 8
  %181 = inttoptr i64 %180 to i32*
  store i32 12, i32* %181, align 4
  %182 = load i64, i64* %PC, align 8
  %183 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %182, %struct.Memory* %101)
  ret %struct.Memory* %183

block_40088c:                                     ; preds = %block_4009bf
  %184 = add i64 %147, -12
  store i64 4196499, i64* %PC, align 8
  %185 = inttoptr i64 %184 to i32*
  store i32 17, i32* %185, align 4
  %186 = load i64, i64* %PC, align 8
  %187 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %186, %struct.Memory* %101)
  ret %struct.Memory* %187

block_400986:                                     ; preds = %block_4009bf
  %188 = add i64 %147, -12
  store i64 4196749, i64* %PC, align 8
  %189 = inttoptr i64 %188 to i32*
  store i32 22, i32* %189, align 4
  %190 = load i64, i64* %PC, align 8
  %191 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %190, %struct.Memory* %101)
  ret %struct.Memory* %191

block_400602:                                     ; preds = %block_4009bf
  %192 = add i64 %147, -12
  store i64 4195849, i64* %PC, align 8
  %193 = inttoptr i64 %192 to i32*
  store i32 4, i32* %193, align 4
  %194 = load i64, i64* %PC, align 8
  %195 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %194, %struct.Memory* %101)
  ret %struct.Memory* %195

block_400a80:                                     ; preds = %block_4009bf
  %196 = add i64 %147, -12
  store i64 4196999, i64* %PC, align 8
  %197 = inttoptr i64 %196 to i32*
  store i32 27, i32* %197, align 4
  %198 = load i64, i64* %PC, align 8
  %199 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %198, %struct.Memory* %101)
  ret %struct.Memory* %199

; <label>:200:                                    ; preds = %block_4009bf
  %201 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %151, %struct.Memory* %101)
  ret %struct.Memory* %201
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007fd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4007fd

block_4007fd:                                     ; preds = %block_4007f6, %3
  %11 = phi i64 [ %1, %3 ], [ %.pre, %block_4007f6 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007f6 ]
  %12 = load i64, i64* %RBP, align 8
  %13 = add i64 %12, -12
  %14 = add i64 %11, 3
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %13 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %RDI, align 8, !tbaa !2428
  %18 = add i64 %11, -781
  %19 = add i64 %11, 8
  %20 = load i64, i64* %4, align 8, !tbaa !2428
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22, align 8
  store i64 %21, i64* %4, align 8, !tbaa !2428
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  %23 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %18, %struct.Memory* %MEMORY.0)
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RAX, align 8, !tbaa !2428
  %30 = add i64 %29, 4
  store i64 %30, i64* %RCX, align 8, !tbaa !2428
  %31 = icmp ugt i64 %29, -5
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %5, align 1, !tbaa !2432
  %33 = trunc i64 %30 to i32
  %34 = and i32 %33, 255
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #8
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %6, align 1, !tbaa !2446
  %39 = xor i64 %29, %30
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %7, align 1, !tbaa !2447
  %43 = icmp eq i64 %30, 0
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %8, align 1, !tbaa !2448
  %45 = lshr i64 %30, 63
  %46 = trunc i64 %45 to i8
  store i8 %46, i8* %9, align 1, !tbaa !2449
  %47 = lshr i64 %29, 63
  %48 = xor i64 %45, %47
  %49 = add nuw nsw i64 %48, %45
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %10, align 1, !tbaa !2450
  %52 = add i64 %26, 15
  store i64 %52, i64* %PC, align 8
  store i64 %30, i64* %28, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %53 = add i64 %84, -12
  store i64 4196099, i64* %PC, align 8
  %54 = inttoptr i64 %53 to i32*
  store i32 9, i32* %54, align 4
  %55 = load i64, i64* %PC, align 8
  %56 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %55, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %56

block_4008f0:                                     ; preds = %block_400566
  %57 = add i64 %84, -12
  store i64 4196599, i64* %PC, align 8
  %58 = inttoptr i64 %57 to i32*
  store i32 19, i32* %58, align 4
  %59 = load i64, i64* %PC, align 8
  %60 = tail call %struct.Memory* @sub_4008f7(%struct.State* nonnull %0, i64 %59, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %60

block_4009ea:                                     ; preds = %block_400566
  %61 = add i64 %84, -12
  store i64 4196849, i64* %PC, align 8
  %62 = inttoptr i64 %61 to i32*
  store i32 24, i32* %62, align 4
  %63 = load i64, i64* %PC, align 8
  %64 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %63, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %64

block_4007f6:                                     ; preds = %block_400566
  %65 = add i64 %84, -12
  store i64 4196349, i64* %PC, align 8
  %66 = inttoptr i64 %65 to i32*
  store i32 14, i32* %66, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4007fd

block_400566:                                     ; preds = %block_4009b8, %block_4007fd
  %.sink34 = phi i64 [ 1151, %block_4009b8 ], [ 701, %block_4007fd ]
  %MEMORY.1 = phi %struct.Memory* [ %155, %block_4009b8 ], [ %23, %block_4007fd ]
  %67 = bitcast i64* %RAX to i32**
  %68 = load i32*, i32** %67, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC, align 8
  %71 = load i32, i32* %68, align 4
  %72 = sext i32 %71 to i64
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = shl nsw i64 %72, 3
  %74 = add i64 %73, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %75 = add i64 %69, 11
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -40
  %80 = add i64 %69, 15
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %81, align 8
  %82 = load i64, i64* %PC, align 8
  %83 = sub i64 %82, %.sink34
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -40
  %86 = add i64 %83, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  switch i64 %88, label %241 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196342, label %block_4007f6
    i64 4196192, label %block_400760
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400666:                                     ; preds = %block_400566
  %89 = add i64 %84, -12
  store i64 4195949, i64* %PC, align 8
  %90 = inttoptr i64 %89 to i32*
  store i32 6, i32* %90, align 4
  %91 = load i64, i64* %PC, align 8
  %92 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %91, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %92

block_400ae4:                                     ; preds = %block_400566
  %93 = add i64 %84, -12
  store i64 4197099, i64* %PC, align 8
  %94 = inttoptr i64 %93 to i32*
  store i32 29, i32* %94, align 4
  %95 = load i64, i64* %PC, align 8
  %96 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %95, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %96

block_40085a:                                     ; preds = %block_400566
  %97 = add i64 %84, -12
  store i64 4196449, i64* %PC, align 8
  %98 = inttoptr i64 %97 to i32*
  store i32 16, i32* %98, align 4
  %99 = load i64, i64* %PC, align 8
  %100 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %99, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %100

block_400954:                                     ; preds = %block_400566
  %101 = add i64 %84, -12
  store i64 4196699, i64* %PC, align 8
  %102 = inttoptr i64 %101 to i32*
  store i32 21, i32* %102, align 4
  %103 = load i64, i64* %PC, align 8
  %104 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %103, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %104

block_4005d0:                                     ; preds = %block_400566
  %105 = add i64 %84, -12
  store i64 4195799, i64* %PC, align 8
  %106 = inttoptr i64 %105 to i32*
  store i32 3, i32* %106, align 4
  %107 = load i64, i64* %PC, align 8
  %108 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %107, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %108

block_400a4e:                                     ; preds = %block_400566
  %109 = add i64 %84, -12
  store i64 4196949, i64* %PC, align 8
  %110 = inttoptr i64 %109 to i32*
  store i32 26, i32* %110, align 4
  %111 = load i64, i64* %PC, align 8
  %112 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %112

block_400760:                                     ; preds = %block_400566
  %113 = add i64 %84, -12
  store i64 4196199, i64* %PC, align 8
  %114 = inttoptr i64 %113 to i32*
  store i32 11, i32* %114, align 4
  %115 = load i64, i64* %PC, align 8
  %116 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %115, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %116

block_400559:                                     ; preds = %block_400566
  %117 = add i64 %84, -12
  store i64 4195680, i64* %PC, align 8
  %118 = inttoptr i64 %117 to i32*
  store i32 0, i32* %118, align 4
  %119 = load i64, i64* %PC, align 8
  %120 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %119, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %120

block_4006ca:                                     ; preds = %block_400566
  %121 = add i64 %84, -12
  store i64 4196049, i64* %PC, align 8
  %122 = inttoptr i64 %121 to i32*
  store i32 8, i32* %122, align 4
  %123 = load i64, i64* %PC, align 8
  %124 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %123, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %124

block_400b48:                                     ; preds = %block_400566
  %125 = add i64 %84, -12
  store i64 4197199, i64* %PC, align 8
  %126 = inttoptr i64 %125 to i32*
  store i32 31, i32* %126, align 4
  %127 = load i64, i64* %PC, align 8
  %128 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %127, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %128

block_4007c4:                                     ; preds = %block_400566
  %129 = add i64 %84, -12
  store i64 4196299, i64* %PC, align 8
  %130 = inttoptr i64 %129 to i32*
  store i32 13, i32* %130, align 4
  %131 = load i64, i64* %PC, align 8
  %132 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %131, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %132

block_40056c:                                     ; preds = %block_400566
  %133 = add i64 %84, -12
  store i64 4195699, i64* %PC, align 8
  %134 = inttoptr i64 %133 to i32*
  store i32 1, i32* %134, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %135, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %136

block_4008be:                                     ; preds = %block_400566
  %137 = add i64 %84, -12
  store i64 4196549, i64* %PC, align 8
  %138 = inttoptr i64 %137 to i32*
  store i32 18, i32* %138, align 4
  %139 = load i64, i64* %PC, align 8
  %140 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %139, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %140

block_4009b8:                                     ; preds = %block_400566
  %141 = add i64 %84, -12
  store i64 4196799, i64* %PC, align 8
  %142 = inttoptr i64 %141 to i32*
  store i32 23, i32* %142, align 4
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -12
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %144 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDI, align 8, !tbaa !2428
  %150 = add i64 %145, -1231
  %151 = add i64 %145, 8
  %152 = load i64, i64* %4, align 8, !tbaa !2428
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154, align 8
  store i64 %153, i64* %4, align 8, !tbaa !2428
  store i64 %150, i64* %PC, align 8, !tbaa !2428
  %155 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %150, %struct.Memory* %MEMORY.1)
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -8
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = add i64 %161, 4
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %163 = icmp ugt i64 %161, -5
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %5, align 1, !tbaa !2432
  %165 = trunc i64 %162 to i32
  %166 = and i32 %165, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #8
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %6, align 1, !tbaa !2446
  %171 = xor i64 %161, %162
  %172 = lshr i64 %171, 4
  %173 = trunc i64 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %7, align 1, !tbaa !2447
  %175 = icmp eq i64 %162, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %8, align 1, !tbaa !2448
  %177 = lshr i64 %162, 63
  %178 = trunc i64 %177 to i8
  store i8 %178, i8* %9, align 1, !tbaa !2449
  %179 = lshr i64 %161, 63
  %180 = xor i64 %177, %179
  %181 = add nuw nsw i64 %180, %177
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %10, align 1, !tbaa !2450
  %184 = add i64 %158, 15
  store i64 %184, i64* %PC, align 8
  store i64 %162, i64* %160, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %185 = add i64 %84, -12
  store i64 4195899, i64* %PC, align 8
  %186 = inttoptr i64 %185 to i32*
  store i32 5, i32* %186, align 4
  %187 = load i64, i64* %PC, align 8
  %188 = tail call %struct.Memory* @sub_40063b(%struct.State* nonnull %0, i64 %187, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %188

block_400ab2:                                     ; preds = %block_400566
  %189 = add i64 %84, -12
  store i64 4197049, i64* %PC, align 8
  %190 = inttoptr i64 %189 to i32*
  store i32 28, i32* %190, align 4
  %191 = load i64, i64* %PC, align 8
  %192 = tail call %struct.Memory* @sub_400ab9(%struct.State* nonnull %0, i64 %191, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %192

block_40072e:                                     ; preds = %block_400566
  %193 = add i64 %84, -12
  store i64 4196149, i64* %PC, align 8
  %194 = inttoptr i64 %193 to i32*
  store i32 10, i32* %194, align 4
  %195 = load i64, i64* %PC, align 8
  %196 = tail call %struct.Memory* @sub_400735(%struct.State* nonnull %0, i64 %195, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %196

block_400828:                                     ; preds = %block_400566
  %197 = add i64 %84, -12
  store i64 4196399, i64* %PC, align 8
  %198 = inttoptr i64 %197 to i32*
  store i32 15, i32* %198, align 4
  %199 = load i64, i64* %PC, align 8
  %200 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %200

block_400922:                                     ; preds = %block_400566
  %201 = add i64 %84, -12
  store i64 4196649, i64* %PC, align 8
  %202 = inttoptr i64 %201 to i32*
  store i32 20, i32* %202, align 4
  %203 = load i64, i64* %PC, align 8
  %204 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %203, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %204

block_40059e:                                     ; preds = %block_400566
  %205 = add i64 %84, -12
  store i64 4195749, i64* %PC, align 8
  %206 = inttoptr i64 %205 to i32*
  store i32 2, i32* %206, align 4
  %207 = load i64, i64* %PC, align 8
  %208 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %207, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %208

block_400a1c:                                     ; preds = %block_400566
  %209 = add i64 %84, -12
  store i64 4196899, i64* %PC, align 8
  %210 = inttoptr i64 %209 to i32*
  store i32 25, i32* %210, align 4
  %211 = load i64, i64* %PC, align 8
  %212 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %212

block_400698:                                     ; preds = %block_400566
  %213 = add i64 %84, -12
  store i64 4195999, i64* %PC, align 8
  %214 = inttoptr i64 %213 to i32*
  store i32 7, i32* %214, align 4
  %215 = load i64, i64* %PC, align 8
  %216 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %215, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %216

block_400b16:                                     ; preds = %block_400566
  %217 = add i64 %84, -12
  store i64 4197149, i64* %PC, align 8
  %218 = inttoptr i64 %217 to i32*
  store i32 30, i32* %218, align 4
  %219 = load i64, i64* %PC, align 8
  %220 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %219, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %220

block_400792:                                     ; preds = %block_400566
  %221 = add i64 %84, -12
  store i64 4196249, i64* %PC, align 8
  %222 = inttoptr i64 %221 to i32*
  store i32 12, i32* %222, align 4
  %223 = load i64, i64* %PC, align 8
  %224 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %223, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %224

block_40088c:                                     ; preds = %block_400566
  %225 = add i64 %84, -12
  store i64 4196499, i64* %PC, align 8
  %226 = inttoptr i64 %225 to i32*
  store i32 17, i32* %226, align 4
  %227 = load i64, i64* %PC, align 8
  %228 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %227, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %228

block_400986:                                     ; preds = %block_400566
  %229 = add i64 %84, -12
  store i64 4196749, i64* %PC, align 8
  %230 = inttoptr i64 %229 to i32*
  store i32 22, i32* %230, align 4
  %231 = load i64, i64* %PC, align 8
  %232 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %231, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %232

block_400602:                                     ; preds = %block_400566
  %233 = add i64 %84, -12
  store i64 4195849, i64* %PC, align 8
  %234 = inttoptr i64 %233 to i32*
  store i32 4, i32* %234, align 4
  %235 = load i64, i64* %PC, align 8
  %236 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %235, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %236

block_400a80:                                     ; preds = %block_400566
  %237 = add i64 %84, -12
  store i64 4196999, i64* %PC, align 8
  %238 = inttoptr i64 %237 to i32*
  store i32 27, i32* %238, align 4
  %239 = load i64, i64* %PC, align 8
  %240 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %239, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %240

; <label>:241:                                    ; preds = %block_400566
  %242 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %88, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %242
}

; Function Attrs: noinline
define %struct.Memory* @sub_40063b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40063b

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %168, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %14

block_4008f0:                                     ; preds = %block_400566
  %15 = add i64 %168, -12
  store i64 4196599, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 19, i32* %16, align 4
  %17 = load i64, i64* %PC, align 8
  %18 = tail call %struct.Memory* @sub_4008f7(%struct.State* nonnull %0, i64 %17, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %18

block_400ae4:                                     ; preds = %block_400566
  %19 = add i64 %168, -12
  store i64 4197099, i64* %PC, align 8
  %20 = inttoptr i64 %19 to i32*
  store i32 29, i32* %20, align 4
  %21 = load i64, i64* %PC, align 8
  %22 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %21, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %22

block_4005d0:                                     ; preds = %block_400566
  %23 = add i64 %168, -12
  store i64 4195799, i64* %PC, align 8
  %24 = inttoptr i64 %23 to i32*
  store i32 3, i32* %24, align 4
  %25 = load i64, i64* %PC, align 8
  %26 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %25, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %26

block_4007c4:                                     ; preds = %block_400566
  %27 = add i64 %168, -12
  store i64 4196299, i64* %PC, align 8
  %28 = inttoptr i64 %27 to i32*
  store i32 13, i32* %28, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %29, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %30

block_4008be:                                     ; preds = %block_400566
  %31 = add i64 %168, -12
  store i64 4196549, i64* %PC, align 8
  %32 = inttoptr i64 %31 to i32*
  store i32 18, i32* %32, align 4
  %33 = load i64, i64* %PC, align 8
  %34 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %33, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %34

block_4009b8:                                     ; preds = %block_400566
  %35 = add i64 %168, -12
  store i64 4196799, i64* %PC, align 8
  %36 = inttoptr i64 %35 to i32*
  store i32 23, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -12
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %RDI, align 8, !tbaa !2428
  %44 = add i64 %39, -1231
  %45 = add i64 %39, 8
  %46 = load i64, i64* %4, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48, align 8
  store i64 %47, i64* %4, align 8, !tbaa !2428
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %49 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %MEMORY.0)
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %55, 4
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ugt i64 %55, -5
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %5, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %6, align 1, !tbaa !2446
  %65 = xor i64 %55, %56
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %7, align 1, !tbaa !2447
  %69 = icmp eq i64 %56, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %8, align 1, !tbaa !2448
  %71 = lshr i64 %56, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %9, align 1, !tbaa !2449
  %73 = lshr i64 %55, 63
  %74 = xor i64 %71, %73
  %75 = add nuw nsw i64 %74, %71
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %10, align 1, !tbaa !2450
  %78 = add i64 %52, 15
  store i64 %78, i64* %PC, align 8
  store i64 %56, i64* %54, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %79 = add i64 %168, -12
  store i64 4197049, i64* %PC, align 8
  %80 = inttoptr i64 %79 to i32*
  store i32 28, i32* %80, align 4
  %81 = load i64, i64* %PC, align 8
  %82 = tail call %struct.Memory* @sub_400ab9(%struct.State* nonnull %0, i64 %81, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %82

block_400698:                                     ; preds = %block_400566
  %83 = add i64 %168, -12
  store i64 4195999, i64* %PC, align 8
  %84 = inttoptr i64 %83 to i32*
  store i32 7, i32* %84, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %85, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %86

block_400792:                                     ; preds = %block_400566
  %87 = add i64 %168, -12
  store i64 4196249, i64* %PC, align 8
  %88 = inttoptr i64 %87 to i32*
  store i32 12, i32* %88, align 4
  %89 = load i64, i64* %PC, align 8
  %90 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %89, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %90

block_40088c:                                     ; preds = %block_400566
  %91 = add i64 %168, -12
  store i64 4196499, i64* %PC, align 8
  %92 = inttoptr i64 %91 to i32*
  store i32 17, i32* %92, align 4
  %93 = load i64, i64* %PC, align 8
  %94 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %93, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %94

block_400986:                                     ; preds = %block_400566
  %95 = add i64 %168, -12
  store i64 4196749, i64* %PC, align 8
  %96 = inttoptr i64 %95 to i32*
  store i32 22, i32* %96, align 4
  %97 = load i64, i64* %PC, align 8
  %98 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %97, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %98

block_400a80:                                     ; preds = %block_400566
  %99 = add i64 %168, -12
  store i64 4196999, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 27, i32* %100, align 4
  %101 = load i64, i64* %PC, align 8
  %102 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %101, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %102

block_40056c:                                     ; preds = %block_400566
  %103 = add i64 %168, -12
  store i64 4195699, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 1, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %106

block_4007f6:                                     ; preds = %block_400566
  %107 = add i64 %168, -12
  store i64 4196349, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 14, i32* %108, align 4
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -12
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  store i64 %115, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %111, -781
  %117 = add i64 %111, 8
  %118 = load i64, i64* %4, align 8, !tbaa !2428
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %117, i64* %120, align 8
  store i64 %119, i64* %4, align 8, !tbaa !2428
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %121 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %116, %struct.Memory* %MEMORY.0)
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -8
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %127, 4
  store i64 %128, i64* %RCX, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -5
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %5, align 1, !tbaa !2432
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #8
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %6, align 1, !tbaa !2446
  %137 = xor i64 %127, %128
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %7, align 1, !tbaa !2447
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %8, align 1, !tbaa !2448
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2449
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %10, align 1, !tbaa !2450
  %150 = add i64 %124, 15
  store i64 %150, i64* %PC, align 8
  store i64 %128, i64* %126, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_4007f6, %block_4009b8, %block_40063b
  %.sink34 = phi i64 [ 701, %block_4007f6 ], [ 1151, %block_4009b8 ], [ 251, %block_40063b ]
  %MEMORY.0 = phi %struct.Memory* [ %121, %block_4007f6 ], [ %49, %block_4009b8 ], [ %221, %block_40063b ]
  %151 = bitcast i64* %RAX to i32**
  %152 = load i32*, i32** %151, align 8
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 3
  store i64 %154, i64* %PC, align 8
  %155 = load i32, i32* %152, align 4
  %156 = sext i32 %155 to i64
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = shl nsw i64 %156, 3
  %158 = add i64 %157, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %159 = add i64 %153, 11
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -40
  %164 = add i64 %153, 15
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %165, align 8
  %166 = load i64, i64* %PC, align 8
  %167 = sub i64 %166, %.sink34
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -40
  %170 = add i64 %167, 4
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  switch i64 %172, label %281 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400666:                                     ; preds = %block_400566
  %173 = add i64 %168, -12
  store i64 4195949, i64* %PC, align 8
  %174 = inttoptr i64 %173 to i32*
  store i32 6, i32* %174, align 4
  %175 = load i64, i64* %PC, align 8
  %176 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %175, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %176

block_40085a:                                     ; preds = %block_400566
  %177 = add i64 %168, -12
  store i64 4196449, i64* %PC, align 8
  %178 = inttoptr i64 %177 to i32*
  store i32 16, i32* %178, align 4
  %179 = load i64, i64* %PC, align 8
  %180 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %179, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %180

block_4006ca:                                     ; preds = %block_400566
  %181 = add i64 %168, -12
  store i64 4196049, i64* %PC, align 8
  %182 = inttoptr i64 %181 to i32*
  store i32 8, i32* %182, align 4
  %183 = load i64, i64* %PC, align 8
  %184 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %183, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %184

block_400559:                                     ; preds = %block_400566
  %185 = add i64 %168, -12
  store i64 4195680, i64* %PC, align 8
  %186 = inttoptr i64 %185 to i32*
  store i32 0, i32* %186, align 4
  %187 = load i64, i64* %PC, align 8
  %188 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %187, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %188

block_400954:                                     ; preds = %block_400566
  %189 = add i64 %168, -12
  store i64 4196699, i64* %PC, align 8
  %190 = inttoptr i64 %189 to i32*
  store i32 21, i32* %190, align 4
  %191 = load i64, i64* %PC, align 8
  %192 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %191, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %192

block_400a4e:                                     ; preds = %block_400566
  %193 = add i64 %168, -12
  store i64 4196949, i64* %PC, align 8
  %194 = inttoptr i64 %193 to i32*
  store i32 26, i32* %194, align 4
  %195 = load i64, i64* %PC, align 8
  %196 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %195, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %196

block_400760:                                     ; preds = %block_400566
  %197 = add i64 %168, -12
  store i64 4196199, i64* %PC, align 8
  %198 = inttoptr i64 %197 to i32*
  store i32 11, i32* %198, align 4
  %199 = load i64, i64* %PC, align 8
  %200 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %200

block_400b48:                                     ; preds = %block_400566
  %201 = add i64 %168, -12
  store i64 4197199, i64* %PC, align 8
  %202 = inttoptr i64 %201 to i32*
  store i32 31, i32* %202, align 4
  %203 = load i64, i64* %PC, align 8
  %204 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %203, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %204

block_4009ea:                                     ; preds = %block_400566
  %205 = add i64 %168, -12
  store i64 4196849, i64* %PC, align 8
  %206 = inttoptr i64 %205 to i32*
  store i32 24, i32* %206, align 4
  %207 = load i64, i64* %PC, align 8
  %208 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %207, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %208

block_40063b:                                     ; preds = %block_400634, %3
  %209 = phi i64 [ %1, %3 ], [ %.pre, %block_400634 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400634 ]
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -12
  %212 = add i64 %209, 3
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = zext i32 %214 to i64
  store i64 %215, i64* %RDI, align 8, !tbaa !2428
  %216 = add i64 %209, -331
  %217 = add i64 %209, 8
  %218 = load i64, i64* %4, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %4, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %216, %struct.Memory* %MEMORY.1)
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -8
  %224 = load i64, i64* %PC, align 8
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %223 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = add i64 %227, 4
  store i64 %228, i64* %RCX, align 8, !tbaa !2428
  %229 = icmp ugt i64 %227, -5
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %5, align 1, !tbaa !2432
  %231 = trunc i64 %228 to i32
  %232 = and i32 %231, 255
  %233 = tail call i32 @llvm.ctpop.i32(i32 %232) #8
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  %236 = xor i8 %235, 1
  store i8 %236, i8* %6, align 1, !tbaa !2446
  %237 = xor i64 %227, %228
  %238 = lshr i64 %237, 4
  %239 = trunc i64 %238 to i8
  %240 = and i8 %239, 1
  store i8 %240, i8* %7, align 1, !tbaa !2447
  %241 = icmp eq i64 %228, 0
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %8, align 1, !tbaa !2448
  %243 = lshr i64 %228, 63
  %244 = trunc i64 %243 to i8
  store i8 %244, i8* %9, align 1, !tbaa !2449
  %245 = lshr i64 %227, 63
  %246 = xor i64 %243, %245
  %247 = add nuw nsw i64 %246, %243
  %248 = icmp eq i64 %247, 2
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %10, align 1, !tbaa !2450
  %250 = add i64 %224, 15
  store i64 %250, i64* %PC, align 8
  store i64 %228, i64* %226, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %251 = add i64 %168, -12
  store i64 4195899, i64* %PC, align 8
  %252 = inttoptr i64 %251 to i32*
  store i32 5, i32* %252, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40063b

block_40072e:                                     ; preds = %block_400566
  %253 = add i64 %168, -12
  store i64 4196149, i64* %PC, align 8
  %254 = inttoptr i64 %253 to i32*
  store i32 10, i32* %254, align 4
  %255 = load i64, i64* %PC, align 8
  %256 = tail call %struct.Memory* @sub_400735(%struct.State* nonnull %0, i64 %255, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %256

block_400828:                                     ; preds = %block_400566
  %257 = add i64 %168, -12
  store i64 4196399, i64* %PC, align 8
  %258 = inttoptr i64 %257 to i32*
  store i32 15, i32* %258, align 4
  %259 = load i64, i64* %PC, align 8
  %260 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %259, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %260

block_40059e:                                     ; preds = %block_400566
  %261 = add i64 %168, -12
  store i64 4195749, i64* %PC, align 8
  %262 = inttoptr i64 %261 to i32*
  store i32 2, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %263, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %264

block_400922:                                     ; preds = %block_400566
  %265 = add i64 %168, -12
  store i64 4196649, i64* %PC, align 8
  %266 = inttoptr i64 %265 to i32*
  store i32 20, i32* %266, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %267, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %268

block_400a1c:                                     ; preds = %block_400566
  %269 = add i64 %168, -12
  store i64 4196899, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 25, i32* %270, align 4
  %271 = load i64, i64* %PC, align 8
  %272 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %271, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %272

block_400b16:                                     ; preds = %block_400566
  %273 = add i64 %168, -12
  store i64 4197149, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 30, i32* %274, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %276

block_400602:                                     ; preds = %block_400566
  %277 = add i64 %168, -12
  store i64 4195849, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 4, i32* %278, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %280

; <label>:281:                                    ; preds = %block_400566
  %282 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %172, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %282
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008f7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4008f7

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %248, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %14

block_4008f7:                                     ; preds = %block_4008f0, %3
  %15 = phi i64 [ %1, %3 ], [ %.pre, %block_4008f0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008f0 ]
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = add i64 %15, 3
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %17 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %RDI, align 8, !tbaa !2428
  %22 = add i64 %15, -1031
  %23 = add i64 %15, 8
  %24 = load i64, i64* %4, align 8, !tbaa !2428
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  store i64 %23, i64* %26, align 8
  store i64 %25, i64* %4, align 8, !tbaa !2428
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  %27 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %22, %struct.Memory* %MEMORY.0)
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %RAX, align 8, !tbaa !2428
  %34 = add i64 %33, 4
  store i64 %34, i64* %RCX, align 8, !tbaa !2428
  %35 = icmp ugt i64 %33, -5
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %5, align 1, !tbaa !2432
  %37 = trunc i64 %34 to i32
  %38 = and i32 %37, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #8
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %6, align 1, !tbaa !2446
  %43 = xor i64 %33, %34
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  store i8 %46, i8* %7, align 1, !tbaa !2447
  %47 = icmp eq i64 %34, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %8, align 1, !tbaa !2448
  %49 = lshr i64 %34, 63
  %50 = trunc i64 %49 to i8
  store i8 %50, i8* %9, align 1, !tbaa !2449
  %51 = lshr i64 %33, 63
  %52 = xor i64 %49, %51
  %53 = add nuw nsw i64 %52, %49
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %10, align 1, !tbaa !2450
  %56 = add i64 %30, 15
  store i64 %56, i64* %PC, align 8
  store i64 %34, i64* %32, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %57 = add i64 %248, -12
  store i64 4196599, i64* %PC, align 8
  %58 = inttoptr i64 %57 to i32*
  store i32 19, i32* %58, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4008f7

block_400ae4:                                     ; preds = %block_400566
  %59 = add i64 %248, -12
  store i64 4197099, i64* %PC, align 8
  %60 = inttoptr i64 %59 to i32*
  store i32 29, i32* %60, align 4
  %61 = load i64, i64* %PC, align 8
  %62 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %61, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %62

block_4005d0:                                     ; preds = %block_400566
  %63 = add i64 %248, -12
  store i64 4195799, i64* %PC, align 8
  %64 = inttoptr i64 %63 to i32*
  store i32 3, i32* %64, align 4
  %65 = load i64, i64* %PC, align 8
  %66 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %65, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %66

block_4007c4:                                     ; preds = %block_400566
  %67 = add i64 %248, -12
  store i64 4196299, i64* %PC, align 8
  %68 = inttoptr i64 %67 to i32*
  store i32 13, i32* %68, align 4
  %69 = load i64, i64* %PC, align 8
  %70 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %69, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %70

block_4008be:                                     ; preds = %block_400566
  %71 = add i64 %248, -12
  store i64 4196549, i64* %PC, align 8
  %72 = inttoptr i64 %71 to i32*
  store i32 18, i32* %72, align 4
  %73 = load i64, i64* %PC, align 8
  %74 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %73, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %74

block_4009b8:                                     ; preds = %block_400566
  %75 = add i64 %248, -12
  store i64 4196799, i64* %PC, align 8
  %76 = inttoptr i64 %75 to i32*
  store i32 23, i32* %76, align 4
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -12
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  store i64 %83, i64* %RDI, align 8, !tbaa !2428
  %84 = add i64 %79, -1231
  %85 = add i64 %79, 8
  %86 = load i64, i64* %4, align 8, !tbaa !2428
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88, align 8
  store i64 %87, i64* %4, align 8, !tbaa !2428
  store i64 %84, i64* %PC, align 8, !tbaa !2428
  %89 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %MEMORY.1)
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -8
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %95, 4
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = icmp ugt i64 %95, -5
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %5, align 1, !tbaa !2432
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #8
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* %6, align 1, !tbaa !2446
  %105 = xor i64 %95, %96
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %7, align 1, !tbaa !2447
  %109 = icmp eq i64 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %8, align 1, !tbaa !2448
  %111 = lshr i64 %96, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %9, align 1, !tbaa !2449
  %113 = lshr i64 %95, 63
  %114 = xor i64 %111, %113
  %115 = add nuw nsw i64 %114, %111
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %10, align 1, !tbaa !2450
  %118 = add i64 %92, 15
  store i64 %118, i64* %PC, align 8
  store i64 %96, i64* %94, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %119 = add i64 %248, -12
  store i64 4197049, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 28, i32* %120, align 4
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -12
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %128 = add i64 %123, -1481
  %129 = add i64 %123, 8
  %130 = load i64, i64* %4, align 8, !tbaa !2428
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132, align 8
  store i64 %131, i64* %4, align 8, !tbaa !2428
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %133 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.1)
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -8
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %139, 4
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -5
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %5, align 1, !tbaa !2432
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #8
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %6, align 1, !tbaa !2446
  %149 = xor i64 %139, %140
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %7, align 1, !tbaa !2447
  %153 = icmp eq i64 %140, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %8, align 1, !tbaa !2448
  %155 = lshr i64 %140, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* %9, align 1, !tbaa !2449
  %157 = lshr i64 %139, 63
  %158 = xor i64 %155, %157
  %159 = add nuw nsw i64 %158, %155
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %10, align 1, !tbaa !2450
  %162 = add i64 %136, 15
  store i64 %162, i64* %PC, align 8
  store i64 %140, i64* %138, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %163 = add i64 %248, -12
  store i64 4195999, i64* %PC, align 8
  %164 = inttoptr i64 %163 to i32*
  store i32 7, i32* %164, align 4
  %165 = load i64, i64* %PC, align 8
  %166 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %165, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %166

block_400792:                                     ; preds = %block_400566
  %167 = add i64 %248, -12
  store i64 4196249, i64* %PC, align 8
  %168 = inttoptr i64 %167 to i32*
  store i32 12, i32* %168, align 4
  %169 = load i64, i64* %PC, align 8
  %170 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %169, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %170

block_40088c:                                     ; preds = %block_400566
  %171 = add i64 %248, -12
  store i64 4196499, i64* %PC, align 8
  %172 = inttoptr i64 %171 to i32*
  store i32 17, i32* %172, align 4
  %173 = load i64, i64* %PC, align 8
  %174 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %173, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %174

block_400986:                                     ; preds = %block_400566
  %175 = add i64 %248, -12
  store i64 4196749, i64* %PC, align 8
  %176 = inttoptr i64 %175 to i32*
  store i32 22, i32* %176, align 4
  %177 = load i64, i64* %PC, align 8
  %178 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %177, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %178

block_400a80:                                     ; preds = %block_400566
  %179 = add i64 %248, -12
  store i64 4196999, i64* %PC, align 8
  %180 = inttoptr i64 %179 to i32*
  store i32 27, i32* %180, align 4
  %181 = load i64, i64* %PC, align 8
  %182 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %181, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %182

block_40056c:                                     ; preds = %block_400566
  %183 = add i64 %248, -12
  store i64 4195699, i64* %PC, align 8
  %184 = inttoptr i64 %183 to i32*
  store i32 1, i32* %184, align 4
  %185 = load i64, i64* %PC, align 8
  %186 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %185, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %186

block_4007f6:                                     ; preds = %block_400566
  %187 = add i64 %248, -12
  store i64 4196349, i64* %PC, align 8
  %188 = inttoptr i64 %187 to i32*
  store i32 14, i32* %188, align 4
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -12
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RDI, align 8, !tbaa !2428
  %196 = add i64 %191, -781
  %197 = add i64 %191, 8
  %198 = load i64, i64* %4, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200, align 8
  store i64 %199, i64* %4, align 8, !tbaa !2428
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %201 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %196, %struct.Memory* %MEMORY.1)
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %207, 4
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ugt i64 %207, -5
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %5, align 1, !tbaa !2432
  %211 = trunc i64 %208 to i32
  %212 = and i32 %211, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %6, align 1, !tbaa !2446
  %217 = xor i64 %207, %208
  %218 = lshr i64 %217, 4
  %219 = trunc i64 %218 to i8
  %220 = and i8 %219, 1
  store i8 %220, i8* %7, align 1, !tbaa !2447
  %221 = icmp eq i64 %208, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %8, align 1, !tbaa !2448
  %223 = lshr i64 %208, 63
  %224 = trunc i64 %223 to i8
  store i8 %224, i8* %9, align 1, !tbaa !2449
  %225 = lshr i64 %207, 63
  %226 = xor i64 %223, %225
  %227 = add nuw nsw i64 %226, %223
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %10, align 1, !tbaa !2450
  %230 = add i64 %204, 15
  store i64 %230, i64* %PC, align 8
  store i64 %208, i64* %206, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400634, %block_4007f6, %block_400ab2, %block_4009b8, %block_4008f7
  %.sink32 = phi i64 [ 251, %block_400634 ], [ 701, %block_4007f6 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 951, %block_4008f7 ]
  %MEMORY.1 = phi %struct.Memory* [ %303, %block_400634 ], [ %201, %block_4007f6 ], [ %133, %block_400ab2 ], [ %89, %block_4009b8 ], [ %27, %block_4008f7 ]
  %231 = bitcast i64* %RAX to i32**
  %232 = load i32*, i32** %231, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC, align 8
  %235 = load i32, i32* %232, align 4
  %236 = sext i32 %235 to i64
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = shl nsw i64 %236, 3
  %238 = add i64 %237, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %239 = add i64 %233, 11
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -40
  %244 = add i64 %233, 15
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  store i64 %241, i64* %245, align 8
  %246 = load i64, i64* %PC, align 8
  %247 = sub i64 %246, %.sink32
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -40
  %250 = add i64 %247, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  store i64 %252, i64* %PC, align 8, !tbaa !2428
  switch i64 %252, label %361 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400666:                                     ; preds = %block_400566
  %253 = add i64 %248, -12
  store i64 4195949, i64* %PC, align 8
  %254 = inttoptr i64 %253 to i32*
  store i32 6, i32* %254, align 4
  %255 = load i64, i64* %PC, align 8
  %256 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_40085a:                                     ; preds = %block_400566
  %257 = add i64 %248, -12
  store i64 4196449, i64* %PC, align 8
  %258 = inttoptr i64 %257 to i32*
  store i32 16, i32* %258, align 4
  %259 = load i64, i64* %PC, align 8
  %260 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %259, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %260

block_4006ca:                                     ; preds = %block_400566
  %261 = add i64 %248, -12
  store i64 4196049, i64* %PC, align 8
  %262 = inttoptr i64 %261 to i32*
  store i32 8, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %263, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %264

block_400559:                                     ; preds = %block_400566
  %265 = add i64 %248, -12
  store i64 4195680, i64* %PC, align 8
  %266 = inttoptr i64 %265 to i32*
  store i32 0, i32* %266, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %267, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %268

block_400954:                                     ; preds = %block_400566
  %269 = add i64 %248, -12
  store i64 4196699, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 21, i32* %270, align 4
  %271 = load i64, i64* %PC, align 8
  %272 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %271, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %272

block_400a4e:                                     ; preds = %block_400566
  %273 = add i64 %248, -12
  store i64 4196949, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 26, i32* %274, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %276

block_400760:                                     ; preds = %block_400566
  %277 = add i64 %248, -12
  store i64 4196199, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 11, i32* %278, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %280

block_400b48:                                     ; preds = %block_400566
  %281 = add i64 %248, -12
  store i64 4197199, i64* %PC, align 8
  %282 = inttoptr i64 %281 to i32*
  store i32 31, i32* %282, align 4
  %283 = load i64, i64* %PC, align 8
  %284 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %283, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %284

block_4009ea:                                     ; preds = %block_400566
  %285 = add i64 %248, -12
  store i64 4196849, i64* %PC, align 8
  %286 = inttoptr i64 %285 to i32*
  store i32 24, i32* %286, align 4
  %287 = load i64, i64* %PC, align 8
  %288 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %288

block_400634:                                     ; preds = %block_400566
  %289 = add i64 %248, -12
  store i64 4195899, i64* %PC, align 8
  %290 = inttoptr i64 %289 to i32*
  store i32 5, i32* %290, align 4
  %291 = load i64, i64* %RBP, align 8
  %292 = add i64 %291, -12
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, 3
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %292 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %298 = add i64 %293, -331
  %299 = add i64 %293, 8
  %300 = load i64, i64* %4, align 8, !tbaa !2428
  %301 = add i64 %300, -8
  %302 = inttoptr i64 %301 to i64*
  store i64 %299, i64* %302, align 8
  store i64 %301, i64* %4, align 8, !tbaa !2428
  store i64 %298, i64* %PC, align 8, !tbaa !2428
  %303 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %298, %struct.Memory* %MEMORY.1)
  %304 = load i64, i64* %RBP, align 8
  %305 = add i64 %304, -8
  %306 = load i64, i64* %PC, align 8
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = add i64 %309, 4
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %311 = icmp ugt i64 %309, -5
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %5, align 1, !tbaa !2432
  %313 = trunc i64 %310 to i32
  %314 = and i32 %313, 255
  %315 = tail call i32 @llvm.ctpop.i32(i32 %314) #8
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  store i8 %318, i8* %6, align 1, !tbaa !2446
  %319 = xor i64 %309, %310
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i8
  %322 = and i8 %321, 1
  store i8 %322, i8* %7, align 1, !tbaa !2447
  %323 = icmp eq i64 %310, 0
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %8, align 1, !tbaa !2448
  %325 = lshr i64 %310, 63
  %326 = trunc i64 %325 to i8
  store i8 %326, i8* %9, align 1, !tbaa !2449
  %327 = lshr i64 %309, 63
  %328 = xor i64 %325, %327
  %329 = add nuw nsw i64 %328, %325
  %330 = icmp eq i64 %329, 2
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %10, align 1, !tbaa !2450
  %332 = add i64 %306, 15
  store i64 %332, i64* %PC, align 8
  store i64 %310, i64* %308, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %333 = add i64 %248, -12
  store i64 4196149, i64* %PC, align 8
  %334 = inttoptr i64 %333 to i32*
  store i32 10, i32* %334, align 4
  %335 = load i64, i64* %PC, align 8
  %336 = tail call %struct.Memory* @sub_400735(%struct.State* nonnull %0, i64 %335, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %336

block_400828:                                     ; preds = %block_400566
  %337 = add i64 %248, -12
  store i64 4196399, i64* %PC, align 8
  %338 = inttoptr i64 %337 to i32*
  store i32 15, i32* %338, align 4
  %339 = load i64, i64* %PC, align 8
  %340 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %339, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %340

block_40059e:                                     ; preds = %block_400566
  %341 = add i64 %248, -12
  store i64 4195749, i64* %PC, align 8
  %342 = inttoptr i64 %341 to i32*
  store i32 2, i32* %342, align 4
  %343 = load i64, i64* %PC, align 8
  %344 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %343, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %344

block_400922:                                     ; preds = %block_400566
  %345 = add i64 %248, -12
  store i64 4196649, i64* %PC, align 8
  %346 = inttoptr i64 %345 to i32*
  store i32 20, i32* %346, align 4
  %347 = load i64, i64* %PC, align 8
  %348 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %347, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %348

block_400a1c:                                     ; preds = %block_400566
  %349 = add i64 %248, -12
  store i64 4196899, i64* %PC, align 8
  %350 = inttoptr i64 %349 to i32*
  store i32 25, i32* %350, align 4
  %351 = load i64, i64* %PC, align 8
  %352 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %351, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %352

block_400b16:                                     ; preds = %block_400566
  %353 = add i64 %248, -12
  store i64 4197149, i64* %PC, align 8
  %354 = inttoptr i64 %353 to i32*
  store i32 30, i32* %354, align 4
  %355 = load i64, i64* %PC, align 8
  %356 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %355, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %356

block_400602:                                     ; preds = %block_400566
  %357 = add i64 %248, -12
  store i64 4195849, i64* %PC, align 8
  %358 = inttoptr i64 %357 to i32*
  store i32 4, i32* %358, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %359, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %360

; <label>:361:                                    ; preds = %block_400566
  %362 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %252, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %362
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c60___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400c60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2451
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2451
  store i8 0, i8* %45, align 1, !tbaa !2451
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2451
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2451
  store i8 0, i8* %48, align 1, !tbaa !2451
  %63 = add i64 %38, -2227
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #8
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_400cb6, label %block_400c96

block_400cb6:                                     ; preds = %block_400ca0, %block_400c60
  %81 = phi i64 [ %80, %block_400c60 ], [ %179, %block_400ca0 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_400c60 ], [ %149, %block_400ca0 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400c96:                                     ; preds = %block_400c60
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_400ca0

block_400ca0:                                     ; preds = %block_400ca0, %block_400c96
  %134 = phi i64 [ 0, %block_400c96 ], [ %152, %block_400ca0 ]
  %135 = phi i64 [ %133, %block_400c96 ], [ %179, %block_400ca0 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_400c96 ], [ %149, %block_400ca0 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #8
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_400cb6, label %block_400ca0
}

; Function Attrs: noinline
define %struct.Memory* @sub_40066d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40066d

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %292, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %14

block_4007f6:                                     ; preds = %block_400566
  %15 = add i64 %292, -12
  store i64 4196349, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -12
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 3
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %19, -781
  %25 = add i64 %19, 8
  %26 = load i64, i64* %4, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %25, i64* %28, align 8
  store i64 %27, i64* %4, align 8, !tbaa !2428
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %29 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %24, %struct.Memory* %MEMORY.1)
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 4
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -5
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %5, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %6, align 1, !tbaa !2446
  %45 = xor i64 %35, %36
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %7, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %8, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %9, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %10, align 1, !tbaa !2450
  %58 = add i64 %32, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %34, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %59 = add i64 %292, -12
  store i64 4197099, i64* %PC, align 8
  %60 = inttoptr i64 %59 to i32*
  store i32 29, i32* %60, align 4
  %61 = load i64, i64* %PC, align 8
  %62 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %61, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %62

block_4005d0:                                     ; preds = %block_400566
  %63 = add i64 %292, -12
  store i64 4195799, i64* %PC, align 8
  %64 = inttoptr i64 %63 to i32*
  store i32 3, i32* %64, align 4
  %65 = load i64, i64* %PC, align 8
  %66 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %65, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %66

block_4007c4:                                     ; preds = %block_400566
  %67 = add i64 %292, -12
  store i64 4196299, i64* %PC, align 8
  %68 = inttoptr i64 %67 to i32*
  store i32 13, i32* %68, align 4
  %69 = load i64, i64* %PC, align 8
  %70 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %69, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %70

block_4008be:                                     ; preds = %block_400566
  %71 = add i64 %292, -12
  store i64 4196549, i64* %PC, align 8
  %72 = inttoptr i64 %71 to i32*
  store i32 18, i32* %72, align 4
  %73 = load i64, i64* %PC, align 8
  %74 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %73, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %74

block_40059e:                                     ; preds = %block_400566
  %75 = add i64 %292, -12
  store i64 4195749, i64* %PC, align 8
  %76 = inttoptr i64 %75 to i32*
  store i32 2, i32* %76, align 4
  %77 = load i64, i64* %PC, align 8
  %78 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %77, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %78

block_400698:                                     ; preds = %block_400566
  %79 = add i64 %292, -12
  store i64 4195999, i64* %PC, align 8
  %80 = inttoptr i64 %79 to i32*
  store i32 7, i32* %80, align 4
  %81 = load i64, i64* %PC, align 8
  %82 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %81, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %82

block_400792:                                     ; preds = %block_400566
  %83 = add i64 %292, -12
  store i64 4196249, i64* %PC, align 8
  %84 = inttoptr i64 %83 to i32*
  store i32 12, i32* %84, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %85, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %86

block_40088c:                                     ; preds = %block_400566
  %87 = add i64 %292, -12
  store i64 4196499, i64* %PC, align 8
  %88 = inttoptr i64 %87 to i32*
  store i32 17, i32* %88, align 4
  %89 = load i64, i64* %PC, align 8
  %90 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %89, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %90

block_400986:                                     ; preds = %block_400566
  %91 = add i64 %292, -12
  store i64 4196749, i64* %PC, align 8
  %92 = inttoptr i64 %91 to i32*
  store i32 22, i32* %92, align 4
  %93 = load i64, i64* %PC, align 8
  %94 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %93, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %94

block_400a80:                                     ; preds = %block_400566
  %95 = add i64 %292, -12
  store i64 4196999, i64* %PC, align 8
  %96 = inttoptr i64 %95 to i32*
  store i32 27, i32* %96, align 4
  %97 = load i64, i64* %PC, align 8
  %98 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %97, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %98

block_4008f0:                                     ; preds = %block_400566
  %99 = add i64 %292, -12
  store i64 4196599, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 19, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -1031
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.1)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %143 = add i64 %292, -12
  store i64 4196849, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 24, i32* %144, align 4
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -12
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %147, -1281
  %153 = add i64 %147, 8
  %154 = load i64, i64* %4, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %4, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %MEMORY.1)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %163, 4
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ugt i64 %163, -5
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %5, align 1, !tbaa !2432
  %167 = trunc i64 %164 to i32
  %168 = and i32 %167, 255
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #8
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %6, align 1, !tbaa !2446
  %173 = xor i64 %163, %164
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  store i8 %176, i8* %7, align 1, !tbaa !2447
  %177 = icmp eq i64 %164, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %8, align 1, !tbaa !2448
  %179 = lshr i64 %164, 63
  %180 = trunc i64 %179 to i8
  store i8 %180, i8* %9, align 1, !tbaa !2449
  %181 = lshr i64 %163, 63
  %182 = xor i64 %179, %181
  %183 = add nuw nsw i64 %182, %179
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %10, align 1, !tbaa !2450
  %186 = add i64 %160, 15
  store i64 %186, i64* %PC, align 8
  store i64 %164, i64* %162, align 8
  br label %block_400566

block_40066d:                                     ; preds = %block_400666, %3
  %187 = phi i64 [ %1, %3 ], [ %.pre, %block_400666 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400666 ]
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -12
  %190 = add i64 %187, 3
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  store i64 %193, i64* %RDI, align 8, !tbaa !2428
  %194 = add i64 %187, -381
  %195 = add i64 %187, 8
  %196 = load i64, i64* %4, align 8, !tbaa !2428
  %197 = add i64 %196, -8
  %198 = inttoptr i64 %197 to i64*
  store i64 %195, i64* %198, align 8
  store i64 %197, i64* %4, align 8, !tbaa !2428
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  %199 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %194, %struct.Memory* %MEMORY.0)
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -8
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %205, 4
  store i64 %206, i64* %RCX, align 8, !tbaa !2428
  %207 = icmp ugt i64 %205, -5
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %5, align 1, !tbaa !2432
  %209 = trunc i64 %206 to i32
  %210 = and i32 %209, 255
  %211 = tail call i32 @llvm.ctpop.i32(i32 %210) #8
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  store i8 %214, i8* %6, align 1, !tbaa !2446
  %215 = xor i64 %205, %206
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %7, align 1, !tbaa !2447
  %219 = icmp eq i64 %206, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %8, align 1, !tbaa !2448
  %221 = lshr i64 %206, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %9, align 1, !tbaa !2449
  %223 = lshr i64 %205, 63
  %224 = xor i64 %221, %223
  %225 = add nuw nsw i64 %224, %221
  %226 = icmp eq i64 %225, 2
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %10, align 1, !tbaa !2450
  %228 = add i64 %202, 15
  store i64 %228, i64* %PC, align 8
  store i64 %206, i64* %204, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %229 = add i64 %292, -12
  store i64 4195699, i64* %PC, align 8
  %230 = inttoptr i64 %229 to i32*
  store i32 1, i32* %230, align 4
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -12
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %232 to i32*
  %236 = load i32, i32* %235, align 4
  %237 = zext i32 %236 to i64
  store i64 %237, i64* %RDI, align 8, !tbaa !2428
  %238 = add i64 %233, -131
  %239 = add i64 %233, 8
  %240 = load i64, i64* %4, align 8, !tbaa !2428
  %241 = add i64 %240, -8
  %242 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %242, align 8
  store i64 %241, i64* %4, align 8, !tbaa !2428
  store i64 %238, i64* %PC, align 8, !tbaa !2428
  %243 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %238, %struct.Memory* %MEMORY.1)
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -8
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %249, 4
  store i64 %250, i64* %RCX, align 8, !tbaa !2428
  %251 = icmp ugt i64 %249, -5
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %5, align 1, !tbaa !2432
  %253 = trunc i64 %250 to i32
  %254 = and i32 %253, 255
  %255 = tail call i32 @llvm.ctpop.i32(i32 %254) #8
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  store i8 %258, i8* %6, align 1, !tbaa !2446
  %259 = xor i64 %249, %250
  %260 = lshr i64 %259, 4
  %261 = trunc i64 %260 to i8
  %262 = and i8 %261, 1
  store i8 %262, i8* %7, align 1, !tbaa !2447
  %263 = icmp eq i64 %250, 0
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %8, align 1, !tbaa !2448
  %265 = lshr i64 %250, 63
  %266 = trunc i64 %265 to i8
  store i8 %266, i8* %9, align 1, !tbaa !2449
  %267 = lshr i64 %249, 63
  %268 = xor i64 %265, %267
  %269 = add nuw nsw i64 %268, %265
  %270 = icmp eq i64 %269, 2
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %10, align 1, !tbaa !2450
  %272 = add i64 %246, 15
  store i64 %272, i64* %PC, align 8
  store i64 %250, i64* %248, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %273 = add i64 %292, -12
  store i64 4195949, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 6, i32* %274, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40066d

block_400566:                                     ; preds = %block_400828, %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_4009ea, %block_4008f0, %block_4007f6, %block_40066d
  %.sink27 = phi i64 [ 751, %block_400828 ], [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 301, %block_40066d ]
  %MEMORY.1 = phi %struct.Memory* [ %511, %block_400828 ], [ %467, %block_40072e ], [ %423, %block_400634 ], [ %379, %block_400ab2 ], [ %335, %block_4009b8 ], [ %243, %block_40056c ], [ %157, %block_4009ea ], [ %113, %block_4008f0 ], [ %29, %block_4007f6 ], [ %199, %block_40066d ]
  %275 = bitcast i64* %RAX to i32**
  %276 = load i32*, i32** %275, align 8
  %277 = load i64, i64* %PC, align 8
  %278 = add i64 %277, 3
  store i64 %278, i64* %PC, align 8
  %279 = load i32, i32* %276, align 4
  %280 = sext i32 %279 to i64
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = shl nsw i64 %280, 3
  %282 = add i64 %281, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %283 = add i64 %277, 11
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -40
  %288 = add i64 %277, 15
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %289, align 8
  %290 = load i64, i64* %PC, align 8
  %291 = sub i64 %290, %.sink27
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -40
  %294 = add i64 %291, 4
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  store i64 %296, i64* %PC, align 8, !tbaa !2428
  switch i64 %296, label %561 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %297 = add i64 %292, -12
  store i64 4196199, i64* %PC, align 8
  %298 = inttoptr i64 %297 to i32*
  store i32 11, i32* %298, align 4
  %299 = load i64, i64* %PC, align 8
  %300 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %299, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %300

block_40085a:                                     ; preds = %block_400566
  %301 = add i64 %292, -12
  store i64 4196449, i64* %PC, align 8
  %302 = inttoptr i64 %301 to i32*
  store i32 16, i32* %302, align 4
  %303 = load i64, i64* %PC, align 8
  %304 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %303, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %304

block_400954:                                     ; preds = %block_400566
  %305 = add i64 %292, -12
  store i64 4196699, i64* %PC, align 8
  %306 = inttoptr i64 %305 to i32*
  store i32 21, i32* %306, align 4
  %307 = load i64, i64* %PC, align 8
  %308 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %308

block_400559:                                     ; preds = %block_400566
  %309 = add i64 %292, -12
  store i64 4195680, i64* %PC, align 8
  %310 = inttoptr i64 %309 to i32*
  store i32 0, i32* %310, align 4
  %311 = load i64, i64* %PC, align 8
  %312 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %311, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %312

block_400a4e:                                     ; preds = %block_400566
  %313 = add i64 %292, -12
  store i64 4196949, i64* %PC, align 8
  %314 = inttoptr i64 %313 to i32*
  store i32 26, i32* %314, align 4
  %315 = load i64, i64* %PC, align 8
  %316 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %316

block_400b48:                                     ; preds = %block_400566
  %317 = add i64 %292, -12
  store i64 4197199, i64* %PC, align 8
  %318 = inttoptr i64 %317 to i32*
  store i32 31, i32* %318, align 4
  %319 = load i64, i64* %PC, align 8
  %320 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %319, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %320

block_4009b8:                                     ; preds = %block_400566
  %321 = add i64 %292, -12
  store i64 4196799, i64* %PC, align 8
  %322 = inttoptr i64 %321 to i32*
  store i32 23, i32* %322, align 4
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -12
  %325 = load i64, i64* %PC, align 8
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RDI, align 8, !tbaa !2428
  %330 = add i64 %325, -1231
  %331 = add i64 %325, 8
  %332 = load i64, i64* %4, align 8, !tbaa !2428
  %333 = add i64 %332, -8
  %334 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %334, align 8
  store i64 %333, i64* %4, align 8, !tbaa !2428
  store i64 %330, i64* %PC, align 8, !tbaa !2428
  %335 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %330, %struct.Memory* %MEMORY.1)
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -8
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %341, 4
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = icmp ugt i64 %341, -5
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %5, align 1, !tbaa !2432
  %345 = trunc i64 %342 to i32
  %346 = and i32 %345, 255
  %347 = tail call i32 @llvm.ctpop.i32(i32 %346) #8
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  store i8 %350, i8* %6, align 1, !tbaa !2446
  %351 = xor i64 %341, %342
  %352 = lshr i64 %351, 4
  %353 = trunc i64 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %7, align 1, !tbaa !2447
  %355 = icmp eq i64 %342, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %8, align 1, !tbaa !2448
  %357 = lshr i64 %342, 63
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %9, align 1, !tbaa !2449
  %359 = lshr i64 %341, 63
  %360 = xor i64 %357, %359
  %361 = add nuw nsw i64 %360, %357
  %362 = icmp eq i64 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %10, align 1, !tbaa !2450
  %364 = add i64 %338, 15
  store i64 %364, i64* %PC, align 8
  store i64 %342, i64* %340, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %365 = add i64 %292, -12
  store i64 4197049, i64* %PC, align 8
  %366 = inttoptr i64 %365 to i32*
  store i32 28, i32* %366, align 4
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -12
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RDI, align 8, !tbaa !2428
  %374 = add i64 %369, -1481
  %375 = add i64 %369, 8
  %376 = load i64, i64* %4, align 8, !tbaa !2428
  %377 = add i64 %376, -8
  %378 = inttoptr i64 %377 to i64*
  store i64 %375, i64* %378, align 8
  store i64 %377, i64* %4, align 8, !tbaa !2428
  store i64 %374, i64* %PC, align 8, !tbaa !2428
  %379 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %374, %struct.Memory* %MEMORY.1)
  %380 = load i64, i64* %RBP, align 8
  %381 = add i64 %380, -8
  %382 = load i64, i64* %PC, align 8
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = add i64 %385, 4
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = icmp ugt i64 %385, -5
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %5, align 1, !tbaa !2432
  %389 = trunc i64 %386 to i32
  %390 = and i32 %389, 255
  %391 = tail call i32 @llvm.ctpop.i32(i32 %390) #8
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  store i8 %394, i8* %6, align 1, !tbaa !2446
  %395 = xor i64 %385, %386
  %396 = lshr i64 %395, 4
  %397 = trunc i64 %396 to i8
  %398 = and i8 %397, 1
  store i8 %398, i8* %7, align 1, !tbaa !2447
  %399 = icmp eq i64 %386, 0
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %8, align 1, !tbaa !2448
  %401 = lshr i64 %386, 63
  %402 = trunc i64 %401 to i8
  store i8 %402, i8* %9, align 1, !tbaa !2449
  %403 = lshr i64 %385, 63
  %404 = xor i64 %401, %403
  %405 = add nuw nsw i64 %404, %401
  %406 = icmp eq i64 %405, 2
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %10, align 1, !tbaa !2450
  %408 = add i64 %382, 15
  store i64 %408, i64* %PC, align 8
  store i64 %386, i64* %384, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %409 = add i64 %292, -12
  store i64 4195899, i64* %PC, align 8
  %410 = inttoptr i64 %409 to i32*
  store i32 5, i32* %410, align 4
  %411 = load i64, i64* %RBP, align 8
  %412 = add i64 %411, -12
  %413 = load i64, i64* %PC, align 8
  %414 = add i64 %413, 3
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %412 to i32*
  %416 = load i32, i32* %415, align 4
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %418 = add i64 %413, -331
  %419 = add i64 %413, 8
  %420 = load i64, i64* %4, align 8, !tbaa !2428
  %421 = add i64 %420, -8
  %422 = inttoptr i64 %421 to i64*
  store i64 %419, i64* %422, align 8
  store i64 %421, i64* %4, align 8, !tbaa !2428
  store i64 %418, i64* %PC, align 8, !tbaa !2428
  %423 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %418, %struct.Memory* %MEMORY.1)
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -8
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %425 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = add i64 %429, 4
  store i64 %430, i64* %RCX, align 8, !tbaa !2428
  %431 = icmp ugt i64 %429, -5
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %5, align 1, !tbaa !2432
  %433 = trunc i64 %430 to i32
  %434 = and i32 %433, 255
  %435 = tail call i32 @llvm.ctpop.i32(i32 %434) #8
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  store i8 %438, i8* %6, align 1, !tbaa !2446
  %439 = xor i64 %429, %430
  %440 = lshr i64 %439, 4
  %441 = trunc i64 %440 to i8
  %442 = and i8 %441, 1
  store i8 %442, i8* %7, align 1, !tbaa !2447
  %443 = icmp eq i64 %430, 0
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %8, align 1, !tbaa !2448
  %445 = lshr i64 %430, 63
  %446 = trunc i64 %445 to i8
  store i8 %446, i8* %9, align 1, !tbaa !2449
  %447 = lshr i64 %429, 63
  %448 = xor i64 %445, %447
  %449 = add nuw nsw i64 %448, %445
  %450 = icmp eq i64 %449, 2
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %10, align 1, !tbaa !2450
  %452 = add i64 %426, 15
  store i64 %452, i64* %PC, align 8
  store i64 %430, i64* %428, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %453 = add i64 %292, -12
  store i64 4196149, i64* %PC, align 8
  %454 = inttoptr i64 %453 to i32*
  store i32 10, i32* %454, align 4
  %455 = load i64, i64* %RBP, align 8
  %456 = add i64 %455, -12
  %457 = load i64, i64* %PC, align 8
  %458 = add i64 %457, 3
  store i64 %458, i64* %PC, align 8
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459, align 4
  %461 = zext i32 %460 to i64
  store i64 %461, i64* %RDI, align 8, !tbaa !2428
  %462 = add i64 %457, -581
  %463 = add i64 %457, 8
  %464 = load i64, i64* %4, align 8, !tbaa !2428
  %465 = add i64 %464, -8
  %466 = inttoptr i64 %465 to i64*
  store i64 %463, i64* %466, align 8
  store i64 %465, i64* %4, align 8, !tbaa !2428
  store i64 %462, i64* %PC, align 8, !tbaa !2428
  %467 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %462, %struct.Memory* %MEMORY.1)
  %468 = load i64, i64* %RBP, align 8
  %469 = add i64 %468, -8
  %470 = load i64, i64* %PC, align 8
  %471 = add i64 %470, 4
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %469 to i64*
  %473 = load i64, i64* %472, align 8
  store i64 %473, i64* %RAX, align 8, !tbaa !2428
  %474 = add i64 %473, 4
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = icmp ugt i64 %473, -5
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %5, align 1, !tbaa !2432
  %477 = trunc i64 %474 to i32
  %478 = and i32 %477, 255
  %479 = tail call i32 @llvm.ctpop.i32(i32 %478) #8
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  store i8 %482, i8* %6, align 1, !tbaa !2446
  %483 = xor i64 %473, %474
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  store i8 %486, i8* %7, align 1, !tbaa !2447
  %487 = icmp eq i64 %474, 0
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %8, align 1, !tbaa !2448
  %489 = lshr i64 %474, 63
  %490 = trunc i64 %489 to i8
  store i8 %490, i8* %9, align 1, !tbaa !2449
  %491 = lshr i64 %473, 63
  %492 = xor i64 %489, %491
  %493 = add nuw nsw i64 %492, %489
  %494 = icmp eq i64 %493, 2
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %10, align 1, !tbaa !2450
  %496 = add i64 %470, 15
  store i64 %496, i64* %PC, align 8
  store i64 %474, i64* %472, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %497 = add i64 %292, -12
  store i64 4196399, i64* %PC, align 8
  %498 = inttoptr i64 %497 to i32*
  store i32 15, i32* %498, align 4
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -12
  %501 = load i64, i64* %PC, align 8
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RDI, align 8, !tbaa !2428
  %506 = add i64 %501, -831
  %507 = add i64 %501, 8
  %508 = load i64, i64* %4, align 8, !tbaa !2428
  %509 = add i64 %508, -8
  %510 = inttoptr i64 %509 to i64*
  store i64 %507, i64* %510, align 8
  store i64 %509, i64* %4, align 8, !tbaa !2428
  store i64 %506, i64* %PC, align 8, !tbaa !2428
  %511 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %506, %struct.Memory* %MEMORY.1)
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -8
  %514 = load i64, i64* %PC, align 8
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %513 to i64*
  %517 = load i64, i64* %516, align 8
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = add i64 %517, 4
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = icmp ugt i64 %517, -5
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %5, align 1, !tbaa !2432
  %521 = trunc i64 %518 to i32
  %522 = and i32 %521, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #8
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %6, align 1, !tbaa !2446
  %527 = xor i64 %517, %518
  %528 = lshr i64 %527, 4
  %529 = trunc i64 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %7, align 1, !tbaa !2447
  %531 = icmp eq i64 %518, 0
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %8, align 1, !tbaa !2448
  %533 = lshr i64 %518, 63
  %534 = trunc i64 %533 to i8
  store i8 %534, i8* %9, align 1, !tbaa !2449
  %535 = lshr i64 %517, 63
  %536 = xor i64 %533, %535
  %537 = add nuw nsw i64 %536, %533
  %538 = icmp eq i64 %537, 2
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %10, align 1, !tbaa !2450
  %540 = add i64 %514, 15
  store i64 %540, i64* %PC, align 8
  store i64 %518, i64* %516, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %541 = add i64 %292, -12
  store i64 4196049, i64* %PC, align 8
  %542 = inttoptr i64 %541 to i32*
  store i32 8, i32* %542, align 4
  %543 = load i64, i64* %PC, align 8
  %544 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %543, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %544

block_400922:                                     ; preds = %block_400566
  %545 = add i64 %292, -12
  store i64 4196649, i64* %PC, align 8
  %546 = inttoptr i64 %545 to i32*
  store i32 20, i32* %546, align 4
  %547 = load i64, i64* %PC, align 8
  %548 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %547, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %548

block_400a1c:                                     ; preds = %block_400566
  %549 = add i64 %292, -12
  store i64 4196899, i64* %PC, align 8
  %550 = inttoptr i64 %549 to i32*
  store i32 25, i32* %550, align 4
  %551 = load i64, i64* %PC, align 8
  %552 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %551, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %552

block_400b16:                                     ; preds = %block_400566
  %553 = add i64 %292, -12
  store i64 4197149, i64* %PC, align 8
  %554 = inttoptr i64 %553 to i32*
  store i32 30, i32* %554, align 4
  %555 = load i64, i64* %PC, align 8
  %556 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %555, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %556

block_400602:                                     ; preds = %block_400566
  %557 = add i64 %292, -12
  store i64 4195849, i64* %PC, align 8
  %558 = inttoptr i64 %557 to i32*
  store i32 4, i32* %558, align 4
  %559 = load i64, i64* %PC, align 8
  %560 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %559, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %560

; <label>:561:                                    ; preds = %block_400566
  %562 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %296, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %562
}

; Function Attrs: noinline
define %struct.Memory* @sub_400aeb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400aeb

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %332, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %14

block_4007f6:                                     ; preds = %block_400566
  %15 = add i64 %332, -12
  store i64 4196349, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -12
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 3
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %19, -781
  %25 = add i64 %19, 8
  %26 = load i64, i64* %4, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %25, i64* %28, align 8
  store i64 %27, i64* %4, align 8, !tbaa !2428
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %29 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %24, %struct.Memory* %MEMORY.1)
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 4
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -5
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %5, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %6, align 1, !tbaa !2446
  %45 = xor i64 %35, %36
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %7, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %8, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %9, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %10, align 1, !tbaa !2450
  %58 = add i64 %32, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %34, align 8
  br label %block_400566

block_400aeb:                                     ; preds = %block_400ae4, %3
  %59 = phi i64 [ %1, %3 ], [ %.pre, %block_400ae4 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400ae4 ]
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = add i64 %59, 3
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %59, -1531
  %67 = add i64 %59, 8
  %68 = load i64, i64* %4, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %4, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %MEMORY.0)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = add i64 %77, 4
  store i64 %78, i64* %RCX, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -5
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %5, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %6, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %7, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %8, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %9, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %10, align 1, !tbaa !2450
  %100 = add i64 %74, 15
  store i64 %100, i64* %PC, align 8
  store i64 %78, i64* %76, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %101 = add i64 %332, -12
  store i64 4197099, i64* %PC, align 8
  %102 = inttoptr i64 %101 to i32*
  store i32 29, i32* %102, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400aeb

block_4005d0:                                     ; preds = %block_400566
  %103 = add i64 %332, -12
  store i64 4195799, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 3, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %106

block_4007c4:                                     ; preds = %block_400566
  %107 = add i64 %332, -12
  store i64 4196299, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 13, i32* %108, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %110

block_4008be:                                     ; preds = %block_400566
  %111 = add i64 %332, -12
  store i64 4196549, i64* %PC, align 8
  %112 = inttoptr i64 %111 to i32*
  store i32 18, i32* %112, align 4
  %113 = load i64, i64* %PC, align 8
  %114 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %114

block_40059e:                                     ; preds = %block_400566
  %115 = add i64 %332, -12
  store i64 4195749, i64* %PC, align 8
  %116 = inttoptr i64 %115 to i32*
  store i32 2, i32* %116, align 4
  %117 = load i64, i64* %PC, align 8
  %118 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %117, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %118

block_400698:                                     ; preds = %block_400566
  %119 = add i64 %332, -12
  store i64 4195999, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 7, i32* %120, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %122

block_400792:                                     ; preds = %block_400566
  %123 = add i64 %332, -12
  store i64 4196249, i64* %PC, align 8
  %124 = inttoptr i64 %123 to i32*
  store i32 12, i32* %124, align 4
  %125 = load i64, i64* %PC, align 8
  %126 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %125, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %126

block_40088c:                                     ; preds = %block_400566
  %127 = add i64 %332, -12
  store i64 4196499, i64* %PC, align 8
  %128 = inttoptr i64 %127 to i32*
  store i32 17, i32* %128, align 4
  %129 = load i64, i64* %PC, align 8
  %130 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_400986:                                     ; preds = %block_400566
  %131 = add i64 %332, -12
  store i64 4196749, i64* %PC, align 8
  %132 = inttoptr i64 %131 to i32*
  store i32 22, i32* %132, align 4
  %133 = load i64, i64* %PC, align 8
  %134 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %133, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %134

block_400a80:                                     ; preds = %block_400566
  %135 = add i64 %332, -12
  store i64 4196999, i64* %PC, align 8
  %136 = inttoptr i64 %135 to i32*
  store i32 27, i32* %136, align 4
  %137 = load i64, i64* %PC, align 8
  %138 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %137, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %138

block_4008f0:                                     ; preds = %block_400566
  %139 = add i64 %332, -12
  store i64 4196599, i64* %PC, align 8
  %140 = inttoptr i64 %139 to i32*
  store i32 19, i32* %140, align 4
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -12
  %143 = load i64, i64* %PC, align 8
  %144 = add i64 %143, 3
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %142 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %143, -1031
  %149 = add i64 %143, 8
  %150 = load i64, i64* %4, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %149, i64* %152, align 8
  store i64 %151, i64* %4, align 8, !tbaa !2428
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %153 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -8
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = add i64 %159, 4
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = icmp ugt i64 %159, -5
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %5, align 1, !tbaa !2432
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #8
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %6, align 1, !tbaa !2446
  %169 = xor i64 %159, %160
  %170 = lshr i64 %169, 4
  %171 = trunc i64 %170 to i8
  %172 = and i8 %171, 1
  store i8 %172, i8* %7, align 1, !tbaa !2447
  %173 = icmp eq i64 %160, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %8, align 1, !tbaa !2448
  %175 = lshr i64 %160, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %9, align 1, !tbaa !2449
  %177 = lshr i64 %159, 63
  %178 = xor i64 %175, %177
  %179 = add nuw nsw i64 %178, %175
  %180 = icmp eq i64 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %10, align 1, !tbaa !2450
  %182 = add i64 %156, 15
  store i64 %182, i64* %PC, align 8
  store i64 %160, i64* %158, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %183 = add i64 %332, -12
  store i64 4196849, i64* %PC, align 8
  %184 = inttoptr i64 %183 to i32*
  store i32 24, i32* %184, align 4
  %185 = load i64, i64* %RBP, align 8
  %186 = add i64 %185, -12
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RDI, align 8, !tbaa !2428
  %192 = add i64 %187, -1281
  %193 = add i64 %187, 8
  %194 = load i64, i64* %4, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %4, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %MEMORY.1)
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -8
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %203, 4
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %205 = icmp ugt i64 %203, -5
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %5, align 1, !tbaa !2432
  %207 = trunc i64 %204 to i32
  %208 = and i32 %207, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #8
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %6, align 1, !tbaa !2446
  %213 = xor i64 %203, %204
  %214 = lshr i64 %213, 4
  %215 = trunc i64 %214 to i8
  %216 = and i8 %215, 1
  store i8 %216, i8* %7, align 1, !tbaa !2447
  %217 = icmp eq i64 %204, 0
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %8, align 1, !tbaa !2448
  %219 = lshr i64 %204, 63
  %220 = trunc i64 %219 to i8
  store i8 %220, i8* %9, align 1, !tbaa !2449
  %221 = lshr i64 %203, 63
  %222 = xor i64 %219, %221
  %223 = add nuw nsw i64 %222, %219
  %224 = icmp eq i64 %223, 2
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %10, align 1, !tbaa !2450
  %226 = add i64 %200, 15
  store i64 %226, i64* %PC, align 8
  store i64 %204, i64* %202, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %227 = add i64 %332, -12
  store i64 4195699, i64* %PC, align 8
  %228 = inttoptr i64 %227 to i32*
  store i32 1, i32* %228, align 4
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -12
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = zext i32 %234 to i64
  store i64 %235, i64* %RDI, align 8, !tbaa !2428
  %236 = add i64 %231, -131
  %237 = add i64 %231, 8
  %238 = load i64, i64* %4, align 8, !tbaa !2428
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240, align 8
  store i64 %239, i64* %4, align 8, !tbaa !2428
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %241 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %236, %struct.Memory* %MEMORY.1)
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -8
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = add i64 %247, 4
  store i64 %248, i64* %RCX, align 8, !tbaa !2428
  %249 = icmp ugt i64 %247, -5
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %5, align 1, !tbaa !2432
  %251 = trunc i64 %248 to i32
  %252 = and i32 %251, 255
  %253 = tail call i32 @llvm.ctpop.i32(i32 %252) #8
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = xor i8 %255, 1
  store i8 %256, i8* %6, align 1, !tbaa !2446
  %257 = xor i64 %247, %248
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  store i8 %260, i8* %7, align 1, !tbaa !2447
  %261 = icmp eq i64 %248, 0
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %8, align 1, !tbaa !2448
  %263 = lshr i64 %248, 63
  %264 = trunc i64 %263 to i8
  store i8 %264, i8* %9, align 1, !tbaa !2449
  %265 = lshr i64 %247, 63
  %266 = xor i64 %263, %265
  %267 = add nuw nsw i64 %266, %263
  %268 = icmp eq i64 %267, 2
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %10, align 1, !tbaa !2450
  %270 = add i64 %244, 15
  store i64 %270, i64* %PC, align 8
  store i64 %248, i64* %246, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %271 = add i64 %332, -12
  store i64 4195949, i64* %PC, align 8
  %272 = inttoptr i64 %271 to i32*
  store i32 6, i32* %272, align 4
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -12
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 3
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i32*
  %278 = load i32, i32* %277, align 4
  %279 = zext i32 %278 to i64
  store i64 %279, i64* %RDI, align 8, !tbaa !2428
  %280 = add i64 %275, -381
  %281 = add i64 %275, 8
  %282 = load i64, i64* %4, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %4, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %280, %struct.Memory* %MEMORY.1)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -8
  %288 = load i64, i64* %PC, align 8
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %287 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %291, i64* %RAX, align 8, !tbaa !2428
  %292 = add i64 %291, 4
  store i64 %292, i64* %RCX, align 8, !tbaa !2428
  %293 = icmp ugt i64 %291, -5
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %5, align 1, !tbaa !2432
  %295 = trunc i64 %292 to i32
  %296 = and i32 %295, 255
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #8
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  store i8 %300, i8* %6, align 1, !tbaa !2446
  %301 = xor i64 %291, %292
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  store i8 %304, i8* %7, align 1, !tbaa !2447
  %305 = icmp eq i64 %292, 0
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %8, align 1, !tbaa !2448
  %307 = lshr i64 %292, 63
  %308 = trunc i64 %307 to i8
  store i8 %308, i8* %9, align 1, !tbaa !2449
  %309 = lshr i64 %291, 63
  %310 = xor i64 %307, %309
  %311 = add nuw nsw i64 %310, %307
  %312 = icmp eq i64 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %10, align 1, !tbaa !2450
  %314 = add i64 %288, 15
  store i64 %314, i64* %PC, align 8
  store i64 %292, i64* %290, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400828, %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_400666, %block_40056c, %block_4009ea, %block_4008f0, %block_4007f6, %block_400aeb
  %.sink26 = phi i64 [ 751, %block_400828 ], [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 301, %block_400666 ], [ 51, %block_40056c ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1451, %block_400aeb ]
  %MEMORY.1 = phi %struct.Memory* [ %551, %block_400828 ], [ %507, %block_40072e ], [ %463, %block_400634 ], [ %419, %block_400ab2 ], [ %375, %block_4009b8 ], [ %285, %block_400666 ], [ %241, %block_40056c ], [ %197, %block_4009ea ], [ %153, %block_4008f0 ], [ %29, %block_4007f6 ], [ %71, %block_400aeb ]
  %315 = bitcast i64* %RAX to i32**
  %316 = load i32*, i32** %315, align 8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 3
  store i64 %318, i64* %PC, align 8
  %319 = load i32, i32* %316, align 4
  %320 = sext i32 %319 to i64
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = shl nsw i64 %320, 3
  %322 = add i64 %321, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %323 = add i64 %317, 11
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %RAX, align 8, !tbaa !2428
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -40
  %328 = add i64 %317, 15
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  store i64 %325, i64* %329, align 8
  %330 = load i64, i64* %PC, align 8
  %331 = sub i64 %330, %.sink26
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -40
  %334 = add i64 %331, 4
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  store i64 %336, i64* %PC, align 8, !tbaa !2428
  switch i64 %336, label %601 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %337 = add i64 %332, -12
  store i64 4196199, i64* %PC, align 8
  %338 = inttoptr i64 %337 to i32*
  store i32 11, i32* %338, align 4
  %339 = load i64, i64* %PC, align 8
  %340 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %339, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %340

block_40085a:                                     ; preds = %block_400566
  %341 = add i64 %332, -12
  store i64 4196449, i64* %PC, align 8
  %342 = inttoptr i64 %341 to i32*
  store i32 16, i32* %342, align 4
  %343 = load i64, i64* %PC, align 8
  %344 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %343, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %344

block_400954:                                     ; preds = %block_400566
  %345 = add i64 %332, -12
  store i64 4196699, i64* %PC, align 8
  %346 = inttoptr i64 %345 to i32*
  store i32 21, i32* %346, align 4
  %347 = load i64, i64* %PC, align 8
  %348 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %347, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %348

block_400559:                                     ; preds = %block_400566
  %349 = add i64 %332, -12
  store i64 4195680, i64* %PC, align 8
  %350 = inttoptr i64 %349 to i32*
  store i32 0, i32* %350, align 4
  %351 = load i64, i64* %PC, align 8
  %352 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %351, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %352

block_400a4e:                                     ; preds = %block_400566
  %353 = add i64 %332, -12
  store i64 4196949, i64* %PC, align 8
  %354 = inttoptr i64 %353 to i32*
  store i32 26, i32* %354, align 4
  %355 = load i64, i64* %PC, align 8
  %356 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %355, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %356

block_400b48:                                     ; preds = %block_400566
  %357 = add i64 %332, -12
  store i64 4197199, i64* %PC, align 8
  %358 = inttoptr i64 %357 to i32*
  store i32 31, i32* %358, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %359, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %360

block_4009b8:                                     ; preds = %block_400566
  %361 = add i64 %332, -12
  store i64 4196799, i64* %PC, align 8
  %362 = inttoptr i64 %361 to i32*
  store i32 23, i32* %362, align 4
  %363 = load i64, i64* %RBP, align 8
  %364 = add i64 %363, -12
  %365 = load i64, i64* %PC, align 8
  %366 = add i64 %365, 3
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RDI, align 8, !tbaa !2428
  %370 = add i64 %365, -1231
  %371 = add i64 %365, 8
  %372 = load i64, i64* %4, align 8, !tbaa !2428
  %373 = add i64 %372, -8
  %374 = inttoptr i64 %373 to i64*
  store i64 %371, i64* %374, align 8
  store i64 %373, i64* %4, align 8, !tbaa !2428
  store i64 %370, i64* %PC, align 8, !tbaa !2428
  %375 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %370, %struct.Memory* %MEMORY.1)
  %376 = load i64, i64* %RBP, align 8
  %377 = add i64 %376, -8
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = add i64 %381, 4
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = icmp ugt i64 %381, -5
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %5, align 1, !tbaa !2432
  %385 = trunc i64 %382 to i32
  %386 = and i32 %385, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #8
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %6, align 1, !tbaa !2446
  %391 = xor i64 %381, %382
  %392 = lshr i64 %391, 4
  %393 = trunc i64 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %7, align 1, !tbaa !2447
  %395 = icmp eq i64 %382, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %8, align 1, !tbaa !2448
  %397 = lshr i64 %382, 63
  %398 = trunc i64 %397 to i8
  store i8 %398, i8* %9, align 1, !tbaa !2449
  %399 = lshr i64 %381, 63
  %400 = xor i64 %397, %399
  %401 = add nuw nsw i64 %400, %397
  %402 = icmp eq i64 %401, 2
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %10, align 1, !tbaa !2450
  %404 = add i64 %378, 15
  store i64 %404, i64* %PC, align 8
  store i64 %382, i64* %380, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %405 = add i64 %332, -12
  store i64 4197049, i64* %PC, align 8
  %406 = inttoptr i64 %405 to i32*
  store i32 28, i32* %406, align 4
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -12
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RDI, align 8, !tbaa !2428
  %414 = add i64 %409, -1481
  %415 = add i64 %409, 8
  %416 = load i64, i64* %4, align 8, !tbaa !2428
  %417 = add i64 %416, -8
  %418 = inttoptr i64 %417 to i64*
  store i64 %415, i64* %418, align 8
  store i64 %417, i64* %4, align 8, !tbaa !2428
  store i64 %414, i64* %PC, align 8, !tbaa !2428
  %419 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %414, %struct.Memory* %MEMORY.1)
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -8
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, 4
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = add i64 %425, 4
  store i64 %426, i64* %RCX, align 8, !tbaa !2428
  %427 = icmp ugt i64 %425, -5
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %5, align 1, !tbaa !2432
  %429 = trunc i64 %426 to i32
  %430 = and i32 %429, 255
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430) #8
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  store i8 %434, i8* %6, align 1, !tbaa !2446
  %435 = xor i64 %425, %426
  %436 = lshr i64 %435, 4
  %437 = trunc i64 %436 to i8
  %438 = and i8 %437, 1
  store i8 %438, i8* %7, align 1, !tbaa !2447
  %439 = icmp eq i64 %426, 0
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %8, align 1, !tbaa !2448
  %441 = lshr i64 %426, 63
  %442 = trunc i64 %441 to i8
  store i8 %442, i8* %9, align 1, !tbaa !2449
  %443 = lshr i64 %425, 63
  %444 = xor i64 %441, %443
  %445 = add nuw nsw i64 %444, %441
  %446 = icmp eq i64 %445, 2
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %10, align 1, !tbaa !2450
  %448 = add i64 %422, 15
  store i64 %448, i64* %PC, align 8
  store i64 %426, i64* %424, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %449 = add i64 %332, -12
  store i64 4195899, i64* %PC, align 8
  %450 = inttoptr i64 %449 to i32*
  store i32 5, i32* %450, align 4
  %451 = load i64, i64* %RBP, align 8
  %452 = add i64 %451, -12
  %453 = load i64, i64* %PC, align 8
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %452 to i32*
  %456 = load i32, i32* %455, align 4
  %457 = zext i32 %456 to i64
  store i64 %457, i64* %RDI, align 8, !tbaa !2428
  %458 = add i64 %453, -331
  %459 = add i64 %453, 8
  %460 = load i64, i64* %4, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %459, i64* %462, align 8
  store i64 %461, i64* %4, align 8, !tbaa !2428
  store i64 %458, i64* %PC, align 8, !tbaa !2428
  %463 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %458, %struct.Memory* %MEMORY.1)
  %464 = load i64, i64* %RBP, align 8
  %465 = add i64 %464, -8
  %466 = load i64, i64* %PC, align 8
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468, align 8
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = add i64 %469, 4
  store i64 %470, i64* %RCX, align 8, !tbaa !2428
  %471 = icmp ugt i64 %469, -5
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %5, align 1, !tbaa !2432
  %473 = trunc i64 %470 to i32
  %474 = and i32 %473, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474) #8
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %6, align 1, !tbaa !2446
  %479 = xor i64 %469, %470
  %480 = lshr i64 %479, 4
  %481 = trunc i64 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %7, align 1, !tbaa !2447
  %483 = icmp eq i64 %470, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %8, align 1, !tbaa !2448
  %485 = lshr i64 %470, 63
  %486 = trunc i64 %485 to i8
  store i8 %486, i8* %9, align 1, !tbaa !2449
  %487 = lshr i64 %469, 63
  %488 = xor i64 %485, %487
  %489 = add nuw nsw i64 %488, %485
  %490 = icmp eq i64 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %10, align 1, !tbaa !2450
  %492 = add i64 %466, 15
  store i64 %492, i64* %PC, align 8
  store i64 %470, i64* %468, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %493 = add i64 %332, -12
  store i64 4196149, i64* %PC, align 8
  %494 = inttoptr i64 %493 to i32*
  store i32 10, i32* %494, align 4
  %495 = load i64, i64* %RBP, align 8
  %496 = add i64 %495, -12
  %497 = load i64, i64* %PC, align 8
  %498 = add i64 %497, 3
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %496 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RDI, align 8, !tbaa !2428
  %502 = add i64 %497, -581
  %503 = add i64 %497, 8
  %504 = load i64, i64* %4, align 8, !tbaa !2428
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506, align 8
  store i64 %505, i64* %4, align 8, !tbaa !2428
  store i64 %502, i64* %PC, align 8, !tbaa !2428
  %507 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %502, %struct.Memory* %MEMORY.1)
  %508 = load i64, i64* %RBP, align 8
  %509 = add i64 %508, -8
  %510 = load i64, i64* %PC, align 8
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %509 to i64*
  %513 = load i64, i64* %512, align 8
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = add i64 %513, 4
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = icmp ugt i64 %513, -5
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %5, align 1, !tbaa !2432
  %517 = trunc i64 %514 to i32
  %518 = and i32 %517, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518) #8
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %6, align 1, !tbaa !2446
  %523 = xor i64 %513, %514
  %524 = lshr i64 %523, 4
  %525 = trunc i64 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* %7, align 1, !tbaa !2447
  %527 = icmp eq i64 %514, 0
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %8, align 1, !tbaa !2448
  %529 = lshr i64 %514, 63
  %530 = trunc i64 %529 to i8
  store i8 %530, i8* %9, align 1, !tbaa !2449
  %531 = lshr i64 %513, 63
  %532 = xor i64 %529, %531
  %533 = add nuw nsw i64 %532, %529
  %534 = icmp eq i64 %533, 2
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %10, align 1, !tbaa !2450
  %536 = add i64 %510, 15
  store i64 %536, i64* %PC, align 8
  store i64 %514, i64* %512, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %537 = add i64 %332, -12
  store i64 4196399, i64* %PC, align 8
  %538 = inttoptr i64 %537 to i32*
  store i32 15, i32* %538, align 4
  %539 = load i64, i64* %RBP, align 8
  %540 = add i64 %539, -12
  %541 = load i64, i64* %PC, align 8
  %542 = add i64 %541, 3
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %540 to i32*
  %544 = load i32, i32* %543, align 4
  %545 = zext i32 %544 to i64
  store i64 %545, i64* %RDI, align 8, !tbaa !2428
  %546 = add i64 %541, -831
  %547 = add i64 %541, 8
  %548 = load i64, i64* %4, align 8, !tbaa !2428
  %549 = add i64 %548, -8
  %550 = inttoptr i64 %549 to i64*
  store i64 %547, i64* %550, align 8
  store i64 %549, i64* %4, align 8, !tbaa !2428
  store i64 %546, i64* %PC, align 8, !tbaa !2428
  %551 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %546, %struct.Memory* %MEMORY.1)
  %552 = load i64, i64* %RBP, align 8
  %553 = add i64 %552, -8
  %554 = load i64, i64* %PC, align 8
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %553 to i64*
  %557 = load i64, i64* %556, align 8
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = add i64 %557, 4
  store i64 %558, i64* %RCX, align 8, !tbaa !2428
  %559 = icmp ugt i64 %557, -5
  %560 = zext i1 %559 to i8
  store i8 %560, i8* %5, align 1, !tbaa !2432
  %561 = trunc i64 %558 to i32
  %562 = and i32 %561, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #8
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %6, align 1, !tbaa !2446
  %567 = xor i64 %557, %558
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  store i8 %570, i8* %7, align 1, !tbaa !2447
  %571 = icmp eq i64 %558, 0
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %8, align 1, !tbaa !2448
  %573 = lshr i64 %558, 63
  %574 = trunc i64 %573 to i8
  store i8 %574, i8* %9, align 1, !tbaa !2449
  %575 = lshr i64 %557, 63
  %576 = xor i64 %573, %575
  %577 = add nuw nsw i64 %576, %573
  %578 = icmp eq i64 %577, 2
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %10, align 1, !tbaa !2450
  %580 = add i64 %554, 15
  store i64 %580, i64* %PC, align 8
  store i64 %558, i64* %556, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %581 = add i64 %332, -12
  store i64 4196049, i64* %PC, align 8
  %582 = inttoptr i64 %581 to i32*
  store i32 8, i32* %582, align 4
  %583 = load i64, i64* %PC, align 8
  %584 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %583, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %584

block_400922:                                     ; preds = %block_400566
  %585 = add i64 %332, -12
  store i64 4196649, i64* %PC, align 8
  %586 = inttoptr i64 %585 to i32*
  store i32 20, i32* %586, align 4
  %587 = load i64, i64* %PC, align 8
  %588 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %587, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %588

block_400a1c:                                     ; preds = %block_400566
  %589 = add i64 %332, -12
  store i64 4196899, i64* %PC, align 8
  %590 = inttoptr i64 %589 to i32*
  store i32 25, i32* %590, align 4
  %591 = load i64, i64* %PC, align 8
  %592 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %591, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %592

block_400b16:                                     ; preds = %block_400566
  %593 = add i64 %332, -12
  store i64 4197149, i64* %PC, align 8
  %594 = inttoptr i64 %593 to i32*
  store i32 30, i32* %594, align 4
  %595 = load i64, i64* %PC, align 8
  %596 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %595, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %596

block_400602:                                     ; preds = %block_400566
  %597 = add i64 %332, -12
  store i64 4195849, i64* %PC, align 8
  %598 = inttoptr i64 %597 to i32*
  store i32 4, i32* %598, align 4
  %599 = load i64, i64* %PC, align 8
  %600 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %599, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %600

; <label>:601:                                    ; preds = %block_400566
  %602 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %336, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %602
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cd0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400767(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400767

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %360, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.1)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %360, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.1)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %99 = add i64 %360, -12
  store i64 4195699, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 1, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -131
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.1)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %143 = add i64 %360, -12
  store i64 4196099, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 9, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %146

block_4009ea:                                     ; preds = %block_400566
  %147 = add i64 %360, -12
  store i64 4196849, i64* %PC, align 8
  %148 = inttoptr i64 %147 to i32*
  store i32 24, i32* %148, align 4
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -12
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %151, -1281
  %157 = add i64 %151, 8
  %158 = load i64, i64* %4, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %4, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.1)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -8
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 4
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -5
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %5, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %6, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %7, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %8, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %9, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %10, align 1, !tbaa !2450
  %190 = add i64 %164, 15
  store i64 %190, i64* %PC, align 8
  store i64 %168, i64* %166, align 8
  br label %block_400566

block_400767:                                     ; preds = %block_400760, %3
  %191 = phi i64 [ %1, %3 ], [ %.pre, %block_400760 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400760 ]
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = add i64 %191, 3
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i64
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = add i64 %191, -631
  %199 = add i64 %191, 8
  %200 = load i64, i64* %4, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %199, i64* %202, align 8
  store i64 %201, i64* %4, align 8, !tbaa !2428
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %203 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %198, %struct.Memory* %MEMORY.0)
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -8
  %206 = load i64, i64* %PC, align 8
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208, align 8
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = add i64 %209, 4
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = icmp ugt i64 %209, -5
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %5, align 1, !tbaa !2432
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #8
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %6, align 1, !tbaa !2446
  %219 = xor i64 %209, %210
  %220 = lshr i64 %219, 4
  %221 = trunc i64 %220 to i8
  %222 = and i8 %221, 1
  store i8 %222, i8* %7, align 1, !tbaa !2447
  %223 = icmp eq i64 %210, 0
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %8, align 1, !tbaa !2448
  %225 = lshr i64 %210, 63
  %226 = trunc i64 %225 to i8
  store i8 %226, i8* %9, align 1, !tbaa !2449
  %227 = lshr i64 %209, 63
  %228 = xor i64 %225, %227
  %229 = add nuw nsw i64 %228, %225
  %230 = icmp eq i64 %229, 2
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %10, align 1, !tbaa !2450
  %232 = add i64 %206, 15
  store i64 %232, i64* %PC, align 8
  store i64 %210, i64* %208, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %233 = add i64 %360, -12
  store i64 4195949, i64* %PC, align 8
  %234 = inttoptr i64 %233 to i32*
  store i32 6, i32* %234, align 4
  %235 = load i64, i64* %RBP, align 8
  %236 = add i64 %235, -12
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %236 to i32*
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i64
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %242 = add i64 %237, -381
  %243 = add i64 %237, 8
  %244 = load i64, i64* %4, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %4, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %242, %struct.Memory* %MEMORY.1)
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -8
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %253, 4
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %255 = icmp ugt i64 %253, -5
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %5, align 1, !tbaa !2432
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #8
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %6, align 1, !tbaa !2446
  %263 = xor i64 %253, %254
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  store i8 %266, i8* %7, align 1, !tbaa !2447
  %267 = icmp eq i64 %254, 0
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %8, align 1, !tbaa !2448
  %269 = lshr i64 %254, 63
  %270 = trunc i64 %269 to i8
  store i8 %270, i8* %9, align 1, !tbaa !2449
  %271 = lshr i64 %253, 63
  %272 = xor i64 %269, %271
  %273 = add nuw nsw i64 %272, %269
  %274 = icmp eq i64 %273, 2
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %10, align 1, !tbaa !2450
  %276 = add i64 %250, 15
  store i64 %276, i64* %PC, align 8
  store i64 %254, i64* %252, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %277 = add i64 %360, -12
  store i64 4197099, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 29, i32* %278, align 4
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -12
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 3
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %286 = add i64 %281, -1531
  %287 = add i64 %281, 8
  %288 = load i64, i64* %4, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %4, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %MEMORY.1)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -8
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = add i64 %297, 4
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = icmp ugt i64 %297, -5
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %5, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #8
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %6, align 1, !tbaa !2446
  %307 = xor i64 %297, %298
  %308 = lshr i64 %307, 4
  %309 = trunc i64 %308 to i8
  %310 = and i8 %309, 1
  store i8 %310, i8* %7, align 1, !tbaa !2447
  %311 = icmp eq i64 %298, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %8, align 1, !tbaa !2448
  %313 = lshr i64 %298, 63
  %314 = trunc i64 %313 to i8
  store i8 %314, i8* %9, align 1, !tbaa !2449
  %315 = lshr i64 %297, 63
  %316 = xor i64 %313, %315
  %317 = add nuw nsw i64 %316, %313
  %318 = icmp eq i64 %317, 2
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %10, align 1, !tbaa !2450
  %320 = add i64 %294, 15
  store i64 %320, i64* %PC, align 8
  store i64 %298, i64* %296, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %321 = add i64 %360, -12
  store i64 4196199, i64* %PC, align 8
  %322 = inttoptr i64 %321 to i32*
  store i32 11, i32* %322, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400767

block_40085a:                                     ; preds = %block_400566
  %323 = add i64 %360, -12
  store i64 4196449, i64* %PC, align 8
  %324 = inttoptr i64 %323 to i32*
  store i32 16, i32* %324, align 4
  %325 = load i64, i64* %PC, align 8
  %326 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %325, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %326

block_400954:                                     ; preds = %block_400566
  %327 = add i64 %360, -12
  store i64 4196699, i64* %PC, align 8
  %328 = inttoptr i64 %327 to i32*
  store i32 21, i32* %328, align 4
  %329 = load i64, i64* %PC, align 8
  %330 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %329, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %330

block_400a4e:                                     ; preds = %block_400566
  %331 = add i64 %360, -12
  store i64 4196949, i64* %PC, align 8
  %332 = inttoptr i64 %331 to i32*
  store i32 26, i32* %332, align 4
  %333 = load i64, i64* %PC, align 8
  %334 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %333, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %334

block_400b48:                                     ; preds = %block_400566
  %335 = add i64 %360, -12
  store i64 4197199, i64* %PC, align 8
  %336 = inttoptr i64 %335 to i32*
  store i32 31, i32* %336, align 4
  %337 = load i64, i64* %PC, align 8
  %338 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %337, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %338

block_4007c4:                                     ; preds = %block_400566
  %339 = add i64 %360, -12
  store i64 4196299, i64* %PC, align 8
  %340 = inttoptr i64 %339 to i32*
  store i32 13, i32* %340, align 4
  %341 = load i64, i64* %PC, align 8
  %342 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %341, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %342

block_400566:                                     ; preds = %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400767
  %.sink24 = phi i64 [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 551, %block_400767 ]
  %MEMORY.1 = phi %struct.Memory* [ %611, %block_400922 ], [ %567, %block_400828 ], [ %523, %block_40072e ], [ %479, %block_400ab2 ], [ %435, %block_400634 ], [ %391, %block_4009b8 ], [ %291, %block_400ae4 ], [ %247, %block_400666 ], [ %161, %block_4009ea ], [ %113, %block_40056c ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %203, %block_400767 ]
  %343 = bitcast i64* %RAX to i32**
  %344 = load i32*, i32** %343, align 8
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC, align 8
  %347 = load i32, i32* %344, align 4
  %348 = sext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = shl nsw i64 %348, 3
  %350 = add i64 %349, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %351 = add i64 %345, 11
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -40
  %356 = add i64 %345, 15
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  store i64 %353, i64* %357, align 8
  %358 = load i64, i64* %PC, align 8
  %359 = sub i64 %358, %.sink24
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -40
  %362 = add i64 %359, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  switch i64 %364, label %681 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %365 = add i64 %360, -12
  store i64 4195799, i64* %PC, align 8
  %366 = inttoptr i64 %365 to i32*
  store i32 3, i32* %366, align 4
  %367 = load i64, i64* %PC, align 8
  %368 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %367, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %368

block_4008be:                                     ; preds = %block_400566
  %369 = add i64 %360, -12
  store i64 4196549, i64* %PC, align 8
  %370 = inttoptr i64 %369 to i32*
  store i32 18, i32* %370, align 4
  %371 = load i64, i64* %PC, align 8
  %372 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %371, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %372

block_4006ca:                                     ; preds = %block_400566
  %373 = add i64 %360, -12
  store i64 4196049, i64* %PC, align 8
  %374 = inttoptr i64 %373 to i32*
  store i32 8, i32* %374, align 4
  %375 = load i64, i64* %PC, align 8
  %376 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %376

block_4009b8:                                     ; preds = %block_400566
  %377 = add i64 %360, -12
  store i64 4196799, i64* %PC, align 8
  %378 = inttoptr i64 %377 to i32*
  store i32 23, i32* %378, align 4
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -12
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %381, -1231
  %387 = add i64 %381, 8
  %388 = load i64, i64* %4, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %4, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %386, %struct.Memory* %MEMORY.1)
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %397, 4
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -5
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %5, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %6, align 1, !tbaa !2446
  %407 = xor i64 %397, %398
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %7, align 1, !tbaa !2447
  %411 = icmp eq i64 %398, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %8, align 1, !tbaa !2448
  %413 = lshr i64 %398, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %9, align 1, !tbaa !2449
  %415 = lshr i64 %397, 63
  %416 = xor i64 %413, %415
  %417 = add nuw nsw i64 %416, %413
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %10, align 1, !tbaa !2450
  %420 = add i64 %394, 15
  store i64 %420, i64* %PC, align 8
  store i64 %398, i64* %396, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %421 = add i64 %360, -12
  store i64 4195899, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 5, i32* %422, align 4
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -12
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = add i64 %425, -331
  %431 = add i64 %425, 8
  %432 = load i64, i64* %4, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %4, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %MEMORY.1)
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = add i64 %441, 4
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = icmp ugt i64 %441, -5
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %5, align 1, !tbaa !2432
  %445 = trunc i64 %442 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #8
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %6, align 1, !tbaa !2446
  %451 = xor i64 %441, %442
  %452 = lshr i64 %451, 4
  %453 = trunc i64 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %7, align 1, !tbaa !2447
  %455 = icmp eq i64 %442, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %8, align 1, !tbaa !2448
  %457 = lshr i64 %442, 63
  %458 = trunc i64 %457 to i8
  store i8 %458, i8* %9, align 1, !tbaa !2449
  %459 = lshr i64 %441, 63
  %460 = xor i64 %457, %459
  %461 = add nuw nsw i64 %460, %457
  %462 = icmp eq i64 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %10, align 1, !tbaa !2450
  %464 = add i64 %438, 15
  store i64 %464, i64* %PC, align 8
  store i64 %442, i64* %440, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %465 = add i64 %360, -12
  store i64 4197049, i64* %PC, align 8
  %466 = inttoptr i64 %465 to i32*
  store i32 28, i32* %466, align 4
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -12
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RDI, align 8, !tbaa !2428
  %474 = add i64 %469, -1481
  %475 = add i64 %469, 8
  %476 = load i64, i64* %4, align 8, !tbaa !2428
  %477 = add i64 %476, -8
  %478 = inttoptr i64 %477 to i64*
  store i64 %475, i64* %478, align 8
  store i64 %477, i64* %4, align 8, !tbaa !2428
  store i64 %474, i64* %PC, align 8, !tbaa !2428
  %479 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %474, %struct.Memory* %MEMORY.1)
  %480 = load i64, i64* %RBP, align 8
  %481 = add i64 %480, -8
  %482 = load i64, i64* %PC, align 8
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %481 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %RAX, align 8, !tbaa !2428
  %486 = add i64 %485, 4
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = icmp ugt i64 %485, -5
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %5, align 1, !tbaa !2432
  %489 = trunc i64 %486 to i32
  %490 = and i32 %489, 255
  %491 = tail call i32 @llvm.ctpop.i32(i32 %490) #8
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  store i8 %494, i8* %6, align 1, !tbaa !2446
  %495 = xor i64 %485, %486
  %496 = lshr i64 %495, 4
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %7, align 1, !tbaa !2447
  %499 = icmp eq i64 %486, 0
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %8, align 1, !tbaa !2448
  %501 = lshr i64 %486, 63
  %502 = trunc i64 %501 to i8
  store i8 %502, i8* %9, align 1, !tbaa !2449
  %503 = lshr i64 %485, 63
  %504 = xor i64 %501, %503
  %505 = add nuw nsw i64 %504, %501
  %506 = icmp eq i64 %505, 2
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %10, align 1, !tbaa !2450
  %508 = add i64 %482, 15
  store i64 %508, i64* %PC, align 8
  store i64 %486, i64* %484, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %509 = add i64 %360, -12
  store i64 4196149, i64* %PC, align 8
  %510 = inttoptr i64 %509 to i32*
  store i32 10, i32* %510, align 4
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -12
  %513 = load i64, i64* %PC, align 8
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %512 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RDI, align 8, !tbaa !2428
  %518 = add i64 %513, -581
  %519 = add i64 %513, 8
  %520 = load i64, i64* %4, align 8, !tbaa !2428
  %521 = add i64 %520, -8
  %522 = inttoptr i64 %521 to i64*
  store i64 %519, i64* %522, align 8
  store i64 %521, i64* %4, align 8, !tbaa !2428
  store i64 %518, i64* %PC, align 8, !tbaa !2428
  %523 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %518, %struct.Memory* %MEMORY.1)
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -8
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %525 to i64*
  %529 = load i64, i64* %528, align 8
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = add i64 %529, 4
  store i64 %530, i64* %RCX, align 8, !tbaa !2428
  %531 = icmp ugt i64 %529, -5
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %5, align 1, !tbaa !2432
  %533 = trunc i64 %530 to i32
  %534 = and i32 %533, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #8
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %6, align 1, !tbaa !2446
  %539 = xor i64 %529, %530
  %540 = lshr i64 %539, 4
  %541 = trunc i64 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %7, align 1, !tbaa !2447
  %543 = icmp eq i64 %530, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %8, align 1, !tbaa !2448
  %545 = lshr i64 %530, 63
  %546 = trunc i64 %545 to i8
  store i8 %546, i8* %9, align 1, !tbaa !2449
  %547 = lshr i64 %529, 63
  %548 = xor i64 %545, %547
  %549 = add nuw nsw i64 %548, %545
  %550 = icmp eq i64 %549, 2
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %10, align 1, !tbaa !2450
  %552 = add i64 %526, 15
  store i64 %552, i64* %PC, align 8
  store i64 %530, i64* %528, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %553 = add i64 %360, -12
  store i64 4196399, i64* %PC, align 8
  %554 = inttoptr i64 %553 to i32*
  store i32 15, i32* %554, align 4
  %555 = load i64, i64* %RBP, align 8
  %556 = add i64 %555, -12
  %557 = load i64, i64* %PC, align 8
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559, align 4
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RDI, align 8, !tbaa !2428
  %562 = add i64 %557, -831
  %563 = add i64 %557, 8
  %564 = load i64, i64* %4, align 8, !tbaa !2428
  %565 = add i64 %564, -8
  %566 = inttoptr i64 %565 to i64*
  store i64 %563, i64* %566, align 8
  store i64 %565, i64* %4, align 8, !tbaa !2428
  store i64 %562, i64* %PC, align 8, !tbaa !2428
  %567 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %562, %struct.Memory* %MEMORY.1)
  %568 = load i64, i64* %RBP, align 8
  %569 = add i64 %568, -8
  %570 = load i64, i64* %PC, align 8
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = add i64 %573, 4
  store i64 %574, i64* %RCX, align 8, !tbaa !2428
  %575 = icmp ugt i64 %573, -5
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %5, align 1, !tbaa !2432
  %577 = trunc i64 %574 to i32
  %578 = and i32 %577, 255
  %579 = tail call i32 @llvm.ctpop.i32(i32 %578) #8
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = xor i8 %581, 1
  store i8 %582, i8* %6, align 1, !tbaa !2446
  %583 = xor i64 %573, %574
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  store i8 %586, i8* %7, align 1, !tbaa !2447
  %587 = icmp eq i64 %574, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %8, align 1, !tbaa !2448
  %589 = lshr i64 %574, 63
  %590 = trunc i64 %589 to i8
  store i8 %590, i8* %9, align 1, !tbaa !2449
  %591 = lshr i64 %573, 63
  %592 = xor i64 %589, %591
  %593 = add nuw nsw i64 %592, %589
  %594 = icmp eq i64 %593, 2
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %10, align 1, !tbaa !2450
  %596 = add i64 %570, 15
  store i64 %596, i64* %PC, align 8
  store i64 %574, i64* %572, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %597 = add i64 %360, -12
  store i64 4196649, i64* %PC, align 8
  %598 = inttoptr i64 %597 to i32*
  store i32 20, i32* %598, align 4
  %599 = load i64, i64* %RBP, align 8
  %600 = add i64 %599, -12
  %601 = load i64, i64* %PC, align 8
  %602 = add i64 %601, 3
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %600 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %606 = add i64 %601, -1081
  %607 = add i64 %601, 8
  %608 = load i64, i64* %4, align 8, !tbaa !2428
  %609 = add i64 %608, -8
  %610 = inttoptr i64 %609 to i64*
  store i64 %607, i64* %610, align 8
  store i64 %609, i64* %4, align 8, !tbaa !2428
  store i64 %606, i64* %PC, align 8, !tbaa !2428
  %611 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %606, %struct.Memory* %MEMORY.1)
  %612 = load i64, i64* %RBP, align 8
  %613 = add i64 %612, -8
  %614 = load i64, i64* %PC, align 8
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = add i64 %617, 4
  store i64 %618, i64* %RCX, align 8, !tbaa !2428
  %619 = icmp ugt i64 %617, -5
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %5, align 1, !tbaa !2432
  %621 = trunc i64 %618 to i32
  %622 = and i32 %621, 255
  %623 = tail call i32 @llvm.ctpop.i32(i32 %622) #8
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  store i8 %626, i8* %6, align 1, !tbaa !2446
  %627 = xor i64 %617, %618
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %7, align 1, !tbaa !2447
  %631 = icmp eq i64 %618, 0
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %8, align 1, !tbaa !2448
  %633 = lshr i64 %618, 63
  %634 = trunc i64 %633 to i8
  store i8 %634, i8* %9, align 1, !tbaa !2449
  %635 = lshr i64 %617, 63
  %636 = xor i64 %633, %635
  %637 = add nuw nsw i64 %636, %633
  %638 = icmp eq i64 %637, 2
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %10, align 1, !tbaa !2450
  %640 = add i64 %614, 15
  store i64 %640, i64* %PC, align 8
  store i64 %618, i64* %616, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %641 = add i64 %360, -12
  store i64 4195749, i64* %PC, align 8
  %642 = inttoptr i64 %641 to i32*
  store i32 2, i32* %642, align 4
  %643 = load i64, i64* %PC, align 8
  %644 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %643, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %644

block_400559:                                     ; preds = %block_400566
  %645 = add i64 %360, -12
  store i64 4195680, i64* %PC, align 8
  %646 = inttoptr i64 %645 to i32*
  store i32 0, i32* %646, align 4
  %647 = load i64, i64* %PC, align 8
  %648 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %647, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %648

block_400a1c:                                     ; preds = %block_400566
  %649 = add i64 %360, -12
  store i64 4196899, i64* %PC, align 8
  %650 = inttoptr i64 %649 to i32*
  store i32 25, i32* %650, align 4
  %651 = load i64, i64* %PC, align 8
  %652 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %651, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %652

block_400698:                                     ; preds = %block_400566
  %653 = add i64 %360, -12
  store i64 4195999, i64* %PC, align 8
  %654 = inttoptr i64 %653 to i32*
  store i32 7, i32* %654, align 4
  %655 = load i64, i64* %PC, align 8
  %656 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %655, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %656

block_400b16:                                     ; preds = %block_400566
  %657 = add i64 %360, -12
  store i64 4197149, i64* %PC, align 8
  %658 = inttoptr i64 %657 to i32*
  store i32 30, i32* %658, align 4
  %659 = load i64, i64* %PC, align 8
  %660 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %659, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %660

block_400792:                                     ; preds = %block_400566
  %661 = add i64 %360, -12
  store i64 4196249, i64* %PC, align 8
  %662 = inttoptr i64 %661 to i32*
  store i32 12, i32* %662, align 4
  %663 = load i64, i64* %PC, align 8
  %664 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %663, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %664

block_40088c:                                     ; preds = %block_400566
  %665 = add i64 %360, -12
  store i64 4196499, i64* %PC, align 8
  %666 = inttoptr i64 %665 to i32*
  store i32 17, i32* %666, align 4
  %667 = load i64, i64* %PC, align 8
  %668 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %667, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %668

block_400986:                                     ; preds = %block_400566
  %669 = add i64 %360, -12
  store i64 4196749, i64* %PC, align 8
  %670 = inttoptr i64 %669 to i32*
  store i32 22, i32* %670, align 4
  %671 = load i64, i64* %PC, align 8
  %672 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %671, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %672

block_400602:                                     ; preds = %block_400566
  %673 = add i64 %360, -12
  store i64 4195849, i64* %PC, align 8
  %674 = inttoptr i64 %673 to i32*
  store i32 4, i32* %674, align 4
  %675 = load i64, i64* %PC, align 8
  %676 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %675, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %676

block_400a80:                                     ; preds = %block_400566
  %677 = add i64 %360, -12
  store i64 4196999, i64* %PC, align 8
  %678 = inttoptr i64 %677 to i32*
  store i32 27, i32* %678, align 4
  %679 = load i64, i64* %PC, align 8
  %680 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %679, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %680

; <label>:681:                                    ; preds = %block_400566
  %682 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %364, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %682
}

; Function Attrs: noinline
define %struct.Memory* @sub_40069f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40069f

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_40069f
  %.sink20 = phi i64 [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 351, %block_40069f ]
  %MEMORY.0 = phi %struct.Memory* [ %815, %block_400a1c ], [ %771, %block_40059e ], [ %685, %block_400922 ], [ %641, %block_400828 ], [ %597, %block_40072e ], [ %553, %block_400ab2 ], [ %509, %block_400634 ], [ %465, %block_4009b8 ], [ %421, %block_40056c ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %727, %block_40069f ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink20
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %871 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RSP, align 8
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %346, 48
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %349 = icmp ugt i64 %346, -49
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %4, align 1, !tbaa !2432
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %5, align 1, !tbaa !2446
  %357 = xor i64 %346, 16
  %358 = xor i64 %357, %348
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %6, align 1, !tbaa !2447
  %362 = icmp eq i64 %348, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %7, align 1, !tbaa !2448
  %364 = lshr i64 %348, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %8, align 1, !tbaa !2449
  %366 = lshr i64 %346, 63
  %367 = xor i64 %364, %366
  %368 = add nuw nsw i64 %367, %364
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %9, align 1, !tbaa !2450
  %371 = add i64 %347, 5
  store i64 %371, i64* %PC, align 8
  %372 = add i64 %346, 56
  %373 = inttoptr i64 %348 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBP, align 8, !tbaa !2428
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %347, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %372 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %378 = add i64 %346, 64
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %379 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %380 = inttoptr i64 %379 to i32*
  store i32 21, i32* %380, align 4
  %381 = load i64, i64* %PC, align 8
  %382 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %381, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %382

block_4005d0:                                     ; preds = %block_400566
  %383 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %384 = inttoptr i64 %383 to i32*
  store i32 3, i32* %384, align 4
  %385 = load i64, i64* %PC, align 8
  %386 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %385, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %386

block_400a4e:                                     ; preds = %block_400566
  %387 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %388 = inttoptr i64 %387 to i32*
  store i32 26, i32* %388, align 4
  %389 = load i64, i64* %PC, align 8
  %390 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %390

block_4006ca:                                     ; preds = %block_400566
  %391 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %392 = inttoptr i64 %391 to i32*
  store i32 8, i32* %392, align 4
  %393 = load i64, i64* %PC, align 8
  %394 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %393, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %394

block_400b48:                                     ; preds = %block_400566
  %395 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %396 = inttoptr i64 %395 to i32*
  store i32 31, i32* %396, align 4
  %397 = load i64, i64* %PC, align 8
  %398 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %397, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %398

block_4007c4:                                     ; preds = %block_400566
  %399 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %400 = inttoptr i64 %399 to i32*
  store i32 13, i32* %400, align 4
  %401 = load i64, i64* %PC, align 8
  %402 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %401, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %402

block_4008be:                                     ; preds = %block_400566
  %403 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %404 = inttoptr i64 %403 to i32*
  store i32 18, i32* %404, align 4
  %405 = load i64, i64* %PC, align 8
  %406 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %405, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %406

block_40056c:                                     ; preds = %block_400566
  %407 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %408 = inttoptr i64 %407 to i32*
  store i32 1, i32* %408, align 4
  %409 = load i64, i64* %RBP, align 8
  %410 = add i64 %409, -12
  %411 = load i64, i64* %PC, align 8
  %412 = add i64 %411, 3
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %410 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = zext i32 %414 to i64
  store i64 %415, i64* %RDI, align 8, !tbaa !2428
  %416 = add i64 %411, -131
  %417 = add i64 %411, 8
  %418 = load i64, i64* %RSP, align 8, !tbaa !2428
  %419 = add i64 %418, -8
  %420 = inttoptr i64 %419 to i64*
  store i64 %417, i64* %420, align 8
  store i64 %419, i64* %RSP, align 8, !tbaa !2428
  store i64 %416, i64* %PC, align 8, !tbaa !2428
  %421 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %416, %struct.Memory* %MEMORY.0)
  %422 = load i64, i64* %RBP, align 8
  %423 = add i64 %422, -8
  %424 = load i64, i64* %PC, align 8
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %423 to i64*
  %427 = load i64, i64* %426, align 8
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = add i64 %427, 4
  store i64 %428, i64* %RCX, align 8, !tbaa !2428
  %429 = icmp ugt i64 %427, -5
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %4, align 1, !tbaa !2432
  %431 = trunc i64 %428 to i32
  %432 = and i32 %431, 255
  %433 = tail call i32 @llvm.ctpop.i32(i32 %432) #8
  %434 = trunc i32 %433 to i8
  %435 = and i8 %434, 1
  %436 = xor i8 %435, 1
  store i8 %436, i8* %5, align 1, !tbaa !2446
  %437 = xor i64 %427, %428
  %438 = lshr i64 %437, 4
  %439 = trunc i64 %438 to i8
  %440 = and i8 %439, 1
  store i8 %440, i8* %6, align 1, !tbaa !2447
  %441 = icmp eq i64 %428, 0
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %7, align 1, !tbaa !2448
  %443 = lshr i64 %428, 63
  %444 = trunc i64 %443 to i8
  store i8 %444, i8* %8, align 1, !tbaa !2449
  %445 = lshr i64 %427, 63
  %446 = xor i64 %443, %445
  %447 = add nuw nsw i64 %446, %443
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %9, align 1, !tbaa !2450
  %450 = add i64 %424, 15
  store i64 %450, i64* %PC, align 8
  store i64 %428, i64* %426, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %451 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %452 = inttoptr i64 %451 to i32*
  store i32 23, i32* %452, align 4
  %453 = load i64, i64* %RBP, align 8
  %454 = add i64 %453, -12
  %455 = load i64, i64* %PC, align 8
  %456 = add i64 %455, 3
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %454 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RDI, align 8, !tbaa !2428
  %460 = add i64 %455, -1231
  %461 = add i64 %455, 8
  %462 = load i64, i64* %RSP, align 8, !tbaa !2428
  %463 = add i64 %462, -8
  %464 = inttoptr i64 %463 to i64*
  store i64 %461, i64* %464, align 8
  store i64 %463, i64* %RSP, align 8, !tbaa !2428
  store i64 %460, i64* %PC, align 8, !tbaa !2428
  %465 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %460, %struct.Memory* %MEMORY.0)
  %466 = load i64, i64* %RBP, align 8
  %467 = add i64 %466, -8
  %468 = load i64, i64* %PC, align 8
  %469 = add i64 %468, 4
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %467 to i64*
  %471 = load i64, i64* %470, align 8
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = add i64 %471, 4
  store i64 %472, i64* %RCX, align 8, !tbaa !2428
  %473 = icmp ugt i64 %471, -5
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %4, align 1, !tbaa !2432
  %475 = trunc i64 %472 to i32
  %476 = and i32 %475, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #8
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %5, align 1, !tbaa !2446
  %481 = xor i64 %471, %472
  %482 = lshr i64 %481, 4
  %483 = trunc i64 %482 to i8
  %484 = and i8 %483, 1
  store i8 %484, i8* %6, align 1, !tbaa !2447
  %485 = icmp eq i64 %472, 0
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %7, align 1, !tbaa !2448
  %487 = lshr i64 %472, 63
  %488 = trunc i64 %487 to i8
  store i8 %488, i8* %8, align 1, !tbaa !2449
  %489 = lshr i64 %471, 63
  %490 = xor i64 %487, %489
  %491 = add nuw nsw i64 %490, %487
  %492 = icmp eq i64 %491, 2
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %9, align 1, !tbaa !2450
  %494 = add i64 %468, 15
  store i64 %494, i64* %PC, align 8
  store i64 %472, i64* %470, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %495 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %496 = inttoptr i64 %495 to i32*
  store i32 5, i32* %496, align 4
  %497 = load i64, i64* %RBP, align 8
  %498 = add i64 %497, -12
  %499 = load i64, i64* %PC, align 8
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC, align 8
  %501 = inttoptr i64 %498 to i32*
  %502 = load i32, i32* %501, align 4
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %RDI, align 8, !tbaa !2428
  %504 = add i64 %499, -331
  %505 = add i64 %499, 8
  %506 = load i64, i64* %RSP, align 8, !tbaa !2428
  %507 = add i64 %506, -8
  %508 = inttoptr i64 %507 to i64*
  store i64 %505, i64* %508, align 8
  store i64 %507, i64* %RSP, align 8, !tbaa !2428
  store i64 %504, i64* %PC, align 8, !tbaa !2428
  %509 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %504, %struct.Memory* %MEMORY.0)
  %510 = load i64, i64* %RBP, align 8
  %511 = add i64 %510, -8
  %512 = load i64, i64* %PC, align 8
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %511 to i64*
  %515 = load i64, i64* %514, align 8
  store i64 %515, i64* %RAX, align 8, !tbaa !2428
  %516 = add i64 %515, 4
  store i64 %516, i64* %RCX, align 8, !tbaa !2428
  %517 = icmp ugt i64 %515, -5
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %4, align 1, !tbaa !2432
  %519 = trunc i64 %516 to i32
  %520 = and i32 %519, 255
  %521 = tail call i32 @llvm.ctpop.i32(i32 %520) #8
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  store i8 %524, i8* %5, align 1, !tbaa !2446
  %525 = xor i64 %515, %516
  %526 = lshr i64 %525, 4
  %527 = trunc i64 %526 to i8
  %528 = and i8 %527, 1
  store i8 %528, i8* %6, align 1, !tbaa !2447
  %529 = icmp eq i64 %516, 0
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %7, align 1, !tbaa !2448
  %531 = lshr i64 %516, 63
  %532 = trunc i64 %531 to i8
  store i8 %532, i8* %8, align 1, !tbaa !2449
  %533 = lshr i64 %515, 63
  %534 = xor i64 %531, %533
  %535 = add nuw nsw i64 %534, %531
  %536 = icmp eq i64 %535, 2
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %9, align 1, !tbaa !2450
  %538 = add i64 %512, 15
  store i64 %538, i64* %PC, align 8
  store i64 %516, i64* %514, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %539 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %540 = inttoptr i64 %539 to i32*
  store i32 28, i32* %540, align 4
  %541 = load i64, i64* %RBP, align 8
  %542 = add i64 %541, -12
  %543 = load i64, i64* %PC, align 8
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %542 to i32*
  %546 = load i32, i32* %545, align 4
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %RDI, align 8, !tbaa !2428
  %548 = add i64 %543, -1481
  %549 = add i64 %543, 8
  %550 = load i64, i64* %RSP, align 8, !tbaa !2428
  %551 = add i64 %550, -8
  %552 = inttoptr i64 %551 to i64*
  store i64 %549, i64* %552, align 8
  store i64 %551, i64* %RSP, align 8, !tbaa !2428
  store i64 %548, i64* %PC, align 8, !tbaa !2428
  %553 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %548, %struct.Memory* %MEMORY.0)
  %554 = load i64, i64* %RBP, align 8
  %555 = add i64 %554, -8
  %556 = load i64, i64* %PC, align 8
  %557 = add i64 %556, 4
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %555 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = add i64 %559, 4
  store i64 %560, i64* %RCX, align 8, !tbaa !2428
  %561 = icmp ugt i64 %559, -5
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %4, align 1, !tbaa !2432
  %563 = trunc i64 %560 to i32
  %564 = and i32 %563, 255
  %565 = tail call i32 @llvm.ctpop.i32(i32 %564) #8
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  %568 = xor i8 %567, 1
  store i8 %568, i8* %5, align 1, !tbaa !2446
  %569 = xor i64 %559, %560
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %6, align 1, !tbaa !2447
  %573 = icmp eq i64 %560, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %7, align 1, !tbaa !2448
  %575 = lshr i64 %560, 63
  %576 = trunc i64 %575 to i8
  store i8 %576, i8* %8, align 1, !tbaa !2449
  %577 = lshr i64 %559, 63
  %578 = xor i64 %575, %577
  %579 = add nuw nsw i64 %578, %575
  %580 = icmp eq i64 %579, 2
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %9, align 1, !tbaa !2450
  %582 = add i64 %556, 15
  store i64 %582, i64* %PC, align 8
  store i64 %560, i64* %558, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %583 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %584 = inttoptr i64 %583 to i32*
  store i32 10, i32* %584, align 4
  %585 = load i64, i64* %RBP, align 8
  %586 = add i64 %585, -12
  %587 = load i64, i64* %PC, align 8
  %588 = add i64 %587, 3
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %586 to i32*
  %590 = load i32, i32* %589, align 4
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %RDI, align 8, !tbaa !2428
  %592 = add i64 %587, -581
  %593 = add i64 %587, 8
  %594 = load i64, i64* %RSP, align 8, !tbaa !2428
  %595 = add i64 %594, -8
  %596 = inttoptr i64 %595 to i64*
  store i64 %593, i64* %596, align 8
  store i64 %595, i64* %RSP, align 8, !tbaa !2428
  store i64 %592, i64* %PC, align 8, !tbaa !2428
  %597 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %592, %struct.Memory* %MEMORY.0)
  %598 = load i64, i64* %RBP, align 8
  %599 = add i64 %598, -8
  %600 = load i64, i64* %PC, align 8
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602, align 8
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = add i64 %603, 4
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = icmp ugt i64 %603, -5
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %4, align 1, !tbaa !2432
  %607 = trunc i64 %604 to i32
  %608 = and i32 %607, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608) #8
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %5, align 1, !tbaa !2446
  %613 = xor i64 %603, %604
  %614 = lshr i64 %613, 4
  %615 = trunc i64 %614 to i8
  %616 = and i8 %615, 1
  store i8 %616, i8* %6, align 1, !tbaa !2447
  %617 = icmp eq i64 %604, 0
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %7, align 1, !tbaa !2448
  %619 = lshr i64 %604, 63
  %620 = trunc i64 %619 to i8
  store i8 %620, i8* %8, align 1, !tbaa !2449
  %621 = lshr i64 %603, 63
  %622 = xor i64 %619, %621
  %623 = add nuw nsw i64 %622, %619
  %624 = icmp eq i64 %623, 2
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %9, align 1, !tbaa !2450
  %626 = add i64 %600, 15
  store i64 %626, i64* %PC, align 8
  store i64 %604, i64* %602, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %627 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %628 = inttoptr i64 %627 to i32*
  store i32 15, i32* %628, align 4
  %629 = load i64, i64* %RBP, align 8
  %630 = add i64 %629, -12
  %631 = load i64, i64* %PC, align 8
  %632 = add i64 %631, 3
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %630 to i32*
  %634 = load i32, i32* %633, align 4
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %RDI, align 8, !tbaa !2428
  %636 = add i64 %631, -831
  %637 = add i64 %631, 8
  %638 = load i64, i64* %RSP, align 8, !tbaa !2428
  %639 = add i64 %638, -8
  %640 = inttoptr i64 %639 to i64*
  store i64 %637, i64* %640, align 8
  store i64 %639, i64* %RSP, align 8, !tbaa !2428
  store i64 %636, i64* %PC, align 8, !tbaa !2428
  %641 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %636, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP, align 8
  %643 = add i64 %642, -8
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = add i64 %647, 4
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %649 = icmp ugt i64 %647, -5
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %4, align 1, !tbaa !2432
  %651 = trunc i64 %648 to i32
  %652 = and i32 %651, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #8
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %5, align 1, !tbaa !2446
  %657 = xor i64 %647, %648
  %658 = lshr i64 %657, 4
  %659 = trunc i64 %658 to i8
  %660 = and i8 %659, 1
  store i8 %660, i8* %6, align 1, !tbaa !2447
  %661 = icmp eq i64 %648, 0
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %7, align 1, !tbaa !2448
  %663 = lshr i64 %648, 63
  %664 = trunc i64 %663 to i8
  store i8 %664, i8* %8, align 1, !tbaa !2449
  %665 = lshr i64 %647, 63
  %666 = xor i64 %663, %665
  %667 = add nuw nsw i64 %666, %663
  %668 = icmp eq i64 %667, 2
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %9, align 1, !tbaa !2450
  %670 = add i64 %644, 15
  store i64 %670, i64* %PC, align 8
  store i64 %648, i64* %646, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %671 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %672 = inttoptr i64 %671 to i32*
  store i32 20, i32* %672, align 4
  %673 = load i64, i64* %RBP, align 8
  %674 = add i64 %673, -12
  %675 = load i64, i64* %PC, align 8
  %676 = add i64 %675, 3
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %674 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %RDI, align 8, !tbaa !2428
  %680 = add i64 %675, -1081
  %681 = add i64 %675, 8
  %682 = load i64, i64* %RSP, align 8, !tbaa !2428
  %683 = add i64 %682, -8
  %684 = inttoptr i64 %683 to i64*
  store i64 %681, i64* %684, align 8
  store i64 %683, i64* %RSP, align 8, !tbaa !2428
  store i64 %680, i64* %PC, align 8, !tbaa !2428
  %685 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %680, %struct.Memory* %MEMORY.0)
  %686 = load i64, i64* %RBP, align 8
  %687 = add i64 %686, -8
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %687 to i64*
  %691 = load i64, i64* %690, align 8
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = add i64 %691, 4
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  %693 = icmp ugt i64 %691, -5
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %4, align 1, !tbaa !2432
  %695 = trunc i64 %692 to i32
  %696 = and i32 %695, 255
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #8
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  store i8 %700, i8* %5, align 1, !tbaa !2446
  %701 = xor i64 %691, %692
  %702 = lshr i64 %701, 4
  %703 = trunc i64 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %6, align 1, !tbaa !2447
  %705 = icmp eq i64 %692, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %7, align 1, !tbaa !2448
  %707 = lshr i64 %692, 63
  %708 = trunc i64 %707 to i8
  store i8 %708, i8* %8, align 1, !tbaa !2449
  %709 = lshr i64 %691, 63
  %710 = xor i64 %707, %709
  %711 = add nuw nsw i64 %710, %707
  %712 = icmp eq i64 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %9, align 1, !tbaa !2450
  %714 = add i64 %688, 15
  store i64 %714, i64* %PC, align 8
  store i64 %692, i64* %690, align 8
  br label %block_400566

block_40069f:                                     ; preds = %block_400698, %3
  %715 = phi i64 [ %1, %3 ], [ %.pre, %block_400698 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400698 ]
  %716 = load i64, i64* %RBP, align 8
  %717 = add i64 %716, -12
  %718 = add i64 %715, 3
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %717 to i32*
  %720 = load i32, i32* %719, align 4
  %721 = zext i32 %720 to i64
  store i64 %721, i64* %RDI, align 8, !tbaa !2428
  %722 = add i64 %715, -431
  %723 = add i64 %715, 8
  %724 = load i64, i64* %RSP, align 8, !tbaa !2428
  %725 = add i64 %724, -8
  %726 = inttoptr i64 %725 to i64*
  store i64 %723, i64* %726, align 8
  store i64 %725, i64* %RSP, align 8, !tbaa !2428
  store i64 %722, i64* %PC, align 8, !tbaa !2428
  %727 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %722, %struct.Memory* %MEMORY.1)
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -8
  %730 = load i64, i64* %PC, align 8
  %731 = add i64 %730, 4
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %729 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = add i64 %733, 4
  store i64 %734, i64* %RCX, align 8, !tbaa !2428
  %735 = icmp ugt i64 %733, -5
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %4, align 1, !tbaa !2432
  %737 = trunc i64 %734 to i32
  %738 = and i32 %737, 255
  %739 = tail call i32 @llvm.ctpop.i32(i32 %738) #8
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  store i8 %742, i8* %5, align 1, !tbaa !2446
  %743 = xor i64 %733, %734
  %744 = lshr i64 %743, 4
  %745 = trunc i64 %744 to i8
  %746 = and i8 %745, 1
  store i8 %746, i8* %6, align 1, !tbaa !2447
  %747 = icmp eq i64 %734, 0
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %7, align 1, !tbaa !2448
  %749 = lshr i64 %734, 63
  %750 = trunc i64 %749 to i8
  store i8 %750, i8* %8, align 1, !tbaa !2449
  %751 = lshr i64 %733, 63
  %752 = xor i64 %749, %751
  %753 = add nuw nsw i64 %752, %749
  %754 = icmp eq i64 %753, 2
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %9, align 1, !tbaa !2450
  %756 = add i64 %730, 15
  store i64 %756, i64* %PC, align 8
  store i64 %734, i64* %732, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %757 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %758 = inttoptr i64 %757 to i32*
  store i32 2, i32* %758, align 4
  %759 = load i64, i64* %RBP, align 8
  %760 = add i64 %759, -12
  %761 = load i64, i64* %PC, align 8
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC, align 8
  %763 = inttoptr i64 %760 to i32*
  %764 = load i32, i32* %763, align 4
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RDI, align 8, !tbaa !2428
  %766 = add i64 %761, -181
  %767 = add i64 %761, 8
  %768 = load i64, i64* %RSP, align 8, !tbaa !2428
  %769 = add i64 %768, -8
  %770 = inttoptr i64 %769 to i64*
  store i64 %767, i64* %770, align 8
  store i64 %769, i64* %RSP, align 8, !tbaa !2428
  store i64 %766, i64* %PC, align 8, !tbaa !2428
  %771 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %766, %struct.Memory* %MEMORY.0)
  %772 = load i64, i64* %RBP, align 8
  %773 = add i64 %772, -8
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %773 to i64*
  %777 = load i64, i64* %776, align 8
  store i64 %777, i64* %RAX, align 8, !tbaa !2428
  %778 = add i64 %777, 4
  store i64 %778, i64* %RCX, align 8, !tbaa !2428
  %779 = icmp ugt i64 %777, -5
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %4, align 1, !tbaa !2432
  %781 = trunc i64 %778 to i32
  %782 = and i32 %781, 255
  %783 = tail call i32 @llvm.ctpop.i32(i32 %782) #8
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  %786 = xor i8 %785, 1
  store i8 %786, i8* %5, align 1, !tbaa !2446
  %787 = xor i64 %777, %778
  %788 = lshr i64 %787, 4
  %789 = trunc i64 %788 to i8
  %790 = and i8 %789, 1
  store i8 %790, i8* %6, align 1, !tbaa !2447
  %791 = icmp eq i64 %778, 0
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %7, align 1, !tbaa !2448
  %793 = lshr i64 %778, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %8, align 1, !tbaa !2449
  %795 = lshr i64 %777, 63
  %796 = xor i64 %793, %795
  %797 = add nuw nsw i64 %796, %793
  %798 = icmp eq i64 %797, 2
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %9, align 1, !tbaa !2450
  %800 = add i64 %774, 15
  store i64 %800, i64* %PC, align 8
  store i64 %778, i64* %776, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %801 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %802 = inttoptr i64 %801 to i32*
  store i32 25, i32* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -12
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %805, -1331
  %811 = add i64 %805, 8
  %812 = load i64, i64* %RSP, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %811, i64* %814, align 8
  store i64 %813, i64* %RSP, align 8, !tbaa !2428
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  %815 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %810, %struct.Memory* %MEMORY.0)
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -8
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = add i64 %821, 4
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = icmp ugt i64 %821, -5
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %4, align 1, !tbaa !2432
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %5, align 1, !tbaa !2446
  %831 = xor i64 %821, %822
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %6, align 1, !tbaa !2447
  %835 = icmp eq i64 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %7, align 1, !tbaa !2448
  %837 = lshr i64 %822, 63
  %838 = trunc i64 %837 to i8
  store i8 %838, i8* %8, align 1, !tbaa !2449
  %839 = lshr i64 %821, 63
  %840 = xor i64 %837, %839
  %841 = add nuw nsw i64 %840, %837
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %9, align 1, !tbaa !2450
  %844 = add i64 %818, 15
  store i64 %844, i64* %PC, align 8
  store i64 %822, i64* %820, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %845 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %846 = inttoptr i64 %845 to i32*
  store i32 7, i32* %846, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40069f

block_400b16:                                     ; preds = %block_400566
  %847 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %848 = inttoptr i64 %847 to i32*
  store i32 30, i32* %848, align 4
  %849 = load i64, i64* %PC, align 8
  %850 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %849, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %850

block_400792:                                     ; preds = %block_400566
  %851 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %852 = inttoptr i64 %851 to i32*
  store i32 12, i32* %852, align 4
  %853 = load i64, i64* %PC, align 8
  %854 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %853, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %854

block_40088c:                                     ; preds = %block_400566
  %855 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %856 = inttoptr i64 %855 to i32*
  store i32 17, i32* %856, align 4
  %857 = load i64, i64* %PC, align 8
  %858 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %857, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %858

block_400986:                                     ; preds = %block_400566
  %859 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %860 = inttoptr i64 %859 to i32*
  store i32 22, i32* %860, align 4
  %861 = load i64, i64* %PC, align 8
  %862 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %861, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %862

block_400602:                                     ; preds = %block_400566
  %863 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %864 = inttoptr i64 %863 to i32*
  store i32 4, i32* %864, align 4
  %865 = load i64, i64* %PC, align 8
  %866 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %865, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %866

block_400a80:                                     ; preds = %block_400566
  %867 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %868 = inttoptr i64 %867 to i32*
  store i32 27, i32* %868, align 4
  %869 = load i64, i64* %PC, align 8
  %870 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %869, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %870

; <label>:871:                                    ; preds = %block_400566
  %872 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %872
}

; Function Attrs: noinline
define %struct.Memory* @sub_40095b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40095b

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_40095b
  %.sink18 = phi i64 [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1051, %block_40095b ]
  %MEMORY.0 = phi %struct.Memory* [ %901, %block_400b16 ], [ %857, %block_400698 ], [ %813, %block_400a1c ], [ %765, %block_40059e ], [ %721, %block_400922 ], [ %677, %block_400828 ], [ %633, %block_40072e ], [ %589, %block_400ab2 ], [ %545, %block_400634 ], [ %501, %block_4009b8 ], [ %457, %block_40056c ], [ %356, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %312, %block_40095b ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink18
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %951 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40095b:                                     ; preds = %block_400954, %3
  %300 = phi i64 [ %1, %3 ], [ %.pre, %block_400954 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400954 ]
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -12
  %303 = add i64 %300, 3
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i32*
  %305 = load i32, i32* %304, align 4
  %306 = zext i32 %305 to i64
  store i64 %306, i64* %RDI, align 8, !tbaa !2428
  %307 = add i64 %300, -1131
  %308 = add i64 %300, 8
  %309 = load i64, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311, align 8
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  %312 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.1)
  %313 = load i64, i64* %RBP, align 8
  %314 = add i64 %313, -8
  %315 = load i64, i64* %PC, align 8
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %314 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = add i64 %318, 4
  store i64 %319, i64* %RCX, align 8, !tbaa !2428
  %320 = icmp ugt i64 %318, -5
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %4, align 1, !tbaa !2432
  %322 = trunc i64 %319 to i32
  %323 = and i32 %322, 255
  %324 = tail call i32 @llvm.ctpop.i32(i32 %323) #8
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  store i8 %327, i8* %5, align 1, !tbaa !2446
  %328 = xor i64 %318, %319
  %329 = lshr i64 %328, 4
  %330 = trunc i64 %329 to i8
  %331 = and i8 %330, 1
  store i8 %331, i8* %6, align 1, !tbaa !2447
  %332 = icmp eq i64 %319, 0
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %7, align 1, !tbaa !2448
  %334 = lshr i64 %319, 63
  %335 = trunc i64 %334 to i8
  store i8 %335, i8* %8, align 1, !tbaa !2449
  %336 = lshr i64 %318, 63
  %337 = xor i64 %334, %336
  %338 = add nuw nsw i64 %337, %334
  %339 = icmp eq i64 %338, 2
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %9, align 1, !tbaa !2450
  %341 = add i64 %315, 15
  store i64 %341, i64* %PC, align 8
  store i64 %319, i64* %317, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %342 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %343 = inttoptr i64 %342 to i32*
  store i32 16, i32* %343, align 4
  %344 = load i64, i64* %RBP, align 8
  %345 = add i64 %344, -12
  %346 = load i64, i64* %PC, align 8
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %351 = add i64 %346, -881
  %352 = add i64 %346, 8
  %353 = load i64, i64* %RSP, align 8, !tbaa !2428
  %354 = add i64 %353, -8
  %355 = inttoptr i64 %354 to i64*
  store i64 %352, i64* %355, align 8
  store i64 %354, i64* %RSP, align 8, !tbaa !2428
  store i64 %351, i64* %PC, align 8, !tbaa !2428
  %356 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %351, %struct.Memory* %MEMORY.0)
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -8
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = add i64 %362, 4
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = icmp ugt i64 %362, -5
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %4, align 1, !tbaa !2432
  %366 = trunc i64 %363 to i32
  %367 = and i32 %366, 255
  %368 = tail call i32 @llvm.ctpop.i32(i32 %367) #8
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  store i8 %371, i8* %5, align 1, !tbaa !2446
  %372 = xor i64 %362, %363
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  store i8 %375, i8* %6, align 1, !tbaa !2447
  %376 = icmp eq i64 %363, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %7, align 1, !tbaa !2448
  %378 = lshr i64 %363, 63
  %379 = trunc i64 %378 to i8
  store i8 %379, i8* %8, align 1, !tbaa !2449
  %380 = lshr i64 %362, 63
  %381 = xor i64 %378, %380
  %382 = add nuw nsw i64 %381, %378
  %383 = icmp eq i64 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %9, align 1, !tbaa !2450
  %385 = add i64 %359, 15
  store i64 %385, i64* %PC, align 8
  store i64 %363, i64* %361, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %386 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %387 = inttoptr i64 %386 to i32*
  store i32 0, i32* %387, align 4
  %388 = load i64, i64* %RSP, align 8
  %389 = load i64, i64* %PC, align 8
  %390 = add i64 %388, 48
  store i64 %390, i64* %RSP, align 8, !tbaa !2428
  %391 = icmp ugt i64 %388, -49
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %4, align 1, !tbaa !2432
  %393 = trunc i64 %390 to i32
  %394 = and i32 %393, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %5, align 1, !tbaa !2446
  %399 = xor i64 %388, 16
  %400 = xor i64 %399, %390
  %401 = lshr i64 %400, 4
  %402 = trunc i64 %401 to i8
  %403 = and i8 %402, 1
  store i8 %403, i8* %6, align 1, !tbaa !2447
  %404 = icmp eq i64 %390, 0
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %7, align 1, !tbaa !2448
  %406 = lshr i64 %390, 63
  %407 = trunc i64 %406 to i8
  store i8 %407, i8* %8, align 1, !tbaa !2449
  %408 = lshr i64 %388, 63
  %409 = xor i64 %406, %408
  %410 = add nuw nsw i64 %409, %406
  %411 = icmp eq i64 %410, 2
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %9, align 1, !tbaa !2450
  %413 = add i64 %389, 5
  store i64 %413, i64* %PC, align 8
  %414 = add i64 %388, 56
  %415 = inttoptr i64 %390 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %RBP, align 8, !tbaa !2428
  store i64 %414, i64* %RSP, align 8, !tbaa !2428
  %417 = add i64 %389, 6
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %414 to i64*
  %419 = load i64, i64* %418, align 8
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %420 = add i64 %388, 64
  store i64 %420, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %421 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 21, i32* %422, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40095b

block_400a4e:                                     ; preds = %block_400566
  %423 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %424 = inttoptr i64 %423 to i32*
  store i32 26, i32* %424, align 4
  %425 = load i64, i64* %PC, align 8
  %426 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %425, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %426

block_4006ca:                                     ; preds = %block_400566
  %427 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %428 = inttoptr i64 %427 to i32*
  store i32 8, i32* %428, align 4
  %429 = load i64, i64* %PC, align 8
  %430 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %429, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %430

block_400b48:                                     ; preds = %block_400566
  %431 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %432 = inttoptr i64 %431 to i32*
  store i32 31, i32* %432, align 4
  %433 = load i64, i64* %PC, align 8
  %434 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %433, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %434

block_4007c4:                                     ; preds = %block_400566
  %435 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %436 = inttoptr i64 %435 to i32*
  store i32 13, i32* %436, align 4
  %437 = load i64, i64* %PC, align 8
  %438 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %437, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %438

block_4008be:                                     ; preds = %block_400566
  %439 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %440 = inttoptr i64 %439 to i32*
  store i32 18, i32* %440, align 4
  %441 = load i64, i64* %PC, align 8
  %442 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %441, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %442

block_40056c:                                     ; preds = %block_400566
  %443 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %444 = inttoptr i64 %443 to i32*
  store i32 1, i32* %444, align 4
  %445 = load i64, i64* %RBP, align 8
  %446 = add i64 %445, -12
  %447 = load i64, i64* %PC, align 8
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %RDI, align 8, !tbaa !2428
  %452 = add i64 %447, -131
  %453 = add i64 %447, 8
  %454 = load i64, i64* %RSP, align 8, !tbaa !2428
  %455 = add i64 %454, -8
  %456 = inttoptr i64 %455 to i64*
  store i64 %453, i64* %456, align 8
  store i64 %455, i64* %RSP, align 8, !tbaa !2428
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  %457 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %452, %struct.Memory* %MEMORY.0)
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -8
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = add i64 %463, 4
  store i64 %464, i64* %RCX, align 8, !tbaa !2428
  %465 = icmp ugt i64 %463, -5
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %4, align 1, !tbaa !2432
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #8
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %5, align 1, !tbaa !2446
  %473 = xor i64 %463, %464
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %6, align 1, !tbaa !2447
  %477 = icmp eq i64 %464, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %7, align 1, !tbaa !2448
  %479 = lshr i64 %464, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %8, align 1, !tbaa !2449
  %481 = lshr i64 %463, 63
  %482 = xor i64 %479, %481
  %483 = add nuw nsw i64 %482, %479
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %9, align 1, !tbaa !2450
  %486 = add i64 %460, 15
  store i64 %486, i64* %PC, align 8
  store i64 %464, i64* %462, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %487 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %488 = inttoptr i64 %487 to i32*
  store i32 23, i32* %488, align 4
  %489 = load i64, i64* %RBP, align 8
  %490 = add i64 %489, -12
  %491 = load i64, i64* %PC, align 8
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RDI, align 8, !tbaa !2428
  %496 = add i64 %491, -1231
  %497 = add i64 %491, 8
  %498 = load i64, i64* %RSP, align 8, !tbaa !2428
  %499 = add i64 %498, -8
  %500 = inttoptr i64 %499 to i64*
  store i64 %497, i64* %500, align 8
  store i64 %499, i64* %RSP, align 8, !tbaa !2428
  store i64 %496, i64* %PC, align 8, !tbaa !2428
  %501 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %496, %struct.Memory* %MEMORY.0)
  %502 = load i64, i64* %RBP, align 8
  %503 = add i64 %502, -8
  %504 = load i64, i64* %PC, align 8
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = add i64 %507, 4
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = icmp ugt i64 %507, -5
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %4, align 1, !tbaa !2432
  %511 = trunc i64 %508 to i32
  %512 = and i32 %511, 255
  %513 = tail call i32 @llvm.ctpop.i32(i32 %512) #8
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  %516 = xor i8 %515, 1
  store i8 %516, i8* %5, align 1, !tbaa !2446
  %517 = xor i64 %507, %508
  %518 = lshr i64 %517, 4
  %519 = trunc i64 %518 to i8
  %520 = and i8 %519, 1
  store i8 %520, i8* %6, align 1, !tbaa !2447
  %521 = icmp eq i64 %508, 0
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %7, align 1, !tbaa !2448
  %523 = lshr i64 %508, 63
  %524 = trunc i64 %523 to i8
  store i8 %524, i8* %8, align 1, !tbaa !2449
  %525 = lshr i64 %507, 63
  %526 = xor i64 %523, %525
  %527 = add nuw nsw i64 %526, %523
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %9, align 1, !tbaa !2450
  %530 = add i64 %504, 15
  store i64 %530, i64* %PC, align 8
  store i64 %508, i64* %506, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %531 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %532 = inttoptr i64 %531 to i32*
  store i32 5, i32* %532, align 4
  %533 = load i64, i64* %RBP, align 8
  %534 = add i64 %533, -12
  %535 = load i64, i64* %PC, align 8
  %536 = add i64 %535, 3
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %534 to i32*
  %538 = load i32, i32* %537, align 4
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %RDI, align 8, !tbaa !2428
  %540 = add i64 %535, -331
  %541 = add i64 %535, 8
  %542 = load i64, i64* %RSP, align 8, !tbaa !2428
  %543 = add i64 %542, -8
  %544 = inttoptr i64 %543 to i64*
  store i64 %541, i64* %544, align 8
  store i64 %543, i64* %RSP, align 8, !tbaa !2428
  store i64 %540, i64* %PC, align 8, !tbaa !2428
  %545 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %540, %struct.Memory* %MEMORY.0)
  %546 = load i64, i64* %RBP, align 8
  %547 = add i64 %546, -8
  %548 = load i64, i64* %PC, align 8
  %549 = add i64 %548, 4
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %547 to i64*
  %551 = load i64, i64* %550, align 8
  store i64 %551, i64* %RAX, align 8, !tbaa !2428
  %552 = add i64 %551, 4
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  %553 = icmp ugt i64 %551, -5
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %4, align 1, !tbaa !2432
  %555 = trunc i64 %552 to i32
  %556 = and i32 %555, 255
  %557 = tail call i32 @llvm.ctpop.i32(i32 %556) #8
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  store i8 %560, i8* %5, align 1, !tbaa !2446
  %561 = xor i64 %551, %552
  %562 = lshr i64 %561, 4
  %563 = trunc i64 %562 to i8
  %564 = and i8 %563, 1
  store i8 %564, i8* %6, align 1, !tbaa !2447
  %565 = icmp eq i64 %552, 0
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %7, align 1, !tbaa !2448
  %567 = lshr i64 %552, 63
  %568 = trunc i64 %567 to i8
  store i8 %568, i8* %8, align 1, !tbaa !2449
  %569 = lshr i64 %551, 63
  %570 = xor i64 %567, %569
  %571 = add nuw nsw i64 %570, %567
  %572 = icmp eq i64 %571, 2
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %9, align 1, !tbaa !2450
  %574 = add i64 %548, 15
  store i64 %574, i64* %PC, align 8
  store i64 %552, i64* %550, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %575 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %576 = inttoptr i64 %575 to i32*
  store i32 28, i32* %576, align 4
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -12
  %579 = load i64, i64* %PC, align 8
  %580 = add i64 %579, 3
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %578 to i32*
  %582 = load i32, i32* %581, align 4
  %583 = zext i32 %582 to i64
  store i64 %583, i64* %RDI, align 8, !tbaa !2428
  %584 = add i64 %579, -1481
  %585 = add i64 %579, 8
  %586 = load i64, i64* %RSP, align 8, !tbaa !2428
  %587 = add i64 %586, -8
  %588 = inttoptr i64 %587 to i64*
  store i64 %585, i64* %588, align 8
  store i64 %587, i64* %RSP, align 8, !tbaa !2428
  store i64 %584, i64* %PC, align 8, !tbaa !2428
  %589 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %584, %struct.Memory* %MEMORY.0)
  %590 = load i64, i64* %RBP, align 8
  %591 = add i64 %590, -8
  %592 = load i64, i64* %PC, align 8
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %591 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = add i64 %595, 4
  store i64 %596, i64* %RCX, align 8, !tbaa !2428
  %597 = icmp ugt i64 %595, -5
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %4, align 1, !tbaa !2432
  %599 = trunc i64 %596 to i32
  %600 = and i32 %599, 255
  %601 = tail call i32 @llvm.ctpop.i32(i32 %600) #8
  %602 = trunc i32 %601 to i8
  %603 = and i8 %602, 1
  %604 = xor i8 %603, 1
  store i8 %604, i8* %5, align 1, !tbaa !2446
  %605 = xor i64 %595, %596
  %606 = lshr i64 %605, 4
  %607 = trunc i64 %606 to i8
  %608 = and i8 %607, 1
  store i8 %608, i8* %6, align 1, !tbaa !2447
  %609 = icmp eq i64 %596, 0
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %7, align 1, !tbaa !2448
  %611 = lshr i64 %596, 63
  %612 = trunc i64 %611 to i8
  store i8 %612, i8* %8, align 1, !tbaa !2449
  %613 = lshr i64 %595, 63
  %614 = xor i64 %611, %613
  %615 = add nuw nsw i64 %614, %611
  %616 = icmp eq i64 %615, 2
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %9, align 1, !tbaa !2450
  %618 = add i64 %592, 15
  store i64 %618, i64* %PC, align 8
  store i64 %596, i64* %594, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %619 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %620 = inttoptr i64 %619 to i32*
  store i32 10, i32* %620, align 4
  %621 = load i64, i64* %RBP, align 8
  %622 = add i64 %621, -12
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, 3
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  store i64 %627, i64* %RDI, align 8, !tbaa !2428
  %628 = add i64 %623, -581
  %629 = add i64 %623, 8
  %630 = load i64, i64* %RSP, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %629, i64* %632, align 8
  store i64 %631, i64* %RSP, align 8, !tbaa !2428
  store i64 %628, i64* %PC, align 8, !tbaa !2428
  %633 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %628, %struct.Memory* %MEMORY.0)
  %634 = load i64, i64* %RBP, align 8
  %635 = add i64 %634, -8
  %636 = load i64, i64* %PC, align 8
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638, align 8
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = add i64 %639, 4
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %641 = icmp ugt i64 %639, -5
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %4, align 1, !tbaa !2432
  %643 = trunc i64 %640 to i32
  %644 = and i32 %643, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #8
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %5, align 1, !tbaa !2446
  %649 = xor i64 %639, %640
  %650 = lshr i64 %649, 4
  %651 = trunc i64 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %6, align 1, !tbaa !2447
  %653 = icmp eq i64 %640, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %7, align 1, !tbaa !2448
  %655 = lshr i64 %640, 63
  %656 = trunc i64 %655 to i8
  store i8 %656, i8* %8, align 1, !tbaa !2449
  %657 = lshr i64 %639, 63
  %658 = xor i64 %655, %657
  %659 = add nuw nsw i64 %658, %655
  %660 = icmp eq i64 %659, 2
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %9, align 1, !tbaa !2450
  %662 = add i64 %636, 15
  store i64 %662, i64* %PC, align 8
  store i64 %640, i64* %638, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %663 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %664 = inttoptr i64 %663 to i32*
  store i32 15, i32* %664, align 4
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -12
  %667 = load i64, i64* %PC, align 8
  %668 = add i64 %667, 3
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %666 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = zext i32 %670 to i64
  store i64 %671, i64* %RDI, align 8, !tbaa !2428
  %672 = add i64 %667, -831
  %673 = add i64 %667, 8
  %674 = load i64, i64* %RSP, align 8, !tbaa !2428
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %673, i64* %676, align 8
  store i64 %675, i64* %RSP, align 8, !tbaa !2428
  store i64 %672, i64* %PC, align 8, !tbaa !2428
  %677 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %672, %struct.Memory* %MEMORY.0)
  %678 = load i64, i64* %RBP, align 8
  %679 = add i64 %678, -8
  %680 = load i64, i64* %PC, align 8
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %679 to i64*
  %683 = load i64, i64* %682, align 8
  store i64 %683, i64* %RAX, align 8, !tbaa !2428
  %684 = add i64 %683, 4
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %685 = icmp ugt i64 %683, -5
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %4, align 1, !tbaa !2432
  %687 = trunc i64 %684 to i32
  %688 = and i32 %687, 255
  %689 = tail call i32 @llvm.ctpop.i32(i32 %688) #8
  %690 = trunc i32 %689 to i8
  %691 = and i8 %690, 1
  %692 = xor i8 %691, 1
  store i8 %692, i8* %5, align 1, !tbaa !2446
  %693 = xor i64 %683, %684
  %694 = lshr i64 %693, 4
  %695 = trunc i64 %694 to i8
  %696 = and i8 %695, 1
  store i8 %696, i8* %6, align 1, !tbaa !2447
  %697 = icmp eq i64 %684, 0
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %7, align 1, !tbaa !2448
  %699 = lshr i64 %684, 63
  %700 = trunc i64 %699 to i8
  store i8 %700, i8* %8, align 1, !tbaa !2449
  %701 = lshr i64 %683, 63
  %702 = xor i64 %699, %701
  %703 = add nuw nsw i64 %702, %699
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %9, align 1, !tbaa !2450
  %706 = add i64 %680, 15
  store i64 %706, i64* %PC, align 8
  store i64 %684, i64* %682, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %707 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %708 = inttoptr i64 %707 to i32*
  store i32 20, i32* %708, align 4
  %709 = load i64, i64* %RBP, align 8
  %710 = add i64 %709, -12
  %711 = load i64, i64* %PC, align 8
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %710 to i32*
  %714 = load i32, i32* %713, align 4
  %715 = zext i32 %714 to i64
  store i64 %715, i64* %RDI, align 8, !tbaa !2428
  %716 = add i64 %711, -1081
  %717 = add i64 %711, 8
  %718 = load i64, i64* %RSP, align 8, !tbaa !2428
  %719 = add i64 %718, -8
  %720 = inttoptr i64 %719 to i64*
  store i64 %717, i64* %720, align 8
  store i64 %719, i64* %RSP, align 8, !tbaa !2428
  store i64 %716, i64* %PC, align 8, !tbaa !2428
  %721 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %716, %struct.Memory* %MEMORY.0)
  %722 = load i64, i64* %RBP, align 8
  %723 = add i64 %722, -8
  %724 = load i64, i64* %PC, align 8
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %723 to i64*
  %727 = load i64, i64* %726, align 8
  store i64 %727, i64* %RAX, align 8, !tbaa !2428
  %728 = add i64 %727, 4
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = icmp ugt i64 %727, -5
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %4, align 1, !tbaa !2432
  %731 = trunc i64 %728 to i32
  %732 = and i32 %731, 255
  %733 = tail call i32 @llvm.ctpop.i32(i32 %732) #8
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  store i8 %736, i8* %5, align 1, !tbaa !2446
  %737 = xor i64 %727, %728
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  store i8 %740, i8* %6, align 1, !tbaa !2447
  %741 = icmp eq i64 %728, 0
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %7, align 1, !tbaa !2448
  %743 = lshr i64 %728, 63
  %744 = trunc i64 %743 to i8
  store i8 %744, i8* %8, align 1, !tbaa !2449
  %745 = lshr i64 %727, 63
  %746 = xor i64 %743, %745
  %747 = add nuw nsw i64 %746, %743
  %748 = icmp eq i64 %747, 2
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %9, align 1, !tbaa !2450
  %750 = add i64 %724, 15
  store i64 %750, i64* %PC, align 8
  store i64 %728, i64* %726, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %751 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %752 = inttoptr i64 %751 to i32*
  store i32 2, i32* %752, align 4
  %753 = load i64, i64* %RBP, align 8
  %754 = add i64 %753, -12
  %755 = load i64, i64* %PC, align 8
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC, align 8
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757, align 4
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RDI, align 8, !tbaa !2428
  %760 = add i64 %755, -181
  %761 = add i64 %755, 8
  %762 = load i64, i64* %RSP, align 8, !tbaa !2428
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %764, align 8
  store i64 %763, i64* %RSP, align 8, !tbaa !2428
  store i64 %760, i64* %PC, align 8, !tbaa !2428
  %765 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %760, %struct.Memory* %MEMORY.0)
  %766 = load i64, i64* %RBP, align 8
  %767 = add i64 %766, -8
  %768 = load i64, i64* %PC, align 8
  %769 = add i64 %768, 4
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %767 to i64*
  %771 = load i64, i64* %770, align 8
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = add i64 %771, 4
  store i64 %772, i64* %RCX, align 8, !tbaa !2428
  %773 = icmp ugt i64 %771, -5
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %4, align 1, !tbaa !2432
  %775 = trunc i64 %772 to i32
  %776 = and i32 %775, 255
  %777 = tail call i32 @llvm.ctpop.i32(i32 %776) #8
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  store i8 %780, i8* %5, align 1, !tbaa !2446
  %781 = xor i64 %771, %772
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  store i8 %784, i8* %6, align 1, !tbaa !2447
  %785 = icmp eq i64 %772, 0
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %7, align 1, !tbaa !2448
  %787 = lshr i64 %772, 63
  %788 = trunc i64 %787 to i8
  store i8 %788, i8* %8, align 1, !tbaa !2449
  %789 = lshr i64 %771, 63
  %790 = xor i64 %787, %789
  %791 = add nuw nsw i64 %790, %787
  %792 = icmp eq i64 %791, 2
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %9, align 1, !tbaa !2450
  %794 = add i64 %768, 15
  store i64 %794, i64* %PC, align 8
  store i64 %772, i64* %770, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %795 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %796 = inttoptr i64 %795 to i32*
  store i32 3, i32* %796, align 4
  %797 = load i64, i64* %PC, align 8
  %798 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %797, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %798

block_400a1c:                                     ; preds = %block_400566
  %799 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %800 = inttoptr i64 %799 to i32*
  store i32 25, i32* %800, align 4
  %801 = load i64, i64* %RBP, align 8
  %802 = add i64 %801, -12
  %803 = load i64, i64* %PC, align 8
  %804 = add i64 %803, 3
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %802 to i32*
  %806 = load i32, i32* %805, align 4
  %807 = zext i32 %806 to i64
  store i64 %807, i64* %RDI, align 8, !tbaa !2428
  %808 = add i64 %803, -1331
  %809 = add i64 %803, 8
  %810 = load i64, i64* %RSP, align 8, !tbaa !2428
  %811 = add i64 %810, -8
  %812 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %812, align 8
  store i64 %811, i64* %RSP, align 8, !tbaa !2428
  store i64 %808, i64* %PC, align 8, !tbaa !2428
  %813 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %808, %struct.Memory* %MEMORY.0)
  %814 = load i64, i64* %RBP, align 8
  %815 = add i64 %814, -8
  %816 = load i64, i64* %PC, align 8
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC, align 8
  %818 = inttoptr i64 %815 to i64*
  %819 = load i64, i64* %818, align 8
  store i64 %819, i64* %RAX, align 8, !tbaa !2428
  %820 = add i64 %819, 4
  store i64 %820, i64* %RCX, align 8, !tbaa !2428
  %821 = icmp ugt i64 %819, -5
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %4, align 1, !tbaa !2432
  %823 = trunc i64 %820 to i32
  %824 = and i32 %823, 255
  %825 = tail call i32 @llvm.ctpop.i32(i32 %824) #8
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  store i8 %828, i8* %5, align 1, !tbaa !2446
  %829 = xor i64 %819, %820
  %830 = lshr i64 %829, 4
  %831 = trunc i64 %830 to i8
  %832 = and i8 %831, 1
  store i8 %832, i8* %6, align 1, !tbaa !2447
  %833 = icmp eq i64 %820, 0
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %7, align 1, !tbaa !2448
  %835 = lshr i64 %820, 63
  %836 = trunc i64 %835 to i8
  store i8 %836, i8* %8, align 1, !tbaa !2449
  %837 = lshr i64 %819, 63
  %838 = xor i64 %835, %837
  %839 = add nuw nsw i64 %838, %835
  %840 = icmp eq i64 %839, 2
  %841 = zext i1 %840 to i8
  store i8 %841, i8* %9, align 1, !tbaa !2450
  %842 = add i64 %816, 15
  store i64 %842, i64* %PC, align 8
  store i64 %820, i64* %818, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %843 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %844 = inttoptr i64 %843 to i32*
  store i32 7, i32* %844, align 4
  %845 = load i64, i64* %RBP, align 8
  %846 = add i64 %845, -12
  %847 = load i64, i64* %PC, align 8
  %848 = add i64 %847, 3
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %846 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = zext i32 %850 to i64
  store i64 %851, i64* %RDI, align 8, !tbaa !2428
  %852 = add i64 %847, -431
  %853 = add i64 %847, 8
  %854 = load i64, i64* %RSP, align 8, !tbaa !2428
  %855 = add i64 %854, -8
  %856 = inttoptr i64 %855 to i64*
  store i64 %853, i64* %856, align 8
  store i64 %855, i64* %RSP, align 8, !tbaa !2428
  store i64 %852, i64* %PC, align 8, !tbaa !2428
  %857 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %852, %struct.Memory* %MEMORY.0)
  %858 = load i64, i64* %RBP, align 8
  %859 = add i64 %858, -8
  %860 = load i64, i64* %PC, align 8
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %859 to i64*
  %863 = load i64, i64* %862, align 8
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = add i64 %863, 4
  store i64 %864, i64* %RCX, align 8, !tbaa !2428
  %865 = icmp ugt i64 %863, -5
  %866 = zext i1 %865 to i8
  store i8 %866, i8* %4, align 1, !tbaa !2432
  %867 = trunc i64 %864 to i32
  %868 = and i32 %867, 255
  %869 = tail call i32 @llvm.ctpop.i32(i32 %868) #8
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  store i8 %872, i8* %5, align 1, !tbaa !2446
  %873 = xor i64 %863, %864
  %874 = lshr i64 %873, 4
  %875 = trunc i64 %874 to i8
  %876 = and i8 %875, 1
  store i8 %876, i8* %6, align 1, !tbaa !2447
  %877 = icmp eq i64 %864, 0
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %7, align 1, !tbaa !2448
  %879 = lshr i64 %864, 63
  %880 = trunc i64 %879 to i8
  store i8 %880, i8* %8, align 1, !tbaa !2449
  %881 = lshr i64 %863, 63
  %882 = xor i64 %879, %881
  %883 = add nuw nsw i64 %882, %879
  %884 = icmp eq i64 %883, 2
  %885 = zext i1 %884 to i8
  store i8 %885, i8* %9, align 1, !tbaa !2450
  %886 = add i64 %860, 15
  store i64 %886, i64* %PC, align 8
  store i64 %864, i64* %862, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %887 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %888 = inttoptr i64 %887 to i32*
  store i32 30, i32* %888, align 4
  %889 = load i64, i64* %RBP, align 8
  %890 = add i64 %889, -12
  %891 = load i64, i64* %PC, align 8
  %892 = add i64 %891, 3
  store i64 %892, i64* %PC, align 8
  %893 = inttoptr i64 %890 to i32*
  %894 = load i32, i32* %893, align 4
  %895 = zext i32 %894 to i64
  store i64 %895, i64* %RDI, align 8, !tbaa !2428
  %896 = add i64 %891, -1581
  %897 = add i64 %891, 8
  %898 = load i64, i64* %RSP, align 8, !tbaa !2428
  %899 = add i64 %898, -8
  %900 = inttoptr i64 %899 to i64*
  store i64 %897, i64* %900, align 8
  store i64 %899, i64* %RSP, align 8, !tbaa !2428
  store i64 %896, i64* %PC, align 8, !tbaa !2428
  %901 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %896, %struct.Memory* %MEMORY.0)
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -8
  %904 = load i64, i64* %PC, align 8
  %905 = add i64 %904, 4
  store i64 %905, i64* %PC, align 8
  %906 = inttoptr i64 %903 to i64*
  %907 = load i64, i64* %906, align 8
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = add i64 %907, 4
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %909 = icmp ugt i64 %907, -5
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %4, align 1, !tbaa !2432
  %911 = trunc i64 %908 to i32
  %912 = and i32 %911, 255
  %913 = tail call i32 @llvm.ctpop.i32(i32 %912) #8
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = xor i8 %915, 1
  store i8 %916, i8* %5, align 1, !tbaa !2446
  %917 = xor i64 %907, %908
  %918 = lshr i64 %917, 4
  %919 = trunc i64 %918 to i8
  %920 = and i8 %919, 1
  store i8 %920, i8* %6, align 1, !tbaa !2447
  %921 = icmp eq i64 %908, 0
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %7, align 1, !tbaa !2448
  %923 = lshr i64 %908, 63
  %924 = trunc i64 %923 to i8
  store i8 %924, i8* %8, align 1, !tbaa !2449
  %925 = lshr i64 %907, 63
  %926 = xor i64 %923, %925
  %927 = add nuw nsw i64 %926, %923
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %9, align 1, !tbaa !2450
  %930 = add i64 %904, 15
  store i64 %930, i64* %PC, align 8
  store i64 %908, i64* %906, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %931 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %932 = inttoptr i64 %931 to i32*
  store i32 12, i32* %932, align 4
  %933 = load i64, i64* %PC, align 8
  %934 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %933, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %934

block_40088c:                                     ; preds = %block_400566
  %935 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %936 = inttoptr i64 %935 to i32*
  store i32 17, i32* %936, align 4
  %937 = load i64, i64* %PC, align 8
  %938 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %937, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %938

block_400986:                                     ; preds = %block_400566
  %939 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %940 = inttoptr i64 %939 to i32*
  store i32 22, i32* %940, align 4
  %941 = load i64, i64* %PC, align 8
  %942 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %941, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %942

block_400602:                                     ; preds = %block_400566
  %943 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %944 = inttoptr i64 %943 to i32*
  store i32 4, i32* %944, align 4
  %945 = load i64, i64* %PC, align 8
  %946 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %945, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %946

block_400a80:                                     ; preds = %block_400566
  %947 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %948 = inttoptr i64 %947 to i32*
  store i32 27, i32* %948, align 4
  %949 = load i64, i64* %PC, align 8
  %950 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %949, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %950

; <label>:951:                                    ; preds = %block_400566
  %952 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %952
}

; Function Attrs: noinline
define %struct.Memory* @sub_400799(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400799

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_400799
  %.sink17 = phi i64 [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 601, %block_400799 ]
  %MEMORY.0 = phi %struct.Memory* [ %943, %block_400b16 ], [ %899, %block_400698 ], [ %813, %block_400a1c ], [ %765, %block_40059e ], [ %721, %block_400922 ], [ %677, %block_400828 ], [ %633, %block_40072e ], [ %589, %block_400ab2 ], [ %545, %block_400634 ], [ %501, %block_4009b8 ], [ %457, %block_40056c ], [ %393, %block_400954 ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %855, %block_400799 ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink17
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %991 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RSP, align 8
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %346, 48
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %349 = icmp ugt i64 %346, -49
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %4, align 1, !tbaa !2432
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %5, align 1, !tbaa !2446
  %357 = xor i64 %346, 16
  %358 = xor i64 %357, %348
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %6, align 1, !tbaa !2447
  %362 = icmp eq i64 %348, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %7, align 1, !tbaa !2448
  %364 = lshr i64 %348, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %8, align 1, !tbaa !2449
  %366 = lshr i64 %346, 63
  %367 = xor i64 %364, %366
  %368 = add nuw nsw i64 %367, %364
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %9, align 1, !tbaa !2450
  %371 = add i64 %347, 5
  store i64 %371, i64* %PC, align 8
  %372 = add i64 %346, 56
  %373 = inttoptr i64 %348 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBP, align 8, !tbaa !2428
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %347, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %372 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %378 = add i64 %346, 64
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %379 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %380 = inttoptr i64 %379 to i32*
  store i32 21, i32* %380, align 4
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -12
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385, align 4
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %388 = add i64 %383, -1131
  %389 = add i64 %383, 8
  %390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392, align 8
  store i64 %391, i64* %RSP, align 8, !tbaa !2428
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %393 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %388, %struct.Memory* %MEMORY.0)
  %394 = load i64, i64* %RBP, align 8
  %395 = add i64 %394, -8
  %396 = load i64, i64* %PC, align 8
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = add i64 %399, 4
  store i64 %400, i64* %RCX, align 8, !tbaa !2428
  %401 = icmp ugt i64 %399, -5
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %4, align 1, !tbaa !2432
  %403 = trunc i64 %400 to i32
  %404 = and i32 %403, 255
  %405 = tail call i32 @llvm.ctpop.i32(i32 %404) #8
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  store i8 %408, i8* %5, align 1, !tbaa !2446
  %409 = xor i64 %399, %400
  %410 = lshr i64 %409, 4
  %411 = trunc i64 %410 to i8
  %412 = and i8 %411, 1
  store i8 %412, i8* %6, align 1, !tbaa !2447
  %413 = icmp eq i64 %400, 0
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %7, align 1, !tbaa !2448
  %415 = lshr i64 %400, 63
  %416 = trunc i64 %415 to i8
  store i8 %416, i8* %8, align 1, !tbaa !2449
  %417 = lshr i64 %399, 63
  %418 = xor i64 %415, %417
  %419 = add nuw nsw i64 %418, %415
  %420 = icmp eq i64 %419, 2
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %9, align 1, !tbaa !2450
  %422 = add i64 %396, 15
  store i64 %422, i64* %PC, align 8
  store i64 %400, i64* %398, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %423 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %424 = inttoptr i64 %423 to i32*
  store i32 26, i32* %424, align 4
  %425 = load i64, i64* %PC, align 8
  %426 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %425, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %426

block_4006ca:                                     ; preds = %block_400566
  %427 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %428 = inttoptr i64 %427 to i32*
  store i32 8, i32* %428, align 4
  %429 = load i64, i64* %PC, align 8
  %430 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %429, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %430

block_400b48:                                     ; preds = %block_400566
  %431 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %432 = inttoptr i64 %431 to i32*
  store i32 31, i32* %432, align 4
  %433 = load i64, i64* %PC, align 8
  %434 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %433, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %434

block_4007c4:                                     ; preds = %block_400566
  %435 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %436 = inttoptr i64 %435 to i32*
  store i32 13, i32* %436, align 4
  %437 = load i64, i64* %PC, align 8
  %438 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %437, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %438

block_4008be:                                     ; preds = %block_400566
  %439 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %440 = inttoptr i64 %439 to i32*
  store i32 18, i32* %440, align 4
  %441 = load i64, i64* %PC, align 8
  %442 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %441, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %442

block_40056c:                                     ; preds = %block_400566
  %443 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %444 = inttoptr i64 %443 to i32*
  store i32 1, i32* %444, align 4
  %445 = load i64, i64* %RBP, align 8
  %446 = add i64 %445, -12
  %447 = load i64, i64* %PC, align 8
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %RDI, align 8, !tbaa !2428
  %452 = add i64 %447, -131
  %453 = add i64 %447, 8
  %454 = load i64, i64* %RSP, align 8, !tbaa !2428
  %455 = add i64 %454, -8
  %456 = inttoptr i64 %455 to i64*
  store i64 %453, i64* %456, align 8
  store i64 %455, i64* %RSP, align 8, !tbaa !2428
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  %457 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %452, %struct.Memory* %MEMORY.0)
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -8
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = add i64 %463, 4
  store i64 %464, i64* %RCX, align 8, !tbaa !2428
  %465 = icmp ugt i64 %463, -5
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %4, align 1, !tbaa !2432
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #8
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %5, align 1, !tbaa !2446
  %473 = xor i64 %463, %464
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %6, align 1, !tbaa !2447
  %477 = icmp eq i64 %464, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %7, align 1, !tbaa !2448
  %479 = lshr i64 %464, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %8, align 1, !tbaa !2449
  %481 = lshr i64 %463, 63
  %482 = xor i64 %479, %481
  %483 = add nuw nsw i64 %482, %479
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %9, align 1, !tbaa !2450
  %486 = add i64 %460, 15
  store i64 %486, i64* %PC, align 8
  store i64 %464, i64* %462, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %487 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %488 = inttoptr i64 %487 to i32*
  store i32 23, i32* %488, align 4
  %489 = load i64, i64* %RBP, align 8
  %490 = add i64 %489, -12
  %491 = load i64, i64* %PC, align 8
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RDI, align 8, !tbaa !2428
  %496 = add i64 %491, -1231
  %497 = add i64 %491, 8
  %498 = load i64, i64* %RSP, align 8, !tbaa !2428
  %499 = add i64 %498, -8
  %500 = inttoptr i64 %499 to i64*
  store i64 %497, i64* %500, align 8
  store i64 %499, i64* %RSP, align 8, !tbaa !2428
  store i64 %496, i64* %PC, align 8, !tbaa !2428
  %501 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %496, %struct.Memory* %MEMORY.0)
  %502 = load i64, i64* %RBP, align 8
  %503 = add i64 %502, -8
  %504 = load i64, i64* %PC, align 8
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = add i64 %507, 4
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = icmp ugt i64 %507, -5
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %4, align 1, !tbaa !2432
  %511 = trunc i64 %508 to i32
  %512 = and i32 %511, 255
  %513 = tail call i32 @llvm.ctpop.i32(i32 %512) #8
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  %516 = xor i8 %515, 1
  store i8 %516, i8* %5, align 1, !tbaa !2446
  %517 = xor i64 %507, %508
  %518 = lshr i64 %517, 4
  %519 = trunc i64 %518 to i8
  %520 = and i8 %519, 1
  store i8 %520, i8* %6, align 1, !tbaa !2447
  %521 = icmp eq i64 %508, 0
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %7, align 1, !tbaa !2448
  %523 = lshr i64 %508, 63
  %524 = trunc i64 %523 to i8
  store i8 %524, i8* %8, align 1, !tbaa !2449
  %525 = lshr i64 %507, 63
  %526 = xor i64 %523, %525
  %527 = add nuw nsw i64 %526, %523
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %9, align 1, !tbaa !2450
  %530 = add i64 %504, 15
  store i64 %530, i64* %PC, align 8
  store i64 %508, i64* %506, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %531 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %532 = inttoptr i64 %531 to i32*
  store i32 5, i32* %532, align 4
  %533 = load i64, i64* %RBP, align 8
  %534 = add i64 %533, -12
  %535 = load i64, i64* %PC, align 8
  %536 = add i64 %535, 3
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %534 to i32*
  %538 = load i32, i32* %537, align 4
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %RDI, align 8, !tbaa !2428
  %540 = add i64 %535, -331
  %541 = add i64 %535, 8
  %542 = load i64, i64* %RSP, align 8, !tbaa !2428
  %543 = add i64 %542, -8
  %544 = inttoptr i64 %543 to i64*
  store i64 %541, i64* %544, align 8
  store i64 %543, i64* %RSP, align 8, !tbaa !2428
  store i64 %540, i64* %PC, align 8, !tbaa !2428
  %545 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %540, %struct.Memory* %MEMORY.0)
  %546 = load i64, i64* %RBP, align 8
  %547 = add i64 %546, -8
  %548 = load i64, i64* %PC, align 8
  %549 = add i64 %548, 4
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %547 to i64*
  %551 = load i64, i64* %550, align 8
  store i64 %551, i64* %RAX, align 8, !tbaa !2428
  %552 = add i64 %551, 4
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  %553 = icmp ugt i64 %551, -5
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %4, align 1, !tbaa !2432
  %555 = trunc i64 %552 to i32
  %556 = and i32 %555, 255
  %557 = tail call i32 @llvm.ctpop.i32(i32 %556) #8
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  store i8 %560, i8* %5, align 1, !tbaa !2446
  %561 = xor i64 %551, %552
  %562 = lshr i64 %561, 4
  %563 = trunc i64 %562 to i8
  %564 = and i8 %563, 1
  store i8 %564, i8* %6, align 1, !tbaa !2447
  %565 = icmp eq i64 %552, 0
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %7, align 1, !tbaa !2448
  %567 = lshr i64 %552, 63
  %568 = trunc i64 %567 to i8
  store i8 %568, i8* %8, align 1, !tbaa !2449
  %569 = lshr i64 %551, 63
  %570 = xor i64 %567, %569
  %571 = add nuw nsw i64 %570, %567
  %572 = icmp eq i64 %571, 2
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %9, align 1, !tbaa !2450
  %574 = add i64 %548, 15
  store i64 %574, i64* %PC, align 8
  store i64 %552, i64* %550, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %575 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %576 = inttoptr i64 %575 to i32*
  store i32 28, i32* %576, align 4
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -12
  %579 = load i64, i64* %PC, align 8
  %580 = add i64 %579, 3
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %578 to i32*
  %582 = load i32, i32* %581, align 4
  %583 = zext i32 %582 to i64
  store i64 %583, i64* %RDI, align 8, !tbaa !2428
  %584 = add i64 %579, -1481
  %585 = add i64 %579, 8
  %586 = load i64, i64* %RSP, align 8, !tbaa !2428
  %587 = add i64 %586, -8
  %588 = inttoptr i64 %587 to i64*
  store i64 %585, i64* %588, align 8
  store i64 %587, i64* %RSP, align 8, !tbaa !2428
  store i64 %584, i64* %PC, align 8, !tbaa !2428
  %589 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %584, %struct.Memory* %MEMORY.0)
  %590 = load i64, i64* %RBP, align 8
  %591 = add i64 %590, -8
  %592 = load i64, i64* %PC, align 8
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %591 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = add i64 %595, 4
  store i64 %596, i64* %RCX, align 8, !tbaa !2428
  %597 = icmp ugt i64 %595, -5
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %4, align 1, !tbaa !2432
  %599 = trunc i64 %596 to i32
  %600 = and i32 %599, 255
  %601 = tail call i32 @llvm.ctpop.i32(i32 %600) #8
  %602 = trunc i32 %601 to i8
  %603 = and i8 %602, 1
  %604 = xor i8 %603, 1
  store i8 %604, i8* %5, align 1, !tbaa !2446
  %605 = xor i64 %595, %596
  %606 = lshr i64 %605, 4
  %607 = trunc i64 %606 to i8
  %608 = and i8 %607, 1
  store i8 %608, i8* %6, align 1, !tbaa !2447
  %609 = icmp eq i64 %596, 0
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %7, align 1, !tbaa !2448
  %611 = lshr i64 %596, 63
  %612 = trunc i64 %611 to i8
  store i8 %612, i8* %8, align 1, !tbaa !2449
  %613 = lshr i64 %595, 63
  %614 = xor i64 %611, %613
  %615 = add nuw nsw i64 %614, %611
  %616 = icmp eq i64 %615, 2
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %9, align 1, !tbaa !2450
  %618 = add i64 %592, 15
  store i64 %618, i64* %PC, align 8
  store i64 %596, i64* %594, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %619 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %620 = inttoptr i64 %619 to i32*
  store i32 10, i32* %620, align 4
  %621 = load i64, i64* %RBP, align 8
  %622 = add i64 %621, -12
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, 3
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  store i64 %627, i64* %RDI, align 8, !tbaa !2428
  %628 = add i64 %623, -581
  %629 = add i64 %623, 8
  %630 = load i64, i64* %RSP, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %629, i64* %632, align 8
  store i64 %631, i64* %RSP, align 8, !tbaa !2428
  store i64 %628, i64* %PC, align 8, !tbaa !2428
  %633 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %628, %struct.Memory* %MEMORY.0)
  %634 = load i64, i64* %RBP, align 8
  %635 = add i64 %634, -8
  %636 = load i64, i64* %PC, align 8
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638, align 8
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = add i64 %639, 4
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %641 = icmp ugt i64 %639, -5
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %4, align 1, !tbaa !2432
  %643 = trunc i64 %640 to i32
  %644 = and i32 %643, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #8
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %5, align 1, !tbaa !2446
  %649 = xor i64 %639, %640
  %650 = lshr i64 %649, 4
  %651 = trunc i64 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %6, align 1, !tbaa !2447
  %653 = icmp eq i64 %640, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %7, align 1, !tbaa !2448
  %655 = lshr i64 %640, 63
  %656 = trunc i64 %655 to i8
  store i8 %656, i8* %8, align 1, !tbaa !2449
  %657 = lshr i64 %639, 63
  %658 = xor i64 %655, %657
  %659 = add nuw nsw i64 %658, %655
  %660 = icmp eq i64 %659, 2
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %9, align 1, !tbaa !2450
  %662 = add i64 %636, 15
  store i64 %662, i64* %PC, align 8
  store i64 %640, i64* %638, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %663 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %664 = inttoptr i64 %663 to i32*
  store i32 15, i32* %664, align 4
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -12
  %667 = load i64, i64* %PC, align 8
  %668 = add i64 %667, 3
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %666 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = zext i32 %670 to i64
  store i64 %671, i64* %RDI, align 8, !tbaa !2428
  %672 = add i64 %667, -831
  %673 = add i64 %667, 8
  %674 = load i64, i64* %RSP, align 8, !tbaa !2428
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %673, i64* %676, align 8
  store i64 %675, i64* %RSP, align 8, !tbaa !2428
  store i64 %672, i64* %PC, align 8, !tbaa !2428
  %677 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %672, %struct.Memory* %MEMORY.0)
  %678 = load i64, i64* %RBP, align 8
  %679 = add i64 %678, -8
  %680 = load i64, i64* %PC, align 8
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %679 to i64*
  %683 = load i64, i64* %682, align 8
  store i64 %683, i64* %RAX, align 8, !tbaa !2428
  %684 = add i64 %683, 4
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %685 = icmp ugt i64 %683, -5
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %4, align 1, !tbaa !2432
  %687 = trunc i64 %684 to i32
  %688 = and i32 %687, 255
  %689 = tail call i32 @llvm.ctpop.i32(i32 %688) #8
  %690 = trunc i32 %689 to i8
  %691 = and i8 %690, 1
  %692 = xor i8 %691, 1
  store i8 %692, i8* %5, align 1, !tbaa !2446
  %693 = xor i64 %683, %684
  %694 = lshr i64 %693, 4
  %695 = trunc i64 %694 to i8
  %696 = and i8 %695, 1
  store i8 %696, i8* %6, align 1, !tbaa !2447
  %697 = icmp eq i64 %684, 0
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %7, align 1, !tbaa !2448
  %699 = lshr i64 %684, 63
  %700 = trunc i64 %699 to i8
  store i8 %700, i8* %8, align 1, !tbaa !2449
  %701 = lshr i64 %683, 63
  %702 = xor i64 %699, %701
  %703 = add nuw nsw i64 %702, %699
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %9, align 1, !tbaa !2450
  %706 = add i64 %680, 15
  store i64 %706, i64* %PC, align 8
  store i64 %684, i64* %682, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %707 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %708 = inttoptr i64 %707 to i32*
  store i32 20, i32* %708, align 4
  %709 = load i64, i64* %RBP, align 8
  %710 = add i64 %709, -12
  %711 = load i64, i64* %PC, align 8
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %710 to i32*
  %714 = load i32, i32* %713, align 4
  %715 = zext i32 %714 to i64
  store i64 %715, i64* %RDI, align 8, !tbaa !2428
  %716 = add i64 %711, -1081
  %717 = add i64 %711, 8
  %718 = load i64, i64* %RSP, align 8, !tbaa !2428
  %719 = add i64 %718, -8
  %720 = inttoptr i64 %719 to i64*
  store i64 %717, i64* %720, align 8
  store i64 %719, i64* %RSP, align 8, !tbaa !2428
  store i64 %716, i64* %PC, align 8, !tbaa !2428
  %721 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %716, %struct.Memory* %MEMORY.0)
  %722 = load i64, i64* %RBP, align 8
  %723 = add i64 %722, -8
  %724 = load i64, i64* %PC, align 8
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %723 to i64*
  %727 = load i64, i64* %726, align 8
  store i64 %727, i64* %RAX, align 8, !tbaa !2428
  %728 = add i64 %727, 4
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = icmp ugt i64 %727, -5
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %4, align 1, !tbaa !2432
  %731 = trunc i64 %728 to i32
  %732 = and i32 %731, 255
  %733 = tail call i32 @llvm.ctpop.i32(i32 %732) #8
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  store i8 %736, i8* %5, align 1, !tbaa !2446
  %737 = xor i64 %727, %728
  %738 = lshr i64 %737, 4
  %739 = trunc i64 %738 to i8
  %740 = and i8 %739, 1
  store i8 %740, i8* %6, align 1, !tbaa !2447
  %741 = icmp eq i64 %728, 0
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %7, align 1, !tbaa !2448
  %743 = lshr i64 %728, 63
  %744 = trunc i64 %743 to i8
  store i8 %744, i8* %8, align 1, !tbaa !2449
  %745 = lshr i64 %727, 63
  %746 = xor i64 %743, %745
  %747 = add nuw nsw i64 %746, %743
  %748 = icmp eq i64 %747, 2
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %9, align 1, !tbaa !2450
  %750 = add i64 %724, 15
  store i64 %750, i64* %PC, align 8
  store i64 %728, i64* %726, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %751 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %752 = inttoptr i64 %751 to i32*
  store i32 2, i32* %752, align 4
  %753 = load i64, i64* %RBP, align 8
  %754 = add i64 %753, -12
  %755 = load i64, i64* %PC, align 8
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC, align 8
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757, align 4
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RDI, align 8, !tbaa !2428
  %760 = add i64 %755, -181
  %761 = add i64 %755, 8
  %762 = load i64, i64* %RSP, align 8, !tbaa !2428
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %764, align 8
  store i64 %763, i64* %RSP, align 8, !tbaa !2428
  store i64 %760, i64* %PC, align 8, !tbaa !2428
  %765 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %760, %struct.Memory* %MEMORY.0)
  %766 = load i64, i64* %RBP, align 8
  %767 = add i64 %766, -8
  %768 = load i64, i64* %PC, align 8
  %769 = add i64 %768, 4
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %767 to i64*
  %771 = load i64, i64* %770, align 8
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = add i64 %771, 4
  store i64 %772, i64* %RCX, align 8, !tbaa !2428
  %773 = icmp ugt i64 %771, -5
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %4, align 1, !tbaa !2432
  %775 = trunc i64 %772 to i32
  %776 = and i32 %775, 255
  %777 = tail call i32 @llvm.ctpop.i32(i32 %776) #8
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  store i8 %780, i8* %5, align 1, !tbaa !2446
  %781 = xor i64 %771, %772
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  store i8 %784, i8* %6, align 1, !tbaa !2447
  %785 = icmp eq i64 %772, 0
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %7, align 1, !tbaa !2448
  %787 = lshr i64 %772, 63
  %788 = trunc i64 %787 to i8
  store i8 %788, i8* %8, align 1, !tbaa !2449
  %789 = lshr i64 %771, 63
  %790 = xor i64 %787, %789
  %791 = add nuw nsw i64 %790, %787
  %792 = icmp eq i64 %791, 2
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %9, align 1, !tbaa !2450
  %794 = add i64 %768, 15
  store i64 %794, i64* %PC, align 8
  store i64 %772, i64* %770, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %795 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %796 = inttoptr i64 %795 to i32*
  store i32 3, i32* %796, align 4
  %797 = load i64, i64* %PC, align 8
  %798 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %797, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %798

block_400a1c:                                     ; preds = %block_400566
  %799 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %800 = inttoptr i64 %799 to i32*
  store i32 25, i32* %800, align 4
  %801 = load i64, i64* %RBP, align 8
  %802 = add i64 %801, -12
  %803 = load i64, i64* %PC, align 8
  %804 = add i64 %803, 3
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %802 to i32*
  %806 = load i32, i32* %805, align 4
  %807 = zext i32 %806 to i64
  store i64 %807, i64* %RDI, align 8, !tbaa !2428
  %808 = add i64 %803, -1331
  %809 = add i64 %803, 8
  %810 = load i64, i64* %RSP, align 8, !tbaa !2428
  %811 = add i64 %810, -8
  %812 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %812, align 8
  store i64 %811, i64* %RSP, align 8, !tbaa !2428
  store i64 %808, i64* %PC, align 8, !tbaa !2428
  %813 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %808, %struct.Memory* %MEMORY.0)
  %814 = load i64, i64* %RBP, align 8
  %815 = add i64 %814, -8
  %816 = load i64, i64* %PC, align 8
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC, align 8
  %818 = inttoptr i64 %815 to i64*
  %819 = load i64, i64* %818, align 8
  store i64 %819, i64* %RAX, align 8, !tbaa !2428
  %820 = add i64 %819, 4
  store i64 %820, i64* %RCX, align 8, !tbaa !2428
  %821 = icmp ugt i64 %819, -5
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %4, align 1, !tbaa !2432
  %823 = trunc i64 %820 to i32
  %824 = and i32 %823, 255
  %825 = tail call i32 @llvm.ctpop.i32(i32 %824) #8
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  store i8 %828, i8* %5, align 1, !tbaa !2446
  %829 = xor i64 %819, %820
  %830 = lshr i64 %829, 4
  %831 = trunc i64 %830 to i8
  %832 = and i8 %831, 1
  store i8 %832, i8* %6, align 1, !tbaa !2447
  %833 = icmp eq i64 %820, 0
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %7, align 1, !tbaa !2448
  %835 = lshr i64 %820, 63
  %836 = trunc i64 %835 to i8
  store i8 %836, i8* %8, align 1, !tbaa !2449
  %837 = lshr i64 %819, 63
  %838 = xor i64 %835, %837
  %839 = add nuw nsw i64 %838, %835
  %840 = icmp eq i64 %839, 2
  %841 = zext i1 %840 to i8
  store i8 %841, i8* %9, align 1, !tbaa !2450
  %842 = add i64 %816, 15
  store i64 %842, i64* %PC, align 8
  store i64 %820, i64* %818, align 8
  br label %block_400566

block_400799:                                     ; preds = %block_400792, %3
  %843 = phi i64 [ %1, %3 ], [ %.pre, %block_400792 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400792 ]
  %844 = load i64, i64* %RBP, align 8
  %845 = add i64 %844, -12
  %846 = add i64 %843, 3
  store i64 %846, i64* %PC, align 8
  %847 = inttoptr i64 %845 to i32*
  %848 = load i32, i32* %847, align 4
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %850 = add i64 %843, -681
  %851 = add i64 %843, 8
  %852 = load i64, i64* %RSP, align 8, !tbaa !2428
  %853 = add i64 %852, -8
  %854 = inttoptr i64 %853 to i64*
  store i64 %851, i64* %854, align 8
  store i64 %853, i64* %RSP, align 8, !tbaa !2428
  store i64 %850, i64* %PC, align 8, !tbaa !2428
  %855 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %850, %struct.Memory* %MEMORY.1)
  %856 = load i64, i64* %RBP, align 8
  %857 = add i64 %856, -8
  %858 = load i64, i64* %PC, align 8
  %859 = add i64 %858, 4
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860, align 8
  store i64 %861, i64* %RAX, align 8, !tbaa !2428
  %862 = add i64 %861, 4
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = icmp ugt i64 %861, -5
  %864 = zext i1 %863 to i8
  store i8 %864, i8* %4, align 1, !tbaa !2432
  %865 = trunc i64 %862 to i32
  %866 = and i32 %865, 255
  %867 = tail call i32 @llvm.ctpop.i32(i32 %866) #8
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  store i8 %870, i8* %5, align 1, !tbaa !2446
  %871 = xor i64 %861, %862
  %872 = lshr i64 %871, 4
  %873 = trunc i64 %872 to i8
  %874 = and i8 %873, 1
  store i8 %874, i8* %6, align 1, !tbaa !2447
  %875 = icmp eq i64 %862, 0
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %7, align 1, !tbaa !2448
  %877 = lshr i64 %862, 63
  %878 = trunc i64 %877 to i8
  store i8 %878, i8* %8, align 1, !tbaa !2449
  %879 = lshr i64 %861, 63
  %880 = xor i64 %877, %879
  %881 = add nuw nsw i64 %880, %877
  %882 = icmp eq i64 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %9, align 1, !tbaa !2450
  %884 = add i64 %858, 15
  store i64 %884, i64* %PC, align 8
  store i64 %862, i64* %860, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %885 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %886 = inttoptr i64 %885 to i32*
  store i32 7, i32* %886, align 4
  %887 = load i64, i64* %RBP, align 8
  %888 = add i64 %887, -12
  %889 = load i64, i64* %PC, align 8
  %890 = add i64 %889, 3
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %888 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = zext i32 %892 to i64
  store i64 %893, i64* %RDI, align 8, !tbaa !2428
  %894 = add i64 %889, -431
  %895 = add i64 %889, 8
  %896 = load i64, i64* %RSP, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %895, i64* %898, align 8
  store i64 %897, i64* %RSP, align 8, !tbaa !2428
  store i64 %894, i64* %PC, align 8, !tbaa !2428
  %899 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %894, %struct.Memory* %MEMORY.0)
  %900 = load i64, i64* %RBP, align 8
  %901 = add i64 %900, -8
  %902 = load i64, i64* %PC, align 8
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %901 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = add i64 %905, 4
  store i64 %906, i64* %RCX, align 8, !tbaa !2428
  %907 = icmp ugt i64 %905, -5
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %4, align 1, !tbaa !2432
  %909 = trunc i64 %906 to i32
  %910 = and i32 %909, 255
  %911 = tail call i32 @llvm.ctpop.i32(i32 %910) #8
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  store i8 %914, i8* %5, align 1, !tbaa !2446
  %915 = xor i64 %905, %906
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  store i8 %918, i8* %6, align 1, !tbaa !2447
  %919 = icmp eq i64 %906, 0
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %7, align 1, !tbaa !2448
  %921 = lshr i64 %906, 63
  %922 = trunc i64 %921 to i8
  store i8 %922, i8* %8, align 1, !tbaa !2449
  %923 = lshr i64 %905, 63
  %924 = xor i64 %921, %923
  %925 = add nuw nsw i64 %924, %921
  %926 = icmp eq i64 %925, 2
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %9, align 1, !tbaa !2450
  %928 = add i64 %902, 15
  store i64 %928, i64* %PC, align 8
  store i64 %906, i64* %904, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %929 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %930 = inttoptr i64 %929 to i32*
  store i32 30, i32* %930, align 4
  %931 = load i64, i64* %RBP, align 8
  %932 = add i64 %931, -12
  %933 = load i64, i64* %PC, align 8
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %932 to i32*
  %936 = load i32, i32* %935, align 4
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RDI, align 8, !tbaa !2428
  %938 = add i64 %933, -1581
  %939 = add i64 %933, 8
  %940 = load i64, i64* %RSP, align 8, !tbaa !2428
  %941 = add i64 %940, -8
  %942 = inttoptr i64 %941 to i64*
  store i64 %939, i64* %942, align 8
  store i64 %941, i64* %RSP, align 8, !tbaa !2428
  store i64 %938, i64* %PC, align 8, !tbaa !2428
  %943 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %938, %struct.Memory* %MEMORY.0)
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, -8
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = add i64 %949, 4
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = icmp ugt i64 %949, -5
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %4, align 1, !tbaa !2432
  %953 = trunc i64 %950 to i32
  %954 = and i32 %953, 255
  %955 = tail call i32 @llvm.ctpop.i32(i32 %954) #8
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  store i8 %958, i8* %5, align 1, !tbaa !2446
  %959 = xor i64 %949, %950
  %960 = lshr i64 %959, 4
  %961 = trunc i64 %960 to i8
  %962 = and i8 %961, 1
  store i8 %962, i8* %6, align 1, !tbaa !2447
  %963 = icmp eq i64 %950, 0
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %7, align 1, !tbaa !2448
  %965 = lshr i64 %950, 63
  %966 = trunc i64 %965 to i8
  store i8 %966, i8* %8, align 1, !tbaa !2449
  %967 = lshr i64 %949, 63
  %968 = xor i64 %965, %967
  %969 = add nuw nsw i64 %968, %965
  %970 = icmp eq i64 %969, 2
  %971 = zext i1 %970 to i8
  store i8 %971, i8* %9, align 1, !tbaa !2450
  %972 = add i64 %946, 15
  store i64 %972, i64* %PC, align 8
  store i64 %950, i64* %948, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %973 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %974 = inttoptr i64 %973 to i32*
  store i32 12, i32* %974, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400799

block_40088c:                                     ; preds = %block_400566
  %975 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %976 = inttoptr i64 %975 to i32*
  store i32 17, i32* %976, align 4
  %977 = load i64, i64* %PC, align 8
  %978 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %977, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %978

block_400986:                                     ; preds = %block_400566
  %979 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %980 = inttoptr i64 %979 to i32*
  store i32 22, i32* %980, align 4
  %981 = load i64, i64* %PC, align 8
  %982 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %981, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %982

block_400602:                                     ; preds = %block_400566
  %983 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %984 = inttoptr i64 %983 to i32*
  store i32 4, i32* %984, align 4
  %985 = load i64, i64* %PC, align 8
  %986 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %985, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %986

block_400a80:                                     ; preds = %block_400566
  %987 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %988 = inttoptr i64 %987 to i32*
  store i32 27, i32* %988, align 4
  %989 = load i64, i64* %PC, align 8
  %990 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %989, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %990

; <label>:991:                                    ; preds = %block_400566
  %992 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %992
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400430:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a55(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400a55

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_4005d0, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_400a55
  %.sink15 = phi i64 [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 151, %block_4005d0 ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1301, %block_400a55 ]
  %MEMORY.0 = phi %struct.Memory* [ %1025, %block_400792 ], [ %981, %block_400b16 ], [ %937, %block_400698 ], [ %893, %block_400a1c ], [ %849, %block_4005d0 ], [ %805, %block_40059e ], [ %761, %block_400922 ], [ %717, %block_400828 ], [ %673, %block_40072e ], [ %629, %block_400ab2 ], [ %585, %block_400634 ], [ %541, %block_4009b8 ], [ %497, %block_40056c ], [ %435, %block_400954 ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %391, %block_400a55 ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink15
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %1071 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RSP, align 8
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %346, 48
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %349 = icmp ugt i64 %346, -49
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %4, align 1, !tbaa !2432
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %5, align 1, !tbaa !2446
  %357 = xor i64 %346, 16
  %358 = xor i64 %357, %348
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %6, align 1, !tbaa !2447
  %362 = icmp eq i64 %348, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %7, align 1, !tbaa !2448
  %364 = lshr i64 %348, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %8, align 1, !tbaa !2449
  %366 = lshr i64 %346, 63
  %367 = xor i64 %364, %366
  %368 = add nuw nsw i64 %367, %364
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %9, align 1, !tbaa !2450
  %371 = add i64 %347, 5
  store i64 %371, i64* %PC, align 8
  %372 = add i64 %346, 56
  %373 = inttoptr i64 %348 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBP, align 8, !tbaa !2428
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %347, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %372 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %378 = add i64 %346, 64
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400a55:                                     ; preds = %block_400a4e, %3
  %379 = phi i64 [ %1, %3 ], [ %.pre, %block_400a4e ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a4e ]
  %380 = load i64, i64* %RBP, align 8
  %381 = add i64 %380, -12
  %382 = add i64 %379, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %379, -1381
  %387 = add i64 %379, 8
  %388 = load i64, i64* %RSP, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %RSP, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %386, %struct.Memory* %MEMORY.1)
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %397, 4
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -5
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %4, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %5, align 1, !tbaa !2446
  %407 = xor i64 %397, %398
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %6, align 1, !tbaa !2447
  %411 = icmp eq i64 %398, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %7, align 1, !tbaa !2448
  %413 = lshr i64 %398, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %8, align 1, !tbaa !2449
  %415 = lshr i64 %397, 63
  %416 = xor i64 %413, %415
  %417 = add nuw nsw i64 %416, %413
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %9, align 1, !tbaa !2450
  %420 = add i64 %394, 15
  store i64 %420, i64* %PC, align 8
  store i64 %398, i64* %396, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %421 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 21, i32* %422, align 4
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -12
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = add i64 %425, -1131
  %431 = add i64 %425, 8
  %432 = load i64, i64* %RSP, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %RSP, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %MEMORY.0)
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = add i64 %441, 4
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = icmp ugt i64 %441, -5
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %4, align 1, !tbaa !2432
  %445 = trunc i64 %442 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #8
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %5, align 1, !tbaa !2446
  %451 = xor i64 %441, %442
  %452 = lshr i64 %451, 4
  %453 = trunc i64 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %6, align 1, !tbaa !2447
  %455 = icmp eq i64 %442, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %7, align 1, !tbaa !2448
  %457 = lshr i64 %442, 63
  %458 = trunc i64 %457 to i8
  store i8 %458, i8* %8, align 1, !tbaa !2449
  %459 = lshr i64 %441, 63
  %460 = xor i64 %457, %459
  %461 = add nuw nsw i64 %460, %457
  %462 = icmp eq i64 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %9, align 1, !tbaa !2450
  %464 = add i64 %438, 15
  store i64 %464, i64* %PC, align 8
  store i64 %442, i64* %440, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %465 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %466 = inttoptr i64 %465 to i32*
  store i32 26, i32* %466, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400a55

block_4006ca:                                     ; preds = %block_400566
  %467 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %468 = inttoptr i64 %467 to i32*
  store i32 8, i32* %468, align 4
  %469 = load i64, i64* %PC, align 8
  %470 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %469, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %470

block_400b48:                                     ; preds = %block_400566
  %471 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %472 = inttoptr i64 %471 to i32*
  store i32 31, i32* %472, align 4
  %473 = load i64, i64* %PC, align 8
  %474 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %473, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %474

block_4007c4:                                     ; preds = %block_400566
  %475 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %476 = inttoptr i64 %475 to i32*
  store i32 13, i32* %476, align 4
  %477 = load i64, i64* %PC, align 8
  %478 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %477, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %478

block_4008be:                                     ; preds = %block_400566
  %479 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %480 = inttoptr i64 %479 to i32*
  store i32 18, i32* %480, align 4
  %481 = load i64, i64* %PC, align 8
  %482 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %481, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %482

block_40056c:                                     ; preds = %block_400566
  %483 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %484 = inttoptr i64 %483 to i32*
  store i32 1, i32* %484, align 4
  %485 = load i64, i64* %RBP, align 8
  %486 = add i64 %485, -12
  %487 = load i64, i64* %PC, align 8
  %488 = add i64 %487, 3
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %486 to i32*
  %490 = load i32, i32* %489, align 4
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %RDI, align 8, !tbaa !2428
  %492 = add i64 %487, -131
  %493 = add i64 %487, 8
  %494 = load i64, i64* %RSP, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %493, i64* %496, align 8
  store i64 %495, i64* %RSP, align 8, !tbaa !2428
  store i64 %492, i64* %PC, align 8, !tbaa !2428
  %497 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %492, %struct.Memory* %MEMORY.0)
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -8
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i64*
  %503 = load i64, i64* %502, align 8
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = add i64 %503, 4
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = icmp ugt i64 %503, -5
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %4, align 1, !tbaa !2432
  %507 = trunc i64 %504 to i32
  %508 = and i32 %507, 255
  %509 = tail call i32 @llvm.ctpop.i32(i32 %508) #8
  %510 = trunc i32 %509 to i8
  %511 = and i8 %510, 1
  %512 = xor i8 %511, 1
  store i8 %512, i8* %5, align 1, !tbaa !2446
  %513 = xor i64 %503, %504
  %514 = lshr i64 %513, 4
  %515 = trunc i64 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %6, align 1, !tbaa !2447
  %517 = icmp eq i64 %504, 0
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %7, align 1, !tbaa !2448
  %519 = lshr i64 %504, 63
  %520 = trunc i64 %519 to i8
  store i8 %520, i8* %8, align 1, !tbaa !2449
  %521 = lshr i64 %503, 63
  %522 = xor i64 %519, %521
  %523 = add nuw nsw i64 %522, %519
  %524 = icmp eq i64 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %9, align 1, !tbaa !2450
  %526 = add i64 %500, 15
  store i64 %526, i64* %PC, align 8
  store i64 %504, i64* %502, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %527 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %528 = inttoptr i64 %527 to i32*
  store i32 23, i32* %528, align 4
  %529 = load i64, i64* %RBP, align 8
  %530 = add i64 %529, -12
  %531 = load i64, i64* %PC, align 8
  %532 = add i64 %531, 3
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %530 to i32*
  %534 = load i32, i32* %533, align 4
  %535 = zext i32 %534 to i64
  store i64 %535, i64* %RDI, align 8, !tbaa !2428
  %536 = add i64 %531, -1231
  %537 = add i64 %531, 8
  %538 = load i64, i64* %RSP, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %537, i64* %540, align 8
  store i64 %539, i64* %RSP, align 8, !tbaa !2428
  store i64 %536, i64* %PC, align 8, !tbaa !2428
  %541 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %536, %struct.Memory* %MEMORY.0)
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -8
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546, align 8
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = add i64 %547, 4
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = icmp ugt i64 %547, -5
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %4, align 1, !tbaa !2432
  %551 = trunc i64 %548 to i32
  %552 = and i32 %551, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #8
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %5, align 1, !tbaa !2446
  %557 = xor i64 %547, %548
  %558 = lshr i64 %557, 4
  %559 = trunc i64 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %6, align 1, !tbaa !2447
  %561 = icmp eq i64 %548, 0
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %7, align 1, !tbaa !2448
  %563 = lshr i64 %548, 63
  %564 = trunc i64 %563 to i8
  store i8 %564, i8* %8, align 1, !tbaa !2449
  %565 = lshr i64 %547, 63
  %566 = xor i64 %563, %565
  %567 = add nuw nsw i64 %566, %563
  %568 = icmp eq i64 %567, 2
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %9, align 1, !tbaa !2450
  %570 = add i64 %544, 15
  store i64 %570, i64* %PC, align 8
  store i64 %548, i64* %546, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %571 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %572 = inttoptr i64 %571 to i32*
  store i32 5, i32* %572, align 4
  %573 = load i64, i64* %RBP, align 8
  %574 = add i64 %573, -12
  %575 = load i64, i64* %PC, align 8
  %576 = add i64 %575, 3
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %574 to i32*
  %578 = load i32, i32* %577, align 4
  %579 = zext i32 %578 to i64
  store i64 %579, i64* %RDI, align 8, !tbaa !2428
  %580 = add i64 %575, -331
  %581 = add i64 %575, 8
  %582 = load i64, i64* %RSP, align 8, !tbaa !2428
  %583 = add i64 %582, -8
  %584 = inttoptr i64 %583 to i64*
  store i64 %581, i64* %584, align 8
  store i64 %583, i64* %RSP, align 8, !tbaa !2428
  store i64 %580, i64* %PC, align 8, !tbaa !2428
  %585 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %580, %struct.Memory* %MEMORY.0)
  %586 = load i64, i64* %RBP, align 8
  %587 = add i64 %586, -8
  %588 = load i64, i64* %PC, align 8
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = add i64 %591, 4
  store i64 %592, i64* %RCX, align 8, !tbaa !2428
  %593 = icmp ugt i64 %591, -5
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %4, align 1, !tbaa !2432
  %595 = trunc i64 %592 to i32
  %596 = and i32 %595, 255
  %597 = tail call i32 @llvm.ctpop.i32(i32 %596) #8
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  store i8 %600, i8* %5, align 1, !tbaa !2446
  %601 = xor i64 %591, %592
  %602 = lshr i64 %601, 4
  %603 = trunc i64 %602 to i8
  %604 = and i8 %603, 1
  store i8 %604, i8* %6, align 1, !tbaa !2447
  %605 = icmp eq i64 %592, 0
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %7, align 1, !tbaa !2448
  %607 = lshr i64 %592, 63
  %608 = trunc i64 %607 to i8
  store i8 %608, i8* %8, align 1, !tbaa !2449
  %609 = lshr i64 %591, 63
  %610 = xor i64 %607, %609
  %611 = add nuw nsw i64 %610, %607
  %612 = icmp eq i64 %611, 2
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %9, align 1, !tbaa !2450
  %614 = add i64 %588, 15
  store i64 %614, i64* %PC, align 8
  store i64 %592, i64* %590, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %615 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %616 = inttoptr i64 %615 to i32*
  store i32 28, i32* %616, align 4
  %617 = load i64, i64* %RBP, align 8
  %618 = add i64 %617, -12
  %619 = load i64, i64* %PC, align 8
  %620 = add i64 %619, 3
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621, align 4
  %623 = zext i32 %622 to i64
  store i64 %623, i64* %RDI, align 8, !tbaa !2428
  %624 = add i64 %619, -1481
  %625 = add i64 %619, 8
  %626 = load i64, i64* %RSP, align 8, !tbaa !2428
  %627 = add i64 %626, -8
  %628 = inttoptr i64 %627 to i64*
  store i64 %625, i64* %628, align 8
  store i64 %627, i64* %RSP, align 8, !tbaa !2428
  store i64 %624, i64* %PC, align 8, !tbaa !2428
  %629 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %624, %struct.Memory* %MEMORY.0)
  %630 = load i64, i64* %RBP, align 8
  %631 = add i64 %630, -8
  %632 = load i64, i64* %PC, align 8
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634, align 8
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = add i64 %635, 4
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = icmp ugt i64 %635, -5
  %638 = zext i1 %637 to i8
  store i8 %638, i8* %4, align 1, !tbaa !2432
  %639 = trunc i64 %636 to i32
  %640 = and i32 %639, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640) #8
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %5, align 1, !tbaa !2446
  %645 = xor i64 %635, %636
  %646 = lshr i64 %645, 4
  %647 = trunc i64 %646 to i8
  %648 = and i8 %647, 1
  store i8 %648, i8* %6, align 1, !tbaa !2447
  %649 = icmp eq i64 %636, 0
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %7, align 1, !tbaa !2448
  %651 = lshr i64 %636, 63
  %652 = trunc i64 %651 to i8
  store i8 %652, i8* %8, align 1, !tbaa !2449
  %653 = lshr i64 %635, 63
  %654 = xor i64 %651, %653
  %655 = add nuw nsw i64 %654, %651
  %656 = icmp eq i64 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %9, align 1, !tbaa !2450
  %658 = add i64 %632, 15
  store i64 %658, i64* %PC, align 8
  store i64 %636, i64* %634, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %659 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %660 = inttoptr i64 %659 to i32*
  store i32 10, i32* %660, align 4
  %661 = load i64, i64* %RBP, align 8
  %662 = add i64 %661, -12
  %663 = load i64, i64* %PC, align 8
  %664 = add i64 %663, 3
  store i64 %664, i64* %PC, align 8
  %665 = inttoptr i64 %662 to i32*
  %666 = load i32, i32* %665, align 4
  %667 = zext i32 %666 to i64
  store i64 %667, i64* %RDI, align 8, !tbaa !2428
  %668 = add i64 %663, -581
  %669 = add i64 %663, 8
  %670 = load i64, i64* %RSP, align 8, !tbaa !2428
  %671 = add i64 %670, -8
  %672 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %672, align 8
  store i64 %671, i64* %RSP, align 8, !tbaa !2428
  store i64 %668, i64* %PC, align 8, !tbaa !2428
  %673 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %668, %struct.Memory* %MEMORY.0)
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -8
  %676 = load i64, i64* %PC, align 8
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %675 to i64*
  %679 = load i64, i64* %678, align 8
  store i64 %679, i64* %RAX, align 8, !tbaa !2428
  %680 = add i64 %679, 4
  store i64 %680, i64* %RCX, align 8, !tbaa !2428
  %681 = icmp ugt i64 %679, -5
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %4, align 1, !tbaa !2432
  %683 = trunc i64 %680 to i32
  %684 = and i32 %683, 255
  %685 = tail call i32 @llvm.ctpop.i32(i32 %684) #8
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  store i8 %688, i8* %5, align 1, !tbaa !2446
  %689 = xor i64 %679, %680
  %690 = lshr i64 %689, 4
  %691 = trunc i64 %690 to i8
  %692 = and i8 %691, 1
  store i8 %692, i8* %6, align 1, !tbaa !2447
  %693 = icmp eq i64 %680, 0
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %7, align 1, !tbaa !2448
  %695 = lshr i64 %680, 63
  %696 = trunc i64 %695 to i8
  store i8 %696, i8* %8, align 1, !tbaa !2449
  %697 = lshr i64 %679, 63
  %698 = xor i64 %695, %697
  %699 = add nuw nsw i64 %698, %695
  %700 = icmp eq i64 %699, 2
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %9, align 1, !tbaa !2450
  %702 = add i64 %676, 15
  store i64 %702, i64* %PC, align 8
  store i64 %680, i64* %678, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %703 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %704 = inttoptr i64 %703 to i32*
  store i32 15, i32* %704, align 4
  %705 = load i64, i64* %RBP, align 8
  %706 = add i64 %705, -12
  %707 = load i64, i64* %PC, align 8
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709, align 4
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RDI, align 8, !tbaa !2428
  %712 = add i64 %707, -831
  %713 = add i64 %707, 8
  %714 = load i64, i64* %RSP, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716, align 8
  store i64 %715, i64* %RSP, align 8, !tbaa !2428
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  %717 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %712, %struct.Memory* %MEMORY.0)
  %718 = load i64, i64* %RBP, align 8
  %719 = add i64 %718, -8
  %720 = load i64, i64* %PC, align 8
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %719 to i64*
  %723 = load i64, i64* %722, align 8
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = add i64 %723, 4
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = icmp ugt i64 %723, -5
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %4, align 1, !tbaa !2432
  %727 = trunc i64 %724 to i32
  %728 = and i32 %727, 255
  %729 = tail call i32 @llvm.ctpop.i32(i32 %728) #8
  %730 = trunc i32 %729 to i8
  %731 = and i8 %730, 1
  %732 = xor i8 %731, 1
  store i8 %732, i8* %5, align 1, !tbaa !2446
  %733 = xor i64 %723, %724
  %734 = lshr i64 %733, 4
  %735 = trunc i64 %734 to i8
  %736 = and i8 %735, 1
  store i8 %736, i8* %6, align 1, !tbaa !2447
  %737 = icmp eq i64 %724, 0
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %7, align 1, !tbaa !2448
  %739 = lshr i64 %724, 63
  %740 = trunc i64 %739 to i8
  store i8 %740, i8* %8, align 1, !tbaa !2449
  %741 = lshr i64 %723, 63
  %742 = xor i64 %739, %741
  %743 = add nuw nsw i64 %742, %739
  %744 = icmp eq i64 %743, 2
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %9, align 1, !tbaa !2450
  %746 = add i64 %720, 15
  store i64 %746, i64* %PC, align 8
  store i64 %724, i64* %722, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %747 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %748 = inttoptr i64 %747 to i32*
  store i32 20, i32* %748, align 4
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -12
  %751 = load i64, i64* %PC, align 8
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDI, align 8, !tbaa !2428
  %756 = add i64 %751, -1081
  %757 = add i64 %751, 8
  %758 = load i64, i64* %RSP, align 8, !tbaa !2428
  %759 = add i64 %758, -8
  %760 = inttoptr i64 %759 to i64*
  store i64 %757, i64* %760, align 8
  store i64 %759, i64* %RSP, align 8, !tbaa !2428
  store i64 %756, i64* %PC, align 8, !tbaa !2428
  %761 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %756, %struct.Memory* %MEMORY.0)
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -8
  %764 = load i64, i64* %PC, align 8
  %765 = add i64 %764, 4
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %763 to i64*
  %767 = load i64, i64* %766, align 8
  store i64 %767, i64* %RAX, align 8, !tbaa !2428
  %768 = add i64 %767, 4
  store i64 %768, i64* %RCX, align 8, !tbaa !2428
  %769 = icmp ugt i64 %767, -5
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %4, align 1, !tbaa !2432
  %771 = trunc i64 %768 to i32
  %772 = and i32 %771, 255
  %773 = tail call i32 @llvm.ctpop.i32(i32 %772) #8
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  store i8 %776, i8* %5, align 1, !tbaa !2446
  %777 = xor i64 %767, %768
  %778 = lshr i64 %777, 4
  %779 = trunc i64 %778 to i8
  %780 = and i8 %779, 1
  store i8 %780, i8* %6, align 1, !tbaa !2447
  %781 = icmp eq i64 %768, 0
  %782 = zext i1 %781 to i8
  store i8 %782, i8* %7, align 1, !tbaa !2448
  %783 = lshr i64 %768, 63
  %784 = trunc i64 %783 to i8
  store i8 %784, i8* %8, align 1, !tbaa !2449
  %785 = lshr i64 %767, 63
  %786 = xor i64 %783, %785
  %787 = add nuw nsw i64 %786, %783
  %788 = icmp eq i64 %787, 2
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %9, align 1, !tbaa !2450
  %790 = add i64 %764, 15
  store i64 %790, i64* %PC, align 8
  store i64 %768, i64* %766, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %791 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %792 = inttoptr i64 %791 to i32*
  store i32 2, i32* %792, align 4
  %793 = load i64, i64* %RBP, align 8
  %794 = add i64 %793, -12
  %795 = load i64, i64* %PC, align 8
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC, align 8
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797, align 4
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RDI, align 8, !tbaa !2428
  %800 = add i64 %795, -181
  %801 = add i64 %795, 8
  %802 = load i64, i64* %RSP, align 8, !tbaa !2428
  %803 = add i64 %802, -8
  %804 = inttoptr i64 %803 to i64*
  store i64 %801, i64* %804, align 8
  store i64 %803, i64* %RSP, align 8, !tbaa !2428
  store i64 %800, i64* %PC, align 8, !tbaa !2428
  %805 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %800, %struct.Memory* %MEMORY.0)
  %806 = load i64, i64* %RBP, align 8
  %807 = add i64 %806, -8
  %808 = load i64, i64* %PC, align 8
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %RAX, align 8, !tbaa !2428
  %812 = add i64 %811, 4
  store i64 %812, i64* %RCX, align 8, !tbaa !2428
  %813 = icmp ugt i64 %811, -5
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %4, align 1, !tbaa !2432
  %815 = trunc i64 %812 to i32
  %816 = and i32 %815, 255
  %817 = tail call i32 @llvm.ctpop.i32(i32 %816) #8
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  %820 = xor i8 %819, 1
  store i8 %820, i8* %5, align 1, !tbaa !2446
  %821 = xor i64 %811, %812
  %822 = lshr i64 %821, 4
  %823 = trunc i64 %822 to i8
  %824 = and i8 %823, 1
  store i8 %824, i8* %6, align 1, !tbaa !2447
  %825 = icmp eq i64 %812, 0
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %7, align 1, !tbaa !2448
  %827 = lshr i64 %812, 63
  %828 = trunc i64 %827 to i8
  store i8 %828, i8* %8, align 1, !tbaa !2449
  %829 = lshr i64 %811, 63
  %830 = xor i64 %827, %829
  %831 = add nuw nsw i64 %830, %827
  %832 = icmp eq i64 %831, 2
  %833 = zext i1 %832 to i8
  store i8 %833, i8* %9, align 1, !tbaa !2450
  %834 = add i64 %808, 15
  store i64 %834, i64* %PC, align 8
  store i64 %812, i64* %810, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %835 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %836 = inttoptr i64 %835 to i32*
  store i32 3, i32* %836, align 4
  %837 = load i64, i64* %RBP, align 8
  %838 = add i64 %837, -12
  %839 = load i64, i64* %PC, align 8
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %838 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RDI, align 8, !tbaa !2428
  %844 = add i64 %839, -231
  %845 = add i64 %839, 8
  %846 = load i64, i64* %RSP, align 8, !tbaa !2428
  %847 = add i64 %846, -8
  %848 = inttoptr i64 %847 to i64*
  store i64 %845, i64* %848, align 8
  store i64 %847, i64* %RSP, align 8, !tbaa !2428
  store i64 %844, i64* %PC, align 8, !tbaa !2428
  %849 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %844, %struct.Memory* %MEMORY.0)
  %850 = load i64, i64* %RBP, align 8
  %851 = add i64 %850, -8
  %852 = load i64, i64* %PC, align 8
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = add i64 %855, 4
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = icmp ugt i64 %855, -5
  %858 = zext i1 %857 to i8
  store i8 %858, i8* %4, align 1, !tbaa !2432
  %859 = trunc i64 %856 to i32
  %860 = and i32 %859, 255
  %861 = tail call i32 @llvm.ctpop.i32(i32 %860) #8
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  store i8 %864, i8* %5, align 1, !tbaa !2446
  %865 = xor i64 %855, %856
  %866 = lshr i64 %865, 4
  %867 = trunc i64 %866 to i8
  %868 = and i8 %867, 1
  store i8 %868, i8* %6, align 1, !tbaa !2447
  %869 = icmp eq i64 %856, 0
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %7, align 1, !tbaa !2448
  %871 = lshr i64 %856, 63
  %872 = trunc i64 %871 to i8
  store i8 %872, i8* %8, align 1, !tbaa !2449
  %873 = lshr i64 %855, 63
  %874 = xor i64 %871, %873
  %875 = add nuw nsw i64 %874, %871
  %876 = icmp eq i64 %875, 2
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %9, align 1, !tbaa !2450
  %878 = add i64 %852, 15
  store i64 %878, i64* %PC, align 8
  store i64 %856, i64* %854, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %879 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %880 = inttoptr i64 %879 to i32*
  store i32 25, i32* %880, align 4
  %881 = load i64, i64* %RBP, align 8
  %882 = add i64 %881, -12
  %883 = load i64, i64* %PC, align 8
  %884 = add i64 %883, 3
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %882 to i32*
  %886 = load i32, i32* %885, align 4
  %887 = zext i32 %886 to i64
  store i64 %887, i64* %RDI, align 8, !tbaa !2428
  %888 = add i64 %883, -1331
  %889 = add i64 %883, 8
  %890 = load i64, i64* %RSP, align 8, !tbaa !2428
  %891 = add i64 %890, -8
  %892 = inttoptr i64 %891 to i64*
  store i64 %889, i64* %892, align 8
  store i64 %891, i64* %RSP, align 8, !tbaa !2428
  store i64 %888, i64* %PC, align 8, !tbaa !2428
  %893 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %888, %struct.Memory* %MEMORY.0)
  %894 = load i64, i64* %RBP, align 8
  %895 = add i64 %894, -8
  %896 = load i64, i64* %PC, align 8
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898, align 8
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = add i64 %899, 4
  store i64 %900, i64* %RCX, align 8, !tbaa !2428
  %901 = icmp ugt i64 %899, -5
  %902 = zext i1 %901 to i8
  store i8 %902, i8* %4, align 1, !tbaa !2432
  %903 = trunc i64 %900 to i32
  %904 = and i32 %903, 255
  %905 = tail call i32 @llvm.ctpop.i32(i32 %904) #8
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  store i8 %908, i8* %5, align 1, !tbaa !2446
  %909 = xor i64 %899, %900
  %910 = lshr i64 %909, 4
  %911 = trunc i64 %910 to i8
  %912 = and i8 %911, 1
  store i8 %912, i8* %6, align 1, !tbaa !2447
  %913 = icmp eq i64 %900, 0
  %914 = zext i1 %913 to i8
  store i8 %914, i8* %7, align 1, !tbaa !2448
  %915 = lshr i64 %900, 63
  %916 = trunc i64 %915 to i8
  store i8 %916, i8* %8, align 1, !tbaa !2449
  %917 = lshr i64 %899, 63
  %918 = xor i64 %915, %917
  %919 = add nuw nsw i64 %918, %915
  %920 = icmp eq i64 %919, 2
  %921 = zext i1 %920 to i8
  store i8 %921, i8* %9, align 1, !tbaa !2450
  %922 = add i64 %896, 15
  store i64 %922, i64* %PC, align 8
  store i64 %900, i64* %898, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %923 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %924 = inttoptr i64 %923 to i32*
  store i32 7, i32* %924, align 4
  %925 = load i64, i64* %RBP, align 8
  %926 = add i64 %925, -12
  %927 = load i64, i64* %PC, align 8
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929, align 4
  %931 = zext i32 %930 to i64
  store i64 %931, i64* %RDI, align 8, !tbaa !2428
  %932 = add i64 %927, -431
  %933 = add i64 %927, 8
  %934 = load i64, i64* %RSP, align 8, !tbaa !2428
  %935 = add i64 %934, -8
  %936 = inttoptr i64 %935 to i64*
  store i64 %933, i64* %936, align 8
  store i64 %935, i64* %RSP, align 8, !tbaa !2428
  store i64 %932, i64* %PC, align 8, !tbaa !2428
  %937 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %932, %struct.Memory* %MEMORY.0)
  %938 = load i64, i64* %RBP, align 8
  %939 = add i64 %938, -8
  %940 = load i64, i64* %PC, align 8
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC, align 8
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942, align 8
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = add i64 %943, 4
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %945 = icmp ugt i64 %943, -5
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %4, align 1, !tbaa !2432
  %947 = trunc i64 %944 to i32
  %948 = and i32 %947, 255
  %949 = tail call i32 @llvm.ctpop.i32(i32 %948) #8
  %950 = trunc i32 %949 to i8
  %951 = and i8 %950, 1
  %952 = xor i8 %951, 1
  store i8 %952, i8* %5, align 1, !tbaa !2446
  %953 = xor i64 %943, %944
  %954 = lshr i64 %953, 4
  %955 = trunc i64 %954 to i8
  %956 = and i8 %955, 1
  store i8 %956, i8* %6, align 1, !tbaa !2447
  %957 = icmp eq i64 %944, 0
  %958 = zext i1 %957 to i8
  store i8 %958, i8* %7, align 1, !tbaa !2448
  %959 = lshr i64 %944, 63
  %960 = trunc i64 %959 to i8
  store i8 %960, i8* %8, align 1, !tbaa !2449
  %961 = lshr i64 %943, 63
  %962 = xor i64 %959, %961
  %963 = add nuw nsw i64 %962, %959
  %964 = icmp eq i64 %963, 2
  %965 = zext i1 %964 to i8
  store i8 %965, i8* %9, align 1, !tbaa !2450
  %966 = add i64 %940, 15
  store i64 %966, i64* %PC, align 8
  store i64 %944, i64* %942, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %967 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %968 = inttoptr i64 %967 to i32*
  store i32 30, i32* %968, align 4
  %969 = load i64, i64* %RBP, align 8
  %970 = add i64 %969, -12
  %971 = load i64, i64* %PC, align 8
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %970 to i32*
  %974 = load i32, i32* %973, align 4
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RDI, align 8, !tbaa !2428
  %976 = add i64 %971, -1581
  %977 = add i64 %971, 8
  %978 = load i64, i64* %RSP, align 8, !tbaa !2428
  %979 = add i64 %978, -8
  %980 = inttoptr i64 %979 to i64*
  store i64 %977, i64* %980, align 8
  store i64 %979, i64* %RSP, align 8, !tbaa !2428
  store i64 %976, i64* %PC, align 8, !tbaa !2428
  %981 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %976, %struct.Memory* %MEMORY.0)
  %982 = load i64, i64* %RBP, align 8
  %983 = add i64 %982, -8
  %984 = load i64, i64* %PC, align 8
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %983 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = add i64 %987, 4
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = icmp ugt i64 %987, -5
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %4, align 1, !tbaa !2432
  %991 = trunc i64 %988 to i32
  %992 = and i32 %991, 255
  %993 = tail call i32 @llvm.ctpop.i32(i32 %992) #8
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  store i8 %996, i8* %5, align 1, !tbaa !2446
  %997 = xor i64 %987, %988
  %998 = lshr i64 %997, 4
  %999 = trunc i64 %998 to i8
  %1000 = and i8 %999, 1
  store i8 %1000, i8* %6, align 1, !tbaa !2447
  %1001 = icmp eq i64 %988, 0
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %7, align 1, !tbaa !2448
  %1003 = lshr i64 %988, 63
  %1004 = trunc i64 %1003 to i8
  store i8 %1004, i8* %8, align 1, !tbaa !2449
  %1005 = lshr i64 %987, 63
  %1006 = xor i64 %1003, %1005
  %1007 = add nuw nsw i64 %1006, %1003
  %1008 = icmp eq i64 %1007, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %9, align 1, !tbaa !2450
  %1010 = add i64 %984, 15
  store i64 %1010, i64* %PC, align 8
  store i64 %988, i64* %986, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1011 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %1012 = inttoptr i64 %1011 to i32*
  store i32 12, i32* %1012, align 4
  %1013 = load i64, i64* %RBP, align 8
  %1014 = add i64 %1013, -12
  %1015 = load i64, i64* %PC, align 8
  %1016 = add i64 %1015, 3
  store i64 %1016, i64* %PC, align 8
  %1017 = inttoptr i64 %1014 to i32*
  %1018 = load i32, i32* %1017, align 4
  %1019 = zext i32 %1018 to i64
  store i64 %1019, i64* %RDI, align 8, !tbaa !2428
  %1020 = add i64 %1015, -681
  %1021 = add i64 %1015, 8
  %1022 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1023 = add i64 %1022, -8
  %1024 = inttoptr i64 %1023 to i64*
  store i64 %1021, i64* %1024, align 8
  store i64 %1023, i64* %RSP, align 8, !tbaa !2428
  store i64 %1020, i64* %PC, align 8, !tbaa !2428
  %1025 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1020, %struct.Memory* %MEMORY.0)
  %1026 = load i64, i64* %RBP, align 8
  %1027 = add i64 %1026, -8
  %1028 = load i64, i64* %PC, align 8
  %1029 = add i64 %1028, 4
  store i64 %1029, i64* %PC, align 8
  %1030 = inttoptr i64 %1027 to i64*
  %1031 = load i64, i64* %1030, align 8
  store i64 %1031, i64* %RAX, align 8, !tbaa !2428
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %RCX, align 8, !tbaa !2428
  %1033 = icmp ugt i64 %1031, -5
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %4, align 1, !tbaa !2432
  %1035 = trunc i64 %1032 to i32
  %1036 = and i32 %1035, 255
  %1037 = tail call i32 @llvm.ctpop.i32(i32 %1036) #8
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  store i8 %1040, i8* %5, align 1, !tbaa !2446
  %1041 = xor i64 %1031, %1032
  %1042 = lshr i64 %1041, 4
  %1043 = trunc i64 %1042 to i8
  %1044 = and i8 %1043, 1
  store i8 %1044, i8* %6, align 1, !tbaa !2447
  %1045 = icmp eq i64 %1032, 0
  %1046 = zext i1 %1045 to i8
  store i8 %1046, i8* %7, align 1, !tbaa !2448
  %1047 = lshr i64 %1032, 63
  %1048 = trunc i64 %1047 to i8
  store i8 %1048, i8* %8, align 1, !tbaa !2449
  %1049 = lshr i64 %1031, 63
  %1050 = xor i64 %1047, %1049
  %1051 = add nuw nsw i64 %1050, %1047
  %1052 = icmp eq i64 %1051, 2
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %9, align 1, !tbaa !2450
  %1054 = add i64 %1028, 15
  store i64 %1054, i64* %PC, align 8
  store i64 %1032, i64* %1030, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1055 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %1056 = inttoptr i64 %1055 to i32*
  store i32 17, i32* %1056, align 4
  %1057 = load i64, i64* %PC, align 8
  %1058 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %1057, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1058

block_400986:                                     ; preds = %block_400566
  %1059 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %1060 = inttoptr i64 %1059 to i32*
  store i32 22, i32* %1060, align 4
  %1061 = load i64, i64* %PC, align 8
  %1062 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %1061, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1062

block_400602:                                     ; preds = %block_400566
  %1063 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %1064 = inttoptr i64 %1063 to i32*
  store i32 4, i32* %1064, align 4
  %1065 = load i64, i64* %PC, align 8
  %1066 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1065, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1066

block_400a80:                                     ; preds = %block_400566
  %1067 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %1068 = inttoptr i64 %1067 to i32*
  store i32 27, i32* %1068, align 4
  %1069 = load i64, i64* %PC, align 8
  %1070 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1069, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1070

; <label>:1071:                                   ; preds = %block_400566
  %1072 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1072
}

; Function Attrs: noinline
define %struct.Memory* @sub_400735(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400735

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %248, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.0)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %248, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.0)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %99 = add i64 %248, -12
  store i64 4195799, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 3, i32* %100, align 4
  %101 = load i64, i64* %PC, align 8
  %102 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %101, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %102

block_4006ca:                                     ; preds = %block_400566
  %103 = add i64 %248, -12
  store i64 4196049, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 8, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %106

block_4007c4:                                     ; preds = %block_400566
  %107 = add i64 %248, -12
  store i64 4196299, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 13, i32* %108, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %110

block_4009ea:                                     ; preds = %block_400566
  %111 = add i64 %248, -12
  store i64 4196849, i64* %PC, align 8
  %112 = inttoptr i64 %111 to i32*
  store i32 24, i32* %112, align 4
  %113 = load i64, i64* %PC, align 8
  %114 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %114

block_4008be:                                     ; preds = %block_400566
  %115 = add i64 %248, -12
  store i64 4196549, i64* %PC, align 8
  %116 = inttoptr i64 %115 to i32*
  store i32 18, i32* %116, align 4
  %117 = load i64, i64* %PC, align 8
  %118 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %117, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %118

block_4009b8:                                     ; preds = %block_400566
  %119 = add i64 %248, -12
  store i64 4196799, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 23, i32* %120, align 4
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -12
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %128 = add i64 %123, -1231
  %129 = add i64 %123, 8
  %130 = load i64, i64* %4, align 8, !tbaa !2428
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132, align 8
  store i64 %131, i64* %4, align 8, !tbaa !2428
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %133 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.0)
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -8
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %139, 4
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -5
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %5, align 1, !tbaa !2432
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #8
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %6, align 1, !tbaa !2446
  %149 = xor i64 %139, %140
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %7, align 1, !tbaa !2447
  %153 = icmp eq i64 %140, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %8, align 1, !tbaa !2448
  %155 = lshr i64 %140, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* %9, align 1, !tbaa !2449
  %157 = lshr i64 %139, 63
  %158 = xor i64 %155, %157
  %159 = add nuw nsw i64 %158, %155
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %10, align 1, !tbaa !2450
  %162 = add i64 %136, 15
  store i64 %162, i64* %PC, align 8
  store i64 %140, i64* %138, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %163 = add i64 %248, -12
  store i64 4197049, i64* %PC, align 8
  %164 = inttoptr i64 %163 to i32*
  store i32 28, i32* %164, align 4
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -12
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %172 = add i64 %167, -1481
  %173 = add i64 %167, 8
  %174 = load i64, i64* %4, align 8, !tbaa !2428
  %175 = add i64 %174, -8
  %176 = inttoptr i64 %175 to i64*
  store i64 %173, i64* %176, align 8
  store i64 %175, i64* %4, align 8, !tbaa !2428
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  %177 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %172, %struct.Memory* %MEMORY.0)
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = add i64 %183, 4
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = icmp ugt i64 %183, -5
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %5, align 1, !tbaa !2432
  %187 = trunc i64 %184 to i32
  %188 = and i32 %187, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #8
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %6, align 1, !tbaa !2446
  %193 = xor i64 %183, %184
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  store i8 %196, i8* %7, align 1, !tbaa !2447
  %197 = icmp eq i64 %184, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %8, align 1, !tbaa !2448
  %199 = lshr i64 %184, 63
  %200 = trunc i64 %199 to i8
  store i8 %200, i8* %9, align 1, !tbaa !2449
  %201 = lshr i64 %183, 63
  %202 = xor i64 %199, %201
  %203 = add nuw nsw i64 %202, %199
  %204 = icmp eq i64 %203, 2
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %10, align 1, !tbaa !2450
  %206 = add i64 %180, 15
  store i64 %206, i64* %PC, align 8
  store i64 %184, i64* %182, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %207 = add i64 %248, -12
  store i64 4195749, i64* %PC, align 8
  %208 = inttoptr i64 %207 to i32*
  store i32 2, i32* %208, align 4
  %209 = load i64, i64* %PC, align 8
  %210 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %209, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %210

block_400698:                                     ; preds = %block_400566
  %211 = add i64 %248, -12
  store i64 4195999, i64* %PC, align 8
  %212 = inttoptr i64 %211 to i32*
  store i32 7, i32* %212, align 4
  %213 = load i64, i64* %PC, align 8
  %214 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %213, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %214

block_400792:                                     ; preds = %block_400566
  %215 = add i64 %248, -12
  store i64 4196249, i64* %PC, align 8
  %216 = inttoptr i64 %215 to i32*
  store i32 12, i32* %216, align 4
  %217 = load i64, i64* %PC, align 8
  %218 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %217, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %218

block_40088c:                                     ; preds = %block_400566
  %219 = add i64 %248, -12
  store i64 4196499, i64* %PC, align 8
  %220 = inttoptr i64 %219 to i32*
  store i32 17, i32* %220, align 4
  %221 = load i64, i64* %PC, align 8
  %222 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %222

block_400986:                                     ; preds = %block_400566
  %223 = add i64 %248, -12
  store i64 4196749, i64* %PC, align 8
  %224 = inttoptr i64 %223 to i32*
  store i32 22, i32* %224, align 4
  %225 = load i64, i64* %PC, align 8
  %226 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %225, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %226

block_40056c:                                     ; preds = %block_400566
  %227 = add i64 %248, -12
  store i64 4195699, i64* %PC, align 8
  %228 = inttoptr i64 %227 to i32*
  store i32 1, i32* %228, align 4
  %229 = load i64, i64* %PC, align 8
  %230 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %229, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %230

block_400566:                                     ; preds = %block_400634, %block_400ab2, %block_4009b8, %block_4008f0, %block_4007f6, %block_400735
  %.sink31 = phi i64 [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 501, %block_400735 ]
  %MEMORY.0 = phi %struct.Memory* [ %345, %block_400634 ], [ %177, %block_400ab2 ], [ %133, %block_4009b8 ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %301, %block_400735 ]
  %231 = bitcast i64* %RAX to i32**
  %232 = load i32*, i32** %231, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC, align 8
  %235 = load i32, i32* %232, align 4
  %236 = sext i32 %235 to i64
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = shl nsw i64 %236, 3
  %238 = add i64 %237, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %239 = add i64 %233, 11
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -40
  %244 = add i64 %233, 15
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  store i64 %241, i64* %245, align 8
  %246 = load i64, i64* %PC, align 8
  %247 = sub i64 %246, %.sink31
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -40
  %250 = add i64 %247, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  store i64 %252, i64* %PC, align 8, !tbaa !2428
  switch i64 %252, label %401 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196092, label %block_4006fc
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196192, label %block_400760
    i64 4197042, label %block_400ab2
    i64 4196542, label %block_4008be
    i64 4195742, label %block_40059e
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4195992, label %block_400698
    i64 4196242, label %block_400792
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196692, label %block_400954
    i64 4196992, label %block_400a80
  ]

block_40085a:                                     ; preds = %block_400566
  %253 = add i64 %248, -12
  store i64 4196449, i64* %PC, align 8
  %254 = inttoptr i64 %253 to i32*
  store i32 16, i32* %254, align 4
  %255 = load i64, i64* %PC, align 8
  %256 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %255, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %256

block_400ae4:                                     ; preds = %block_400566
  %257 = add i64 %248, -12
  store i64 4197099, i64* %PC, align 8
  %258 = inttoptr i64 %257 to i32*
  store i32 29, i32* %258, align 4
  %259 = load i64, i64* %PC, align 8
  %260 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %259, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %260

block_400559:                                     ; preds = %block_400566
  %261 = add i64 %248, -12
  store i64 4195680, i64* %PC, align 8
  %262 = inttoptr i64 %261 to i32*
  store i32 0, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %263, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %264

block_400954:                                     ; preds = %block_400566
  %265 = add i64 %248, -12
  store i64 4196699, i64* %PC, align 8
  %266 = inttoptr i64 %265 to i32*
  store i32 21, i32* %266, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %267, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %268

block_400a4e:                                     ; preds = %block_400566
  %269 = add i64 %248, -12
  store i64 4196949, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 26, i32* %270, align 4
  %271 = load i64, i64* %PC, align 8
  %272 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %271, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %272

block_400a80:                                     ; preds = %block_400566
  %273 = add i64 %248, -12
  store i64 4196999, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 27, i32* %274, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %276

block_400b48:                                     ; preds = %block_400566
  %277 = add i64 %248, -12
  store i64 4197199, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 31, i32* %278, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %280

block_400666:                                     ; preds = %block_400566
  %281 = add i64 %248, -12
  store i64 4195949, i64* %PC, align 8
  %282 = inttoptr i64 %281 to i32*
  store i32 6, i32* %282, align 4
  %283 = load i64, i64* %PC, align 8
  %284 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %283, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %284

block_400760:                                     ; preds = %block_400566
  %285 = add i64 %248, -12
  store i64 4196199, i64* %PC, align 8
  %286 = inttoptr i64 %285 to i32*
  store i32 11, i32* %286, align 4
  %287 = load i64, i64* %PC, align 8
  %288 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %288

block_400735:                                     ; preds = %block_40072e, %3
  %289 = phi i64 [ %1, %3 ], [ %.pre, %block_40072e ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40072e ]
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -12
  %292 = add i64 %289, 3
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RDI, align 8, !tbaa !2428
  %296 = add i64 %289, -581
  %297 = add i64 %289, 8
  %298 = load i64, i64* %4, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %297, i64* %300, align 8
  store i64 %299, i64* %4, align 8, !tbaa !2428
  store i64 %296, i64* %PC, align 8, !tbaa !2428
  %301 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %296, %struct.Memory* %MEMORY.1)
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -8
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 4
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = add i64 %307, 4
  store i64 %308, i64* %RCX, align 8, !tbaa !2428
  %309 = icmp ugt i64 %307, -5
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %5, align 1, !tbaa !2432
  %311 = trunc i64 %308 to i32
  %312 = and i32 %311, 255
  %313 = tail call i32 @llvm.ctpop.i32(i32 %312) #8
  %314 = trunc i32 %313 to i8
  %315 = and i8 %314, 1
  %316 = xor i8 %315, 1
  store i8 %316, i8* %6, align 1, !tbaa !2446
  %317 = xor i64 %307, %308
  %318 = lshr i64 %317, 4
  %319 = trunc i64 %318 to i8
  %320 = and i8 %319, 1
  store i8 %320, i8* %7, align 1, !tbaa !2447
  %321 = icmp eq i64 %308, 0
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %8, align 1, !tbaa !2448
  %323 = lshr i64 %308, 63
  %324 = trunc i64 %323 to i8
  store i8 %324, i8* %9, align 1, !tbaa !2449
  %325 = lshr i64 %307, 63
  %326 = xor i64 %323, %325
  %327 = add nuw nsw i64 %326, %323
  %328 = icmp eq i64 %327, 2
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %10, align 1, !tbaa !2450
  %330 = add i64 %304, 15
  store i64 %330, i64* %PC, align 8
  store i64 %308, i64* %306, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %331 = add i64 %248, -12
  store i64 4195899, i64* %PC, align 8
  %332 = inttoptr i64 %331 to i32*
  store i32 5, i32* %332, align 4
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -12
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RDI, align 8, !tbaa !2428
  %340 = add i64 %335, -331
  %341 = add i64 %335, 8
  %342 = load i64, i64* %4, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %341, i64* %344, align 8
  store i64 %343, i64* %4, align 8, !tbaa !2428
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  %345 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %340, %struct.Memory* %MEMORY.0)
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -8
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350, align 8
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = add i64 %351, 4
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = icmp ugt i64 %351, -5
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %5, align 1, !tbaa !2432
  %355 = trunc i64 %352 to i32
  %356 = and i32 %355, 255
  %357 = tail call i32 @llvm.ctpop.i32(i32 %356) #8
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = xor i8 %359, 1
  store i8 %360, i8* %6, align 1, !tbaa !2446
  %361 = xor i64 %351, %352
  %362 = lshr i64 %361, 4
  %363 = trunc i64 %362 to i8
  %364 = and i8 %363, 1
  store i8 %364, i8* %7, align 1, !tbaa !2447
  %365 = icmp eq i64 %352, 0
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %8, align 1, !tbaa !2448
  %367 = lshr i64 %352, 63
  %368 = trunc i64 %367 to i8
  store i8 %368, i8* %9, align 1, !tbaa !2449
  %369 = lshr i64 %351, 63
  %370 = xor i64 %367, %369
  %371 = add nuw nsw i64 %370, %367
  %372 = icmp eq i64 %371, 2
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %10, align 1, !tbaa !2450
  %374 = add i64 %348, 15
  store i64 %374, i64* %PC, align 8
  store i64 %352, i64* %350, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %375 = add i64 %248, -12
  store i64 4196149, i64* %PC, align 8
  %376 = inttoptr i64 %375 to i32*
  store i32 10, i32* %376, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400735

block_400828:                                     ; preds = %block_400566
  %377 = add i64 %248, -12
  store i64 4196399, i64* %PC, align 8
  %378 = inttoptr i64 %377 to i32*
  store i32 15, i32* %378, align 4
  %379 = load i64, i64* %PC, align 8
  %380 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %379, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %380

block_4006fc:                                     ; preds = %block_400566
  %381 = add i64 %248, -12
  store i64 4196099, i64* %PC, align 8
  %382 = inttoptr i64 %381 to i32*
  store i32 9, i32* %382, align 4
  %383 = load i64, i64* %PC, align 8
  %384 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %383, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %384

block_400922:                                     ; preds = %block_400566
  %385 = add i64 %248, -12
  store i64 4196649, i64* %PC, align 8
  %386 = inttoptr i64 %385 to i32*
  store i32 20, i32* %386, align 4
  %387 = load i64, i64* %PC, align 8
  %388 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %387, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %388

block_400a1c:                                     ; preds = %block_400566
  %389 = add i64 %248, -12
  store i64 4196899, i64* %PC, align 8
  %390 = inttoptr i64 %389 to i32*
  store i32 25, i32* %390, align 4
  %391 = load i64, i64* %PC, align 8
  %392 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %391, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %392

block_400b16:                                     ; preds = %block_400566
  %393 = add i64 %248, -12
  store i64 4197149, i64* %PC, align 8
  %394 = inttoptr i64 %393 to i32*
  store i32 30, i32* %394, align 4
  %395 = load i64, i64* %PC, align 8
  %396 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %395, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %396

block_400602:                                     ; preds = %block_400566
  %397 = add i64 %248, -12
  store i64 4195849, i64* %PC, align 8
  %398 = inttoptr i64 %397 to i32*
  store i32 4, i32* %398, align 4
  %399 = load i64, i64* %PC, align 8
  %400 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %399, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %400

; <label>:401:                                    ; preds = %block_400566
  %402 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %252, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %402
}

; Function Attrs: noinline
define %struct.Memory* @sub_400893(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400893

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 1, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -131
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400b16, %block_400698, %block_400ab2, %block_400a1c, %block_40059e, %block_4009b8, %block_400922, %block_400828, %block_40072e, %block_400634, %block_400a4e, %block_400954, %block_4005d0, %block_4008f0, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4007f6, %block_400893
  %.sink14 = phi i64 [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1401, %block_400ab2 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1151, %block_4009b8 ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1301, %block_400a4e ], [ 1051, %block_400954 ], [ 151, %block_4005d0 ], [ 951, %block_4008f0 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 701, %block_4007f6 ], [ 851, %block_400893 ]
  %MEMORY.0 = phi %struct.Memory* [ %1067, %block_400792 ], [ %981, %block_400b16 ], [ %937, %block_400698 ], [ %893, %block_400ab2 ], [ %849, %block_400a1c ], [ %805, %block_40059e ], [ %761, %block_4009b8 ], [ %717, %block_400922 ], [ %669, %block_400828 ], [ %590, %block_40072e ], [ %542, %block_400634 ], [ %498, %block_400a4e ], [ %454, %block_400954 ], [ %402, %block_4005d0 ], [ %358, %block_4008f0 ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_40056c ], [ %28, %block_4007f6 ], [ %1023, %block_400893 ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink14
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %1111 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4197042, label %block_400ab2
    i64 4196892, label %block_400a1c
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196292, label %block_4007c4
    i64 4196692, label %block_400954
    i64 4195892, label %block_400634
    i64 4196142, label %block_40072e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196792, label %block_4009b8
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 19, i32* %345, align 4
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -12
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %RDI, align 8, !tbaa !2428
  %353 = add i64 %348, -1031
  %354 = add i64 %348, 8
  %355 = load i64, i64* %RSP, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %354, i64* %357, align 8
  store i64 %356, i64* %RSP, align 8, !tbaa !2428
  store i64 %353, i64* %PC, align 8, !tbaa !2428
  %358 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %353, %struct.Memory* %MEMORY.0)
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -8
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %364, 4
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = icmp ugt i64 %364, -5
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %4, align 1, !tbaa !2432
  %368 = trunc i64 %365 to i32
  %369 = and i32 %368, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #8
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %5, align 1, !tbaa !2446
  %374 = xor i64 %364, %365
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %6, align 1, !tbaa !2447
  %378 = icmp eq i64 %365, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %7, align 1, !tbaa !2448
  %380 = lshr i64 %365, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %8, align 1, !tbaa !2449
  %382 = lshr i64 %364, 63
  %383 = xor i64 %380, %382
  %384 = add nuw nsw i64 %383, %380
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %9, align 1, !tbaa !2450
  %387 = add i64 %361, 15
  store i64 %387, i64* %PC, align 8
  store i64 %365, i64* %363, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %388 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %389 = inttoptr i64 %388 to i32*
  store i32 3, i32* %389, align 4
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -12
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394, align 4
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %397 = add i64 %392, -231
  %398 = add i64 %392, 8
  %399 = load i64, i64* %RSP, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %398, i64* %401, align 8
  store i64 %400, i64* %RSP, align 8, !tbaa !2428
  store i64 %397, i64* %PC, align 8, !tbaa !2428
  %402 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %397, %struct.Memory* %MEMORY.0)
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -8
  %405 = load i64, i64* %PC, align 8
  %406 = add i64 %405, 4
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %404 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %RAX, align 8, !tbaa !2428
  %409 = add i64 %408, 4
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = icmp ugt i64 %408, -5
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %4, align 1, !tbaa !2432
  %412 = trunc i64 %409 to i32
  %413 = and i32 %412, 255
  %414 = tail call i32 @llvm.ctpop.i32(i32 %413) #8
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = xor i8 %416, 1
  store i8 %417, i8* %5, align 1, !tbaa !2446
  %418 = xor i64 %408, %409
  %419 = lshr i64 %418, 4
  %420 = trunc i64 %419 to i8
  %421 = and i8 %420, 1
  store i8 %421, i8* %6, align 1, !tbaa !2447
  %422 = icmp eq i64 %409, 0
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %7, align 1, !tbaa !2448
  %424 = lshr i64 %409, 63
  %425 = trunc i64 %424 to i8
  store i8 %425, i8* %8, align 1, !tbaa !2449
  %426 = lshr i64 %408, 63
  %427 = xor i64 %424, %426
  %428 = add nuw nsw i64 %427, %424
  %429 = icmp eq i64 %428, 2
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %9, align 1, !tbaa !2450
  %431 = add i64 %405, 15
  store i64 %431, i64* %PC, align 8
  store i64 %409, i64* %407, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %432 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %433 = inttoptr i64 %432 to i32*
  store i32 8, i32* %433, align 4
  %434 = load i64, i64* %PC, align 8
  %435 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %434, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %435

block_4007c4:                                     ; preds = %block_400566
  %436 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %437 = inttoptr i64 %436 to i32*
  store i32 13, i32* %437, align 4
  %438 = load i64, i64* %PC, align 8
  %439 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %438, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %439

block_400954:                                     ; preds = %block_400566
  %440 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %441 = inttoptr i64 %440 to i32*
  store i32 21, i32* %441, align 4
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -12
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, 3
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %443 to i32*
  %447 = load i32, i32* %446, align 4
  %448 = zext i32 %447 to i64
  store i64 %448, i64* %RDI, align 8, !tbaa !2428
  %449 = add i64 %444, -1131
  %450 = add i64 %444, 8
  %451 = load i64, i64* %RSP, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %450, i64* %453, align 8
  store i64 %452, i64* %RSP, align 8, !tbaa !2428
  store i64 %449, i64* %PC, align 8, !tbaa !2428
  %454 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %449, %struct.Memory* %MEMORY.0)
  %455 = load i64, i64* %RBP, align 8
  %456 = add i64 %455, -8
  %457 = load i64, i64* %PC, align 8
  %458 = add i64 %457, 4
  store i64 %458, i64* %PC, align 8
  %459 = inttoptr i64 %456 to i64*
  %460 = load i64, i64* %459, align 8
  store i64 %460, i64* %RAX, align 8, !tbaa !2428
  %461 = add i64 %460, 4
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = icmp ugt i64 %460, -5
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %4, align 1, !tbaa !2432
  %464 = trunc i64 %461 to i32
  %465 = and i32 %464, 255
  %466 = tail call i32 @llvm.ctpop.i32(i32 %465) #8
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  store i8 %469, i8* %5, align 1, !tbaa !2446
  %470 = xor i64 %460, %461
  %471 = lshr i64 %470, 4
  %472 = trunc i64 %471 to i8
  %473 = and i8 %472, 1
  store i8 %473, i8* %6, align 1, !tbaa !2447
  %474 = icmp eq i64 %461, 0
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %7, align 1, !tbaa !2448
  %476 = lshr i64 %461, 63
  %477 = trunc i64 %476 to i8
  store i8 %477, i8* %8, align 1, !tbaa !2449
  %478 = lshr i64 %460, 63
  %479 = xor i64 %476, %478
  %480 = add nuw nsw i64 %479, %476
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %9, align 1, !tbaa !2450
  %483 = add i64 %457, 15
  store i64 %483, i64* %PC, align 8
  store i64 %461, i64* %459, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %484 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %485 = inttoptr i64 %484 to i32*
  store i32 26, i32* %485, align 4
  %486 = load i64, i64* %RBP, align 8
  %487 = add i64 %486, -12
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490, align 4
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %RDI, align 8, !tbaa !2428
  %493 = add i64 %488, -1381
  %494 = add i64 %488, 8
  %495 = load i64, i64* %RSP, align 8, !tbaa !2428
  %496 = add i64 %495, -8
  %497 = inttoptr i64 %496 to i64*
  store i64 %494, i64* %497, align 8
  store i64 %496, i64* %RSP, align 8, !tbaa !2428
  store i64 %493, i64* %PC, align 8, !tbaa !2428
  %498 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %493, %struct.Memory* %MEMORY.0)
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -8
  %501 = load i64, i64* %PC, align 8
  %502 = add i64 %501, 4
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503, align 8
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = add i64 %504, 4
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = icmp ugt i64 %504, -5
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %4, align 1, !tbaa !2432
  %508 = trunc i64 %505 to i32
  %509 = and i32 %508, 255
  %510 = tail call i32 @llvm.ctpop.i32(i32 %509) #8
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  store i8 %513, i8* %5, align 1, !tbaa !2446
  %514 = xor i64 %504, %505
  %515 = lshr i64 %514, 4
  %516 = trunc i64 %515 to i8
  %517 = and i8 %516, 1
  store i8 %517, i8* %6, align 1, !tbaa !2447
  %518 = icmp eq i64 %505, 0
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %7, align 1, !tbaa !2448
  %520 = lshr i64 %505, 63
  %521 = trunc i64 %520 to i8
  store i8 %521, i8* %8, align 1, !tbaa !2449
  %522 = lshr i64 %504, 63
  %523 = xor i64 %520, %522
  %524 = add nuw nsw i64 %523, %520
  %525 = icmp eq i64 %524, 2
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %9, align 1, !tbaa !2450
  %527 = add i64 %501, 15
  store i64 %527, i64* %PC, align 8
  store i64 %505, i64* %503, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %528 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %529 = inttoptr i64 %528 to i32*
  store i32 5, i32* %529, align 4
  %530 = load i64, i64* %RBP, align 8
  %531 = add i64 %530, -12
  %532 = load i64, i64* %PC, align 8
  %533 = add i64 %532, 3
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %531 to i32*
  %535 = load i32, i32* %534, align 4
  %536 = zext i32 %535 to i64
  store i64 %536, i64* %RDI, align 8, !tbaa !2428
  %537 = add i64 %532, -331
  %538 = add i64 %532, 8
  %539 = load i64, i64* %RSP, align 8, !tbaa !2428
  %540 = add i64 %539, -8
  %541 = inttoptr i64 %540 to i64*
  store i64 %538, i64* %541, align 8
  store i64 %540, i64* %RSP, align 8, !tbaa !2428
  store i64 %537, i64* %PC, align 8, !tbaa !2428
  %542 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %537, %struct.Memory* %MEMORY.0)
  %543 = load i64, i64* %RBP, align 8
  %544 = add i64 %543, -8
  %545 = load i64, i64* %PC, align 8
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %544 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %RAX, align 8, !tbaa !2428
  %549 = add i64 %548, 4
  store i64 %549, i64* %RCX, align 8, !tbaa !2428
  %550 = icmp ugt i64 %548, -5
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %4, align 1, !tbaa !2432
  %552 = trunc i64 %549 to i32
  %553 = and i32 %552, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553) #8
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %5, align 1, !tbaa !2446
  %558 = xor i64 %548, %549
  %559 = lshr i64 %558, 4
  %560 = trunc i64 %559 to i8
  %561 = and i8 %560, 1
  store i8 %561, i8* %6, align 1, !tbaa !2447
  %562 = icmp eq i64 %549, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %7, align 1, !tbaa !2448
  %564 = lshr i64 %549, 63
  %565 = trunc i64 %564 to i8
  store i8 %565, i8* %8, align 1, !tbaa !2449
  %566 = lshr i64 %548, 63
  %567 = xor i64 %564, %566
  %568 = add nuw nsw i64 %567, %564
  %569 = icmp eq i64 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %9, align 1, !tbaa !2450
  %571 = add i64 %545, 15
  store i64 %571, i64* %PC, align 8
  store i64 %549, i64* %547, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %572 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %573 = inttoptr i64 %572 to i32*
  store i32 31, i32* %573, align 4
  %574 = load i64, i64* %PC, align 8
  %575 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %574, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %575

block_40072e:                                     ; preds = %block_400566
  %576 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %577 = inttoptr i64 %576 to i32*
  store i32 10, i32* %577, align 4
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -12
  %580 = load i64, i64* %PC, align 8
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RDI, align 8, !tbaa !2428
  %585 = add i64 %580, -581
  %586 = add i64 %580, 8
  %587 = load i64, i64* %RSP, align 8, !tbaa !2428
  %588 = add i64 %587, -8
  %589 = inttoptr i64 %588 to i64*
  store i64 %586, i64* %589, align 8
  store i64 %588, i64* %RSP, align 8, !tbaa !2428
  store i64 %585, i64* %PC, align 8, !tbaa !2428
  %590 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %585, %struct.Memory* %MEMORY.0)
  %591 = load i64, i64* %RBP, align 8
  %592 = add i64 %591, -8
  %593 = load i64, i64* %PC, align 8
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %592 to i64*
  %596 = load i64, i64* %595, align 8
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = add i64 %596, 4
  store i64 %597, i64* %RCX, align 8, !tbaa !2428
  %598 = icmp ugt i64 %596, -5
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %4, align 1, !tbaa !2432
  %600 = trunc i64 %597 to i32
  %601 = and i32 %600, 255
  %602 = tail call i32 @llvm.ctpop.i32(i32 %601) #8
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* %5, align 1, !tbaa !2446
  %606 = xor i64 %596, %597
  %607 = lshr i64 %606, 4
  %608 = trunc i64 %607 to i8
  %609 = and i8 %608, 1
  store i8 %609, i8* %6, align 1, !tbaa !2447
  %610 = icmp eq i64 %597, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %7, align 1, !tbaa !2448
  %612 = lshr i64 %597, 63
  %613 = trunc i64 %612 to i8
  store i8 %613, i8* %8, align 1, !tbaa !2449
  %614 = lshr i64 %596, 63
  %615 = xor i64 %612, %614
  %616 = add nuw nsw i64 %615, %612
  %617 = icmp eq i64 %616, 2
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %9, align 1, !tbaa !2450
  %619 = add i64 %593, 15
  store i64 %619, i64* %PC, align 8
  store i64 %597, i64* %595, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %620 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %621 = inttoptr i64 %620 to i32*
  store i32 0, i32* %621, align 4
  %622 = load i64, i64* %RSP, align 8
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %622, 48
  store i64 %624, i64* %RSP, align 8, !tbaa !2428
  %625 = icmp ugt i64 %622, -49
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %4, align 1, !tbaa !2432
  %627 = trunc i64 %624 to i32
  %628 = and i32 %627, 255
  %629 = tail call i32 @llvm.ctpop.i32(i32 %628) #8
  %630 = trunc i32 %629 to i8
  %631 = and i8 %630, 1
  %632 = xor i8 %631, 1
  store i8 %632, i8* %5, align 1, !tbaa !2446
  %633 = xor i64 %622, 16
  %634 = xor i64 %633, %624
  %635 = lshr i64 %634, 4
  %636 = trunc i64 %635 to i8
  %637 = and i8 %636, 1
  store i8 %637, i8* %6, align 1, !tbaa !2447
  %638 = icmp eq i64 %624, 0
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %7, align 1, !tbaa !2448
  %640 = lshr i64 %624, 63
  %641 = trunc i64 %640 to i8
  store i8 %641, i8* %8, align 1, !tbaa !2449
  %642 = lshr i64 %622, 63
  %643 = xor i64 %640, %642
  %644 = add nuw nsw i64 %643, %640
  %645 = icmp eq i64 %644, 2
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %9, align 1, !tbaa !2450
  %647 = add i64 %623, 5
  store i64 %647, i64* %PC, align 8
  %648 = add i64 %622, 56
  %649 = inttoptr i64 %624 to i64*
  %650 = load i64, i64* %649, align 8
  store i64 %650, i64* %RBP, align 8, !tbaa !2428
  store i64 %648, i64* %RSP, align 8, !tbaa !2428
  %651 = add i64 %623, 6
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %648 to i64*
  %653 = load i64, i64* %652, align 8
  store i64 %653, i64* %PC, align 8, !tbaa !2428
  %654 = add i64 %622, 64
  store i64 %654, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400828:                                     ; preds = %block_400566
  %655 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %656 = inttoptr i64 %655 to i32*
  store i32 15, i32* %656, align 4
  %657 = load i64, i64* %RBP, align 8
  %658 = add i64 %657, -12
  %659 = load i64, i64* %PC, align 8
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %658 to i32*
  %662 = load i32, i32* %661, align 4
  %663 = zext i32 %662 to i64
  store i64 %663, i64* %RDI, align 8, !tbaa !2428
  %664 = add i64 %659, -831
  %665 = add i64 %659, 8
  %666 = load i64, i64* %RSP, align 8, !tbaa !2428
  %667 = add i64 %666, -8
  %668 = inttoptr i64 %667 to i64*
  store i64 %665, i64* %668, align 8
  store i64 %667, i64* %RSP, align 8, !tbaa !2428
  store i64 %664, i64* %PC, align 8, !tbaa !2428
  %669 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %664, %struct.Memory* %MEMORY.0)
  %670 = load i64, i64* %RBP, align 8
  %671 = add i64 %670, -8
  %672 = load i64, i64* %PC, align 8
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674, align 8
  store i64 %675, i64* %RAX, align 8, !tbaa !2428
  %676 = add i64 %675, 4
  store i64 %676, i64* %RCX, align 8, !tbaa !2428
  %677 = icmp ugt i64 %675, -5
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %4, align 1, !tbaa !2432
  %679 = trunc i64 %676 to i32
  %680 = and i32 %679, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680) #8
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %5, align 1, !tbaa !2446
  %685 = xor i64 %675, %676
  %686 = lshr i64 %685, 4
  %687 = trunc i64 %686 to i8
  %688 = and i8 %687, 1
  store i8 %688, i8* %6, align 1, !tbaa !2447
  %689 = icmp eq i64 %676, 0
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %7, align 1, !tbaa !2448
  %691 = lshr i64 %676, 63
  %692 = trunc i64 %691 to i8
  store i8 %692, i8* %8, align 1, !tbaa !2449
  %693 = lshr i64 %675, 63
  %694 = xor i64 %691, %693
  %695 = add nuw nsw i64 %694, %691
  %696 = icmp eq i64 %695, 2
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %9, align 1, !tbaa !2450
  %698 = add i64 %672, 15
  store i64 %698, i64* %PC, align 8
  store i64 %676, i64* %674, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %699 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %700 = inttoptr i64 %699 to i32*
  store i32 18, i32* %700, align 4
  %701 = load i64, i64* %PC, align 8
  %702 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %701, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %702

block_400922:                                     ; preds = %block_400566
  %703 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %704 = inttoptr i64 %703 to i32*
  store i32 20, i32* %704, align 4
  %705 = load i64, i64* %RBP, align 8
  %706 = add i64 %705, -12
  %707 = load i64, i64* %PC, align 8
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709, align 4
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RDI, align 8, !tbaa !2428
  %712 = add i64 %707, -1081
  %713 = add i64 %707, 8
  %714 = load i64, i64* %RSP, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716, align 8
  store i64 %715, i64* %RSP, align 8, !tbaa !2428
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  %717 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %712, %struct.Memory* %MEMORY.0)
  %718 = load i64, i64* %RBP, align 8
  %719 = add i64 %718, -8
  %720 = load i64, i64* %PC, align 8
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %719 to i64*
  %723 = load i64, i64* %722, align 8
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = add i64 %723, 4
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = icmp ugt i64 %723, -5
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %4, align 1, !tbaa !2432
  %727 = trunc i64 %724 to i32
  %728 = and i32 %727, 255
  %729 = tail call i32 @llvm.ctpop.i32(i32 %728) #8
  %730 = trunc i32 %729 to i8
  %731 = and i8 %730, 1
  %732 = xor i8 %731, 1
  store i8 %732, i8* %5, align 1, !tbaa !2446
  %733 = xor i64 %723, %724
  %734 = lshr i64 %733, 4
  %735 = trunc i64 %734 to i8
  %736 = and i8 %735, 1
  store i8 %736, i8* %6, align 1, !tbaa !2447
  %737 = icmp eq i64 %724, 0
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %7, align 1, !tbaa !2448
  %739 = lshr i64 %724, 63
  %740 = trunc i64 %739 to i8
  store i8 %740, i8* %8, align 1, !tbaa !2449
  %741 = lshr i64 %723, 63
  %742 = xor i64 %739, %741
  %743 = add nuw nsw i64 %742, %739
  %744 = icmp eq i64 %743, 2
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %9, align 1, !tbaa !2450
  %746 = add i64 %720, 15
  store i64 %746, i64* %PC, align 8
  store i64 %724, i64* %722, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %747 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %748 = inttoptr i64 %747 to i32*
  store i32 23, i32* %748, align 4
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -12
  %751 = load i64, i64* %PC, align 8
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDI, align 8, !tbaa !2428
  %756 = add i64 %751, -1231
  %757 = add i64 %751, 8
  %758 = load i64, i64* %RSP, align 8, !tbaa !2428
  %759 = add i64 %758, -8
  %760 = inttoptr i64 %759 to i64*
  store i64 %757, i64* %760, align 8
  store i64 %759, i64* %RSP, align 8, !tbaa !2428
  store i64 %756, i64* %PC, align 8, !tbaa !2428
  %761 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %756, %struct.Memory* %MEMORY.0)
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -8
  %764 = load i64, i64* %PC, align 8
  %765 = add i64 %764, 4
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %763 to i64*
  %767 = load i64, i64* %766, align 8
  store i64 %767, i64* %RAX, align 8, !tbaa !2428
  %768 = add i64 %767, 4
  store i64 %768, i64* %RCX, align 8, !tbaa !2428
  %769 = icmp ugt i64 %767, -5
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %4, align 1, !tbaa !2432
  %771 = trunc i64 %768 to i32
  %772 = and i32 %771, 255
  %773 = tail call i32 @llvm.ctpop.i32(i32 %772) #8
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  store i8 %776, i8* %5, align 1, !tbaa !2446
  %777 = xor i64 %767, %768
  %778 = lshr i64 %777, 4
  %779 = trunc i64 %778 to i8
  %780 = and i8 %779, 1
  store i8 %780, i8* %6, align 1, !tbaa !2447
  %781 = icmp eq i64 %768, 0
  %782 = zext i1 %781 to i8
  store i8 %782, i8* %7, align 1, !tbaa !2448
  %783 = lshr i64 %768, 63
  %784 = trunc i64 %783 to i8
  store i8 %784, i8* %8, align 1, !tbaa !2449
  %785 = lshr i64 %767, 63
  %786 = xor i64 %783, %785
  %787 = add nuw nsw i64 %786, %783
  %788 = icmp eq i64 %787, 2
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %9, align 1, !tbaa !2450
  %790 = add i64 %764, 15
  store i64 %790, i64* %PC, align 8
  store i64 %768, i64* %766, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %791 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %792 = inttoptr i64 %791 to i32*
  store i32 2, i32* %792, align 4
  %793 = load i64, i64* %RBP, align 8
  %794 = add i64 %793, -12
  %795 = load i64, i64* %PC, align 8
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC, align 8
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797, align 4
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RDI, align 8, !tbaa !2428
  %800 = add i64 %795, -181
  %801 = add i64 %795, 8
  %802 = load i64, i64* %RSP, align 8, !tbaa !2428
  %803 = add i64 %802, -8
  %804 = inttoptr i64 %803 to i64*
  store i64 %801, i64* %804, align 8
  store i64 %803, i64* %RSP, align 8, !tbaa !2428
  store i64 %800, i64* %PC, align 8, !tbaa !2428
  %805 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %800, %struct.Memory* %MEMORY.0)
  %806 = load i64, i64* %RBP, align 8
  %807 = add i64 %806, -8
  %808 = load i64, i64* %PC, align 8
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %RAX, align 8, !tbaa !2428
  %812 = add i64 %811, 4
  store i64 %812, i64* %RCX, align 8, !tbaa !2428
  %813 = icmp ugt i64 %811, -5
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %4, align 1, !tbaa !2432
  %815 = trunc i64 %812 to i32
  %816 = and i32 %815, 255
  %817 = tail call i32 @llvm.ctpop.i32(i32 %816) #8
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  %820 = xor i8 %819, 1
  store i8 %820, i8* %5, align 1, !tbaa !2446
  %821 = xor i64 %811, %812
  %822 = lshr i64 %821, 4
  %823 = trunc i64 %822 to i8
  %824 = and i8 %823, 1
  store i8 %824, i8* %6, align 1, !tbaa !2447
  %825 = icmp eq i64 %812, 0
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %7, align 1, !tbaa !2448
  %827 = lshr i64 %812, 63
  %828 = trunc i64 %827 to i8
  store i8 %828, i8* %8, align 1, !tbaa !2449
  %829 = lshr i64 %811, 63
  %830 = xor i64 %827, %829
  %831 = add nuw nsw i64 %830, %827
  %832 = icmp eq i64 %831, 2
  %833 = zext i1 %832 to i8
  store i8 %833, i8* %9, align 1, !tbaa !2450
  %834 = add i64 %808, 15
  store i64 %834, i64* %PC, align 8
  store i64 %812, i64* %810, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %835 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %836 = inttoptr i64 %835 to i32*
  store i32 25, i32* %836, align 4
  %837 = load i64, i64* %RBP, align 8
  %838 = add i64 %837, -12
  %839 = load i64, i64* %PC, align 8
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %838 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RDI, align 8, !tbaa !2428
  %844 = add i64 %839, -1331
  %845 = add i64 %839, 8
  %846 = load i64, i64* %RSP, align 8, !tbaa !2428
  %847 = add i64 %846, -8
  %848 = inttoptr i64 %847 to i64*
  store i64 %845, i64* %848, align 8
  store i64 %847, i64* %RSP, align 8, !tbaa !2428
  store i64 %844, i64* %PC, align 8, !tbaa !2428
  %849 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %844, %struct.Memory* %MEMORY.0)
  %850 = load i64, i64* %RBP, align 8
  %851 = add i64 %850, -8
  %852 = load i64, i64* %PC, align 8
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = add i64 %855, 4
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = icmp ugt i64 %855, -5
  %858 = zext i1 %857 to i8
  store i8 %858, i8* %4, align 1, !tbaa !2432
  %859 = trunc i64 %856 to i32
  %860 = and i32 %859, 255
  %861 = tail call i32 @llvm.ctpop.i32(i32 %860) #8
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  store i8 %864, i8* %5, align 1, !tbaa !2446
  %865 = xor i64 %855, %856
  %866 = lshr i64 %865, 4
  %867 = trunc i64 %866 to i8
  %868 = and i8 %867, 1
  store i8 %868, i8* %6, align 1, !tbaa !2447
  %869 = icmp eq i64 %856, 0
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %7, align 1, !tbaa !2448
  %871 = lshr i64 %856, 63
  %872 = trunc i64 %871 to i8
  store i8 %872, i8* %8, align 1, !tbaa !2449
  %873 = lshr i64 %855, 63
  %874 = xor i64 %871, %873
  %875 = add nuw nsw i64 %874, %871
  %876 = icmp eq i64 %875, 2
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %9, align 1, !tbaa !2450
  %878 = add i64 %852, 15
  store i64 %878, i64* %PC, align 8
  store i64 %856, i64* %854, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %879 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %880 = inttoptr i64 %879 to i32*
  store i32 28, i32* %880, align 4
  %881 = load i64, i64* %RBP, align 8
  %882 = add i64 %881, -12
  %883 = load i64, i64* %PC, align 8
  %884 = add i64 %883, 3
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %882 to i32*
  %886 = load i32, i32* %885, align 4
  %887 = zext i32 %886 to i64
  store i64 %887, i64* %RDI, align 8, !tbaa !2428
  %888 = add i64 %883, -1481
  %889 = add i64 %883, 8
  %890 = load i64, i64* %RSP, align 8, !tbaa !2428
  %891 = add i64 %890, -8
  %892 = inttoptr i64 %891 to i64*
  store i64 %889, i64* %892, align 8
  store i64 %891, i64* %RSP, align 8, !tbaa !2428
  store i64 %888, i64* %PC, align 8, !tbaa !2428
  %893 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %888, %struct.Memory* %MEMORY.0)
  %894 = load i64, i64* %RBP, align 8
  %895 = add i64 %894, -8
  %896 = load i64, i64* %PC, align 8
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898, align 8
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = add i64 %899, 4
  store i64 %900, i64* %RCX, align 8, !tbaa !2428
  %901 = icmp ugt i64 %899, -5
  %902 = zext i1 %901 to i8
  store i8 %902, i8* %4, align 1, !tbaa !2432
  %903 = trunc i64 %900 to i32
  %904 = and i32 %903, 255
  %905 = tail call i32 @llvm.ctpop.i32(i32 %904) #8
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  store i8 %908, i8* %5, align 1, !tbaa !2446
  %909 = xor i64 %899, %900
  %910 = lshr i64 %909, 4
  %911 = trunc i64 %910 to i8
  %912 = and i8 %911, 1
  store i8 %912, i8* %6, align 1, !tbaa !2447
  %913 = icmp eq i64 %900, 0
  %914 = zext i1 %913 to i8
  store i8 %914, i8* %7, align 1, !tbaa !2448
  %915 = lshr i64 %900, 63
  %916 = trunc i64 %915 to i8
  store i8 %916, i8* %8, align 1, !tbaa !2449
  %917 = lshr i64 %899, 63
  %918 = xor i64 %915, %917
  %919 = add nuw nsw i64 %918, %915
  %920 = icmp eq i64 %919, 2
  %921 = zext i1 %920 to i8
  store i8 %921, i8* %9, align 1, !tbaa !2450
  %922 = add i64 %896, 15
  store i64 %922, i64* %PC, align 8
  store i64 %900, i64* %898, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %923 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %924 = inttoptr i64 %923 to i32*
  store i32 7, i32* %924, align 4
  %925 = load i64, i64* %RBP, align 8
  %926 = add i64 %925, -12
  %927 = load i64, i64* %PC, align 8
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929, align 4
  %931 = zext i32 %930 to i64
  store i64 %931, i64* %RDI, align 8, !tbaa !2428
  %932 = add i64 %927, -431
  %933 = add i64 %927, 8
  %934 = load i64, i64* %RSP, align 8, !tbaa !2428
  %935 = add i64 %934, -8
  %936 = inttoptr i64 %935 to i64*
  store i64 %933, i64* %936, align 8
  store i64 %935, i64* %RSP, align 8, !tbaa !2428
  store i64 %932, i64* %PC, align 8, !tbaa !2428
  %937 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %932, %struct.Memory* %MEMORY.0)
  %938 = load i64, i64* %RBP, align 8
  %939 = add i64 %938, -8
  %940 = load i64, i64* %PC, align 8
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC, align 8
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942, align 8
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = add i64 %943, 4
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %945 = icmp ugt i64 %943, -5
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %4, align 1, !tbaa !2432
  %947 = trunc i64 %944 to i32
  %948 = and i32 %947, 255
  %949 = tail call i32 @llvm.ctpop.i32(i32 %948) #8
  %950 = trunc i32 %949 to i8
  %951 = and i8 %950, 1
  %952 = xor i8 %951, 1
  store i8 %952, i8* %5, align 1, !tbaa !2446
  %953 = xor i64 %943, %944
  %954 = lshr i64 %953, 4
  %955 = trunc i64 %954 to i8
  %956 = and i8 %955, 1
  store i8 %956, i8* %6, align 1, !tbaa !2447
  %957 = icmp eq i64 %944, 0
  %958 = zext i1 %957 to i8
  store i8 %958, i8* %7, align 1, !tbaa !2448
  %959 = lshr i64 %944, 63
  %960 = trunc i64 %959 to i8
  store i8 %960, i8* %8, align 1, !tbaa !2449
  %961 = lshr i64 %943, 63
  %962 = xor i64 %959, %961
  %963 = add nuw nsw i64 %962, %959
  %964 = icmp eq i64 %963, 2
  %965 = zext i1 %964 to i8
  store i8 %965, i8* %9, align 1, !tbaa !2450
  %966 = add i64 %940, 15
  store i64 %966, i64* %PC, align 8
  store i64 %944, i64* %942, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %967 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %968 = inttoptr i64 %967 to i32*
  store i32 30, i32* %968, align 4
  %969 = load i64, i64* %RBP, align 8
  %970 = add i64 %969, -12
  %971 = load i64, i64* %PC, align 8
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %970 to i32*
  %974 = load i32, i32* %973, align 4
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RDI, align 8, !tbaa !2428
  %976 = add i64 %971, -1581
  %977 = add i64 %971, 8
  %978 = load i64, i64* %RSP, align 8, !tbaa !2428
  %979 = add i64 %978, -8
  %980 = inttoptr i64 %979 to i64*
  store i64 %977, i64* %980, align 8
  store i64 %979, i64* %RSP, align 8, !tbaa !2428
  store i64 %976, i64* %PC, align 8, !tbaa !2428
  %981 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %976, %struct.Memory* %MEMORY.0)
  %982 = load i64, i64* %RBP, align 8
  %983 = add i64 %982, -8
  %984 = load i64, i64* %PC, align 8
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %983 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = add i64 %987, 4
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = icmp ugt i64 %987, -5
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %4, align 1, !tbaa !2432
  %991 = trunc i64 %988 to i32
  %992 = and i32 %991, 255
  %993 = tail call i32 @llvm.ctpop.i32(i32 %992) #8
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  store i8 %996, i8* %5, align 1, !tbaa !2446
  %997 = xor i64 %987, %988
  %998 = lshr i64 %997, 4
  %999 = trunc i64 %998 to i8
  %1000 = and i8 %999, 1
  store i8 %1000, i8* %6, align 1, !tbaa !2447
  %1001 = icmp eq i64 %988, 0
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %7, align 1, !tbaa !2448
  %1003 = lshr i64 %988, 63
  %1004 = trunc i64 %1003 to i8
  store i8 %1004, i8* %8, align 1, !tbaa !2449
  %1005 = lshr i64 %987, 63
  %1006 = xor i64 %1003, %1005
  %1007 = add nuw nsw i64 %1006, %1003
  %1008 = icmp eq i64 %1007, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %9, align 1, !tbaa !2450
  %1010 = add i64 %984, 15
  store i64 %1010, i64* %PC, align 8
  store i64 %988, i64* %986, align 8
  br label %block_400566

block_400893:                                     ; preds = %block_40088c, %3
  %1011 = phi i64 [ %1, %3 ], [ %.pre, %block_40088c ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40088c ]
  %1012 = load i64, i64* %RBP, align 8
  %1013 = add i64 %1012, -12
  %1014 = add i64 %1011, 3
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1013 to i32*
  %1016 = load i32, i32* %1015, align 4
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %RDI, align 8, !tbaa !2428
  %1018 = add i64 %1011, -931
  %1019 = add i64 %1011, 8
  %1020 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1021 = add i64 %1020, -8
  %1022 = inttoptr i64 %1021 to i64*
  store i64 %1019, i64* %1022, align 8
  store i64 %1021, i64* %RSP, align 8, !tbaa !2428
  store i64 %1018, i64* %PC, align 8, !tbaa !2428
  %1023 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1018, %struct.Memory* %MEMORY.1)
  %1024 = load i64, i64* %RBP, align 8
  %1025 = add i64 %1024, -8
  %1026 = load i64, i64* %PC, align 8
  %1027 = add i64 %1026, 4
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1025 to i64*
  %1029 = load i64, i64* %1028, align 8
  store i64 %1029, i64* %RAX, align 8, !tbaa !2428
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %RCX, align 8, !tbaa !2428
  %1031 = icmp ugt i64 %1029, -5
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %4, align 1, !tbaa !2432
  %1033 = trunc i64 %1030 to i32
  %1034 = and i32 %1033, 255
  %1035 = tail call i32 @llvm.ctpop.i32(i32 %1034) #8
  %1036 = trunc i32 %1035 to i8
  %1037 = and i8 %1036, 1
  %1038 = xor i8 %1037, 1
  store i8 %1038, i8* %5, align 1, !tbaa !2446
  %1039 = xor i64 %1029, %1030
  %1040 = lshr i64 %1039, 4
  %1041 = trunc i64 %1040 to i8
  %1042 = and i8 %1041, 1
  store i8 %1042, i8* %6, align 1, !tbaa !2447
  %1043 = icmp eq i64 %1030, 0
  %1044 = zext i1 %1043 to i8
  store i8 %1044, i8* %7, align 1, !tbaa !2448
  %1045 = lshr i64 %1030, 63
  %1046 = trunc i64 %1045 to i8
  store i8 %1046, i8* %8, align 1, !tbaa !2449
  %1047 = lshr i64 %1029, 63
  %1048 = xor i64 %1045, %1047
  %1049 = add nuw nsw i64 %1048, %1045
  %1050 = icmp eq i64 %1049, 2
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %9, align 1, !tbaa !2450
  %1052 = add i64 %1026, 15
  store i64 %1052, i64* %PC, align 8
  store i64 %1030, i64* %1028, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1053 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %1054 = inttoptr i64 %1053 to i32*
  store i32 12, i32* %1054, align 4
  %1055 = load i64, i64* %RBP, align 8
  %1056 = add i64 %1055, -12
  %1057 = load i64, i64* %PC, align 8
  %1058 = add i64 %1057, 3
  store i64 %1058, i64* %PC, align 8
  %1059 = inttoptr i64 %1056 to i32*
  %1060 = load i32, i32* %1059, align 4
  %1061 = zext i32 %1060 to i64
  store i64 %1061, i64* %RDI, align 8, !tbaa !2428
  %1062 = add i64 %1057, -681
  %1063 = add i64 %1057, 8
  %1064 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1065 = add i64 %1064, -8
  %1066 = inttoptr i64 %1065 to i64*
  store i64 %1063, i64* %1066, align 8
  store i64 %1065, i64* %RSP, align 8, !tbaa !2428
  store i64 %1062, i64* %PC, align 8, !tbaa !2428
  %1067 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1062, %struct.Memory* %MEMORY.0)
  %1068 = load i64, i64* %RBP, align 8
  %1069 = add i64 %1068, -8
  %1070 = load i64, i64* %PC, align 8
  %1071 = add i64 %1070, 4
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1069 to i64*
  %1073 = load i64, i64* %1072, align 8
  store i64 %1073, i64* %RAX, align 8, !tbaa !2428
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = icmp ugt i64 %1073, -5
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %4, align 1, !tbaa !2432
  %1077 = trunc i64 %1074 to i32
  %1078 = and i32 %1077, 255
  %1079 = tail call i32 @llvm.ctpop.i32(i32 %1078) #8
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  store i8 %1082, i8* %5, align 1, !tbaa !2446
  %1083 = xor i64 %1073, %1074
  %1084 = lshr i64 %1083, 4
  %1085 = trunc i64 %1084 to i8
  %1086 = and i8 %1085, 1
  store i8 %1086, i8* %6, align 1, !tbaa !2447
  %1087 = icmp eq i64 %1074, 0
  %1088 = zext i1 %1087 to i8
  store i8 %1088, i8* %7, align 1, !tbaa !2448
  %1089 = lshr i64 %1074, 63
  %1090 = trunc i64 %1089 to i8
  store i8 %1090, i8* %8, align 1, !tbaa !2449
  %1091 = lshr i64 %1073, 63
  %1092 = xor i64 %1089, %1091
  %1093 = add nuw nsw i64 %1092, %1089
  %1094 = icmp eq i64 %1093, 2
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %9, align 1, !tbaa !2450
  %1096 = add i64 %1070, 15
  store i64 %1096, i64* %PC, align 8
  store i64 %1074, i64* %1072, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1097 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %1098 = inttoptr i64 %1097 to i32*
  store i32 17, i32* %1098, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400893

block_400986:                                     ; preds = %block_400566
  %1099 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %1100 = inttoptr i64 %1099 to i32*
  store i32 22, i32* %1100, align 4
  %1101 = load i64, i64* %PC, align 8
  %1102 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %1101, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1102

block_400602:                                     ; preds = %block_400566
  %1103 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %1104 = inttoptr i64 %1103 to i32*
  store i32 4, i32* %1104, align 4
  %1105 = load i64, i64* %PC, align 8
  %1106 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1105, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1106

block_400a80:                                     ; preds = %block_400566
  %1107 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %1108 = inttoptr i64 %1107 to i32*
  store i32 27, i32* %1108, align 4
  %1109 = load i64, i64* %PC, align 8
  %1110 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1109, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1110

; <label>:1111:                                   ; preds = %block_400566
  %1112 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1112
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006d1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4006d1

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %163, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %163, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %58 = add i64 %163, -12
  store i64 4195699, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 1, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -131
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %102 = add i64 %163, -12
  store i64 4195949, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 6, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -381
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400ab2, %block_400a1c, %block_40059e, %block_4009b8, %block_400922, %block_400828, %block_40072e, %block_400634, %block_400a4e, %block_400954, %block_4005d0, %block_4009ea, %block_4008f0, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_40056c, %block_4007f6, %block_4006d1
  %.sink13 = phi i64 [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1401, %block_400ab2 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1151, %block_4009b8 ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1301, %block_400a4e ], [ 1051, %block_400954 ], [ 151, %block_4005d0 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 51, %block_40056c ], [ 701, %block_4007f6 ], [ 401, %block_4006d1 ]
  %MEMORY.0 = phi %struct.Memory* [ %1109, %block_40088c ], [ %1065, %block_400792 ], [ %1021, %block_400b16 ], [ %977, %block_400698 ], [ %933, %block_400ab2 ], [ %889, %block_400a1c ], [ %845, %block_40059e ], [ %801, %block_4009b8 ], [ %757, %block_400922 ], [ %709, %block_400828 ], [ %630, %block_40072e ], [ %582, %block_400634 ], [ %538, %block_400a4e ], [ %494, %block_400954 ], [ %444, %block_4005d0 ], [ %358, %block_4009ea ], [ %314, %block_4008f0 ], [ %270, %block_40085a ], [ %226, %block_400760 ], [ %182, %block_400ae4 ], [ %116, %block_400666 ], [ %72, %block_40056c ], [ %28, %block_4007f6 ], [ %400, %block_4006d1 ]
  %146 = bitcast i64* %RAX to i32**
  %147 = load i32*, i32** %146, align 8
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC, align 8
  %150 = load i32, i32* %147, align 4
  %151 = sext i32 %150 to i64
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = shl nsw i64 %151, 3
  %153 = add i64 %152, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %154 = add i64 %148, 11
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -40
  %159 = add i64 %148, 15
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %160, align 8
  %161 = load i64, i64* %PC, align 8
  %162 = sub i64 %161, %.sink13
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -40
  %165 = add i64 %162, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  switch i64 %167, label %1151 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4197042, label %block_400ab2
    i64 4196892, label %block_400a1c
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4196092, label %block_4006fc
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195942, label %block_400666
    i64 4197092, label %block_400ae4
    i64 4196292, label %block_4007c4
    i64 4196692, label %block_400954
    i64 4195892, label %block_400634
    i64 4196142, label %block_40072e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196792, label %block_4009b8
  ]

block_400ae4:                                     ; preds = %block_400566
  %168 = add i64 %163, -12
  store i64 4197099, i64* %PC, align 8
  %169 = inttoptr i64 %168 to i32*
  store i32 29, i32* %169, align 4
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -12
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 3
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %171 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %RDI, align 8, !tbaa !2428
  %177 = add i64 %172, -1531
  %178 = add i64 %172, 8
  %179 = load i64, i64* %RSP, align 8, !tbaa !2428
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181, align 8
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  %182 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %177, %struct.Memory* %MEMORY.0)
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -8
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = add i64 %188, 4
  store i64 %189, i64* %RCX, align 8, !tbaa !2428
  %190 = icmp ugt i64 %188, -5
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %4, align 1, !tbaa !2432
  %192 = trunc i64 %189 to i32
  %193 = and i32 %192, 255
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193) #8
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  store i8 %197, i8* %5, align 1, !tbaa !2446
  %198 = xor i64 %188, %189
  %199 = lshr i64 %198, 4
  %200 = trunc i64 %199 to i8
  %201 = and i8 %200, 1
  store i8 %201, i8* %6, align 1, !tbaa !2447
  %202 = icmp eq i64 %189, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %7, align 1, !tbaa !2448
  %204 = lshr i64 %189, 63
  %205 = trunc i64 %204 to i8
  store i8 %205, i8* %8, align 1, !tbaa !2449
  %206 = lshr i64 %188, 63
  %207 = xor i64 %204, %206
  %208 = add nuw nsw i64 %207, %204
  %209 = icmp eq i64 %208, 2
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %9, align 1, !tbaa !2450
  %211 = add i64 %185, 15
  store i64 %211, i64* %PC, align 8
  store i64 %189, i64* %187, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %212 = add i64 %163, -12
  store i64 4196199, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 11, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -631
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %256 = add i64 %163, -12
  store i64 4196449, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 16, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -881
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %300 = add i64 %163, -12
  store i64 4196599, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 19, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -1031
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %344 = add i64 %163, -12
  store i64 4196849, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 24, i32* %345, align 4
  %346 = load i64, i64* %RBP, align 8
  %347 = add i64 %346, -12
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %RDI, align 8, !tbaa !2428
  %353 = add i64 %348, -1281
  %354 = add i64 %348, 8
  %355 = load i64, i64* %RSP, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %354, i64* %357, align 8
  store i64 %356, i64* %RSP, align 8, !tbaa !2428
  store i64 %353, i64* %PC, align 8, !tbaa !2428
  %358 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %353, %struct.Memory* %MEMORY.0)
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -8
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %364, 4
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = icmp ugt i64 %364, -5
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %4, align 1, !tbaa !2432
  %368 = trunc i64 %365 to i32
  %369 = and i32 %368, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #8
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %5, align 1, !tbaa !2446
  %374 = xor i64 %364, %365
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %6, align 1, !tbaa !2447
  %378 = icmp eq i64 %365, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %7, align 1, !tbaa !2448
  %380 = lshr i64 %365, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %8, align 1, !tbaa !2449
  %382 = lshr i64 %364, 63
  %383 = xor i64 %380, %382
  %384 = add nuw nsw i64 %383, %380
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %9, align 1, !tbaa !2450
  %387 = add i64 %361, 15
  store i64 %387, i64* %PC, align 8
  store i64 %365, i64* %363, align 8
  br label %block_400566

block_4006d1:                                     ; preds = %block_4006ca, %3
  %388 = phi i64 [ %1, %3 ], [ %.pre, %block_4006ca ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4006ca ]
  %389 = load i64, i64* %RBP, align 8
  %390 = add i64 %389, -12
  %391 = add i64 %388, 3
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i64
  store i64 %394, i64* %RDI, align 8, !tbaa !2428
  %395 = add i64 %388, -481
  %396 = add i64 %388, 8
  %397 = load i64, i64* %RSP, align 8, !tbaa !2428
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %396, i64* %399, align 8
  store i64 %398, i64* %RSP, align 8, !tbaa !2428
  store i64 %395, i64* %PC, align 8, !tbaa !2428
  %400 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %395, %struct.Memory* %MEMORY.1)
  %401 = load i64, i64* %RBP, align 8
  %402 = add i64 %401, -8
  %403 = load i64, i64* %PC, align 8
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405, align 8
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = add i64 %406, 4
  store i64 %407, i64* %RCX, align 8, !tbaa !2428
  %408 = icmp ugt i64 %406, -5
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %4, align 1, !tbaa !2432
  %410 = trunc i64 %407 to i32
  %411 = and i32 %410, 255
  %412 = tail call i32 @llvm.ctpop.i32(i32 %411) #8
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  store i8 %415, i8* %5, align 1, !tbaa !2446
  %416 = xor i64 %406, %407
  %417 = lshr i64 %416, 4
  %418 = trunc i64 %417 to i8
  %419 = and i8 %418, 1
  store i8 %419, i8* %6, align 1, !tbaa !2447
  %420 = icmp eq i64 %407, 0
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %7, align 1, !tbaa !2448
  %422 = lshr i64 %407, 63
  %423 = trunc i64 %422 to i8
  store i8 %423, i8* %8, align 1, !tbaa !2449
  %424 = lshr i64 %406, 63
  %425 = xor i64 %422, %424
  %426 = add nuw nsw i64 %425, %422
  %427 = icmp eq i64 %426, 2
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %9, align 1, !tbaa !2450
  %429 = add i64 %403, 15
  store i64 %429, i64* %PC, align 8
  store i64 %407, i64* %405, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %430 = add i64 %163, -12
  store i64 4195799, i64* %PC, align 8
  %431 = inttoptr i64 %430 to i32*
  store i32 3, i32* %431, align 4
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -12
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 3
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = zext i32 %437 to i64
  store i64 %438, i64* %RDI, align 8, !tbaa !2428
  %439 = add i64 %434, -231
  %440 = add i64 %434, 8
  %441 = load i64, i64* %RSP, align 8, !tbaa !2428
  %442 = add i64 %441, -8
  %443 = inttoptr i64 %442 to i64*
  store i64 %440, i64* %443, align 8
  store i64 %442, i64* %RSP, align 8, !tbaa !2428
  store i64 %439, i64* %PC, align 8, !tbaa !2428
  %444 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %439, %struct.Memory* %MEMORY.0)
  %445 = load i64, i64* %RBP, align 8
  %446 = add i64 %445, -8
  %447 = load i64, i64* %PC, align 8
  %448 = add i64 %447, 4
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %446 to i64*
  %450 = load i64, i64* %449, align 8
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = add i64 %450, 4
  store i64 %451, i64* %RCX, align 8, !tbaa !2428
  %452 = icmp ugt i64 %450, -5
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %4, align 1, !tbaa !2432
  %454 = trunc i64 %451 to i32
  %455 = and i32 %454, 255
  %456 = tail call i32 @llvm.ctpop.i32(i32 %455) #8
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  store i8 %459, i8* %5, align 1, !tbaa !2446
  %460 = xor i64 %450, %451
  %461 = lshr i64 %460, 4
  %462 = trunc i64 %461 to i8
  %463 = and i8 %462, 1
  store i8 %463, i8* %6, align 1, !tbaa !2447
  %464 = icmp eq i64 %451, 0
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %7, align 1, !tbaa !2448
  %466 = lshr i64 %451, 63
  %467 = trunc i64 %466 to i8
  store i8 %467, i8* %8, align 1, !tbaa !2449
  %468 = lshr i64 %450, 63
  %469 = xor i64 %466, %468
  %470 = add nuw nsw i64 %469, %466
  %471 = icmp eq i64 %470, 2
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %9, align 1, !tbaa !2450
  %473 = add i64 %447, 15
  store i64 %473, i64* %PC, align 8
  store i64 %451, i64* %449, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %474 = add i64 %163, -12
  store i64 4196049, i64* %PC, align 8
  %475 = inttoptr i64 %474 to i32*
  store i32 8, i32* %475, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4006d1

block_4007c4:                                     ; preds = %block_400566
  %476 = add i64 %163, -12
  store i64 4196299, i64* %PC, align 8
  %477 = inttoptr i64 %476 to i32*
  store i32 13, i32* %477, align 4
  %478 = load i64, i64* %PC, align 8
  %479 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %478, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %479

block_400954:                                     ; preds = %block_400566
  %480 = add i64 %163, -12
  store i64 4196699, i64* %PC, align 8
  %481 = inttoptr i64 %480 to i32*
  store i32 21, i32* %481, align 4
  %482 = load i64, i64* %RBP, align 8
  %483 = add i64 %482, -12
  %484 = load i64, i64* %PC, align 8
  %485 = add i64 %484, 3
  store i64 %485, i64* %PC, align 8
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486, align 4
  %488 = zext i32 %487 to i64
  store i64 %488, i64* %RDI, align 8, !tbaa !2428
  %489 = add i64 %484, -1131
  %490 = add i64 %484, 8
  %491 = load i64, i64* %RSP, align 8, !tbaa !2428
  %492 = add i64 %491, -8
  %493 = inttoptr i64 %492 to i64*
  store i64 %490, i64* %493, align 8
  store i64 %492, i64* %RSP, align 8, !tbaa !2428
  store i64 %489, i64* %PC, align 8, !tbaa !2428
  %494 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %489, %struct.Memory* %MEMORY.0)
  %495 = load i64, i64* %RBP, align 8
  %496 = add i64 %495, -8
  %497 = load i64, i64* %PC, align 8
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = add i64 %500, 4
  store i64 %501, i64* %RCX, align 8, !tbaa !2428
  %502 = icmp ugt i64 %500, -5
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %4, align 1, !tbaa !2432
  %504 = trunc i64 %501 to i32
  %505 = and i32 %504, 255
  %506 = tail call i32 @llvm.ctpop.i32(i32 %505) #8
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  store i8 %509, i8* %5, align 1, !tbaa !2446
  %510 = xor i64 %500, %501
  %511 = lshr i64 %510, 4
  %512 = trunc i64 %511 to i8
  %513 = and i8 %512, 1
  store i8 %513, i8* %6, align 1, !tbaa !2447
  %514 = icmp eq i64 %501, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %7, align 1, !tbaa !2448
  %516 = lshr i64 %501, 63
  %517 = trunc i64 %516 to i8
  store i8 %517, i8* %8, align 1, !tbaa !2449
  %518 = lshr i64 %500, 63
  %519 = xor i64 %516, %518
  %520 = add nuw nsw i64 %519, %516
  %521 = icmp eq i64 %520, 2
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %9, align 1, !tbaa !2450
  %523 = add i64 %497, 15
  store i64 %523, i64* %PC, align 8
  store i64 %501, i64* %499, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %524 = add i64 %163, -12
  store i64 4196949, i64* %PC, align 8
  %525 = inttoptr i64 %524 to i32*
  store i32 26, i32* %525, align 4
  %526 = load i64, i64* %RBP, align 8
  %527 = add i64 %526, -12
  %528 = load i64, i64* %PC, align 8
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %527 to i32*
  %531 = load i32, i32* %530, align 4
  %532 = zext i32 %531 to i64
  store i64 %532, i64* %RDI, align 8, !tbaa !2428
  %533 = add i64 %528, -1381
  %534 = add i64 %528, 8
  %535 = load i64, i64* %RSP, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %534, i64* %537, align 8
  store i64 %536, i64* %RSP, align 8, !tbaa !2428
  store i64 %533, i64* %PC, align 8, !tbaa !2428
  %538 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %533, %struct.Memory* %MEMORY.0)
  %539 = load i64, i64* %RBP, align 8
  %540 = add i64 %539, -8
  %541 = load i64, i64* %PC, align 8
  %542 = add i64 %541, 4
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %540 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %RAX, align 8, !tbaa !2428
  %545 = add i64 %544, 4
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  %546 = icmp ugt i64 %544, -5
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %4, align 1, !tbaa !2432
  %548 = trunc i64 %545 to i32
  %549 = and i32 %548, 255
  %550 = tail call i32 @llvm.ctpop.i32(i32 %549) #8
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  store i8 %553, i8* %5, align 1, !tbaa !2446
  %554 = xor i64 %544, %545
  %555 = lshr i64 %554, 4
  %556 = trunc i64 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %6, align 1, !tbaa !2447
  %558 = icmp eq i64 %545, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %7, align 1, !tbaa !2448
  %560 = lshr i64 %545, 63
  %561 = trunc i64 %560 to i8
  store i8 %561, i8* %8, align 1, !tbaa !2449
  %562 = lshr i64 %544, 63
  %563 = xor i64 %560, %562
  %564 = add nuw nsw i64 %563, %560
  %565 = icmp eq i64 %564, 2
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %9, align 1, !tbaa !2450
  %567 = add i64 %541, 15
  store i64 %567, i64* %PC, align 8
  store i64 %545, i64* %543, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %568 = add i64 %163, -12
  store i64 4195899, i64* %PC, align 8
  %569 = inttoptr i64 %568 to i32*
  store i32 5, i32* %569, align 4
  %570 = load i64, i64* %RBP, align 8
  %571 = add i64 %570, -12
  %572 = load i64, i64* %PC, align 8
  %573 = add i64 %572, 3
  store i64 %573, i64* %PC, align 8
  %574 = inttoptr i64 %571 to i32*
  %575 = load i32, i32* %574, align 4
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RDI, align 8, !tbaa !2428
  %577 = add i64 %572, -331
  %578 = add i64 %572, 8
  %579 = load i64, i64* %RSP, align 8, !tbaa !2428
  %580 = add i64 %579, -8
  %581 = inttoptr i64 %580 to i64*
  store i64 %578, i64* %581, align 8
  store i64 %580, i64* %RSP, align 8, !tbaa !2428
  store i64 %577, i64* %PC, align 8, !tbaa !2428
  %582 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %577, %struct.Memory* %MEMORY.0)
  %583 = load i64, i64* %RBP, align 8
  %584 = add i64 %583, -8
  %585 = load i64, i64* %PC, align 8
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = add i64 %588, 4
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %590 = icmp ugt i64 %588, -5
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %4, align 1, !tbaa !2432
  %592 = trunc i64 %589 to i32
  %593 = and i32 %592, 255
  %594 = tail call i32 @llvm.ctpop.i32(i32 %593) #8
  %595 = trunc i32 %594 to i8
  %596 = and i8 %595, 1
  %597 = xor i8 %596, 1
  store i8 %597, i8* %5, align 1, !tbaa !2446
  %598 = xor i64 %588, %589
  %599 = lshr i64 %598, 4
  %600 = trunc i64 %599 to i8
  %601 = and i8 %600, 1
  store i8 %601, i8* %6, align 1, !tbaa !2447
  %602 = icmp eq i64 %589, 0
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %7, align 1, !tbaa !2448
  %604 = lshr i64 %589, 63
  %605 = trunc i64 %604 to i8
  store i8 %605, i8* %8, align 1, !tbaa !2449
  %606 = lshr i64 %588, 63
  %607 = xor i64 %604, %606
  %608 = add nuw nsw i64 %607, %604
  %609 = icmp eq i64 %608, 2
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %9, align 1, !tbaa !2450
  %611 = add i64 %585, 15
  store i64 %611, i64* %PC, align 8
  store i64 %589, i64* %587, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %612 = add i64 %163, -12
  store i64 4197199, i64* %PC, align 8
  %613 = inttoptr i64 %612 to i32*
  store i32 31, i32* %613, align 4
  %614 = load i64, i64* %PC, align 8
  %615 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %614, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %615

block_40072e:                                     ; preds = %block_400566
  %616 = add i64 %163, -12
  store i64 4196149, i64* %PC, align 8
  %617 = inttoptr i64 %616 to i32*
  store i32 10, i32* %617, align 4
  %618 = load i64, i64* %RBP, align 8
  %619 = add i64 %618, -12
  %620 = load i64, i64* %PC, align 8
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %619 to i32*
  %623 = load i32, i32* %622, align 4
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %RDI, align 8, !tbaa !2428
  %625 = add i64 %620, -581
  %626 = add i64 %620, 8
  %627 = load i64, i64* %RSP, align 8, !tbaa !2428
  %628 = add i64 %627, -8
  %629 = inttoptr i64 %628 to i64*
  store i64 %626, i64* %629, align 8
  store i64 %628, i64* %RSP, align 8, !tbaa !2428
  store i64 %625, i64* %PC, align 8, !tbaa !2428
  %630 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %625, %struct.Memory* %MEMORY.0)
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -8
  %633 = load i64, i64* %PC, align 8
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %632 to i64*
  %636 = load i64, i64* %635, align 8
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = add i64 %636, 4
  store i64 %637, i64* %RCX, align 8, !tbaa !2428
  %638 = icmp ugt i64 %636, -5
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %4, align 1, !tbaa !2432
  %640 = trunc i64 %637 to i32
  %641 = and i32 %640, 255
  %642 = tail call i32 @llvm.ctpop.i32(i32 %641) #8
  %643 = trunc i32 %642 to i8
  %644 = and i8 %643, 1
  %645 = xor i8 %644, 1
  store i8 %645, i8* %5, align 1, !tbaa !2446
  %646 = xor i64 %636, %637
  %647 = lshr i64 %646, 4
  %648 = trunc i64 %647 to i8
  %649 = and i8 %648, 1
  store i8 %649, i8* %6, align 1, !tbaa !2447
  %650 = icmp eq i64 %637, 0
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %7, align 1, !tbaa !2448
  %652 = lshr i64 %637, 63
  %653 = trunc i64 %652 to i8
  store i8 %653, i8* %8, align 1, !tbaa !2449
  %654 = lshr i64 %636, 63
  %655 = xor i64 %652, %654
  %656 = add nuw nsw i64 %655, %652
  %657 = icmp eq i64 %656, 2
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %9, align 1, !tbaa !2450
  %659 = add i64 %633, 15
  store i64 %659, i64* %PC, align 8
  store i64 %637, i64* %635, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %660 = add i64 %163, -12
  store i64 4195680, i64* %PC, align 8
  %661 = inttoptr i64 %660 to i32*
  store i32 0, i32* %661, align 4
  %662 = load i64, i64* %RSP, align 8
  %663 = load i64, i64* %PC, align 8
  %664 = add i64 %662, 48
  store i64 %664, i64* %RSP, align 8, !tbaa !2428
  %665 = icmp ugt i64 %662, -49
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %4, align 1, !tbaa !2432
  %667 = trunc i64 %664 to i32
  %668 = and i32 %667, 255
  %669 = tail call i32 @llvm.ctpop.i32(i32 %668) #8
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  store i8 %672, i8* %5, align 1, !tbaa !2446
  %673 = xor i64 %662, 16
  %674 = xor i64 %673, %664
  %675 = lshr i64 %674, 4
  %676 = trunc i64 %675 to i8
  %677 = and i8 %676, 1
  store i8 %677, i8* %6, align 1, !tbaa !2447
  %678 = icmp eq i64 %664, 0
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %7, align 1, !tbaa !2448
  %680 = lshr i64 %664, 63
  %681 = trunc i64 %680 to i8
  store i8 %681, i8* %8, align 1, !tbaa !2449
  %682 = lshr i64 %662, 63
  %683 = xor i64 %680, %682
  %684 = add nuw nsw i64 %683, %680
  %685 = icmp eq i64 %684, 2
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %9, align 1, !tbaa !2450
  %687 = add i64 %663, 5
  store i64 %687, i64* %PC, align 8
  %688 = add i64 %662, 56
  %689 = inttoptr i64 %664 to i64*
  %690 = load i64, i64* %689, align 8
  store i64 %690, i64* %RBP, align 8, !tbaa !2428
  store i64 %688, i64* %RSP, align 8, !tbaa !2428
  %691 = add i64 %663, 6
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %688 to i64*
  %693 = load i64, i64* %692, align 8
  store i64 %693, i64* %PC, align 8, !tbaa !2428
  %694 = add i64 %662, 64
  store i64 %694, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400828:                                     ; preds = %block_400566
  %695 = add i64 %163, -12
  store i64 4196399, i64* %PC, align 8
  %696 = inttoptr i64 %695 to i32*
  store i32 15, i32* %696, align 4
  %697 = load i64, i64* %RBP, align 8
  %698 = add i64 %697, -12
  %699 = load i64, i64* %PC, align 8
  %700 = add i64 %699, 3
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701, align 4
  %703 = zext i32 %702 to i64
  store i64 %703, i64* %RDI, align 8, !tbaa !2428
  %704 = add i64 %699, -831
  %705 = add i64 %699, 8
  %706 = load i64, i64* %RSP, align 8, !tbaa !2428
  %707 = add i64 %706, -8
  %708 = inttoptr i64 %707 to i64*
  store i64 %705, i64* %708, align 8
  store i64 %707, i64* %RSP, align 8, !tbaa !2428
  store i64 %704, i64* %PC, align 8, !tbaa !2428
  %709 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %704, %struct.Memory* %MEMORY.0)
  %710 = load i64, i64* %RBP, align 8
  %711 = add i64 %710, -8
  %712 = load i64, i64* %PC, align 8
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %711 to i64*
  %715 = load i64, i64* %714, align 8
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = add i64 %715, 4
  store i64 %716, i64* %RCX, align 8, !tbaa !2428
  %717 = icmp ugt i64 %715, -5
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %4, align 1, !tbaa !2432
  %719 = trunc i64 %716 to i32
  %720 = and i32 %719, 255
  %721 = tail call i32 @llvm.ctpop.i32(i32 %720) #8
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = xor i8 %723, 1
  store i8 %724, i8* %5, align 1, !tbaa !2446
  %725 = xor i64 %715, %716
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  store i8 %728, i8* %6, align 1, !tbaa !2447
  %729 = icmp eq i64 %716, 0
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %7, align 1, !tbaa !2448
  %731 = lshr i64 %716, 63
  %732 = trunc i64 %731 to i8
  store i8 %732, i8* %8, align 1, !tbaa !2449
  %733 = lshr i64 %715, 63
  %734 = xor i64 %731, %733
  %735 = add nuw nsw i64 %734, %731
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %9, align 1, !tbaa !2450
  %738 = add i64 %712, 15
  store i64 %738, i64* %PC, align 8
  store i64 %716, i64* %714, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %739 = add i64 %163, -12
  store i64 4196549, i64* %PC, align 8
  %740 = inttoptr i64 %739 to i32*
  store i32 18, i32* %740, align 4
  %741 = load i64, i64* %PC, align 8
  %742 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %741, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %742

block_400922:                                     ; preds = %block_400566
  %743 = add i64 %163, -12
  store i64 4196649, i64* %PC, align 8
  %744 = inttoptr i64 %743 to i32*
  store i32 20, i32* %744, align 4
  %745 = load i64, i64* %RBP, align 8
  %746 = add i64 %745, -12
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %746 to i32*
  %750 = load i32, i32* %749, align 4
  %751 = zext i32 %750 to i64
  store i64 %751, i64* %RDI, align 8, !tbaa !2428
  %752 = add i64 %747, -1081
  %753 = add i64 %747, 8
  %754 = load i64, i64* %RSP, align 8, !tbaa !2428
  %755 = add i64 %754, -8
  %756 = inttoptr i64 %755 to i64*
  store i64 %753, i64* %756, align 8
  store i64 %755, i64* %RSP, align 8, !tbaa !2428
  store i64 %752, i64* %PC, align 8, !tbaa !2428
  %757 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %752, %struct.Memory* %MEMORY.0)
  %758 = load i64, i64* %RBP, align 8
  %759 = add i64 %758, -8
  %760 = load i64, i64* %PC, align 8
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %759 to i64*
  %763 = load i64, i64* %762, align 8
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = add i64 %763, 4
  store i64 %764, i64* %RCX, align 8, !tbaa !2428
  %765 = icmp ugt i64 %763, -5
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %4, align 1, !tbaa !2432
  %767 = trunc i64 %764 to i32
  %768 = and i32 %767, 255
  %769 = tail call i32 @llvm.ctpop.i32(i32 %768) #8
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  store i8 %772, i8* %5, align 1, !tbaa !2446
  %773 = xor i64 %763, %764
  %774 = lshr i64 %773, 4
  %775 = trunc i64 %774 to i8
  %776 = and i8 %775, 1
  store i8 %776, i8* %6, align 1, !tbaa !2447
  %777 = icmp eq i64 %764, 0
  %778 = zext i1 %777 to i8
  store i8 %778, i8* %7, align 1, !tbaa !2448
  %779 = lshr i64 %764, 63
  %780 = trunc i64 %779 to i8
  store i8 %780, i8* %8, align 1, !tbaa !2449
  %781 = lshr i64 %763, 63
  %782 = xor i64 %779, %781
  %783 = add nuw nsw i64 %782, %779
  %784 = icmp eq i64 %783, 2
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %9, align 1, !tbaa !2450
  %786 = add i64 %760, 15
  store i64 %786, i64* %PC, align 8
  store i64 %764, i64* %762, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %787 = add i64 %163, -12
  store i64 4196799, i64* %PC, align 8
  %788 = inttoptr i64 %787 to i32*
  store i32 23, i32* %788, align 4
  %789 = load i64, i64* %RBP, align 8
  %790 = add i64 %789, -12
  %791 = load i64, i64* %PC, align 8
  %792 = add i64 %791, 3
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %790 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = zext i32 %794 to i64
  store i64 %795, i64* %RDI, align 8, !tbaa !2428
  %796 = add i64 %791, -1231
  %797 = add i64 %791, 8
  %798 = load i64, i64* %RSP, align 8, !tbaa !2428
  %799 = add i64 %798, -8
  %800 = inttoptr i64 %799 to i64*
  store i64 %797, i64* %800, align 8
  store i64 %799, i64* %RSP, align 8, !tbaa !2428
  store i64 %796, i64* %PC, align 8, !tbaa !2428
  %801 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %796, %struct.Memory* %MEMORY.0)
  %802 = load i64, i64* %RBP, align 8
  %803 = add i64 %802, -8
  %804 = load i64, i64* %PC, align 8
  %805 = add i64 %804, 4
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %803 to i64*
  %807 = load i64, i64* %806, align 8
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = add i64 %807, 4
  store i64 %808, i64* %RCX, align 8, !tbaa !2428
  %809 = icmp ugt i64 %807, -5
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %4, align 1, !tbaa !2432
  %811 = trunc i64 %808 to i32
  %812 = and i32 %811, 255
  %813 = tail call i32 @llvm.ctpop.i32(i32 %812) #8
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  %816 = xor i8 %815, 1
  store i8 %816, i8* %5, align 1, !tbaa !2446
  %817 = xor i64 %807, %808
  %818 = lshr i64 %817, 4
  %819 = trunc i64 %818 to i8
  %820 = and i8 %819, 1
  store i8 %820, i8* %6, align 1, !tbaa !2447
  %821 = icmp eq i64 %808, 0
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %7, align 1, !tbaa !2448
  %823 = lshr i64 %808, 63
  %824 = trunc i64 %823 to i8
  store i8 %824, i8* %8, align 1, !tbaa !2449
  %825 = lshr i64 %807, 63
  %826 = xor i64 %823, %825
  %827 = add nuw nsw i64 %826, %823
  %828 = icmp eq i64 %827, 2
  %829 = zext i1 %828 to i8
  store i8 %829, i8* %9, align 1, !tbaa !2450
  %830 = add i64 %804, 15
  store i64 %830, i64* %PC, align 8
  store i64 %808, i64* %806, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %831 = add i64 %163, -12
  store i64 4195749, i64* %PC, align 8
  %832 = inttoptr i64 %831 to i32*
  store i32 2, i32* %832, align 4
  %833 = load i64, i64* %RBP, align 8
  %834 = add i64 %833, -12
  %835 = load i64, i64* %PC, align 8
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %834 to i32*
  %838 = load i32, i32* %837, align 4
  %839 = zext i32 %838 to i64
  store i64 %839, i64* %RDI, align 8, !tbaa !2428
  %840 = add i64 %835, -181
  %841 = add i64 %835, 8
  %842 = load i64, i64* %RSP, align 8, !tbaa !2428
  %843 = add i64 %842, -8
  %844 = inttoptr i64 %843 to i64*
  store i64 %841, i64* %844, align 8
  store i64 %843, i64* %RSP, align 8, !tbaa !2428
  store i64 %840, i64* %PC, align 8, !tbaa !2428
  %845 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %840, %struct.Memory* %MEMORY.0)
  %846 = load i64, i64* %RBP, align 8
  %847 = add i64 %846, -8
  %848 = load i64, i64* %PC, align 8
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %847 to i64*
  %851 = load i64, i64* %850, align 8
  store i64 %851, i64* %RAX, align 8, !tbaa !2428
  %852 = add i64 %851, 4
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = icmp ugt i64 %851, -5
  %854 = zext i1 %853 to i8
  store i8 %854, i8* %4, align 1, !tbaa !2432
  %855 = trunc i64 %852 to i32
  %856 = and i32 %855, 255
  %857 = tail call i32 @llvm.ctpop.i32(i32 %856) #8
  %858 = trunc i32 %857 to i8
  %859 = and i8 %858, 1
  %860 = xor i8 %859, 1
  store i8 %860, i8* %5, align 1, !tbaa !2446
  %861 = xor i64 %851, %852
  %862 = lshr i64 %861, 4
  %863 = trunc i64 %862 to i8
  %864 = and i8 %863, 1
  store i8 %864, i8* %6, align 1, !tbaa !2447
  %865 = icmp eq i64 %852, 0
  %866 = zext i1 %865 to i8
  store i8 %866, i8* %7, align 1, !tbaa !2448
  %867 = lshr i64 %852, 63
  %868 = trunc i64 %867 to i8
  store i8 %868, i8* %8, align 1, !tbaa !2449
  %869 = lshr i64 %851, 63
  %870 = xor i64 %867, %869
  %871 = add nuw nsw i64 %870, %867
  %872 = icmp eq i64 %871, 2
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %9, align 1, !tbaa !2450
  %874 = add i64 %848, 15
  store i64 %874, i64* %PC, align 8
  store i64 %852, i64* %850, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %875 = add i64 %163, -12
  store i64 4196899, i64* %PC, align 8
  %876 = inttoptr i64 %875 to i32*
  store i32 25, i32* %876, align 4
  %877 = load i64, i64* %RBP, align 8
  %878 = add i64 %877, -12
  %879 = load i64, i64* %PC, align 8
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %878 to i32*
  %882 = load i32, i32* %881, align 4
  %883 = zext i32 %882 to i64
  store i64 %883, i64* %RDI, align 8, !tbaa !2428
  %884 = add i64 %879, -1331
  %885 = add i64 %879, 8
  %886 = load i64, i64* %RSP, align 8, !tbaa !2428
  %887 = add i64 %886, -8
  %888 = inttoptr i64 %887 to i64*
  store i64 %885, i64* %888, align 8
  store i64 %887, i64* %RSP, align 8, !tbaa !2428
  store i64 %884, i64* %PC, align 8, !tbaa !2428
  %889 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %884, %struct.Memory* %MEMORY.0)
  %890 = load i64, i64* %RBP, align 8
  %891 = add i64 %890, -8
  %892 = load i64, i64* %PC, align 8
  %893 = add i64 %892, 4
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %891 to i64*
  %895 = load i64, i64* %894, align 8
  store i64 %895, i64* %RAX, align 8, !tbaa !2428
  %896 = add i64 %895, 4
  store i64 %896, i64* %RCX, align 8, !tbaa !2428
  %897 = icmp ugt i64 %895, -5
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %4, align 1, !tbaa !2432
  %899 = trunc i64 %896 to i32
  %900 = and i32 %899, 255
  %901 = tail call i32 @llvm.ctpop.i32(i32 %900) #8
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  %904 = xor i8 %903, 1
  store i8 %904, i8* %5, align 1, !tbaa !2446
  %905 = xor i64 %895, %896
  %906 = lshr i64 %905, 4
  %907 = trunc i64 %906 to i8
  %908 = and i8 %907, 1
  store i8 %908, i8* %6, align 1, !tbaa !2447
  %909 = icmp eq i64 %896, 0
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %7, align 1, !tbaa !2448
  %911 = lshr i64 %896, 63
  %912 = trunc i64 %911 to i8
  store i8 %912, i8* %8, align 1, !tbaa !2449
  %913 = lshr i64 %895, 63
  %914 = xor i64 %911, %913
  %915 = add nuw nsw i64 %914, %911
  %916 = icmp eq i64 %915, 2
  %917 = zext i1 %916 to i8
  store i8 %917, i8* %9, align 1, !tbaa !2450
  %918 = add i64 %892, 15
  store i64 %918, i64* %PC, align 8
  store i64 %896, i64* %894, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %919 = add i64 %163, -12
  store i64 4197049, i64* %PC, align 8
  %920 = inttoptr i64 %919 to i32*
  store i32 28, i32* %920, align 4
  %921 = load i64, i64* %RBP, align 8
  %922 = add i64 %921, -12
  %923 = load i64, i64* %PC, align 8
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC, align 8
  %925 = inttoptr i64 %922 to i32*
  %926 = load i32, i32* %925, align 4
  %927 = zext i32 %926 to i64
  store i64 %927, i64* %RDI, align 8, !tbaa !2428
  %928 = add i64 %923, -1481
  %929 = add i64 %923, 8
  %930 = load i64, i64* %RSP, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %929, i64* %932, align 8
  store i64 %931, i64* %RSP, align 8, !tbaa !2428
  store i64 %928, i64* %PC, align 8, !tbaa !2428
  %933 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %928, %struct.Memory* %MEMORY.0)
  %934 = load i64, i64* %RBP, align 8
  %935 = add i64 %934, -8
  %936 = load i64, i64* %PC, align 8
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %935 to i64*
  %939 = load i64, i64* %938, align 8
  store i64 %939, i64* %RAX, align 8, !tbaa !2428
  %940 = add i64 %939, 4
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %941 = icmp ugt i64 %939, -5
  %942 = zext i1 %941 to i8
  store i8 %942, i8* %4, align 1, !tbaa !2432
  %943 = trunc i64 %940 to i32
  %944 = and i32 %943, 255
  %945 = tail call i32 @llvm.ctpop.i32(i32 %944) #8
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  %948 = xor i8 %947, 1
  store i8 %948, i8* %5, align 1, !tbaa !2446
  %949 = xor i64 %939, %940
  %950 = lshr i64 %949, 4
  %951 = trunc i64 %950 to i8
  %952 = and i8 %951, 1
  store i8 %952, i8* %6, align 1, !tbaa !2447
  %953 = icmp eq i64 %940, 0
  %954 = zext i1 %953 to i8
  store i8 %954, i8* %7, align 1, !tbaa !2448
  %955 = lshr i64 %940, 63
  %956 = trunc i64 %955 to i8
  store i8 %956, i8* %8, align 1, !tbaa !2449
  %957 = lshr i64 %939, 63
  %958 = xor i64 %955, %957
  %959 = add nuw nsw i64 %958, %955
  %960 = icmp eq i64 %959, 2
  %961 = zext i1 %960 to i8
  store i8 %961, i8* %9, align 1, !tbaa !2450
  %962 = add i64 %936, 15
  store i64 %962, i64* %PC, align 8
  store i64 %940, i64* %938, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %963 = add i64 %163, -12
  store i64 4195999, i64* %PC, align 8
  %964 = inttoptr i64 %963 to i32*
  store i32 7, i32* %964, align 4
  %965 = load i64, i64* %RBP, align 8
  %966 = add i64 %965, -12
  %967 = load i64, i64* %PC, align 8
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %966 to i32*
  %970 = load i32, i32* %969, align 4
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %RDI, align 8, !tbaa !2428
  %972 = add i64 %967, -431
  %973 = add i64 %967, 8
  %974 = load i64, i64* %RSP, align 8, !tbaa !2428
  %975 = add i64 %974, -8
  %976 = inttoptr i64 %975 to i64*
  store i64 %973, i64* %976, align 8
  store i64 %975, i64* %RSP, align 8, !tbaa !2428
  store i64 %972, i64* %PC, align 8, !tbaa !2428
  %977 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %972, %struct.Memory* %MEMORY.0)
  %978 = load i64, i64* %RBP, align 8
  %979 = add i64 %978, -8
  %980 = load i64, i64* %PC, align 8
  %981 = add i64 %980, 4
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %979 to i64*
  %983 = load i64, i64* %982, align 8
  store i64 %983, i64* %RAX, align 8, !tbaa !2428
  %984 = add i64 %983, 4
  store i64 %984, i64* %RCX, align 8, !tbaa !2428
  %985 = icmp ugt i64 %983, -5
  %986 = zext i1 %985 to i8
  store i8 %986, i8* %4, align 1, !tbaa !2432
  %987 = trunc i64 %984 to i32
  %988 = and i32 %987, 255
  %989 = tail call i32 @llvm.ctpop.i32(i32 %988) #8
  %990 = trunc i32 %989 to i8
  %991 = and i8 %990, 1
  %992 = xor i8 %991, 1
  store i8 %992, i8* %5, align 1, !tbaa !2446
  %993 = xor i64 %983, %984
  %994 = lshr i64 %993, 4
  %995 = trunc i64 %994 to i8
  %996 = and i8 %995, 1
  store i8 %996, i8* %6, align 1, !tbaa !2447
  %997 = icmp eq i64 %984, 0
  %998 = zext i1 %997 to i8
  store i8 %998, i8* %7, align 1, !tbaa !2448
  %999 = lshr i64 %984, 63
  %1000 = trunc i64 %999 to i8
  store i8 %1000, i8* %8, align 1, !tbaa !2449
  %1001 = lshr i64 %983, 63
  %1002 = xor i64 %999, %1001
  %1003 = add nuw nsw i64 %1002, %999
  %1004 = icmp eq i64 %1003, 2
  %1005 = zext i1 %1004 to i8
  store i8 %1005, i8* %9, align 1, !tbaa !2450
  %1006 = add i64 %980, 15
  store i64 %1006, i64* %PC, align 8
  store i64 %984, i64* %982, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1007 = add i64 %163, -12
  store i64 4197149, i64* %PC, align 8
  %1008 = inttoptr i64 %1007 to i32*
  store i32 30, i32* %1008, align 4
  %1009 = load i64, i64* %RBP, align 8
  %1010 = add i64 %1009, -12
  %1011 = load i64, i64* %PC, align 8
  %1012 = add i64 %1011, 3
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1010 to i32*
  %1014 = load i32, i32* %1013, align 4
  %1015 = zext i32 %1014 to i64
  store i64 %1015, i64* %RDI, align 8, !tbaa !2428
  %1016 = add i64 %1011, -1581
  %1017 = add i64 %1011, 8
  %1018 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1019 = add i64 %1018, -8
  %1020 = inttoptr i64 %1019 to i64*
  store i64 %1017, i64* %1020, align 8
  store i64 %1019, i64* %RSP, align 8, !tbaa !2428
  store i64 %1016, i64* %PC, align 8, !tbaa !2428
  %1021 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1016, %struct.Memory* %MEMORY.0)
  %1022 = load i64, i64* %RBP, align 8
  %1023 = add i64 %1022, -8
  %1024 = load i64, i64* %PC, align 8
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC, align 8
  %1026 = inttoptr i64 %1023 to i64*
  %1027 = load i64, i64* %1026, align 8
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = add i64 %1027, 4
  store i64 %1028, i64* %RCX, align 8, !tbaa !2428
  %1029 = icmp ugt i64 %1027, -5
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %4, align 1, !tbaa !2432
  %1031 = trunc i64 %1028 to i32
  %1032 = and i32 %1031, 255
  %1033 = tail call i32 @llvm.ctpop.i32(i32 %1032) #8
  %1034 = trunc i32 %1033 to i8
  %1035 = and i8 %1034, 1
  %1036 = xor i8 %1035, 1
  store i8 %1036, i8* %5, align 1, !tbaa !2446
  %1037 = xor i64 %1027, %1028
  %1038 = lshr i64 %1037, 4
  %1039 = trunc i64 %1038 to i8
  %1040 = and i8 %1039, 1
  store i8 %1040, i8* %6, align 1, !tbaa !2447
  %1041 = icmp eq i64 %1028, 0
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %7, align 1, !tbaa !2448
  %1043 = lshr i64 %1028, 63
  %1044 = trunc i64 %1043 to i8
  store i8 %1044, i8* %8, align 1, !tbaa !2449
  %1045 = lshr i64 %1027, 63
  %1046 = xor i64 %1043, %1045
  %1047 = add nuw nsw i64 %1046, %1043
  %1048 = icmp eq i64 %1047, 2
  %1049 = zext i1 %1048 to i8
  store i8 %1049, i8* %9, align 1, !tbaa !2450
  %1050 = add i64 %1024, 15
  store i64 %1050, i64* %PC, align 8
  store i64 %1028, i64* %1026, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1051 = add i64 %163, -12
  store i64 4196249, i64* %PC, align 8
  %1052 = inttoptr i64 %1051 to i32*
  store i32 12, i32* %1052, align 4
  %1053 = load i64, i64* %RBP, align 8
  %1054 = add i64 %1053, -12
  %1055 = load i64, i64* %PC, align 8
  %1056 = add i64 %1055, 3
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1054 to i32*
  %1058 = load i32, i32* %1057, align 4
  %1059 = zext i32 %1058 to i64
  store i64 %1059, i64* %RDI, align 8, !tbaa !2428
  %1060 = add i64 %1055, -681
  %1061 = add i64 %1055, 8
  %1062 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1061, i64* %1064, align 8
  store i64 %1063, i64* %RSP, align 8, !tbaa !2428
  store i64 %1060, i64* %PC, align 8, !tbaa !2428
  %1065 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1060, %struct.Memory* %MEMORY.0)
  %1066 = load i64, i64* %RBP, align 8
  %1067 = add i64 %1066, -8
  %1068 = load i64, i64* %PC, align 8
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1067 to i64*
  %1071 = load i64, i64* %1070, align 8
  store i64 %1071, i64* %RAX, align 8, !tbaa !2428
  %1072 = add i64 %1071, 4
  store i64 %1072, i64* %RCX, align 8, !tbaa !2428
  %1073 = icmp ugt i64 %1071, -5
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %4, align 1, !tbaa !2432
  %1075 = trunc i64 %1072 to i32
  %1076 = and i32 %1075, 255
  %1077 = tail call i32 @llvm.ctpop.i32(i32 %1076) #8
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  %1080 = xor i8 %1079, 1
  store i8 %1080, i8* %5, align 1, !tbaa !2446
  %1081 = xor i64 %1071, %1072
  %1082 = lshr i64 %1081, 4
  %1083 = trunc i64 %1082 to i8
  %1084 = and i8 %1083, 1
  store i8 %1084, i8* %6, align 1, !tbaa !2447
  %1085 = icmp eq i64 %1072, 0
  %1086 = zext i1 %1085 to i8
  store i8 %1086, i8* %7, align 1, !tbaa !2448
  %1087 = lshr i64 %1072, 63
  %1088 = trunc i64 %1087 to i8
  store i8 %1088, i8* %8, align 1, !tbaa !2449
  %1089 = lshr i64 %1071, 63
  %1090 = xor i64 %1087, %1089
  %1091 = add nuw nsw i64 %1090, %1087
  %1092 = icmp eq i64 %1091, 2
  %1093 = zext i1 %1092 to i8
  store i8 %1093, i8* %9, align 1, !tbaa !2450
  %1094 = add i64 %1068, 15
  store i64 %1094, i64* %PC, align 8
  store i64 %1072, i64* %1070, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1095 = add i64 %163, -12
  store i64 4196499, i64* %PC, align 8
  %1096 = inttoptr i64 %1095 to i32*
  store i32 17, i32* %1096, align 4
  %1097 = load i64, i64* %RBP, align 8
  %1098 = add i64 %1097, -12
  %1099 = load i64, i64* %PC, align 8
  %1100 = add i64 %1099, 3
  store i64 %1100, i64* %PC, align 8
  %1101 = inttoptr i64 %1098 to i32*
  %1102 = load i32, i32* %1101, align 4
  %1103 = zext i32 %1102 to i64
  store i64 %1103, i64* %RDI, align 8, !tbaa !2428
  %1104 = add i64 %1099, -931
  %1105 = add i64 %1099, 8
  %1106 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1107 = add i64 %1106, -8
  %1108 = inttoptr i64 %1107 to i64*
  store i64 %1105, i64* %1108, align 8
  store i64 %1107, i64* %RSP, align 8, !tbaa !2428
  store i64 %1104, i64* %PC, align 8, !tbaa !2428
  %1109 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1104, %struct.Memory* %MEMORY.0)
  %1110 = load i64, i64* %RBP, align 8
  %1111 = add i64 %1110, -8
  %1112 = load i64, i64* %PC, align 8
  %1113 = add i64 %1112, 4
  store i64 %1113, i64* %PC, align 8
  %1114 = inttoptr i64 %1111 to i64*
  %1115 = load i64, i64* %1114, align 8
  store i64 %1115, i64* %RAX, align 8, !tbaa !2428
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %RCX, align 8, !tbaa !2428
  %1117 = icmp ugt i64 %1115, -5
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %4, align 1, !tbaa !2432
  %1119 = trunc i64 %1116 to i32
  %1120 = and i32 %1119, 255
  %1121 = tail call i32 @llvm.ctpop.i32(i32 %1120) #8
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  %1124 = xor i8 %1123, 1
  store i8 %1124, i8* %5, align 1, !tbaa !2446
  %1125 = xor i64 %1115, %1116
  %1126 = lshr i64 %1125, 4
  %1127 = trunc i64 %1126 to i8
  %1128 = and i8 %1127, 1
  store i8 %1128, i8* %6, align 1, !tbaa !2447
  %1129 = icmp eq i64 %1116, 0
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* %7, align 1, !tbaa !2448
  %1131 = lshr i64 %1116, 63
  %1132 = trunc i64 %1131 to i8
  store i8 %1132, i8* %8, align 1, !tbaa !2449
  %1133 = lshr i64 %1115, 63
  %1134 = xor i64 %1131, %1133
  %1135 = add nuw nsw i64 %1134, %1131
  %1136 = icmp eq i64 %1135, 2
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %9, align 1, !tbaa !2450
  %1138 = add i64 %1112, 15
  store i64 %1138, i64* %PC, align 8
  store i64 %1116, i64* %1114, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1139 = add i64 %163, -12
  store i64 4196749, i64* %PC, align 8
  %1140 = inttoptr i64 %1139 to i32*
  store i32 22, i32* %1140, align 4
  %1141 = load i64, i64* %PC, align 8
  %1142 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %1141, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1142

block_400602:                                     ; preds = %block_400566
  %1143 = add i64 %163, -12
  store i64 4195849, i64* %PC, align 8
  %1144 = inttoptr i64 %1143 to i32*
  store i32 4, i32* %1144, align 4
  %1145 = load i64, i64* %PC, align 8
  %1146 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1145, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1146

block_400a80:                                     ; preds = %block_400566
  %1147 = add i64 %163, -12
  store i64 4196999, i64* %PC, align 8
  %1148 = inttoptr i64 %1147 to i32*
  store i32 27, i32* %1148, align 4
  %1149 = load i64, i64* %PC, align 8
  %1150 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1149, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1150

; <label>:1151:                                   ; preds = %block_400566
  %1152 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %167, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1152
}

; Function Attrs: noinline
define %struct.Memory* @sub_40098d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40098d

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %954, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %954, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %954, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %954, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %954, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %954, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.0)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %954, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.0)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %954, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.0)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %954, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.0)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %954, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.0)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %954, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.0)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %454 = add i64 %954, -12
  store i64 4196949, i64* %PC, align 8
  %455 = inttoptr i64 %454 to i32*
  store i32 26, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -12
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %458, -1381
  %464 = add i64 %458, 8
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.0)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -8
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = icmp ugt i64 %474, -5
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %4, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %5, align 1, !tbaa !2446
  %484 = xor i64 %474, %475
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %6, align 1, !tbaa !2447
  %488 = icmp eq i64 %475, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %7, align 1, !tbaa !2448
  %490 = lshr i64 %475, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %8, align 1, !tbaa !2449
  %492 = lshr i64 %474, 63
  %493 = xor i64 %490, %492
  %494 = add nuw nsw i64 %493, %490
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %9, align 1, !tbaa !2450
  %497 = add i64 %471, 15
  store i64 %497, i64* %PC, align 8
  store i64 %475, i64* %473, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %498 = add i64 %954, -12
  store i64 4196049, i64* %PC, align 8
  %499 = inttoptr i64 %498 to i32*
  store i32 8, i32* %499, align 4
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -12
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, 3
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %501 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %507 = add i64 %502, -481
  %508 = add i64 %502, 8
  %509 = load i64, i64* %RSP, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %508, i64* %511, align 8
  store i64 %510, i64* %RSP, align 8, !tbaa !2428
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  %512 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %507, %struct.Memory* %MEMORY.0)
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -8
  %515 = load i64, i64* %PC, align 8
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517, align 8
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = add i64 %518, 4
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ugt i64 %518, -5
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %4, align 1, !tbaa !2432
  %522 = trunc i64 %519 to i32
  %523 = and i32 %522, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %5, align 1, !tbaa !2446
  %528 = xor i64 %518, %519
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %6, align 1, !tbaa !2447
  %532 = icmp eq i64 %519, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %7, align 1, !tbaa !2448
  %534 = lshr i64 %519, 63
  %535 = trunc i64 %534 to i8
  store i8 %535, i8* %8, align 1, !tbaa !2449
  %536 = lshr i64 %518, 63
  %537 = xor i64 %534, %536
  %538 = add nuw nsw i64 %537, %534
  %539 = icmp eq i64 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %9, align 1, !tbaa !2450
  %541 = add i64 %515, 15
  store i64 %541, i64* %PC, align 8
  store i64 %519, i64* %517, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %542 = add i64 %954, -12
  store i64 4197199, i64* %PC, align 8
  %543 = inttoptr i64 %542 to i32*
  store i32 31, i32* %543, align 4
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -12
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = add i64 %546, -1631
  %552 = add i64 %546, 8
  %553 = load i64, i64* %RSP, align 8, !tbaa !2428
  %554 = add i64 %553, -8
  %555 = inttoptr i64 %554 to i64*
  store i64 %552, i64* %555, align 8
  store i64 %554, i64* %RSP, align 8, !tbaa !2428
  store i64 %551, i64* %PC, align 8, !tbaa !2428
  %556 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %551, %struct.Memory* %MEMORY.0)
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -8
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561, align 8
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = add i64 %562, 4
  store i64 %563, i64* %RCX, align 8, !tbaa !2428
  %564 = icmp ugt i64 %562, -5
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %4, align 1, !tbaa !2432
  %566 = trunc i64 %563 to i32
  %567 = and i32 %566, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %5, align 1, !tbaa !2446
  %572 = xor i64 %562, %563
  %573 = lshr i64 %572, 4
  %574 = trunc i64 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %6, align 1, !tbaa !2447
  %576 = icmp eq i64 %563, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %7, align 1, !tbaa !2448
  %578 = lshr i64 %563, 63
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %8, align 1, !tbaa !2449
  %580 = lshr i64 %562, 63
  %581 = xor i64 %578, %580
  %582 = add nuw nsw i64 %581, %578
  %583 = icmp eq i64 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %9, align 1, !tbaa !2450
  %585 = add i64 %559, 15
  store i64 %585, i64* %PC, align 8
  store i64 %563, i64* %561, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %586 = add i64 %954, -12
  store i64 4196299, i64* %PC, align 8
  %587 = inttoptr i64 %586 to i32*
  store i32 13, i32* %587, align 4
  %588 = load i64, i64* %PC, align 8
  %589 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %588, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %589

block_4008be:                                     ; preds = %block_400566
  %590 = add i64 %954, -12
  store i64 4196549, i64* %PC, align 8
  %591 = inttoptr i64 %590 to i32*
  store i32 18, i32* %591, align 4
  %592 = load i64, i64* %PC, align 8
  %593 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %592, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %593

block_4009b8:                                     ; preds = %block_400566
  %594 = add i64 %954, -12
  store i64 4196799, i64* %PC, align 8
  %595 = inttoptr i64 %594 to i32*
  store i32 23, i32* %595, align 4
  %596 = load i64, i64* %RBP, align 8
  %597 = add i64 %596, -12
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, 3
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %597 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = zext i32 %601 to i64
  store i64 %602, i64* %RDI, align 8, !tbaa !2428
  %603 = add i64 %598, -1231
  %604 = add i64 %598, 8
  %605 = load i64, i64* %RSP, align 8, !tbaa !2428
  %606 = add i64 %605, -8
  %607 = inttoptr i64 %606 to i64*
  store i64 %604, i64* %607, align 8
  store i64 %606, i64* %RSP, align 8, !tbaa !2428
  store i64 %603, i64* %PC, align 8, !tbaa !2428
  %608 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %603, %struct.Memory* %MEMORY.0)
  %609 = load i64, i64* %RBP, align 8
  %610 = add i64 %609, -8
  %611 = load i64, i64* %PC, align 8
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613, align 8
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = add i64 %614, 4
  store i64 %615, i64* %RCX, align 8, !tbaa !2428
  %616 = icmp ugt i64 %614, -5
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %4, align 1, !tbaa !2432
  %618 = trunc i64 %615 to i32
  %619 = and i32 %618, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #8
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %5, align 1, !tbaa !2446
  %624 = xor i64 %614, %615
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  store i8 %627, i8* %6, align 1, !tbaa !2447
  %628 = icmp eq i64 %615, 0
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %7, align 1, !tbaa !2448
  %630 = lshr i64 %615, 63
  %631 = trunc i64 %630 to i8
  store i8 %631, i8* %8, align 1, !tbaa !2449
  %632 = lshr i64 %614, 63
  %633 = xor i64 %630, %632
  %634 = add nuw nsw i64 %633, %630
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %9, align 1, !tbaa !2450
  %637 = add i64 %611, 15
  store i64 %637, i64* %PC, align 8
  store i64 %615, i64* %613, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %638 = add i64 %954, -12
  store i64 4195899, i64* %PC, align 8
  %639 = inttoptr i64 %638 to i32*
  store i32 5, i32* %639, align 4
  %640 = load i64, i64* %RBP, align 8
  %641 = add i64 %640, -12
  %642 = load i64, i64* %PC, align 8
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC, align 8
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644, align 4
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RDI, align 8, !tbaa !2428
  %647 = add i64 %642, -331
  %648 = add i64 %642, 8
  %649 = load i64, i64* %RSP, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %648, i64* %651, align 8
  store i64 %650, i64* %RSP, align 8, !tbaa !2428
  store i64 %647, i64* %PC, align 8, !tbaa !2428
  %652 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %647, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -8
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = add i64 %658, 4
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = icmp ugt i64 %658, -5
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %4, align 1, !tbaa !2432
  %662 = trunc i64 %659 to i32
  %663 = and i32 %662, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #8
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %5, align 1, !tbaa !2446
  %668 = xor i64 %658, %659
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %6, align 1, !tbaa !2447
  %672 = icmp eq i64 %659, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %7, align 1, !tbaa !2448
  %674 = lshr i64 %659, 63
  %675 = trunc i64 %674 to i8
  store i8 %675, i8* %8, align 1, !tbaa !2449
  %676 = lshr i64 %658, 63
  %677 = xor i64 %674, %676
  %678 = add nuw nsw i64 %677, %674
  %679 = icmp eq i64 %678, 2
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %9, align 1, !tbaa !2450
  %681 = add i64 %655, 15
  store i64 %681, i64* %PC, align 8
  store i64 %659, i64* %657, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %682 = add i64 %954, -12
  store i64 4197049, i64* %PC, align 8
  %683 = inttoptr i64 %682 to i32*
  store i32 28, i32* %683, align 4
  %684 = load i64, i64* %RBP, align 8
  %685 = add i64 %684, -12
  %686 = load i64, i64* %PC, align 8
  %687 = add i64 %686, 3
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %685 to i32*
  %689 = load i32, i32* %688, align 4
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RDI, align 8, !tbaa !2428
  %691 = add i64 %686, -1481
  %692 = add i64 %686, 8
  %693 = load i64, i64* %RSP, align 8, !tbaa !2428
  %694 = add i64 %693, -8
  %695 = inttoptr i64 %694 to i64*
  store i64 %692, i64* %695, align 8
  store i64 %694, i64* %RSP, align 8, !tbaa !2428
  store i64 %691, i64* %PC, align 8, !tbaa !2428
  %696 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %691, %struct.Memory* %MEMORY.0)
  %697 = load i64, i64* %RBP, align 8
  %698 = add i64 %697, -8
  %699 = load i64, i64* %PC, align 8
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %698 to i64*
  %702 = load i64, i64* %701, align 8
  store i64 %702, i64* %RAX, align 8, !tbaa !2428
  %703 = add i64 %702, 4
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = icmp ugt i64 %702, -5
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %4, align 1, !tbaa !2432
  %706 = trunc i64 %703 to i32
  %707 = and i32 %706, 255
  %708 = tail call i32 @llvm.ctpop.i32(i32 %707) #8
  %709 = trunc i32 %708 to i8
  %710 = and i8 %709, 1
  %711 = xor i8 %710, 1
  store i8 %711, i8* %5, align 1, !tbaa !2446
  %712 = xor i64 %702, %703
  %713 = lshr i64 %712, 4
  %714 = trunc i64 %713 to i8
  %715 = and i8 %714, 1
  store i8 %715, i8* %6, align 1, !tbaa !2447
  %716 = icmp eq i64 %703, 0
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %7, align 1, !tbaa !2448
  %718 = lshr i64 %703, 63
  %719 = trunc i64 %718 to i8
  store i8 %719, i8* %8, align 1, !tbaa !2449
  %720 = lshr i64 %702, 63
  %721 = xor i64 %718, %720
  %722 = add nuw nsw i64 %721, %718
  %723 = icmp eq i64 %722, 2
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %9, align 1, !tbaa !2450
  %725 = add i64 %699, 15
  store i64 %725, i64* %PC, align 8
  store i64 %703, i64* %701, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = add i64 %954, -12
  store i64 4195680, i64* %PC, align 8
  %727 = inttoptr i64 %726 to i32*
  store i32 0, i32* %727, align 4
  %728 = load i64, i64* %RSP, align 8
  %729 = load i64, i64* %PC, align 8
  %730 = add i64 %728, 48
  store i64 %730, i64* %RSP, align 8, !tbaa !2428
  %731 = icmp ugt i64 %728, -49
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %4, align 1, !tbaa !2432
  %733 = trunc i64 %730 to i32
  %734 = and i32 %733, 255
  %735 = tail call i32 @llvm.ctpop.i32(i32 %734) #8
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = xor i8 %737, 1
  store i8 %738, i8* %5, align 1, !tbaa !2446
  %739 = xor i64 %728, 16
  %740 = xor i64 %739, %730
  %741 = lshr i64 %740, 4
  %742 = trunc i64 %741 to i8
  %743 = and i8 %742, 1
  store i8 %743, i8* %6, align 1, !tbaa !2447
  %744 = icmp eq i64 %730, 0
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %7, align 1, !tbaa !2448
  %746 = lshr i64 %730, 63
  %747 = trunc i64 %746 to i8
  store i8 %747, i8* %8, align 1, !tbaa !2449
  %748 = lshr i64 %728, 63
  %749 = xor i64 %746, %748
  %750 = add nuw nsw i64 %749, %746
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %9, align 1, !tbaa !2450
  %753 = add i64 %729, 5
  store i64 %753, i64* %PC, align 8
  %754 = add i64 %728, 56
  %755 = inttoptr i64 %730 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %RBP, align 8, !tbaa !2428
  store i64 %754, i64* %RSP, align 8, !tbaa !2428
  %757 = add i64 %729, 6
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %754 to i64*
  %759 = load i64, i64* %758, align 8
  store i64 %759, i64* %PC, align 8, !tbaa !2428
  %760 = add i64 %728, 64
  store i64 %760, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %761 = add i64 %954, -12
  store i64 4196149, i64* %PC, align 8
  %762 = inttoptr i64 %761 to i32*
  store i32 10, i32* %762, align 4
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -12
  %765 = load i64, i64* %PC, align 8
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %764 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = zext i32 %768 to i64
  store i64 %769, i64* %RDI, align 8, !tbaa !2428
  %770 = add i64 %765, -581
  %771 = add i64 %765, 8
  %772 = load i64, i64* %RSP, align 8, !tbaa !2428
  %773 = add i64 %772, -8
  %774 = inttoptr i64 %773 to i64*
  store i64 %771, i64* %774, align 8
  store i64 %773, i64* %RSP, align 8, !tbaa !2428
  store i64 %770, i64* %PC, align 8, !tbaa !2428
  %775 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %770, %struct.Memory* %MEMORY.0)
  %776 = load i64, i64* %RBP, align 8
  %777 = add i64 %776, -8
  %778 = load i64, i64* %PC, align 8
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %777 to i64*
  %781 = load i64, i64* %780, align 8
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = add i64 %781, 4
  store i64 %782, i64* %RCX, align 8, !tbaa !2428
  %783 = icmp ugt i64 %781, -5
  %784 = zext i1 %783 to i8
  store i8 %784, i8* %4, align 1, !tbaa !2432
  %785 = trunc i64 %782 to i32
  %786 = and i32 %785, 255
  %787 = tail call i32 @llvm.ctpop.i32(i32 %786) #8
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = xor i8 %789, 1
  store i8 %790, i8* %5, align 1, !tbaa !2446
  %791 = xor i64 %781, %782
  %792 = lshr i64 %791, 4
  %793 = trunc i64 %792 to i8
  %794 = and i8 %793, 1
  store i8 %794, i8* %6, align 1, !tbaa !2447
  %795 = icmp eq i64 %782, 0
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %7, align 1, !tbaa !2448
  %797 = lshr i64 %782, 63
  %798 = trunc i64 %797 to i8
  store i8 %798, i8* %8, align 1, !tbaa !2449
  %799 = lshr i64 %781, 63
  %800 = xor i64 %797, %799
  %801 = add nuw nsw i64 %800, %797
  %802 = icmp eq i64 %801, 2
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %9, align 1, !tbaa !2450
  %804 = add i64 %778, 15
  store i64 %804, i64* %PC, align 8
  store i64 %782, i64* %780, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %805 = add i64 %954, -12
  store i64 4196399, i64* %PC, align 8
  %806 = inttoptr i64 %805 to i32*
  store i32 15, i32* %806, align 4
  %807 = load i64, i64* %RBP, align 8
  %808 = add i64 %807, -12
  %809 = load i64, i64* %PC, align 8
  %810 = add i64 %809, 3
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %808 to i32*
  %812 = load i32, i32* %811, align 4
  %813 = zext i32 %812 to i64
  store i64 %813, i64* %RDI, align 8, !tbaa !2428
  %814 = add i64 %809, -831
  %815 = add i64 %809, 8
  %816 = load i64, i64* %RSP, align 8, !tbaa !2428
  %817 = add i64 %816, -8
  %818 = inttoptr i64 %817 to i64*
  store i64 %815, i64* %818, align 8
  store i64 %817, i64* %RSP, align 8, !tbaa !2428
  store i64 %814, i64* %PC, align 8, !tbaa !2428
  %819 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %814, %struct.Memory* %MEMORY.0)
  %820 = load i64, i64* %RBP, align 8
  %821 = add i64 %820, -8
  %822 = load i64, i64* %PC, align 8
  %823 = add i64 %822, 4
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %821 to i64*
  %825 = load i64, i64* %824, align 8
  store i64 %825, i64* %RAX, align 8, !tbaa !2428
  %826 = add i64 %825, 4
  store i64 %826, i64* %RCX, align 8, !tbaa !2428
  %827 = icmp ugt i64 %825, -5
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %4, align 1, !tbaa !2432
  %829 = trunc i64 %826 to i32
  %830 = and i32 %829, 255
  %831 = tail call i32 @llvm.ctpop.i32(i32 %830) #8
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  store i8 %834, i8* %5, align 1, !tbaa !2446
  %835 = xor i64 %825, %826
  %836 = lshr i64 %835, 4
  %837 = trunc i64 %836 to i8
  %838 = and i8 %837, 1
  store i8 %838, i8* %6, align 1, !tbaa !2447
  %839 = icmp eq i64 %826, 0
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %7, align 1, !tbaa !2448
  %841 = lshr i64 %826, 63
  %842 = trunc i64 %841 to i8
  store i8 %842, i8* %8, align 1, !tbaa !2449
  %843 = lshr i64 %825, 63
  %844 = xor i64 %841, %843
  %845 = add nuw nsw i64 %844, %841
  %846 = icmp eq i64 %845, 2
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %9, align 1, !tbaa !2450
  %848 = add i64 %822, 15
  store i64 %848, i64* %PC, align 8
  store i64 %826, i64* %824, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %849 = add i64 %954, -12
  store i64 4196649, i64* %PC, align 8
  %850 = inttoptr i64 %849 to i32*
  store i32 20, i32* %850, align 4
  %851 = load i64, i64* %RBP, align 8
  %852 = add i64 %851, -12
  %853 = load i64, i64* %PC, align 8
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %852 to i32*
  %856 = load i32, i32* %855, align 4
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDI, align 8, !tbaa !2428
  %858 = add i64 %853, -1081
  %859 = add i64 %853, 8
  %860 = load i64, i64* %RSP, align 8, !tbaa !2428
  %861 = add i64 %860, -8
  %862 = inttoptr i64 %861 to i64*
  store i64 %859, i64* %862, align 8
  store i64 %861, i64* %RSP, align 8, !tbaa !2428
  store i64 %858, i64* %PC, align 8, !tbaa !2428
  %863 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %858, %struct.Memory* %MEMORY.0)
  %864 = load i64, i64* %RBP, align 8
  %865 = add i64 %864, -8
  %866 = load i64, i64* %PC, align 8
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC, align 8
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868, align 8
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = add i64 %869, 4
  store i64 %870, i64* %RCX, align 8, !tbaa !2428
  %871 = icmp ugt i64 %869, -5
  %872 = zext i1 %871 to i8
  store i8 %872, i8* %4, align 1, !tbaa !2432
  %873 = trunc i64 %870 to i32
  %874 = and i32 %873, 255
  %875 = tail call i32 @llvm.ctpop.i32(i32 %874) #8
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  %878 = xor i8 %877, 1
  store i8 %878, i8* %5, align 1, !tbaa !2446
  %879 = xor i64 %869, %870
  %880 = lshr i64 %879, 4
  %881 = trunc i64 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %6, align 1, !tbaa !2447
  %883 = icmp eq i64 %870, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %7, align 1, !tbaa !2448
  %885 = lshr i64 %870, 63
  %886 = trunc i64 %885 to i8
  store i8 %886, i8* %8, align 1, !tbaa !2449
  %887 = lshr i64 %869, 63
  %888 = xor i64 %885, %887
  %889 = add nuw nsw i64 %888, %885
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %9, align 1, !tbaa !2450
  %892 = add i64 %866, 15
  store i64 %892, i64* %PC, align 8
  store i64 %870, i64* %868, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %893 = add i64 %954, -12
  store i64 4195749, i64* %PC, align 8
  %894 = inttoptr i64 %893 to i32*
  store i32 2, i32* %894, align 4
  %895 = load i64, i64* %RBP, align 8
  %896 = add i64 %895, -12
  %897 = load i64, i64* %PC, align 8
  %898 = add i64 %897, 3
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %896 to i32*
  %900 = load i32, i32* %899, align 4
  %901 = zext i32 %900 to i64
  store i64 %901, i64* %RDI, align 8, !tbaa !2428
  %902 = add i64 %897, -181
  %903 = add i64 %897, 8
  %904 = load i64, i64* %RSP, align 8, !tbaa !2428
  %905 = add i64 %904, -8
  %906 = inttoptr i64 %905 to i64*
  store i64 %903, i64* %906, align 8
  store i64 %905, i64* %RSP, align 8, !tbaa !2428
  store i64 %902, i64* %PC, align 8, !tbaa !2428
  %907 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %902, %struct.Memory* %MEMORY.0)
  %908 = load i64, i64* %RBP, align 8
  %909 = add i64 %908, -8
  %910 = load i64, i64* %PC, align 8
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %909 to i64*
  %913 = load i64, i64* %912, align 8
  store i64 %913, i64* %RAX, align 8, !tbaa !2428
  %914 = add i64 %913, 4
  store i64 %914, i64* %RCX, align 8, !tbaa !2428
  %915 = icmp ugt i64 %913, -5
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %4, align 1, !tbaa !2432
  %917 = trunc i64 %914 to i32
  %918 = and i32 %917, 255
  %919 = tail call i32 @llvm.ctpop.i32(i32 %918) #8
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  store i8 %922, i8* %5, align 1, !tbaa !2446
  %923 = xor i64 %913, %914
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %6, align 1, !tbaa !2447
  %927 = icmp eq i64 %914, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %7, align 1, !tbaa !2448
  %929 = lshr i64 %914, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %8, align 1, !tbaa !2449
  %931 = lshr i64 %913, 63
  %932 = xor i64 %929, %931
  %933 = add nuw nsw i64 %932, %929
  %934 = icmp eq i64 %933, 2
  %935 = zext i1 %934 to i8
  store i8 %935, i8* %9, align 1, !tbaa !2450
  %936 = add i64 %910, 15
  store i64 %936, i64* %PC, align 8
  store i64 %914, i64* %912, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_40098d
  %.sink11 = phi i64 [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1101, %block_40098d ]
  %MEMORY.0 = phi %struct.Memory* [ %1191, %block_40088c ], [ %1105, %block_400792 ], [ %1061, %block_400b16 ], [ %1017, %block_400698 ], [ %973, %block_400a1c ], [ %907, %block_40059e ], [ %863, %block_400922 ], [ %819, %block_400828 ], [ %775, %block_40072e ], [ %696, %block_400ab2 ], [ %652, %block_400634 ], [ %608, %block_4009b8 ], [ %556, %block_400b48 ], [ %512, %block_4006ca ], [ %468, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %1147, %block_40098d ]
  %937 = bitcast i64* %RAX to i32**
  %938 = load i32*, i32** %937, align 8
  %939 = load i64, i64* %PC, align 8
  %940 = add i64 %939, 3
  store i64 %940, i64* %PC, align 8
  %941 = load i32, i32* %938, align 4
  %942 = sext i32 %941 to i64
  store i64 %942, i64* %RAX, align 8, !tbaa !2428
  %943 = shl nsw i64 %942, 3
  %944 = add i64 %943, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %945 = add i64 %939, 11
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %944 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RAX, align 8, !tbaa !2428
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -40
  %950 = add i64 %939, 15
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %949 to i64*
  store i64 %947, i64* %951, align 8
  %952 = load i64, i64* %PC, align 8
  %953 = sub i64 %952, %.sink11
  %954 = load i64, i64* %RBP, align 8
  %955 = add i64 %954, -40
  %956 = add i64 %953, 4
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %955 to i64*
  %958 = load i64, i64* %957, align 8
  store i64 %958, i64* %RAX, align 8, !tbaa !2428
  store i64 %958, i64* %PC, align 8, !tbaa !2428
  switch i64 %958, label %1231 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %959 = add i64 %954, -12
  store i64 4196899, i64* %PC, align 8
  %960 = inttoptr i64 %959 to i32*
  store i32 25, i32* %960, align 4
  %961 = load i64, i64* %RBP, align 8
  %962 = add i64 %961, -12
  %963 = load i64, i64* %PC, align 8
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %962 to i32*
  %966 = load i32, i32* %965, align 4
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RDI, align 8, !tbaa !2428
  %968 = add i64 %963, -1331
  %969 = add i64 %963, 8
  %970 = load i64, i64* %RSP, align 8, !tbaa !2428
  %971 = add i64 %970, -8
  %972 = inttoptr i64 %971 to i64*
  store i64 %969, i64* %972, align 8
  store i64 %971, i64* %RSP, align 8, !tbaa !2428
  store i64 %968, i64* %PC, align 8, !tbaa !2428
  %973 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %968, %struct.Memory* %MEMORY.0)
  %974 = load i64, i64* %RBP, align 8
  %975 = add i64 %974, -8
  %976 = load i64, i64* %PC, align 8
  %977 = add i64 %976, 4
  store i64 %977, i64* %PC, align 8
  %978 = inttoptr i64 %975 to i64*
  %979 = load i64, i64* %978, align 8
  store i64 %979, i64* %RAX, align 8, !tbaa !2428
  %980 = add i64 %979, 4
  store i64 %980, i64* %RCX, align 8, !tbaa !2428
  %981 = icmp ugt i64 %979, -5
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %4, align 1, !tbaa !2432
  %983 = trunc i64 %980 to i32
  %984 = and i32 %983, 255
  %985 = tail call i32 @llvm.ctpop.i32(i32 %984) #8
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  %988 = xor i8 %987, 1
  store i8 %988, i8* %5, align 1, !tbaa !2446
  %989 = xor i64 %979, %980
  %990 = lshr i64 %989, 4
  %991 = trunc i64 %990 to i8
  %992 = and i8 %991, 1
  store i8 %992, i8* %6, align 1, !tbaa !2447
  %993 = icmp eq i64 %980, 0
  %994 = zext i1 %993 to i8
  store i8 %994, i8* %7, align 1, !tbaa !2448
  %995 = lshr i64 %980, 63
  %996 = trunc i64 %995 to i8
  store i8 %996, i8* %8, align 1, !tbaa !2449
  %997 = lshr i64 %979, 63
  %998 = xor i64 %995, %997
  %999 = add nuw nsw i64 %998, %995
  %1000 = icmp eq i64 %999, 2
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %9, align 1, !tbaa !2450
  %1002 = add i64 %976, 15
  store i64 %1002, i64* %PC, align 8
  store i64 %980, i64* %978, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1003 = add i64 %954, -12
  store i64 4195999, i64* %PC, align 8
  %1004 = inttoptr i64 %1003 to i32*
  store i32 7, i32* %1004, align 4
  %1005 = load i64, i64* %RBP, align 8
  %1006 = add i64 %1005, -12
  %1007 = load i64, i64* %PC, align 8
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009, align 4
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RDI, align 8, !tbaa !2428
  %1012 = add i64 %1007, -431
  %1013 = add i64 %1007, 8
  %1014 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1015 = add i64 %1014, -8
  %1016 = inttoptr i64 %1015 to i64*
  store i64 %1013, i64* %1016, align 8
  store i64 %1015, i64* %RSP, align 8, !tbaa !2428
  store i64 %1012, i64* %PC, align 8, !tbaa !2428
  %1017 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1012, %struct.Memory* %MEMORY.0)
  %1018 = load i64, i64* %RBP, align 8
  %1019 = add i64 %1018, -8
  %1020 = load i64, i64* %PC, align 8
  %1021 = add i64 %1020, 4
  store i64 %1021, i64* %PC, align 8
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022, align 8
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %RCX, align 8, !tbaa !2428
  %1025 = icmp ugt i64 %1023, -5
  %1026 = zext i1 %1025 to i8
  store i8 %1026, i8* %4, align 1, !tbaa !2432
  %1027 = trunc i64 %1024 to i32
  %1028 = and i32 %1027, 255
  %1029 = tail call i32 @llvm.ctpop.i32(i32 %1028) #8
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  store i8 %1032, i8* %5, align 1, !tbaa !2446
  %1033 = xor i64 %1023, %1024
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  store i8 %1036, i8* %6, align 1, !tbaa !2447
  %1037 = icmp eq i64 %1024, 0
  %1038 = zext i1 %1037 to i8
  store i8 %1038, i8* %7, align 1, !tbaa !2448
  %1039 = lshr i64 %1024, 63
  %1040 = trunc i64 %1039 to i8
  store i8 %1040, i8* %8, align 1, !tbaa !2449
  %1041 = lshr i64 %1023, 63
  %1042 = xor i64 %1039, %1041
  %1043 = add nuw nsw i64 %1042, %1039
  %1044 = icmp eq i64 %1043, 2
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %9, align 1, !tbaa !2450
  %1046 = add i64 %1020, 15
  store i64 %1046, i64* %PC, align 8
  store i64 %1024, i64* %1022, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1047 = add i64 %954, -12
  store i64 4197149, i64* %PC, align 8
  %1048 = inttoptr i64 %1047 to i32*
  store i32 30, i32* %1048, align 4
  %1049 = load i64, i64* %RBP, align 8
  %1050 = add i64 %1049, -12
  %1051 = load i64, i64* %PC, align 8
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %PC, align 8
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053, align 4
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDI, align 8, !tbaa !2428
  %1056 = add i64 %1051, -1581
  %1057 = add i64 %1051, 8
  %1058 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1059 = add i64 %1058, -8
  %1060 = inttoptr i64 %1059 to i64*
  store i64 %1057, i64* %1060, align 8
  store i64 %1059, i64* %RSP, align 8, !tbaa !2428
  store i64 %1056, i64* %PC, align 8, !tbaa !2428
  %1061 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1056, %struct.Memory* %MEMORY.0)
  %1062 = load i64, i64* %RBP, align 8
  %1063 = add i64 %1062, -8
  %1064 = load i64, i64* %PC, align 8
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1063 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %RAX, align 8, !tbaa !2428
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %RCX, align 8, !tbaa !2428
  %1069 = icmp ugt i64 %1067, -5
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %4, align 1, !tbaa !2432
  %1071 = trunc i64 %1068 to i32
  %1072 = and i32 %1071, 255
  %1073 = tail call i32 @llvm.ctpop.i32(i32 %1072) #8
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = xor i8 %1075, 1
  store i8 %1076, i8* %5, align 1, !tbaa !2446
  %1077 = xor i64 %1067, %1068
  %1078 = lshr i64 %1077, 4
  %1079 = trunc i64 %1078 to i8
  %1080 = and i8 %1079, 1
  store i8 %1080, i8* %6, align 1, !tbaa !2447
  %1081 = icmp eq i64 %1068, 0
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %7, align 1, !tbaa !2448
  %1083 = lshr i64 %1068, 63
  %1084 = trunc i64 %1083 to i8
  store i8 %1084, i8* %8, align 1, !tbaa !2449
  %1085 = lshr i64 %1067, 63
  %1086 = xor i64 %1083, %1085
  %1087 = add nuw nsw i64 %1086, %1083
  %1088 = icmp eq i64 %1087, 2
  %1089 = zext i1 %1088 to i8
  store i8 %1089, i8* %9, align 1, !tbaa !2450
  %1090 = add i64 %1064, 15
  store i64 %1090, i64* %PC, align 8
  store i64 %1068, i64* %1066, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1091 = add i64 %954, -12
  store i64 4196249, i64* %PC, align 8
  %1092 = inttoptr i64 %1091 to i32*
  store i32 12, i32* %1092, align 4
  %1093 = load i64, i64* %RBP, align 8
  %1094 = add i64 %1093, -12
  %1095 = load i64, i64* %PC, align 8
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC, align 8
  %1097 = inttoptr i64 %1094 to i32*
  %1098 = load i32, i32* %1097, align 4
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %RDI, align 8, !tbaa !2428
  %1100 = add i64 %1095, -681
  %1101 = add i64 %1095, 8
  %1102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1103 = add i64 %1102, -8
  %1104 = inttoptr i64 %1103 to i64*
  store i64 %1101, i64* %1104, align 8
  store i64 %1103, i64* %RSP, align 8, !tbaa !2428
  store i64 %1100, i64* %PC, align 8, !tbaa !2428
  %1105 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1100, %struct.Memory* %MEMORY.0)
  %1106 = load i64, i64* %RBP, align 8
  %1107 = add i64 %1106, -8
  %1108 = load i64, i64* %PC, align 8
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110, align 8
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = icmp ugt i64 %1111, -5
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %4, align 1, !tbaa !2432
  %1115 = trunc i64 %1112 to i32
  %1116 = and i32 %1115, 255
  %1117 = tail call i32 @llvm.ctpop.i32(i32 %1116) #8
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  %1120 = xor i8 %1119, 1
  store i8 %1120, i8* %5, align 1, !tbaa !2446
  %1121 = xor i64 %1111, %1112
  %1122 = lshr i64 %1121, 4
  %1123 = trunc i64 %1122 to i8
  %1124 = and i8 %1123, 1
  store i8 %1124, i8* %6, align 1, !tbaa !2447
  %1125 = icmp eq i64 %1112, 0
  %1126 = zext i1 %1125 to i8
  store i8 %1126, i8* %7, align 1, !tbaa !2448
  %1127 = lshr i64 %1112, 63
  %1128 = trunc i64 %1127 to i8
  store i8 %1128, i8* %8, align 1, !tbaa !2449
  %1129 = lshr i64 %1111, 63
  %1130 = xor i64 %1127, %1129
  %1131 = add nuw nsw i64 %1130, %1127
  %1132 = icmp eq i64 %1131, 2
  %1133 = zext i1 %1132 to i8
  store i8 %1133, i8* %9, align 1, !tbaa !2450
  %1134 = add i64 %1108, 15
  store i64 %1134, i64* %PC, align 8
  store i64 %1112, i64* %1110, align 8
  br label %block_400566

block_40098d:                                     ; preds = %block_400986, %3
  %1135 = phi i64 [ %1, %3 ], [ %.pre, %block_400986 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400986 ]
  %1136 = load i64, i64* %RBP, align 8
  %1137 = add i64 %1136, -12
  %1138 = add i64 %1135, 3
  store i64 %1138, i64* %PC, align 8
  %1139 = inttoptr i64 %1137 to i32*
  %1140 = load i32, i32* %1139, align 4
  %1141 = zext i32 %1140 to i64
  store i64 %1141, i64* %RDI, align 8, !tbaa !2428
  %1142 = add i64 %1135, -1181
  %1143 = add i64 %1135, 8
  %1144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1145 = add i64 %1144, -8
  %1146 = inttoptr i64 %1145 to i64*
  store i64 %1143, i64* %1146, align 8
  store i64 %1145, i64* %RSP, align 8, !tbaa !2428
  store i64 %1142, i64* %PC, align 8, !tbaa !2428
  %1147 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1142, %struct.Memory* %MEMORY.1)
  %1148 = load i64, i64* %RBP, align 8
  %1149 = add i64 %1148, -8
  %1150 = load i64, i64* %PC, align 8
  %1151 = add i64 %1150, 4
  store i64 %1151, i64* %PC, align 8
  %1152 = inttoptr i64 %1149 to i64*
  %1153 = load i64, i64* %1152, align 8
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %RCX, align 8, !tbaa !2428
  %1155 = icmp ugt i64 %1153, -5
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %4, align 1, !tbaa !2432
  %1157 = trunc i64 %1154 to i32
  %1158 = and i32 %1157, 255
  %1159 = tail call i32 @llvm.ctpop.i32(i32 %1158) #8
  %1160 = trunc i32 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = xor i8 %1161, 1
  store i8 %1162, i8* %5, align 1, !tbaa !2446
  %1163 = xor i64 %1153, %1154
  %1164 = lshr i64 %1163, 4
  %1165 = trunc i64 %1164 to i8
  %1166 = and i8 %1165, 1
  store i8 %1166, i8* %6, align 1, !tbaa !2447
  %1167 = icmp eq i64 %1154, 0
  %1168 = zext i1 %1167 to i8
  store i8 %1168, i8* %7, align 1, !tbaa !2448
  %1169 = lshr i64 %1154, 63
  %1170 = trunc i64 %1169 to i8
  store i8 %1170, i8* %8, align 1, !tbaa !2449
  %1171 = lshr i64 %1153, 63
  %1172 = xor i64 %1169, %1171
  %1173 = add nuw nsw i64 %1172, %1169
  %1174 = icmp eq i64 %1173, 2
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %9, align 1, !tbaa !2450
  %1176 = add i64 %1150, 15
  store i64 %1176, i64* %PC, align 8
  store i64 %1154, i64* %1152, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1177 = add i64 %954, -12
  store i64 4196499, i64* %PC, align 8
  %1178 = inttoptr i64 %1177 to i32*
  store i32 17, i32* %1178, align 4
  %1179 = load i64, i64* %RBP, align 8
  %1180 = add i64 %1179, -12
  %1181 = load i64, i64* %PC, align 8
  %1182 = add i64 %1181, 3
  store i64 %1182, i64* %PC, align 8
  %1183 = inttoptr i64 %1180 to i32*
  %1184 = load i32, i32* %1183, align 4
  %1185 = zext i32 %1184 to i64
  store i64 %1185, i64* %RDI, align 8, !tbaa !2428
  %1186 = add i64 %1181, -931
  %1187 = add i64 %1181, 8
  %1188 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1189 = add i64 %1188, -8
  %1190 = inttoptr i64 %1189 to i64*
  store i64 %1187, i64* %1190, align 8
  store i64 %1189, i64* %RSP, align 8, !tbaa !2428
  store i64 %1186, i64* %PC, align 8, !tbaa !2428
  %1191 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1186, %struct.Memory* %MEMORY.0)
  %1192 = load i64, i64* %RBP, align 8
  %1193 = add i64 %1192, -8
  %1194 = load i64, i64* %PC, align 8
  %1195 = add i64 %1194, 4
  store i64 %1195, i64* %PC, align 8
  %1196 = inttoptr i64 %1193 to i64*
  %1197 = load i64, i64* %1196, align 8
  store i64 %1197, i64* %RAX, align 8, !tbaa !2428
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ugt i64 %1197, -5
  %1200 = zext i1 %1199 to i8
  store i8 %1200, i8* %4, align 1, !tbaa !2432
  %1201 = trunc i64 %1198 to i32
  %1202 = and i32 %1201, 255
  %1203 = tail call i32 @llvm.ctpop.i32(i32 %1202) #8
  %1204 = trunc i32 %1203 to i8
  %1205 = and i8 %1204, 1
  %1206 = xor i8 %1205, 1
  store i8 %1206, i8* %5, align 1, !tbaa !2446
  %1207 = xor i64 %1197, %1198
  %1208 = lshr i64 %1207, 4
  %1209 = trunc i64 %1208 to i8
  %1210 = and i8 %1209, 1
  store i8 %1210, i8* %6, align 1, !tbaa !2447
  %1211 = icmp eq i64 %1198, 0
  %1212 = zext i1 %1211 to i8
  store i8 %1212, i8* %7, align 1, !tbaa !2448
  %1213 = lshr i64 %1198, 63
  %1214 = trunc i64 %1213 to i8
  store i8 %1214, i8* %8, align 1, !tbaa !2449
  %1215 = lshr i64 %1197, 63
  %1216 = xor i64 %1213, %1215
  %1217 = add nuw nsw i64 %1216, %1213
  %1218 = icmp eq i64 %1217, 2
  %1219 = zext i1 %1218 to i8
  store i8 %1219, i8* %9, align 1, !tbaa !2450
  %1220 = add i64 %1194, 15
  store i64 %1220, i64* %PC, align 8
  store i64 %1198, i64* %1196, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1221 = add i64 %954, -12
  store i64 4196749, i64* %PC, align 8
  %1222 = inttoptr i64 %1221 to i32*
  store i32 22, i32* %1222, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40098d

block_400602:                                     ; preds = %block_400566
  %1223 = add i64 %954, -12
  store i64 4195849, i64* %PC, align 8
  %1224 = inttoptr i64 %1223 to i32*
  store i32 4, i32* %1224, align 4
  %1225 = load i64, i64* %PC, align 8
  %1226 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1225, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1226

block_400a80:                                     ; preds = %block_400566
  %1227 = add i64 %954, -12
  store i64 4196999, i64* %PC, align 8
  %1228 = inttoptr i64 %1227 to i32*
  store i32 27, i32* %1228, align 4
  %1229 = load i64, i64* %PC, align 8
  %1230 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1229, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1230

; <label>:1231:                                   ; preds = %block_400566
  %1232 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %958, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1232
}

; Function Attrs: noinline
define %struct.Memory* @sub_400609(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400609

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %994, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %994, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %994, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %994, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %994, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %994, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.0)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %994, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.0)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %994, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.0)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %994, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.0)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %994, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.0)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %994, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.0)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %454 = add i64 %994, -12
  store i64 4196949, i64* %PC, align 8
  %455 = inttoptr i64 %454 to i32*
  store i32 26, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -12
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %458, -1381
  %464 = add i64 %458, 8
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.0)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -8
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = icmp ugt i64 %474, -5
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %4, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %5, align 1, !tbaa !2446
  %484 = xor i64 %474, %475
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %6, align 1, !tbaa !2447
  %488 = icmp eq i64 %475, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %7, align 1, !tbaa !2448
  %490 = lshr i64 %475, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %8, align 1, !tbaa !2449
  %492 = lshr i64 %474, 63
  %493 = xor i64 %490, %492
  %494 = add nuw nsw i64 %493, %490
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %9, align 1, !tbaa !2450
  %497 = add i64 %471, 15
  store i64 %497, i64* %PC, align 8
  store i64 %475, i64* %473, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %498 = add i64 %994, -12
  store i64 4196049, i64* %PC, align 8
  %499 = inttoptr i64 %498 to i32*
  store i32 8, i32* %499, align 4
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -12
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, 3
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %501 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %507 = add i64 %502, -481
  %508 = add i64 %502, 8
  %509 = load i64, i64* %RSP, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %508, i64* %511, align 8
  store i64 %510, i64* %RSP, align 8, !tbaa !2428
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  %512 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %507, %struct.Memory* %MEMORY.0)
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -8
  %515 = load i64, i64* %PC, align 8
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517, align 8
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = add i64 %518, 4
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ugt i64 %518, -5
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %4, align 1, !tbaa !2432
  %522 = trunc i64 %519 to i32
  %523 = and i32 %522, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %5, align 1, !tbaa !2446
  %528 = xor i64 %518, %519
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %6, align 1, !tbaa !2447
  %532 = icmp eq i64 %519, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %7, align 1, !tbaa !2448
  %534 = lshr i64 %519, 63
  %535 = trunc i64 %534 to i8
  store i8 %535, i8* %8, align 1, !tbaa !2449
  %536 = lshr i64 %518, 63
  %537 = xor i64 %534, %536
  %538 = add nuw nsw i64 %537, %534
  %539 = icmp eq i64 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %9, align 1, !tbaa !2450
  %541 = add i64 %515, 15
  store i64 %541, i64* %PC, align 8
  store i64 %519, i64* %517, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %542 = add i64 %994, -12
  store i64 4197199, i64* %PC, align 8
  %543 = inttoptr i64 %542 to i32*
  store i32 31, i32* %543, align 4
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -12
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = add i64 %546, -1631
  %552 = add i64 %546, 8
  %553 = load i64, i64* %RSP, align 8, !tbaa !2428
  %554 = add i64 %553, -8
  %555 = inttoptr i64 %554 to i64*
  store i64 %552, i64* %555, align 8
  store i64 %554, i64* %RSP, align 8, !tbaa !2428
  store i64 %551, i64* %PC, align 8, !tbaa !2428
  %556 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %551, %struct.Memory* %MEMORY.0)
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -8
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561, align 8
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = add i64 %562, 4
  store i64 %563, i64* %RCX, align 8, !tbaa !2428
  %564 = icmp ugt i64 %562, -5
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %4, align 1, !tbaa !2432
  %566 = trunc i64 %563 to i32
  %567 = and i32 %566, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %5, align 1, !tbaa !2446
  %572 = xor i64 %562, %563
  %573 = lshr i64 %572, 4
  %574 = trunc i64 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %6, align 1, !tbaa !2447
  %576 = icmp eq i64 %563, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %7, align 1, !tbaa !2448
  %578 = lshr i64 %563, 63
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %8, align 1, !tbaa !2449
  %580 = lshr i64 %562, 63
  %581 = xor i64 %578, %580
  %582 = add nuw nsw i64 %581, %578
  %583 = icmp eq i64 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %9, align 1, !tbaa !2450
  %585 = add i64 %559, 15
  store i64 %585, i64* %PC, align 8
  store i64 %563, i64* %561, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %586 = add i64 %994, -12
  store i64 4196299, i64* %PC, align 8
  %587 = inttoptr i64 %586 to i32*
  store i32 13, i32* %587, align 4
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -12
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i32*
  %593 = load i32, i32* %592, align 4
  %594 = zext i32 %593 to i64
  store i64 %594, i64* %RDI, align 8, !tbaa !2428
  %595 = add i64 %590, -731
  %596 = add i64 %590, 8
  %597 = load i64, i64* %RSP, align 8, !tbaa !2428
  %598 = add i64 %597, -8
  %599 = inttoptr i64 %598 to i64*
  store i64 %596, i64* %599, align 8
  store i64 %598, i64* %RSP, align 8, !tbaa !2428
  store i64 %595, i64* %PC, align 8, !tbaa !2428
  %600 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %595, %struct.Memory* %MEMORY.0)
  %601 = load i64, i64* %RBP, align 8
  %602 = add i64 %601, -8
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 4
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %602 to i64*
  %606 = load i64, i64* %605, align 8
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = add i64 %606, 4
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = icmp ugt i64 %606, -5
  %609 = zext i1 %608 to i8
  store i8 %609, i8* %4, align 1, !tbaa !2432
  %610 = trunc i64 %607 to i32
  %611 = and i32 %610, 255
  %612 = tail call i32 @llvm.ctpop.i32(i32 %611) #8
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  store i8 %615, i8* %5, align 1, !tbaa !2446
  %616 = xor i64 %606, %607
  %617 = lshr i64 %616, 4
  %618 = trunc i64 %617 to i8
  %619 = and i8 %618, 1
  store i8 %619, i8* %6, align 1, !tbaa !2447
  %620 = icmp eq i64 %607, 0
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %7, align 1, !tbaa !2448
  %622 = lshr i64 %607, 63
  %623 = trunc i64 %622 to i8
  store i8 %623, i8* %8, align 1, !tbaa !2449
  %624 = lshr i64 %606, 63
  %625 = xor i64 %622, %624
  %626 = add nuw nsw i64 %625, %622
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %9, align 1, !tbaa !2450
  %629 = add i64 %603, 15
  store i64 %629, i64* %PC, align 8
  store i64 %607, i64* %605, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %630 = add i64 %994, -12
  store i64 4196549, i64* %PC, align 8
  %631 = inttoptr i64 %630 to i32*
  store i32 18, i32* %631, align 4
  %632 = load i64, i64* %PC, align 8
  %633 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %632, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %633

block_4009b8:                                     ; preds = %block_400566
  %634 = add i64 %994, -12
  store i64 4196799, i64* %PC, align 8
  %635 = inttoptr i64 %634 to i32*
  store i32 23, i32* %635, align 4
  %636 = load i64, i64* %RBP, align 8
  %637 = add i64 %636, -12
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RDI, align 8, !tbaa !2428
  %643 = add i64 %638, -1231
  %644 = add i64 %638, 8
  %645 = load i64, i64* %RSP, align 8, !tbaa !2428
  %646 = add i64 %645, -8
  %647 = inttoptr i64 %646 to i64*
  store i64 %644, i64* %647, align 8
  store i64 %646, i64* %RSP, align 8, !tbaa !2428
  store i64 %643, i64* %PC, align 8, !tbaa !2428
  %648 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %643, %struct.Memory* %MEMORY.0)
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -8
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %650 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = add i64 %654, 4
  store i64 %655, i64* %RCX, align 8, !tbaa !2428
  %656 = icmp ugt i64 %654, -5
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %4, align 1, !tbaa !2432
  %658 = trunc i64 %655 to i32
  %659 = and i32 %658, 255
  %660 = tail call i32 @llvm.ctpop.i32(i32 %659) #8
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  store i8 %663, i8* %5, align 1, !tbaa !2446
  %664 = xor i64 %654, %655
  %665 = lshr i64 %664, 4
  %666 = trunc i64 %665 to i8
  %667 = and i8 %666, 1
  store i8 %667, i8* %6, align 1, !tbaa !2447
  %668 = icmp eq i64 %655, 0
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %7, align 1, !tbaa !2448
  %670 = lshr i64 %655, 63
  %671 = trunc i64 %670 to i8
  store i8 %671, i8* %8, align 1, !tbaa !2449
  %672 = lshr i64 %654, 63
  %673 = xor i64 %670, %672
  %674 = add nuw nsw i64 %673, %670
  %675 = icmp eq i64 %674, 2
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %9, align 1, !tbaa !2450
  %677 = add i64 %651, 15
  store i64 %677, i64* %PC, align 8
  store i64 %655, i64* %653, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %678 = add i64 %994, -12
  store i64 4195899, i64* %PC, align 8
  %679 = inttoptr i64 %678 to i32*
  store i32 5, i32* %679, align 4
  %680 = load i64, i64* %RBP, align 8
  %681 = add i64 %680, -12
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %681 to i32*
  %685 = load i32, i32* %684, align 4
  %686 = zext i32 %685 to i64
  store i64 %686, i64* %RDI, align 8, !tbaa !2428
  %687 = add i64 %682, -331
  %688 = add i64 %682, 8
  %689 = load i64, i64* %RSP, align 8, !tbaa !2428
  %690 = add i64 %689, -8
  %691 = inttoptr i64 %690 to i64*
  store i64 %688, i64* %691, align 8
  store i64 %690, i64* %RSP, align 8, !tbaa !2428
  store i64 %687, i64* %PC, align 8, !tbaa !2428
  %692 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %687, %struct.Memory* %MEMORY.0)
  %693 = load i64, i64* %RBP, align 8
  %694 = add i64 %693, -8
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = add i64 %698, 4
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = icmp ugt i64 %698, -5
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %4, align 1, !tbaa !2432
  %702 = trunc i64 %699 to i32
  %703 = and i32 %702, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #8
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %5, align 1, !tbaa !2446
  %708 = xor i64 %698, %699
  %709 = lshr i64 %708, 4
  %710 = trunc i64 %709 to i8
  %711 = and i8 %710, 1
  store i8 %711, i8* %6, align 1, !tbaa !2447
  %712 = icmp eq i64 %699, 0
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %7, align 1, !tbaa !2448
  %714 = lshr i64 %699, 63
  %715 = trunc i64 %714 to i8
  store i8 %715, i8* %8, align 1, !tbaa !2449
  %716 = lshr i64 %698, 63
  %717 = xor i64 %714, %716
  %718 = add nuw nsw i64 %717, %714
  %719 = icmp eq i64 %718, 2
  %720 = zext i1 %719 to i8
  store i8 %720, i8* %9, align 1, !tbaa !2450
  %721 = add i64 %695, 15
  store i64 %721, i64* %PC, align 8
  store i64 %699, i64* %697, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %722 = add i64 %994, -12
  store i64 4197049, i64* %PC, align 8
  %723 = inttoptr i64 %722 to i32*
  store i32 28, i32* %723, align 4
  %724 = load i64, i64* %RBP, align 8
  %725 = add i64 %724, -12
  %726 = load i64, i64* %PC, align 8
  %727 = add i64 %726, 3
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %725 to i32*
  %729 = load i32, i32* %728, align 4
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RDI, align 8, !tbaa !2428
  %731 = add i64 %726, -1481
  %732 = add i64 %726, 8
  %733 = load i64, i64* %RSP, align 8, !tbaa !2428
  %734 = add i64 %733, -8
  %735 = inttoptr i64 %734 to i64*
  store i64 %732, i64* %735, align 8
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  store i64 %731, i64* %PC, align 8, !tbaa !2428
  %736 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %731, %struct.Memory* %MEMORY.0)
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -8
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = add i64 %742, 4
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  %744 = icmp ugt i64 %742, -5
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %4, align 1, !tbaa !2432
  %746 = trunc i64 %743 to i32
  %747 = and i32 %746, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #8
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %5, align 1, !tbaa !2446
  %752 = xor i64 %742, %743
  %753 = lshr i64 %752, 4
  %754 = trunc i64 %753 to i8
  %755 = and i8 %754, 1
  store i8 %755, i8* %6, align 1, !tbaa !2447
  %756 = icmp eq i64 %743, 0
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %7, align 1, !tbaa !2448
  %758 = lshr i64 %743, 63
  %759 = trunc i64 %758 to i8
  store i8 %759, i8* %8, align 1, !tbaa !2449
  %760 = lshr i64 %742, 63
  %761 = xor i64 %758, %760
  %762 = add nuw nsw i64 %761, %758
  %763 = icmp eq i64 %762, 2
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %9, align 1, !tbaa !2450
  %765 = add i64 %739, 15
  store i64 %765, i64* %PC, align 8
  store i64 %743, i64* %741, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %766 = add i64 %994, -12
  store i64 4195680, i64* %PC, align 8
  %767 = inttoptr i64 %766 to i32*
  store i32 0, i32* %767, align 4
  %768 = load i64, i64* %RSP, align 8
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %768, 48
  store i64 %770, i64* %RSP, align 8, !tbaa !2428
  %771 = icmp ugt i64 %768, -49
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %4, align 1, !tbaa !2432
  %773 = trunc i64 %770 to i32
  %774 = and i32 %773, 255
  %775 = tail call i32 @llvm.ctpop.i32(i32 %774) #8
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  store i8 %778, i8* %5, align 1, !tbaa !2446
  %779 = xor i64 %768, 16
  %780 = xor i64 %779, %770
  %781 = lshr i64 %780, 4
  %782 = trunc i64 %781 to i8
  %783 = and i8 %782, 1
  store i8 %783, i8* %6, align 1, !tbaa !2447
  %784 = icmp eq i64 %770, 0
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %7, align 1, !tbaa !2448
  %786 = lshr i64 %770, 63
  %787 = trunc i64 %786 to i8
  store i8 %787, i8* %8, align 1, !tbaa !2449
  %788 = lshr i64 %768, 63
  %789 = xor i64 %786, %788
  %790 = add nuw nsw i64 %789, %786
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %9, align 1, !tbaa !2450
  %793 = add i64 %769, 5
  store i64 %793, i64* %PC, align 8
  %794 = add i64 %768, 56
  %795 = inttoptr i64 %770 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %RBP, align 8, !tbaa !2428
  store i64 %794, i64* %RSP, align 8, !tbaa !2428
  %797 = add i64 %769, 6
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  %799 = load i64, i64* %798, align 8
  store i64 %799, i64* %PC, align 8, !tbaa !2428
  %800 = add i64 %768, 64
  store i64 %800, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %801 = add i64 %994, -12
  store i64 4196149, i64* %PC, align 8
  %802 = inttoptr i64 %801 to i32*
  store i32 10, i32* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -12
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %805, -581
  %811 = add i64 %805, 8
  %812 = load i64, i64* %RSP, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %811, i64* %814, align 8
  store i64 %813, i64* %RSP, align 8, !tbaa !2428
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  %815 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %810, %struct.Memory* %MEMORY.0)
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -8
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = add i64 %821, 4
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = icmp ugt i64 %821, -5
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %4, align 1, !tbaa !2432
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %5, align 1, !tbaa !2446
  %831 = xor i64 %821, %822
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %6, align 1, !tbaa !2447
  %835 = icmp eq i64 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %7, align 1, !tbaa !2448
  %837 = lshr i64 %822, 63
  %838 = trunc i64 %837 to i8
  store i8 %838, i8* %8, align 1, !tbaa !2449
  %839 = lshr i64 %821, 63
  %840 = xor i64 %837, %839
  %841 = add nuw nsw i64 %840, %837
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %9, align 1, !tbaa !2450
  %844 = add i64 %818, 15
  store i64 %844, i64* %PC, align 8
  store i64 %822, i64* %820, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %845 = add i64 %994, -12
  store i64 4196399, i64* %PC, align 8
  %846 = inttoptr i64 %845 to i32*
  store i32 15, i32* %846, align 4
  %847 = load i64, i64* %RBP, align 8
  %848 = add i64 %847, -12
  %849 = load i64, i64* %PC, align 8
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = add i64 %849, -831
  %855 = add i64 %849, 8
  %856 = load i64, i64* %RSP, align 8, !tbaa !2428
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %855, i64* %858, align 8
  store i64 %857, i64* %RSP, align 8, !tbaa !2428
  store i64 %854, i64* %PC, align 8, !tbaa !2428
  %859 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %854, %struct.Memory* %MEMORY.0)
  %860 = load i64, i64* %RBP, align 8
  %861 = add i64 %860, -8
  %862 = load i64, i64* %PC, align 8
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %865, 4
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ugt i64 %865, -5
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %4, align 1, !tbaa !2432
  %869 = trunc i64 %866 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %5, align 1, !tbaa !2446
  %875 = xor i64 %865, %866
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  store i8 %878, i8* %6, align 1, !tbaa !2447
  %879 = icmp eq i64 %866, 0
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %7, align 1, !tbaa !2448
  %881 = lshr i64 %866, 63
  %882 = trunc i64 %881 to i8
  store i8 %882, i8* %8, align 1, !tbaa !2449
  %883 = lshr i64 %865, 63
  %884 = xor i64 %881, %883
  %885 = add nuw nsw i64 %884, %881
  %886 = icmp eq i64 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %9, align 1, !tbaa !2450
  %888 = add i64 %862, 15
  store i64 %888, i64* %PC, align 8
  store i64 %866, i64* %864, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %889 = add i64 %994, -12
  store i64 4196649, i64* %PC, align 8
  %890 = inttoptr i64 %889 to i32*
  store i32 20, i32* %890, align 4
  %891 = load i64, i64* %RBP, align 8
  %892 = add i64 %891, -12
  %893 = load i64, i64* %PC, align 8
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895, align 4
  %897 = zext i32 %896 to i64
  store i64 %897, i64* %RDI, align 8, !tbaa !2428
  %898 = add i64 %893, -1081
  %899 = add i64 %893, 8
  %900 = load i64, i64* %RSP, align 8, !tbaa !2428
  %901 = add i64 %900, -8
  %902 = inttoptr i64 %901 to i64*
  store i64 %899, i64* %902, align 8
  store i64 %901, i64* %RSP, align 8, !tbaa !2428
  store i64 %898, i64* %PC, align 8, !tbaa !2428
  %903 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %898, %struct.Memory* %MEMORY.0)
  %904 = load i64, i64* %RBP, align 8
  %905 = add i64 %904, -8
  %906 = load i64, i64* %PC, align 8
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %905 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = add i64 %909, 4
  store i64 %910, i64* %RCX, align 8, !tbaa !2428
  %911 = icmp ugt i64 %909, -5
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %4, align 1, !tbaa !2432
  %913 = trunc i64 %910 to i32
  %914 = and i32 %913, 255
  %915 = tail call i32 @llvm.ctpop.i32(i32 %914) #8
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  %918 = xor i8 %917, 1
  store i8 %918, i8* %5, align 1, !tbaa !2446
  %919 = xor i64 %909, %910
  %920 = lshr i64 %919, 4
  %921 = trunc i64 %920 to i8
  %922 = and i8 %921, 1
  store i8 %922, i8* %6, align 1, !tbaa !2447
  %923 = icmp eq i64 %910, 0
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %7, align 1, !tbaa !2448
  %925 = lshr i64 %910, 63
  %926 = trunc i64 %925 to i8
  store i8 %926, i8* %8, align 1, !tbaa !2449
  %927 = lshr i64 %909, 63
  %928 = xor i64 %925, %927
  %929 = add nuw nsw i64 %928, %925
  %930 = icmp eq i64 %929, 2
  %931 = zext i1 %930 to i8
  store i8 %931, i8* %9, align 1, !tbaa !2450
  %932 = add i64 %906, 15
  store i64 %932, i64* %PC, align 8
  store i64 %910, i64* %908, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %933 = add i64 %994, -12
  store i64 4195749, i64* %PC, align 8
  %934 = inttoptr i64 %933 to i32*
  store i32 2, i32* %934, align 4
  %935 = load i64, i64* %RBP, align 8
  %936 = add i64 %935, -12
  %937 = load i64, i64* %PC, align 8
  %938 = add i64 %937, 3
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939, align 4
  %941 = zext i32 %940 to i64
  store i64 %941, i64* %RDI, align 8, !tbaa !2428
  %942 = add i64 %937, -181
  %943 = add i64 %937, 8
  %944 = load i64, i64* %RSP, align 8, !tbaa !2428
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %943, i64* %946, align 8
  store i64 %945, i64* %RSP, align 8, !tbaa !2428
  store i64 %942, i64* %PC, align 8, !tbaa !2428
  %947 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %942, %struct.Memory* %MEMORY.0)
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -8
  %950 = load i64, i64* %PC, align 8
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = add i64 %953, 4
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = icmp ugt i64 %953, -5
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %4, align 1, !tbaa !2432
  %957 = trunc i64 %954 to i32
  %958 = and i32 %957, 255
  %959 = tail call i32 @llvm.ctpop.i32(i32 %958) #8
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  store i8 %962, i8* %5, align 1, !tbaa !2446
  %963 = xor i64 %953, %954
  %964 = lshr i64 %963, 4
  %965 = trunc i64 %964 to i8
  %966 = and i8 %965, 1
  store i8 %966, i8* %6, align 1, !tbaa !2447
  %967 = icmp eq i64 %954, 0
  %968 = zext i1 %967 to i8
  store i8 %968, i8* %7, align 1, !tbaa !2448
  %969 = lshr i64 %954, 63
  %970 = trunc i64 %969 to i8
  store i8 %970, i8* %8, align 1, !tbaa !2449
  %971 = lshr i64 %953, 63
  %972 = xor i64 %969, %971
  %973 = add nuw nsw i64 %972, %969
  %974 = icmp eq i64 %973, 2
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %9, align 1, !tbaa !2450
  %976 = add i64 %950, 15
  store i64 %976, i64* %PC, align 8
  store i64 %954, i64* %952, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400609
  %.sink9 = phi i64 [ 1101, %block_400986 ], [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 651, %block_4007c4 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 201, %block_400609 ]
  %MEMORY.0 = phi %struct.Memory* [ %1275, %block_400986 ], [ %1189, %block_40088c ], [ %1145, %block_400792 ], [ %1101, %block_400b16 ], [ %1057, %block_400698 ], [ %1013, %block_400a1c ], [ %947, %block_40059e ], [ %903, %block_400922 ], [ %859, %block_400828 ], [ %815, %block_40072e ], [ %736, %block_400ab2 ], [ %692, %block_400634 ], [ %648, %block_4009b8 ], [ %600, %block_4007c4 ], [ %556, %block_400b48 ], [ %512, %block_4006ca ], [ %468, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %1231, %block_400609 ]
  %977 = bitcast i64* %RAX to i32**
  %978 = load i32*, i32** %977, align 8
  %979 = load i64, i64* %PC, align 8
  %980 = add i64 %979, 3
  store i64 %980, i64* %PC, align 8
  %981 = load i32, i32* %978, align 4
  %982 = sext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = shl nsw i64 %982, 3
  %984 = add i64 %983, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %985 = add i64 %979, 11
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = load i64, i64* %RBP, align 8
  %989 = add i64 %988, -40
  %990 = add i64 %979, 15
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %987, i64* %991, align 8
  %992 = load i64, i64* %PC, align 8
  %993 = sub i64 %992, %.sink9
  %994 = load i64, i64* %RBP, align 8
  %995 = add i64 %994, -40
  %996 = add i64 %993, 4
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i64*
  %998 = load i64, i64* %997, align 8
  store i64 %998, i64* %RAX, align 8, !tbaa !2428
  store i64 %998, i64* %PC, align 8, !tbaa !2428
  switch i64 %998, label %1311 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %999 = add i64 %994, -12
  store i64 4196899, i64* %PC, align 8
  %1000 = inttoptr i64 %999 to i32*
  store i32 25, i32* %1000, align 4
  %1001 = load i64, i64* %RBP, align 8
  %1002 = add i64 %1001, -12
  %1003 = load i64, i64* %PC, align 8
  %1004 = add i64 %1003, 3
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1002 to i32*
  %1006 = load i32, i32* %1005, align 4
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RDI, align 8, !tbaa !2428
  %1008 = add i64 %1003, -1331
  %1009 = add i64 %1003, 8
  %1010 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1011 = add i64 %1010, -8
  %1012 = inttoptr i64 %1011 to i64*
  store i64 %1009, i64* %1012, align 8
  store i64 %1011, i64* %RSP, align 8, !tbaa !2428
  store i64 %1008, i64* %PC, align 8, !tbaa !2428
  %1013 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1008, %struct.Memory* %MEMORY.0)
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -8
  %1016 = load i64, i64* %PC, align 8
  %1017 = add i64 %1016, 4
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1015 to i64*
  %1019 = load i64, i64* %1018, align 8
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = add i64 %1019, 4
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = icmp ugt i64 %1019, -5
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %4, align 1, !tbaa !2432
  %1023 = trunc i64 %1020 to i32
  %1024 = and i32 %1023, 255
  %1025 = tail call i32 @llvm.ctpop.i32(i32 %1024) #8
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  store i8 %1028, i8* %5, align 1, !tbaa !2446
  %1029 = xor i64 %1019, %1020
  %1030 = lshr i64 %1029, 4
  %1031 = trunc i64 %1030 to i8
  %1032 = and i8 %1031, 1
  store i8 %1032, i8* %6, align 1, !tbaa !2447
  %1033 = icmp eq i64 %1020, 0
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %7, align 1, !tbaa !2448
  %1035 = lshr i64 %1020, 63
  %1036 = trunc i64 %1035 to i8
  store i8 %1036, i8* %8, align 1, !tbaa !2449
  %1037 = lshr i64 %1019, 63
  %1038 = xor i64 %1035, %1037
  %1039 = add nuw nsw i64 %1038, %1035
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %9, align 1, !tbaa !2450
  %1042 = add i64 %1016, 15
  store i64 %1042, i64* %PC, align 8
  store i64 %1020, i64* %1018, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1043 = add i64 %994, -12
  store i64 4195999, i64* %PC, align 8
  %1044 = inttoptr i64 %1043 to i32*
  store i32 7, i32* %1044, align 4
  %1045 = load i64, i64* %RBP, align 8
  %1046 = add i64 %1045, -12
  %1047 = load i64, i64* %PC, align 8
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049, align 4
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RDI, align 8, !tbaa !2428
  %1052 = add i64 %1047, -431
  %1053 = add i64 %1047, 8
  %1054 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1055 = add i64 %1054, -8
  %1056 = inttoptr i64 %1055 to i64*
  store i64 %1053, i64* %1056, align 8
  store i64 %1055, i64* %RSP, align 8, !tbaa !2428
  store i64 %1052, i64* %PC, align 8, !tbaa !2428
  %1057 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1052, %struct.Memory* %MEMORY.0)
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -8
  %1060 = load i64, i64* %PC, align 8
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RAX, align 8, !tbaa !2428
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = icmp ugt i64 %1063, -5
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %4, align 1, !tbaa !2432
  %1067 = trunc i64 %1064 to i32
  %1068 = and i32 %1067, 255
  %1069 = tail call i32 @llvm.ctpop.i32(i32 %1068) #8
  %1070 = trunc i32 %1069 to i8
  %1071 = and i8 %1070, 1
  %1072 = xor i8 %1071, 1
  store i8 %1072, i8* %5, align 1, !tbaa !2446
  %1073 = xor i64 %1063, %1064
  %1074 = lshr i64 %1073, 4
  %1075 = trunc i64 %1074 to i8
  %1076 = and i8 %1075, 1
  store i8 %1076, i8* %6, align 1, !tbaa !2447
  %1077 = icmp eq i64 %1064, 0
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %7, align 1, !tbaa !2448
  %1079 = lshr i64 %1064, 63
  %1080 = trunc i64 %1079 to i8
  store i8 %1080, i8* %8, align 1, !tbaa !2449
  %1081 = lshr i64 %1063, 63
  %1082 = xor i64 %1079, %1081
  %1083 = add nuw nsw i64 %1082, %1079
  %1084 = icmp eq i64 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %9, align 1, !tbaa !2450
  %1086 = add i64 %1060, 15
  store i64 %1086, i64* %PC, align 8
  store i64 %1064, i64* %1062, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1087 = add i64 %994, -12
  store i64 4197149, i64* %PC, align 8
  %1088 = inttoptr i64 %1087 to i32*
  store i32 30, i32* %1088, align 4
  %1089 = load i64, i64* %RBP, align 8
  %1090 = add i64 %1089, -12
  %1091 = load i64, i64* %PC, align 8
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093, align 4
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RDI, align 8, !tbaa !2428
  %1096 = add i64 %1091, -1581
  %1097 = add i64 %1091, 8
  %1098 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1099 = add i64 %1098, -8
  %1100 = inttoptr i64 %1099 to i64*
  store i64 %1097, i64* %1100, align 8
  store i64 %1099, i64* %RSP, align 8, !tbaa !2428
  store i64 %1096, i64* %PC, align 8, !tbaa !2428
  %1101 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1096, %struct.Memory* %MEMORY.0)
  %1102 = load i64, i64* %RBP, align 8
  %1103 = add i64 %1102, -8
  %1104 = load i64, i64* %PC, align 8
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1103 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %RCX, align 8, !tbaa !2428
  %1109 = icmp ugt i64 %1107, -5
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %4, align 1, !tbaa !2432
  %1111 = trunc i64 %1108 to i32
  %1112 = and i32 %1111, 255
  %1113 = tail call i32 @llvm.ctpop.i32(i32 %1112) #8
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  store i8 %1116, i8* %5, align 1, !tbaa !2446
  %1117 = xor i64 %1107, %1108
  %1118 = lshr i64 %1117, 4
  %1119 = trunc i64 %1118 to i8
  %1120 = and i8 %1119, 1
  store i8 %1120, i8* %6, align 1, !tbaa !2447
  %1121 = icmp eq i64 %1108, 0
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %7, align 1, !tbaa !2448
  %1123 = lshr i64 %1108, 63
  %1124 = trunc i64 %1123 to i8
  store i8 %1124, i8* %8, align 1, !tbaa !2449
  %1125 = lshr i64 %1107, 63
  %1126 = xor i64 %1123, %1125
  %1127 = add nuw nsw i64 %1126, %1123
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %9, align 1, !tbaa !2450
  %1130 = add i64 %1104, 15
  store i64 %1130, i64* %PC, align 8
  store i64 %1108, i64* %1106, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1131 = add i64 %994, -12
  store i64 4196249, i64* %PC, align 8
  %1132 = inttoptr i64 %1131 to i32*
  store i32 12, i32* %1132, align 4
  %1133 = load i64, i64* %RBP, align 8
  %1134 = add i64 %1133, -12
  %1135 = load i64, i64* %PC, align 8
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1134 to i32*
  %1138 = load i32, i32* %1137, align 4
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* %RDI, align 8, !tbaa !2428
  %1140 = add i64 %1135, -681
  %1141 = add i64 %1135, 8
  %1142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1143 = add i64 %1142, -8
  %1144 = inttoptr i64 %1143 to i64*
  store i64 %1141, i64* %1144, align 8
  store i64 %1143, i64* %RSP, align 8, !tbaa !2428
  store i64 %1140, i64* %PC, align 8, !tbaa !2428
  %1145 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1140, %struct.Memory* %MEMORY.0)
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -8
  %1148 = load i64, i64* %PC, align 8
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1147 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %RAX, align 8, !tbaa !2428
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %RCX, align 8, !tbaa !2428
  %1153 = icmp ugt i64 %1151, -5
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %4, align 1, !tbaa !2432
  %1155 = trunc i64 %1152 to i32
  %1156 = and i32 %1155, 255
  %1157 = tail call i32 @llvm.ctpop.i32(i32 %1156) #8
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  store i8 %1160, i8* %5, align 1, !tbaa !2446
  %1161 = xor i64 %1151, %1152
  %1162 = lshr i64 %1161, 4
  %1163 = trunc i64 %1162 to i8
  %1164 = and i8 %1163, 1
  store i8 %1164, i8* %6, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1152, 0
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %7, align 1, !tbaa !2448
  %1167 = lshr i64 %1152, 63
  %1168 = trunc i64 %1167 to i8
  store i8 %1168, i8* %8, align 1, !tbaa !2449
  %1169 = lshr i64 %1151, 63
  %1170 = xor i64 %1167, %1169
  %1171 = add nuw nsw i64 %1170, %1167
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %9, align 1, !tbaa !2450
  %1174 = add i64 %1148, 15
  store i64 %1174, i64* %PC, align 8
  store i64 %1152, i64* %1150, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1175 = add i64 %994, -12
  store i64 4196499, i64* %PC, align 8
  %1176 = inttoptr i64 %1175 to i32*
  store i32 17, i32* %1176, align 4
  %1177 = load i64, i64* %RBP, align 8
  %1178 = add i64 %1177, -12
  %1179 = load i64, i64* %PC, align 8
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC, align 8
  %1181 = inttoptr i64 %1178 to i32*
  %1182 = load i32, i32* %1181, align 4
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RDI, align 8, !tbaa !2428
  %1184 = add i64 %1179, -931
  %1185 = add i64 %1179, 8
  %1186 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1187 = add i64 %1186, -8
  %1188 = inttoptr i64 %1187 to i64*
  store i64 %1185, i64* %1188, align 8
  store i64 %1187, i64* %RSP, align 8, !tbaa !2428
  store i64 %1184, i64* %PC, align 8, !tbaa !2428
  %1189 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1184, %struct.Memory* %MEMORY.0)
  %1190 = load i64, i64* %RBP, align 8
  %1191 = add i64 %1190, -8
  %1192 = load i64, i64* %PC, align 8
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC, align 8
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194, align 8
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %RCX, align 8, !tbaa !2428
  %1197 = icmp ugt i64 %1195, -5
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %4, align 1, !tbaa !2432
  %1199 = trunc i64 %1196 to i32
  %1200 = and i32 %1199, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #8
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %5, align 1, !tbaa !2446
  %1205 = xor i64 %1195, %1196
  %1206 = lshr i64 %1205, 4
  %1207 = trunc i64 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %6, align 1, !tbaa !2447
  %1209 = icmp eq i64 %1196, 0
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %7, align 1, !tbaa !2448
  %1211 = lshr i64 %1196, 63
  %1212 = trunc i64 %1211 to i8
  store i8 %1212, i8* %8, align 1, !tbaa !2449
  %1213 = lshr i64 %1195, 63
  %1214 = xor i64 %1211, %1213
  %1215 = add nuw nsw i64 %1214, %1211
  %1216 = icmp eq i64 %1215, 2
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %9, align 1, !tbaa !2450
  %1218 = add i64 %1192, 15
  store i64 %1218, i64* %PC, align 8
  store i64 %1196, i64* %1194, align 8
  br label %block_400566

block_400609:                                     ; preds = %block_400602, %3
  %1219 = phi i64 [ %1, %3 ], [ %.pre, %block_400602 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400602 ]
  %1220 = load i64, i64* %RBP, align 8
  %1221 = add i64 %1220, -12
  %1222 = add i64 %1219, 3
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1221 to i32*
  %1224 = load i32, i32* %1223, align 4
  %1225 = zext i32 %1224 to i64
  store i64 %1225, i64* %RDI, align 8, !tbaa !2428
  %1226 = add i64 %1219, -281
  %1227 = add i64 %1219, 8
  %1228 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1229 = add i64 %1228, -8
  %1230 = inttoptr i64 %1229 to i64*
  store i64 %1227, i64* %1230, align 8
  store i64 %1229, i64* %RSP, align 8, !tbaa !2428
  store i64 %1226, i64* %PC, align 8, !tbaa !2428
  %1231 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1226, %struct.Memory* %MEMORY.1)
  %1232 = load i64, i64* %RBP, align 8
  %1233 = add i64 %1232, -8
  %1234 = load i64, i64* %PC, align 8
  %1235 = add i64 %1234, 4
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1239 = icmp ugt i64 %1237, -5
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %4, align 1, !tbaa !2432
  %1241 = trunc i64 %1238 to i32
  %1242 = and i32 %1241, 255
  %1243 = tail call i32 @llvm.ctpop.i32(i32 %1242) #8
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = xor i8 %1245, 1
  store i8 %1246, i8* %5, align 1, !tbaa !2446
  %1247 = xor i64 %1237, %1238
  %1248 = lshr i64 %1247, 4
  %1249 = trunc i64 %1248 to i8
  %1250 = and i8 %1249, 1
  store i8 %1250, i8* %6, align 1, !tbaa !2447
  %1251 = icmp eq i64 %1238, 0
  %1252 = zext i1 %1251 to i8
  store i8 %1252, i8* %7, align 1, !tbaa !2448
  %1253 = lshr i64 %1238, 63
  %1254 = trunc i64 %1253 to i8
  store i8 %1254, i8* %8, align 1, !tbaa !2449
  %1255 = lshr i64 %1237, 63
  %1256 = xor i64 %1253, %1255
  %1257 = add nuw nsw i64 %1256, %1253
  %1258 = icmp eq i64 %1257, 2
  %1259 = zext i1 %1258 to i8
  store i8 %1259, i8* %9, align 1, !tbaa !2450
  %1260 = add i64 %1234, 15
  store i64 %1260, i64* %PC, align 8
  store i64 %1238, i64* %1236, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1261 = add i64 %994, -12
  store i64 4196749, i64* %PC, align 8
  %1262 = inttoptr i64 %1261 to i32*
  store i32 22, i32* %1262, align 4
  %1263 = load i64, i64* %RBP, align 8
  %1264 = add i64 %1263, -12
  %1265 = load i64, i64* %PC, align 8
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1264 to i32*
  %1268 = load i32, i32* %1267, align 4
  %1269 = zext i32 %1268 to i64
  store i64 %1269, i64* %RDI, align 8, !tbaa !2428
  %1270 = add i64 %1265, -1181
  %1271 = add i64 %1265, 8
  %1272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1273 = add i64 %1272, -8
  %1274 = inttoptr i64 %1273 to i64*
  store i64 %1271, i64* %1274, align 8
  store i64 %1273, i64* %RSP, align 8, !tbaa !2428
  store i64 %1270, i64* %PC, align 8, !tbaa !2428
  %1275 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1270, %struct.Memory* %MEMORY.0)
  %1276 = load i64, i64* %RBP, align 8
  %1277 = add i64 %1276, -8
  %1278 = load i64, i64* %PC, align 8
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280, align 8
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1283 = icmp ugt i64 %1281, -5
  %1284 = zext i1 %1283 to i8
  store i8 %1284, i8* %4, align 1, !tbaa !2432
  %1285 = trunc i64 %1282 to i32
  %1286 = and i32 %1285, 255
  %1287 = tail call i32 @llvm.ctpop.i32(i32 %1286) #8
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = xor i8 %1289, 1
  store i8 %1290, i8* %5, align 1, !tbaa !2446
  %1291 = xor i64 %1281, %1282
  %1292 = lshr i64 %1291, 4
  %1293 = trunc i64 %1292 to i8
  %1294 = and i8 %1293, 1
  store i8 %1294, i8* %6, align 1, !tbaa !2447
  %1295 = icmp eq i64 %1282, 0
  %1296 = zext i1 %1295 to i8
  store i8 %1296, i8* %7, align 1, !tbaa !2448
  %1297 = lshr i64 %1282, 63
  %1298 = trunc i64 %1297 to i8
  store i8 %1298, i8* %8, align 1, !tbaa !2449
  %1299 = lshr i64 %1281, 63
  %1300 = xor i64 %1297, %1299
  %1301 = add nuw nsw i64 %1300, %1297
  %1302 = icmp eq i64 %1301, 2
  %1303 = zext i1 %1302 to i8
  store i8 %1303, i8* %9, align 1, !tbaa !2450
  %1304 = add i64 %1278, 15
  store i64 %1304, i64* %PC, align 8
  store i64 %1282, i64* %1280, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1305 = add i64 %994, -12
  store i64 4195849, i64* %PC, align 8
  %1306 = inttoptr i64 %1305 to i32*
  store i32 4, i32* %1306, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400609

block_400a80:                                     ; preds = %block_400566
  %1307 = add i64 %994, -12
  store i64 4196999, i64* %PC, align 8
  %1308 = inttoptr i64 %1307 to i32*
  store i32 27, i32* %1308, align 4
  %1309 = load i64, i64* %PC, align 8
  %1310 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1309, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1310

; <label>:1311:                                   ; preds = %block_400566
  %1312 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %998, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1312
}

; Function Attrs: noinline
define %struct.Memory* @sub_400703(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400703

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %557, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400703

block_4007f6:                                     ; preds = %block_400566
  %12 = add i64 %557, -12
  store i64 4196349, i64* %PC, align 8
  %13 = inttoptr i64 %12 to i32*
  store i32 14, i32* %13, align 4
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -12
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  store i64 %20, i64* %RDI, align 8, !tbaa !2428
  %21 = add i64 %16, -781
  %22 = add i64 %16, 8
  %23 = load i64, i64* %RSP, align 8, !tbaa !2428
  %24 = add i64 %23, -8
  %25 = inttoptr i64 %24 to i64*
  store i64 %22, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %21, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %21, %struct.Memory* %MEMORY.0)
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %28 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RAX, align 8, !tbaa !2428
  %33 = add i64 %32, 4
  store i64 %33, i64* %RCX, align 8, !tbaa !2428
  %34 = icmp ugt i64 %32, -5
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %4, align 1, !tbaa !2432
  %36 = trunc i64 %33 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #8
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %5, align 1, !tbaa !2446
  %42 = xor i64 %32, %33
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %6, align 1, !tbaa !2447
  %46 = icmp eq i64 %33, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %7, align 1, !tbaa !2448
  %48 = lshr i64 %33, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %8, align 1, !tbaa !2449
  %50 = lshr i64 %32, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %9, align 1, !tbaa !2450
  %55 = add i64 %29, 15
  store i64 %55, i64* %PC, align 8
  store i64 %33, i64* %31, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %56 = add i64 %557, -12
  store i64 4196599, i64* %PC, align 8
  %57 = inttoptr i64 %56 to i32*
  store i32 19, i32* %57, align 4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -12
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %60, -1031
  %66 = add i64 %60, 8
  %67 = load i64, i64* %RSP, align 8, !tbaa !2428
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  store i64 %66, i64* %69, align 8
  store i64 %68, i64* %RSP, align 8, !tbaa !2428
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %65, %struct.Memory* %MEMORY.0)
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %77 = add i64 %76, 4
  store i64 %77, i64* %RCX, align 8, !tbaa !2428
  %78 = icmp ugt i64 %76, -5
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %4, align 1, !tbaa !2432
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #8
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %5, align 1, !tbaa !2446
  %86 = xor i64 %76, %77
  %87 = lshr i64 %86, 4
  %88 = trunc i64 %87 to i8
  %89 = and i8 %88, 1
  store i8 %89, i8* %6, align 1, !tbaa !2447
  %90 = icmp eq i64 %77, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %7, align 1, !tbaa !2448
  %92 = lshr i64 %77, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %8, align 1, !tbaa !2449
  %94 = lshr i64 %76, 63
  %95 = xor i64 %92, %94
  %96 = add nuw nsw i64 %95, %92
  %97 = icmp eq i64 %96, 2
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %9, align 1, !tbaa !2450
  %99 = add i64 %73, 15
  store i64 %99, i64* %PC, align 8
  store i64 %77, i64* %75, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %100 = add i64 %557, -12
  store i64 4196849, i64* %PC, align 8
  %101 = inttoptr i64 %100 to i32*
  store i32 24, i32* %101, align 4
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -12
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  store i64 %108, i64* %RDI, align 8, !tbaa !2428
  %109 = add i64 %104, -1281
  %110 = add i64 %104, 8
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  %114 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.0)
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RAX, align 8, !tbaa !2428
  %121 = add i64 %120, 4
  store i64 %121, i64* %RCX, align 8, !tbaa !2428
  %122 = icmp ugt i64 %120, -5
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %4, align 1, !tbaa !2432
  %124 = trunc i64 %121 to i32
  %125 = and i32 %124, 255
  %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #8
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  store i8 %129, i8* %5, align 1, !tbaa !2446
  %130 = xor i64 %120, %121
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %6, align 1, !tbaa !2447
  %134 = icmp eq i64 %121, 0
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %7, align 1, !tbaa !2448
  %136 = lshr i64 %121, 63
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %8, align 1, !tbaa !2449
  %138 = lshr i64 %120, 63
  %139 = xor i64 %136, %138
  %140 = add nuw nsw i64 %139, %136
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %9, align 1, !tbaa !2450
  %143 = add i64 %117, 15
  store i64 %143, i64* %PC, align 8
  store i64 %121, i64* %119, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %144 = add i64 %557, -12
  store i64 4197099, i64* %PC, align 8
  %145 = inttoptr i64 %144 to i32*
  store i32 29, i32* %145, align 4
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -12
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %147 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %153 = add i64 %148, -1531
  %154 = add i64 %148, 8
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %MEMORY.0)
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = add i64 %164, 4
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = icmp ugt i64 %164, -5
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %4, align 1, !tbaa !2432
  %168 = trunc i64 %165 to i32
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #8
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %5, align 1, !tbaa !2446
  %174 = xor i64 %164, %165
  %175 = lshr i64 %174, 4
  %176 = trunc i64 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %6, align 1, !tbaa !2447
  %178 = icmp eq i64 %165, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %7, align 1, !tbaa !2448
  %180 = lshr i64 %165, 63
  %181 = trunc i64 %180 to i8
  store i8 %181, i8* %8, align 1, !tbaa !2449
  %182 = lshr i64 %164, 63
  %183 = xor i64 %180, %182
  %184 = add nuw nsw i64 %183, %180
  %185 = icmp eq i64 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %9, align 1, !tbaa !2450
  %187 = add i64 %161, 15
  store i64 %187, i64* %PC, align 8
  store i64 %165, i64* %163, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %188 = add i64 %557, -12
  store i64 4196199, i64* %PC, align 8
  %189 = inttoptr i64 %188 to i32*
  store i32 11, i32* %189, align 4
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -12
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RDI, align 8, !tbaa !2428
  %197 = add i64 %192, -631
  %198 = add i64 %192, 8
  %199 = load i64, i64* %RSP, align 8, !tbaa !2428
  %200 = add i64 %199, -8
  %201 = inttoptr i64 %200 to i64*
  store i64 %198, i64* %201, align 8
  store i64 %200, i64* %RSP, align 8, !tbaa !2428
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  %202 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %197, %struct.Memory* %MEMORY.0)
  %203 = load i64, i64* %RBP, align 8
  %204 = add i64 %203, -8
  %205 = load i64, i64* %PC, align 8
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %204 to i64*
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = add i64 %208, 4
  store i64 %209, i64* %RCX, align 8, !tbaa !2428
  %210 = icmp ugt i64 %208, -5
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %4, align 1, !tbaa !2432
  %212 = trunc i64 %209 to i32
  %213 = and i32 %212, 255
  %214 = tail call i32 @llvm.ctpop.i32(i32 %213) #8
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  store i8 %217, i8* %5, align 1, !tbaa !2446
  %218 = xor i64 %208, %209
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %6, align 1, !tbaa !2447
  %222 = icmp eq i64 %209, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %7, align 1, !tbaa !2448
  %224 = lshr i64 %209, 63
  %225 = trunc i64 %224 to i8
  store i8 %225, i8* %8, align 1, !tbaa !2449
  %226 = lshr i64 %208, 63
  %227 = xor i64 %224, %226
  %228 = add nuw nsw i64 %227, %224
  %229 = icmp eq i64 %228, 2
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %9, align 1, !tbaa !2450
  %231 = add i64 %205, 15
  store i64 %231, i64* %PC, align 8
  store i64 %209, i64* %207, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %232 = add i64 %557, -12
  store i64 4196449, i64* %PC, align 8
  %233 = inttoptr i64 %232 to i32*
  store i32 16, i32* %233, align 4
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -12
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RDI, align 8, !tbaa !2428
  %241 = add i64 %236, -881
  %242 = add i64 %236, 8
  %243 = load i64, i64* %RSP, align 8, !tbaa !2428
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245, align 8
  store i64 %244, i64* %RSP, align 8, !tbaa !2428
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  %246 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %241, %struct.Memory* %MEMORY.0)
  %247 = load i64, i64* %RBP, align 8
  %248 = add i64 %247, -8
  %249 = load i64, i64* %PC, align 8
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %248 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = add i64 %252, 4
  store i64 %253, i64* %RCX, align 8, !tbaa !2428
  %254 = icmp ugt i64 %252, -5
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %4, align 1, !tbaa !2432
  %256 = trunc i64 %253 to i32
  %257 = and i32 %256, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #8
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  store i8 %261, i8* %5, align 1, !tbaa !2446
  %262 = xor i64 %252, %253
  %263 = lshr i64 %262, 4
  %264 = trunc i64 %263 to i8
  %265 = and i8 %264, 1
  store i8 %265, i8* %6, align 1, !tbaa !2447
  %266 = icmp eq i64 %253, 0
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %7, align 1, !tbaa !2448
  %268 = lshr i64 %253, 63
  %269 = trunc i64 %268 to i8
  store i8 %269, i8* %8, align 1, !tbaa !2449
  %270 = lshr i64 %252, 63
  %271 = xor i64 %268, %270
  %272 = add nuw nsw i64 %271, %268
  %273 = icmp eq i64 %272, 2
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %9, align 1, !tbaa !2450
  %275 = add i64 %249, 15
  store i64 %275, i64* %PC, align 8
  store i64 %253, i64* %251, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %276 = add i64 %557, -12
  store i64 4196699, i64* %PC, align 8
  %277 = inttoptr i64 %276 to i32*
  store i32 21, i32* %277, align 4
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -12
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, 3
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RDI, align 8, !tbaa !2428
  %285 = add i64 %280, -1131
  %286 = add i64 %280, 8
  %287 = load i64, i64* %RSP, align 8, !tbaa !2428
  %288 = add i64 %287, -8
  %289 = inttoptr i64 %288 to i64*
  store i64 %286, i64* %289, align 8
  store i64 %288, i64* %RSP, align 8, !tbaa !2428
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  %290 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %285, %struct.Memory* %MEMORY.0)
  %291 = load i64, i64* %RBP, align 8
  %292 = add i64 %291, -8
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %292 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = add i64 %296, 4
  store i64 %297, i64* %RCX, align 8, !tbaa !2428
  %298 = icmp ugt i64 %296, -5
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %4, align 1, !tbaa !2432
  %300 = trunc i64 %297 to i32
  %301 = and i32 %300, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #8
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %5, align 1, !tbaa !2446
  %306 = xor i64 %296, %297
  %307 = lshr i64 %306, 4
  %308 = trunc i64 %307 to i8
  %309 = and i8 %308, 1
  store i8 %309, i8* %6, align 1, !tbaa !2447
  %310 = icmp eq i64 %297, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %7, align 1, !tbaa !2448
  %312 = lshr i64 %297, 63
  %313 = trunc i64 %312 to i8
  store i8 %313, i8* %8, align 1, !tbaa !2449
  %314 = lshr i64 %296, 63
  %315 = xor i64 %312, %314
  %316 = add nuw nsw i64 %315, %312
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %9, align 1, !tbaa !2450
  %319 = add i64 %293, 15
  store i64 %319, i64* %PC, align 8
  store i64 %297, i64* %295, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %320 = add i64 %557, -12
  store i64 4195699, i64* %PC, align 8
  %321 = inttoptr i64 %320 to i32*
  store i32 1, i32* %321, align 4
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -12
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RDI, align 8, !tbaa !2428
  %329 = add i64 %324, -131
  %330 = add i64 %324, 8
  %331 = load i64, i64* %RSP, align 8, !tbaa !2428
  %332 = add i64 %331, -8
  %333 = inttoptr i64 %332 to i64*
  store i64 %330, i64* %333, align 8
  store i64 %332, i64* %RSP, align 8, !tbaa !2428
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  %334 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %329, %struct.Memory* %MEMORY.0)
  %335 = load i64, i64* %RBP, align 8
  %336 = add i64 %335, -8
  %337 = load i64, i64* %PC, align 8
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339, align 8
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = add i64 %340, 4
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = icmp ugt i64 %340, -5
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %4, align 1, !tbaa !2432
  %344 = trunc i64 %341 to i32
  %345 = and i32 %344, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #8
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %5, align 1, !tbaa !2446
  %350 = xor i64 %340, %341
  %351 = lshr i64 %350, 4
  %352 = trunc i64 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %6, align 1, !tbaa !2447
  %354 = icmp eq i64 %341, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %7, align 1, !tbaa !2448
  %356 = lshr i64 %341, 63
  %357 = trunc i64 %356 to i8
  store i8 %357, i8* %8, align 1, !tbaa !2449
  %358 = lshr i64 %340, 63
  %359 = xor i64 %356, %358
  %360 = add nuw nsw i64 %359, %356
  %361 = icmp eq i64 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %9, align 1, !tbaa !2450
  %363 = add i64 %337, 15
  store i64 %363, i64* %PC, align 8
  store i64 %341, i64* %339, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %364 = add i64 %557, -12
  store i64 4196949, i64* %PC, align 8
  %365 = inttoptr i64 %364 to i32*
  store i32 26, i32* %365, align 4
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -12
  %368 = load i64, i64* %PC, align 8
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %367 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RDI, align 8, !tbaa !2428
  %373 = add i64 %368, -1381
  %374 = add i64 %368, 8
  %375 = load i64, i64* %RSP, align 8, !tbaa !2428
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377, align 8
  store i64 %376, i64* %RSP, align 8, !tbaa !2428
  store i64 %373, i64* %PC, align 8, !tbaa !2428
  %378 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %373, %struct.Memory* %MEMORY.0)
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -8
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %RAX, align 8, !tbaa !2428
  %385 = add i64 %384, 4
  store i64 %385, i64* %RCX, align 8, !tbaa !2428
  %386 = icmp ugt i64 %384, -5
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %4, align 1, !tbaa !2432
  %388 = trunc i64 %385 to i32
  %389 = and i32 %388, 255
  %390 = tail call i32 @llvm.ctpop.i32(i32 %389) #8
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  store i8 %393, i8* %5, align 1, !tbaa !2446
  %394 = xor i64 %384, %385
  %395 = lshr i64 %394, 4
  %396 = trunc i64 %395 to i8
  %397 = and i8 %396, 1
  store i8 %397, i8* %6, align 1, !tbaa !2447
  %398 = icmp eq i64 %385, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %7, align 1, !tbaa !2448
  %400 = lshr i64 %385, 63
  %401 = trunc i64 %400 to i8
  store i8 %401, i8* %8, align 1, !tbaa !2449
  %402 = lshr i64 %384, 63
  %403 = xor i64 %400, %402
  %404 = add nuw nsw i64 %403, %400
  %405 = icmp eq i64 %404, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %9, align 1, !tbaa !2450
  %407 = add i64 %381, 15
  store i64 %407, i64* %PC, align 8
  store i64 %385, i64* %383, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %408 = add i64 %557, -12
  store i64 4196049, i64* %PC, align 8
  %409 = inttoptr i64 %408 to i32*
  store i32 8, i32* %409, align 4
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -12
  %412 = load i64, i64* %PC, align 8
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414, align 4
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RDI, align 8, !tbaa !2428
  %417 = add i64 %412, -481
  %418 = add i64 %412, 8
  %419 = load i64, i64* %RSP, align 8, !tbaa !2428
  %420 = add i64 %419, -8
  %421 = inttoptr i64 %420 to i64*
  store i64 %418, i64* %421, align 8
  store i64 %420, i64* %RSP, align 8, !tbaa !2428
  store i64 %417, i64* %PC, align 8, !tbaa !2428
  %422 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %417, %struct.Memory* %MEMORY.0)
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -8
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = add i64 %428, 4
  store i64 %429, i64* %RCX, align 8, !tbaa !2428
  %430 = icmp ugt i64 %428, -5
  %431 = zext i1 %430 to i8
  store i8 %431, i8* %4, align 1, !tbaa !2432
  %432 = trunc i64 %429 to i32
  %433 = and i32 %432, 255
  %434 = tail call i32 @llvm.ctpop.i32(i32 %433) #8
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  store i8 %437, i8* %5, align 1, !tbaa !2446
  %438 = xor i64 %428, %429
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  store i8 %441, i8* %6, align 1, !tbaa !2447
  %442 = icmp eq i64 %429, 0
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %7, align 1, !tbaa !2448
  %444 = lshr i64 %429, 63
  %445 = trunc i64 %444 to i8
  store i8 %445, i8* %8, align 1, !tbaa !2449
  %446 = lshr i64 %428, 63
  %447 = xor i64 %444, %446
  %448 = add nuw nsw i64 %447, %444
  %449 = icmp eq i64 %448, 2
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %9, align 1, !tbaa !2450
  %451 = add i64 %425, 15
  store i64 %451, i64* %PC, align 8
  store i64 %429, i64* %427, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %452 = add i64 %557, -12
  store i64 4197199, i64* %PC, align 8
  %453 = inttoptr i64 %452 to i32*
  store i32 31, i32* %453, align 4
  %454 = load i64, i64* %RBP, align 8
  %455 = add i64 %454, -12
  %456 = load i64, i64* %PC, align 8
  %457 = add i64 %456, 3
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %455 to i32*
  %459 = load i32, i32* %458, align 4
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RDI, align 8, !tbaa !2428
  %461 = add i64 %456, -1631
  %462 = add i64 %456, 8
  %463 = load i64, i64* %RSP, align 8, !tbaa !2428
  %464 = add i64 %463, -8
  %465 = inttoptr i64 %464 to i64*
  store i64 %462, i64* %465, align 8
  store i64 %464, i64* %RSP, align 8, !tbaa !2428
  store i64 %461, i64* %PC, align 8, !tbaa !2428
  %466 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %461, %struct.Memory* %MEMORY.0)
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -8
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %468 to i64*
  %472 = load i64, i64* %471, align 8
  store i64 %472, i64* %RAX, align 8, !tbaa !2428
  %473 = add i64 %472, 4
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = icmp ugt i64 %472, -5
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %4, align 1, !tbaa !2432
  %476 = trunc i64 %473 to i32
  %477 = and i32 %476, 255
  %478 = tail call i32 @llvm.ctpop.i32(i32 %477) #8
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  store i8 %481, i8* %5, align 1, !tbaa !2446
  %482 = xor i64 %472, %473
  %483 = lshr i64 %482, 4
  %484 = trunc i64 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %6, align 1, !tbaa !2447
  %486 = icmp eq i64 %473, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %7, align 1, !tbaa !2448
  %488 = lshr i64 %473, 63
  %489 = trunc i64 %488 to i8
  store i8 %489, i8* %8, align 1, !tbaa !2449
  %490 = lshr i64 %472, 63
  %491 = xor i64 %488, %490
  %492 = add nuw nsw i64 %491, %488
  %493 = icmp eq i64 %492, 2
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %9, align 1, !tbaa !2450
  %495 = add i64 %469, 15
  store i64 %495, i64* %PC, align 8
  store i64 %473, i64* %471, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %496 = add i64 %557, -12
  store i64 4196299, i64* %PC, align 8
  %497 = inttoptr i64 %496 to i32*
  store i32 13, i32* %497, align 4
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -12
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 3
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDI, align 8, !tbaa !2428
  %505 = add i64 %500, -731
  %506 = add i64 %500, 8
  %507 = load i64, i64* %RSP, align 8, !tbaa !2428
  %508 = add i64 %507, -8
  %509 = inttoptr i64 %508 to i64*
  store i64 %506, i64* %509, align 8
  store i64 %508, i64* %RSP, align 8, !tbaa !2428
  store i64 %505, i64* %PC, align 8, !tbaa !2428
  %510 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %505, %struct.Memory* %MEMORY.0)
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -8
  %513 = load i64, i64* %PC, align 8
  %514 = add i64 %513, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %512 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %516, 4
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = icmp ugt i64 %516, -5
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %4, align 1, !tbaa !2432
  %520 = trunc i64 %517 to i32
  %521 = and i32 %520, 255
  %522 = tail call i32 @llvm.ctpop.i32(i32 %521) #8
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  store i8 %525, i8* %5, align 1, !tbaa !2446
  %526 = xor i64 %516, %517
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  store i8 %529, i8* %6, align 1, !tbaa !2447
  %530 = icmp eq i64 %517, 0
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %7, align 1, !tbaa !2448
  %532 = lshr i64 %517, 63
  %533 = trunc i64 %532 to i8
  store i8 %533, i8* %8, align 1, !tbaa !2449
  %534 = lshr i64 %516, 63
  %535 = xor i64 %532, %534
  %536 = add nuw nsw i64 %535, %532
  %537 = icmp eq i64 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %9, align 1, !tbaa !2450
  %539 = add i64 %513, 15
  store i64 %539, i64* %PC, align 8
  store i64 %517, i64* %515, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400a80, %block_400602, %block_400986, %block_4005d0, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_400666, %block_40059e, %block_400922, %block_4008be, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_4009ea, %block_4008f0, %block_4007f6, %block_400703
  %.sink6 = phi i64 [ 1351, %block_400a80 ], [ 201, %block_400602 ], [ 1101, %block_400986 ], [ 151, %block_4005d0 ], [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 301, %block_400666 ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 901, %block_4008be ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 651, %block_4007c4 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 51, %block_40056c ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 451, %block_400703 ]
  %MEMORY.0 = phi %struct.Memory* [ %1401, %block_400a80 ], [ %1357, %block_400602 ], [ %1236, %block_400986 ], [ %1192, %block_4005d0 ], [ %1148, %block_40088c ], [ %1104, %block_400792 ], [ %1060, %block_400b16 ], [ %1016, %block_400698 ], [ %972, %block_400a1c ], [ %928, %block_400666 ], [ %884, %block_40059e ], [ %840, %block_400922 ], [ %796, %block_4008be ], [ %752, %block_400828 ], [ %708, %block_40072e ], [ %664, %block_400ab2 ], [ %620, %block_400634 ], [ %576, %block_4009b8 ], [ %510, %block_4007c4 ], [ %466, %block_400b48 ], [ %422, %block_4006ca ], [ %378, %block_400a4e ], [ %334, %block_40056c ], [ %290, %block_400954 ], [ %246, %block_40085a ], [ %202, %block_400760 ], [ %158, %block_400ae4 ], [ %114, %block_4009ea ], [ %70, %block_4008f0 ], [ %26, %block_4007f6 ], [ %1313, %block_400703 ]
  %540 = bitcast i64* %RAX to i32**
  %541 = load i32*, i32** %540, align 8
  %542 = load i64, i64* %PC, align 8
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC, align 8
  %544 = load i32, i32* %541, align 4
  %545 = sext i32 %544 to i64
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = shl nsw i64 %545, 3
  %547 = add i64 %546, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %548 = add i64 %542, 11
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = load i64, i64* %RBP, align 8
  %552 = add i64 %551, -40
  %553 = add i64 %542, 15
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %552 to i64*
  store i64 %550, i64* %554, align 8
  %555 = load i64, i64* %PC, align 8
  %556 = sub i64 %555, %.sink6
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -40
  %559 = add i64 %556, 4
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  store i64 %561, i64* %PC, align 8, !tbaa !2428
  switch i64 %561, label %1431 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196892, label %block_400a1c
  ]

block_4009b8:                                     ; preds = %block_400566
  %562 = add i64 %557, -12
  store i64 4196799, i64* %PC, align 8
  %563 = inttoptr i64 %562 to i32*
  store i32 23, i32* %563, align 4
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -12
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, 3
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i32*
  %569 = load i32, i32* %568, align 4
  %570 = zext i32 %569 to i64
  store i64 %570, i64* %RDI, align 8, !tbaa !2428
  %571 = add i64 %566, -1231
  %572 = add i64 %566, 8
  %573 = load i64, i64* %RSP, align 8, !tbaa !2428
  %574 = add i64 %573, -8
  %575 = inttoptr i64 %574 to i64*
  store i64 %572, i64* %575, align 8
  store i64 %574, i64* %RSP, align 8, !tbaa !2428
  store i64 %571, i64* %PC, align 8, !tbaa !2428
  %576 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %571, %struct.Memory* %MEMORY.0)
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -8
  %579 = load i64, i64* %PC, align 8
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %578 to i64*
  %582 = load i64, i64* %581, align 8
  store i64 %582, i64* %RAX, align 8, !tbaa !2428
  %583 = add i64 %582, 4
  store i64 %583, i64* %RCX, align 8, !tbaa !2428
  %584 = icmp ugt i64 %582, -5
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %4, align 1, !tbaa !2432
  %586 = trunc i64 %583 to i32
  %587 = and i32 %586, 255
  %588 = tail call i32 @llvm.ctpop.i32(i32 %587) #8
  %589 = trunc i32 %588 to i8
  %590 = and i8 %589, 1
  %591 = xor i8 %590, 1
  store i8 %591, i8* %5, align 1, !tbaa !2446
  %592 = xor i64 %582, %583
  %593 = lshr i64 %592, 4
  %594 = trunc i64 %593 to i8
  %595 = and i8 %594, 1
  store i8 %595, i8* %6, align 1, !tbaa !2447
  %596 = icmp eq i64 %583, 0
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %7, align 1, !tbaa !2448
  %598 = lshr i64 %583, 63
  %599 = trunc i64 %598 to i8
  store i8 %599, i8* %8, align 1, !tbaa !2449
  %600 = lshr i64 %582, 63
  %601 = xor i64 %598, %600
  %602 = add nuw nsw i64 %601, %598
  %603 = icmp eq i64 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %9, align 1, !tbaa !2450
  %605 = add i64 %579, 15
  store i64 %605, i64* %PC, align 8
  store i64 %583, i64* %581, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %606 = add i64 %557, -12
  store i64 4195899, i64* %PC, align 8
  %607 = inttoptr i64 %606 to i32*
  store i32 5, i32* %607, align 4
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -12
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 3
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i32*
  %613 = load i32, i32* %612, align 4
  %614 = zext i32 %613 to i64
  store i64 %614, i64* %RDI, align 8, !tbaa !2428
  %615 = add i64 %610, -331
  %616 = add i64 %610, 8
  %617 = load i64, i64* %RSP, align 8, !tbaa !2428
  %618 = add i64 %617, -8
  %619 = inttoptr i64 %618 to i64*
  store i64 %616, i64* %619, align 8
  store i64 %618, i64* %RSP, align 8, !tbaa !2428
  store i64 %615, i64* %PC, align 8, !tbaa !2428
  %620 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %615, %struct.Memory* %MEMORY.0)
  %621 = load i64, i64* %RBP, align 8
  %622 = add i64 %621, -8
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %622 to i64*
  %626 = load i64, i64* %625, align 8
  store i64 %626, i64* %RAX, align 8, !tbaa !2428
  %627 = add i64 %626, 4
  store i64 %627, i64* %RCX, align 8, !tbaa !2428
  %628 = icmp ugt i64 %626, -5
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %4, align 1, !tbaa !2432
  %630 = trunc i64 %627 to i32
  %631 = and i32 %630, 255
  %632 = tail call i32 @llvm.ctpop.i32(i32 %631) #8
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  %635 = xor i8 %634, 1
  store i8 %635, i8* %5, align 1, !tbaa !2446
  %636 = xor i64 %626, %627
  %637 = lshr i64 %636, 4
  %638 = trunc i64 %637 to i8
  %639 = and i8 %638, 1
  store i8 %639, i8* %6, align 1, !tbaa !2447
  %640 = icmp eq i64 %627, 0
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %7, align 1, !tbaa !2448
  %642 = lshr i64 %627, 63
  %643 = trunc i64 %642 to i8
  store i8 %643, i8* %8, align 1, !tbaa !2449
  %644 = lshr i64 %626, 63
  %645 = xor i64 %642, %644
  %646 = add nuw nsw i64 %645, %642
  %647 = icmp eq i64 %646, 2
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %9, align 1, !tbaa !2450
  %649 = add i64 %623, 15
  store i64 %649, i64* %PC, align 8
  store i64 %627, i64* %625, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %650 = add i64 %557, -12
  store i64 4197049, i64* %PC, align 8
  %651 = inttoptr i64 %650 to i32*
  store i32 28, i32* %651, align 4
  %652 = load i64, i64* %RBP, align 8
  %653 = add i64 %652, -12
  %654 = load i64, i64* %PC, align 8
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %653 to i32*
  %657 = load i32, i32* %656, align 4
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RDI, align 8, !tbaa !2428
  %659 = add i64 %654, -1481
  %660 = add i64 %654, 8
  %661 = load i64, i64* %RSP, align 8, !tbaa !2428
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %660, i64* %663, align 8
  store i64 %662, i64* %RSP, align 8, !tbaa !2428
  store i64 %659, i64* %PC, align 8, !tbaa !2428
  %664 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %659, %struct.Memory* %MEMORY.0)
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -8
  %667 = load i64, i64* %PC, align 8
  %668 = add i64 %667, 4
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %RAX, align 8, !tbaa !2428
  %671 = add i64 %670, 4
  store i64 %671, i64* %RCX, align 8, !tbaa !2428
  %672 = icmp ugt i64 %670, -5
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %4, align 1, !tbaa !2432
  %674 = trunc i64 %671 to i32
  %675 = and i32 %674, 255
  %676 = tail call i32 @llvm.ctpop.i32(i32 %675) #8
  %677 = trunc i32 %676 to i8
  %678 = and i8 %677, 1
  %679 = xor i8 %678, 1
  store i8 %679, i8* %5, align 1, !tbaa !2446
  %680 = xor i64 %670, %671
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  store i8 %683, i8* %6, align 1, !tbaa !2447
  %684 = icmp eq i64 %671, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %7, align 1, !tbaa !2448
  %686 = lshr i64 %671, 63
  %687 = trunc i64 %686 to i8
  store i8 %687, i8* %8, align 1, !tbaa !2449
  %688 = lshr i64 %670, 63
  %689 = xor i64 %686, %688
  %690 = add nuw nsw i64 %689, %686
  %691 = icmp eq i64 %690, 2
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %9, align 1, !tbaa !2450
  %693 = add i64 %667, 15
  store i64 %693, i64* %PC, align 8
  store i64 %671, i64* %669, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %694 = add i64 %557, -12
  store i64 4196149, i64* %PC, align 8
  %695 = inttoptr i64 %694 to i32*
  store i32 10, i32* %695, align 4
  %696 = load i64, i64* %RBP, align 8
  %697 = add i64 %696, -12
  %698 = load i64, i64* %PC, align 8
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700, align 4
  %702 = zext i32 %701 to i64
  store i64 %702, i64* %RDI, align 8, !tbaa !2428
  %703 = add i64 %698, -581
  %704 = add i64 %698, 8
  %705 = load i64, i64* %RSP, align 8, !tbaa !2428
  %706 = add i64 %705, -8
  %707 = inttoptr i64 %706 to i64*
  store i64 %704, i64* %707, align 8
  store i64 %706, i64* %RSP, align 8, !tbaa !2428
  store i64 %703, i64* %PC, align 8, !tbaa !2428
  %708 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %703, %struct.Memory* %MEMORY.0)
  %709 = load i64, i64* %RBP, align 8
  %710 = add i64 %709, -8
  %711 = load i64, i64* %PC, align 8
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713, align 8
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = add i64 %714, 4
  store i64 %715, i64* %RCX, align 8, !tbaa !2428
  %716 = icmp ugt i64 %714, -5
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %4, align 1, !tbaa !2432
  %718 = trunc i64 %715 to i32
  %719 = and i32 %718, 255
  %720 = tail call i32 @llvm.ctpop.i32(i32 %719) #8
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  store i8 %723, i8* %5, align 1, !tbaa !2446
  %724 = xor i64 %714, %715
  %725 = lshr i64 %724, 4
  %726 = trunc i64 %725 to i8
  %727 = and i8 %726, 1
  store i8 %727, i8* %6, align 1, !tbaa !2447
  %728 = icmp eq i64 %715, 0
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %7, align 1, !tbaa !2448
  %730 = lshr i64 %715, 63
  %731 = trunc i64 %730 to i8
  store i8 %731, i8* %8, align 1, !tbaa !2449
  %732 = lshr i64 %714, 63
  %733 = xor i64 %730, %732
  %734 = add nuw nsw i64 %733, %730
  %735 = icmp eq i64 %734, 2
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %9, align 1, !tbaa !2450
  %737 = add i64 %711, 15
  store i64 %737, i64* %PC, align 8
  store i64 %715, i64* %713, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %738 = add i64 %557, -12
  store i64 4196399, i64* %PC, align 8
  %739 = inttoptr i64 %738 to i32*
  store i32 15, i32* %739, align 4
  %740 = load i64, i64* %RBP, align 8
  %741 = add i64 %740, -12
  %742 = load i64, i64* %PC, align 8
  %743 = add i64 %742, 3
  store i64 %743, i64* %PC, align 8
  %744 = inttoptr i64 %741 to i32*
  %745 = load i32, i32* %744, align 4
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RDI, align 8, !tbaa !2428
  %747 = add i64 %742, -831
  %748 = add i64 %742, 8
  %749 = load i64, i64* %RSP, align 8, !tbaa !2428
  %750 = add i64 %749, -8
  %751 = inttoptr i64 %750 to i64*
  store i64 %748, i64* %751, align 8
  store i64 %750, i64* %RSP, align 8, !tbaa !2428
  store i64 %747, i64* %PC, align 8, !tbaa !2428
  %752 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %747, %struct.Memory* %MEMORY.0)
  %753 = load i64, i64* %RBP, align 8
  %754 = add i64 %753, -8
  %755 = load i64, i64* %PC, align 8
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC, align 8
  %757 = inttoptr i64 %754 to i64*
  %758 = load i64, i64* %757, align 8
  store i64 %758, i64* %RAX, align 8, !tbaa !2428
  %759 = add i64 %758, 4
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = icmp ugt i64 %758, -5
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %4, align 1, !tbaa !2432
  %762 = trunc i64 %759 to i32
  %763 = and i32 %762, 255
  %764 = tail call i32 @llvm.ctpop.i32(i32 %763) #8
  %765 = trunc i32 %764 to i8
  %766 = and i8 %765, 1
  %767 = xor i8 %766, 1
  store i8 %767, i8* %5, align 1, !tbaa !2446
  %768 = xor i64 %758, %759
  %769 = lshr i64 %768, 4
  %770 = trunc i64 %769 to i8
  %771 = and i8 %770, 1
  store i8 %771, i8* %6, align 1, !tbaa !2447
  %772 = icmp eq i64 %759, 0
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %7, align 1, !tbaa !2448
  %774 = lshr i64 %759, 63
  %775 = trunc i64 %774 to i8
  store i8 %775, i8* %8, align 1, !tbaa !2449
  %776 = lshr i64 %758, 63
  %777 = xor i64 %774, %776
  %778 = add nuw nsw i64 %777, %774
  %779 = icmp eq i64 %778, 2
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %9, align 1, !tbaa !2450
  %781 = add i64 %755, 15
  store i64 %781, i64* %PC, align 8
  store i64 %759, i64* %757, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %782 = add i64 %557, -12
  store i64 4196549, i64* %PC, align 8
  %783 = inttoptr i64 %782 to i32*
  store i32 18, i32* %783, align 4
  %784 = load i64, i64* %RBP, align 8
  %785 = add i64 %784, -12
  %786 = load i64, i64* %PC, align 8
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788, align 4
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = add i64 %786, -981
  %792 = add i64 %786, 8
  %793 = load i64, i64* %RSP, align 8, !tbaa !2428
  %794 = add i64 %793, -8
  %795 = inttoptr i64 %794 to i64*
  store i64 %792, i64* %795, align 8
  store i64 %794, i64* %RSP, align 8, !tbaa !2428
  store i64 %791, i64* %PC, align 8, !tbaa !2428
  %796 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %791, %struct.Memory* %MEMORY.0)
  %797 = load i64, i64* %RBP, align 8
  %798 = add i64 %797, -8
  %799 = load i64, i64* %PC, align 8
  %800 = add i64 %799, 4
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %798 to i64*
  %802 = load i64, i64* %801, align 8
  store i64 %802, i64* %RAX, align 8, !tbaa !2428
  %803 = add i64 %802, 4
  store i64 %803, i64* %RCX, align 8, !tbaa !2428
  %804 = icmp ugt i64 %802, -5
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %4, align 1, !tbaa !2432
  %806 = trunc i64 %803 to i32
  %807 = and i32 %806, 255
  %808 = tail call i32 @llvm.ctpop.i32(i32 %807) #8
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = xor i8 %810, 1
  store i8 %811, i8* %5, align 1, !tbaa !2446
  %812 = xor i64 %802, %803
  %813 = lshr i64 %812, 4
  %814 = trunc i64 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %6, align 1, !tbaa !2447
  %816 = icmp eq i64 %803, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %7, align 1, !tbaa !2448
  %818 = lshr i64 %803, 63
  %819 = trunc i64 %818 to i8
  store i8 %819, i8* %8, align 1, !tbaa !2449
  %820 = lshr i64 %802, 63
  %821 = xor i64 %818, %820
  %822 = add nuw nsw i64 %821, %818
  %823 = icmp eq i64 %822, 2
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %9, align 1, !tbaa !2450
  %825 = add i64 %799, 15
  store i64 %825, i64* %PC, align 8
  store i64 %803, i64* %801, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %826 = add i64 %557, -12
  store i64 4196649, i64* %PC, align 8
  %827 = inttoptr i64 %826 to i32*
  store i32 20, i32* %827, align 4
  %828 = load i64, i64* %RBP, align 8
  %829 = add i64 %828, -12
  %830 = load i64, i64* %PC, align 8
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %829 to i32*
  %833 = load i32, i32* %832, align 4
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RDI, align 8, !tbaa !2428
  %835 = add i64 %830, -1081
  %836 = add i64 %830, 8
  %837 = load i64, i64* %RSP, align 8, !tbaa !2428
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  store i64 %836, i64* %839, align 8
  store i64 %838, i64* %RSP, align 8, !tbaa !2428
  store i64 %835, i64* %PC, align 8, !tbaa !2428
  %840 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %835, %struct.Memory* %MEMORY.0)
  %841 = load i64, i64* %RBP, align 8
  %842 = add i64 %841, -8
  %843 = load i64, i64* %PC, align 8
  %844 = add i64 %843, 4
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %842 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = add i64 %846, 4
  store i64 %847, i64* %RCX, align 8, !tbaa !2428
  %848 = icmp ugt i64 %846, -5
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %4, align 1, !tbaa !2432
  %850 = trunc i64 %847 to i32
  %851 = and i32 %850, 255
  %852 = tail call i32 @llvm.ctpop.i32(i32 %851) #8
  %853 = trunc i32 %852 to i8
  %854 = and i8 %853, 1
  %855 = xor i8 %854, 1
  store i8 %855, i8* %5, align 1, !tbaa !2446
  %856 = xor i64 %846, %847
  %857 = lshr i64 %856, 4
  %858 = trunc i64 %857 to i8
  %859 = and i8 %858, 1
  store i8 %859, i8* %6, align 1, !tbaa !2447
  %860 = icmp eq i64 %847, 0
  %861 = zext i1 %860 to i8
  store i8 %861, i8* %7, align 1, !tbaa !2448
  %862 = lshr i64 %847, 63
  %863 = trunc i64 %862 to i8
  store i8 %863, i8* %8, align 1, !tbaa !2449
  %864 = lshr i64 %846, 63
  %865 = xor i64 %862, %864
  %866 = add nuw nsw i64 %865, %862
  %867 = icmp eq i64 %866, 2
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %9, align 1, !tbaa !2450
  %869 = add i64 %843, 15
  store i64 %869, i64* %PC, align 8
  store i64 %847, i64* %845, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %870 = add i64 %557, -12
  store i64 4195749, i64* %PC, align 8
  %871 = inttoptr i64 %870 to i32*
  store i32 2, i32* %871, align 4
  %872 = load i64, i64* %RBP, align 8
  %873 = add i64 %872, -12
  %874 = load i64, i64* %PC, align 8
  %875 = add i64 %874, 3
  store i64 %875, i64* %PC, align 8
  %876 = inttoptr i64 %873 to i32*
  %877 = load i32, i32* %876, align 4
  %878 = zext i32 %877 to i64
  store i64 %878, i64* %RDI, align 8, !tbaa !2428
  %879 = add i64 %874, -181
  %880 = add i64 %874, 8
  %881 = load i64, i64* %RSP, align 8, !tbaa !2428
  %882 = add i64 %881, -8
  %883 = inttoptr i64 %882 to i64*
  store i64 %880, i64* %883, align 8
  store i64 %882, i64* %RSP, align 8, !tbaa !2428
  store i64 %879, i64* %PC, align 8, !tbaa !2428
  %884 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %879, %struct.Memory* %MEMORY.0)
  %885 = load i64, i64* %RBP, align 8
  %886 = add i64 %885, -8
  %887 = load i64, i64* %PC, align 8
  %888 = add i64 %887, 4
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %886 to i64*
  %890 = load i64, i64* %889, align 8
  store i64 %890, i64* %RAX, align 8, !tbaa !2428
  %891 = add i64 %890, 4
  store i64 %891, i64* %RCX, align 8, !tbaa !2428
  %892 = icmp ugt i64 %890, -5
  %893 = zext i1 %892 to i8
  store i8 %893, i8* %4, align 1, !tbaa !2432
  %894 = trunc i64 %891 to i32
  %895 = and i32 %894, 255
  %896 = tail call i32 @llvm.ctpop.i32(i32 %895) #8
  %897 = trunc i32 %896 to i8
  %898 = and i8 %897, 1
  %899 = xor i8 %898, 1
  store i8 %899, i8* %5, align 1, !tbaa !2446
  %900 = xor i64 %890, %891
  %901 = lshr i64 %900, 4
  %902 = trunc i64 %901 to i8
  %903 = and i8 %902, 1
  store i8 %903, i8* %6, align 1, !tbaa !2447
  %904 = icmp eq i64 %891, 0
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %7, align 1, !tbaa !2448
  %906 = lshr i64 %891, 63
  %907 = trunc i64 %906 to i8
  store i8 %907, i8* %8, align 1, !tbaa !2449
  %908 = lshr i64 %890, 63
  %909 = xor i64 %906, %908
  %910 = add nuw nsw i64 %909, %906
  %911 = icmp eq i64 %910, 2
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %9, align 1, !tbaa !2450
  %913 = add i64 %887, 15
  store i64 %913, i64* %PC, align 8
  store i64 %891, i64* %889, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %914 = add i64 %557, -12
  store i64 4195949, i64* %PC, align 8
  %915 = inttoptr i64 %914 to i32*
  store i32 6, i32* %915, align 4
  %916 = load i64, i64* %RBP, align 8
  %917 = add i64 %916, -12
  %918 = load i64, i64* %PC, align 8
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC, align 8
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920, align 4
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = add i64 %918, -381
  %924 = add i64 %918, 8
  %925 = load i64, i64* %RSP, align 8, !tbaa !2428
  %926 = add i64 %925, -8
  %927 = inttoptr i64 %926 to i64*
  store i64 %924, i64* %927, align 8
  store i64 %926, i64* %RSP, align 8, !tbaa !2428
  store i64 %923, i64* %PC, align 8, !tbaa !2428
  %928 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %923, %struct.Memory* %MEMORY.0)
  %929 = load i64, i64* %RBP, align 8
  %930 = add i64 %929, -8
  %931 = load i64, i64* %PC, align 8
  %932 = add i64 %931, 4
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %930 to i64*
  %934 = load i64, i64* %933, align 8
  store i64 %934, i64* %RAX, align 8, !tbaa !2428
  %935 = add i64 %934, 4
  store i64 %935, i64* %RCX, align 8, !tbaa !2428
  %936 = icmp ugt i64 %934, -5
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %4, align 1, !tbaa !2432
  %938 = trunc i64 %935 to i32
  %939 = and i32 %938, 255
  %940 = tail call i32 @llvm.ctpop.i32(i32 %939) #8
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = xor i8 %942, 1
  store i8 %943, i8* %5, align 1, !tbaa !2446
  %944 = xor i64 %934, %935
  %945 = lshr i64 %944, 4
  %946 = trunc i64 %945 to i8
  %947 = and i8 %946, 1
  store i8 %947, i8* %6, align 1, !tbaa !2447
  %948 = icmp eq i64 %935, 0
  %949 = zext i1 %948 to i8
  store i8 %949, i8* %7, align 1, !tbaa !2448
  %950 = lshr i64 %935, 63
  %951 = trunc i64 %950 to i8
  store i8 %951, i8* %8, align 1, !tbaa !2449
  %952 = lshr i64 %934, 63
  %953 = xor i64 %950, %952
  %954 = add nuw nsw i64 %953, %950
  %955 = icmp eq i64 %954, 2
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %9, align 1, !tbaa !2450
  %957 = add i64 %931, 15
  store i64 %957, i64* %PC, align 8
  store i64 %935, i64* %933, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %958 = add i64 %557, -12
  store i64 4196899, i64* %PC, align 8
  %959 = inttoptr i64 %958 to i32*
  store i32 25, i32* %959, align 4
  %960 = load i64, i64* %RBP, align 8
  %961 = add i64 %960, -12
  %962 = load i64, i64* %PC, align 8
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %961 to i32*
  %965 = load i32, i32* %964, align 4
  %966 = zext i32 %965 to i64
  store i64 %966, i64* %RDI, align 8, !tbaa !2428
  %967 = add i64 %962, -1331
  %968 = add i64 %962, 8
  %969 = load i64, i64* %RSP, align 8, !tbaa !2428
  %970 = add i64 %969, -8
  %971 = inttoptr i64 %970 to i64*
  store i64 %968, i64* %971, align 8
  store i64 %970, i64* %RSP, align 8, !tbaa !2428
  store i64 %967, i64* %PC, align 8, !tbaa !2428
  %972 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %967, %struct.Memory* %MEMORY.0)
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, -8
  %975 = load i64, i64* %PC, align 8
  %976 = add i64 %975, 4
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %974 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RAX, align 8, !tbaa !2428
  %979 = add i64 %978, 4
  store i64 %979, i64* %RCX, align 8, !tbaa !2428
  %980 = icmp ugt i64 %978, -5
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %4, align 1, !tbaa !2432
  %982 = trunc i64 %979 to i32
  %983 = and i32 %982, 255
  %984 = tail call i32 @llvm.ctpop.i32(i32 %983) #8
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  store i8 %987, i8* %5, align 1, !tbaa !2446
  %988 = xor i64 %978, %979
  %989 = lshr i64 %988, 4
  %990 = trunc i64 %989 to i8
  %991 = and i8 %990, 1
  store i8 %991, i8* %6, align 1, !tbaa !2447
  %992 = icmp eq i64 %979, 0
  %993 = zext i1 %992 to i8
  store i8 %993, i8* %7, align 1, !tbaa !2448
  %994 = lshr i64 %979, 63
  %995 = trunc i64 %994 to i8
  store i8 %995, i8* %8, align 1, !tbaa !2449
  %996 = lshr i64 %978, 63
  %997 = xor i64 %994, %996
  %998 = add nuw nsw i64 %997, %994
  %999 = icmp eq i64 %998, 2
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %9, align 1, !tbaa !2450
  %1001 = add i64 %975, 15
  store i64 %1001, i64* %PC, align 8
  store i64 %979, i64* %977, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1002 = add i64 %557, -12
  store i64 4195999, i64* %PC, align 8
  %1003 = inttoptr i64 %1002 to i32*
  store i32 7, i32* %1003, align 4
  %1004 = load i64, i64* %RBP, align 8
  %1005 = add i64 %1004, -12
  %1006 = load i64, i64* %PC, align 8
  %1007 = add i64 %1006, 3
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1005 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = zext i32 %1009 to i64
  store i64 %1010, i64* %RDI, align 8, !tbaa !2428
  %1011 = add i64 %1006, -431
  %1012 = add i64 %1006, 8
  %1013 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1014 = add i64 %1013, -8
  %1015 = inttoptr i64 %1014 to i64*
  store i64 %1012, i64* %1015, align 8
  store i64 %1014, i64* %RSP, align 8, !tbaa !2428
  store i64 %1011, i64* %PC, align 8, !tbaa !2428
  %1016 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1011, %struct.Memory* %MEMORY.0)
  %1017 = load i64, i64* %RBP, align 8
  %1018 = add i64 %1017, -8
  %1019 = load i64, i64* %PC, align 8
  %1020 = add i64 %1019, 4
  store i64 %1020, i64* %PC, align 8
  %1021 = inttoptr i64 %1018 to i64*
  %1022 = load i64, i64* %1021, align 8
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = add i64 %1022, 4
  store i64 %1023, i64* %RCX, align 8, !tbaa !2428
  %1024 = icmp ugt i64 %1022, -5
  %1025 = zext i1 %1024 to i8
  store i8 %1025, i8* %4, align 1, !tbaa !2432
  %1026 = trunc i64 %1023 to i32
  %1027 = and i32 %1026, 255
  %1028 = tail call i32 @llvm.ctpop.i32(i32 %1027) #8
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = xor i8 %1030, 1
  store i8 %1031, i8* %5, align 1, !tbaa !2446
  %1032 = xor i64 %1022, %1023
  %1033 = lshr i64 %1032, 4
  %1034 = trunc i64 %1033 to i8
  %1035 = and i8 %1034, 1
  store i8 %1035, i8* %6, align 1, !tbaa !2447
  %1036 = icmp eq i64 %1023, 0
  %1037 = zext i1 %1036 to i8
  store i8 %1037, i8* %7, align 1, !tbaa !2448
  %1038 = lshr i64 %1023, 63
  %1039 = trunc i64 %1038 to i8
  store i8 %1039, i8* %8, align 1, !tbaa !2449
  %1040 = lshr i64 %1022, 63
  %1041 = xor i64 %1038, %1040
  %1042 = add nuw nsw i64 %1041, %1038
  %1043 = icmp eq i64 %1042, 2
  %1044 = zext i1 %1043 to i8
  store i8 %1044, i8* %9, align 1, !tbaa !2450
  %1045 = add i64 %1019, 15
  store i64 %1045, i64* %PC, align 8
  store i64 %1023, i64* %1021, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1046 = add i64 %557, -12
  store i64 4197149, i64* %PC, align 8
  %1047 = inttoptr i64 %1046 to i32*
  store i32 30, i32* %1047, align 4
  %1048 = load i64, i64* %RBP, align 8
  %1049 = add i64 %1048, -12
  %1050 = load i64, i64* %PC, align 8
  %1051 = add i64 %1050, 3
  store i64 %1051, i64* %PC, align 8
  %1052 = inttoptr i64 %1049 to i32*
  %1053 = load i32, i32* %1052, align 4
  %1054 = zext i32 %1053 to i64
  store i64 %1054, i64* %RDI, align 8, !tbaa !2428
  %1055 = add i64 %1050, -1581
  %1056 = add i64 %1050, 8
  %1057 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1058 = add i64 %1057, -8
  %1059 = inttoptr i64 %1058 to i64*
  store i64 %1056, i64* %1059, align 8
  store i64 %1058, i64* %RSP, align 8, !tbaa !2428
  store i64 %1055, i64* %PC, align 8, !tbaa !2428
  %1060 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1055, %struct.Memory* %MEMORY.0)
  %1061 = load i64, i64* %RBP, align 8
  %1062 = add i64 %1061, -8
  %1063 = load i64, i64* %PC, align 8
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1062 to i64*
  %1066 = load i64, i64* %1065, align 8
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = add i64 %1066, 4
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = icmp ugt i64 %1066, -5
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %4, align 1, !tbaa !2432
  %1070 = trunc i64 %1067 to i32
  %1071 = and i32 %1070, 255
  %1072 = tail call i32 @llvm.ctpop.i32(i32 %1071) #8
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  %1075 = xor i8 %1074, 1
  store i8 %1075, i8* %5, align 1, !tbaa !2446
  %1076 = xor i64 %1066, %1067
  %1077 = lshr i64 %1076, 4
  %1078 = trunc i64 %1077 to i8
  %1079 = and i8 %1078, 1
  store i8 %1079, i8* %6, align 1, !tbaa !2447
  %1080 = icmp eq i64 %1067, 0
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %7, align 1, !tbaa !2448
  %1082 = lshr i64 %1067, 63
  %1083 = trunc i64 %1082 to i8
  store i8 %1083, i8* %8, align 1, !tbaa !2449
  %1084 = lshr i64 %1066, 63
  %1085 = xor i64 %1082, %1084
  %1086 = add nuw nsw i64 %1085, %1082
  %1087 = icmp eq i64 %1086, 2
  %1088 = zext i1 %1087 to i8
  store i8 %1088, i8* %9, align 1, !tbaa !2450
  %1089 = add i64 %1063, 15
  store i64 %1089, i64* %PC, align 8
  store i64 %1067, i64* %1065, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1090 = add i64 %557, -12
  store i64 4196249, i64* %PC, align 8
  %1091 = inttoptr i64 %1090 to i32*
  store i32 12, i32* %1091, align 4
  %1092 = load i64, i64* %RBP, align 8
  %1093 = add i64 %1092, -12
  %1094 = load i64, i64* %PC, align 8
  %1095 = add i64 %1094, 3
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1093 to i32*
  %1097 = load i32, i32* %1096, align 4
  %1098 = zext i32 %1097 to i64
  store i64 %1098, i64* %RDI, align 8, !tbaa !2428
  %1099 = add i64 %1094, -681
  %1100 = add i64 %1094, 8
  %1101 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1102 = add i64 %1101, -8
  %1103 = inttoptr i64 %1102 to i64*
  store i64 %1100, i64* %1103, align 8
  store i64 %1102, i64* %RSP, align 8, !tbaa !2428
  store i64 %1099, i64* %PC, align 8, !tbaa !2428
  %1104 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1099, %struct.Memory* %MEMORY.0)
  %1105 = load i64, i64* %RBP, align 8
  %1106 = add i64 %1105, -8
  %1107 = load i64, i64* %PC, align 8
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109, align 8
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = add i64 %1110, 4
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = icmp ugt i64 %1110, -5
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %4, align 1, !tbaa !2432
  %1114 = trunc i64 %1111 to i32
  %1115 = and i32 %1114, 255
  %1116 = tail call i32 @llvm.ctpop.i32(i32 %1115) #8
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = xor i8 %1118, 1
  store i8 %1119, i8* %5, align 1, !tbaa !2446
  %1120 = xor i64 %1110, %1111
  %1121 = lshr i64 %1120, 4
  %1122 = trunc i64 %1121 to i8
  %1123 = and i8 %1122, 1
  store i8 %1123, i8* %6, align 1, !tbaa !2447
  %1124 = icmp eq i64 %1111, 0
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %7, align 1, !tbaa !2448
  %1126 = lshr i64 %1111, 63
  %1127 = trunc i64 %1126 to i8
  store i8 %1127, i8* %8, align 1, !tbaa !2449
  %1128 = lshr i64 %1110, 63
  %1129 = xor i64 %1126, %1128
  %1130 = add nuw nsw i64 %1129, %1126
  %1131 = icmp eq i64 %1130, 2
  %1132 = zext i1 %1131 to i8
  store i8 %1132, i8* %9, align 1, !tbaa !2450
  %1133 = add i64 %1107, 15
  store i64 %1133, i64* %PC, align 8
  store i64 %1111, i64* %1109, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1134 = add i64 %557, -12
  store i64 4196499, i64* %PC, align 8
  %1135 = inttoptr i64 %1134 to i32*
  store i32 17, i32* %1135, align 4
  %1136 = load i64, i64* %RBP, align 8
  %1137 = add i64 %1136, -12
  %1138 = load i64, i64* %PC, align 8
  %1139 = add i64 %1138, 3
  store i64 %1139, i64* %PC, align 8
  %1140 = inttoptr i64 %1137 to i32*
  %1141 = load i32, i32* %1140, align 4
  %1142 = zext i32 %1141 to i64
  store i64 %1142, i64* %RDI, align 8, !tbaa !2428
  %1143 = add i64 %1138, -931
  %1144 = add i64 %1138, 8
  %1145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1146 = add i64 %1145, -8
  %1147 = inttoptr i64 %1146 to i64*
  store i64 %1144, i64* %1147, align 8
  store i64 %1146, i64* %RSP, align 8, !tbaa !2428
  store i64 %1143, i64* %PC, align 8, !tbaa !2428
  %1148 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1143, %struct.Memory* %MEMORY.0)
  %1149 = load i64, i64* %RBP, align 8
  %1150 = add i64 %1149, -8
  %1151 = load i64, i64* %PC, align 8
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1150 to i64*
  %1154 = load i64, i64* %1153, align 8
  store i64 %1154, i64* %RAX, align 8, !tbaa !2428
  %1155 = add i64 %1154, 4
  store i64 %1155, i64* %RCX, align 8, !tbaa !2428
  %1156 = icmp ugt i64 %1154, -5
  %1157 = zext i1 %1156 to i8
  store i8 %1157, i8* %4, align 1, !tbaa !2432
  %1158 = trunc i64 %1155 to i32
  %1159 = and i32 %1158, 255
  %1160 = tail call i32 @llvm.ctpop.i32(i32 %1159) #8
  %1161 = trunc i32 %1160 to i8
  %1162 = and i8 %1161, 1
  %1163 = xor i8 %1162, 1
  store i8 %1163, i8* %5, align 1, !tbaa !2446
  %1164 = xor i64 %1154, %1155
  %1165 = lshr i64 %1164, 4
  %1166 = trunc i64 %1165 to i8
  %1167 = and i8 %1166, 1
  store i8 %1167, i8* %6, align 1, !tbaa !2447
  %1168 = icmp eq i64 %1155, 0
  %1169 = zext i1 %1168 to i8
  store i8 %1169, i8* %7, align 1, !tbaa !2448
  %1170 = lshr i64 %1155, 63
  %1171 = trunc i64 %1170 to i8
  store i8 %1171, i8* %8, align 1, !tbaa !2449
  %1172 = lshr i64 %1154, 63
  %1173 = xor i64 %1170, %1172
  %1174 = add nuw nsw i64 %1173, %1170
  %1175 = icmp eq i64 %1174, 2
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %9, align 1, !tbaa !2450
  %1177 = add i64 %1151, 15
  store i64 %1177, i64* %PC, align 8
  store i64 %1155, i64* %1153, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1178 = add i64 %557, -12
  store i64 4195799, i64* %PC, align 8
  %1179 = inttoptr i64 %1178 to i32*
  store i32 3, i32* %1179, align 4
  %1180 = load i64, i64* %RBP, align 8
  %1181 = add i64 %1180, -12
  %1182 = load i64, i64* %PC, align 8
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184, align 4
  %1186 = zext i32 %1185 to i64
  store i64 %1186, i64* %RDI, align 8, !tbaa !2428
  %1187 = add i64 %1182, -231
  %1188 = add i64 %1182, 8
  %1189 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1190 = add i64 %1189, -8
  %1191 = inttoptr i64 %1190 to i64*
  store i64 %1188, i64* %1191, align 8
  store i64 %1190, i64* %RSP, align 8, !tbaa !2428
  store i64 %1187, i64* %PC, align 8, !tbaa !2428
  %1192 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1187, %struct.Memory* %MEMORY.0)
  %1193 = load i64, i64* %RBP, align 8
  %1194 = add i64 %1193, -8
  %1195 = load i64, i64* %PC, align 8
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %PC, align 8
  %1197 = inttoptr i64 %1194 to i64*
  %1198 = load i64, i64* %1197, align 8
  store i64 %1198, i64* %RAX, align 8, !tbaa !2428
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %RCX, align 8, !tbaa !2428
  %1200 = icmp ugt i64 %1198, -5
  %1201 = zext i1 %1200 to i8
  store i8 %1201, i8* %4, align 1, !tbaa !2432
  %1202 = trunc i64 %1199 to i32
  %1203 = and i32 %1202, 255
  %1204 = tail call i32 @llvm.ctpop.i32(i32 %1203) #8
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  %1207 = xor i8 %1206, 1
  store i8 %1207, i8* %5, align 1, !tbaa !2446
  %1208 = xor i64 %1198, %1199
  %1209 = lshr i64 %1208, 4
  %1210 = trunc i64 %1209 to i8
  %1211 = and i8 %1210, 1
  store i8 %1211, i8* %6, align 1, !tbaa !2447
  %1212 = icmp eq i64 %1199, 0
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %7, align 1, !tbaa !2448
  %1214 = lshr i64 %1199, 63
  %1215 = trunc i64 %1214 to i8
  store i8 %1215, i8* %8, align 1, !tbaa !2449
  %1216 = lshr i64 %1198, 63
  %1217 = xor i64 %1214, %1216
  %1218 = add nuw nsw i64 %1217, %1214
  %1219 = icmp eq i64 %1218, 2
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %9, align 1, !tbaa !2450
  %1221 = add i64 %1195, 15
  store i64 %1221, i64* %PC, align 8
  store i64 %1199, i64* %1197, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1222 = add i64 %557, -12
  store i64 4196749, i64* %PC, align 8
  %1223 = inttoptr i64 %1222 to i32*
  store i32 22, i32* %1223, align 4
  %1224 = load i64, i64* %RBP, align 8
  %1225 = add i64 %1224, -12
  %1226 = load i64, i64* %PC, align 8
  %1227 = add i64 %1226, 3
  store i64 %1227, i64* %PC, align 8
  %1228 = inttoptr i64 %1225 to i32*
  %1229 = load i32, i32* %1228, align 4
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RDI, align 8, !tbaa !2428
  %1231 = add i64 %1226, -1181
  %1232 = add i64 %1226, 8
  %1233 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1234 = add i64 %1233, -8
  %1235 = inttoptr i64 %1234 to i64*
  store i64 %1232, i64* %1235, align 8
  store i64 %1234, i64* %RSP, align 8, !tbaa !2428
  store i64 %1231, i64* %PC, align 8, !tbaa !2428
  %1236 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1231, %struct.Memory* %MEMORY.0)
  %1237 = load i64, i64* %RBP, align 8
  %1238 = add i64 %1237, -8
  %1239 = load i64, i64* %PC, align 8
  %1240 = add i64 %1239, 4
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1238 to i64*
  %1242 = load i64, i64* %1241, align 8
  store i64 %1242, i64* %RAX, align 8, !tbaa !2428
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %RCX, align 8, !tbaa !2428
  %1244 = icmp ugt i64 %1242, -5
  %1245 = zext i1 %1244 to i8
  store i8 %1245, i8* %4, align 1, !tbaa !2432
  %1246 = trunc i64 %1243 to i32
  %1247 = and i32 %1246, 255
  %1248 = tail call i32 @llvm.ctpop.i32(i32 %1247) #8
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  store i8 %1251, i8* %5, align 1, !tbaa !2446
  %1252 = xor i64 %1242, %1243
  %1253 = lshr i64 %1252, 4
  %1254 = trunc i64 %1253 to i8
  %1255 = and i8 %1254, 1
  store i8 %1255, i8* %6, align 1, !tbaa !2447
  %1256 = icmp eq i64 %1243, 0
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %7, align 1, !tbaa !2448
  %1258 = lshr i64 %1243, 63
  %1259 = trunc i64 %1258 to i8
  store i8 %1259, i8* %8, align 1, !tbaa !2449
  %1260 = lshr i64 %1242, 63
  %1261 = xor i64 %1258, %1260
  %1262 = add nuw nsw i64 %1261, %1258
  %1263 = icmp eq i64 %1262, 2
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %9, align 1, !tbaa !2450
  %1265 = add i64 %1239, 15
  store i64 %1265, i64* %PC, align 8
  store i64 %1243, i64* %1241, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1266 = add i64 %557, -12
  store i64 4195680, i64* %PC, align 8
  %1267 = inttoptr i64 %1266 to i32*
  store i32 0, i32* %1267, align 4
  %1268 = load i64, i64* %RSP, align 8
  %1269 = load i64, i64* %PC, align 8
  %1270 = add i64 %1268, 48
  store i64 %1270, i64* %RSP, align 8, !tbaa !2428
  %1271 = icmp ugt i64 %1268, -49
  %1272 = zext i1 %1271 to i8
  store i8 %1272, i8* %4, align 1, !tbaa !2432
  %1273 = trunc i64 %1270 to i32
  %1274 = and i32 %1273, 255
  %1275 = tail call i32 @llvm.ctpop.i32(i32 %1274) #8
  %1276 = trunc i32 %1275 to i8
  %1277 = and i8 %1276, 1
  %1278 = xor i8 %1277, 1
  store i8 %1278, i8* %5, align 1, !tbaa !2446
  %1279 = xor i64 %1268, 16
  %1280 = xor i64 %1279, %1270
  %1281 = lshr i64 %1280, 4
  %1282 = trunc i64 %1281 to i8
  %1283 = and i8 %1282, 1
  store i8 %1283, i8* %6, align 1, !tbaa !2447
  %1284 = icmp eq i64 %1270, 0
  %1285 = zext i1 %1284 to i8
  store i8 %1285, i8* %7, align 1, !tbaa !2448
  %1286 = lshr i64 %1270, 63
  %1287 = trunc i64 %1286 to i8
  store i8 %1287, i8* %8, align 1, !tbaa !2449
  %1288 = lshr i64 %1268, 63
  %1289 = xor i64 %1286, %1288
  %1290 = add nuw nsw i64 %1289, %1286
  %1291 = icmp eq i64 %1290, 2
  %1292 = zext i1 %1291 to i8
  store i8 %1292, i8* %9, align 1, !tbaa !2450
  %1293 = add i64 %1269, 5
  store i64 %1293, i64* %PC, align 8
  %1294 = add i64 %1268, 56
  %1295 = inttoptr i64 %1270 to i64*
  %1296 = load i64, i64* %1295, align 8
  store i64 %1296, i64* %RBP, align 8, !tbaa !2428
  store i64 %1294, i64* %RSP, align 8, !tbaa !2428
  %1297 = add i64 %1269, 6
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1294 to i64*
  %1299 = load i64, i64* %1298, align 8
  store i64 %1299, i64* %PC, align 8, !tbaa !2428
  %1300 = add i64 %1268, 64
  store i64 %1300, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400703:                                     ; preds = %block_4006fc, %3
  %1301 = phi i64 [ %1, %3 ], [ %.pre, %block_4006fc ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4006fc ]
  %1302 = load i64, i64* %RBP, align 8
  %1303 = add i64 %1302, -12
  %1304 = add i64 %1301, 3
  store i64 %1304, i64* %PC, align 8
  %1305 = inttoptr i64 %1303 to i32*
  %1306 = load i32, i32* %1305, align 4
  %1307 = zext i32 %1306 to i64
  store i64 %1307, i64* %RDI, align 8, !tbaa !2428
  %1308 = add i64 %1301, -531
  %1309 = add i64 %1301, 8
  %1310 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1311 = add i64 %1310, -8
  %1312 = inttoptr i64 %1311 to i64*
  store i64 %1309, i64* %1312, align 8
  store i64 %1311, i64* %RSP, align 8, !tbaa !2428
  store i64 %1308, i64* %PC, align 8, !tbaa !2428
  %1313 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1308, %struct.Memory* %MEMORY.1)
  %1314 = load i64, i64* %RBP, align 8
  %1315 = add i64 %1314, -8
  %1316 = load i64, i64* %PC, align 8
  %1317 = add i64 %1316, 4
  store i64 %1317, i64* %PC, align 8
  %1318 = inttoptr i64 %1315 to i64*
  %1319 = load i64, i64* %1318, align 8
  store i64 %1319, i64* %RAX, align 8, !tbaa !2428
  %1320 = add i64 %1319, 4
  store i64 %1320, i64* %RCX, align 8, !tbaa !2428
  %1321 = icmp ugt i64 %1319, -5
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %4, align 1, !tbaa !2432
  %1323 = trunc i64 %1320 to i32
  %1324 = and i32 %1323, 255
  %1325 = tail call i32 @llvm.ctpop.i32(i32 %1324) #8
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = xor i8 %1327, 1
  store i8 %1328, i8* %5, align 1, !tbaa !2446
  %1329 = xor i64 %1319, %1320
  %1330 = lshr i64 %1329, 4
  %1331 = trunc i64 %1330 to i8
  %1332 = and i8 %1331, 1
  store i8 %1332, i8* %6, align 1, !tbaa !2447
  %1333 = icmp eq i64 %1320, 0
  %1334 = zext i1 %1333 to i8
  store i8 %1334, i8* %7, align 1, !tbaa !2448
  %1335 = lshr i64 %1320, 63
  %1336 = trunc i64 %1335 to i8
  store i8 %1336, i8* %8, align 1, !tbaa !2449
  %1337 = lshr i64 %1319, 63
  %1338 = xor i64 %1335, %1337
  %1339 = add nuw nsw i64 %1338, %1335
  %1340 = icmp eq i64 %1339, 2
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* %9, align 1, !tbaa !2450
  %1342 = add i64 %1316, 15
  store i64 %1342, i64* %PC, align 8
  store i64 %1320, i64* %1318, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1343 = add i64 %557, -12
  store i64 4195849, i64* %PC, align 8
  %1344 = inttoptr i64 %1343 to i32*
  store i32 4, i32* %1344, align 4
  %1345 = load i64, i64* %RBP, align 8
  %1346 = add i64 %1345, -12
  %1347 = load i64, i64* %PC, align 8
  %1348 = add i64 %1347, 3
  store i64 %1348, i64* %PC, align 8
  %1349 = inttoptr i64 %1346 to i32*
  %1350 = load i32, i32* %1349, align 4
  %1351 = zext i32 %1350 to i64
  store i64 %1351, i64* %RDI, align 8, !tbaa !2428
  %1352 = add i64 %1347, -281
  %1353 = add i64 %1347, 8
  %1354 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1355 = add i64 %1354, -8
  %1356 = inttoptr i64 %1355 to i64*
  store i64 %1353, i64* %1356, align 8
  store i64 %1355, i64* %RSP, align 8, !tbaa !2428
  store i64 %1352, i64* %PC, align 8, !tbaa !2428
  %1357 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1352, %struct.Memory* %MEMORY.0)
  %1358 = load i64, i64* %RBP, align 8
  %1359 = add i64 %1358, -8
  %1360 = load i64, i64* %PC, align 8
  %1361 = add i64 %1360, 4
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1359 to i64*
  %1363 = load i64, i64* %1362, align 8
  store i64 %1363, i64* %RAX, align 8, !tbaa !2428
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %RCX, align 8, !tbaa !2428
  %1365 = icmp ugt i64 %1363, -5
  %1366 = zext i1 %1365 to i8
  store i8 %1366, i8* %4, align 1, !tbaa !2432
  %1367 = trunc i64 %1364 to i32
  %1368 = and i32 %1367, 255
  %1369 = tail call i32 @llvm.ctpop.i32(i32 %1368) #8
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = xor i8 %1371, 1
  store i8 %1372, i8* %5, align 1, !tbaa !2446
  %1373 = xor i64 %1363, %1364
  %1374 = lshr i64 %1373, 4
  %1375 = trunc i64 %1374 to i8
  %1376 = and i8 %1375, 1
  store i8 %1376, i8* %6, align 1, !tbaa !2447
  %1377 = icmp eq i64 %1364, 0
  %1378 = zext i1 %1377 to i8
  store i8 %1378, i8* %7, align 1, !tbaa !2448
  %1379 = lshr i64 %1364, 63
  %1380 = trunc i64 %1379 to i8
  store i8 %1380, i8* %8, align 1, !tbaa !2449
  %1381 = lshr i64 %1363, 63
  %1382 = xor i64 %1379, %1381
  %1383 = add nuw nsw i64 %1382, %1379
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %9, align 1, !tbaa !2450
  %1386 = add i64 %1360, 15
  store i64 %1386, i64* %PC, align 8
  store i64 %1364, i64* %1362, align 8
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %1387 = add i64 %557, -12
  store i64 4196999, i64* %PC, align 8
  %1388 = inttoptr i64 %1387 to i32*
  store i32 27, i32* %1388, align 4
  %1389 = load i64, i64* %RBP, align 8
  %1390 = add i64 %1389, -12
  %1391 = load i64, i64* %PC, align 8
  %1392 = add i64 %1391, 3
  store i64 %1392, i64* %PC, align 8
  %1393 = inttoptr i64 %1390 to i32*
  %1394 = load i32, i32* %1393, align 4
  %1395 = zext i32 %1394 to i64
  store i64 %1395, i64* %RDI, align 8, !tbaa !2428
  %1396 = add i64 %1391, -1431
  %1397 = add i64 %1391, 8
  %1398 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1399 = add i64 %1398, -8
  %1400 = inttoptr i64 %1399 to i64*
  store i64 %1397, i64* %1400, align 8
  store i64 %1399, i64* %RSP, align 8, !tbaa !2428
  store i64 %1396, i64* %PC, align 8, !tbaa !2428
  %1401 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1396, %struct.Memory* %MEMORY.0)
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -8
  %1404 = load i64, i64* %PC, align 8
  %1405 = add i64 %1404, 4
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1403 to i64*
  %1407 = load i64, i64* %1406, align 8
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = icmp ugt i64 %1407, -5
  %1410 = zext i1 %1409 to i8
  store i8 %1410, i8* %4, align 1, !tbaa !2432
  %1411 = trunc i64 %1408 to i32
  %1412 = and i32 %1411, 255
  %1413 = tail call i32 @llvm.ctpop.i32(i32 %1412) #8
  %1414 = trunc i32 %1413 to i8
  %1415 = and i8 %1414, 1
  %1416 = xor i8 %1415, 1
  store i8 %1416, i8* %5, align 1, !tbaa !2446
  %1417 = xor i64 %1407, %1408
  %1418 = lshr i64 %1417, 4
  %1419 = trunc i64 %1418 to i8
  %1420 = and i8 %1419, 1
  store i8 %1420, i8* %6, align 1, !tbaa !2447
  %1421 = icmp eq i64 %1408, 0
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %7, align 1, !tbaa !2448
  %1423 = lshr i64 %1408, 63
  %1424 = trunc i64 %1423 to i8
  store i8 %1424, i8* %8, align 1, !tbaa !2449
  %1425 = lshr i64 %1407, 63
  %1426 = xor i64 %1423, %1425
  %1427 = add nuw nsw i64 %1426, %1423
  %1428 = icmp eq i64 %1427, 2
  %1429 = zext i1 %1428 to i8
  store i8 %1429, i8* %9, align 1, !tbaa !2450
  %1430 = add i64 %1404, 15
  store i64 %1430, i64* %PC, align 8
  store i64 %1408, i64* %1406, align 8
  br label %block_400566

; <label>:1431:                                   ; preds = %block_400566
  %1432 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %561, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1432
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_eval(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400510:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #8
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -12
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400523

block_4007fd:                                     ; preds = %block_40054b, %block_4007f6
  %47 = phi i64 [ %.pre28, %block_4007f6 ], [ 4196349, %block_40054b ]
  %48 = phi i64 [ %.pre27, %block_4007f6 ], [ %619, %block_40054b ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.15, %block_4007f6 ], [ %2, %block_40054b ]
  %49 = add i64 %48, -12
  %50 = add i64 %47, 3
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %47, -781
  %55 = add i64 %47, 8
  %56 = load i64, i64* %RSP, align 8, !tbaa !2428
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %55, i64* %58, align 8
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  store i64 %54, i64* %PC, align 8, !tbaa !2428
  %59 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %54, %struct.Memory* %MEMORY.0)
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -8
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = add i64 %65, 4
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ugt i64 %65, -5
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2432
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #8
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2446
  %75 = xor i64 %65, %66
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %25, align 1, !tbaa !2447
  %79 = icmp eq i64 %66, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2448
  %81 = lshr i64 %66, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2449
  %83 = lshr i64 %65, 63
  %84 = xor i64 %81, %83
  %85 = add nuw nsw i64 %84, %81
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %37, align 1, !tbaa !2450
  %88 = add i64 %62, 15
  store i64 %88, i64* %PC, align 8
  store i64 %66, i64* %64, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %89 = add i64 %720, -12
  store i64 4196099, i64* %PC, align 8
  %90 = inttoptr i64 %89 to i32*
  store i32 9, i32* %90, align 4
  %.pre33 = load i64, i64* %RBP, align 8
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_400703

block_4008f7:                                     ; preds = %block_40054b, %block_4008f0
  %91 = phi i64 [ %.pre22, %block_4008f0 ], [ 4196599, %block_40054b ]
  %92 = phi i64 [ %.pre21, %block_4008f0 ], [ %619, %block_40054b ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.15, %block_4008f0 ], [ %2, %block_40054b ]
  %93 = add i64 %92, -12
  %94 = add i64 %91, 3
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i64
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %98 = add i64 %91, -1031
  %99 = add i64 %91, 8
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %98, %struct.Memory* %MEMORY.1)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -8
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %109, 4
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -5
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %12, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %19, align 1, !tbaa !2446
  %119 = xor i64 %109, %110
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %25, align 1, !tbaa !2447
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %28, align 1, !tbaa !2448
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %31, align 1, !tbaa !2449
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %37, align 1, !tbaa !2450
  %132 = add i64 %106, 15
  store i64 %132, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  br label %block_400566

block_4007f6:                                     ; preds = %block_400566
  %133 = add i64 %720, -12
  store i64 4196349, i64* %PC, align 8
  %134 = inttoptr i64 %133 to i32*
  store i32 14, i32* %134, align 4
  %.pre27 = load i64, i64* %RBP, align 8
  %.pre28 = load i64, i64* %PC, align 8
  br label %block_4007fd

block_400573:                                     ; preds = %block_40054b, %block_40056c
  %135 = phi i64 [ %.pre32, %block_40056c ], [ 4195699, %block_40054b ]
  %136 = phi i64 [ %.pre31, %block_40056c ], [ %619, %block_40054b ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.15, %block_40056c ], [ %2, %block_40054b ]
  %137 = add i64 %136, -12
  %138 = add i64 %135, 3
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RDI, align 8, !tbaa !2428
  %142 = add i64 %135, -131
  %143 = add i64 %135, 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  %147 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %142, %struct.Memory* %MEMORY.2)
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %153, 4
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ugt i64 %153, -5
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %12, align 1, !tbaa !2432
  %157 = trunc i64 %154 to i32
  %158 = and i32 %157, 255
  %159 = tail call i32 @llvm.ctpop.i32(i32 %158) #8
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  store i8 %162, i8* %19, align 1, !tbaa !2446
  %163 = xor i64 %153, %154
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %25, align 1, !tbaa !2447
  %167 = icmp eq i64 %154, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %28, align 1, !tbaa !2448
  %169 = lshr i64 %154, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %31, align 1, !tbaa !2449
  %171 = lshr i64 %153, 63
  %172 = xor i64 %169, %171
  %173 = add nuw nsw i64 %172, %169
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %37, align 1, !tbaa !2450
  %176 = add i64 %150, 15
  store i64 %176, i64* %PC, align 8
  store i64 %154, i64* %152, align 8
  br label %block_400566

block_4009f1:                                     ; preds = %block_40054b, %block_4009ea
  %177 = phi i64 [ %.pre30, %block_4009ea ], [ 4196849, %block_40054b ]
  %178 = phi i64 [ %.pre29, %block_4009ea ], [ %619, %block_40054b ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.15, %block_4009ea ], [ %2, %block_40054b ]
  %179 = add i64 %178, -12
  %180 = add i64 %177, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RDI, align 8, !tbaa !2428
  %184 = add i64 %177, -1281
  %185 = add i64 %177, 8
  %186 = load i64, i64* %RSP, align 8, !tbaa !2428
  %187 = add i64 %186, -8
  %188 = inttoptr i64 %187 to i64*
  store i64 %185, i64* %188, align 8
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  store i64 %184, i64* %PC, align 8, !tbaa !2428
  %189 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %184, %struct.Memory* %MEMORY.3)
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %195, 4
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = icmp ugt i64 %195, -5
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %12, align 1, !tbaa !2432
  %199 = trunc i64 %196 to i32
  %200 = and i32 %199, 255
  %201 = tail call i32 @llvm.ctpop.i32(i32 %200) #8
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  store i8 %204, i8* %19, align 1, !tbaa !2446
  %205 = xor i64 %195, %196
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* %25, align 1, !tbaa !2447
  %209 = icmp eq i64 %196, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %28, align 1, !tbaa !2448
  %211 = lshr i64 %196, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %31, align 1, !tbaa !2449
  %213 = lshr i64 %195, 63
  %214 = xor i64 %211, %213
  %215 = add nuw nsw i64 %214, %211
  %216 = icmp eq i64 %215, 2
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %37, align 1, !tbaa !2450
  %218 = add i64 %192, 15
  store i64 %218, i64* %PC, align 8
  store i64 %196, i64* %194, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %219 = add i64 %720, -12
  store i64 4196599, i64* %PC, align 8
  %220 = inttoptr i64 %219 to i32*
  store i32 19, i32* %220, align 4
  %.pre21 = load i64, i64* %RBP, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_4008f7

block_40066d:                                     ; preds = %block_400666, %block_40054b
  %221 = phi i64 [ %.pre36, %block_400666 ], [ 4195949, %block_40054b ]
  %222 = phi i64 [ %.pre35, %block_400666 ], [ %619, %block_40054b ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.15, %block_400666 ], [ %2, %block_40054b ]
  %223 = add i64 %222, -12
  %224 = add i64 %221, 3
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RDI, align 8, !tbaa !2428
  %228 = add i64 %221, -381
  %229 = add i64 %221, 8
  %230 = load i64, i64* %RSP, align 8, !tbaa !2428
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %229, i64* %232, align 8
  store i64 %231, i64* %RSP, align 8, !tbaa !2428
  store i64 %228, i64* %PC, align 8, !tbaa !2428
  %233 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %228, %struct.Memory* %MEMORY.4)
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -8
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = add i64 %239, 4
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = icmp ugt i64 %239, -5
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %12, align 1, !tbaa !2432
  %243 = trunc i64 %240 to i32
  %244 = and i32 %243, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #8
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %19, align 1, !tbaa !2446
  %249 = xor i64 %239, %240
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  store i8 %252, i8* %25, align 1, !tbaa !2447
  %253 = icmp eq i64 %240, 0
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %28, align 1, !tbaa !2448
  %255 = lshr i64 %240, 63
  %256 = trunc i64 %255 to i8
  store i8 %256, i8* %31, align 1, !tbaa !2449
  %257 = lshr i64 %239, 63
  %258 = xor i64 %255, %257
  %259 = add nuw nsw i64 %258, %255
  %260 = icmp eq i64 %259, 2
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %37, align 1, !tbaa !2450
  %262 = add i64 %236, 15
  store i64 %262, i64* %PC, align 8
  store i64 %240, i64* %238, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %263 = add i64 %720, -12
  store i64 4196849, i64* %PC, align 8
  %264 = inttoptr i64 %263 to i32*
  store i32 24, i32* %264, align 4
  %.pre29 = load i64, i64* %RBP, align 8
  %.pre30 = load i64, i64* %PC, align 8
  br label %block_4009f1

block_400767:                                     ; preds = %block_40054b, %block_400760
  %265 = phi i64 [ %.pre40, %block_400760 ], [ 4196199, %block_40054b ]
  %266 = phi i64 [ %.pre39, %block_400760 ], [ %619, %block_40054b ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.15, %block_400760 ], [ %2, %block_40054b ]
  %267 = add i64 %266, -12
  %268 = add i64 %265, 3
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  %272 = add i64 %265, -631
  %273 = add i64 %265, 8
  %274 = load i64, i64* %RSP, align 8, !tbaa !2428
  %275 = add i64 %274, -8
  %276 = inttoptr i64 %275 to i64*
  store i64 %273, i64* %276, align 8
  store i64 %275, i64* %RSP, align 8, !tbaa !2428
  store i64 %272, i64* %PC, align 8, !tbaa !2428
  %277 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %272, %struct.Memory* %MEMORY.5)
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i64*
  %283 = load i64, i64* %282, align 8
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = add i64 %283, 4
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %285 = icmp ugt i64 %283, -5
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %12, align 1, !tbaa !2432
  %287 = trunc i64 %284 to i32
  %288 = and i32 %287, 255
  %289 = tail call i32 @llvm.ctpop.i32(i32 %288) #8
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  store i8 %292, i8* %19, align 1, !tbaa !2446
  %293 = xor i64 %283, %284
  %294 = lshr i64 %293, 4
  %295 = trunc i64 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %25, align 1, !tbaa !2447
  %297 = icmp eq i64 %284, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %28, align 1, !tbaa !2448
  %299 = lshr i64 %284, 63
  %300 = trunc i64 %299 to i8
  store i8 %300, i8* %31, align 1, !tbaa !2449
  %301 = lshr i64 %283, 63
  %302 = xor i64 %299, %301
  %303 = add nuw nsw i64 %302, %299
  %304 = icmp eq i64 %303, 2
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %37, align 1, !tbaa !2450
  %306 = add i64 %280, 15
  store i64 %306, i64* %PC, align 8
  store i64 %284, i64* %282, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %307 = add i64 %720, -12
  store i64 4197099, i64* %PC, align 8
  %308 = inttoptr i64 %307 to i32*
  store i32 29, i32* %308, align 4
  %.pre37 = load i64, i64* %RBP, align 8
  %.pre38 = load i64, i64* %PC, align 8
  br label %block_400aeb

block_400861:                                     ; preds = %block_40054b, %block_40085a
  %309 = phi i64 [ %.pre42, %block_40085a ], [ 4196449, %block_40054b ]
  %310 = phi i64 [ %.pre41, %block_40085a ], [ %619, %block_40054b ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.15, %block_40085a ], [ %2, %block_40054b ]
  %311 = add i64 %310, -12
  %312 = add i64 %309, 3
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RDI, align 8, !tbaa !2428
  %316 = add i64 %309, -881
  %317 = add i64 %309, 8
  %318 = load i64, i64* %RSP, align 8, !tbaa !2428
  %319 = add i64 %318, -8
  %320 = inttoptr i64 %319 to i64*
  store i64 %317, i64* %320, align 8
  store i64 %319, i64* %RSP, align 8, !tbaa !2428
  store i64 %316, i64* %PC, align 8, !tbaa !2428
  %321 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %316, %struct.Memory* %MEMORY.6)
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -8
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %323 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = add i64 %327, 4
  store i64 %328, i64* %RCX, align 8, !tbaa !2428
  %329 = icmp ugt i64 %327, -5
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %12, align 1, !tbaa !2432
  %331 = trunc i64 %328 to i32
  %332 = and i32 %331, 255
  %333 = tail call i32 @llvm.ctpop.i32(i32 %332) #8
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  store i8 %336, i8* %19, align 1, !tbaa !2446
  %337 = xor i64 %327, %328
  %338 = lshr i64 %337, 4
  %339 = trunc i64 %338 to i8
  %340 = and i8 %339, 1
  store i8 %340, i8* %25, align 1, !tbaa !2447
  %341 = icmp eq i64 %328, 0
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %28, align 1, !tbaa !2448
  %343 = lshr i64 %328, 63
  %344 = trunc i64 %343 to i8
  store i8 %344, i8* %31, align 1, !tbaa !2449
  %345 = lshr i64 %327, 63
  %346 = xor i64 %343, %345
  %347 = add nuw nsw i64 %346, %343
  %348 = icmp eq i64 %347, 2
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %37, align 1, !tbaa !2450
  %350 = add i64 %324, 15
  store i64 %350, i64* %PC, align 8
  store i64 %328, i64* %326, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %351 = add i64 %720, -12
  store i64 4196199, i64* %PC, align 8
  %352 = inttoptr i64 %351 to i32*
  store i32 11, i32* %352, align 4
  %.pre39 = load i64, i64* %RBP, align 8
  %.pre40 = load i64, i64* %PC, align 8
  br label %block_400767

block_40095b:                                     ; preds = %block_40054b, %block_400954
  %353 = phi i64 [ %.pre2, %block_400954 ], [ 4196699, %block_40054b ]
  %354 = phi i64 [ %.pre1, %block_400954 ], [ %619, %block_40054b ]
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.15, %block_400954 ], [ %2, %block_40054b ]
  %355 = add i64 %354, -12
  %356 = add i64 %353, 3
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RDI, align 8, !tbaa !2428
  %360 = add i64 %353, -1131
  %361 = add i64 %353, 8
  %362 = load i64, i64* %RSP, align 8, !tbaa !2428
  %363 = add i64 %362, -8
  %364 = inttoptr i64 %363 to i64*
  store i64 %361, i64* %364, align 8
  store i64 %363, i64* %RSP, align 8, !tbaa !2428
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  %365 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %360, %struct.Memory* %MEMORY.7)
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -8
  %368 = load i64, i64* %PC, align 8
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370, align 8
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = add i64 %371, 4
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = icmp ugt i64 %371, -5
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %12, align 1, !tbaa !2432
  %375 = trunc i64 %372 to i32
  %376 = and i32 %375, 255
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376) #8
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  store i8 %380, i8* %19, align 1, !tbaa !2446
  %381 = xor i64 %371, %372
  %382 = lshr i64 %381, 4
  %383 = trunc i64 %382 to i8
  %384 = and i8 %383, 1
  store i8 %384, i8* %25, align 1, !tbaa !2447
  %385 = icmp eq i64 %372, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %28, align 1, !tbaa !2448
  %387 = lshr i64 %372, 63
  %388 = trunc i64 %387 to i8
  store i8 %388, i8* %31, align 1, !tbaa !2449
  %389 = lshr i64 %371, 63
  %390 = xor i64 %387, %389
  %391 = add nuw nsw i64 %390, %387
  %392 = icmp eq i64 %391, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %37, align 1, !tbaa !2450
  %394 = add i64 %368, 15
  store i64 %394, i64* %PC, align 8
  store i64 %372, i64* %370, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %395 = add i64 %720, -12
  store i64 4196449, i64* %PC, align 8
  %396 = inttoptr i64 %395 to i32*
  store i32 16, i32* %396, align 4
  %.pre41 = load i64, i64* %RBP, align 8
  %.pre42 = load i64, i64* %PC, align 8
  br label %block_400861

block_4005d7:                                     ; preds = %block_4005d0, %block_40054b
  %397 = phi i64 [ %.pre57, %block_4005d0 ], [ 4195799, %block_40054b ]
  %398 = phi i64 [ %.pre56, %block_4005d0 ], [ %619, %block_40054b ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.15, %block_4005d0 ], [ %2, %block_40054b ]
  %399 = add i64 %398, -12
  %400 = add i64 %397, 3
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %399 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %RDI, align 8, !tbaa !2428
  %404 = add i64 %397, -231
  %405 = add i64 %397, 8
  %406 = load i64, i64* %RSP, align 8, !tbaa !2428
  %407 = add i64 %406, -8
  %408 = inttoptr i64 %407 to i64*
  store i64 %405, i64* %408, align 8
  store i64 %407, i64* %RSP, align 8, !tbaa !2428
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  %409 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %404, %struct.Memory* %MEMORY.8)
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -8
  %412 = load i64, i64* %PC, align 8
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = add i64 %415, 4
  store i64 %416, i64* %RCX, align 8, !tbaa !2428
  %417 = icmp ugt i64 %415, -5
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %12, align 1, !tbaa !2432
  %419 = trunc i64 %416 to i32
  %420 = and i32 %419, 255
  %421 = tail call i32 @llvm.ctpop.i32(i32 %420) #8
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  store i8 %424, i8* %19, align 1, !tbaa !2446
  %425 = xor i64 %415, %416
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %25, align 1, !tbaa !2447
  %429 = icmp eq i64 %416, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %28, align 1, !tbaa !2448
  %431 = lshr i64 %416, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %31, align 1, !tbaa !2449
  %433 = lshr i64 %415, 63
  %434 = xor i64 %431, %433
  %435 = add nuw nsw i64 %434, %431
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %37, align 1, !tbaa !2450
  %438 = add i64 %412, 15
  store i64 %438, i64* %PC, align 8
  store i64 %416, i64* %414, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %439 = add i64 %720, -12
  store i64 4196699, i64* %PC, align 8
  %440 = inttoptr i64 %439 to i32*
  store i32 21, i32* %440, align 4
  %.pre1 = load i64, i64* %RBP, align 8
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40095b

block_40056c:                                     ; preds = %block_400566
  %441 = add i64 %720, -12
  store i64 4195699, i64* %PC, align 8
  %442 = inttoptr i64 %441 to i32*
  store i32 1, i32* %442, align 4
  %.pre31 = load i64, i64* %RBP, align 8
  %.pre32 = load i64, i64* %PC, align 8
  br label %block_400573

block_400a23:                                     ; preds = %block_400a1c, %block_40054b
  %443 = phi i64 [ %.pre4, %block_400a1c ], [ 4196899, %block_40054b ]
  %444 = phi i64 [ %.pre3, %block_400a1c ], [ %619, %block_40054b ]
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.15, %block_400a1c ], [ %2, %block_40054b ]
  %445 = add i64 %444, -12
  %446 = add i64 %443, 3
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i32*
  %448 = load i32, i32* %447, align 4
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %RDI, align 8, !tbaa !2428
  %450 = add i64 %443, -1331
  %451 = add i64 %443, 8
  %452 = load i64, i64* %RSP, align 8, !tbaa !2428
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %451, i64* %454, align 8
  store i64 %453, i64* %RSP, align 8, !tbaa !2428
  store i64 %450, i64* %PC, align 8, !tbaa !2428
  %455 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %450, %struct.Memory* %MEMORY.9)
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -8
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 4
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460, align 8
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = add i64 %461, 4
  store i64 %462, i64* %RCX, align 8, !tbaa !2428
  %463 = icmp ugt i64 %461, -5
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %12, align 1, !tbaa !2432
  %465 = trunc i64 %462 to i32
  %466 = and i32 %465, 255
  %467 = tail call i32 @llvm.ctpop.i32(i32 %466) #8
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  store i8 %470, i8* %19, align 1, !tbaa !2446
  %471 = xor i64 %461, %462
  %472 = lshr i64 %471, 4
  %473 = trunc i64 %472 to i8
  %474 = and i8 %473, 1
  store i8 %474, i8* %25, align 1, !tbaa !2447
  %475 = icmp eq i64 %462, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %28, align 1, !tbaa !2448
  %477 = lshr i64 %462, 63
  %478 = trunc i64 %477 to i8
  store i8 %478, i8* %31, align 1, !tbaa !2449
  %479 = lshr i64 %461, 63
  %480 = xor i64 %477, %479
  %481 = add nuw nsw i64 %480, %477
  %482 = icmp eq i64 %481, 2
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %37, align 1, !tbaa !2450
  %484 = add i64 %458, 15
  store i64 %484, i64* %PC, align 8
  store i64 %462, i64* %460, align 8
  br label %block_400566

block_4006d1:                                     ; preds = %block_40054b, %block_4006ca
  %485 = phi i64 [ %.pre26, %block_4006ca ], [ 4196049, %block_40054b ]
  %486 = phi i64 [ %.pre25, %block_4006ca ], [ %619, %block_40054b ]
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.15, %block_4006ca ], [ %2, %block_40054b ]
  %487 = add i64 %486, -12
  %488 = add i64 %485, 3
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i32*
  %490 = load i32, i32* %489, align 4
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %RDI, align 8, !tbaa !2428
  %492 = add i64 %485, -481
  %493 = add i64 %485, 8
  %494 = load i64, i64* %RSP, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %493, i64* %496, align 8
  store i64 %495, i64* %RSP, align 8, !tbaa !2428
  store i64 %492, i64* %PC, align 8, !tbaa !2428
  %497 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %492, %struct.Memory* %MEMORY.10)
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -8
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i64*
  %503 = load i64, i64* %502, align 8
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = add i64 %503, 4
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = icmp ugt i64 %503, -5
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %12, align 1, !tbaa !2432
  %507 = trunc i64 %504 to i32
  %508 = and i32 %507, 255
  %509 = tail call i32 @llvm.ctpop.i32(i32 %508) #8
  %510 = trunc i32 %509 to i8
  %511 = and i8 %510, 1
  %512 = xor i8 %511, 1
  store i8 %512, i8* %19, align 1, !tbaa !2446
  %513 = xor i64 %503, %504
  %514 = lshr i64 %513, 4
  %515 = trunc i64 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %25, align 1, !tbaa !2447
  %517 = icmp eq i64 %504, 0
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %28, align 1, !tbaa !2448
  %519 = lshr i64 %504, 63
  %520 = trunc i64 %519 to i8
  store i8 %520, i8* %31, align 1, !tbaa !2449
  %521 = lshr i64 %503, 63
  %522 = xor i64 %519, %521
  %523 = add nuw nsw i64 %522, %519
  %524 = icmp eq i64 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %37, align 1, !tbaa !2450
  %526 = add i64 %500, 15
  store i64 %526, i64* %PC, align 8
  store i64 %504, i64* %502, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %527 = add i64 %720, -12
  store i64 4196949, i64* %PC, align 8
  %528 = inttoptr i64 %527 to i32*
  store i32 26, i32* %528, align 4
  %.pre43 = load i64, i64* %RBP, align 8
  %.pre44 = load i64, i64* %PC, align 8
  br label %block_400a55

block_4007cb:                                     ; preds = %block_40054b, %block_4007c4
  %529 = phi i64 [ %.pre20, %block_4007c4 ], [ 4196299, %block_40054b ]
  %530 = phi i64 [ %.pre19, %block_4007c4 ], [ %619, %block_40054b ]
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.15, %block_4007c4 ], [ %2, %block_40054b ]
  %531 = add i64 %530, -12
  %532 = add i64 %529, 3
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %531 to i32*
  %534 = load i32, i32* %533, align 4
  %535 = zext i32 %534 to i64
  store i64 %535, i64* %RDI, align 8, !tbaa !2428
  %536 = add i64 %529, -731
  %537 = add i64 %529, 8
  %538 = load i64, i64* %RSP, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %537, i64* %540, align 8
  store i64 %539, i64* %RSP, align 8, !tbaa !2428
  store i64 %536, i64* %PC, align 8, !tbaa !2428
  %541 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %536, %struct.Memory* %MEMORY.11)
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -8
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546, align 8
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = add i64 %547, 4
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = icmp ugt i64 %547, -5
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %12, align 1, !tbaa !2432
  %551 = trunc i64 %548 to i32
  %552 = and i32 %551, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #8
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %19, align 1, !tbaa !2446
  %557 = xor i64 %547, %548
  %558 = lshr i64 %557, 4
  %559 = trunc i64 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %25, align 1, !tbaa !2447
  %561 = icmp eq i64 %548, 0
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %28, align 1, !tbaa !2448
  %563 = lshr i64 %548, 63
  %564 = trunc i64 %563 to i8
  store i8 %564, i8* %31, align 1, !tbaa !2449
  %565 = lshr i64 %547, 63
  %566 = xor i64 %563, %565
  %567 = add nuw nsw i64 %566, %563
  %568 = icmp eq i64 %567, 2
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %37, align 1, !tbaa !2450
  %570 = add i64 %544, 15
  store i64 %570, i64* %PC, align 8
  store i64 %548, i64* %546, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %571 = add i64 %720, -12
  store i64 4196049, i64* %PC, align 8
  %572 = inttoptr i64 %571 to i32*
  store i32 8, i32* %572, align 4
  %.pre25 = load i64, i64* %RBP, align 8
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_4006d1

block_400b48:                                     ; preds = %block_400566
  %573 = add i64 %720, -12
  store i64 4197199, i64* %PC, align 8
  %574 = inttoptr i64 %573 to i32*
  store i32 31, i32* %574, align 4
  %.pre23 = load i64, i64* %RBP, align 8
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_400b4f

block_4008c5:                                     ; preds = %block_4008be, %block_40054b
  %575 = phi i64 [ %.pre8, %block_4008be ], [ 4196549, %block_40054b ]
  %576 = phi i64 [ %.pre7, %block_4008be ], [ %619, %block_40054b ]
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.15, %block_4008be ], [ %2, %block_40054b ]
  %577 = add i64 %576, -12
  %578 = add i64 %575, 3
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %577 to i32*
  %580 = load i32, i32* %579, align 4
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %582 = add i64 %575, -981
  %583 = add i64 %575, 8
  %584 = load i64, i64* %RSP, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %583, i64* %586, align 8
  store i64 %585, i64* %RSP, align 8, !tbaa !2428
  store i64 %582, i64* %PC, align 8, !tbaa !2428
  %587 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %582, %struct.Memory* %MEMORY.12)
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -8
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = add i64 %593, 4
  store i64 %594, i64* %RCX, align 8, !tbaa !2428
  %595 = icmp ugt i64 %593, -5
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %12, align 1, !tbaa !2432
  %597 = trunc i64 %594 to i32
  %598 = and i32 %597, 255
  %599 = tail call i32 @llvm.ctpop.i32(i32 %598) #8
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = xor i8 %601, 1
  store i8 %602, i8* %19, align 1, !tbaa !2446
  %603 = xor i64 %593, %594
  %604 = lshr i64 %603, 4
  %605 = trunc i64 %604 to i8
  %606 = and i8 %605, 1
  store i8 %606, i8* %25, align 1, !tbaa !2447
  %607 = icmp eq i64 %594, 0
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %28, align 1, !tbaa !2448
  %609 = lshr i64 %594, 63
  %610 = trunc i64 %609 to i8
  store i8 %610, i8* %31, align 1, !tbaa !2449
  %611 = lshr i64 %593, 63
  %612 = xor i64 %609, %611
  %613 = add nuw nsw i64 %612, %609
  %614 = icmp eq i64 %613, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %37, align 1, !tbaa !2450
  %616 = add i64 %590, 15
  store i64 %616, i64* %PC, align 8
  store i64 %594, i64* %592, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %617 = add i64 %720, -12
  store i64 4196299, i64* %PC, align 8
  %618 = inttoptr i64 %617 to i32*
  store i32 13, i32* %618, align 4
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4007cb

block_40054b:                                     ; preds = %block_400523
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -24
  %621 = add i64 %1057, 4
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i64*
  %623 = load i64, i64* %622, align 8
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = shl i64 %623, 3
  %625 = add i64 %624, add (i64 ptrtoint (%seg_400ce0__rodata_type* @seg_400ce0__rodata to i64), i64 8)
  %626 = add i64 %1057, 12
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i64*
  %628 = load i64, i64* %627, align 8
  store i64 %628, i64* %RCX, align 8, !tbaa !2428
  store i64 %628, i64* %PC, align 8, !tbaa !2428
  switch i64 %628, label %1547 [
    i64 4196699, label %block_40095b
    i64 4195799, label %block_4005d7
    i64 4196949, label %block_400a55
    i64 4195680, label %block_400560
    i64 4196049, label %block_4006d1
    i64 4197199, label %block_400b4f
    i64 4196299, label %block_4007cb
    i64 4196549, label %block_4008c5
    i64 4196799, label %block_4009bf
    i64 4196449, label %block_400861
    i64 4196199, label %block_400767
    i64 4195999, label %block_40069f
    i64 4197149, label %block_400b1d
    i64 4197099, label %block_400aeb
    i64 4195949, label %block_40066d
    i64 4196599, label %block_4008f7
    i64 4196899, label %block_400a23
    i64 4195749, label %block_4005a5
    i64 4196349, label %block_4007fd
    i64 4195699, label %block_400573
    i64 4196849, label %block_4009f1
    i64 4196249, label %block_400799
    i64 4196999, label %block_400a87
    i64 4195849, label %block_400609
    i64 4196649, label %block_400929
    i64 4196099, label %block_400703
    i64 4196749, label %block_40098d
    i64 4196499, label %block_400893
    i64 4196399, label %block_40082f
    i64 4196149, label %block_400735
    i64 4197049, label %block_400ab9
    i64 4195899, label %block_40063b
  ]

block_400b7a:                                     ; preds = %block_400523
  %629 = add i64 %1057, -1623
  store i64 %629, i64* %PC, align 8, !tbaa !2428
  br label %block_400523

block_400560:                                     ; preds = %block_400559, %block_40054b
  %630 = phi i64 [ %phitmp79, %block_400559 ], [ 4195685, %block_40054b ]
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.15, %block_400559 ], [ %2, %block_40054b ]
  %631 = load i64, i64* %RSP, align 8
  %632 = add i64 %631, 48
  store i64 %632, i64* %RSP, align 8, !tbaa !2428
  %633 = icmp ugt i64 %631, -49
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %12, align 1, !tbaa !2432
  %635 = trunc i64 %632 to i32
  %636 = and i32 %635, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #8
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %19, align 1, !tbaa !2446
  %641 = xor i64 %631, 16
  %642 = xor i64 %641, %632
  %643 = lshr i64 %642, 4
  %644 = trunc i64 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %25, align 1, !tbaa !2447
  %646 = icmp eq i64 %632, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %28, align 1, !tbaa !2448
  %648 = lshr i64 %632, 63
  %649 = trunc i64 %648 to i8
  store i8 %649, i8* %31, align 1, !tbaa !2449
  %650 = lshr i64 %631, 63
  %651 = xor i64 %648, %650
  %652 = add nuw nsw i64 %651, %648
  %653 = icmp eq i64 %652, 2
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %37, align 1, !tbaa !2450
  store i64 %630, i64* %PC, align 8
  %655 = add i64 %631, 56
  %656 = inttoptr i64 %632 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RBP, align 8, !tbaa !2428
  store i64 %655, i64* %RSP, align 8, !tbaa !2428
  %658 = add i64 %630, 1
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %655 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %PC, align 8, !tbaa !2428
  %661 = add i64 %631, 64
  store i64 %661, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.13

block_4009bf:                                     ; preds = %block_4009b8, %block_40054b
  %662 = phi i64 [ %.pre18, %block_4009b8 ], [ 4196799, %block_40054b ]
  %663 = phi i64 [ %.pre17, %block_4009b8 ], [ %619, %block_40054b ]
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.15, %block_4009b8 ], [ %2, %block_40054b ]
  %664 = add i64 %663, -12
  %665 = add i64 %662, 3
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i32*
  %667 = load i32, i32* %666, align 4
  %668 = zext i32 %667 to i64
  store i64 %668, i64* %RDI, align 8, !tbaa !2428
  %669 = add i64 %662, -1231
  %670 = add i64 %662, 8
  %671 = load i64, i64* %RSP, align 8, !tbaa !2428
  %672 = add i64 %671, -8
  %673 = inttoptr i64 %672 to i64*
  store i64 %670, i64* %673, align 8
  store i64 %672, i64* %RSP, align 8, !tbaa !2428
  store i64 %669, i64* %PC, align 8, !tbaa !2428
  %674 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %669, %struct.Memory* %MEMORY.14)
  %675 = load i64, i64* %RBP, align 8
  %676 = add i64 %675, -8
  %677 = load i64, i64* %PC, align 8
  %678 = add i64 %677, 4
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %676 to i64*
  %680 = load i64, i64* %679, align 8
  store i64 %680, i64* %RAX, align 8, !tbaa !2428
  %681 = add i64 %680, 4
  store i64 %681, i64* %RCX, align 8, !tbaa !2428
  %682 = icmp ugt i64 %680, -5
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %12, align 1, !tbaa !2432
  %684 = trunc i64 %681 to i32
  %685 = and i32 %684, 255
  %686 = tail call i32 @llvm.ctpop.i32(i32 %685) #8
  %687 = trunc i32 %686 to i8
  %688 = and i8 %687, 1
  %689 = xor i8 %688, 1
  store i8 %689, i8* %19, align 1, !tbaa !2446
  %690 = xor i64 %680, %681
  %691 = lshr i64 %690, 4
  %692 = trunc i64 %691 to i8
  %693 = and i8 %692, 1
  store i8 %693, i8* %25, align 1, !tbaa !2447
  %694 = icmp eq i64 %681, 0
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %28, align 1, !tbaa !2448
  %696 = lshr i64 %681, 63
  %697 = trunc i64 %696 to i8
  store i8 %697, i8* %31, align 1, !tbaa !2449
  %698 = lshr i64 %680, 63
  %699 = xor i64 %696, %698
  %700 = add nuw nsw i64 %699, %696
  %701 = icmp eq i64 %700, 2
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %37, align 1, !tbaa !2450
  %703 = add i64 %677, 15
  store i64 %703, i64* %PC, align 8
  store i64 %681, i64* %679, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400ab9, %block_400703, %block_400a87, %block_400609, %block_40098d, %block_400a55, %block_400893, %block_400b4f, %block_400799, %block_400b1d, %block_40069f, %block_4005a5, %block_400929, %block_40082f, %block_400aeb, %block_400735, %block_40063b, %block_4009bf, %block_4008c5, %block_4007cb, %block_4006d1, %block_400a23, %block_4005d7, %block_40095b, %block_400861, %block_400767, %block_40066d, %block_4009f1, %block_400573, %block_4008f7, %block_4007fd
  %.sink66 = phi i64 [ 1401, %block_400ab9 ], [ 451, %block_400703 ], [ 1351, %block_400a87 ], [ 201, %block_400609 ], [ 1101, %block_40098d ], [ 1301, %block_400a55 ], [ 851, %block_400893 ], [ 1551, %block_400b4f ], [ 601, %block_400799 ], [ 1501, %block_400b1d ], [ 351, %block_40069f ], [ 101, %block_4005a5 ], [ 1001, %block_400929 ], [ 751, %block_40082f ], [ 1451, %block_400aeb ], [ 501, %block_400735 ], [ 251, %block_40063b ], [ 1151, %block_4009bf ], [ 901, %block_4008c5 ], [ 651, %block_4007cb ], [ 401, %block_4006d1 ], [ 1251, %block_400a23 ], [ 151, %block_4005d7 ], [ 1051, %block_40095b ], [ 801, %block_400861 ], [ 551, %block_400767 ], [ 301, %block_40066d ], [ 1201, %block_4009f1 ], [ 51, %block_400573 ], [ 951, %block_4008f7 ], [ 701, %block_4007fd ]
  %MEMORY.15 = phi %struct.Memory* [ %1513, %block_400ab9 ], [ %1471, %block_400703 ], [ %1425, %block_400a87 ], [ %1381, %block_400609 ], [ %1337, %block_40098d ], [ %1293, %block_400a55 ], [ %1249, %block_400893 ], [ %1203, %block_400b4f ], [ %1161, %block_400799 ], [ %1116, %block_400b1d ], [ %1072, %block_40069f ], [ %957, %block_4005a5 ], [ %913, %block_400929 ], [ %869, %block_40082f ], [ %823, %block_400aeb ], [ %781, %block_400735 ], [ %737, %block_40063b ], [ %674, %block_4009bf ], [ %587, %block_4008c5 ], [ %541, %block_4007cb ], [ %497, %block_4006d1 ], [ %455, %block_400a23 ], [ %409, %block_4005d7 ], [ %365, %block_40095b ], [ %321, %block_400861 ], [ %277, %block_400767 ], [ %233, %block_40066d ], [ %189, %block_4009f1 ], [ %147, %block_400573 ], [ %103, %block_4008f7 ], [ %59, %block_4007fd ]
  %704 = load i32*, i32** %1018, align 8
  %705 = load i64, i64* %PC, align 8
  %706 = add i64 %705, 3
  store i64 %706, i64* %PC, align 8
  %707 = load i32, i32* %704, align 4
  %708 = sext i32 %707 to i64
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = shl nsw i64 %708, 3
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = add i64 %705, 11
  store i64 %711, i64* %PC, align 8
  %712 = inttoptr i64 %710 to i64*
  %713 = load i64, i64* %712, align 8
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = load i64, i64* %RBP, align 8
  %715 = add i64 %714, -40
  %716 = add i64 %705, 15
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %717, align 8
  %718 = load i64, i64* %PC, align 8
  %719 = sub i64 %718, %.sink66
  %720 = load i64, i64* %RBP, align 8
  %721 = add i64 %720, -40
  %722 = add i64 %719, 4
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i64*
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  store i64 %724, i64* %PC, align 8, !tbaa !2428
  switch i64 %724, label %1549 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4197247, label %block_400b7f
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196892, label %block_400a1c
  ]

block_40063b:                                     ; preds = %block_400634, %block_40054b
  %725 = phi i64 [ 4195899, %block_40054b ], [ %.pre16, %block_400634 ]
  %726 = phi i64 [ %619, %block_40054b ], [ %.pre15, %block_400634 ]
  %MEMORY.16 = phi %struct.Memory* [ %2, %block_40054b ], [ %MEMORY.15, %block_400634 ]
  %727 = add i64 %726, -12
  %728 = add i64 %725, 3
  store i64 %728, i64* %PC, align 8
  %729 = inttoptr i64 %727 to i32*
  %730 = load i32, i32* %729, align 4
  %731 = zext i32 %730 to i64
  store i64 %731, i64* %RDI, align 8, !tbaa !2428
  %732 = add i64 %725, -331
  %733 = add i64 %725, 8
  %734 = load i64, i64* %RSP, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %733, i64* %736, align 8
  store i64 %735, i64* %RSP, align 8, !tbaa !2428
  store i64 %732, i64* %PC, align 8, !tbaa !2428
  %737 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %732, %struct.Memory* %MEMORY.16)
  %738 = load i64, i64* %RBP, align 8
  %739 = add i64 %738, -8
  %740 = load i64, i64* %PC, align 8
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC, align 8
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742, align 8
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = add i64 %743, 4
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %745 = icmp ugt i64 %743, -5
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %12, align 1, !tbaa !2432
  %747 = trunc i64 %744 to i32
  %748 = and i32 %747, 255
  %749 = tail call i32 @llvm.ctpop.i32(i32 %748) #8
  %750 = trunc i32 %749 to i8
  %751 = and i8 %750, 1
  %752 = xor i8 %751, 1
  store i8 %752, i8* %19, align 1, !tbaa !2446
  %753 = xor i64 %743, %744
  %754 = lshr i64 %753, 4
  %755 = trunc i64 %754 to i8
  %756 = and i8 %755, 1
  store i8 %756, i8* %25, align 1, !tbaa !2447
  %757 = icmp eq i64 %744, 0
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %28, align 1, !tbaa !2448
  %759 = lshr i64 %744, 63
  %760 = trunc i64 %759 to i8
  store i8 %760, i8* %31, align 1, !tbaa !2449
  %761 = lshr i64 %743, 63
  %762 = xor i64 %759, %761
  %763 = add nuw nsw i64 %762, %759
  %764 = icmp eq i64 %763, 2
  %765 = zext i1 %764 to i8
  store i8 %765, i8* %37, align 1, !tbaa !2450
  %766 = add i64 %740, 15
  store i64 %766, i64* %PC, align 8
  store i64 %744, i64* %742, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %767 = add i64 %720, -12
  store i64 4196799, i64* %PC, align 8
  %768 = inttoptr i64 %767 to i32*
  store i32 23, i32* %768, align 4
  %.pre17 = load i64, i64* %RBP, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_4009bf

block_400735:                                     ; preds = %block_40072e, %block_40054b
  %769 = phi i64 [ %.pre12, %block_40072e ], [ 4196149, %block_40054b ]
  %770 = phi i64 [ %.pre11, %block_40072e ], [ %619, %block_40054b ]
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.15, %block_40072e ], [ %2, %block_40054b ]
  %771 = add i64 %770, -12
  %772 = add i64 %769, 3
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to i32*
  %774 = load i32, i32* %773, align 4
  %775 = zext i32 %774 to i64
  store i64 %775, i64* %RDI, align 8, !tbaa !2428
  %776 = add i64 %769, -581
  %777 = add i64 %769, 8
  %778 = load i64, i64* %RSP, align 8, !tbaa !2428
  %779 = add i64 %778, -8
  %780 = inttoptr i64 %779 to i64*
  store i64 %777, i64* %780, align 8
  store i64 %779, i64* %RSP, align 8, !tbaa !2428
  store i64 %776, i64* %PC, align 8, !tbaa !2428
  %781 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %776, %struct.Memory* %MEMORY.17)
  %782 = load i64, i64* %RBP, align 8
  %783 = add i64 %782, -8
  %784 = load i64, i64* %PC, align 8
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %783 to i64*
  %787 = load i64, i64* %786, align 8
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = add i64 %787, 4
  store i64 %788, i64* %RCX, align 8, !tbaa !2428
  %789 = icmp ugt i64 %787, -5
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %12, align 1, !tbaa !2432
  %791 = trunc i64 %788 to i32
  %792 = and i32 %791, 255
  %793 = tail call i32 @llvm.ctpop.i32(i32 %792) #8
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  %796 = xor i8 %795, 1
  store i8 %796, i8* %19, align 1, !tbaa !2446
  %797 = xor i64 %787, %788
  %798 = lshr i64 %797, 4
  %799 = trunc i64 %798 to i8
  %800 = and i8 %799, 1
  store i8 %800, i8* %25, align 1, !tbaa !2447
  %801 = icmp eq i64 %788, 0
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %28, align 1, !tbaa !2448
  %803 = lshr i64 %788, 63
  %804 = trunc i64 %803 to i8
  store i8 %804, i8* %31, align 1, !tbaa !2449
  %805 = lshr i64 %787, 63
  %806 = xor i64 %803, %805
  %807 = add nuw nsw i64 %806, %803
  %808 = icmp eq i64 %807, 2
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %37, align 1, !tbaa !2450
  %810 = add i64 %784, 15
  store i64 %810, i64* %PC, align 8
  store i64 %788, i64* %786, align 8
  br label %block_400566

block_400aeb:                                     ; preds = %block_40054b, %block_400ae4
  %811 = phi i64 [ %.pre38, %block_400ae4 ], [ 4197099, %block_40054b ]
  %812 = phi i64 [ %.pre37, %block_400ae4 ], [ %619, %block_40054b ]
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.15, %block_400ae4 ], [ %2, %block_40054b ]
  %813 = add i64 %812, -12
  %814 = add i64 %811, 3
  store i64 %814, i64* %PC, align 8
  %815 = inttoptr i64 %813 to i32*
  %816 = load i32, i32* %815, align 4
  %817 = zext i32 %816 to i64
  store i64 %817, i64* %RDI, align 8, !tbaa !2428
  %818 = add i64 %811, -1531
  %819 = add i64 %811, 8
  %820 = load i64, i64* %RSP, align 8, !tbaa !2428
  %821 = add i64 %820, -8
  %822 = inttoptr i64 %821 to i64*
  store i64 %819, i64* %822, align 8
  store i64 %821, i64* %RSP, align 8, !tbaa !2428
  store i64 %818, i64* %PC, align 8, !tbaa !2428
  %823 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %818, %struct.Memory* %MEMORY.18)
  %824 = load i64, i64* %RBP, align 8
  %825 = add i64 %824, -8
  %826 = load i64, i64* %PC, align 8
  %827 = add i64 %826, 4
  store i64 %827, i64* %PC, align 8
  %828 = inttoptr i64 %825 to i64*
  %829 = load i64, i64* %828, align 8
  store i64 %829, i64* %RAX, align 8, !tbaa !2428
  %830 = add i64 %829, 4
  store i64 %830, i64* %RCX, align 8, !tbaa !2428
  %831 = icmp ugt i64 %829, -5
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %12, align 1, !tbaa !2432
  %833 = trunc i64 %830 to i32
  %834 = and i32 %833, 255
  %835 = tail call i32 @llvm.ctpop.i32(i32 %834) #8
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  %838 = xor i8 %837, 1
  store i8 %838, i8* %19, align 1, !tbaa !2446
  %839 = xor i64 %829, %830
  %840 = lshr i64 %839, 4
  %841 = trunc i64 %840 to i8
  %842 = and i8 %841, 1
  store i8 %842, i8* %25, align 1, !tbaa !2447
  %843 = icmp eq i64 %830, 0
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %28, align 1, !tbaa !2448
  %845 = lshr i64 %830, 63
  %846 = trunc i64 %845 to i8
  store i8 %846, i8* %31, align 1, !tbaa !2449
  %847 = lshr i64 %829, 63
  %848 = xor i64 %845, %847
  %849 = add nuw nsw i64 %848, %845
  %850 = icmp eq i64 %849, 2
  %851 = zext i1 %850 to i8
  store i8 %851, i8* %37, align 1, !tbaa !2450
  %852 = add i64 %826, 15
  store i64 %852, i64* %PC, align 8
  store i64 %830, i64* %828, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %853 = add i64 %720, -12
  store i64 4195899, i64* %PC, align 8
  %854 = inttoptr i64 %853 to i32*
  store i32 5, i32* %854, align 4
  %.pre15 = load i64, i64* %RBP, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_40063b

block_400ab2:                                     ; preds = %block_400566
  %855 = add i64 %720, -12
  store i64 4197049, i64* %PC, align 8
  %856 = inttoptr i64 %855 to i32*
  store i32 28, i32* %856, align 4
  %.pre13 = load i64, i64* %RBP, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_400ab9

block_40082f:                                     ; preds = %block_400828, %block_40054b
  %857 = phi i64 [ %.pre10, %block_400828 ], [ 4196399, %block_40054b ]
  %858 = phi i64 [ %.pre9, %block_400828 ], [ %619, %block_40054b ]
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.15, %block_400828 ], [ %2, %block_40054b ]
  %859 = add i64 %858, -12
  %860 = add i64 %857, 3
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %859 to i32*
  %862 = load i32, i32* %861, align 4
  %863 = zext i32 %862 to i64
  store i64 %863, i64* %RDI, align 8, !tbaa !2428
  %864 = add i64 %857, -831
  %865 = add i64 %857, 8
  %866 = load i64, i64* %RSP, align 8, !tbaa !2428
  %867 = add i64 %866, -8
  %868 = inttoptr i64 %867 to i64*
  store i64 %865, i64* %868, align 8
  store i64 %867, i64* %RSP, align 8, !tbaa !2428
  store i64 %864, i64* %PC, align 8, !tbaa !2428
  %869 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %864, %struct.Memory* %MEMORY.19)
  %870 = load i64, i64* %RBP, align 8
  %871 = add i64 %870, -8
  %872 = load i64, i64* %PC, align 8
  %873 = add i64 %872, 4
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %871 to i64*
  %875 = load i64, i64* %874, align 8
  store i64 %875, i64* %RAX, align 8, !tbaa !2428
  %876 = add i64 %875, 4
  store i64 %876, i64* %RCX, align 8, !tbaa !2428
  %877 = icmp ugt i64 %875, -5
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %12, align 1, !tbaa !2432
  %879 = trunc i64 %876 to i32
  %880 = and i32 %879, 255
  %881 = tail call i32 @llvm.ctpop.i32(i32 %880) #8
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = xor i8 %883, 1
  store i8 %884, i8* %19, align 1, !tbaa !2446
  %885 = xor i64 %875, %876
  %886 = lshr i64 %885, 4
  %887 = trunc i64 %886 to i8
  %888 = and i8 %887, 1
  store i8 %888, i8* %25, align 1, !tbaa !2447
  %889 = icmp eq i64 %876, 0
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %28, align 1, !tbaa !2448
  %891 = lshr i64 %876, 63
  %892 = trunc i64 %891 to i8
  store i8 %892, i8* %31, align 1, !tbaa !2449
  %893 = lshr i64 %875, 63
  %894 = xor i64 %891, %893
  %895 = add nuw nsw i64 %894, %891
  %896 = icmp eq i64 %895, 2
  %897 = zext i1 %896 to i8
  store i8 %897, i8* %37, align 1, !tbaa !2450
  %898 = add i64 %872, 15
  store i64 %898, i64* %PC, align 8
  store i64 %876, i64* %874, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %899 = add i64 %720, -12
  store i64 4196149, i64* %PC, align 8
  %900 = inttoptr i64 %899 to i32*
  store i32 10, i32* %900, align 4
  %.pre11 = load i64, i64* %RBP, align 8
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_400735

block_400929:                                     ; preds = %block_400922, %block_40054b
  %901 = phi i64 [ %.pre6, %block_400922 ], [ 4196649, %block_40054b ]
  %902 = phi i64 [ %.pre5, %block_400922 ], [ %619, %block_40054b ]
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.15, %block_400922 ], [ %2, %block_40054b ]
  %903 = add i64 %902, -12
  %904 = add i64 %901, 3
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i32*
  %906 = load i32, i32* %905, align 4
  %907 = zext i32 %906 to i64
  store i64 %907, i64* %RDI, align 8, !tbaa !2428
  %908 = add i64 %901, -1081
  %909 = add i64 %901, 8
  %910 = load i64, i64* %RSP, align 8, !tbaa !2428
  %911 = add i64 %910, -8
  %912 = inttoptr i64 %911 to i64*
  store i64 %909, i64* %912, align 8
  store i64 %911, i64* %RSP, align 8, !tbaa !2428
  store i64 %908, i64* %PC, align 8, !tbaa !2428
  %913 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %908, %struct.Memory* %MEMORY.20)
  %914 = load i64, i64* %RBP, align 8
  %915 = add i64 %914, -8
  %916 = load i64, i64* %PC, align 8
  %917 = add i64 %916, 4
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %915 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %RAX, align 8, !tbaa !2428
  %920 = add i64 %919, 4
  store i64 %920, i64* %RCX, align 8, !tbaa !2428
  %921 = icmp ugt i64 %919, -5
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %12, align 1, !tbaa !2432
  %923 = trunc i64 %920 to i32
  %924 = and i32 %923, 255
  %925 = tail call i32 @llvm.ctpop.i32(i32 %924) #8
  %926 = trunc i32 %925 to i8
  %927 = and i8 %926, 1
  %928 = xor i8 %927, 1
  store i8 %928, i8* %19, align 1, !tbaa !2446
  %929 = xor i64 %919, %920
  %930 = lshr i64 %929, 4
  %931 = trunc i64 %930 to i8
  %932 = and i8 %931, 1
  store i8 %932, i8* %25, align 1, !tbaa !2447
  %933 = icmp eq i64 %920, 0
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %28, align 1, !tbaa !2448
  %935 = lshr i64 %920, 63
  %936 = trunc i64 %935 to i8
  store i8 %936, i8* %31, align 1, !tbaa !2449
  %937 = lshr i64 %919, 63
  %938 = xor i64 %935, %937
  %939 = add nuw nsw i64 %938, %935
  %940 = icmp eq i64 %939, 2
  %941 = zext i1 %940 to i8
  store i8 %941, i8* %37, align 1, !tbaa !2450
  %942 = add i64 %916, 15
  store i64 %942, i64* %PC, align 8
  store i64 %920, i64* %918, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %943 = add i64 %720, -12
  store i64 4196399, i64* %PC, align 8
  %944 = inttoptr i64 %943 to i32*
  store i32 15, i32* %944, align 4
  %.pre9 = load i64, i64* %RBP, align 8
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_40082f

block_4005a5:                                     ; preds = %block_40059e, %block_40054b
  %945 = phi i64 [ %.pre53, %block_40059e ], [ 4195749, %block_40054b ]
  %946 = phi i64 [ %.pre52, %block_40059e ], [ %619, %block_40054b ]
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.15, %block_40059e ], [ %2, %block_40054b ]
  %947 = add i64 %946, -12
  %948 = add i64 %945, 3
  store i64 %948, i64* %PC, align 8
  %949 = inttoptr i64 %947 to i32*
  %950 = load i32, i32* %949, align 4
  %951 = zext i32 %950 to i64
  store i64 %951, i64* %RDI, align 8, !tbaa !2428
  %952 = add i64 %945, -181
  %953 = add i64 %945, 8
  %954 = load i64, i64* %RSP, align 8, !tbaa !2428
  %955 = add i64 %954, -8
  %956 = inttoptr i64 %955 to i64*
  store i64 %953, i64* %956, align 8
  store i64 %955, i64* %RSP, align 8, !tbaa !2428
  store i64 %952, i64* %PC, align 8, !tbaa !2428
  %957 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %952, %struct.Memory* %MEMORY.21)
  %958 = load i64, i64* %RBP, align 8
  %959 = add i64 %958, -8
  %960 = load i64, i64* %PC, align 8
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %959 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = add i64 %963, 4
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %965 = icmp ugt i64 %963, -5
  %966 = zext i1 %965 to i8
  store i8 %966, i8* %12, align 1, !tbaa !2432
  %967 = trunc i64 %964 to i32
  %968 = and i32 %967, 255
  %969 = tail call i32 @llvm.ctpop.i32(i32 %968) #8
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = xor i8 %971, 1
  store i8 %972, i8* %19, align 1, !tbaa !2446
  %973 = xor i64 %963, %964
  %974 = lshr i64 %973, 4
  %975 = trunc i64 %974 to i8
  %976 = and i8 %975, 1
  store i8 %976, i8* %25, align 1, !tbaa !2447
  %977 = icmp eq i64 %964, 0
  %978 = zext i1 %977 to i8
  store i8 %978, i8* %28, align 1, !tbaa !2448
  %979 = lshr i64 %964, 63
  %980 = trunc i64 %979 to i8
  store i8 %980, i8* %31, align 1, !tbaa !2449
  %981 = lshr i64 %963, 63
  %982 = xor i64 %979, %981
  %983 = add nuw nsw i64 %982, %979
  %984 = icmp eq i64 %983, 2
  %985 = zext i1 %984 to i8
  store i8 %985, i8* %37, align 1, !tbaa !2450
  %986 = add i64 %960, 15
  store i64 %986, i64* %PC, align 8
  store i64 %964, i64* %962, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %987 = add i64 %720, -12
  store i64 4196549, i64* %PC, align 8
  %988 = inttoptr i64 %987 to i32*
  store i32 18, i32* %988, align 4
  %.pre7 = load i64, i64* %RBP, align 8
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4008c5

block_400523:                                     ; preds = %block_400b7a, %block_400510
  %989 = phi i64 [ %629, %block_400b7a ], [ %.pre, %block_400510 ]
  %990 = load i64, i64* %RBP, align 8
  %991 = add i64 %990, -8
  %992 = add i64 %989, 4
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i64*
  %994 = load i64, i64* %993, align 8
  store i64 %994, i64* %RAX, align 8, !tbaa !2428
  %995 = add i64 %994, 4
  store i64 %995, i64* %RCX, align 8, !tbaa !2428
  %996 = icmp ugt i64 %994, -5
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %12, align 1, !tbaa !2432
  %998 = trunc i64 %995 to i32
  %999 = and i32 %998, 255
  %1000 = tail call i32 @llvm.ctpop.i32(i32 %999) #8
  %1001 = trunc i32 %1000 to i8
  %1002 = and i8 %1001, 1
  %1003 = xor i8 %1002, 1
  store i8 %1003, i8* %19, align 1, !tbaa !2446
  %1004 = xor i64 %994, %995
  %1005 = lshr i64 %1004, 4
  %1006 = trunc i64 %1005 to i8
  %1007 = and i8 %1006, 1
  store i8 %1007, i8* %25, align 1, !tbaa !2447
  %1008 = icmp eq i64 %995, 0
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %28, align 1, !tbaa !2448
  %1010 = lshr i64 %995, 63
  %1011 = trunc i64 %1010 to i8
  store i8 %1011, i8* %31, align 1, !tbaa !2449
  %1012 = lshr i64 %994, 63
  %1013 = xor i64 %1010, %1012
  %1014 = add nuw nsw i64 %1013, %1010
  %1015 = icmp eq i64 %1014, 2
  %1016 = zext i1 %1015 to i8
  store i8 %1016, i8* %37, align 1, !tbaa !2450
  %1017 = add i64 %989, 15
  store i64 %1017, i64* %PC, align 8
  store i64 %995, i64* %993, align 8
  %1018 = bitcast i64* %RAX to i32**
  %1019 = load i32*, i32** %1018, align 8
  %1020 = load i64, i64* %PC, align 8
  %1021 = add i64 %1020, 2
  store i64 %1021, i64* %PC, align 8
  %1022 = load i32, i32* %1019, align 4
  %1023 = zext i32 %1022 to i64
  store i64 %1023, i64* %RDX, align 8, !tbaa !2428
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = add nsw i64 %1023, -31
  store i64 %1024, i64* %RCX, align 8, !tbaa !2428
  %1025 = icmp ult i32 %1022, 31
  %1026 = zext i1 %1025 to i8
  store i8 %1026, i8* %12, align 1, !tbaa !2432
  %1027 = trunc i64 %1024 to i32
  %1028 = and i32 %1027, 255
  %1029 = tail call i32 @llvm.ctpop.i32(i32 %1028) #8
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  store i8 %1032, i8* %19, align 1, !tbaa !2446
  %1033 = xor i64 %1023, 16
  %1034 = xor i64 %1033, %1024
  %1035 = lshr i64 %1034, 4
  %1036 = trunc i64 %1035 to i8
  %1037 = and i8 %1036, 1
  store i8 %1037, i8* %25, align 1, !tbaa !2447
  %1038 = icmp eq i64 %1024, 0
  %1039 = zext i1 %1038 to i8
  store i8 %1039, i8* %28, align 1, !tbaa !2448
  %1040 = lshr i64 %1024, 63
  %1041 = trunc i64 %1040 to i8
  store i8 %1041, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %1042 = load i64, i64* %RBP, align 8
  %1043 = add i64 %1042, -24
  %1044 = add i64 %1020, 15
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1043 to i64*
  store i64 %1023, i64* %1045, align 8
  %1046 = load i64, i64* %RBP, align 8
  %1047 = add i64 %1046, -32
  %1048 = load i64, i64* %RCX, align 8
  %1049 = load i64, i64* %PC, align 8
  %1050 = add i64 %1049, 4
  store i64 %1050, i64* %PC, align 8
  %1051 = inttoptr i64 %1047 to i64*
  store i64 %1048, i64* %1051, align 8
  %1052 = load i64, i64* %PC, align 8
  %1053 = load i8, i8* %12, align 1, !tbaa !2432
  %1054 = load i8, i8* %28, align 1, !tbaa !2448
  %1055 = or i8 %1054, %1053
  %1056 = icmp eq i8 %1055, 0
  %.v = select i1 %1056, i64 1589, i64 6
  %1057 = add i64 %1052, %.v
  store i64 %1057, i64* %PC, align 8, !tbaa !2428
  br i1 %1056, label %block_400b7a, label %block_40054b

block_400922:                                     ; preds = %block_400566
  %1058 = add i64 %720, -12
  store i64 4196649, i64* %PC, align 8
  %1059 = inttoptr i64 %1058 to i32*
  store i32 20, i32* %1059, align 4
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_400929

block_40069f:                                     ; preds = %block_400698, %block_40054b
  %1060 = phi i64 [ %.pre47, %block_400698 ], [ 4195999, %block_40054b ]
  %1061 = phi i64 [ %.pre46, %block_400698 ], [ %619, %block_40054b ]
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.15, %block_400698 ], [ %2, %block_40054b ]
  %1062 = add i64 %1061, -12
  %1063 = add i64 %1060, 3
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1062 to i32*
  %1065 = load i32, i32* %1064, align 4
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RDI, align 8, !tbaa !2428
  %1067 = add i64 %1060, -431
  %1068 = add i64 %1060, 8
  %1069 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1070 = add i64 %1069, -8
  %1071 = inttoptr i64 %1070 to i64*
  store i64 %1068, i64* %1071, align 8
  store i64 %1070, i64* %RSP, align 8, !tbaa !2428
  store i64 %1067, i64* %PC, align 8, !tbaa !2428
  %1072 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1067, %struct.Memory* %MEMORY.23)
  %1073 = load i64, i64* %RBP, align 8
  %1074 = add i64 %1073, -8
  %1075 = load i64, i64* %PC, align 8
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1074 to i64*
  %1078 = load i64, i64* %1077, align 8
  store i64 %1078, i64* %RAX, align 8, !tbaa !2428
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %RCX, align 8, !tbaa !2428
  %1080 = icmp ugt i64 %1078, -5
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %12, align 1, !tbaa !2432
  %1082 = trunc i64 %1079 to i32
  %1083 = and i32 %1082, 255
  %1084 = tail call i32 @llvm.ctpop.i32(i32 %1083) #8
  %1085 = trunc i32 %1084 to i8
  %1086 = and i8 %1085, 1
  %1087 = xor i8 %1086, 1
  store i8 %1087, i8* %19, align 1, !tbaa !2446
  %1088 = xor i64 %1078, %1079
  %1089 = lshr i64 %1088, 4
  %1090 = trunc i64 %1089 to i8
  %1091 = and i8 %1090, 1
  store i8 %1091, i8* %25, align 1, !tbaa !2447
  %1092 = icmp eq i64 %1079, 0
  %1093 = zext i1 %1092 to i8
  store i8 %1093, i8* %28, align 1, !tbaa !2448
  %1094 = lshr i64 %1079, 63
  %1095 = trunc i64 %1094 to i8
  store i8 %1095, i8* %31, align 1, !tbaa !2449
  %1096 = lshr i64 %1078, 63
  %1097 = xor i64 %1094, %1096
  %1098 = add nuw nsw i64 %1097, %1094
  %1099 = icmp eq i64 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %37, align 1, !tbaa !2450
  %1101 = add i64 %1075, 15
  store i64 %1101, i64* %PC, align 8
  store i64 %1079, i64* %1077, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %1102 = add i64 %720, -12
  store i64 4195949, i64* %PC, align 8
  %1103 = inttoptr i64 %1102 to i32*
  store i32 6, i32* %1103, align 4
  %.pre35 = load i64, i64* %RBP, align 8
  %.pre36 = load i64, i64* %PC, align 8
  br label %block_40066d

block_400b1d:                                     ; preds = %block_400b16, %block_40054b
  %1104 = phi i64 [ %.pre49, %block_400b16 ], [ 4197149, %block_40054b ]
  %1105 = phi i64 [ %.pre48, %block_400b16 ], [ %619, %block_40054b ]
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.15, %block_400b16 ], [ %2, %block_40054b ]
  %1106 = add i64 %1105, -12
  %1107 = add i64 %1104, 3
  store i64 %1107, i64* %PC, align 8
  %1108 = inttoptr i64 %1106 to i32*
  %1109 = load i32, i32* %1108, align 4
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RDI, align 8, !tbaa !2428
  %1111 = add i64 %1104, -1581
  %1112 = add i64 %1104, 8
  %1113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1114 = add i64 %1113, -8
  %1115 = inttoptr i64 %1114 to i64*
  store i64 %1112, i64* %1115, align 8
  store i64 %1114, i64* %RSP, align 8, !tbaa !2428
  store i64 %1111, i64* %PC, align 8, !tbaa !2428
  %1116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1111, %struct.Memory* %MEMORY.24)
  %1117 = load i64, i64* %RBP, align 8
  %1118 = add i64 %1117, -8
  %1119 = load i64, i64* %PC, align 8
  %1120 = add i64 %1119, 4
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1118 to i64*
  %1122 = load i64, i64* %1121, align 8
  store i64 %1122, i64* %RAX, align 8, !tbaa !2428
  %1123 = add i64 %1122, 4
  store i64 %1123, i64* %RCX, align 8, !tbaa !2428
  %1124 = icmp ugt i64 %1122, -5
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %12, align 1, !tbaa !2432
  %1126 = trunc i64 %1123 to i32
  %1127 = and i32 %1126, 255
  %1128 = tail call i32 @llvm.ctpop.i32(i32 %1127) #8
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  %1131 = xor i8 %1130, 1
  store i8 %1131, i8* %19, align 1, !tbaa !2446
  %1132 = xor i64 %1122, %1123
  %1133 = lshr i64 %1132, 4
  %1134 = trunc i64 %1133 to i8
  %1135 = and i8 %1134, 1
  store i8 %1135, i8* %25, align 1, !tbaa !2447
  %1136 = icmp eq i64 %1123, 0
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %28, align 1, !tbaa !2448
  %1138 = lshr i64 %1123, 63
  %1139 = trunc i64 %1138 to i8
  store i8 %1139, i8* %31, align 1, !tbaa !2449
  %1140 = lshr i64 %1122, 63
  %1141 = xor i64 %1138, %1140
  %1142 = add nuw nsw i64 %1141, %1138
  %1143 = icmp eq i64 %1142, 2
  %1144 = zext i1 %1143 to i8
  store i8 %1144, i8* %37, align 1, !tbaa !2450
  %1145 = add i64 %1119, 15
  store i64 %1145, i64* %PC, align 8
  store i64 %1123, i64* %1121, align 8
  br label %block_400566

block_400b7f:                                     ; preds = %block_400566
  store i64 4197248, i64* %PC, align 8
  %1146 = tail call %struct.Memory* @sub_400b80_main(%struct.State* nonnull %0, i64 4197248, %struct.Memory* %MEMORY.15)
  ret %struct.Memory* %1146

block_400a1c:                                     ; preds = %block_400566
  %1147 = add i64 %720, -12
  store i64 4196899, i64* %PC, align 8
  %1148 = inttoptr i64 %1147 to i32*
  store i32 25, i32* %1148, align 4
  %.pre3 = load i64, i64* %RBP, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_400a23

block_400799:                                     ; preds = %block_400792, %block_40054b
  %1149 = phi i64 [ %.pre51, %block_400792 ], [ 4196249, %block_40054b ]
  %1150 = phi i64 [ %.pre50, %block_400792 ], [ %619, %block_40054b ]
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.15, %block_400792 ], [ %2, %block_40054b ]
  %1151 = add i64 %1150, -12
  %1152 = add i64 %1149, 3
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1151 to i32*
  %1154 = load i32, i32* %1153, align 4
  %1155 = zext i32 %1154 to i64
  store i64 %1155, i64* %RDI, align 8, !tbaa !2428
  %1156 = add i64 %1149, -681
  %1157 = add i64 %1149, 8
  %1158 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1159 = add i64 %1158, -8
  %1160 = inttoptr i64 %1159 to i64*
  store i64 %1157, i64* %1160, align 8
  store i64 %1159, i64* %RSP, align 8, !tbaa !2428
  store i64 %1156, i64* %PC, align 8, !tbaa !2428
  %1161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1156, %struct.Memory* %MEMORY.25)
  %1162 = load i64, i64* %RBP, align 8
  %1163 = add i64 %1162, -8
  %1164 = load i64, i64* %PC, align 8
  %1165 = add i64 %1164, 4
  store i64 %1165, i64* %PC, align 8
  %1166 = inttoptr i64 %1163 to i64*
  %1167 = load i64, i64* %1166, align 8
  store i64 %1167, i64* %RAX, align 8, !tbaa !2428
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %RCX, align 8, !tbaa !2428
  %1169 = icmp ugt i64 %1167, -5
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %12, align 1, !tbaa !2432
  %1171 = trunc i64 %1168 to i32
  %1172 = and i32 %1171, 255
  %1173 = tail call i32 @llvm.ctpop.i32(i32 %1172) #8
  %1174 = trunc i32 %1173 to i8
  %1175 = and i8 %1174, 1
  %1176 = xor i8 %1175, 1
  store i8 %1176, i8* %19, align 1, !tbaa !2446
  %1177 = xor i64 %1167, %1168
  %1178 = lshr i64 %1177, 4
  %1179 = trunc i64 %1178 to i8
  %1180 = and i8 %1179, 1
  store i8 %1180, i8* %25, align 1, !tbaa !2447
  %1181 = icmp eq i64 %1168, 0
  %1182 = zext i1 %1181 to i8
  store i8 %1182, i8* %28, align 1, !tbaa !2448
  %1183 = lshr i64 %1168, 63
  %1184 = trunc i64 %1183 to i8
  store i8 %1184, i8* %31, align 1, !tbaa !2449
  %1185 = lshr i64 %1167, 63
  %1186 = xor i64 %1183, %1185
  %1187 = add nuw nsw i64 %1186, %1183
  %1188 = icmp eq i64 %1187, 2
  %1189 = zext i1 %1188 to i8
  store i8 %1189, i8* %37, align 1, !tbaa !2450
  %1190 = add i64 %1164, 15
  store i64 %1190, i64* %PC, align 8
  store i64 %1168, i64* %1166, align 8
  br label %block_400566

block_400b4f:                                     ; preds = %block_40054b, %block_400b48
  %1191 = phi i64 [ %.pre24, %block_400b48 ], [ 4197199, %block_40054b ]
  %1192 = phi i64 [ %.pre23, %block_400b48 ], [ %619, %block_40054b ]
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.15, %block_400b48 ], [ %2, %block_40054b ]
  %1193 = add i64 %1192, -12
  %1194 = add i64 %1191, 3
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to i32*
  %1196 = load i32, i32* %1195, align 4
  %1197 = zext i32 %1196 to i64
  store i64 %1197, i64* %RDI, align 8, !tbaa !2428
  %1198 = add i64 %1191, -1631
  %1199 = add i64 %1191, 8
  %1200 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1201 = add i64 %1200, -8
  %1202 = inttoptr i64 %1201 to i64*
  store i64 %1199, i64* %1202, align 8
  store i64 %1201, i64* %RSP, align 8, !tbaa !2428
  store i64 %1198, i64* %PC, align 8, !tbaa !2428
  %1203 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1198, %struct.Memory* %MEMORY.26)
  %1204 = load i64, i64* %RBP, align 8
  %1205 = add i64 %1204, -8
  %1206 = load i64, i64* %PC, align 8
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC, align 8
  %1208 = inttoptr i64 %1205 to i64*
  %1209 = load i64, i64* %1208, align 8
  store i64 %1209, i64* %RAX, align 8, !tbaa !2428
  %1210 = add i64 %1209, 4
  store i64 %1210, i64* %RCX, align 8, !tbaa !2428
  %1211 = icmp ugt i64 %1209, -5
  %1212 = zext i1 %1211 to i8
  store i8 %1212, i8* %12, align 1, !tbaa !2432
  %1213 = trunc i64 %1210 to i32
  %1214 = and i32 %1213, 255
  %1215 = tail call i32 @llvm.ctpop.i32(i32 %1214) #8
  %1216 = trunc i32 %1215 to i8
  %1217 = and i8 %1216, 1
  %1218 = xor i8 %1217, 1
  store i8 %1218, i8* %19, align 1, !tbaa !2446
  %1219 = xor i64 %1209, %1210
  %1220 = lshr i64 %1219, 4
  %1221 = trunc i64 %1220 to i8
  %1222 = and i8 %1221, 1
  store i8 %1222, i8* %25, align 1, !tbaa !2447
  %1223 = icmp eq i64 %1210, 0
  %1224 = zext i1 %1223 to i8
  store i8 %1224, i8* %28, align 1, !tbaa !2448
  %1225 = lshr i64 %1210, 63
  %1226 = trunc i64 %1225 to i8
  store i8 %1226, i8* %31, align 1, !tbaa !2449
  %1227 = lshr i64 %1209, 63
  %1228 = xor i64 %1225, %1227
  %1229 = add nuw nsw i64 %1228, %1225
  %1230 = icmp eq i64 %1229, 2
  %1231 = zext i1 %1230 to i8
  store i8 %1231, i8* %37, align 1, !tbaa !2450
  %1232 = add i64 %1206, 15
  store i64 %1232, i64* %PC, align 8
  store i64 %1210, i64* %1208, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1233 = add i64 %720, -12
  store i64 4195999, i64* %PC, align 8
  %1234 = inttoptr i64 %1233 to i32*
  store i32 7, i32* %1234, align 4
  %.pre46 = load i64, i64* %RBP, align 8
  %.pre47 = load i64, i64* %PC, align 8
  br label %block_40069f

block_400b16:                                     ; preds = %block_400566
  %1235 = add i64 %720, -12
  store i64 4197149, i64* %PC, align 8
  %1236 = inttoptr i64 %1235 to i32*
  store i32 30, i32* %1236, align 4
  %.pre48 = load i64, i64* %RBP, align 8
  %.pre49 = load i64, i64* %PC, align 8
  br label %block_400b1d

block_400893:                                     ; preds = %block_40088c, %block_40054b
  %1237 = phi i64 [ %.pre55, %block_40088c ], [ 4196499, %block_40054b ]
  %1238 = phi i64 [ %.pre54, %block_40088c ], [ %619, %block_40054b ]
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.15, %block_40088c ], [ %2, %block_40054b ]
  %1239 = add i64 %1238, -12
  %1240 = add i64 %1237, 3
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i32*
  %1242 = load i32, i32* %1241, align 4
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RDI, align 8, !tbaa !2428
  %1244 = add i64 %1237, -931
  %1245 = add i64 %1237, 8
  %1246 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1247 = add i64 %1246, -8
  %1248 = inttoptr i64 %1247 to i64*
  store i64 %1245, i64* %1248, align 8
  store i64 %1247, i64* %RSP, align 8, !tbaa !2428
  store i64 %1244, i64* %PC, align 8, !tbaa !2428
  %1249 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1244, %struct.Memory* %MEMORY.27)
  %1250 = load i64, i64* %RBP, align 8
  %1251 = add i64 %1250, -8
  %1252 = load i64, i64* %PC, align 8
  %1253 = add i64 %1252, 4
  store i64 %1253, i64* %PC, align 8
  %1254 = inttoptr i64 %1251 to i64*
  %1255 = load i64, i64* %1254, align 8
  store i64 %1255, i64* %RAX, align 8, !tbaa !2428
  %1256 = add i64 %1255, 4
  store i64 %1256, i64* %RCX, align 8, !tbaa !2428
  %1257 = icmp ugt i64 %1255, -5
  %1258 = zext i1 %1257 to i8
  store i8 %1258, i8* %12, align 1, !tbaa !2432
  %1259 = trunc i64 %1256 to i32
  %1260 = and i32 %1259, 255
  %1261 = tail call i32 @llvm.ctpop.i32(i32 %1260) #8
  %1262 = trunc i32 %1261 to i8
  %1263 = and i8 %1262, 1
  %1264 = xor i8 %1263, 1
  store i8 %1264, i8* %19, align 1, !tbaa !2446
  %1265 = xor i64 %1255, %1256
  %1266 = lshr i64 %1265, 4
  %1267 = trunc i64 %1266 to i8
  %1268 = and i8 %1267, 1
  store i8 %1268, i8* %25, align 1, !tbaa !2447
  %1269 = icmp eq i64 %1256, 0
  %1270 = zext i1 %1269 to i8
  store i8 %1270, i8* %28, align 1, !tbaa !2448
  %1271 = lshr i64 %1256, 63
  %1272 = trunc i64 %1271 to i8
  store i8 %1272, i8* %31, align 1, !tbaa !2449
  %1273 = lshr i64 %1255, 63
  %1274 = xor i64 %1271, %1273
  %1275 = add nuw nsw i64 %1274, %1271
  %1276 = icmp eq i64 %1275, 2
  %1277 = zext i1 %1276 to i8
  store i8 %1277, i8* %37, align 1, !tbaa !2450
  %1278 = add i64 %1252, 15
  store i64 %1278, i64* %PC, align 8
  store i64 %1256, i64* %1254, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1279 = add i64 %720, -12
  store i64 4196249, i64* %PC, align 8
  %1280 = inttoptr i64 %1279 to i32*
  store i32 12, i32* %1280, align 4
  %.pre50 = load i64, i64* %RBP, align 8
  %.pre51 = load i64, i64* %PC, align 8
  br label %block_400799

block_400a55:                                     ; preds = %block_40054b, %block_400a4e
  %1281 = phi i64 [ %.pre44, %block_400a4e ], [ 4196949, %block_40054b ]
  %1282 = phi i64 [ %.pre43, %block_400a4e ], [ %619, %block_40054b ]
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.15, %block_400a4e ], [ %2, %block_40054b ]
  %1283 = add i64 %1282, -12
  %1284 = add i64 %1281, 3
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to i32*
  %1286 = load i32, i32* %1285, align 4
  %1287 = zext i32 %1286 to i64
  store i64 %1287, i64* %RDI, align 8, !tbaa !2428
  %1288 = add i64 %1281, -1381
  %1289 = add i64 %1281, 8
  %1290 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1291 = add i64 %1290, -8
  %1292 = inttoptr i64 %1291 to i64*
  store i64 %1289, i64* %1292, align 8
  store i64 %1291, i64* %RSP, align 8, !tbaa !2428
  store i64 %1288, i64* %PC, align 8, !tbaa !2428
  %1293 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1288, %struct.Memory* %MEMORY.28)
  %1294 = load i64, i64* %RBP, align 8
  %1295 = add i64 %1294, -8
  %1296 = load i64, i64* %PC, align 8
  %1297 = add i64 %1296, 4
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1295 to i64*
  %1299 = load i64, i64* %1298, align 8
  store i64 %1299, i64* %RAX, align 8, !tbaa !2428
  %1300 = add i64 %1299, 4
  store i64 %1300, i64* %RCX, align 8, !tbaa !2428
  %1301 = icmp ugt i64 %1299, -5
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %12, align 1, !tbaa !2432
  %1303 = trunc i64 %1300 to i32
  %1304 = and i32 %1303, 255
  %1305 = tail call i32 @llvm.ctpop.i32(i32 %1304) #8
  %1306 = trunc i32 %1305 to i8
  %1307 = and i8 %1306, 1
  %1308 = xor i8 %1307, 1
  store i8 %1308, i8* %19, align 1, !tbaa !2446
  %1309 = xor i64 %1299, %1300
  %1310 = lshr i64 %1309, 4
  %1311 = trunc i64 %1310 to i8
  %1312 = and i8 %1311, 1
  store i8 %1312, i8* %25, align 1, !tbaa !2447
  %1313 = icmp eq i64 %1300, 0
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %28, align 1, !tbaa !2448
  %1315 = lshr i64 %1300, 63
  %1316 = trunc i64 %1315 to i8
  store i8 %1316, i8* %31, align 1, !tbaa !2449
  %1317 = lshr i64 %1299, 63
  %1318 = xor i64 %1315, %1317
  %1319 = add nuw nsw i64 %1318, %1315
  %1320 = icmp eq i64 %1319, 2
  %1321 = zext i1 %1320 to i8
  store i8 %1321, i8* %37, align 1, !tbaa !2450
  %1322 = add i64 %1296, 15
  store i64 %1322, i64* %PC, align 8
  store i64 %1300, i64* %1298, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1323 = add i64 %720, -12
  store i64 4195749, i64* %PC, align 8
  %1324 = inttoptr i64 %1323 to i32*
  store i32 2, i32* %1324, align 4
  %.pre52 = load i64, i64* %RBP, align 8
  %.pre53 = load i64, i64* %PC, align 8
  br label %block_4005a5

block_40098d:                                     ; preds = %block_400986, %block_40054b
  %1325 = phi i64 [ %.pre59, %block_400986 ], [ 4196749, %block_40054b ]
  %1326 = phi i64 [ %.pre58, %block_400986 ], [ %619, %block_40054b ]
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.15, %block_400986 ], [ %2, %block_40054b ]
  %1327 = add i64 %1326, -12
  %1328 = add i64 %1325, 3
  store i64 %1328, i64* %PC, align 8
  %1329 = inttoptr i64 %1327 to i32*
  %1330 = load i32, i32* %1329, align 4
  %1331 = zext i32 %1330 to i64
  store i64 %1331, i64* %RDI, align 8, !tbaa !2428
  %1332 = add i64 %1325, -1181
  %1333 = add i64 %1325, 8
  %1334 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1335 = add i64 %1334, -8
  %1336 = inttoptr i64 %1335 to i64*
  store i64 %1333, i64* %1336, align 8
  store i64 %1335, i64* %RSP, align 8, !tbaa !2428
  store i64 %1332, i64* %PC, align 8, !tbaa !2428
  %1337 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1332, %struct.Memory* %MEMORY.29)
  %1338 = load i64, i64* %RBP, align 8
  %1339 = add i64 %1338, -8
  %1340 = load i64, i64* %PC, align 8
  %1341 = add i64 %1340, 4
  store i64 %1341, i64* %PC, align 8
  %1342 = inttoptr i64 %1339 to i64*
  %1343 = load i64, i64* %1342, align 8
  store i64 %1343, i64* %RAX, align 8, !tbaa !2428
  %1344 = add i64 %1343, 4
  store i64 %1344, i64* %RCX, align 8, !tbaa !2428
  %1345 = icmp ugt i64 %1343, -5
  %1346 = zext i1 %1345 to i8
  store i8 %1346, i8* %12, align 1, !tbaa !2432
  %1347 = trunc i64 %1344 to i32
  %1348 = and i32 %1347, 255
  %1349 = tail call i32 @llvm.ctpop.i32(i32 %1348) #8
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  %1352 = xor i8 %1351, 1
  store i8 %1352, i8* %19, align 1, !tbaa !2446
  %1353 = xor i64 %1343, %1344
  %1354 = lshr i64 %1353, 4
  %1355 = trunc i64 %1354 to i8
  %1356 = and i8 %1355, 1
  store i8 %1356, i8* %25, align 1, !tbaa !2447
  %1357 = icmp eq i64 %1344, 0
  %1358 = zext i1 %1357 to i8
  store i8 %1358, i8* %28, align 1, !tbaa !2448
  %1359 = lshr i64 %1344, 63
  %1360 = trunc i64 %1359 to i8
  store i8 %1360, i8* %31, align 1, !tbaa !2449
  %1361 = lshr i64 %1343, 63
  %1362 = xor i64 %1359, %1361
  %1363 = add nuw nsw i64 %1362, %1359
  %1364 = icmp eq i64 %1363, 2
  %1365 = zext i1 %1364 to i8
  store i8 %1365, i8* %37, align 1, !tbaa !2450
  %1366 = add i64 %1340, 15
  store i64 %1366, i64* %PC, align 8
  store i64 %1344, i64* %1342, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1367 = add i64 %720, -12
  store i64 4196499, i64* %PC, align 8
  %1368 = inttoptr i64 %1367 to i32*
  store i32 17, i32* %1368, align 4
  %.pre54 = load i64, i64* %RBP, align 8
  %.pre55 = load i64, i64* %PC, align 8
  br label %block_400893

block_400609:                                     ; preds = %block_400602, %block_40054b
  %1369 = phi i64 [ %.pre61, %block_400602 ], [ 4195849, %block_40054b ]
  %1370 = phi i64 [ %.pre60, %block_400602 ], [ %619, %block_40054b ]
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.15, %block_400602 ], [ %2, %block_40054b ]
  %1371 = add i64 %1370, -12
  %1372 = add i64 %1369, 3
  store i64 %1372, i64* %PC, align 8
  %1373 = inttoptr i64 %1371 to i32*
  %1374 = load i32, i32* %1373, align 4
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = add i64 %1369, -281
  %1377 = add i64 %1369, 8
  %1378 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1379 = add i64 %1378, -8
  %1380 = inttoptr i64 %1379 to i64*
  store i64 %1377, i64* %1380, align 8
  store i64 %1379, i64* %RSP, align 8, !tbaa !2428
  store i64 %1376, i64* %PC, align 8, !tbaa !2428
  %1381 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1376, %struct.Memory* %MEMORY.30)
  %1382 = load i64, i64* %RBP, align 8
  %1383 = add i64 %1382, -8
  %1384 = load i64, i64* %PC, align 8
  %1385 = add i64 %1384, 4
  store i64 %1385, i64* %PC, align 8
  %1386 = inttoptr i64 %1383 to i64*
  %1387 = load i64, i64* %1386, align 8
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1388 = add i64 %1387, 4
  store i64 %1388, i64* %RCX, align 8, !tbaa !2428
  %1389 = icmp ugt i64 %1387, -5
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %12, align 1, !tbaa !2432
  %1391 = trunc i64 %1388 to i32
  %1392 = and i32 %1391, 255
  %1393 = tail call i32 @llvm.ctpop.i32(i32 %1392) #8
  %1394 = trunc i32 %1393 to i8
  %1395 = and i8 %1394, 1
  %1396 = xor i8 %1395, 1
  store i8 %1396, i8* %19, align 1, !tbaa !2446
  %1397 = xor i64 %1387, %1388
  %1398 = lshr i64 %1397, 4
  %1399 = trunc i64 %1398 to i8
  %1400 = and i8 %1399, 1
  store i8 %1400, i8* %25, align 1, !tbaa !2447
  %1401 = icmp eq i64 %1388, 0
  %1402 = zext i1 %1401 to i8
  store i8 %1402, i8* %28, align 1, !tbaa !2448
  %1403 = lshr i64 %1388, 63
  %1404 = trunc i64 %1403 to i8
  store i8 %1404, i8* %31, align 1, !tbaa !2449
  %1405 = lshr i64 %1387, 63
  %1406 = xor i64 %1403, %1405
  %1407 = add nuw nsw i64 %1406, %1403
  %1408 = icmp eq i64 %1407, 2
  %1409 = zext i1 %1408 to i8
  store i8 %1409, i8* %37, align 1, !tbaa !2450
  %1410 = add i64 %1384, 15
  store i64 %1410, i64* %PC, align 8
  store i64 %1388, i64* %1386, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1411 = add i64 %720, -12
  store i64 4195799, i64* %PC, align 8
  %1412 = inttoptr i64 %1411 to i32*
  store i32 3, i32* %1412, align 4
  %.pre56 = load i64, i64* %RBP, align 8
  %.pre57 = load i64, i64* %PC, align 8
  br label %block_4005d7

block_400a87:                                     ; preds = %block_400a80, %block_40054b
  %1413 = phi i64 [ %.pre63, %block_400a80 ], [ 4196999, %block_40054b ]
  %1414 = phi i64 [ %.pre62, %block_400a80 ], [ %619, %block_40054b ]
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.15, %block_400a80 ], [ %2, %block_40054b ]
  %1415 = add i64 %1414, -12
  %1416 = add i64 %1413, 3
  store i64 %1416, i64* %PC, align 8
  %1417 = inttoptr i64 %1415 to i32*
  %1418 = load i32, i32* %1417, align 4
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = add i64 %1413, -1431
  %1421 = add i64 %1413, 8
  %1422 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1423 = add i64 %1422, -8
  %1424 = inttoptr i64 %1423 to i64*
  store i64 %1421, i64* %1424, align 8
  store i64 %1423, i64* %RSP, align 8, !tbaa !2428
  store i64 %1420, i64* %PC, align 8, !tbaa !2428
  %1425 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1420, %struct.Memory* %MEMORY.31)
  %1426 = load i64, i64* %RBP, align 8
  %1427 = add i64 %1426, -8
  %1428 = load i64, i64* %PC, align 8
  %1429 = add i64 %1428, 4
  store i64 %1429, i64* %PC, align 8
  %1430 = inttoptr i64 %1427 to i64*
  %1431 = load i64, i64* %1430, align 8
  store i64 %1431, i64* %RAX, align 8, !tbaa !2428
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %RCX, align 8, !tbaa !2428
  %1433 = icmp ugt i64 %1431, -5
  %1434 = zext i1 %1433 to i8
  store i8 %1434, i8* %12, align 1, !tbaa !2432
  %1435 = trunc i64 %1432 to i32
  %1436 = and i32 %1435, 255
  %1437 = tail call i32 @llvm.ctpop.i32(i32 %1436) #8
  %1438 = trunc i32 %1437 to i8
  %1439 = and i8 %1438, 1
  %1440 = xor i8 %1439, 1
  store i8 %1440, i8* %19, align 1, !tbaa !2446
  %1441 = xor i64 %1431, %1432
  %1442 = lshr i64 %1441, 4
  %1443 = trunc i64 %1442 to i8
  %1444 = and i8 %1443, 1
  store i8 %1444, i8* %25, align 1, !tbaa !2447
  %1445 = icmp eq i64 %1432, 0
  %1446 = zext i1 %1445 to i8
  store i8 %1446, i8* %28, align 1, !tbaa !2448
  %1447 = lshr i64 %1432, 63
  %1448 = trunc i64 %1447 to i8
  store i8 %1448, i8* %31, align 1, !tbaa !2449
  %1449 = lshr i64 %1431, 63
  %1450 = xor i64 %1447, %1449
  %1451 = add nuw nsw i64 %1450, %1447
  %1452 = icmp eq i64 %1451, 2
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %37, align 1, !tbaa !2450
  %1454 = add i64 %1428, 15
  store i64 %1454, i64* %PC, align 8
  store i64 %1432, i64* %1430, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1455 = add i64 %720, -12
  store i64 4196749, i64* %PC, align 8
  %1456 = inttoptr i64 %1455 to i32*
  store i32 22, i32* %1456, align 4
  %.pre58 = load i64, i64* %RBP, align 8
  %.pre59 = load i64, i64* %PC, align 8
  br label %block_40098d

block_400559:                                     ; preds = %block_400566
  %1457 = add i64 %720, -12
  store i64 4195680, i64* %PC, align 8
  %1458 = inttoptr i64 %1457 to i32*
  store i32 0, i32* %1458, align 4
  %.pre45 = load i64, i64* %PC, align 8
  %phitmp79 = add i64 %.pre45, 5
  br label %block_400560

block_400703:                                     ; preds = %block_40054b, %block_4006fc
  %1459 = phi i64 [ %.pre34, %block_4006fc ], [ 4196099, %block_40054b ]
  %1460 = phi i64 [ %.pre33, %block_4006fc ], [ %619, %block_40054b ]
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.15, %block_4006fc ], [ %2, %block_40054b ]
  %1461 = add i64 %1460, -12
  %1462 = add i64 %1459, 3
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1461 to i32*
  %1464 = load i32, i32* %1463, align 4
  %1465 = zext i32 %1464 to i64
  store i64 %1465, i64* %RDI, align 8, !tbaa !2428
  %1466 = add i64 %1459, -531
  %1467 = add i64 %1459, 8
  %1468 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1469 = add i64 %1468, -8
  %1470 = inttoptr i64 %1469 to i64*
  store i64 %1467, i64* %1470, align 8
  store i64 %1469, i64* %RSP, align 8, !tbaa !2428
  store i64 %1466, i64* %PC, align 8, !tbaa !2428
  %1471 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1466, %struct.Memory* %MEMORY.32)
  %1472 = load i64, i64* %RBP, align 8
  %1473 = add i64 %1472, -8
  %1474 = load i64, i64* %PC, align 8
  %1475 = add i64 %1474, 4
  store i64 %1475, i64* %PC, align 8
  %1476 = inttoptr i64 %1473 to i64*
  %1477 = load i64, i64* %1476, align 8
  store i64 %1477, i64* %RAX, align 8, !tbaa !2428
  %1478 = add i64 %1477, 4
  store i64 %1478, i64* %RCX, align 8, !tbaa !2428
  %1479 = icmp ugt i64 %1477, -5
  %1480 = zext i1 %1479 to i8
  store i8 %1480, i8* %12, align 1, !tbaa !2432
  %1481 = trunc i64 %1478 to i32
  %1482 = and i32 %1481, 255
  %1483 = tail call i32 @llvm.ctpop.i32(i32 %1482) #8
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = xor i8 %1485, 1
  store i8 %1486, i8* %19, align 1, !tbaa !2446
  %1487 = xor i64 %1477, %1478
  %1488 = lshr i64 %1487, 4
  %1489 = trunc i64 %1488 to i8
  %1490 = and i8 %1489, 1
  store i8 %1490, i8* %25, align 1, !tbaa !2447
  %1491 = icmp eq i64 %1478, 0
  %1492 = zext i1 %1491 to i8
  store i8 %1492, i8* %28, align 1, !tbaa !2448
  %1493 = lshr i64 %1478, 63
  %1494 = trunc i64 %1493 to i8
  store i8 %1494, i8* %31, align 1, !tbaa !2449
  %1495 = lshr i64 %1477, 63
  %1496 = xor i64 %1493, %1495
  %1497 = add nuw nsw i64 %1496, %1493
  %1498 = icmp eq i64 %1497, 2
  %1499 = zext i1 %1498 to i8
  store i8 %1499, i8* %37, align 1, !tbaa !2450
  %1500 = add i64 %1474, 15
  store i64 %1500, i64* %PC, align 8
  store i64 %1478, i64* %1476, align 8
  br label %block_400566

block_400ab9:                                     ; preds = %block_400ab2, %block_40054b
  %1501 = phi i64 [ %.pre14, %block_400ab2 ], [ 4197049, %block_40054b ]
  %1502 = phi i64 [ %.pre13, %block_400ab2 ], [ %619, %block_40054b ]
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.15, %block_400ab2 ], [ %2, %block_40054b ]
  %1503 = add i64 %1502, -12
  %1504 = add i64 %1501, 3
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i32*
  %1506 = load i32, i32* %1505, align 4
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %RDI, align 8, !tbaa !2428
  %1508 = add i64 %1501, -1481
  %1509 = add i64 %1501, 8
  %1510 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1511 = add i64 %1510, -8
  %1512 = inttoptr i64 %1511 to i64*
  store i64 %1509, i64* %1512, align 8
  store i64 %1511, i64* %RSP, align 8, !tbaa !2428
  store i64 %1508, i64* %PC, align 8, !tbaa !2428
  %1513 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1508, %struct.Memory* %MEMORY.33)
  %1514 = load i64, i64* %RBP, align 8
  %1515 = add i64 %1514, -8
  %1516 = load i64, i64* %PC, align 8
  %1517 = add i64 %1516, 4
  store i64 %1517, i64* %PC, align 8
  %1518 = inttoptr i64 %1515 to i64*
  %1519 = load i64, i64* %1518, align 8
  store i64 %1519, i64* %RAX, align 8, !tbaa !2428
  %1520 = add i64 %1519, 4
  store i64 %1520, i64* %RCX, align 8, !tbaa !2428
  %1521 = icmp ugt i64 %1519, -5
  %1522 = zext i1 %1521 to i8
  store i8 %1522, i8* %12, align 1, !tbaa !2432
  %1523 = trunc i64 %1520 to i32
  %1524 = and i32 %1523, 255
  %1525 = tail call i32 @llvm.ctpop.i32(i32 %1524) #8
  %1526 = trunc i32 %1525 to i8
  %1527 = and i8 %1526, 1
  %1528 = xor i8 %1527, 1
  store i8 %1528, i8* %19, align 1, !tbaa !2446
  %1529 = xor i64 %1519, %1520
  %1530 = lshr i64 %1529, 4
  %1531 = trunc i64 %1530 to i8
  %1532 = and i8 %1531, 1
  store i8 %1532, i8* %25, align 1, !tbaa !2447
  %1533 = icmp eq i64 %1520, 0
  %1534 = zext i1 %1533 to i8
  store i8 %1534, i8* %28, align 1, !tbaa !2448
  %1535 = lshr i64 %1520, 63
  %1536 = trunc i64 %1535 to i8
  store i8 %1536, i8* %31, align 1, !tbaa !2449
  %1537 = lshr i64 %1519, 63
  %1538 = xor i64 %1535, %1537
  %1539 = add nuw nsw i64 %1538, %1535
  %1540 = icmp eq i64 %1539, 2
  %1541 = zext i1 %1540 to i8
  store i8 %1541, i8* %37, align 1, !tbaa !2450
  %1542 = add i64 %1516, 15
  store i64 %1542, i64* %PC, align 8
  store i64 %1520, i64* %1518, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1543 = add i64 %720, -12
  store i64 4195849, i64* %PC, align 8
  %1544 = inttoptr i64 %1543 to i32*
  store i32 4, i32* %1544, align 4
  %.pre60 = load i64, i64* %RBP, align 8
  %.pre61 = load i64, i64* %PC, align 8
  br label %block_400609

block_400a80:                                     ; preds = %block_400566
  %1545 = add i64 %720, -12
  store i64 4196999, i64* %PC, align 8
  %1546 = inttoptr i64 %1545 to i32*
  store i32 27, i32* %1546, align 4
  %.pre62 = load i64, i64* %RBP, align 8
  %.pre63 = load i64, i64* %PC, align 8
  br label %block_400a87

; <label>:1547:                                   ; preds = %block_40054b
  %1548 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %628, %struct.Memory* %2)
  ret %struct.Memory* %1548

; <label>:1549:                                   ; preds = %block_400566
  %1550 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %724, %struct.Memory* %MEMORY.15)
  ret %struct.Memory* %1550
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b1d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400b1d

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_400b1d
  %.sink19 = phi i64 [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1501, %block_400b1d ]
  %MEMORY.0 = phi %struct.Memory* [ %859, %block_400698 ], [ %815, %block_400a1c ], [ %725, %block_40059e ], [ %681, %block_400922 ], [ %637, %block_400828 ], [ %593, %block_40072e ], [ %549, %block_400ab2 ], [ %505, %block_400634 ], [ %461, %block_4009b8 ], [ %417, %block_40056c ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %771, %block_400b1d ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink19
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %911 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RSP, align 8
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %346, 48
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %349 = icmp ugt i64 %346, -49
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %4, align 1, !tbaa !2432
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %5, align 1, !tbaa !2446
  %357 = xor i64 %346, 16
  %358 = xor i64 %357, %348
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %6, align 1, !tbaa !2447
  %362 = icmp eq i64 %348, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %7, align 1, !tbaa !2448
  %364 = lshr i64 %348, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %8, align 1, !tbaa !2449
  %366 = lshr i64 %346, 63
  %367 = xor i64 %364, %366
  %368 = add nuw nsw i64 %367, %364
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %9, align 1, !tbaa !2450
  %371 = add i64 %347, 5
  store i64 %371, i64* %PC, align 8
  %372 = add i64 %346, 56
  %373 = inttoptr i64 %348 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBP, align 8, !tbaa !2428
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %347, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %372 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %378 = add i64 %346, 64
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %379 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %380 = inttoptr i64 %379 to i32*
  store i32 21, i32* %380, align 4
  %381 = load i64, i64* %PC, align 8
  %382 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %381, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %382

block_400a4e:                                     ; preds = %block_400566
  %383 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %384 = inttoptr i64 %383 to i32*
  store i32 26, i32* %384, align 4
  %385 = load i64, i64* %PC, align 8
  %386 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %385, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %386

block_4006ca:                                     ; preds = %block_400566
  %387 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %388 = inttoptr i64 %387 to i32*
  store i32 8, i32* %388, align 4
  %389 = load i64, i64* %PC, align 8
  %390 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %390

block_400b48:                                     ; preds = %block_400566
  %391 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %392 = inttoptr i64 %391 to i32*
  store i32 31, i32* %392, align 4
  %393 = load i64, i64* %PC, align 8
  %394 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %393, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %394

block_4007c4:                                     ; preds = %block_400566
  %395 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %396 = inttoptr i64 %395 to i32*
  store i32 13, i32* %396, align 4
  %397 = load i64, i64* %PC, align 8
  %398 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %397, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %398

block_4008be:                                     ; preds = %block_400566
  %399 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %400 = inttoptr i64 %399 to i32*
  store i32 18, i32* %400, align 4
  %401 = load i64, i64* %PC, align 8
  %402 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %401, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %402

block_40056c:                                     ; preds = %block_400566
  %403 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %404 = inttoptr i64 %403 to i32*
  store i32 1, i32* %404, align 4
  %405 = load i64, i64* %RBP, align 8
  %406 = add i64 %405, -12
  %407 = load i64, i64* %PC, align 8
  %408 = add i64 %407, 3
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %406 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = zext i32 %410 to i64
  store i64 %411, i64* %RDI, align 8, !tbaa !2428
  %412 = add i64 %407, -131
  %413 = add i64 %407, 8
  %414 = load i64, i64* %RSP, align 8, !tbaa !2428
  %415 = add i64 %414, -8
  %416 = inttoptr i64 %415 to i64*
  store i64 %413, i64* %416, align 8
  store i64 %415, i64* %RSP, align 8, !tbaa !2428
  store i64 %412, i64* %PC, align 8, !tbaa !2428
  %417 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %412, %struct.Memory* %MEMORY.0)
  %418 = load i64, i64* %RBP, align 8
  %419 = add i64 %418, -8
  %420 = load i64, i64* %PC, align 8
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %419 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = add i64 %423, 4
  store i64 %424, i64* %RCX, align 8, !tbaa !2428
  %425 = icmp ugt i64 %423, -5
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %4, align 1, !tbaa !2432
  %427 = trunc i64 %424 to i32
  %428 = and i32 %427, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428) #8
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %5, align 1, !tbaa !2446
  %433 = xor i64 %423, %424
  %434 = lshr i64 %433, 4
  %435 = trunc i64 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %6, align 1, !tbaa !2447
  %437 = icmp eq i64 %424, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %7, align 1, !tbaa !2448
  %439 = lshr i64 %424, 63
  %440 = trunc i64 %439 to i8
  store i8 %440, i8* %8, align 1, !tbaa !2449
  %441 = lshr i64 %423, 63
  %442 = xor i64 %439, %441
  %443 = add nuw nsw i64 %442, %439
  %444 = icmp eq i64 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %9, align 1, !tbaa !2450
  %446 = add i64 %420, 15
  store i64 %446, i64* %PC, align 8
  store i64 %424, i64* %422, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %447 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %448 = inttoptr i64 %447 to i32*
  store i32 23, i32* %448, align 4
  %449 = load i64, i64* %RBP, align 8
  %450 = add i64 %449, -12
  %451 = load i64, i64* %PC, align 8
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %450 to i32*
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i64
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %456 = add i64 %451, -1231
  %457 = add i64 %451, 8
  %458 = load i64, i64* %RSP, align 8, !tbaa !2428
  %459 = add i64 %458, -8
  %460 = inttoptr i64 %459 to i64*
  store i64 %457, i64* %460, align 8
  store i64 %459, i64* %RSP, align 8, !tbaa !2428
  store i64 %456, i64* %PC, align 8, !tbaa !2428
  %461 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %456, %struct.Memory* %MEMORY.0)
  %462 = load i64, i64* %RBP, align 8
  %463 = add i64 %462, -8
  %464 = load i64, i64* %PC, align 8
  %465 = add i64 %464, 4
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %463 to i64*
  %467 = load i64, i64* %466, align 8
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = add i64 %467, 4
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %469 = icmp ugt i64 %467, -5
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %4, align 1, !tbaa !2432
  %471 = trunc i64 %468 to i32
  %472 = and i32 %471, 255
  %473 = tail call i32 @llvm.ctpop.i32(i32 %472) #8
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  store i8 %476, i8* %5, align 1, !tbaa !2446
  %477 = xor i64 %467, %468
  %478 = lshr i64 %477, 4
  %479 = trunc i64 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %6, align 1, !tbaa !2447
  %481 = icmp eq i64 %468, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %7, align 1, !tbaa !2448
  %483 = lshr i64 %468, 63
  %484 = trunc i64 %483 to i8
  store i8 %484, i8* %8, align 1, !tbaa !2449
  %485 = lshr i64 %467, 63
  %486 = xor i64 %483, %485
  %487 = add nuw nsw i64 %486, %483
  %488 = icmp eq i64 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %9, align 1, !tbaa !2450
  %490 = add i64 %464, 15
  store i64 %490, i64* %PC, align 8
  store i64 %468, i64* %466, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %491 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %492 = inttoptr i64 %491 to i32*
  store i32 5, i32* %492, align 4
  %493 = load i64, i64* %RBP, align 8
  %494 = add i64 %493, -12
  %495 = load i64, i64* %PC, align 8
  %496 = add i64 %495, 3
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %494 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = zext i32 %498 to i64
  store i64 %499, i64* %RDI, align 8, !tbaa !2428
  %500 = add i64 %495, -331
  %501 = add i64 %495, 8
  %502 = load i64, i64* %RSP, align 8, !tbaa !2428
  %503 = add i64 %502, -8
  %504 = inttoptr i64 %503 to i64*
  store i64 %501, i64* %504, align 8
  store i64 %503, i64* %RSP, align 8, !tbaa !2428
  store i64 %500, i64* %PC, align 8, !tbaa !2428
  %505 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %500, %struct.Memory* %MEMORY.0)
  %506 = load i64, i64* %RBP, align 8
  %507 = add i64 %506, -8
  %508 = load i64, i64* %PC, align 8
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %507 to i64*
  %511 = load i64, i64* %510, align 8
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = add i64 %511, 4
  store i64 %512, i64* %RCX, align 8, !tbaa !2428
  %513 = icmp ugt i64 %511, -5
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %4, align 1, !tbaa !2432
  %515 = trunc i64 %512 to i32
  %516 = and i32 %515, 255
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516) #8
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %5, align 1, !tbaa !2446
  %521 = xor i64 %511, %512
  %522 = lshr i64 %521, 4
  %523 = trunc i64 %522 to i8
  %524 = and i8 %523, 1
  store i8 %524, i8* %6, align 1, !tbaa !2447
  %525 = icmp eq i64 %512, 0
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %7, align 1, !tbaa !2448
  %527 = lshr i64 %512, 63
  %528 = trunc i64 %527 to i8
  store i8 %528, i8* %8, align 1, !tbaa !2449
  %529 = lshr i64 %511, 63
  %530 = xor i64 %527, %529
  %531 = add nuw nsw i64 %530, %527
  %532 = icmp eq i64 %531, 2
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %9, align 1, !tbaa !2450
  %534 = add i64 %508, 15
  store i64 %534, i64* %PC, align 8
  store i64 %512, i64* %510, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %535 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %536 = inttoptr i64 %535 to i32*
  store i32 28, i32* %536, align 4
  %537 = load i64, i64* %RBP, align 8
  %538 = add i64 %537, -12
  %539 = load i64, i64* %PC, align 8
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %538 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = zext i32 %542 to i64
  store i64 %543, i64* %RDI, align 8, !tbaa !2428
  %544 = add i64 %539, -1481
  %545 = add i64 %539, 8
  %546 = load i64, i64* %RSP, align 8, !tbaa !2428
  %547 = add i64 %546, -8
  %548 = inttoptr i64 %547 to i64*
  store i64 %545, i64* %548, align 8
  store i64 %547, i64* %RSP, align 8, !tbaa !2428
  store i64 %544, i64* %PC, align 8, !tbaa !2428
  %549 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %544, %struct.Memory* %MEMORY.0)
  %550 = load i64, i64* %RBP, align 8
  %551 = add i64 %550, -8
  %552 = load i64, i64* %PC, align 8
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = add i64 %555, 4
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ugt i64 %555, -5
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %4, align 1, !tbaa !2432
  %559 = trunc i64 %556 to i32
  %560 = and i32 %559, 255
  %561 = tail call i32 @llvm.ctpop.i32(i32 %560) #8
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  store i8 %564, i8* %5, align 1, !tbaa !2446
  %565 = xor i64 %555, %556
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %6, align 1, !tbaa !2447
  %569 = icmp eq i64 %556, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %7, align 1, !tbaa !2448
  %571 = lshr i64 %556, 63
  %572 = trunc i64 %571 to i8
  store i8 %572, i8* %8, align 1, !tbaa !2449
  %573 = lshr i64 %555, 63
  %574 = xor i64 %571, %573
  %575 = add nuw nsw i64 %574, %571
  %576 = icmp eq i64 %575, 2
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %9, align 1, !tbaa !2450
  %578 = add i64 %552, 15
  store i64 %578, i64* %PC, align 8
  store i64 %556, i64* %554, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %579 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %580 = inttoptr i64 %579 to i32*
  store i32 10, i32* %580, align 4
  %581 = load i64, i64* %RBP, align 8
  %582 = add i64 %581, -12
  %583 = load i64, i64* %PC, align 8
  %584 = add i64 %583, 3
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %582 to i32*
  %586 = load i32, i32* %585, align 4
  %587 = zext i32 %586 to i64
  store i64 %587, i64* %RDI, align 8, !tbaa !2428
  %588 = add i64 %583, -581
  %589 = add i64 %583, 8
  %590 = load i64, i64* %RSP, align 8, !tbaa !2428
  %591 = add i64 %590, -8
  %592 = inttoptr i64 %591 to i64*
  store i64 %589, i64* %592, align 8
  store i64 %591, i64* %RSP, align 8, !tbaa !2428
  store i64 %588, i64* %PC, align 8, !tbaa !2428
  %593 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %588, %struct.Memory* %MEMORY.0)
  %594 = load i64, i64* %RBP, align 8
  %595 = add i64 %594, -8
  %596 = load i64, i64* %PC, align 8
  %597 = add i64 %596, 4
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %595 to i64*
  %599 = load i64, i64* %598, align 8
  store i64 %599, i64* %RAX, align 8, !tbaa !2428
  %600 = add i64 %599, 4
  store i64 %600, i64* %RCX, align 8, !tbaa !2428
  %601 = icmp ugt i64 %599, -5
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %4, align 1, !tbaa !2432
  %603 = trunc i64 %600 to i32
  %604 = and i32 %603, 255
  %605 = tail call i32 @llvm.ctpop.i32(i32 %604) #8
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  store i8 %608, i8* %5, align 1, !tbaa !2446
  %609 = xor i64 %599, %600
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  store i8 %612, i8* %6, align 1, !tbaa !2447
  %613 = icmp eq i64 %600, 0
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %7, align 1, !tbaa !2448
  %615 = lshr i64 %600, 63
  %616 = trunc i64 %615 to i8
  store i8 %616, i8* %8, align 1, !tbaa !2449
  %617 = lshr i64 %599, 63
  %618 = xor i64 %615, %617
  %619 = add nuw nsw i64 %618, %615
  %620 = icmp eq i64 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %9, align 1, !tbaa !2450
  %622 = add i64 %596, 15
  store i64 %622, i64* %PC, align 8
  store i64 %600, i64* %598, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %623 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %624 = inttoptr i64 %623 to i32*
  store i32 15, i32* %624, align 4
  %625 = load i64, i64* %RBP, align 8
  %626 = add i64 %625, -12
  %627 = load i64, i64* %PC, align 8
  %628 = add i64 %627, 3
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %626 to i32*
  %630 = load i32, i32* %629, align 4
  %631 = zext i32 %630 to i64
  store i64 %631, i64* %RDI, align 8, !tbaa !2428
  %632 = add i64 %627, -831
  %633 = add i64 %627, 8
  %634 = load i64, i64* %RSP, align 8, !tbaa !2428
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %633, i64* %636, align 8
  store i64 %635, i64* %RSP, align 8, !tbaa !2428
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  %637 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %632, %struct.Memory* %MEMORY.0)
  %638 = load i64, i64* %RBP, align 8
  %639 = add i64 %638, -8
  %640 = load i64, i64* %PC, align 8
  %641 = add i64 %640, 4
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642, align 8
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = add i64 %643, 4
  store i64 %644, i64* %RCX, align 8, !tbaa !2428
  %645 = icmp ugt i64 %643, -5
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %4, align 1, !tbaa !2432
  %647 = trunc i64 %644 to i32
  %648 = and i32 %647, 255
  %649 = tail call i32 @llvm.ctpop.i32(i32 %648) #8
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  %652 = xor i8 %651, 1
  store i8 %652, i8* %5, align 1, !tbaa !2446
  %653 = xor i64 %643, %644
  %654 = lshr i64 %653, 4
  %655 = trunc i64 %654 to i8
  %656 = and i8 %655, 1
  store i8 %656, i8* %6, align 1, !tbaa !2447
  %657 = icmp eq i64 %644, 0
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %7, align 1, !tbaa !2448
  %659 = lshr i64 %644, 63
  %660 = trunc i64 %659 to i8
  store i8 %660, i8* %8, align 1, !tbaa !2449
  %661 = lshr i64 %643, 63
  %662 = xor i64 %659, %661
  %663 = add nuw nsw i64 %662, %659
  %664 = icmp eq i64 %663, 2
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %9, align 1, !tbaa !2450
  %666 = add i64 %640, 15
  store i64 %666, i64* %PC, align 8
  store i64 %644, i64* %642, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %667 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %668 = inttoptr i64 %667 to i32*
  store i32 20, i32* %668, align 4
  %669 = load i64, i64* %RBP, align 8
  %670 = add i64 %669, -12
  %671 = load i64, i64* %PC, align 8
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %670 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RDI, align 8, !tbaa !2428
  %676 = add i64 %671, -1081
  %677 = add i64 %671, 8
  %678 = load i64, i64* %RSP, align 8, !tbaa !2428
  %679 = add i64 %678, -8
  %680 = inttoptr i64 %679 to i64*
  store i64 %677, i64* %680, align 8
  store i64 %679, i64* %RSP, align 8, !tbaa !2428
  store i64 %676, i64* %PC, align 8, !tbaa !2428
  %681 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %676, %struct.Memory* %MEMORY.0)
  %682 = load i64, i64* %RBP, align 8
  %683 = add i64 %682, -8
  %684 = load i64, i64* %PC, align 8
  %685 = add i64 %684, 4
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %683 to i64*
  %687 = load i64, i64* %686, align 8
  store i64 %687, i64* %RAX, align 8, !tbaa !2428
  %688 = add i64 %687, 4
  store i64 %688, i64* %RCX, align 8, !tbaa !2428
  %689 = icmp ugt i64 %687, -5
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %4, align 1, !tbaa !2432
  %691 = trunc i64 %688 to i32
  %692 = and i32 %691, 255
  %693 = tail call i32 @llvm.ctpop.i32(i32 %692) #8
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  store i8 %696, i8* %5, align 1, !tbaa !2446
  %697 = xor i64 %687, %688
  %698 = lshr i64 %697, 4
  %699 = trunc i64 %698 to i8
  %700 = and i8 %699, 1
  store i8 %700, i8* %6, align 1, !tbaa !2447
  %701 = icmp eq i64 %688, 0
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %7, align 1, !tbaa !2448
  %703 = lshr i64 %688, 63
  %704 = trunc i64 %703 to i8
  store i8 %704, i8* %8, align 1, !tbaa !2449
  %705 = lshr i64 %687, 63
  %706 = xor i64 %703, %705
  %707 = add nuw nsw i64 %706, %703
  %708 = icmp eq i64 %707, 2
  %709 = zext i1 %708 to i8
  store i8 %709, i8* %9, align 1, !tbaa !2450
  %710 = add i64 %684, 15
  store i64 %710, i64* %PC, align 8
  store i64 %688, i64* %686, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %711 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %712 = inttoptr i64 %711 to i32*
  store i32 2, i32* %712, align 4
  %713 = load i64, i64* %RBP, align 8
  %714 = add i64 %713, -12
  %715 = load i64, i64* %PC, align 8
  %716 = add i64 %715, 3
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %714 to i32*
  %718 = load i32, i32* %717, align 4
  %719 = zext i32 %718 to i64
  store i64 %719, i64* %RDI, align 8, !tbaa !2428
  %720 = add i64 %715, -181
  %721 = add i64 %715, 8
  %722 = load i64, i64* %RSP, align 8, !tbaa !2428
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %721, i64* %724, align 8
  store i64 %723, i64* %RSP, align 8, !tbaa !2428
  store i64 %720, i64* %PC, align 8, !tbaa !2428
  %725 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %720, %struct.Memory* %MEMORY.0)
  %726 = load i64, i64* %RBP, align 8
  %727 = add i64 %726, -8
  %728 = load i64, i64* %PC, align 8
  %729 = add i64 %728, 4
  store i64 %729, i64* %PC, align 8
  %730 = inttoptr i64 %727 to i64*
  %731 = load i64, i64* %730, align 8
  store i64 %731, i64* %RAX, align 8, !tbaa !2428
  %732 = add i64 %731, 4
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  %733 = icmp ugt i64 %731, -5
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %4, align 1, !tbaa !2432
  %735 = trunc i64 %732 to i32
  %736 = and i32 %735, 255
  %737 = tail call i32 @llvm.ctpop.i32(i32 %736) #8
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  store i8 %740, i8* %5, align 1, !tbaa !2446
  %741 = xor i64 %731, %732
  %742 = lshr i64 %741, 4
  %743 = trunc i64 %742 to i8
  %744 = and i8 %743, 1
  store i8 %744, i8* %6, align 1, !tbaa !2447
  %745 = icmp eq i64 %732, 0
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %7, align 1, !tbaa !2448
  %747 = lshr i64 %732, 63
  %748 = trunc i64 %747 to i8
  store i8 %748, i8* %8, align 1, !tbaa !2449
  %749 = lshr i64 %731, 63
  %750 = xor i64 %747, %749
  %751 = add nuw nsw i64 %750, %747
  %752 = icmp eq i64 %751, 2
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %9, align 1, !tbaa !2450
  %754 = add i64 %728, 15
  store i64 %754, i64* %PC, align 8
  store i64 %732, i64* %730, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %755 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %756 = inttoptr i64 %755 to i32*
  store i32 3, i32* %756, align 4
  %757 = load i64, i64* %PC, align 8
  %758 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %757, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %758

block_400b1d:                                     ; preds = %block_400b16, %3
  %759 = phi i64 [ %1, %3 ], [ %.pre, %block_400b16 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400b16 ]
  %760 = load i64, i64* %RBP, align 8
  %761 = add i64 %760, -12
  %762 = add i64 %759, 3
  store i64 %762, i64* %PC, align 8
  %763 = inttoptr i64 %761 to i32*
  %764 = load i32, i32* %763, align 4
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RDI, align 8, !tbaa !2428
  %766 = add i64 %759, -1581
  %767 = add i64 %759, 8
  %768 = load i64, i64* %RSP, align 8, !tbaa !2428
  %769 = add i64 %768, -8
  %770 = inttoptr i64 %769 to i64*
  store i64 %767, i64* %770, align 8
  store i64 %769, i64* %RSP, align 8, !tbaa !2428
  store i64 %766, i64* %PC, align 8, !tbaa !2428
  %771 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %766, %struct.Memory* %MEMORY.1)
  %772 = load i64, i64* %RBP, align 8
  %773 = add i64 %772, -8
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %773 to i64*
  %777 = load i64, i64* %776, align 8
  store i64 %777, i64* %RAX, align 8, !tbaa !2428
  %778 = add i64 %777, 4
  store i64 %778, i64* %RCX, align 8, !tbaa !2428
  %779 = icmp ugt i64 %777, -5
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %4, align 1, !tbaa !2432
  %781 = trunc i64 %778 to i32
  %782 = and i32 %781, 255
  %783 = tail call i32 @llvm.ctpop.i32(i32 %782) #8
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  %786 = xor i8 %785, 1
  store i8 %786, i8* %5, align 1, !tbaa !2446
  %787 = xor i64 %777, %778
  %788 = lshr i64 %787, 4
  %789 = trunc i64 %788 to i8
  %790 = and i8 %789, 1
  store i8 %790, i8* %6, align 1, !tbaa !2447
  %791 = icmp eq i64 %778, 0
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %7, align 1, !tbaa !2448
  %793 = lshr i64 %778, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %8, align 1, !tbaa !2449
  %795 = lshr i64 %777, 63
  %796 = xor i64 %793, %795
  %797 = add nuw nsw i64 %796, %793
  %798 = icmp eq i64 %797, 2
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %9, align 1, !tbaa !2450
  %800 = add i64 %774, 15
  store i64 %800, i64* %PC, align 8
  store i64 %778, i64* %776, align 8
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %801 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %802 = inttoptr i64 %801 to i32*
  store i32 25, i32* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -12
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %805, -1331
  %811 = add i64 %805, 8
  %812 = load i64, i64* %RSP, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %811, i64* %814, align 8
  store i64 %813, i64* %RSP, align 8, !tbaa !2428
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  %815 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %810, %struct.Memory* %MEMORY.0)
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -8
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = add i64 %821, 4
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = icmp ugt i64 %821, -5
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %4, align 1, !tbaa !2432
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %5, align 1, !tbaa !2446
  %831 = xor i64 %821, %822
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %6, align 1, !tbaa !2447
  %835 = icmp eq i64 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %7, align 1, !tbaa !2448
  %837 = lshr i64 %822, 63
  %838 = trunc i64 %837 to i8
  store i8 %838, i8* %8, align 1, !tbaa !2449
  %839 = lshr i64 %821, 63
  %840 = xor i64 %837, %839
  %841 = add nuw nsw i64 %840, %837
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %9, align 1, !tbaa !2450
  %844 = add i64 %818, 15
  store i64 %844, i64* %PC, align 8
  store i64 %822, i64* %820, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %845 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %846 = inttoptr i64 %845 to i32*
  store i32 7, i32* %846, align 4
  %847 = load i64, i64* %RBP, align 8
  %848 = add i64 %847, -12
  %849 = load i64, i64* %PC, align 8
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = add i64 %849, -431
  %855 = add i64 %849, 8
  %856 = load i64, i64* %RSP, align 8, !tbaa !2428
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %855, i64* %858, align 8
  store i64 %857, i64* %RSP, align 8, !tbaa !2428
  store i64 %854, i64* %PC, align 8, !tbaa !2428
  %859 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %854, %struct.Memory* %MEMORY.0)
  %860 = load i64, i64* %RBP, align 8
  %861 = add i64 %860, -8
  %862 = load i64, i64* %PC, align 8
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %865, 4
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ugt i64 %865, -5
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %4, align 1, !tbaa !2432
  %869 = trunc i64 %866 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %5, align 1, !tbaa !2446
  %875 = xor i64 %865, %866
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  store i8 %878, i8* %6, align 1, !tbaa !2447
  %879 = icmp eq i64 %866, 0
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %7, align 1, !tbaa !2448
  %881 = lshr i64 %866, 63
  %882 = trunc i64 %881 to i8
  store i8 %882, i8* %8, align 1, !tbaa !2449
  %883 = lshr i64 %865, 63
  %884 = xor i64 %881, %883
  %885 = add nuw nsw i64 %884, %881
  %886 = icmp eq i64 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %9, align 1, !tbaa !2450
  %888 = add i64 %862, 15
  store i64 %888, i64* %PC, align 8
  store i64 %866, i64* %864, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %889 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %890 = inttoptr i64 %889 to i32*
  store i32 30, i32* %890, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400b1d

block_400792:                                     ; preds = %block_400566
  %891 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %892 = inttoptr i64 %891 to i32*
  store i32 12, i32* %892, align 4
  %893 = load i64, i64* %PC, align 8
  %894 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %893, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %894

block_40088c:                                     ; preds = %block_400566
  %895 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %896 = inttoptr i64 %895 to i32*
  store i32 17, i32* %896, align 4
  %897 = load i64, i64* %PC, align 8
  %898 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %897, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %898

block_400986:                                     ; preds = %block_400566
  %899 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %900 = inttoptr i64 %899 to i32*
  store i32 22, i32* %900, align 4
  %901 = load i64, i64* %PC, align 8
  %902 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %901, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %902

block_400602:                                     ; preds = %block_400566
  %903 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %904 = inttoptr i64 %903 to i32*
  store i32 4, i32* %904, align 4
  %905 = load i64, i64* %PC, align 8
  %906 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %905, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %906

block_400a80:                                     ; preds = %block_400566
  %907 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %908 = inttoptr i64 %907 to i32*
  store i32 27, i32* %908, align 4
  %909 = load i64, i64* %PC, align 8
  %910 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %909, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %910

; <label>:911:                                    ; preds = %block_400566
  %912 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %912
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007cb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4007cb

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %994, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %994, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.1)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %994, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.1)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %994, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.1)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %994, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.1)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %994, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.1)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %994, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.1)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %994, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.1)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %994, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.1)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %994, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.1)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %994, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.1)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %454 = add i64 %994, -12
  store i64 4196949, i64* %PC, align 8
  %455 = inttoptr i64 %454 to i32*
  store i32 26, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -12
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %458, -1381
  %464 = add i64 %458, 8
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.1)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -8
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = icmp ugt i64 %474, -5
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %4, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %5, align 1, !tbaa !2446
  %484 = xor i64 %474, %475
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %6, align 1, !tbaa !2447
  %488 = icmp eq i64 %475, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %7, align 1, !tbaa !2448
  %490 = lshr i64 %475, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %8, align 1, !tbaa !2449
  %492 = lshr i64 %474, 63
  %493 = xor i64 %490, %492
  %494 = add nuw nsw i64 %493, %490
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %9, align 1, !tbaa !2450
  %497 = add i64 %471, 15
  store i64 %497, i64* %PC, align 8
  store i64 %475, i64* %473, align 8
  br label %block_400566

block_4007cb:                                     ; preds = %block_4007c4, %3
  %498 = phi i64 [ %1, %3 ], [ %.pre, %block_4007c4 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007c4 ]
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -12
  %501 = add i64 %498, 3
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDI, align 8, !tbaa !2428
  %505 = add i64 %498, -731
  %506 = add i64 %498, 8
  %507 = load i64, i64* %RSP, align 8, !tbaa !2428
  %508 = add i64 %507, -8
  %509 = inttoptr i64 %508 to i64*
  store i64 %506, i64* %509, align 8
  store i64 %508, i64* %RSP, align 8, !tbaa !2428
  store i64 %505, i64* %PC, align 8, !tbaa !2428
  %510 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %505, %struct.Memory* %MEMORY.0)
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -8
  %513 = load i64, i64* %PC, align 8
  %514 = add i64 %513, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %512 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %516, 4
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = icmp ugt i64 %516, -5
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %4, align 1, !tbaa !2432
  %520 = trunc i64 %517 to i32
  %521 = and i32 %520, 255
  %522 = tail call i32 @llvm.ctpop.i32(i32 %521) #8
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  store i8 %525, i8* %5, align 1, !tbaa !2446
  %526 = xor i64 %516, %517
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  store i8 %529, i8* %6, align 1, !tbaa !2447
  %530 = icmp eq i64 %517, 0
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %7, align 1, !tbaa !2448
  %532 = lshr i64 %517, 63
  %533 = trunc i64 %532 to i8
  store i8 %533, i8* %8, align 1, !tbaa !2449
  %534 = lshr i64 %516, 63
  %535 = xor i64 %532, %534
  %536 = add nuw nsw i64 %535, %532
  %537 = icmp eq i64 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %9, align 1, !tbaa !2450
  %539 = add i64 %513, 15
  store i64 %539, i64* %PC, align 8
  store i64 %517, i64* %515, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %540 = add i64 %994, -12
  store i64 4196049, i64* %PC, align 8
  %541 = inttoptr i64 %540 to i32*
  store i32 8, i32* %541, align 4
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -12
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 3
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %RDI, align 8, !tbaa !2428
  %549 = add i64 %544, -481
  %550 = add i64 %544, 8
  %551 = load i64, i64* %RSP, align 8, !tbaa !2428
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %550, i64* %553, align 8
  store i64 %552, i64* %RSP, align 8, !tbaa !2428
  store i64 %549, i64* %PC, align 8, !tbaa !2428
  %554 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %549, %struct.Memory* %MEMORY.1)
  %555 = load i64, i64* %RBP, align 8
  %556 = add i64 %555, -8
  %557 = load i64, i64* %PC, align 8
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = add i64 %560, 4
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = icmp ugt i64 %560, -5
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %4, align 1, !tbaa !2432
  %564 = trunc i64 %561 to i32
  %565 = and i32 %564, 255
  %566 = tail call i32 @llvm.ctpop.i32(i32 %565) #8
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  store i8 %569, i8* %5, align 1, !tbaa !2446
  %570 = xor i64 %560, %561
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  store i8 %573, i8* %6, align 1, !tbaa !2447
  %574 = icmp eq i64 %561, 0
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %7, align 1, !tbaa !2448
  %576 = lshr i64 %561, 63
  %577 = trunc i64 %576 to i8
  store i8 %577, i8* %8, align 1, !tbaa !2449
  %578 = lshr i64 %560, 63
  %579 = xor i64 %576, %578
  %580 = add nuw nsw i64 %579, %576
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %9, align 1, !tbaa !2450
  %583 = add i64 %557, 15
  store i64 %583, i64* %PC, align 8
  store i64 %561, i64* %559, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %584 = add i64 %994, -12
  store i64 4197199, i64* %PC, align 8
  %585 = inttoptr i64 %584 to i32*
  store i32 31, i32* %585, align 4
  %586 = load i64, i64* %RBP, align 8
  %587 = add i64 %586, -12
  %588 = load i64, i64* %PC, align 8
  %589 = add i64 %588, 3
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %587 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = zext i32 %591 to i64
  store i64 %592, i64* %RDI, align 8, !tbaa !2428
  %593 = add i64 %588, -1631
  %594 = add i64 %588, 8
  %595 = load i64, i64* %RSP, align 8, !tbaa !2428
  %596 = add i64 %595, -8
  %597 = inttoptr i64 %596 to i64*
  store i64 %594, i64* %597, align 8
  store i64 %596, i64* %RSP, align 8, !tbaa !2428
  store i64 %593, i64* %PC, align 8, !tbaa !2428
  %598 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %593, %struct.Memory* %MEMORY.1)
  %599 = load i64, i64* %RBP, align 8
  %600 = add i64 %599, -8
  %601 = load i64, i64* %PC, align 8
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603, align 8
  store i64 %604, i64* %RAX, align 8, !tbaa !2428
  %605 = add i64 %604, 4
  store i64 %605, i64* %RCX, align 8, !tbaa !2428
  %606 = icmp ugt i64 %604, -5
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %4, align 1, !tbaa !2432
  %608 = trunc i64 %605 to i32
  %609 = and i32 %608, 255
  %610 = tail call i32 @llvm.ctpop.i32(i32 %609) #8
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  store i8 %613, i8* %5, align 1, !tbaa !2446
  %614 = xor i64 %604, %605
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  store i8 %617, i8* %6, align 1, !tbaa !2447
  %618 = icmp eq i64 %605, 0
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %7, align 1, !tbaa !2448
  %620 = lshr i64 %605, 63
  %621 = trunc i64 %620 to i8
  store i8 %621, i8* %8, align 1, !tbaa !2449
  %622 = lshr i64 %604, 63
  %623 = xor i64 %620, %622
  %624 = add nuw nsw i64 %623, %620
  %625 = icmp eq i64 %624, 2
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %9, align 1, !tbaa !2450
  %627 = add i64 %601, 15
  store i64 %627, i64* %PC, align 8
  store i64 %605, i64* %603, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %628 = add i64 %994, -12
  store i64 4196299, i64* %PC, align 8
  %629 = inttoptr i64 %628 to i32*
  store i32 13, i32* %629, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4007cb

block_4008be:                                     ; preds = %block_400566
  %630 = add i64 %994, -12
  store i64 4196549, i64* %PC, align 8
  %631 = inttoptr i64 %630 to i32*
  store i32 18, i32* %631, align 4
  %632 = load i64, i64* %PC, align 8
  %633 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %632, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %633

block_4009b8:                                     ; preds = %block_400566
  %634 = add i64 %994, -12
  store i64 4196799, i64* %PC, align 8
  %635 = inttoptr i64 %634 to i32*
  store i32 23, i32* %635, align 4
  %636 = load i64, i64* %RBP, align 8
  %637 = add i64 %636, -12
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RDI, align 8, !tbaa !2428
  %643 = add i64 %638, -1231
  %644 = add i64 %638, 8
  %645 = load i64, i64* %RSP, align 8, !tbaa !2428
  %646 = add i64 %645, -8
  %647 = inttoptr i64 %646 to i64*
  store i64 %644, i64* %647, align 8
  store i64 %646, i64* %RSP, align 8, !tbaa !2428
  store i64 %643, i64* %PC, align 8, !tbaa !2428
  %648 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %643, %struct.Memory* %MEMORY.1)
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -8
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %650 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = add i64 %654, 4
  store i64 %655, i64* %RCX, align 8, !tbaa !2428
  %656 = icmp ugt i64 %654, -5
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %4, align 1, !tbaa !2432
  %658 = trunc i64 %655 to i32
  %659 = and i32 %658, 255
  %660 = tail call i32 @llvm.ctpop.i32(i32 %659) #8
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  store i8 %663, i8* %5, align 1, !tbaa !2446
  %664 = xor i64 %654, %655
  %665 = lshr i64 %664, 4
  %666 = trunc i64 %665 to i8
  %667 = and i8 %666, 1
  store i8 %667, i8* %6, align 1, !tbaa !2447
  %668 = icmp eq i64 %655, 0
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %7, align 1, !tbaa !2448
  %670 = lshr i64 %655, 63
  %671 = trunc i64 %670 to i8
  store i8 %671, i8* %8, align 1, !tbaa !2449
  %672 = lshr i64 %654, 63
  %673 = xor i64 %670, %672
  %674 = add nuw nsw i64 %673, %670
  %675 = icmp eq i64 %674, 2
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %9, align 1, !tbaa !2450
  %677 = add i64 %651, 15
  store i64 %677, i64* %PC, align 8
  store i64 %655, i64* %653, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %678 = add i64 %994, -12
  store i64 4195899, i64* %PC, align 8
  %679 = inttoptr i64 %678 to i32*
  store i32 5, i32* %679, align 4
  %680 = load i64, i64* %RBP, align 8
  %681 = add i64 %680, -12
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %681 to i32*
  %685 = load i32, i32* %684, align 4
  %686 = zext i32 %685 to i64
  store i64 %686, i64* %RDI, align 8, !tbaa !2428
  %687 = add i64 %682, -331
  %688 = add i64 %682, 8
  %689 = load i64, i64* %RSP, align 8, !tbaa !2428
  %690 = add i64 %689, -8
  %691 = inttoptr i64 %690 to i64*
  store i64 %688, i64* %691, align 8
  store i64 %690, i64* %RSP, align 8, !tbaa !2428
  store i64 %687, i64* %PC, align 8, !tbaa !2428
  %692 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %687, %struct.Memory* %MEMORY.1)
  %693 = load i64, i64* %RBP, align 8
  %694 = add i64 %693, -8
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = add i64 %698, 4
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = icmp ugt i64 %698, -5
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %4, align 1, !tbaa !2432
  %702 = trunc i64 %699 to i32
  %703 = and i32 %702, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #8
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %5, align 1, !tbaa !2446
  %708 = xor i64 %698, %699
  %709 = lshr i64 %708, 4
  %710 = trunc i64 %709 to i8
  %711 = and i8 %710, 1
  store i8 %711, i8* %6, align 1, !tbaa !2447
  %712 = icmp eq i64 %699, 0
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %7, align 1, !tbaa !2448
  %714 = lshr i64 %699, 63
  %715 = trunc i64 %714 to i8
  store i8 %715, i8* %8, align 1, !tbaa !2449
  %716 = lshr i64 %698, 63
  %717 = xor i64 %714, %716
  %718 = add nuw nsw i64 %717, %714
  %719 = icmp eq i64 %718, 2
  %720 = zext i1 %719 to i8
  store i8 %720, i8* %9, align 1, !tbaa !2450
  %721 = add i64 %695, 15
  store i64 %721, i64* %PC, align 8
  store i64 %699, i64* %697, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %722 = add i64 %994, -12
  store i64 4197049, i64* %PC, align 8
  %723 = inttoptr i64 %722 to i32*
  store i32 28, i32* %723, align 4
  %724 = load i64, i64* %RBP, align 8
  %725 = add i64 %724, -12
  %726 = load i64, i64* %PC, align 8
  %727 = add i64 %726, 3
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %725 to i32*
  %729 = load i32, i32* %728, align 4
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RDI, align 8, !tbaa !2428
  %731 = add i64 %726, -1481
  %732 = add i64 %726, 8
  %733 = load i64, i64* %RSP, align 8, !tbaa !2428
  %734 = add i64 %733, -8
  %735 = inttoptr i64 %734 to i64*
  store i64 %732, i64* %735, align 8
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  store i64 %731, i64* %PC, align 8, !tbaa !2428
  %736 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %731, %struct.Memory* %MEMORY.1)
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -8
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = add i64 %742, 4
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  %744 = icmp ugt i64 %742, -5
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %4, align 1, !tbaa !2432
  %746 = trunc i64 %743 to i32
  %747 = and i32 %746, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #8
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %5, align 1, !tbaa !2446
  %752 = xor i64 %742, %743
  %753 = lshr i64 %752, 4
  %754 = trunc i64 %753 to i8
  %755 = and i8 %754, 1
  store i8 %755, i8* %6, align 1, !tbaa !2447
  %756 = icmp eq i64 %743, 0
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %7, align 1, !tbaa !2448
  %758 = lshr i64 %743, 63
  %759 = trunc i64 %758 to i8
  store i8 %759, i8* %8, align 1, !tbaa !2449
  %760 = lshr i64 %742, 63
  %761 = xor i64 %758, %760
  %762 = add nuw nsw i64 %761, %758
  %763 = icmp eq i64 %762, 2
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %9, align 1, !tbaa !2450
  %765 = add i64 %739, 15
  store i64 %765, i64* %PC, align 8
  store i64 %743, i64* %741, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %766 = add i64 %994, -12
  store i64 4195680, i64* %PC, align 8
  %767 = inttoptr i64 %766 to i32*
  store i32 0, i32* %767, align 4
  %768 = load i64, i64* %RSP, align 8
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %768, 48
  store i64 %770, i64* %RSP, align 8, !tbaa !2428
  %771 = icmp ugt i64 %768, -49
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %4, align 1, !tbaa !2432
  %773 = trunc i64 %770 to i32
  %774 = and i32 %773, 255
  %775 = tail call i32 @llvm.ctpop.i32(i32 %774) #8
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  store i8 %778, i8* %5, align 1, !tbaa !2446
  %779 = xor i64 %768, 16
  %780 = xor i64 %779, %770
  %781 = lshr i64 %780, 4
  %782 = trunc i64 %781 to i8
  %783 = and i8 %782, 1
  store i8 %783, i8* %6, align 1, !tbaa !2447
  %784 = icmp eq i64 %770, 0
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %7, align 1, !tbaa !2448
  %786 = lshr i64 %770, 63
  %787 = trunc i64 %786 to i8
  store i8 %787, i8* %8, align 1, !tbaa !2449
  %788 = lshr i64 %768, 63
  %789 = xor i64 %786, %788
  %790 = add nuw nsw i64 %789, %786
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %9, align 1, !tbaa !2450
  %793 = add i64 %769, 5
  store i64 %793, i64* %PC, align 8
  %794 = add i64 %768, 56
  %795 = inttoptr i64 %770 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %RBP, align 8, !tbaa !2428
  store i64 %794, i64* %RSP, align 8, !tbaa !2428
  %797 = add i64 %769, 6
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  %799 = load i64, i64* %798, align 8
  store i64 %799, i64* %PC, align 8, !tbaa !2428
  %800 = add i64 %768, 64
  store i64 %800, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %801 = add i64 %994, -12
  store i64 4196149, i64* %PC, align 8
  %802 = inttoptr i64 %801 to i32*
  store i32 10, i32* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -12
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %805, -581
  %811 = add i64 %805, 8
  %812 = load i64, i64* %RSP, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %811, i64* %814, align 8
  store i64 %813, i64* %RSP, align 8, !tbaa !2428
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  %815 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %810, %struct.Memory* %MEMORY.1)
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -8
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = add i64 %821, 4
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = icmp ugt i64 %821, -5
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %4, align 1, !tbaa !2432
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %5, align 1, !tbaa !2446
  %831 = xor i64 %821, %822
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %6, align 1, !tbaa !2447
  %835 = icmp eq i64 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %7, align 1, !tbaa !2448
  %837 = lshr i64 %822, 63
  %838 = trunc i64 %837 to i8
  store i8 %838, i8* %8, align 1, !tbaa !2449
  %839 = lshr i64 %821, 63
  %840 = xor i64 %837, %839
  %841 = add nuw nsw i64 %840, %837
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %9, align 1, !tbaa !2450
  %844 = add i64 %818, 15
  store i64 %844, i64* %PC, align 8
  store i64 %822, i64* %820, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %845 = add i64 %994, -12
  store i64 4196399, i64* %PC, align 8
  %846 = inttoptr i64 %845 to i32*
  store i32 15, i32* %846, align 4
  %847 = load i64, i64* %RBP, align 8
  %848 = add i64 %847, -12
  %849 = load i64, i64* %PC, align 8
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = add i64 %849, -831
  %855 = add i64 %849, 8
  %856 = load i64, i64* %RSP, align 8, !tbaa !2428
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %855, i64* %858, align 8
  store i64 %857, i64* %RSP, align 8, !tbaa !2428
  store i64 %854, i64* %PC, align 8, !tbaa !2428
  %859 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %854, %struct.Memory* %MEMORY.1)
  %860 = load i64, i64* %RBP, align 8
  %861 = add i64 %860, -8
  %862 = load i64, i64* %PC, align 8
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %865, 4
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ugt i64 %865, -5
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %4, align 1, !tbaa !2432
  %869 = trunc i64 %866 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %5, align 1, !tbaa !2446
  %875 = xor i64 %865, %866
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  store i8 %878, i8* %6, align 1, !tbaa !2447
  %879 = icmp eq i64 %866, 0
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %7, align 1, !tbaa !2448
  %881 = lshr i64 %866, 63
  %882 = trunc i64 %881 to i8
  store i8 %882, i8* %8, align 1, !tbaa !2449
  %883 = lshr i64 %865, 63
  %884 = xor i64 %881, %883
  %885 = add nuw nsw i64 %884, %881
  %886 = icmp eq i64 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %9, align 1, !tbaa !2450
  %888 = add i64 %862, 15
  store i64 %888, i64* %PC, align 8
  store i64 %866, i64* %864, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %889 = add i64 %994, -12
  store i64 4196649, i64* %PC, align 8
  %890 = inttoptr i64 %889 to i32*
  store i32 20, i32* %890, align 4
  %891 = load i64, i64* %RBP, align 8
  %892 = add i64 %891, -12
  %893 = load i64, i64* %PC, align 8
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895, align 4
  %897 = zext i32 %896 to i64
  store i64 %897, i64* %RDI, align 8, !tbaa !2428
  %898 = add i64 %893, -1081
  %899 = add i64 %893, 8
  %900 = load i64, i64* %RSP, align 8, !tbaa !2428
  %901 = add i64 %900, -8
  %902 = inttoptr i64 %901 to i64*
  store i64 %899, i64* %902, align 8
  store i64 %901, i64* %RSP, align 8, !tbaa !2428
  store i64 %898, i64* %PC, align 8, !tbaa !2428
  %903 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %898, %struct.Memory* %MEMORY.1)
  %904 = load i64, i64* %RBP, align 8
  %905 = add i64 %904, -8
  %906 = load i64, i64* %PC, align 8
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %905 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = add i64 %909, 4
  store i64 %910, i64* %RCX, align 8, !tbaa !2428
  %911 = icmp ugt i64 %909, -5
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %4, align 1, !tbaa !2432
  %913 = trunc i64 %910 to i32
  %914 = and i32 %913, 255
  %915 = tail call i32 @llvm.ctpop.i32(i32 %914) #8
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  %918 = xor i8 %917, 1
  store i8 %918, i8* %5, align 1, !tbaa !2446
  %919 = xor i64 %909, %910
  %920 = lshr i64 %919, 4
  %921 = trunc i64 %920 to i8
  %922 = and i8 %921, 1
  store i8 %922, i8* %6, align 1, !tbaa !2447
  %923 = icmp eq i64 %910, 0
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %7, align 1, !tbaa !2448
  %925 = lshr i64 %910, 63
  %926 = trunc i64 %925 to i8
  store i8 %926, i8* %8, align 1, !tbaa !2449
  %927 = lshr i64 %909, 63
  %928 = xor i64 %925, %927
  %929 = add nuw nsw i64 %928, %925
  %930 = icmp eq i64 %929, 2
  %931 = zext i1 %930 to i8
  store i8 %931, i8* %9, align 1, !tbaa !2450
  %932 = add i64 %906, 15
  store i64 %932, i64* %PC, align 8
  store i64 %910, i64* %908, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %933 = add i64 %994, -12
  store i64 4195749, i64* %PC, align 8
  %934 = inttoptr i64 %933 to i32*
  store i32 2, i32* %934, align 4
  %935 = load i64, i64* %RBP, align 8
  %936 = add i64 %935, -12
  %937 = load i64, i64* %PC, align 8
  %938 = add i64 %937, 3
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939, align 4
  %941 = zext i32 %940 to i64
  store i64 %941, i64* %RDI, align 8, !tbaa !2428
  %942 = add i64 %937, -181
  %943 = add i64 %937, 8
  %944 = load i64, i64* %RSP, align 8, !tbaa !2428
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %943, i64* %946, align 8
  store i64 %945, i64* %RSP, align 8, !tbaa !2428
  store i64 %942, i64* %PC, align 8, !tbaa !2428
  %947 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %942, %struct.Memory* %MEMORY.1)
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -8
  %950 = load i64, i64* %PC, align 8
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = add i64 %953, 4
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = icmp ugt i64 %953, -5
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %4, align 1, !tbaa !2432
  %957 = trunc i64 %954 to i32
  %958 = and i32 %957, 255
  %959 = tail call i32 @llvm.ctpop.i32(i32 %958) #8
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  store i8 %962, i8* %5, align 1, !tbaa !2446
  %963 = xor i64 %953, %954
  %964 = lshr i64 %963, 4
  %965 = trunc i64 %964 to i8
  %966 = and i8 %965, 1
  store i8 %966, i8* %6, align 1, !tbaa !2447
  %967 = icmp eq i64 %954, 0
  %968 = zext i1 %967 to i8
  store i8 %968, i8* %7, align 1, !tbaa !2448
  %969 = lshr i64 %954, 63
  %970 = trunc i64 %969 to i8
  store i8 %970, i8* %8, align 1, !tbaa !2449
  %971 = lshr i64 %953, 63
  %972 = xor i64 %969, %971
  %973 = add nuw nsw i64 %972, %969
  %974 = icmp eq i64 %973, 2
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %9, align 1, !tbaa !2450
  %976 = add i64 %950, 15
  store i64 %976, i64* %PC, align 8
  store i64 %954, i64* %952, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_4007cb
  %.sink10 = phi i64 [ 1101, %block_400986 ], [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 651, %block_4007cb ]
  %MEMORY.1 = phi %struct.Memory* [ %1233, %block_400986 ], [ %1189, %block_40088c ], [ %1145, %block_400792 ], [ %1101, %block_400b16 ], [ %1057, %block_400698 ], [ %1013, %block_400a1c ], [ %947, %block_40059e ], [ %903, %block_400922 ], [ %859, %block_400828 ], [ %815, %block_40072e ], [ %736, %block_400ab2 ], [ %692, %block_400634 ], [ %648, %block_4009b8 ], [ %598, %block_400b48 ], [ %554, %block_4006ca ], [ %468, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %510, %block_4007cb ]
  %977 = bitcast i64* %RAX to i32**
  %978 = load i32*, i32** %977, align 8
  %979 = load i64, i64* %PC, align 8
  %980 = add i64 %979, 3
  store i64 %980, i64* %PC, align 8
  %981 = load i32, i32* %978, align 4
  %982 = sext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = shl nsw i64 %982, 3
  %984 = add i64 %983, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %985 = add i64 %979, 11
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = load i64, i64* %RBP, align 8
  %989 = add i64 %988, -40
  %990 = add i64 %979, 15
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %987, i64* %991, align 8
  %992 = load i64, i64* %PC, align 8
  %993 = sub i64 %992, %.sink10
  %994 = load i64, i64* %RBP, align 8
  %995 = add i64 %994, -40
  %996 = add i64 %993, 4
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i64*
  %998 = load i64, i64* %997, align 8
  store i64 %998, i64* %RAX, align 8, !tbaa !2428
  store i64 %998, i64* %PC, align 8, !tbaa !2428
  switch i64 %998, label %1271 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %999 = add i64 %994, -12
  store i64 4196899, i64* %PC, align 8
  %1000 = inttoptr i64 %999 to i32*
  store i32 25, i32* %1000, align 4
  %1001 = load i64, i64* %RBP, align 8
  %1002 = add i64 %1001, -12
  %1003 = load i64, i64* %PC, align 8
  %1004 = add i64 %1003, 3
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1002 to i32*
  %1006 = load i32, i32* %1005, align 4
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RDI, align 8, !tbaa !2428
  %1008 = add i64 %1003, -1331
  %1009 = add i64 %1003, 8
  %1010 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1011 = add i64 %1010, -8
  %1012 = inttoptr i64 %1011 to i64*
  store i64 %1009, i64* %1012, align 8
  store i64 %1011, i64* %RSP, align 8, !tbaa !2428
  store i64 %1008, i64* %PC, align 8, !tbaa !2428
  %1013 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1008, %struct.Memory* %MEMORY.1)
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -8
  %1016 = load i64, i64* %PC, align 8
  %1017 = add i64 %1016, 4
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1015 to i64*
  %1019 = load i64, i64* %1018, align 8
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = add i64 %1019, 4
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = icmp ugt i64 %1019, -5
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %4, align 1, !tbaa !2432
  %1023 = trunc i64 %1020 to i32
  %1024 = and i32 %1023, 255
  %1025 = tail call i32 @llvm.ctpop.i32(i32 %1024) #8
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  store i8 %1028, i8* %5, align 1, !tbaa !2446
  %1029 = xor i64 %1019, %1020
  %1030 = lshr i64 %1029, 4
  %1031 = trunc i64 %1030 to i8
  %1032 = and i8 %1031, 1
  store i8 %1032, i8* %6, align 1, !tbaa !2447
  %1033 = icmp eq i64 %1020, 0
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %7, align 1, !tbaa !2448
  %1035 = lshr i64 %1020, 63
  %1036 = trunc i64 %1035 to i8
  store i8 %1036, i8* %8, align 1, !tbaa !2449
  %1037 = lshr i64 %1019, 63
  %1038 = xor i64 %1035, %1037
  %1039 = add nuw nsw i64 %1038, %1035
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %9, align 1, !tbaa !2450
  %1042 = add i64 %1016, 15
  store i64 %1042, i64* %PC, align 8
  store i64 %1020, i64* %1018, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1043 = add i64 %994, -12
  store i64 4195999, i64* %PC, align 8
  %1044 = inttoptr i64 %1043 to i32*
  store i32 7, i32* %1044, align 4
  %1045 = load i64, i64* %RBP, align 8
  %1046 = add i64 %1045, -12
  %1047 = load i64, i64* %PC, align 8
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049, align 4
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RDI, align 8, !tbaa !2428
  %1052 = add i64 %1047, -431
  %1053 = add i64 %1047, 8
  %1054 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1055 = add i64 %1054, -8
  %1056 = inttoptr i64 %1055 to i64*
  store i64 %1053, i64* %1056, align 8
  store i64 %1055, i64* %RSP, align 8, !tbaa !2428
  store i64 %1052, i64* %PC, align 8, !tbaa !2428
  %1057 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1052, %struct.Memory* %MEMORY.1)
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -8
  %1060 = load i64, i64* %PC, align 8
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RAX, align 8, !tbaa !2428
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = icmp ugt i64 %1063, -5
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %4, align 1, !tbaa !2432
  %1067 = trunc i64 %1064 to i32
  %1068 = and i32 %1067, 255
  %1069 = tail call i32 @llvm.ctpop.i32(i32 %1068) #8
  %1070 = trunc i32 %1069 to i8
  %1071 = and i8 %1070, 1
  %1072 = xor i8 %1071, 1
  store i8 %1072, i8* %5, align 1, !tbaa !2446
  %1073 = xor i64 %1063, %1064
  %1074 = lshr i64 %1073, 4
  %1075 = trunc i64 %1074 to i8
  %1076 = and i8 %1075, 1
  store i8 %1076, i8* %6, align 1, !tbaa !2447
  %1077 = icmp eq i64 %1064, 0
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %7, align 1, !tbaa !2448
  %1079 = lshr i64 %1064, 63
  %1080 = trunc i64 %1079 to i8
  store i8 %1080, i8* %8, align 1, !tbaa !2449
  %1081 = lshr i64 %1063, 63
  %1082 = xor i64 %1079, %1081
  %1083 = add nuw nsw i64 %1082, %1079
  %1084 = icmp eq i64 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %9, align 1, !tbaa !2450
  %1086 = add i64 %1060, 15
  store i64 %1086, i64* %PC, align 8
  store i64 %1064, i64* %1062, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1087 = add i64 %994, -12
  store i64 4197149, i64* %PC, align 8
  %1088 = inttoptr i64 %1087 to i32*
  store i32 30, i32* %1088, align 4
  %1089 = load i64, i64* %RBP, align 8
  %1090 = add i64 %1089, -12
  %1091 = load i64, i64* %PC, align 8
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093, align 4
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RDI, align 8, !tbaa !2428
  %1096 = add i64 %1091, -1581
  %1097 = add i64 %1091, 8
  %1098 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1099 = add i64 %1098, -8
  %1100 = inttoptr i64 %1099 to i64*
  store i64 %1097, i64* %1100, align 8
  store i64 %1099, i64* %RSP, align 8, !tbaa !2428
  store i64 %1096, i64* %PC, align 8, !tbaa !2428
  %1101 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1096, %struct.Memory* %MEMORY.1)
  %1102 = load i64, i64* %RBP, align 8
  %1103 = add i64 %1102, -8
  %1104 = load i64, i64* %PC, align 8
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1103 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %RCX, align 8, !tbaa !2428
  %1109 = icmp ugt i64 %1107, -5
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %4, align 1, !tbaa !2432
  %1111 = trunc i64 %1108 to i32
  %1112 = and i32 %1111, 255
  %1113 = tail call i32 @llvm.ctpop.i32(i32 %1112) #8
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  store i8 %1116, i8* %5, align 1, !tbaa !2446
  %1117 = xor i64 %1107, %1108
  %1118 = lshr i64 %1117, 4
  %1119 = trunc i64 %1118 to i8
  %1120 = and i8 %1119, 1
  store i8 %1120, i8* %6, align 1, !tbaa !2447
  %1121 = icmp eq i64 %1108, 0
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %7, align 1, !tbaa !2448
  %1123 = lshr i64 %1108, 63
  %1124 = trunc i64 %1123 to i8
  store i8 %1124, i8* %8, align 1, !tbaa !2449
  %1125 = lshr i64 %1107, 63
  %1126 = xor i64 %1123, %1125
  %1127 = add nuw nsw i64 %1126, %1123
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %9, align 1, !tbaa !2450
  %1130 = add i64 %1104, 15
  store i64 %1130, i64* %PC, align 8
  store i64 %1108, i64* %1106, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1131 = add i64 %994, -12
  store i64 4196249, i64* %PC, align 8
  %1132 = inttoptr i64 %1131 to i32*
  store i32 12, i32* %1132, align 4
  %1133 = load i64, i64* %RBP, align 8
  %1134 = add i64 %1133, -12
  %1135 = load i64, i64* %PC, align 8
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1134 to i32*
  %1138 = load i32, i32* %1137, align 4
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* %RDI, align 8, !tbaa !2428
  %1140 = add i64 %1135, -681
  %1141 = add i64 %1135, 8
  %1142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1143 = add i64 %1142, -8
  %1144 = inttoptr i64 %1143 to i64*
  store i64 %1141, i64* %1144, align 8
  store i64 %1143, i64* %RSP, align 8, !tbaa !2428
  store i64 %1140, i64* %PC, align 8, !tbaa !2428
  %1145 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1140, %struct.Memory* %MEMORY.1)
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -8
  %1148 = load i64, i64* %PC, align 8
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1147 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %RAX, align 8, !tbaa !2428
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %RCX, align 8, !tbaa !2428
  %1153 = icmp ugt i64 %1151, -5
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %4, align 1, !tbaa !2432
  %1155 = trunc i64 %1152 to i32
  %1156 = and i32 %1155, 255
  %1157 = tail call i32 @llvm.ctpop.i32(i32 %1156) #8
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  store i8 %1160, i8* %5, align 1, !tbaa !2446
  %1161 = xor i64 %1151, %1152
  %1162 = lshr i64 %1161, 4
  %1163 = trunc i64 %1162 to i8
  %1164 = and i8 %1163, 1
  store i8 %1164, i8* %6, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1152, 0
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %7, align 1, !tbaa !2448
  %1167 = lshr i64 %1152, 63
  %1168 = trunc i64 %1167 to i8
  store i8 %1168, i8* %8, align 1, !tbaa !2449
  %1169 = lshr i64 %1151, 63
  %1170 = xor i64 %1167, %1169
  %1171 = add nuw nsw i64 %1170, %1167
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %9, align 1, !tbaa !2450
  %1174 = add i64 %1148, 15
  store i64 %1174, i64* %PC, align 8
  store i64 %1152, i64* %1150, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1175 = add i64 %994, -12
  store i64 4196499, i64* %PC, align 8
  %1176 = inttoptr i64 %1175 to i32*
  store i32 17, i32* %1176, align 4
  %1177 = load i64, i64* %RBP, align 8
  %1178 = add i64 %1177, -12
  %1179 = load i64, i64* %PC, align 8
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC, align 8
  %1181 = inttoptr i64 %1178 to i32*
  %1182 = load i32, i32* %1181, align 4
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RDI, align 8, !tbaa !2428
  %1184 = add i64 %1179, -931
  %1185 = add i64 %1179, 8
  %1186 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1187 = add i64 %1186, -8
  %1188 = inttoptr i64 %1187 to i64*
  store i64 %1185, i64* %1188, align 8
  store i64 %1187, i64* %RSP, align 8, !tbaa !2428
  store i64 %1184, i64* %PC, align 8, !tbaa !2428
  %1189 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1184, %struct.Memory* %MEMORY.1)
  %1190 = load i64, i64* %RBP, align 8
  %1191 = add i64 %1190, -8
  %1192 = load i64, i64* %PC, align 8
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC, align 8
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194, align 8
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %RCX, align 8, !tbaa !2428
  %1197 = icmp ugt i64 %1195, -5
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %4, align 1, !tbaa !2432
  %1199 = trunc i64 %1196 to i32
  %1200 = and i32 %1199, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #8
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %5, align 1, !tbaa !2446
  %1205 = xor i64 %1195, %1196
  %1206 = lshr i64 %1205, 4
  %1207 = trunc i64 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %6, align 1, !tbaa !2447
  %1209 = icmp eq i64 %1196, 0
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %7, align 1, !tbaa !2448
  %1211 = lshr i64 %1196, 63
  %1212 = trunc i64 %1211 to i8
  store i8 %1212, i8* %8, align 1, !tbaa !2449
  %1213 = lshr i64 %1195, 63
  %1214 = xor i64 %1211, %1213
  %1215 = add nuw nsw i64 %1214, %1211
  %1216 = icmp eq i64 %1215, 2
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %9, align 1, !tbaa !2450
  %1218 = add i64 %1192, 15
  store i64 %1218, i64* %PC, align 8
  store i64 %1196, i64* %1194, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1219 = add i64 %994, -12
  store i64 4196749, i64* %PC, align 8
  %1220 = inttoptr i64 %1219 to i32*
  store i32 22, i32* %1220, align 4
  %1221 = load i64, i64* %RBP, align 8
  %1222 = add i64 %1221, -12
  %1223 = load i64, i64* %PC, align 8
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1222 to i32*
  %1226 = load i32, i32* %1225, align 4
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RDI, align 8, !tbaa !2428
  %1228 = add i64 %1223, -1181
  %1229 = add i64 %1223, 8
  %1230 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1231 = add i64 %1230, -8
  %1232 = inttoptr i64 %1231 to i64*
  store i64 %1229, i64* %1232, align 8
  store i64 %1231, i64* %RSP, align 8, !tbaa !2428
  store i64 %1228, i64* %PC, align 8, !tbaa !2428
  %1233 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1228, %struct.Memory* %MEMORY.1)
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -8
  %1236 = load i64, i64* %PC, align 8
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238, align 8
  store i64 %1239, i64* %RAX, align 8, !tbaa !2428
  %1240 = add i64 %1239, 4
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = icmp ugt i64 %1239, -5
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %4, align 1, !tbaa !2432
  %1243 = trunc i64 %1240 to i32
  %1244 = and i32 %1243, 255
  %1245 = tail call i32 @llvm.ctpop.i32(i32 %1244) #8
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  store i8 %1248, i8* %5, align 1, !tbaa !2446
  %1249 = xor i64 %1239, %1240
  %1250 = lshr i64 %1249, 4
  %1251 = trunc i64 %1250 to i8
  %1252 = and i8 %1251, 1
  store i8 %1252, i8* %6, align 1, !tbaa !2447
  %1253 = icmp eq i64 %1240, 0
  %1254 = zext i1 %1253 to i8
  store i8 %1254, i8* %7, align 1, !tbaa !2448
  %1255 = lshr i64 %1240, 63
  %1256 = trunc i64 %1255 to i8
  store i8 %1256, i8* %8, align 1, !tbaa !2449
  %1257 = lshr i64 %1239, 63
  %1258 = xor i64 %1255, %1257
  %1259 = add nuw nsw i64 %1258, %1255
  %1260 = icmp eq i64 %1259, 2
  %1261 = zext i1 %1260 to i8
  store i8 %1261, i8* %9, align 1, !tbaa !2450
  %1262 = add i64 %1236, 15
  store i64 %1262, i64* %PC, align 8
  store i64 %1240, i64* %1238, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1263 = add i64 %994, -12
  store i64 4195849, i64* %PC, align 8
  %1264 = inttoptr i64 %1263 to i32*
  store i32 4, i32* %1264, align 4
  %1265 = load i64, i64* %PC, align 8
  %1266 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1265, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1266

block_400a80:                                     ; preds = %block_400566
  %1267 = add i64 %994, -12
  store i64 4196999, i64* %PC, align 8
  %1268 = inttoptr i64 %1267 to i32*
  store i32 27, i32* %1268, align 4
  %1269 = load i64, i64* %PC, align 8
  %1270 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1269, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1270

; <label>:1271:                                   ; preds = %block_400566
  %1272 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %998, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1272
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i64 0, i32 0, i64 0), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4004b9, label %block_4004d0

block_4004d0:                                     ; preds = %block_4004b0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004b9:                                     ; preds = %block_4004b0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i64 0, i32 0, i64 0), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ab9(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400ab9

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %166, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %14

block_4008f0:                                     ; preds = %block_400566
  %15 = add i64 %166, -12
  store i64 4196599, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 19, i32* %16, align 4
  %17 = load i64, i64* %PC, align 8
  %18 = tail call %struct.Memory* @sub_4008f7(%struct.State* nonnull %0, i64 %17, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %18

block_400ae4:                                     ; preds = %block_400566
  %19 = add i64 %166, -12
  store i64 4197099, i64* %PC, align 8
  %20 = inttoptr i64 %19 to i32*
  store i32 29, i32* %20, align 4
  %21 = load i64, i64* %PC, align 8
  %22 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %21, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %22

block_4005d0:                                     ; preds = %block_400566
  %23 = add i64 %166, -12
  store i64 4195799, i64* %PC, align 8
  %24 = inttoptr i64 %23 to i32*
  store i32 3, i32* %24, align 4
  %25 = load i64, i64* %PC, align 8
  %26 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %25, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %26

block_4007c4:                                     ; preds = %block_400566
  %27 = add i64 %166, -12
  store i64 4196299, i64* %PC, align 8
  %28 = inttoptr i64 %27 to i32*
  store i32 13, i32* %28, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %29, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %30

block_4008be:                                     ; preds = %block_400566
  %31 = add i64 %166, -12
  store i64 4196549, i64* %PC, align 8
  %32 = inttoptr i64 %31 to i32*
  store i32 18, i32* %32, align 4
  %33 = load i64, i64* %PC, align 8
  %34 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %33, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %34

block_4009b8:                                     ; preds = %block_400566
  %35 = add i64 %166, -12
  store i64 4196799, i64* %PC, align 8
  %36 = inttoptr i64 %35 to i32*
  store i32 23, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -12
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %RDI, align 8, !tbaa !2428
  %44 = add i64 %39, -1231
  %45 = add i64 %39, 8
  %46 = load i64, i64* %4, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48, align 8
  store i64 %47, i64* %4, align 8, !tbaa !2428
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %49 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %MEMORY.0)
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %55, 4
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ugt i64 %55, -5
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %5, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #8
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %6, align 1, !tbaa !2446
  %65 = xor i64 %55, %56
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %7, align 1, !tbaa !2447
  %69 = icmp eq i64 %56, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %8, align 1, !tbaa !2448
  %71 = lshr i64 %56, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %9, align 1, !tbaa !2449
  %73 = lshr i64 %55, 63
  %74 = xor i64 %71, %73
  %75 = add nuw nsw i64 %74, %71
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %10, align 1, !tbaa !2450
  %78 = add i64 %52, 15
  store i64 %78, i64* %PC, align 8
  store i64 %56, i64* %54, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %79 = add i64 %166, -12
  store i64 4197049, i64* %PC, align 8
  %80 = inttoptr i64 %79 to i32*
  store i32 28, i32* %80, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400ab9

block_400698:                                     ; preds = %block_400566
  %81 = add i64 %166, -12
  store i64 4195999, i64* %PC, align 8
  %82 = inttoptr i64 %81 to i32*
  store i32 7, i32* %82, align 4
  %83 = load i64, i64* %PC, align 8
  %84 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %83, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %84

block_400792:                                     ; preds = %block_400566
  %85 = add i64 %166, -12
  store i64 4196249, i64* %PC, align 8
  %86 = inttoptr i64 %85 to i32*
  store i32 12, i32* %86, align 4
  %87 = load i64, i64* %PC, align 8
  %88 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %87, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %88

block_40088c:                                     ; preds = %block_400566
  %89 = add i64 %166, -12
  store i64 4196499, i64* %PC, align 8
  %90 = inttoptr i64 %89 to i32*
  store i32 17, i32* %90, align 4
  %91 = load i64, i64* %PC, align 8
  %92 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %91, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %92

block_400986:                                     ; preds = %block_400566
  %93 = add i64 %166, -12
  store i64 4196749, i64* %PC, align 8
  %94 = inttoptr i64 %93 to i32*
  store i32 22, i32* %94, align 4
  %95 = load i64, i64* %PC, align 8
  %96 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %95, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %96

block_400a80:                                     ; preds = %block_400566
  %97 = add i64 %166, -12
  store i64 4196999, i64* %PC, align 8
  %98 = inttoptr i64 %97 to i32*
  store i32 27, i32* %98, align 4
  %99 = load i64, i64* %PC, align 8
  %100 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %99, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %100

block_40056c:                                     ; preds = %block_400566
  %101 = add i64 %166, -12
  store i64 4195699, i64* %PC, align 8
  %102 = inttoptr i64 %101 to i32*
  store i32 1, i32* %102, align 4
  %103 = load i64, i64* %PC, align 8
  %104 = tail call %struct.Memory* @sub_400573(%struct.State* nonnull %0, i64 %103, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %104

block_4007f6:                                     ; preds = %block_400566
  %105 = add i64 %166, -12
  store i64 4196349, i64* %PC, align 8
  %106 = inttoptr i64 %105 to i32*
  store i32 14, i32* %106, align 4
  %107 = load i64, i64* %RBP, align 8
  %108 = add i64 %107, -12
  %109 = load i64, i64* %PC, align 8
  %110 = add i64 %109, 3
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %108 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = zext i32 %112 to i64
  store i64 %113, i64* %RDI, align 8, !tbaa !2428
  %114 = add i64 %109, -781
  %115 = add i64 %109, 8
  %116 = load i64, i64* %4, align 8, !tbaa !2428
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118, align 8
  store i64 %117, i64* %4, align 8, !tbaa !2428
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %119 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %MEMORY.0)
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -8
  %122 = load i64, i64* %PC, align 8
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RAX, align 8, !tbaa !2428
  %126 = add i64 %125, 4
  store i64 %126, i64* %RCX, align 8, !tbaa !2428
  %127 = icmp ugt i64 %125, -5
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %5, align 1, !tbaa !2432
  %129 = trunc i64 %126 to i32
  %130 = and i32 %129, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %6, align 1, !tbaa !2446
  %135 = xor i64 %125, %126
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %7, align 1, !tbaa !2447
  %139 = icmp eq i64 %126, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %8, align 1, !tbaa !2448
  %141 = lshr i64 %126, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %9, align 1, !tbaa !2449
  %143 = lshr i64 %125, 63
  %144 = xor i64 %141, %143
  %145 = add nuw nsw i64 %144, %141
  %146 = icmp eq i64 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %10, align 1, !tbaa !2450
  %148 = add i64 %122, 15
  store i64 %148, i64* %PC, align 8
  store i64 %126, i64* %124, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400634, %block_4007f6, %block_4009b8, %block_400ab9
  %.sink33 = phi i64 [ 251, %block_400634 ], [ 701, %block_4007f6 ], [ 1151, %block_4009b8 ], [ 1401, %block_400ab9 ]
  %MEMORY.0 = phi %struct.Memory* [ %263, %block_400634 ], [ %119, %block_4007f6 ], [ %49, %block_4009b8 ], [ %183, %block_400ab9 ]
  %149 = bitcast i64* %RAX to i32**
  %150 = load i32*, i32** %149, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = load i32, i32* %150, align 4
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = shl nsw i64 %154, 3
  %156 = add i64 %155, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %157 = add i64 %151, 11
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -40
  %162 = add i64 %151, 15
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %163, align 8
  %164 = load i64, i64* %PC, align 8
  %165 = sub i64 %164, %.sink33
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -40
  %168 = add i64 %165, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  switch i64 %170, label %321 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400ab9:                                     ; preds = %block_400ab2, %3
  %171 = phi i64 [ %1, %3 ], [ %.pre, %block_400ab2 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400ab2 ]
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -12
  %174 = add i64 %171, 3
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = zext i32 %176 to i64
  store i64 %177, i64* %RDI, align 8, !tbaa !2428
  %178 = add i64 %171, -1481
  %179 = add i64 %171, 8
  %180 = load i64, i64* %4, align 8, !tbaa !2428
  %181 = add i64 %180, -8
  %182 = inttoptr i64 %181 to i64*
  store i64 %179, i64* %182, align 8
  store i64 %181, i64* %4, align 8, !tbaa !2428
  store i64 %178, i64* %PC, align 8, !tbaa !2428
  %183 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %178, %struct.Memory* %MEMORY.1)
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -8
  %186 = load i64, i64* %PC, align 8
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %RAX, align 8, !tbaa !2428
  %190 = add i64 %189, 4
  store i64 %190, i64* %RCX, align 8, !tbaa !2428
  %191 = icmp ugt i64 %189, -5
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %5, align 1, !tbaa !2432
  %193 = trunc i64 %190 to i32
  %194 = and i32 %193, 255
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #8
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  store i8 %198, i8* %6, align 1, !tbaa !2446
  %199 = xor i64 %189, %190
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  store i8 %202, i8* %7, align 1, !tbaa !2447
  %203 = icmp eq i64 %190, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %8, align 1, !tbaa !2448
  %205 = lshr i64 %190, 63
  %206 = trunc i64 %205 to i8
  store i8 %206, i8* %9, align 1, !tbaa !2449
  %207 = lshr i64 %189, 63
  %208 = xor i64 %205, %207
  %209 = add nuw nsw i64 %208, %205
  %210 = icmp eq i64 %209, 2
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %10, align 1, !tbaa !2450
  %212 = add i64 %186, 15
  store i64 %212, i64* %PC, align 8
  store i64 %190, i64* %188, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %213 = add i64 %166, -12
  store i64 4195949, i64* %PC, align 8
  %214 = inttoptr i64 %213 to i32*
  store i32 6, i32* %214, align 4
  %215 = load i64, i64* %PC, align 8
  %216 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %215, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %216

block_40085a:                                     ; preds = %block_400566
  %217 = add i64 %166, -12
  store i64 4196449, i64* %PC, align 8
  %218 = inttoptr i64 %217 to i32*
  store i32 16, i32* %218, align 4
  %219 = load i64, i64* %PC, align 8
  %220 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %219, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %220

block_4006ca:                                     ; preds = %block_400566
  %221 = add i64 %166, -12
  store i64 4196049, i64* %PC, align 8
  %222 = inttoptr i64 %221 to i32*
  store i32 8, i32* %222, align 4
  %223 = load i64, i64* %PC, align 8
  %224 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %223, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %224

block_400559:                                     ; preds = %block_400566
  %225 = add i64 %166, -12
  store i64 4195680, i64* %PC, align 8
  %226 = inttoptr i64 %225 to i32*
  store i32 0, i32* %226, align 4
  %227 = load i64, i64* %PC, align 8
  %228 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %227, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %228

block_400954:                                     ; preds = %block_400566
  %229 = add i64 %166, -12
  store i64 4196699, i64* %PC, align 8
  %230 = inttoptr i64 %229 to i32*
  store i32 21, i32* %230, align 4
  %231 = load i64, i64* %PC, align 8
  %232 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %231, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %232

block_400a4e:                                     ; preds = %block_400566
  %233 = add i64 %166, -12
  store i64 4196949, i64* %PC, align 8
  %234 = inttoptr i64 %233 to i32*
  store i32 26, i32* %234, align 4
  %235 = load i64, i64* %PC, align 8
  %236 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %235, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %236

block_400760:                                     ; preds = %block_400566
  %237 = add i64 %166, -12
  store i64 4196199, i64* %PC, align 8
  %238 = inttoptr i64 %237 to i32*
  store i32 11, i32* %238, align 4
  %239 = load i64, i64* %PC, align 8
  %240 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %239, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %240

block_400b48:                                     ; preds = %block_400566
  %241 = add i64 %166, -12
  store i64 4197199, i64* %PC, align 8
  %242 = inttoptr i64 %241 to i32*
  store i32 31, i32* %242, align 4
  %243 = load i64, i64* %PC, align 8
  %244 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %244

block_4009ea:                                     ; preds = %block_400566
  %245 = add i64 %166, -12
  store i64 4196849, i64* %PC, align 8
  %246 = inttoptr i64 %245 to i32*
  store i32 24, i32* %246, align 4
  %247 = load i64, i64* %PC, align 8
  %248 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %247, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %248

block_400634:                                     ; preds = %block_400566
  %249 = add i64 %166, -12
  store i64 4195899, i64* %PC, align 8
  %250 = inttoptr i64 %249 to i32*
  store i32 5, i32* %250, align 4
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -12
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDI, align 8, !tbaa !2428
  %258 = add i64 %253, -331
  %259 = add i64 %253, 8
  %260 = load i64, i64* %4, align 8, !tbaa !2428
  %261 = add i64 %260, -8
  %262 = inttoptr i64 %261 to i64*
  store i64 %259, i64* %262, align 8
  store i64 %261, i64* %4, align 8, !tbaa !2428
  store i64 %258, i64* %PC, align 8, !tbaa !2428
  %263 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %258, %struct.Memory* %MEMORY.0)
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, 4
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %265 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %RAX, align 8, !tbaa !2428
  %270 = add i64 %269, 4
  store i64 %270, i64* %RCX, align 8, !tbaa !2428
  %271 = icmp ugt i64 %269, -5
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %5, align 1, !tbaa !2432
  %273 = trunc i64 %270 to i32
  %274 = and i32 %273, 255
  %275 = tail call i32 @llvm.ctpop.i32(i32 %274) #8
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  store i8 %278, i8* %6, align 1, !tbaa !2446
  %279 = xor i64 %269, %270
  %280 = lshr i64 %279, 4
  %281 = trunc i64 %280 to i8
  %282 = and i8 %281, 1
  store i8 %282, i8* %7, align 1, !tbaa !2447
  %283 = icmp eq i64 %270, 0
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %8, align 1, !tbaa !2448
  %285 = lshr i64 %270, 63
  %286 = trunc i64 %285 to i8
  store i8 %286, i8* %9, align 1, !tbaa !2449
  %287 = lshr i64 %269, 63
  %288 = xor i64 %285, %287
  %289 = add nuw nsw i64 %288, %285
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %10, align 1, !tbaa !2450
  %292 = add i64 %266, 15
  store i64 %292, i64* %PC, align 8
  store i64 %270, i64* %268, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %293 = add i64 %166, -12
  store i64 4196149, i64* %PC, align 8
  %294 = inttoptr i64 %293 to i32*
  store i32 10, i32* %294, align 4
  %295 = load i64, i64* %PC, align 8
  %296 = tail call %struct.Memory* @sub_400735(%struct.State* nonnull %0, i64 %295, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %296

block_400828:                                     ; preds = %block_400566
  %297 = add i64 %166, -12
  store i64 4196399, i64* %PC, align 8
  %298 = inttoptr i64 %297 to i32*
  store i32 15, i32* %298, align 4
  %299 = load i64, i64* %PC, align 8
  %300 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %299, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %300

block_40059e:                                     ; preds = %block_400566
  %301 = add i64 %166, -12
  store i64 4195749, i64* %PC, align 8
  %302 = inttoptr i64 %301 to i32*
  store i32 2, i32* %302, align 4
  %303 = load i64, i64* %PC, align 8
  %304 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %303, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %304

block_400922:                                     ; preds = %block_400566
  %305 = add i64 %166, -12
  store i64 4196649, i64* %PC, align 8
  %306 = inttoptr i64 %305 to i32*
  store i32 20, i32* %306, align 4
  %307 = load i64, i64* %PC, align 8
  %308 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %308

block_400a1c:                                     ; preds = %block_400566
  %309 = add i64 %166, -12
  store i64 4196899, i64* %PC, align 8
  %310 = inttoptr i64 %309 to i32*
  store i32 25, i32* %310, align 4
  %311 = load i64, i64* %PC, align 8
  %312 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %311, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %312

block_400b16:                                     ; preds = %block_400566
  %313 = add i64 %166, -12
  store i64 4197149, i64* %PC, align 8
  %314 = inttoptr i64 %313 to i32*
  store i32 30, i32* %314, align 4
  %315 = load i64, i64* %PC, align 8
  %316 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %316

block_400602:                                     ; preds = %block_400566
  %317 = add i64 %166, -12
  store i64 4195849, i64* %PC, align 8
  %318 = inttoptr i64 %317 to i32*
  store i32 4, i32* %318, align 4
  %319 = load i64, i64* %PC, align 8
  %320 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %319, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %320

; <label>:321:                                    ; preds = %block_400566
  %322 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %170, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %322
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b4f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400b4f

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %954, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %954, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.1)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %954, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.1)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %954, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.1)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %954, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.1)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %954, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.1)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %954, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.1)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %954, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.1)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %954, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.1)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %954, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.1)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %954, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.1)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400b4f:                                     ; preds = %block_400b48, %3
  %454 = phi i64 [ %1, %3 ], [ %.pre, %block_400b48 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400b48 ]
  %455 = load i64, i64* %RBP, align 8
  %456 = add i64 %455, -12
  %457 = add i64 %454, 3
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %456 to i32*
  %459 = load i32, i32* %458, align 4
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RDI, align 8, !tbaa !2428
  %461 = add i64 %454, -1631
  %462 = add i64 %454, 8
  %463 = load i64, i64* %RSP, align 8, !tbaa !2428
  %464 = add i64 %463, -8
  %465 = inttoptr i64 %464 to i64*
  store i64 %462, i64* %465, align 8
  store i64 %464, i64* %RSP, align 8, !tbaa !2428
  store i64 %461, i64* %PC, align 8, !tbaa !2428
  %466 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %461, %struct.Memory* %MEMORY.0)
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -8
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %468 to i64*
  %472 = load i64, i64* %471, align 8
  store i64 %472, i64* %RAX, align 8, !tbaa !2428
  %473 = add i64 %472, 4
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = icmp ugt i64 %472, -5
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %4, align 1, !tbaa !2432
  %476 = trunc i64 %473 to i32
  %477 = and i32 %476, 255
  %478 = tail call i32 @llvm.ctpop.i32(i32 %477) #8
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  store i8 %481, i8* %5, align 1, !tbaa !2446
  %482 = xor i64 %472, %473
  %483 = lshr i64 %482, 4
  %484 = trunc i64 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %6, align 1, !tbaa !2447
  %486 = icmp eq i64 %473, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %7, align 1, !tbaa !2448
  %488 = lshr i64 %473, 63
  %489 = trunc i64 %488 to i8
  store i8 %489, i8* %8, align 1, !tbaa !2449
  %490 = lshr i64 %472, 63
  %491 = xor i64 %488, %490
  %492 = add nuw nsw i64 %491, %488
  %493 = icmp eq i64 %492, 2
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %9, align 1, !tbaa !2450
  %495 = add i64 %469, 15
  store i64 %495, i64* %PC, align 8
  store i64 %473, i64* %471, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %496 = add i64 %954, -12
  store i64 4196949, i64* %PC, align 8
  %497 = inttoptr i64 %496 to i32*
  store i32 26, i32* %497, align 4
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -12
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 3
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDI, align 8, !tbaa !2428
  %505 = add i64 %500, -1381
  %506 = add i64 %500, 8
  %507 = load i64, i64* %RSP, align 8, !tbaa !2428
  %508 = add i64 %507, -8
  %509 = inttoptr i64 %508 to i64*
  store i64 %506, i64* %509, align 8
  store i64 %508, i64* %RSP, align 8, !tbaa !2428
  store i64 %505, i64* %PC, align 8, !tbaa !2428
  %510 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %505, %struct.Memory* %MEMORY.1)
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -8
  %513 = load i64, i64* %PC, align 8
  %514 = add i64 %513, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %512 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %516, 4
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = icmp ugt i64 %516, -5
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %4, align 1, !tbaa !2432
  %520 = trunc i64 %517 to i32
  %521 = and i32 %520, 255
  %522 = tail call i32 @llvm.ctpop.i32(i32 %521) #8
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  store i8 %525, i8* %5, align 1, !tbaa !2446
  %526 = xor i64 %516, %517
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  store i8 %529, i8* %6, align 1, !tbaa !2447
  %530 = icmp eq i64 %517, 0
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %7, align 1, !tbaa !2448
  %532 = lshr i64 %517, 63
  %533 = trunc i64 %532 to i8
  store i8 %533, i8* %8, align 1, !tbaa !2449
  %534 = lshr i64 %516, 63
  %535 = xor i64 %532, %534
  %536 = add nuw nsw i64 %535, %532
  %537 = icmp eq i64 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %9, align 1, !tbaa !2450
  %539 = add i64 %513, 15
  store i64 %539, i64* %PC, align 8
  store i64 %517, i64* %515, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %540 = add i64 %954, -12
  store i64 4196049, i64* %PC, align 8
  %541 = inttoptr i64 %540 to i32*
  store i32 8, i32* %541, align 4
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -12
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 3
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %RDI, align 8, !tbaa !2428
  %549 = add i64 %544, -481
  %550 = add i64 %544, 8
  %551 = load i64, i64* %RSP, align 8, !tbaa !2428
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %550, i64* %553, align 8
  store i64 %552, i64* %RSP, align 8, !tbaa !2428
  store i64 %549, i64* %PC, align 8, !tbaa !2428
  %554 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %549, %struct.Memory* %MEMORY.1)
  %555 = load i64, i64* %RBP, align 8
  %556 = add i64 %555, -8
  %557 = load i64, i64* %PC, align 8
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = add i64 %560, 4
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = icmp ugt i64 %560, -5
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %4, align 1, !tbaa !2432
  %564 = trunc i64 %561 to i32
  %565 = and i32 %564, 255
  %566 = tail call i32 @llvm.ctpop.i32(i32 %565) #8
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  store i8 %569, i8* %5, align 1, !tbaa !2446
  %570 = xor i64 %560, %561
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  store i8 %573, i8* %6, align 1, !tbaa !2447
  %574 = icmp eq i64 %561, 0
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %7, align 1, !tbaa !2448
  %576 = lshr i64 %561, 63
  %577 = trunc i64 %576 to i8
  store i8 %577, i8* %8, align 1, !tbaa !2449
  %578 = lshr i64 %560, 63
  %579 = xor i64 %576, %578
  %580 = add nuw nsw i64 %579, %576
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %9, align 1, !tbaa !2450
  %583 = add i64 %557, 15
  store i64 %583, i64* %PC, align 8
  store i64 %561, i64* %559, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %584 = add i64 %954, -12
  store i64 4197199, i64* %PC, align 8
  %585 = inttoptr i64 %584 to i32*
  store i32 31, i32* %585, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400b4f

block_4007c4:                                     ; preds = %block_400566
  %586 = add i64 %954, -12
  store i64 4196299, i64* %PC, align 8
  %587 = inttoptr i64 %586 to i32*
  store i32 13, i32* %587, align 4
  %588 = load i64, i64* %PC, align 8
  %589 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %588, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %589

block_4008be:                                     ; preds = %block_400566
  %590 = add i64 %954, -12
  store i64 4196549, i64* %PC, align 8
  %591 = inttoptr i64 %590 to i32*
  store i32 18, i32* %591, align 4
  %592 = load i64, i64* %PC, align 8
  %593 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %592, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %593

block_4009b8:                                     ; preds = %block_400566
  %594 = add i64 %954, -12
  store i64 4196799, i64* %PC, align 8
  %595 = inttoptr i64 %594 to i32*
  store i32 23, i32* %595, align 4
  %596 = load i64, i64* %RBP, align 8
  %597 = add i64 %596, -12
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, 3
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %597 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = zext i32 %601 to i64
  store i64 %602, i64* %RDI, align 8, !tbaa !2428
  %603 = add i64 %598, -1231
  %604 = add i64 %598, 8
  %605 = load i64, i64* %RSP, align 8, !tbaa !2428
  %606 = add i64 %605, -8
  %607 = inttoptr i64 %606 to i64*
  store i64 %604, i64* %607, align 8
  store i64 %606, i64* %RSP, align 8, !tbaa !2428
  store i64 %603, i64* %PC, align 8, !tbaa !2428
  %608 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %603, %struct.Memory* %MEMORY.1)
  %609 = load i64, i64* %RBP, align 8
  %610 = add i64 %609, -8
  %611 = load i64, i64* %PC, align 8
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613, align 8
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = add i64 %614, 4
  store i64 %615, i64* %RCX, align 8, !tbaa !2428
  %616 = icmp ugt i64 %614, -5
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %4, align 1, !tbaa !2432
  %618 = trunc i64 %615 to i32
  %619 = and i32 %618, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #8
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %5, align 1, !tbaa !2446
  %624 = xor i64 %614, %615
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  store i8 %627, i8* %6, align 1, !tbaa !2447
  %628 = icmp eq i64 %615, 0
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %7, align 1, !tbaa !2448
  %630 = lshr i64 %615, 63
  %631 = trunc i64 %630 to i8
  store i8 %631, i8* %8, align 1, !tbaa !2449
  %632 = lshr i64 %614, 63
  %633 = xor i64 %630, %632
  %634 = add nuw nsw i64 %633, %630
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %9, align 1, !tbaa !2450
  %637 = add i64 %611, 15
  store i64 %637, i64* %PC, align 8
  store i64 %615, i64* %613, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %638 = add i64 %954, -12
  store i64 4195899, i64* %PC, align 8
  %639 = inttoptr i64 %638 to i32*
  store i32 5, i32* %639, align 4
  %640 = load i64, i64* %RBP, align 8
  %641 = add i64 %640, -12
  %642 = load i64, i64* %PC, align 8
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC, align 8
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644, align 4
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RDI, align 8, !tbaa !2428
  %647 = add i64 %642, -331
  %648 = add i64 %642, 8
  %649 = load i64, i64* %RSP, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %648, i64* %651, align 8
  store i64 %650, i64* %RSP, align 8, !tbaa !2428
  store i64 %647, i64* %PC, align 8, !tbaa !2428
  %652 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %647, %struct.Memory* %MEMORY.1)
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -8
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = add i64 %658, 4
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = icmp ugt i64 %658, -5
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %4, align 1, !tbaa !2432
  %662 = trunc i64 %659 to i32
  %663 = and i32 %662, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #8
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %5, align 1, !tbaa !2446
  %668 = xor i64 %658, %659
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %6, align 1, !tbaa !2447
  %672 = icmp eq i64 %659, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %7, align 1, !tbaa !2448
  %674 = lshr i64 %659, 63
  %675 = trunc i64 %674 to i8
  store i8 %675, i8* %8, align 1, !tbaa !2449
  %676 = lshr i64 %658, 63
  %677 = xor i64 %674, %676
  %678 = add nuw nsw i64 %677, %674
  %679 = icmp eq i64 %678, 2
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %9, align 1, !tbaa !2450
  %681 = add i64 %655, 15
  store i64 %681, i64* %PC, align 8
  store i64 %659, i64* %657, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %682 = add i64 %954, -12
  store i64 4197049, i64* %PC, align 8
  %683 = inttoptr i64 %682 to i32*
  store i32 28, i32* %683, align 4
  %684 = load i64, i64* %RBP, align 8
  %685 = add i64 %684, -12
  %686 = load i64, i64* %PC, align 8
  %687 = add i64 %686, 3
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %685 to i32*
  %689 = load i32, i32* %688, align 4
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RDI, align 8, !tbaa !2428
  %691 = add i64 %686, -1481
  %692 = add i64 %686, 8
  %693 = load i64, i64* %RSP, align 8, !tbaa !2428
  %694 = add i64 %693, -8
  %695 = inttoptr i64 %694 to i64*
  store i64 %692, i64* %695, align 8
  store i64 %694, i64* %RSP, align 8, !tbaa !2428
  store i64 %691, i64* %PC, align 8, !tbaa !2428
  %696 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %691, %struct.Memory* %MEMORY.1)
  %697 = load i64, i64* %RBP, align 8
  %698 = add i64 %697, -8
  %699 = load i64, i64* %PC, align 8
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %698 to i64*
  %702 = load i64, i64* %701, align 8
  store i64 %702, i64* %RAX, align 8, !tbaa !2428
  %703 = add i64 %702, 4
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = icmp ugt i64 %702, -5
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %4, align 1, !tbaa !2432
  %706 = trunc i64 %703 to i32
  %707 = and i32 %706, 255
  %708 = tail call i32 @llvm.ctpop.i32(i32 %707) #8
  %709 = trunc i32 %708 to i8
  %710 = and i8 %709, 1
  %711 = xor i8 %710, 1
  store i8 %711, i8* %5, align 1, !tbaa !2446
  %712 = xor i64 %702, %703
  %713 = lshr i64 %712, 4
  %714 = trunc i64 %713 to i8
  %715 = and i8 %714, 1
  store i8 %715, i8* %6, align 1, !tbaa !2447
  %716 = icmp eq i64 %703, 0
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %7, align 1, !tbaa !2448
  %718 = lshr i64 %703, 63
  %719 = trunc i64 %718 to i8
  store i8 %719, i8* %8, align 1, !tbaa !2449
  %720 = lshr i64 %702, 63
  %721 = xor i64 %718, %720
  %722 = add nuw nsw i64 %721, %718
  %723 = icmp eq i64 %722, 2
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %9, align 1, !tbaa !2450
  %725 = add i64 %699, 15
  store i64 %725, i64* %PC, align 8
  store i64 %703, i64* %701, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = add i64 %954, -12
  store i64 4195680, i64* %PC, align 8
  %727 = inttoptr i64 %726 to i32*
  store i32 0, i32* %727, align 4
  %728 = load i64, i64* %RSP, align 8
  %729 = load i64, i64* %PC, align 8
  %730 = add i64 %728, 48
  store i64 %730, i64* %RSP, align 8, !tbaa !2428
  %731 = icmp ugt i64 %728, -49
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %4, align 1, !tbaa !2432
  %733 = trunc i64 %730 to i32
  %734 = and i32 %733, 255
  %735 = tail call i32 @llvm.ctpop.i32(i32 %734) #8
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = xor i8 %737, 1
  store i8 %738, i8* %5, align 1, !tbaa !2446
  %739 = xor i64 %728, 16
  %740 = xor i64 %739, %730
  %741 = lshr i64 %740, 4
  %742 = trunc i64 %741 to i8
  %743 = and i8 %742, 1
  store i8 %743, i8* %6, align 1, !tbaa !2447
  %744 = icmp eq i64 %730, 0
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %7, align 1, !tbaa !2448
  %746 = lshr i64 %730, 63
  %747 = trunc i64 %746 to i8
  store i8 %747, i8* %8, align 1, !tbaa !2449
  %748 = lshr i64 %728, 63
  %749 = xor i64 %746, %748
  %750 = add nuw nsw i64 %749, %746
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %9, align 1, !tbaa !2450
  %753 = add i64 %729, 5
  store i64 %753, i64* %PC, align 8
  %754 = add i64 %728, 56
  %755 = inttoptr i64 %730 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %RBP, align 8, !tbaa !2428
  store i64 %754, i64* %RSP, align 8, !tbaa !2428
  %757 = add i64 %729, 6
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %754 to i64*
  %759 = load i64, i64* %758, align 8
  store i64 %759, i64* %PC, align 8, !tbaa !2428
  %760 = add i64 %728, 64
  store i64 %760, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %761 = add i64 %954, -12
  store i64 4196149, i64* %PC, align 8
  %762 = inttoptr i64 %761 to i32*
  store i32 10, i32* %762, align 4
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -12
  %765 = load i64, i64* %PC, align 8
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %764 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = zext i32 %768 to i64
  store i64 %769, i64* %RDI, align 8, !tbaa !2428
  %770 = add i64 %765, -581
  %771 = add i64 %765, 8
  %772 = load i64, i64* %RSP, align 8, !tbaa !2428
  %773 = add i64 %772, -8
  %774 = inttoptr i64 %773 to i64*
  store i64 %771, i64* %774, align 8
  store i64 %773, i64* %RSP, align 8, !tbaa !2428
  store i64 %770, i64* %PC, align 8, !tbaa !2428
  %775 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %770, %struct.Memory* %MEMORY.1)
  %776 = load i64, i64* %RBP, align 8
  %777 = add i64 %776, -8
  %778 = load i64, i64* %PC, align 8
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %777 to i64*
  %781 = load i64, i64* %780, align 8
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = add i64 %781, 4
  store i64 %782, i64* %RCX, align 8, !tbaa !2428
  %783 = icmp ugt i64 %781, -5
  %784 = zext i1 %783 to i8
  store i8 %784, i8* %4, align 1, !tbaa !2432
  %785 = trunc i64 %782 to i32
  %786 = and i32 %785, 255
  %787 = tail call i32 @llvm.ctpop.i32(i32 %786) #8
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = xor i8 %789, 1
  store i8 %790, i8* %5, align 1, !tbaa !2446
  %791 = xor i64 %781, %782
  %792 = lshr i64 %791, 4
  %793 = trunc i64 %792 to i8
  %794 = and i8 %793, 1
  store i8 %794, i8* %6, align 1, !tbaa !2447
  %795 = icmp eq i64 %782, 0
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %7, align 1, !tbaa !2448
  %797 = lshr i64 %782, 63
  %798 = trunc i64 %797 to i8
  store i8 %798, i8* %8, align 1, !tbaa !2449
  %799 = lshr i64 %781, 63
  %800 = xor i64 %797, %799
  %801 = add nuw nsw i64 %800, %797
  %802 = icmp eq i64 %801, 2
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %9, align 1, !tbaa !2450
  %804 = add i64 %778, 15
  store i64 %804, i64* %PC, align 8
  store i64 %782, i64* %780, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %805 = add i64 %954, -12
  store i64 4196399, i64* %PC, align 8
  %806 = inttoptr i64 %805 to i32*
  store i32 15, i32* %806, align 4
  %807 = load i64, i64* %RBP, align 8
  %808 = add i64 %807, -12
  %809 = load i64, i64* %PC, align 8
  %810 = add i64 %809, 3
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %808 to i32*
  %812 = load i32, i32* %811, align 4
  %813 = zext i32 %812 to i64
  store i64 %813, i64* %RDI, align 8, !tbaa !2428
  %814 = add i64 %809, -831
  %815 = add i64 %809, 8
  %816 = load i64, i64* %RSP, align 8, !tbaa !2428
  %817 = add i64 %816, -8
  %818 = inttoptr i64 %817 to i64*
  store i64 %815, i64* %818, align 8
  store i64 %817, i64* %RSP, align 8, !tbaa !2428
  store i64 %814, i64* %PC, align 8, !tbaa !2428
  %819 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %814, %struct.Memory* %MEMORY.1)
  %820 = load i64, i64* %RBP, align 8
  %821 = add i64 %820, -8
  %822 = load i64, i64* %PC, align 8
  %823 = add i64 %822, 4
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %821 to i64*
  %825 = load i64, i64* %824, align 8
  store i64 %825, i64* %RAX, align 8, !tbaa !2428
  %826 = add i64 %825, 4
  store i64 %826, i64* %RCX, align 8, !tbaa !2428
  %827 = icmp ugt i64 %825, -5
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %4, align 1, !tbaa !2432
  %829 = trunc i64 %826 to i32
  %830 = and i32 %829, 255
  %831 = tail call i32 @llvm.ctpop.i32(i32 %830) #8
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  store i8 %834, i8* %5, align 1, !tbaa !2446
  %835 = xor i64 %825, %826
  %836 = lshr i64 %835, 4
  %837 = trunc i64 %836 to i8
  %838 = and i8 %837, 1
  store i8 %838, i8* %6, align 1, !tbaa !2447
  %839 = icmp eq i64 %826, 0
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %7, align 1, !tbaa !2448
  %841 = lshr i64 %826, 63
  %842 = trunc i64 %841 to i8
  store i8 %842, i8* %8, align 1, !tbaa !2449
  %843 = lshr i64 %825, 63
  %844 = xor i64 %841, %843
  %845 = add nuw nsw i64 %844, %841
  %846 = icmp eq i64 %845, 2
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %9, align 1, !tbaa !2450
  %848 = add i64 %822, 15
  store i64 %848, i64* %PC, align 8
  store i64 %826, i64* %824, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %849 = add i64 %954, -12
  store i64 4196649, i64* %PC, align 8
  %850 = inttoptr i64 %849 to i32*
  store i32 20, i32* %850, align 4
  %851 = load i64, i64* %RBP, align 8
  %852 = add i64 %851, -12
  %853 = load i64, i64* %PC, align 8
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %852 to i32*
  %856 = load i32, i32* %855, align 4
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDI, align 8, !tbaa !2428
  %858 = add i64 %853, -1081
  %859 = add i64 %853, 8
  %860 = load i64, i64* %RSP, align 8, !tbaa !2428
  %861 = add i64 %860, -8
  %862 = inttoptr i64 %861 to i64*
  store i64 %859, i64* %862, align 8
  store i64 %861, i64* %RSP, align 8, !tbaa !2428
  store i64 %858, i64* %PC, align 8, !tbaa !2428
  %863 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %858, %struct.Memory* %MEMORY.1)
  %864 = load i64, i64* %RBP, align 8
  %865 = add i64 %864, -8
  %866 = load i64, i64* %PC, align 8
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC, align 8
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868, align 8
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = add i64 %869, 4
  store i64 %870, i64* %RCX, align 8, !tbaa !2428
  %871 = icmp ugt i64 %869, -5
  %872 = zext i1 %871 to i8
  store i8 %872, i8* %4, align 1, !tbaa !2432
  %873 = trunc i64 %870 to i32
  %874 = and i32 %873, 255
  %875 = tail call i32 @llvm.ctpop.i32(i32 %874) #8
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  %878 = xor i8 %877, 1
  store i8 %878, i8* %5, align 1, !tbaa !2446
  %879 = xor i64 %869, %870
  %880 = lshr i64 %879, 4
  %881 = trunc i64 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %6, align 1, !tbaa !2447
  %883 = icmp eq i64 %870, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %7, align 1, !tbaa !2448
  %885 = lshr i64 %870, 63
  %886 = trunc i64 %885 to i8
  store i8 %886, i8* %8, align 1, !tbaa !2449
  %887 = lshr i64 %869, 63
  %888 = xor i64 %885, %887
  %889 = add nuw nsw i64 %888, %885
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %9, align 1, !tbaa !2450
  %892 = add i64 %866, 15
  store i64 %892, i64* %PC, align 8
  store i64 %870, i64* %868, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %893 = add i64 %954, -12
  store i64 4195749, i64* %PC, align 8
  %894 = inttoptr i64 %893 to i32*
  store i32 2, i32* %894, align 4
  %895 = load i64, i64* %RBP, align 8
  %896 = add i64 %895, -12
  %897 = load i64, i64* %PC, align 8
  %898 = add i64 %897, 3
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %896 to i32*
  %900 = load i32, i32* %899, align 4
  %901 = zext i32 %900 to i64
  store i64 %901, i64* %RDI, align 8, !tbaa !2428
  %902 = add i64 %897, -181
  %903 = add i64 %897, 8
  %904 = load i64, i64* %RSP, align 8, !tbaa !2428
  %905 = add i64 %904, -8
  %906 = inttoptr i64 %905 to i64*
  store i64 %903, i64* %906, align 8
  store i64 %905, i64* %RSP, align 8, !tbaa !2428
  store i64 %902, i64* %PC, align 8, !tbaa !2428
  %907 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %902, %struct.Memory* %MEMORY.1)
  %908 = load i64, i64* %RBP, align 8
  %909 = add i64 %908, -8
  %910 = load i64, i64* %PC, align 8
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %909 to i64*
  %913 = load i64, i64* %912, align 8
  store i64 %913, i64* %RAX, align 8, !tbaa !2428
  %914 = add i64 %913, 4
  store i64 %914, i64* %RCX, align 8, !tbaa !2428
  %915 = icmp ugt i64 %913, -5
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %4, align 1, !tbaa !2432
  %917 = trunc i64 %914 to i32
  %918 = and i32 %917, 255
  %919 = tail call i32 @llvm.ctpop.i32(i32 %918) #8
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  store i8 %922, i8* %5, align 1, !tbaa !2446
  %923 = xor i64 %913, %914
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %6, align 1, !tbaa !2447
  %927 = icmp eq i64 %914, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %7, align 1, !tbaa !2448
  %929 = lshr i64 %914, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %8, align 1, !tbaa !2449
  %931 = lshr i64 %913, 63
  %932 = xor i64 %929, %931
  %933 = add nuw nsw i64 %932, %929
  %934 = icmp eq i64 %933, 2
  %935 = zext i1 %934 to i8
  store i8 %935, i8* %9, align 1, !tbaa !2450
  %936 = add i64 %910, 15
  store i64 %936, i64* %PC, align 8
  store i64 %914, i64* %912, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400b4f
  %.sink12 = phi i64 [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1551, %block_400b4f ]
  %MEMORY.1 = phi %struct.Memory* [ %1149, %block_40088c ], [ %1105, %block_400792 ], [ %1061, %block_400b16 ], [ %1017, %block_400698 ], [ %973, %block_400a1c ], [ %907, %block_40059e ], [ %863, %block_400922 ], [ %819, %block_400828 ], [ %775, %block_40072e ], [ %696, %block_400ab2 ], [ %652, %block_400634 ], [ %608, %block_4009b8 ], [ %554, %block_4006ca ], [ %510, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %466, %block_400b4f ]
  %937 = bitcast i64* %RAX to i32**
  %938 = load i32*, i32** %937, align 8
  %939 = load i64, i64* %PC, align 8
  %940 = add i64 %939, 3
  store i64 %940, i64* %PC, align 8
  %941 = load i32, i32* %938, align 4
  %942 = sext i32 %941 to i64
  store i64 %942, i64* %RAX, align 8, !tbaa !2428
  %943 = shl nsw i64 %942, 3
  %944 = add i64 %943, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %945 = add i64 %939, 11
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %944 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RAX, align 8, !tbaa !2428
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -40
  %950 = add i64 %939, 15
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %949 to i64*
  store i64 %947, i64* %951, align 8
  %952 = load i64, i64* %PC, align 8
  %953 = sub i64 %952, %.sink12
  %954 = load i64, i64* %RBP, align 8
  %955 = add i64 %954, -40
  %956 = add i64 %953, 4
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %955 to i64*
  %958 = load i64, i64* %957, align 8
  store i64 %958, i64* %RAX, align 8, !tbaa !2428
  store i64 %958, i64* %PC, align 8, !tbaa !2428
  switch i64 %958, label %1191 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %959 = add i64 %954, -12
  store i64 4196899, i64* %PC, align 8
  %960 = inttoptr i64 %959 to i32*
  store i32 25, i32* %960, align 4
  %961 = load i64, i64* %RBP, align 8
  %962 = add i64 %961, -12
  %963 = load i64, i64* %PC, align 8
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %962 to i32*
  %966 = load i32, i32* %965, align 4
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RDI, align 8, !tbaa !2428
  %968 = add i64 %963, -1331
  %969 = add i64 %963, 8
  %970 = load i64, i64* %RSP, align 8, !tbaa !2428
  %971 = add i64 %970, -8
  %972 = inttoptr i64 %971 to i64*
  store i64 %969, i64* %972, align 8
  store i64 %971, i64* %RSP, align 8, !tbaa !2428
  store i64 %968, i64* %PC, align 8, !tbaa !2428
  %973 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %968, %struct.Memory* %MEMORY.1)
  %974 = load i64, i64* %RBP, align 8
  %975 = add i64 %974, -8
  %976 = load i64, i64* %PC, align 8
  %977 = add i64 %976, 4
  store i64 %977, i64* %PC, align 8
  %978 = inttoptr i64 %975 to i64*
  %979 = load i64, i64* %978, align 8
  store i64 %979, i64* %RAX, align 8, !tbaa !2428
  %980 = add i64 %979, 4
  store i64 %980, i64* %RCX, align 8, !tbaa !2428
  %981 = icmp ugt i64 %979, -5
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %4, align 1, !tbaa !2432
  %983 = trunc i64 %980 to i32
  %984 = and i32 %983, 255
  %985 = tail call i32 @llvm.ctpop.i32(i32 %984) #8
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  %988 = xor i8 %987, 1
  store i8 %988, i8* %5, align 1, !tbaa !2446
  %989 = xor i64 %979, %980
  %990 = lshr i64 %989, 4
  %991 = trunc i64 %990 to i8
  %992 = and i8 %991, 1
  store i8 %992, i8* %6, align 1, !tbaa !2447
  %993 = icmp eq i64 %980, 0
  %994 = zext i1 %993 to i8
  store i8 %994, i8* %7, align 1, !tbaa !2448
  %995 = lshr i64 %980, 63
  %996 = trunc i64 %995 to i8
  store i8 %996, i8* %8, align 1, !tbaa !2449
  %997 = lshr i64 %979, 63
  %998 = xor i64 %995, %997
  %999 = add nuw nsw i64 %998, %995
  %1000 = icmp eq i64 %999, 2
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %9, align 1, !tbaa !2450
  %1002 = add i64 %976, 15
  store i64 %1002, i64* %PC, align 8
  store i64 %980, i64* %978, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1003 = add i64 %954, -12
  store i64 4195999, i64* %PC, align 8
  %1004 = inttoptr i64 %1003 to i32*
  store i32 7, i32* %1004, align 4
  %1005 = load i64, i64* %RBP, align 8
  %1006 = add i64 %1005, -12
  %1007 = load i64, i64* %PC, align 8
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009, align 4
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RDI, align 8, !tbaa !2428
  %1012 = add i64 %1007, -431
  %1013 = add i64 %1007, 8
  %1014 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1015 = add i64 %1014, -8
  %1016 = inttoptr i64 %1015 to i64*
  store i64 %1013, i64* %1016, align 8
  store i64 %1015, i64* %RSP, align 8, !tbaa !2428
  store i64 %1012, i64* %PC, align 8, !tbaa !2428
  %1017 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1012, %struct.Memory* %MEMORY.1)
  %1018 = load i64, i64* %RBP, align 8
  %1019 = add i64 %1018, -8
  %1020 = load i64, i64* %PC, align 8
  %1021 = add i64 %1020, 4
  store i64 %1021, i64* %PC, align 8
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022, align 8
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %RCX, align 8, !tbaa !2428
  %1025 = icmp ugt i64 %1023, -5
  %1026 = zext i1 %1025 to i8
  store i8 %1026, i8* %4, align 1, !tbaa !2432
  %1027 = trunc i64 %1024 to i32
  %1028 = and i32 %1027, 255
  %1029 = tail call i32 @llvm.ctpop.i32(i32 %1028) #8
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  store i8 %1032, i8* %5, align 1, !tbaa !2446
  %1033 = xor i64 %1023, %1024
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  store i8 %1036, i8* %6, align 1, !tbaa !2447
  %1037 = icmp eq i64 %1024, 0
  %1038 = zext i1 %1037 to i8
  store i8 %1038, i8* %7, align 1, !tbaa !2448
  %1039 = lshr i64 %1024, 63
  %1040 = trunc i64 %1039 to i8
  store i8 %1040, i8* %8, align 1, !tbaa !2449
  %1041 = lshr i64 %1023, 63
  %1042 = xor i64 %1039, %1041
  %1043 = add nuw nsw i64 %1042, %1039
  %1044 = icmp eq i64 %1043, 2
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %9, align 1, !tbaa !2450
  %1046 = add i64 %1020, 15
  store i64 %1046, i64* %PC, align 8
  store i64 %1024, i64* %1022, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1047 = add i64 %954, -12
  store i64 4197149, i64* %PC, align 8
  %1048 = inttoptr i64 %1047 to i32*
  store i32 30, i32* %1048, align 4
  %1049 = load i64, i64* %RBP, align 8
  %1050 = add i64 %1049, -12
  %1051 = load i64, i64* %PC, align 8
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %PC, align 8
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053, align 4
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDI, align 8, !tbaa !2428
  %1056 = add i64 %1051, -1581
  %1057 = add i64 %1051, 8
  %1058 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1059 = add i64 %1058, -8
  %1060 = inttoptr i64 %1059 to i64*
  store i64 %1057, i64* %1060, align 8
  store i64 %1059, i64* %RSP, align 8, !tbaa !2428
  store i64 %1056, i64* %PC, align 8, !tbaa !2428
  %1061 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1056, %struct.Memory* %MEMORY.1)
  %1062 = load i64, i64* %RBP, align 8
  %1063 = add i64 %1062, -8
  %1064 = load i64, i64* %PC, align 8
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1063 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %RAX, align 8, !tbaa !2428
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %RCX, align 8, !tbaa !2428
  %1069 = icmp ugt i64 %1067, -5
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %4, align 1, !tbaa !2432
  %1071 = trunc i64 %1068 to i32
  %1072 = and i32 %1071, 255
  %1073 = tail call i32 @llvm.ctpop.i32(i32 %1072) #8
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = xor i8 %1075, 1
  store i8 %1076, i8* %5, align 1, !tbaa !2446
  %1077 = xor i64 %1067, %1068
  %1078 = lshr i64 %1077, 4
  %1079 = trunc i64 %1078 to i8
  %1080 = and i8 %1079, 1
  store i8 %1080, i8* %6, align 1, !tbaa !2447
  %1081 = icmp eq i64 %1068, 0
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %7, align 1, !tbaa !2448
  %1083 = lshr i64 %1068, 63
  %1084 = trunc i64 %1083 to i8
  store i8 %1084, i8* %8, align 1, !tbaa !2449
  %1085 = lshr i64 %1067, 63
  %1086 = xor i64 %1083, %1085
  %1087 = add nuw nsw i64 %1086, %1083
  %1088 = icmp eq i64 %1087, 2
  %1089 = zext i1 %1088 to i8
  store i8 %1089, i8* %9, align 1, !tbaa !2450
  %1090 = add i64 %1064, 15
  store i64 %1090, i64* %PC, align 8
  store i64 %1068, i64* %1066, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1091 = add i64 %954, -12
  store i64 4196249, i64* %PC, align 8
  %1092 = inttoptr i64 %1091 to i32*
  store i32 12, i32* %1092, align 4
  %1093 = load i64, i64* %RBP, align 8
  %1094 = add i64 %1093, -12
  %1095 = load i64, i64* %PC, align 8
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC, align 8
  %1097 = inttoptr i64 %1094 to i32*
  %1098 = load i32, i32* %1097, align 4
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %RDI, align 8, !tbaa !2428
  %1100 = add i64 %1095, -681
  %1101 = add i64 %1095, 8
  %1102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1103 = add i64 %1102, -8
  %1104 = inttoptr i64 %1103 to i64*
  store i64 %1101, i64* %1104, align 8
  store i64 %1103, i64* %RSP, align 8, !tbaa !2428
  store i64 %1100, i64* %PC, align 8, !tbaa !2428
  %1105 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1100, %struct.Memory* %MEMORY.1)
  %1106 = load i64, i64* %RBP, align 8
  %1107 = add i64 %1106, -8
  %1108 = load i64, i64* %PC, align 8
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110, align 8
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = icmp ugt i64 %1111, -5
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %4, align 1, !tbaa !2432
  %1115 = trunc i64 %1112 to i32
  %1116 = and i32 %1115, 255
  %1117 = tail call i32 @llvm.ctpop.i32(i32 %1116) #8
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  %1120 = xor i8 %1119, 1
  store i8 %1120, i8* %5, align 1, !tbaa !2446
  %1121 = xor i64 %1111, %1112
  %1122 = lshr i64 %1121, 4
  %1123 = trunc i64 %1122 to i8
  %1124 = and i8 %1123, 1
  store i8 %1124, i8* %6, align 1, !tbaa !2447
  %1125 = icmp eq i64 %1112, 0
  %1126 = zext i1 %1125 to i8
  store i8 %1126, i8* %7, align 1, !tbaa !2448
  %1127 = lshr i64 %1112, 63
  %1128 = trunc i64 %1127 to i8
  store i8 %1128, i8* %8, align 1, !tbaa !2449
  %1129 = lshr i64 %1111, 63
  %1130 = xor i64 %1127, %1129
  %1131 = add nuw nsw i64 %1130, %1127
  %1132 = icmp eq i64 %1131, 2
  %1133 = zext i1 %1132 to i8
  store i8 %1133, i8* %9, align 1, !tbaa !2450
  %1134 = add i64 %1108, 15
  store i64 %1134, i64* %PC, align 8
  store i64 %1112, i64* %1110, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1135 = add i64 %954, -12
  store i64 4196499, i64* %PC, align 8
  %1136 = inttoptr i64 %1135 to i32*
  store i32 17, i32* %1136, align 4
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -12
  %1139 = load i64, i64* %PC, align 8
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1138 to i32*
  %1142 = load i32, i32* %1141, align 4
  %1143 = zext i32 %1142 to i64
  store i64 %1143, i64* %RDI, align 8, !tbaa !2428
  %1144 = add i64 %1139, -931
  %1145 = add i64 %1139, 8
  %1146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1147 = add i64 %1146, -8
  %1148 = inttoptr i64 %1147 to i64*
  store i64 %1145, i64* %1148, align 8
  store i64 %1147, i64* %RSP, align 8, !tbaa !2428
  store i64 %1144, i64* %PC, align 8, !tbaa !2428
  %1149 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1144, %struct.Memory* %MEMORY.1)
  %1150 = load i64, i64* %RBP, align 8
  %1151 = add i64 %1150, -8
  %1152 = load i64, i64* %PC, align 8
  %1153 = add i64 %1152, 4
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1151 to i64*
  %1155 = load i64, i64* %1154, align 8
  store i64 %1155, i64* %RAX, align 8, !tbaa !2428
  %1156 = add i64 %1155, 4
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = icmp ugt i64 %1155, -5
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %4, align 1, !tbaa !2432
  %1159 = trunc i64 %1156 to i32
  %1160 = and i32 %1159, 255
  %1161 = tail call i32 @llvm.ctpop.i32(i32 %1160) #8
  %1162 = trunc i32 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = xor i8 %1163, 1
  store i8 %1164, i8* %5, align 1, !tbaa !2446
  %1165 = xor i64 %1155, %1156
  %1166 = lshr i64 %1165, 4
  %1167 = trunc i64 %1166 to i8
  %1168 = and i8 %1167, 1
  store i8 %1168, i8* %6, align 1, !tbaa !2447
  %1169 = icmp eq i64 %1156, 0
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %7, align 1, !tbaa !2448
  %1171 = lshr i64 %1156, 63
  %1172 = trunc i64 %1171 to i8
  store i8 %1172, i8* %8, align 1, !tbaa !2449
  %1173 = lshr i64 %1155, 63
  %1174 = xor i64 %1171, %1173
  %1175 = add nuw nsw i64 %1174, %1171
  %1176 = icmp eq i64 %1175, 2
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %9, align 1, !tbaa !2450
  %1178 = add i64 %1152, 15
  store i64 %1178, i64* %PC, align 8
  store i64 %1156, i64* %1154, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1179 = add i64 %954, -12
  store i64 4196749, i64* %PC, align 8
  %1180 = inttoptr i64 %1179 to i32*
  store i32 22, i32* %1180, align 4
  %1181 = load i64, i64* %PC, align 8
  %1182 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %1181, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1182

block_400602:                                     ; preds = %block_400566
  %1183 = add i64 %954, -12
  store i64 4195849, i64* %PC, align 8
  %1184 = inttoptr i64 %1183 to i32*
  store i32 4, i32* %1184, align 4
  %1185 = load i64, i64* %PC, align 8
  %1186 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1185, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1186

block_400a80:                                     ; preds = %block_400566
  %1187 = add i64 %954, -12
  store i64 4196999, i64* %PC, align 8
  %1188 = inttoptr i64 %1187 to i32*
  store i32 27, i32* %1188, align 4
  %1189 = load i64, i64* %PC, align 8
  %1190 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1189, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1190

; <label>:1191:                                   ; preds = %block_400566
  %1192 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %958, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1192
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005a5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4005a5

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %360, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.0)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %360, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.0)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %99 = add i64 %360, -12
  store i64 4195699, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 1, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -131
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.0)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %143 = add i64 %360, -12
  store i64 4196099, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 9, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %146

block_4009ea:                                     ; preds = %block_400566
  %147 = add i64 %360, -12
  store i64 4196849, i64* %PC, align 8
  %148 = inttoptr i64 %147 to i32*
  store i32 24, i32* %148, align 4
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -12
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %151, -1281
  %157 = add i64 %151, 8
  %158 = load i64, i64* %4, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %4, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.0)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -8
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 4
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -5
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %5, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %6, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %7, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %8, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %9, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %10, align 1, !tbaa !2450
  %190 = add i64 %164, 15
  store i64 %190, i64* %PC, align 8
  store i64 %168, i64* %166, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %191 = add i64 %360, -12
  store i64 4195949, i64* %PC, align 8
  %192 = inttoptr i64 %191 to i32*
  store i32 6, i32* %192, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -12
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = add i64 %195, -381
  %201 = add i64 %195, 8
  %202 = load i64, i64* %4, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %4, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %211, 4
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = icmp ugt i64 %211, -5
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %5, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #8
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %6, align 1, !tbaa !2446
  %221 = xor i64 %211, %212
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %7, align 1, !tbaa !2447
  %225 = icmp eq i64 %212, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %8, align 1, !tbaa !2448
  %227 = lshr i64 %212, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %9, align 1, !tbaa !2449
  %229 = lshr i64 %211, 63
  %230 = xor i64 %227, %229
  %231 = add nuw nsw i64 %230, %227
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %10, align 1, !tbaa !2450
  %234 = add i64 %208, 15
  store i64 %234, i64* %PC, align 8
  store i64 %212, i64* %210, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %235 = add i64 %360, -12
  store i64 4197099, i64* %PC, align 8
  %236 = inttoptr i64 %235 to i32*
  store i32 29, i32* %236, align 4
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -12
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %239, -1531
  %245 = add i64 %239, 8
  %246 = load i64, i64* %4, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %4, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -8
  %252 = load i64, i64* %PC, align 8
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = add i64 %255, 4
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = icmp ugt i64 %255, -5
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %5, align 1, !tbaa !2432
  %259 = trunc i64 %256 to i32
  %260 = and i32 %259, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %6, align 1, !tbaa !2446
  %265 = xor i64 %255, %256
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %7, align 1, !tbaa !2447
  %269 = icmp eq i64 %256, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %8, align 1, !tbaa !2448
  %271 = lshr i64 %256, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %9, align 1, !tbaa !2449
  %273 = lshr i64 %255, 63
  %274 = xor i64 %271, %273
  %275 = add nuw nsw i64 %274, %271
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %10, align 1, !tbaa !2450
  %278 = add i64 %252, 15
  store i64 %278, i64* %PC, align 8
  store i64 %256, i64* %254, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %279 = add i64 %360, -12
  store i64 4196199, i64* %PC, align 8
  %280 = inttoptr i64 %279 to i32*
  store i32 11, i32* %280, align 4
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -12
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RDI, align 8, !tbaa !2428
  %288 = add i64 %283, -631
  %289 = add i64 %283, 8
  %290 = load i64, i64* %4, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %289, i64* %292, align 8
  store i64 %291, i64* %4, align 8, !tbaa !2428
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %293 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %288, %struct.Memory* %MEMORY.0)
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -8
  %296 = load i64, i64* %PC, align 8
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = add i64 %299, 4
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = icmp ugt i64 %299, -5
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %5, align 1, !tbaa !2432
  %303 = trunc i64 %300 to i32
  %304 = and i32 %303, 255
  %305 = tail call i32 @llvm.ctpop.i32(i32 %304) #8
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  store i8 %308, i8* %6, align 1, !tbaa !2446
  %309 = xor i64 %299, %300
  %310 = lshr i64 %309, 4
  %311 = trunc i64 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %7, align 1, !tbaa !2447
  %313 = icmp eq i64 %300, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %8, align 1, !tbaa !2448
  %315 = lshr i64 %300, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %9, align 1, !tbaa !2449
  %317 = lshr i64 %299, 63
  %318 = xor i64 %315, %317
  %319 = add nuw nsw i64 %318, %315
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %10, align 1, !tbaa !2450
  %322 = add i64 %296, 15
  store i64 %322, i64* %PC, align 8
  store i64 %300, i64* %298, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %323 = add i64 %360, -12
  store i64 4196449, i64* %PC, align 8
  %324 = inttoptr i64 %323 to i32*
  store i32 16, i32* %324, align 4
  %325 = load i64, i64* %PC, align 8
  %326 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %325, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %326

block_400954:                                     ; preds = %block_400566
  %327 = add i64 %360, -12
  store i64 4196699, i64* %PC, align 8
  %328 = inttoptr i64 %327 to i32*
  store i32 21, i32* %328, align 4
  %329 = load i64, i64* %PC, align 8
  %330 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %329, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %330

block_400a4e:                                     ; preds = %block_400566
  %331 = add i64 %360, -12
  store i64 4196949, i64* %PC, align 8
  %332 = inttoptr i64 %331 to i32*
  store i32 26, i32* %332, align 4
  %333 = load i64, i64* %PC, align 8
  %334 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %333, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %334

block_400b48:                                     ; preds = %block_400566
  %335 = add i64 %360, -12
  store i64 4197199, i64* %PC, align 8
  %336 = inttoptr i64 %335 to i32*
  store i32 31, i32* %336, align 4
  %337 = load i64, i64* %PC, align 8
  %338 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %337, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %338

block_4007c4:                                     ; preds = %block_400566
  %339 = add i64 %360, -12
  store i64 4196299, i64* %PC, align 8
  %340 = inttoptr i64 %339 to i32*
  store i32 13, i32* %340, align 4
  %341 = load i64, i64* %PC, align 8
  %342 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %341, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %342

block_400566:                                     ; preds = %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_4005a5
  %.sink23 = phi i64 [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 101, %block_4005a5 ]
  %MEMORY.0 = phi %struct.Memory* [ %653, %block_400922 ], [ %567, %block_400828 ], [ %523, %block_40072e ], [ %479, %block_400ab2 ], [ %435, %block_400634 ], [ %391, %block_4009b8 ], [ %293, %block_400760 ], [ %249, %block_400ae4 ], [ %205, %block_400666 ], [ %161, %block_4009ea ], [ %113, %block_40056c ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %609, %block_4005a5 ]
  %343 = bitcast i64* %RAX to i32**
  %344 = load i32*, i32** %343, align 8
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC, align 8
  %347 = load i32, i32* %344, align 4
  %348 = sext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = shl nsw i64 %348, 3
  %350 = add i64 %349, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %351 = add i64 %345, 11
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -40
  %356 = add i64 %345, 15
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  store i64 %353, i64* %357, align 8
  %358 = load i64, i64* %PC, align 8
  %359 = sub i64 %358, %.sink23
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -40
  %362 = add i64 %359, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  switch i64 %364, label %721 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %365 = add i64 %360, -12
  store i64 4195799, i64* %PC, align 8
  %366 = inttoptr i64 %365 to i32*
  store i32 3, i32* %366, align 4
  %367 = load i64, i64* %PC, align 8
  %368 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %367, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %368

block_4008be:                                     ; preds = %block_400566
  %369 = add i64 %360, -12
  store i64 4196549, i64* %PC, align 8
  %370 = inttoptr i64 %369 to i32*
  store i32 18, i32* %370, align 4
  %371 = load i64, i64* %PC, align 8
  %372 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %371, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %372

block_4006ca:                                     ; preds = %block_400566
  %373 = add i64 %360, -12
  store i64 4196049, i64* %PC, align 8
  %374 = inttoptr i64 %373 to i32*
  store i32 8, i32* %374, align 4
  %375 = load i64, i64* %PC, align 8
  %376 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %376

block_4009b8:                                     ; preds = %block_400566
  %377 = add i64 %360, -12
  store i64 4196799, i64* %PC, align 8
  %378 = inttoptr i64 %377 to i32*
  store i32 23, i32* %378, align 4
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -12
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %381, -1231
  %387 = add i64 %381, 8
  %388 = load i64, i64* %4, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %4, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %386, %struct.Memory* %MEMORY.0)
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %397, 4
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -5
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %5, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %6, align 1, !tbaa !2446
  %407 = xor i64 %397, %398
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %7, align 1, !tbaa !2447
  %411 = icmp eq i64 %398, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %8, align 1, !tbaa !2448
  %413 = lshr i64 %398, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %9, align 1, !tbaa !2449
  %415 = lshr i64 %397, 63
  %416 = xor i64 %413, %415
  %417 = add nuw nsw i64 %416, %413
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %10, align 1, !tbaa !2450
  %420 = add i64 %394, 15
  store i64 %420, i64* %PC, align 8
  store i64 %398, i64* %396, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %421 = add i64 %360, -12
  store i64 4195899, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 5, i32* %422, align 4
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -12
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = add i64 %425, -331
  %431 = add i64 %425, 8
  %432 = load i64, i64* %4, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %4, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %MEMORY.0)
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = add i64 %441, 4
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = icmp ugt i64 %441, -5
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %5, align 1, !tbaa !2432
  %445 = trunc i64 %442 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #8
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %6, align 1, !tbaa !2446
  %451 = xor i64 %441, %442
  %452 = lshr i64 %451, 4
  %453 = trunc i64 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %7, align 1, !tbaa !2447
  %455 = icmp eq i64 %442, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %8, align 1, !tbaa !2448
  %457 = lshr i64 %442, 63
  %458 = trunc i64 %457 to i8
  store i8 %458, i8* %9, align 1, !tbaa !2449
  %459 = lshr i64 %441, 63
  %460 = xor i64 %457, %459
  %461 = add nuw nsw i64 %460, %457
  %462 = icmp eq i64 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %10, align 1, !tbaa !2450
  %464 = add i64 %438, 15
  store i64 %464, i64* %PC, align 8
  store i64 %442, i64* %440, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %465 = add i64 %360, -12
  store i64 4197049, i64* %PC, align 8
  %466 = inttoptr i64 %465 to i32*
  store i32 28, i32* %466, align 4
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -12
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RDI, align 8, !tbaa !2428
  %474 = add i64 %469, -1481
  %475 = add i64 %469, 8
  %476 = load i64, i64* %4, align 8, !tbaa !2428
  %477 = add i64 %476, -8
  %478 = inttoptr i64 %477 to i64*
  store i64 %475, i64* %478, align 8
  store i64 %477, i64* %4, align 8, !tbaa !2428
  store i64 %474, i64* %PC, align 8, !tbaa !2428
  %479 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %474, %struct.Memory* %MEMORY.0)
  %480 = load i64, i64* %RBP, align 8
  %481 = add i64 %480, -8
  %482 = load i64, i64* %PC, align 8
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %481 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %RAX, align 8, !tbaa !2428
  %486 = add i64 %485, 4
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = icmp ugt i64 %485, -5
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %5, align 1, !tbaa !2432
  %489 = trunc i64 %486 to i32
  %490 = and i32 %489, 255
  %491 = tail call i32 @llvm.ctpop.i32(i32 %490) #8
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  store i8 %494, i8* %6, align 1, !tbaa !2446
  %495 = xor i64 %485, %486
  %496 = lshr i64 %495, 4
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %7, align 1, !tbaa !2447
  %499 = icmp eq i64 %486, 0
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %8, align 1, !tbaa !2448
  %501 = lshr i64 %486, 63
  %502 = trunc i64 %501 to i8
  store i8 %502, i8* %9, align 1, !tbaa !2449
  %503 = lshr i64 %485, 63
  %504 = xor i64 %501, %503
  %505 = add nuw nsw i64 %504, %501
  %506 = icmp eq i64 %505, 2
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %10, align 1, !tbaa !2450
  %508 = add i64 %482, 15
  store i64 %508, i64* %PC, align 8
  store i64 %486, i64* %484, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %509 = add i64 %360, -12
  store i64 4196149, i64* %PC, align 8
  %510 = inttoptr i64 %509 to i32*
  store i32 10, i32* %510, align 4
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -12
  %513 = load i64, i64* %PC, align 8
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %512 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RDI, align 8, !tbaa !2428
  %518 = add i64 %513, -581
  %519 = add i64 %513, 8
  %520 = load i64, i64* %4, align 8, !tbaa !2428
  %521 = add i64 %520, -8
  %522 = inttoptr i64 %521 to i64*
  store i64 %519, i64* %522, align 8
  store i64 %521, i64* %4, align 8, !tbaa !2428
  store i64 %518, i64* %PC, align 8, !tbaa !2428
  %523 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %518, %struct.Memory* %MEMORY.0)
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -8
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %525 to i64*
  %529 = load i64, i64* %528, align 8
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = add i64 %529, 4
  store i64 %530, i64* %RCX, align 8, !tbaa !2428
  %531 = icmp ugt i64 %529, -5
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %5, align 1, !tbaa !2432
  %533 = trunc i64 %530 to i32
  %534 = and i32 %533, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #8
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %6, align 1, !tbaa !2446
  %539 = xor i64 %529, %530
  %540 = lshr i64 %539, 4
  %541 = trunc i64 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %7, align 1, !tbaa !2447
  %543 = icmp eq i64 %530, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %8, align 1, !tbaa !2448
  %545 = lshr i64 %530, 63
  %546 = trunc i64 %545 to i8
  store i8 %546, i8* %9, align 1, !tbaa !2449
  %547 = lshr i64 %529, 63
  %548 = xor i64 %545, %547
  %549 = add nuw nsw i64 %548, %545
  %550 = icmp eq i64 %549, 2
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %10, align 1, !tbaa !2450
  %552 = add i64 %526, 15
  store i64 %552, i64* %PC, align 8
  store i64 %530, i64* %528, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %553 = add i64 %360, -12
  store i64 4196399, i64* %PC, align 8
  %554 = inttoptr i64 %553 to i32*
  store i32 15, i32* %554, align 4
  %555 = load i64, i64* %RBP, align 8
  %556 = add i64 %555, -12
  %557 = load i64, i64* %PC, align 8
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559, align 4
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RDI, align 8, !tbaa !2428
  %562 = add i64 %557, -831
  %563 = add i64 %557, 8
  %564 = load i64, i64* %4, align 8, !tbaa !2428
  %565 = add i64 %564, -8
  %566 = inttoptr i64 %565 to i64*
  store i64 %563, i64* %566, align 8
  store i64 %565, i64* %4, align 8, !tbaa !2428
  store i64 %562, i64* %PC, align 8, !tbaa !2428
  %567 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %562, %struct.Memory* %MEMORY.0)
  %568 = load i64, i64* %RBP, align 8
  %569 = add i64 %568, -8
  %570 = load i64, i64* %PC, align 8
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = add i64 %573, 4
  store i64 %574, i64* %RCX, align 8, !tbaa !2428
  %575 = icmp ugt i64 %573, -5
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %5, align 1, !tbaa !2432
  %577 = trunc i64 %574 to i32
  %578 = and i32 %577, 255
  %579 = tail call i32 @llvm.ctpop.i32(i32 %578) #8
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = xor i8 %581, 1
  store i8 %582, i8* %6, align 1, !tbaa !2446
  %583 = xor i64 %573, %574
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  store i8 %586, i8* %7, align 1, !tbaa !2447
  %587 = icmp eq i64 %574, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %8, align 1, !tbaa !2448
  %589 = lshr i64 %574, 63
  %590 = trunc i64 %589 to i8
  store i8 %590, i8* %9, align 1, !tbaa !2449
  %591 = lshr i64 %573, 63
  %592 = xor i64 %589, %591
  %593 = add nuw nsw i64 %592, %589
  %594 = icmp eq i64 %593, 2
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %10, align 1, !tbaa !2450
  %596 = add i64 %570, 15
  store i64 %596, i64* %PC, align 8
  store i64 %574, i64* %572, align 8
  br label %block_400566

block_4005a5:                                     ; preds = %block_40059e, %3
  %597 = phi i64 [ %1, %3 ], [ %.pre, %block_40059e ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40059e ]
  %598 = load i64, i64* %RBP, align 8
  %599 = add i64 %598, -12
  %600 = add i64 %597, 3
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i32*
  %602 = load i32, i32* %601, align 4
  %603 = zext i32 %602 to i64
  store i64 %603, i64* %RDI, align 8, !tbaa !2428
  %604 = add i64 %597, -181
  %605 = add i64 %597, 8
  %606 = load i64, i64* %4, align 8, !tbaa !2428
  %607 = add i64 %606, -8
  %608 = inttoptr i64 %607 to i64*
  store i64 %605, i64* %608, align 8
  store i64 %607, i64* %4, align 8, !tbaa !2428
  store i64 %604, i64* %PC, align 8, !tbaa !2428
  %609 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %604, %struct.Memory* %MEMORY.1)
  %610 = load i64, i64* %RBP, align 8
  %611 = add i64 %610, -8
  %612 = load i64, i64* %PC, align 8
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = add i64 %615, 4
  store i64 %616, i64* %RCX, align 8, !tbaa !2428
  %617 = icmp ugt i64 %615, -5
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %5, align 1, !tbaa !2432
  %619 = trunc i64 %616 to i32
  %620 = and i32 %619, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620) #8
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %6, align 1, !tbaa !2446
  %625 = xor i64 %615, %616
  %626 = lshr i64 %625, 4
  %627 = trunc i64 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %7, align 1, !tbaa !2447
  %629 = icmp eq i64 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %8, align 1, !tbaa !2448
  %631 = lshr i64 %616, 63
  %632 = trunc i64 %631 to i8
  store i8 %632, i8* %9, align 1, !tbaa !2449
  %633 = lshr i64 %615, 63
  %634 = xor i64 %631, %633
  %635 = add nuw nsw i64 %634, %631
  %636 = icmp eq i64 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %10, align 1, !tbaa !2450
  %638 = add i64 %612, 15
  store i64 %638, i64* %PC, align 8
  store i64 %616, i64* %614, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %639 = add i64 %360, -12
  store i64 4196649, i64* %PC, align 8
  %640 = inttoptr i64 %639 to i32*
  store i32 20, i32* %640, align 4
  %641 = load i64, i64* %RBP, align 8
  %642 = add i64 %641, -12
  %643 = load i64, i64* %PC, align 8
  %644 = add i64 %643, 3
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %642 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %RDI, align 8, !tbaa !2428
  %648 = add i64 %643, -1081
  %649 = add i64 %643, 8
  %650 = load i64, i64* %4, align 8, !tbaa !2428
  %651 = add i64 %650, -8
  %652 = inttoptr i64 %651 to i64*
  store i64 %649, i64* %652, align 8
  store i64 %651, i64* %4, align 8, !tbaa !2428
  store i64 %648, i64* %PC, align 8, !tbaa !2428
  %653 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %648, %struct.Memory* %MEMORY.0)
  %654 = load i64, i64* %RBP, align 8
  %655 = add i64 %654, -8
  %656 = load i64, i64* %PC, align 8
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RAX, align 8, !tbaa !2428
  %660 = add i64 %659, 4
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = icmp ugt i64 %659, -5
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %5, align 1, !tbaa !2432
  %663 = trunc i64 %660 to i32
  %664 = and i32 %663, 255
  %665 = tail call i32 @llvm.ctpop.i32(i32 %664) #8
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  store i8 %668, i8* %6, align 1, !tbaa !2446
  %669 = xor i64 %659, %660
  %670 = lshr i64 %669, 4
  %671 = trunc i64 %670 to i8
  %672 = and i8 %671, 1
  store i8 %672, i8* %7, align 1, !tbaa !2447
  %673 = icmp eq i64 %660, 0
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %8, align 1, !tbaa !2448
  %675 = lshr i64 %660, 63
  %676 = trunc i64 %675 to i8
  store i8 %676, i8* %9, align 1, !tbaa !2449
  %677 = lshr i64 %659, 63
  %678 = xor i64 %675, %677
  %679 = add nuw nsw i64 %678, %675
  %680 = icmp eq i64 %679, 2
  %681 = zext i1 %680 to i8
  store i8 %681, i8* %10, align 1, !tbaa !2450
  %682 = add i64 %656, 15
  store i64 %682, i64* %PC, align 8
  store i64 %660, i64* %658, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %683 = add i64 %360, -12
  store i64 4195749, i64* %PC, align 8
  %684 = inttoptr i64 %683 to i32*
  store i32 2, i32* %684, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4005a5

block_400559:                                     ; preds = %block_400566
  %685 = add i64 %360, -12
  store i64 4195680, i64* %PC, align 8
  %686 = inttoptr i64 %685 to i32*
  store i32 0, i32* %686, align 4
  %687 = load i64, i64* %PC, align 8
  %688 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %687, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %688

block_400a1c:                                     ; preds = %block_400566
  %689 = add i64 %360, -12
  store i64 4196899, i64* %PC, align 8
  %690 = inttoptr i64 %689 to i32*
  store i32 25, i32* %690, align 4
  %691 = load i64, i64* %PC, align 8
  %692 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %691, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %692

block_400698:                                     ; preds = %block_400566
  %693 = add i64 %360, -12
  store i64 4195999, i64* %PC, align 8
  %694 = inttoptr i64 %693 to i32*
  store i32 7, i32* %694, align 4
  %695 = load i64, i64* %PC, align 8
  %696 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %695, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %696

block_400b16:                                     ; preds = %block_400566
  %697 = add i64 %360, -12
  store i64 4197149, i64* %PC, align 8
  %698 = inttoptr i64 %697 to i32*
  store i32 30, i32* %698, align 4
  %699 = load i64, i64* %PC, align 8
  %700 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %699, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %700

block_400792:                                     ; preds = %block_400566
  %701 = add i64 %360, -12
  store i64 4196249, i64* %PC, align 8
  %702 = inttoptr i64 %701 to i32*
  store i32 12, i32* %702, align 4
  %703 = load i64, i64* %PC, align 8
  %704 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %703, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %704

block_40088c:                                     ; preds = %block_400566
  %705 = add i64 %360, -12
  store i64 4196499, i64* %PC, align 8
  %706 = inttoptr i64 %705 to i32*
  store i32 17, i32* %706, align 4
  %707 = load i64, i64* %PC, align 8
  %708 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %707, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %708

block_400986:                                     ; preds = %block_400566
  %709 = add i64 %360, -12
  store i64 4196749, i64* %PC, align 8
  %710 = inttoptr i64 %709 to i32*
  store i32 22, i32* %710, align 4
  %711 = load i64, i64* %PC, align 8
  %712 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %711, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %712

block_400602:                                     ; preds = %block_400566
  %713 = add i64 %360, -12
  store i64 4195849, i64* %PC, align 8
  %714 = inttoptr i64 %713 to i32*
  store i32 4, i32* %714, align 4
  %715 = load i64, i64* %PC, align 8
  %716 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %715, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %716

block_400a80:                                     ; preds = %block_400566
  %717 = add i64 %360, -12
  store i64 4196999, i64* %PC, align 8
  %718 = inttoptr i64 %717 to i32*
  store i32 27, i32* %718, align 4
  %719 = load i64, i64* %PC, align 8
  %720 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %719, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %720

; <label>:721:                                    ; preds = %block_400566
  %722 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %364, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %722
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003c8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4003c8:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_4003c8.block_4003da_crit_edge, label %block_4003d8

block_4003c8.block_4003da_crit_edge:              ; preds = %block_4003c8
  br label %block_4003da

block_4003d8:                                     ; preds = %block_4003c8
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4003da

block_4003da:                                     ; preds = %block_4003c8.block_4003da_crit_edge, %block_4003d8
  %27 = phi i64 [ %22, %block_4003c8.block_4003da_crit_edge ], [ %.pre1, %block_4003d8 ]
  %28 = phi i64 [ %4, %block_4003c8.block_4003da_crit_edge ], [ %.pre, %block_4003d8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003c8.block_4003da_crit_edge ], [ %26, %block_4003d8 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #8
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005d7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4005d7

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %207, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %207, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %207, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %102 = add i64 %207, -12
  store i64 4196849, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 24, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -1281
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %146 = add i64 %207, -12
  store i64 4195949, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 6, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -381
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6, %block_4005d7
  %.sink16 = phi i64 [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 151, %block_4005d7 ]
  %MEMORY.0 = phi %struct.Memory* [ %985, %block_400792 ], [ %941, %block_400b16 ], [ %897, %block_400698 ], [ %853, %block_400a1c ], [ %807, %block_40059e ], [ %763, %block_400922 ], [ %719, %block_400828 ], [ %675, %block_40072e ], [ %631, %block_400ab2 ], [ %587, %block_400634 ], [ %543, %block_4009b8 ], [ %499, %block_40056c ], [ %435, %block_400954 ], [ %314, %block_40085a ], [ %270, %block_400760 ], [ %226, %block_400ae4 ], [ %160, %block_400666 ], [ %116, %block_4009ea ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %391, %block_4005d7 ]
  %190 = bitcast i64* %RAX to i32**
  %191 = load i32*, i32** %190, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %191, align 4
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %198 = add i64 %192, 11
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %192, 15
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %204, align 8
  %205 = load i64, i64* %PC, align 8
  %206 = sub i64 %205, %.sink16
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = add i64 %206, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  switch i64 %211, label %1031 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %212 = add i64 %207, -12
  store i64 4197099, i64* %PC, align 8
  %213 = inttoptr i64 %212 to i32*
  store i32 29, i32* %213, align 4
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -12
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RDI, align 8, !tbaa !2428
  %221 = add i64 %216, -1531
  %222 = add i64 %216, 8
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.0)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -8
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = add i64 %232, 4
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = icmp ugt i64 %232, -5
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %4, align 1, !tbaa !2432
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #8
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %5, align 1, !tbaa !2446
  %242 = xor i64 %232, %233
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %6, align 1, !tbaa !2447
  %246 = icmp eq i64 %233, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %7, align 1, !tbaa !2448
  %248 = lshr i64 %233, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %8, align 1, !tbaa !2449
  %250 = lshr i64 %232, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %9, align 1, !tbaa !2450
  %255 = add i64 %229, 15
  store i64 %255, i64* %PC, align 8
  store i64 %233, i64* %231, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %256 = add i64 %207, -12
  store i64 4196199, i64* %PC, align 8
  %257 = inttoptr i64 %256 to i32*
  store i32 11, i32* %257, align 4
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -12
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %260, -631
  %266 = add i64 %260, 8
  %267 = load i64, i64* %RSP, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269, align 8
  store i64 %268, i64* %RSP, align 8, !tbaa !2428
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  %270 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %265, %struct.Memory* %MEMORY.0)
  %271 = load i64, i64* %RBP, align 8
  %272 = add i64 %271, -8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %272 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %276, 4
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ugt i64 %276, -5
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %4, align 1, !tbaa !2432
  %280 = trunc i64 %277 to i32
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %5, align 1, !tbaa !2446
  %286 = xor i64 %276, %277
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  store i8 %289, i8* %6, align 1, !tbaa !2447
  %290 = icmp eq i64 %277, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %7, align 1, !tbaa !2448
  %292 = lshr i64 %277, 63
  %293 = trunc i64 %292 to i8
  store i8 %293, i8* %8, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %292, %294
  %296 = add nuw nsw i64 %295, %292
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %9, align 1, !tbaa !2450
  %299 = add i64 %273, 15
  store i64 %299, i64* %PC, align 8
  store i64 %277, i64* %275, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %300 = add i64 %207, -12
  store i64 4196449, i64* %PC, align 8
  %301 = inttoptr i64 %300 to i32*
  store i32 16, i32* %301, align 4
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -12
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDI, align 8, !tbaa !2428
  %309 = add i64 %304, -881
  %310 = add i64 %304, 8
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.0)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 4
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = icmp ugt i64 %320, -5
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %4, align 1, !tbaa !2432
  %324 = trunc i64 %321 to i32
  %325 = and i32 %324, 255
  %326 = tail call i32 @llvm.ctpop.i32(i32 %325) #8
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %5, align 1, !tbaa !2446
  %330 = xor i64 %320, %321
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %6, align 1, !tbaa !2447
  %334 = icmp eq i64 %321, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %7, align 1, !tbaa !2448
  %336 = lshr i64 %321, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %8, align 1, !tbaa !2449
  %338 = lshr i64 %320, 63
  %339 = xor i64 %336, %338
  %340 = add nuw nsw i64 %339, %336
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %9, align 1, !tbaa !2450
  %343 = add i64 %317, 15
  store i64 %343, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %344 = add i64 %207, -12
  store i64 4195680, i64* %PC, align 8
  %345 = inttoptr i64 %344 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RSP, align 8
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %346, 48
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %349 = icmp ugt i64 %346, -49
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %4, align 1, !tbaa !2432
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %5, align 1, !tbaa !2446
  %357 = xor i64 %346, 16
  %358 = xor i64 %357, %348
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %6, align 1, !tbaa !2447
  %362 = icmp eq i64 %348, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %7, align 1, !tbaa !2448
  %364 = lshr i64 %348, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %8, align 1, !tbaa !2449
  %366 = lshr i64 %346, 63
  %367 = xor i64 %364, %366
  %368 = add nuw nsw i64 %367, %364
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %9, align 1, !tbaa !2450
  %371 = add i64 %347, 5
  store i64 %371, i64* %PC, align 8
  %372 = add i64 %346, 56
  %373 = inttoptr i64 %348 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBP, align 8, !tbaa !2428
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %347, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %372 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %378 = add i64 %346, 64
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005d7:                                     ; preds = %block_4005d0, %3
  %379 = phi i64 [ %1, %3 ], [ %.pre, %block_4005d0 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4005d0 ]
  %380 = load i64, i64* %RBP, align 8
  %381 = add i64 %380, -12
  %382 = add i64 %379, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %379, -231
  %387 = add i64 %379, 8
  %388 = load i64, i64* %RSP, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %RSP, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %386, %struct.Memory* %MEMORY.1)
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %397, 4
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -5
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %4, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %5, align 1, !tbaa !2446
  %407 = xor i64 %397, %398
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %6, align 1, !tbaa !2447
  %411 = icmp eq i64 %398, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %7, align 1, !tbaa !2448
  %413 = lshr i64 %398, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %8, align 1, !tbaa !2449
  %415 = lshr i64 %397, 63
  %416 = xor i64 %413, %415
  %417 = add nuw nsw i64 %416, %413
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %9, align 1, !tbaa !2450
  %420 = add i64 %394, 15
  store i64 %420, i64* %PC, align 8
  store i64 %398, i64* %396, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %421 = add i64 %207, -12
  store i64 4196699, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 21, i32* %422, align 4
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -12
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = add i64 %425, -1131
  %431 = add i64 %425, 8
  %432 = load i64, i64* %RSP, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %RSP, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %MEMORY.0)
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = add i64 %441, 4
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = icmp ugt i64 %441, -5
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %4, align 1, !tbaa !2432
  %445 = trunc i64 %442 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #8
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %5, align 1, !tbaa !2446
  %451 = xor i64 %441, %442
  %452 = lshr i64 %451, 4
  %453 = trunc i64 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %6, align 1, !tbaa !2447
  %455 = icmp eq i64 %442, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %7, align 1, !tbaa !2448
  %457 = lshr i64 %442, 63
  %458 = trunc i64 %457 to i8
  store i8 %458, i8* %8, align 1, !tbaa !2449
  %459 = lshr i64 %441, 63
  %460 = xor i64 %457, %459
  %461 = add nuw nsw i64 %460, %457
  %462 = icmp eq i64 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %9, align 1, !tbaa !2450
  %464 = add i64 %438, 15
  store i64 %464, i64* %PC, align 8
  store i64 %442, i64* %440, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %465 = add i64 %207, -12
  store i64 4196949, i64* %PC, align 8
  %466 = inttoptr i64 %465 to i32*
  store i32 26, i32* %466, align 4
  %467 = load i64, i64* %PC, align 8
  %468 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %467, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %468

block_4006ca:                                     ; preds = %block_400566
  %469 = add i64 %207, -12
  store i64 4196049, i64* %PC, align 8
  %470 = inttoptr i64 %469 to i32*
  store i32 8, i32* %470, align 4
  %471 = load i64, i64* %PC, align 8
  %472 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %471, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %472

block_400b48:                                     ; preds = %block_400566
  %473 = add i64 %207, -12
  store i64 4197199, i64* %PC, align 8
  %474 = inttoptr i64 %473 to i32*
  store i32 31, i32* %474, align 4
  %475 = load i64, i64* %PC, align 8
  %476 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %475, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %476

block_4007c4:                                     ; preds = %block_400566
  %477 = add i64 %207, -12
  store i64 4196299, i64* %PC, align 8
  %478 = inttoptr i64 %477 to i32*
  store i32 13, i32* %478, align 4
  %479 = load i64, i64* %PC, align 8
  %480 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %479, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %480

block_4008be:                                     ; preds = %block_400566
  %481 = add i64 %207, -12
  store i64 4196549, i64* %PC, align 8
  %482 = inttoptr i64 %481 to i32*
  store i32 18, i32* %482, align 4
  %483 = load i64, i64* %PC, align 8
  %484 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %483, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %484

block_40056c:                                     ; preds = %block_400566
  %485 = add i64 %207, -12
  store i64 4195699, i64* %PC, align 8
  %486 = inttoptr i64 %485 to i32*
  store i32 1, i32* %486, align 4
  %487 = load i64, i64* %RBP, align 8
  %488 = add i64 %487, -12
  %489 = load i64, i64* %PC, align 8
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC, align 8
  %491 = inttoptr i64 %488 to i32*
  %492 = load i32, i32* %491, align 4
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RDI, align 8, !tbaa !2428
  %494 = add i64 %489, -131
  %495 = add i64 %489, 8
  %496 = load i64, i64* %RSP, align 8, !tbaa !2428
  %497 = add i64 %496, -8
  %498 = inttoptr i64 %497 to i64*
  store i64 %495, i64* %498, align 8
  store i64 %497, i64* %RSP, align 8, !tbaa !2428
  store i64 %494, i64* %PC, align 8, !tbaa !2428
  %499 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %494, %struct.Memory* %MEMORY.0)
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -8
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = add i64 %505, 4
  store i64 %506, i64* %RCX, align 8, !tbaa !2428
  %507 = icmp ugt i64 %505, -5
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %4, align 1, !tbaa !2432
  %509 = trunc i64 %506 to i32
  %510 = and i32 %509, 255
  %511 = tail call i32 @llvm.ctpop.i32(i32 %510) #8
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  store i8 %514, i8* %5, align 1, !tbaa !2446
  %515 = xor i64 %505, %506
  %516 = lshr i64 %515, 4
  %517 = trunc i64 %516 to i8
  %518 = and i8 %517, 1
  store i8 %518, i8* %6, align 1, !tbaa !2447
  %519 = icmp eq i64 %506, 0
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %7, align 1, !tbaa !2448
  %521 = lshr i64 %506, 63
  %522 = trunc i64 %521 to i8
  store i8 %522, i8* %8, align 1, !tbaa !2449
  %523 = lshr i64 %505, 63
  %524 = xor i64 %521, %523
  %525 = add nuw nsw i64 %524, %521
  %526 = icmp eq i64 %525, 2
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %9, align 1, !tbaa !2450
  %528 = add i64 %502, 15
  store i64 %528, i64* %PC, align 8
  store i64 %506, i64* %504, align 8
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %529 = add i64 %207, -12
  store i64 4196799, i64* %PC, align 8
  %530 = inttoptr i64 %529 to i32*
  store i32 23, i32* %530, align 4
  %531 = load i64, i64* %RBP, align 8
  %532 = add i64 %531, -12
  %533 = load i64, i64* %PC, align 8
  %534 = add i64 %533, 3
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %532 to i32*
  %536 = load i32, i32* %535, align 4
  %537 = zext i32 %536 to i64
  store i64 %537, i64* %RDI, align 8, !tbaa !2428
  %538 = add i64 %533, -1231
  %539 = add i64 %533, 8
  %540 = load i64, i64* %RSP, align 8, !tbaa !2428
  %541 = add i64 %540, -8
  %542 = inttoptr i64 %541 to i64*
  store i64 %539, i64* %542, align 8
  store i64 %541, i64* %RSP, align 8, !tbaa !2428
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  %543 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %538, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -8
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = add i64 %549, 4
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = icmp ugt i64 %549, -5
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %4, align 1, !tbaa !2432
  %553 = trunc i64 %550 to i32
  %554 = and i32 %553, 255
  %555 = tail call i32 @llvm.ctpop.i32(i32 %554) #8
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  store i8 %558, i8* %5, align 1, !tbaa !2446
  %559 = xor i64 %549, %550
  %560 = lshr i64 %559, 4
  %561 = trunc i64 %560 to i8
  %562 = and i8 %561, 1
  store i8 %562, i8* %6, align 1, !tbaa !2447
  %563 = icmp eq i64 %550, 0
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %7, align 1, !tbaa !2448
  %565 = lshr i64 %550, 63
  %566 = trunc i64 %565 to i8
  store i8 %566, i8* %8, align 1, !tbaa !2449
  %567 = lshr i64 %549, 63
  %568 = xor i64 %565, %567
  %569 = add nuw nsw i64 %568, %565
  %570 = icmp eq i64 %569, 2
  %571 = zext i1 %570 to i8
  store i8 %571, i8* %9, align 1, !tbaa !2450
  %572 = add i64 %546, 15
  store i64 %572, i64* %PC, align 8
  store i64 %550, i64* %548, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %573 = add i64 %207, -12
  store i64 4195899, i64* %PC, align 8
  %574 = inttoptr i64 %573 to i32*
  store i32 5, i32* %574, align 4
  %575 = load i64, i64* %RBP, align 8
  %576 = add i64 %575, -12
  %577 = load i64, i64* %PC, align 8
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579, align 4
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RDI, align 8, !tbaa !2428
  %582 = add i64 %577, -331
  %583 = add i64 %577, 8
  %584 = load i64, i64* %RSP, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %583, i64* %586, align 8
  store i64 %585, i64* %RSP, align 8, !tbaa !2428
  store i64 %582, i64* %PC, align 8, !tbaa !2428
  %587 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %582, %struct.Memory* %MEMORY.0)
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -8
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = add i64 %593, 4
  store i64 %594, i64* %RCX, align 8, !tbaa !2428
  %595 = icmp ugt i64 %593, -5
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %4, align 1, !tbaa !2432
  %597 = trunc i64 %594 to i32
  %598 = and i32 %597, 255
  %599 = tail call i32 @llvm.ctpop.i32(i32 %598) #8
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = xor i8 %601, 1
  store i8 %602, i8* %5, align 1, !tbaa !2446
  %603 = xor i64 %593, %594
  %604 = lshr i64 %603, 4
  %605 = trunc i64 %604 to i8
  %606 = and i8 %605, 1
  store i8 %606, i8* %6, align 1, !tbaa !2447
  %607 = icmp eq i64 %594, 0
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %7, align 1, !tbaa !2448
  %609 = lshr i64 %594, 63
  %610 = trunc i64 %609 to i8
  store i8 %610, i8* %8, align 1, !tbaa !2449
  %611 = lshr i64 %593, 63
  %612 = xor i64 %609, %611
  %613 = add nuw nsw i64 %612, %609
  %614 = icmp eq i64 %613, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %9, align 1, !tbaa !2450
  %616 = add i64 %590, 15
  store i64 %616, i64* %PC, align 8
  store i64 %594, i64* %592, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %617 = add i64 %207, -12
  store i64 4197049, i64* %PC, align 8
  %618 = inttoptr i64 %617 to i32*
  store i32 28, i32* %618, align 4
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -12
  %621 = load i64, i64* %PC, align 8
  %622 = add i64 %621, 3
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %620 to i32*
  %624 = load i32, i32* %623, align 4
  %625 = zext i32 %624 to i64
  store i64 %625, i64* %RDI, align 8, !tbaa !2428
  %626 = add i64 %621, -1481
  %627 = add i64 %621, 8
  %628 = load i64, i64* %RSP, align 8, !tbaa !2428
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %627, i64* %630, align 8
  store i64 %629, i64* %RSP, align 8, !tbaa !2428
  store i64 %626, i64* %PC, align 8, !tbaa !2428
  %631 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %626, %struct.Memory* %MEMORY.0)
  %632 = load i64, i64* %RBP, align 8
  %633 = add i64 %632, -8
  %634 = load i64, i64* %PC, align 8
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %633 to i64*
  %637 = load i64, i64* %636, align 8
  store i64 %637, i64* %RAX, align 8, !tbaa !2428
  %638 = add i64 %637, 4
  store i64 %638, i64* %RCX, align 8, !tbaa !2428
  %639 = icmp ugt i64 %637, -5
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %4, align 1, !tbaa !2432
  %641 = trunc i64 %638 to i32
  %642 = and i32 %641, 255
  %643 = tail call i32 @llvm.ctpop.i32(i32 %642) #8
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  %646 = xor i8 %645, 1
  store i8 %646, i8* %5, align 1, !tbaa !2446
  %647 = xor i64 %637, %638
  %648 = lshr i64 %647, 4
  %649 = trunc i64 %648 to i8
  %650 = and i8 %649, 1
  store i8 %650, i8* %6, align 1, !tbaa !2447
  %651 = icmp eq i64 %638, 0
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %7, align 1, !tbaa !2448
  %653 = lshr i64 %638, 63
  %654 = trunc i64 %653 to i8
  store i8 %654, i8* %8, align 1, !tbaa !2449
  %655 = lshr i64 %637, 63
  %656 = xor i64 %653, %655
  %657 = add nuw nsw i64 %656, %653
  %658 = icmp eq i64 %657, 2
  %659 = zext i1 %658 to i8
  store i8 %659, i8* %9, align 1, !tbaa !2450
  %660 = add i64 %634, 15
  store i64 %660, i64* %PC, align 8
  store i64 %638, i64* %636, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %661 = add i64 %207, -12
  store i64 4196149, i64* %PC, align 8
  %662 = inttoptr i64 %661 to i32*
  store i32 10, i32* %662, align 4
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -12
  %665 = load i64, i64* %PC, align 8
  %666 = add i64 %665, 3
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %664 to i32*
  %668 = load i32, i32* %667, align 4
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RDI, align 8, !tbaa !2428
  %670 = add i64 %665, -581
  %671 = add i64 %665, 8
  %672 = load i64, i64* %RSP, align 8, !tbaa !2428
  %673 = add i64 %672, -8
  %674 = inttoptr i64 %673 to i64*
  store i64 %671, i64* %674, align 8
  store i64 %673, i64* %RSP, align 8, !tbaa !2428
  store i64 %670, i64* %PC, align 8, !tbaa !2428
  %675 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %670, %struct.Memory* %MEMORY.0)
  %676 = load i64, i64* %RBP, align 8
  %677 = add i64 %676, -8
  %678 = load i64, i64* %PC, align 8
  %679 = add i64 %678, 4
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %677 to i64*
  %681 = load i64, i64* %680, align 8
  store i64 %681, i64* %RAX, align 8, !tbaa !2428
  %682 = add i64 %681, 4
  store i64 %682, i64* %RCX, align 8, !tbaa !2428
  %683 = icmp ugt i64 %681, -5
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %4, align 1, !tbaa !2432
  %685 = trunc i64 %682 to i32
  %686 = and i32 %685, 255
  %687 = tail call i32 @llvm.ctpop.i32(i32 %686) #8
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = xor i8 %689, 1
  store i8 %690, i8* %5, align 1, !tbaa !2446
  %691 = xor i64 %681, %682
  %692 = lshr i64 %691, 4
  %693 = trunc i64 %692 to i8
  %694 = and i8 %693, 1
  store i8 %694, i8* %6, align 1, !tbaa !2447
  %695 = icmp eq i64 %682, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %7, align 1, !tbaa !2448
  %697 = lshr i64 %682, 63
  %698 = trunc i64 %697 to i8
  store i8 %698, i8* %8, align 1, !tbaa !2449
  %699 = lshr i64 %681, 63
  %700 = xor i64 %697, %699
  %701 = add nuw nsw i64 %700, %697
  %702 = icmp eq i64 %701, 2
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %9, align 1, !tbaa !2450
  %704 = add i64 %678, 15
  store i64 %704, i64* %PC, align 8
  store i64 %682, i64* %680, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %705 = add i64 %207, -12
  store i64 4196399, i64* %PC, align 8
  %706 = inttoptr i64 %705 to i32*
  store i32 15, i32* %706, align 4
  %707 = load i64, i64* %RBP, align 8
  %708 = add i64 %707, -12
  %709 = load i64, i64* %PC, align 8
  %710 = add i64 %709, 3
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %708 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = zext i32 %712 to i64
  store i64 %713, i64* %RDI, align 8, !tbaa !2428
  %714 = add i64 %709, -831
  %715 = add i64 %709, 8
  %716 = load i64, i64* %RSP, align 8, !tbaa !2428
  %717 = add i64 %716, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %715, i64* %718, align 8
  store i64 %717, i64* %RSP, align 8, !tbaa !2428
  store i64 %714, i64* %PC, align 8, !tbaa !2428
  %719 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %714, %struct.Memory* %MEMORY.0)
  %720 = load i64, i64* %RBP, align 8
  %721 = add i64 %720, -8
  %722 = load i64, i64* %PC, align 8
  %723 = add i64 %722, 4
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %721 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = add i64 %725, 4
  store i64 %726, i64* %RCX, align 8, !tbaa !2428
  %727 = icmp ugt i64 %725, -5
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %4, align 1, !tbaa !2432
  %729 = trunc i64 %726 to i32
  %730 = and i32 %729, 255
  %731 = tail call i32 @llvm.ctpop.i32(i32 %730) #8
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  store i8 %734, i8* %5, align 1, !tbaa !2446
  %735 = xor i64 %725, %726
  %736 = lshr i64 %735, 4
  %737 = trunc i64 %736 to i8
  %738 = and i8 %737, 1
  store i8 %738, i8* %6, align 1, !tbaa !2447
  %739 = icmp eq i64 %726, 0
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %7, align 1, !tbaa !2448
  %741 = lshr i64 %726, 63
  %742 = trunc i64 %741 to i8
  store i8 %742, i8* %8, align 1, !tbaa !2449
  %743 = lshr i64 %725, 63
  %744 = xor i64 %741, %743
  %745 = add nuw nsw i64 %744, %741
  %746 = icmp eq i64 %745, 2
  %747 = zext i1 %746 to i8
  store i8 %747, i8* %9, align 1, !tbaa !2450
  %748 = add i64 %722, 15
  store i64 %748, i64* %PC, align 8
  store i64 %726, i64* %724, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %749 = add i64 %207, -12
  store i64 4196649, i64* %PC, align 8
  %750 = inttoptr i64 %749 to i32*
  store i32 20, i32* %750, align 4
  %751 = load i64, i64* %RBP, align 8
  %752 = add i64 %751, -12
  %753 = load i64, i64* %PC, align 8
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %752 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = zext i32 %756 to i64
  store i64 %757, i64* %RDI, align 8, !tbaa !2428
  %758 = add i64 %753, -1081
  %759 = add i64 %753, 8
  %760 = load i64, i64* %RSP, align 8, !tbaa !2428
  %761 = add i64 %760, -8
  %762 = inttoptr i64 %761 to i64*
  store i64 %759, i64* %762, align 8
  store i64 %761, i64* %RSP, align 8, !tbaa !2428
  store i64 %758, i64* %PC, align 8, !tbaa !2428
  %763 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %758, %struct.Memory* %MEMORY.0)
  %764 = load i64, i64* %RBP, align 8
  %765 = add i64 %764, -8
  %766 = load i64, i64* %PC, align 8
  %767 = add i64 %766, 4
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %765 to i64*
  %769 = load i64, i64* %768, align 8
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = add i64 %769, 4
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = icmp ugt i64 %769, -5
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %4, align 1, !tbaa !2432
  %773 = trunc i64 %770 to i32
  %774 = and i32 %773, 255
  %775 = tail call i32 @llvm.ctpop.i32(i32 %774) #8
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  store i8 %778, i8* %5, align 1, !tbaa !2446
  %779 = xor i64 %769, %770
  %780 = lshr i64 %779, 4
  %781 = trunc i64 %780 to i8
  %782 = and i8 %781, 1
  store i8 %782, i8* %6, align 1, !tbaa !2447
  %783 = icmp eq i64 %770, 0
  %784 = zext i1 %783 to i8
  store i8 %784, i8* %7, align 1, !tbaa !2448
  %785 = lshr i64 %770, 63
  %786 = trunc i64 %785 to i8
  store i8 %786, i8* %8, align 1, !tbaa !2449
  %787 = lshr i64 %769, 63
  %788 = xor i64 %785, %787
  %789 = add nuw nsw i64 %788, %785
  %790 = icmp eq i64 %789, 2
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %9, align 1, !tbaa !2450
  %792 = add i64 %766, 15
  store i64 %792, i64* %PC, align 8
  store i64 %770, i64* %768, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %793 = add i64 %207, -12
  store i64 4195749, i64* %PC, align 8
  %794 = inttoptr i64 %793 to i32*
  store i32 2, i32* %794, align 4
  %795 = load i64, i64* %RBP, align 8
  %796 = add i64 %795, -12
  %797 = load i64, i64* %PC, align 8
  %798 = add i64 %797, 3
  store i64 %798, i64* %PC, align 8
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799, align 4
  %801 = zext i32 %800 to i64
  store i64 %801, i64* %RDI, align 8, !tbaa !2428
  %802 = add i64 %797, -181
  %803 = add i64 %797, 8
  %804 = load i64, i64* %RSP, align 8, !tbaa !2428
  %805 = add i64 %804, -8
  %806 = inttoptr i64 %805 to i64*
  store i64 %803, i64* %806, align 8
  store i64 %805, i64* %RSP, align 8, !tbaa !2428
  store i64 %802, i64* %PC, align 8, !tbaa !2428
  %807 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %802, %struct.Memory* %MEMORY.0)
  %808 = load i64, i64* %RBP, align 8
  %809 = add i64 %808, -8
  %810 = load i64, i64* %PC, align 8
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC, align 8
  %812 = inttoptr i64 %809 to i64*
  %813 = load i64, i64* %812, align 8
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = add i64 %813, 4
  store i64 %814, i64* %RCX, align 8, !tbaa !2428
  %815 = icmp ugt i64 %813, -5
  %816 = zext i1 %815 to i8
  store i8 %816, i8* %4, align 1, !tbaa !2432
  %817 = trunc i64 %814 to i32
  %818 = and i32 %817, 255
  %819 = tail call i32 @llvm.ctpop.i32(i32 %818) #8
  %820 = trunc i32 %819 to i8
  %821 = and i8 %820, 1
  %822 = xor i8 %821, 1
  store i8 %822, i8* %5, align 1, !tbaa !2446
  %823 = xor i64 %813, %814
  %824 = lshr i64 %823, 4
  %825 = trunc i64 %824 to i8
  %826 = and i8 %825, 1
  store i8 %826, i8* %6, align 1, !tbaa !2447
  %827 = icmp eq i64 %814, 0
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %7, align 1, !tbaa !2448
  %829 = lshr i64 %814, 63
  %830 = trunc i64 %829 to i8
  store i8 %830, i8* %8, align 1, !tbaa !2449
  %831 = lshr i64 %813, 63
  %832 = xor i64 %829, %831
  %833 = add nuw nsw i64 %832, %829
  %834 = icmp eq i64 %833, 2
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %9, align 1, !tbaa !2450
  %836 = add i64 %810, 15
  store i64 %836, i64* %PC, align 8
  store i64 %814, i64* %812, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %837 = add i64 %207, -12
  store i64 4195799, i64* %PC, align 8
  %838 = inttoptr i64 %837 to i32*
  store i32 3, i32* %838, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4005d7

block_400a1c:                                     ; preds = %block_400566
  %839 = add i64 %207, -12
  store i64 4196899, i64* %PC, align 8
  %840 = inttoptr i64 %839 to i32*
  store i32 25, i32* %840, align 4
  %841 = load i64, i64* %RBP, align 8
  %842 = add i64 %841, -12
  %843 = load i64, i64* %PC, align 8
  %844 = add i64 %843, 3
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %842 to i32*
  %846 = load i32, i32* %845, align 4
  %847 = zext i32 %846 to i64
  store i64 %847, i64* %RDI, align 8, !tbaa !2428
  %848 = add i64 %843, -1331
  %849 = add i64 %843, 8
  %850 = load i64, i64* %RSP, align 8, !tbaa !2428
  %851 = add i64 %850, -8
  %852 = inttoptr i64 %851 to i64*
  store i64 %849, i64* %852, align 8
  store i64 %851, i64* %RSP, align 8, !tbaa !2428
  store i64 %848, i64* %PC, align 8, !tbaa !2428
  %853 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %848, %struct.Memory* %MEMORY.0)
  %854 = load i64, i64* %RBP, align 8
  %855 = add i64 %854, -8
  %856 = load i64, i64* %PC, align 8
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %855 to i64*
  %859 = load i64, i64* %858, align 8
  store i64 %859, i64* %RAX, align 8, !tbaa !2428
  %860 = add i64 %859, 4
  store i64 %860, i64* %RCX, align 8, !tbaa !2428
  %861 = icmp ugt i64 %859, -5
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %4, align 1, !tbaa !2432
  %863 = trunc i64 %860 to i32
  %864 = and i32 %863, 255
  %865 = tail call i32 @llvm.ctpop.i32(i32 %864) #8
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  store i8 %868, i8* %5, align 1, !tbaa !2446
  %869 = xor i64 %859, %860
  %870 = lshr i64 %869, 4
  %871 = trunc i64 %870 to i8
  %872 = and i8 %871, 1
  store i8 %872, i8* %6, align 1, !tbaa !2447
  %873 = icmp eq i64 %860, 0
  %874 = zext i1 %873 to i8
  store i8 %874, i8* %7, align 1, !tbaa !2448
  %875 = lshr i64 %860, 63
  %876 = trunc i64 %875 to i8
  store i8 %876, i8* %8, align 1, !tbaa !2449
  %877 = lshr i64 %859, 63
  %878 = xor i64 %875, %877
  %879 = add nuw nsw i64 %878, %875
  %880 = icmp eq i64 %879, 2
  %881 = zext i1 %880 to i8
  store i8 %881, i8* %9, align 1, !tbaa !2450
  %882 = add i64 %856, 15
  store i64 %882, i64* %PC, align 8
  store i64 %860, i64* %858, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %883 = add i64 %207, -12
  store i64 4195999, i64* %PC, align 8
  %884 = inttoptr i64 %883 to i32*
  store i32 7, i32* %884, align 4
  %885 = load i64, i64* %RBP, align 8
  %886 = add i64 %885, -12
  %887 = load i64, i64* %PC, align 8
  %888 = add i64 %887, 3
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %886 to i32*
  %890 = load i32, i32* %889, align 4
  %891 = zext i32 %890 to i64
  store i64 %891, i64* %RDI, align 8, !tbaa !2428
  %892 = add i64 %887, -431
  %893 = add i64 %887, 8
  %894 = load i64, i64* %RSP, align 8, !tbaa !2428
  %895 = add i64 %894, -8
  %896 = inttoptr i64 %895 to i64*
  store i64 %893, i64* %896, align 8
  store i64 %895, i64* %RSP, align 8, !tbaa !2428
  store i64 %892, i64* %PC, align 8, !tbaa !2428
  %897 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %892, %struct.Memory* %MEMORY.0)
  %898 = load i64, i64* %RBP, align 8
  %899 = add i64 %898, -8
  %900 = load i64, i64* %PC, align 8
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %899 to i64*
  %903 = load i64, i64* %902, align 8
  store i64 %903, i64* %RAX, align 8, !tbaa !2428
  %904 = add i64 %903, 4
  store i64 %904, i64* %RCX, align 8, !tbaa !2428
  %905 = icmp ugt i64 %903, -5
  %906 = zext i1 %905 to i8
  store i8 %906, i8* %4, align 1, !tbaa !2432
  %907 = trunc i64 %904 to i32
  %908 = and i32 %907, 255
  %909 = tail call i32 @llvm.ctpop.i32(i32 %908) #8
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  store i8 %912, i8* %5, align 1, !tbaa !2446
  %913 = xor i64 %903, %904
  %914 = lshr i64 %913, 4
  %915 = trunc i64 %914 to i8
  %916 = and i8 %915, 1
  store i8 %916, i8* %6, align 1, !tbaa !2447
  %917 = icmp eq i64 %904, 0
  %918 = zext i1 %917 to i8
  store i8 %918, i8* %7, align 1, !tbaa !2448
  %919 = lshr i64 %904, 63
  %920 = trunc i64 %919 to i8
  store i8 %920, i8* %8, align 1, !tbaa !2449
  %921 = lshr i64 %903, 63
  %922 = xor i64 %919, %921
  %923 = add nuw nsw i64 %922, %919
  %924 = icmp eq i64 %923, 2
  %925 = zext i1 %924 to i8
  store i8 %925, i8* %9, align 1, !tbaa !2450
  %926 = add i64 %900, 15
  store i64 %926, i64* %PC, align 8
  store i64 %904, i64* %902, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %927 = add i64 %207, -12
  store i64 4197149, i64* %PC, align 8
  %928 = inttoptr i64 %927 to i32*
  store i32 30, i32* %928, align 4
  %929 = load i64, i64* %RBP, align 8
  %930 = add i64 %929, -12
  %931 = load i64, i64* %PC, align 8
  %932 = add i64 %931, 3
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %930 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = zext i32 %934 to i64
  store i64 %935, i64* %RDI, align 8, !tbaa !2428
  %936 = add i64 %931, -1581
  %937 = add i64 %931, 8
  %938 = load i64, i64* %RSP, align 8, !tbaa !2428
  %939 = add i64 %938, -8
  %940 = inttoptr i64 %939 to i64*
  store i64 %937, i64* %940, align 8
  store i64 %939, i64* %RSP, align 8, !tbaa !2428
  store i64 %936, i64* %PC, align 8, !tbaa !2428
  %941 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %936, %struct.Memory* %MEMORY.0)
  %942 = load i64, i64* %RBP, align 8
  %943 = add i64 %942, -8
  %944 = load i64, i64* %PC, align 8
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %943 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RAX, align 8, !tbaa !2428
  %948 = add i64 %947, 4
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ugt i64 %947, -5
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %4, align 1, !tbaa !2432
  %951 = trunc i64 %948 to i32
  %952 = and i32 %951, 255
  %953 = tail call i32 @llvm.ctpop.i32(i32 %952) #8
  %954 = trunc i32 %953 to i8
  %955 = and i8 %954, 1
  %956 = xor i8 %955, 1
  store i8 %956, i8* %5, align 1, !tbaa !2446
  %957 = xor i64 %947, %948
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  store i8 %960, i8* %6, align 1, !tbaa !2447
  %961 = icmp eq i64 %948, 0
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %7, align 1, !tbaa !2448
  %963 = lshr i64 %948, 63
  %964 = trunc i64 %963 to i8
  store i8 %964, i8* %8, align 1, !tbaa !2449
  %965 = lshr i64 %947, 63
  %966 = xor i64 %963, %965
  %967 = add nuw nsw i64 %966, %963
  %968 = icmp eq i64 %967, 2
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %9, align 1, !tbaa !2450
  %970 = add i64 %944, 15
  store i64 %970, i64* %PC, align 8
  store i64 %948, i64* %946, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %971 = add i64 %207, -12
  store i64 4196249, i64* %PC, align 8
  %972 = inttoptr i64 %971 to i32*
  store i32 12, i32* %972, align 4
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, -12
  %975 = load i64, i64* %PC, align 8
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %974 to i32*
  %978 = load i32, i32* %977, align 4
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %RDI, align 8, !tbaa !2428
  %980 = add i64 %975, -681
  %981 = add i64 %975, 8
  %982 = load i64, i64* %RSP, align 8, !tbaa !2428
  %983 = add i64 %982, -8
  %984 = inttoptr i64 %983 to i64*
  store i64 %981, i64* %984, align 8
  store i64 %983, i64* %RSP, align 8, !tbaa !2428
  store i64 %980, i64* %PC, align 8, !tbaa !2428
  %985 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %980, %struct.Memory* %MEMORY.0)
  %986 = load i64, i64* %RBP, align 8
  %987 = add i64 %986, -8
  %988 = load i64, i64* %PC, align 8
  %989 = add i64 %988, 4
  store i64 %989, i64* %PC, align 8
  %990 = inttoptr i64 %987 to i64*
  %991 = load i64, i64* %990, align 8
  store i64 %991, i64* %RAX, align 8, !tbaa !2428
  %992 = add i64 %991, 4
  store i64 %992, i64* %RCX, align 8, !tbaa !2428
  %993 = icmp ugt i64 %991, -5
  %994 = zext i1 %993 to i8
  store i8 %994, i8* %4, align 1, !tbaa !2432
  %995 = trunc i64 %992 to i32
  %996 = and i32 %995, 255
  %997 = tail call i32 @llvm.ctpop.i32(i32 %996) #8
  %998 = trunc i32 %997 to i8
  %999 = and i8 %998, 1
  %1000 = xor i8 %999, 1
  store i8 %1000, i8* %5, align 1, !tbaa !2446
  %1001 = xor i64 %991, %992
  %1002 = lshr i64 %1001, 4
  %1003 = trunc i64 %1002 to i8
  %1004 = and i8 %1003, 1
  store i8 %1004, i8* %6, align 1, !tbaa !2447
  %1005 = icmp eq i64 %992, 0
  %1006 = zext i1 %1005 to i8
  store i8 %1006, i8* %7, align 1, !tbaa !2448
  %1007 = lshr i64 %992, 63
  %1008 = trunc i64 %1007 to i8
  store i8 %1008, i8* %8, align 1, !tbaa !2449
  %1009 = lshr i64 %991, 63
  %1010 = xor i64 %1007, %1009
  %1011 = add nuw nsw i64 %1010, %1007
  %1012 = icmp eq i64 %1011, 2
  %1013 = zext i1 %1012 to i8
  store i8 %1013, i8* %9, align 1, !tbaa !2450
  %1014 = add i64 %988, 15
  store i64 %1014, i64* %PC, align 8
  store i64 %992, i64* %990, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1015 = add i64 %207, -12
  store i64 4196499, i64* %PC, align 8
  %1016 = inttoptr i64 %1015 to i32*
  store i32 17, i32* %1016, align 4
  %1017 = load i64, i64* %PC, align 8
  %1018 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %1017, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1018

block_400986:                                     ; preds = %block_400566
  %1019 = add i64 %207, -12
  store i64 4196749, i64* %PC, align 8
  %1020 = inttoptr i64 %1019 to i32*
  store i32 22, i32* %1020, align 4
  %1021 = load i64, i64* %PC, align 8
  %1022 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %1021, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1022

block_400602:                                     ; preds = %block_400566
  %1023 = add i64 %207, -12
  store i64 4195849, i64* %PC, align 8
  %1024 = inttoptr i64 %1023 to i32*
  store i32 4, i32* %1024, align 4
  %1025 = load i64, i64* %PC, align 8
  %1026 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %1025, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1026

block_400a80:                                     ; preds = %block_400566
  %1027 = add i64 %207, -12
  store i64 4196999, i64* %PC, align 8
  %1028 = inttoptr i64 %1027 to i32*
  store i32 27, i32* %1028, align 4
  %1029 = load i64, i64* %PC, align 8
  %1030 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %1029, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1030

; <label>:1031:                                   ; preds = %block_400566
  %1032 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %211, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1032
}

; Function Attrs: noinline
define %struct.Memory* @sub_400573(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400573

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %288, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.1)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %288, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.1)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %99 = add i64 %288, -12
  store i64 4195799, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 3, i32* %100, align 4
  %101 = load i64, i64* %PC, align 8
  %102 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %101, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %102

block_4006ca:                                     ; preds = %block_400566
  %103 = add i64 %288, -12
  store i64 4196049, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 8, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %106

block_4007c4:                                     ; preds = %block_400566
  %107 = add i64 %288, -12
  store i64 4196299, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 13, i32* %108, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %110

block_4009ea:                                     ; preds = %block_400566
  %111 = add i64 %288, -12
  store i64 4196849, i64* %PC, align 8
  %112 = inttoptr i64 %111 to i32*
  store i32 24, i32* %112, align 4
  %113 = load i64, i64* %PC, align 8
  %114 = tail call %struct.Memory* @sub_4009f1(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %114

block_4008be:                                     ; preds = %block_400566
  %115 = add i64 %288, -12
  store i64 4196549, i64* %PC, align 8
  %116 = inttoptr i64 %115 to i32*
  store i32 18, i32* %116, align 4
  %117 = load i64, i64* %PC, align 8
  %118 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %117, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %118

block_4009b8:                                     ; preds = %block_400566
  %119 = add i64 %288, -12
  store i64 4196799, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 23, i32* %120, align 4
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -12
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %RDI, align 8, !tbaa !2428
  %128 = add i64 %123, -1231
  %129 = add i64 %123, 8
  %130 = load i64, i64* %4, align 8, !tbaa !2428
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132, align 8
  store i64 %131, i64* %4, align 8, !tbaa !2428
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %133 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.1)
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -8
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %139, 4
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -5
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %5, align 1, !tbaa !2432
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #8
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %6, align 1, !tbaa !2446
  %149 = xor i64 %139, %140
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %7, align 1, !tbaa !2447
  %153 = icmp eq i64 %140, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %8, align 1, !tbaa !2448
  %155 = lshr i64 %140, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* %9, align 1, !tbaa !2449
  %157 = lshr i64 %139, 63
  %158 = xor i64 %155, %157
  %159 = add nuw nsw i64 %158, %155
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %10, align 1, !tbaa !2450
  %162 = add i64 %136, 15
  store i64 %162, i64* %PC, align 8
  store i64 %140, i64* %138, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %163 = add i64 %288, -12
  store i64 4197049, i64* %PC, align 8
  %164 = inttoptr i64 %163 to i32*
  store i32 28, i32* %164, align 4
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -12
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %172 = add i64 %167, -1481
  %173 = add i64 %167, 8
  %174 = load i64, i64* %4, align 8, !tbaa !2428
  %175 = add i64 %174, -8
  %176 = inttoptr i64 %175 to i64*
  store i64 %173, i64* %176, align 8
  store i64 %175, i64* %4, align 8, !tbaa !2428
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  %177 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %172, %struct.Memory* %MEMORY.1)
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = add i64 %183, 4
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = icmp ugt i64 %183, -5
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %5, align 1, !tbaa !2432
  %187 = trunc i64 %184 to i32
  %188 = and i32 %187, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #8
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %6, align 1, !tbaa !2446
  %193 = xor i64 %183, %184
  %194 = lshr i64 %193, 4
  %195 = trunc i64 %194 to i8
  %196 = and i8 %195, 1
  store i8 %196, i8* %7, align 1, !tbaa !2447
  %197 = icmp eq i64 %184, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %8, align 1, !tbaa !2448
  %199 = lshr i64 %184, 63
  %200 = trunc i64 %199 to i8
  store i8 %200, i8* %9, align 1, !tbaa !2449
  %201 = lshr i64 %183, 63
  %202 = xor i64 %199, %201
  %203 = add nuw nsw i64 %202, %199
  %204 = icmp eq i64 %203, 2
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %10, align 1, !tbaa !2450
  %206 = add i64 %180, 15
  store i64 %206, i64* %PC, align 8
  store i64 %184, i64* %182, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %207 = add i64 %288, -12
  store i64 4195999, i64* %PC, align 8
  %208 = inttoptr i64 %207 to i32*
  store i32 7, i32* %208, align 4
  %209 = load i64, i64* %PC, align 8
  %210 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %209, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %210

block_400792:                                     ; preds = %block_400566
  %211 = add i64 %288, -12
  store i64 4196249, i64* %PC, align 8
  %212 = inttoptr i64 %211 to i32*
  store i32 12, i32* %212, align 4
  %213 = load i64, i64* %PC, align 8
  %214 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %213, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %214

block_40088c:                                     ; preds = %block_400566
  %215 = add i64 %288, -12
  store i64 4196499, i64* %PC, align 8
  %216 = inttoptr i64 %215 to i32*
  store i32 17, i32* %216, align 4
  %217 = load i64, i64* %PC, align 8
  %218 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %217, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %218

block_400986:                                     ; preds = %block_400566
  %219 = add i64 %288, -12
  store i64 4196749, i64* %PC, align 8
  %220 = inttoptr i64 %219 to i32*
  store i32 22, i32* %220, align 4
  %221 = load i64, i64* %PC, align 8
  %222 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %221, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %222

block_40059e:                                     ; preds = %block_400566
  %223 = add i64 %288, -12
  store i64 4195749, i64* %PC, align 8
  %224 = inttoptr i64 %223 to i32*
  store i32 2, i32* %224, align 4
  %225 = load i64, i64* %PC, align 8
  %226 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %225, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %226

block_400573:                                     ; preds = %block_40056c, %3
  %227 = phi i64 [ %1, %3 ], [ %.pre, %block_40056c ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_40056c ]
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -12
  %230 = add i64 %227, 3
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RDI, align 8, !tbaa !2428
  %234 = add i64 %227, -131
  %235 = add i64 %227, 8
  %236 = load i64, i64* %4, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238, align 8
  store i64 %237, i64* %4, align 8, !tbaa !2428
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  %239 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %234, %struct.Memory* %MEMORY.0)
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -8
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = add i64 %245, 4
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %247 = icmp ugt i64 %245, -5
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %5, align 1, !tbaa !2432
  %249 = trunc i64 %246 to i32
  %250 = and i32 %249, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %6, align 1, !tbaa !2446
  %255 = xor i64 %245, %246
  %256 = lshr i64 %255, 4
  %257 = trunc i64 %256 to i8
  %258 = and i8 %257, 1
  store i8 %258, i8* %7, align 1, !tbaa !2447
  %259 = icmp eq i64 %246, 0
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %8, align 1, !tbaa !2448
  %261 = lshr i64 %246, 63
  %262 = trunc i64 %261 to i8
  store i8 %262, i8* %9, align 1, !tbaa !2449
  %263 = lshr i64 %245, 63
  %264 = xor i64 %261, %263
  %265 = add nuw nsw i64 %264, %261
  %266 = icmp eq i64 %265, 2
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %10, align 1, !tbaa !2450
  %268 = add i64 %242, 15
  store i64 %268, i64* %PC, align 8
  store i64 %246, i64* %244, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %269 = add i64 %288, -12
  store i64 4195699, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 1, i32* %270, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400573

block_400566:                                     ; preds = %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_4008f0, %block_4007f6, %block_400573
  %.sink30 = phi i64 [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 51, %block_400573 ]
  %MEMORY.1 = phi %struct.Memory* [ %387, %block_40072e ], [ %343, %block_400634 ], [ %177, %block_400ab2 ], [ %133, %block_4009b8 ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %239, %block_400573 ]
  %271 = bitcast i64* %RAX to i32**
  %272 = load i32*, i32** %271, align 8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 3
  store i64 %274, i64* %PC, align 8
  %275 = load i32, i32* %272, align 4
  %276 = sext i32 %275 to i64
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = shl nsw i64 %276, 3
  %278 = add i64 %277, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %279 = add i64 %273, 11
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %278 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %RAX, align 8, !tbaa !2428
  %282 = load i64, i64* %RBP, align 8
  %283 = add i64 %282, -40
  %284 = add i64 %273, 15
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %285, align 8
  %286 = load i64, i64* %PC, align 8
  %287 = sub i64 %286, %.sink30
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -40
  %290 = add i64 %287, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  switch i64 %292, label %441 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196092, label %block_4006fc
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196192, label %block_400760
    i64 4197042, label %block_400ab2
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196242, label %block_400792
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196692, label %block_400954
    i64 4196992, label %block_400a80
  ]

block_40085a:                                     ; preds = %block_400566
  %293 = add i64 %288, -12
  store i64 4196449, i64* %PC, align 8
  %294 = inttoptr i64 %293 to i32*
  store i32 16, i32* %294, align 4
  %295 = load i64, i64* %PC, align 8
  %296 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %295, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %296

block_400ae4:                                     ; preds = %block_400566
  %297 = add i64 %288, -12
  store i64 4197099, i64* %PC, align 8
  %298 = inttoptr i64 %297 to i32*
  store i32 29, i32* %298, align 4
  %299 = load i64, i64* %PC, align 8
  %300 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %299, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %300

block_400559:                                     ; preds = %block_400566
  %301 = add i64 %288, -12
  store i64 4195680, i64* %PC, align 8
  %302 = inttoptr i64 %301 to i32*
  store i32 0, i32* %302, align 4
  %303 = load i64, i64* %PC, align 8
  %304 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %303, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %304

block_400954:                                     ; preds = %block_400566
  %305 = add i64 %288, -12
  store i64 4196699, i64* %PC, align 8
  %306 = inttoptr i64 %305 to i32*
  store i32 21, i32* %306, align 4
  %307 = load i64, i64* %PC, align 8
  %308 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %308

block_400a4e:                                     ; preds = %block_400566
  %309 = add i64 %288, -12
  store i64 4196949, i64* %PC, align 8
  %310 = inttoptr i64 %309 to i32*
  store i32 26, i32* %310, align 4
  %311 = load i64, i64* %PC, align 8
  %312 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %311, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %312

block_400a80:                                     ; preds = %block_400566
  %313 = add i64 %288, -12
  store i64 4196999, i64* %PC, align 8
  %314 = inttoptr i64 %313 to i32*
  store i32 27, i32* %314, align 4
  %315 = load i64, i64* %PC, align 8
  %316 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %316

block_400b48:                                     ; preds = %block_400566
  %317 = add i64 %288, -12
  store i64 4197199, i64* %PC, align 8
  %318 = inttoptr i64 %317 to i32*
  store i32 31, i32* %318, align 4
  %319 = load i64, i64* %PC, align 8
  %320 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %319, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %320

block_400666:                                     ; preds = %block_400566
  %321 = add i64 %288, -12
  store i64 4195949, i64* %PC, align 8
  %322 = inttoptr i64 %321 to i32*
  store i32 6, i32* %322, align 4
  %323 = load i64, i64* %PC, align 8
  %324 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %323, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %324

block_400760:                                     ; preds = %block_400566
  %325 = add i64 %288, -12
  store i64 4196199, i64* %PC, align 8
  %326 = inttoptr i64 %325 to i32*
  store i32 11, i32* %326, align 4
  %327 = load i64, i64* %PC, align 8
  %328 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %327, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %328

block_400634:                                     ; preds = %block_400566
  %329 = add i64 %288, -12
  store i64 4195899, i64* %PC, align 8
  %330 = inttoptr i64 %329 to i32*
  store i32 5, i32* %330, align 4
  %331 = load i64, i64* %RBP, align 8
  %332 = add i64 %331, -12
  %333 = load i64, i64* %PC, align 8
  %334 = add i64 %333, 3
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %332 to i32*
  %336 = load i32, i32* %335, align 4
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RDI, align 8, !tbaa !2428
  %338 = add i64 %333, -331
  %339 = add i64 %333, 8
  %340 = load i64, i64* %4, align 8, !tbaa !2428
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342, align 8
  store i64 %341, i64* %4, align 8, !tbaa !2428
  store i64 %338, i64* %PC, align 8, !tbaa !2428
  %343 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %338, %struct.Memory* %MEMORY.1)
  %344 = load i64, i64* %RBP, align 8
  %345 = add i64 %344, -8
  %346 = load i64, i64* %PC, align 8
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %345 to i64*
  %349 = load i64, i64* %348, align 8
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = add i64 %349, 4
  store i64 %350, i64* %RCX, align 8, !tbaa !2428
  %351 = icmp ugt i64 %349, -5
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %5, align 1, !tbaa !2432
  %353 = trunc i64 %350 to i32
  %354 = and i32 %353, 255
  %355 = tail call i32 @llvm.ctpop.i32(i32 %354) #8
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  store i8 %358, i8* %6, align 1, !tbaa !2446
  %359 = xor i64 %349, %350
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %7, align 1, !tbaa !2447
  %363 = icmp eq i64 %350, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %8, align 1, !tbaa !2448
  %365 = lshr i64 %350, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %9, align 1, !tbaa !2449
  %367 = lshr i64 %349, 63
  %368 = xor i64 %365, %367
  %369 = add nuw nsw i64 %368, %365
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %10, align 1, !tbaa !2450
  %372 = add i64 %346, 15
  store i64 %372, i64* %PC, align 8
  store i64 %350, i64* %348, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %373 = add i64 %288, -12
  store i64 4196149, i64* %PC, align 8
  %374 = inttoptr i64 %373 to i32*
  store i32 10, i32* %374, align 4
  %375 = load i64, i64* %RBP, align 8
  %376 = add i64 %375, -12
  %377 = load i64, i64* %PC, align 8
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %376 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RDI, align 8, !tbaa !2428
  %382 = add i64 %377, -581
  %383 = add i64 %377, 8
  %384 = load i64, i64* %4, align 8, !tbaa !2428
  %385 = add i64 %384, -8
  %386 = inttoptr i64 %385 to i64*
  store i64 %383, i64* %386, align 8
  store i64 %385, i64* %4, align 8, !tbaa !2428
  store i64 %382, i64* %PC, align 8, !tbaa !2428
  %387 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %382, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBP, align 8
  %389 = add i64 %388, -8
  %390 = load i64, i64* %PC, align 8
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %389 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = add i64 %393, 4
  store i64 %394, i64* %RCX, align 8, !tbaa !2428
  %395 = icmp ugt i64 %393, -5
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %5, align 1, !tbaa !2432
  %397 = trunc i64 %394 to i32
  %398 = and i32 %397, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #8
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %6, align 1, !tbaa !2446
  %403 = xor i64 %393, %394
  %404 = lshr i64 %403, 4
  %405 = trunc i64 %404 to i8
  %406 = and i8 %405, 1
  store i8 %406, i8* %7, align 1, !tbaa !2447
  %407 = icmp eq i64 %394, 0
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %8, align 1, !tbaa !2448
  %409 = lshr i64 %394, 63
  %410 = trunc i64 %409 to i8
  store i8 %410, i8* %9, align 1, !tbaa !2449
  %411 = lshr i64 %393, 63
  %412 = xor i64 %409, %411
  %413 = add nuw nsw i64 %412, %409
  %414 = icmp eq i64 %413, 2
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %10, align 1, !tbaa !2450
  %416 = add i64 %390, 15
  store i64 %416, i64* %PC, align 8
  store i64 %394, i64* %392, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %417 = add i64 %288, -12
  store i64 4196399, i64* %PC, align 8
  %418 = inttoptr i64 %417 to i32*
  store i32 15, i32* %418, align 4
  %419 = load i64, i64* %PC, align 8
  %420 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %420

block_4006fc:                                     ; preds = %block_400566
  %421 = add i64 %288, -12
  store i64 4196099, i64* %PC, align 8
  %422 = inttoptr i64 %421 to i32*
  store i32 9, i32* %422, align 4
  %423 = load i64, i64* %PC, align 8
  %424 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %423, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %424

block_400922:                                     ; preds = %block_400566
  %425 = add i64 %288, -12
  store i64 4196649, i64* %PC, align 8
  %426 = inttoptr i64 %425 to i32*
  store i32 20, i32* %426, align 4
  %427 = load i64, i64* %PC, align 8
  %428 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %427, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %428

block_400a1c:                                     ; preds = %block_400566
  %429 = add i64 %288, -12
  store i64 4196899, i64* %PC, align 8
  %430 = inttoptr i64 %429 to i32*
  store i32 25, i32* %430, align 4
  %431 = load i64, i64* %PC, align 8
  %432 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %431, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %432

block_400b16:                                     ; preds = %block_400566
  %433 = add i64 %288, -12
  store i64 4197149, i64* %PC, align 8
  %434 = inttoptr i64 %433 to i32*
  store i32 30, i32* %434, align 4
  %435 = load i64, i64* %PC, align 8
  %436 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %435, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %436

block_400602:                                     ; preds = %block_400566
  %437 = add i64 %288, -12
  store i64 4195849, i64* %PC, align 8
  %438 = inttoptr i64 %437 to i32*
  store i32 4, i32* %438, align 4
  %439 = load i64, i64* %PC, align 8
  %440 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %439, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %440

; <label>:441:                                    ; preds = %block_400566
  %442 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %292, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %442
}

; Function Attrs: noinline
define %struct.Memory* @sub_400400__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400400:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2448
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_400cd0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_400c60___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_602150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_400929(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400929

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %320, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.0)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %320, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.0)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %99 = add i64 %320, -12
  store i64 4195699, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 1, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -131
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.0)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %143 = add i64 %320, -12
  store i64 4196099, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 9, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %146

block_4009ea:                                     ; preds = %block_400566
  %147 = add i64 %320, -12
  store i64 4196849, i64* %PC, align 8
  %148 = inttoptr i64 %147 to i32*
  store i32 24, i32* %148, align 4
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -12
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %151, -1281
  %157 = add i64 %151, 8
  %158 = load i64, i64* %4, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %4, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.0)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -8
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 4
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -5
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %5, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %6, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %7, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %8, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %9, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %10, align 1, !tbaa !2450
  %190 = add i64 %164, 15
  store i64 %190, i64* %PC, align 8
  store i64 %168, i64* %166, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %191 = add i64 %320, -12
  store i64 4195949, i64* %PC, align 8
  %192 = inttoptr i64 %191 to i32*
  store i32 6, i32* %192, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -12
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = add i64 %195, -381
  %201 = add i64 %195, 8
  %202 = load i64, i64* %4, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %4, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %211, 4
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = icmp ugt i64 %211, -5
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %5, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #8
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %6, align 1, !tbaa !2446
  %221 = xor i64 %211, %212
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %7, align 1, !tbaa !2447
  %225 = icmp eq i64 %212, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %8, align 1, !tbaa !2448
  %227 = lshr i64 %212, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %9, align 1, !tbaa !2449
  %229 = lshr i64 %211, 63
  %230 = xor i64 %227, %229
  %231 = add nuw nsw i64 %230, %227
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %10, align 1, !tbaa !2450
  %234 = add i64 %208, 15
  store i64 %234, i64* %PC, align 8
  store i64 %212, i64* %210, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %235 = add i64 %320, -12
  store i64 4197099, i64* %PC, align 8
  %236 = inttoptr i64 %235 to i32*
  store i32 29, i32* %236, align 4
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -12
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %239, -1531
  %245 = add i64 %239, 8
  %246 = load i64, i64* %4, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %4, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -8
  %252 = load i64, i64* %PC, align 8
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = add i64 %255, 4
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = icmp ugt i64 %255, -5
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %5, align 1, !tbaa !2432
  %259 = trunc i64 %256 to i32
  %260 = and i32 %259, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %6, align 1, !tbaa !2446
  %265 = xor i64 %255, %256
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %7, align 1, !tbaa !2447
  %269 = icmp eq i64 %256, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %8, align 1, !tbaa !2448
  %271 = lshr i64 %256, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %9, align 1, !tbaa !2449
  %273 = lshr i64 %255, 63
  %274 = xor i64 %271, %273
  %275 = add nuw nsw i64 %274, %271
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %10, align 1, !tbaa !2450
  %278 = add i64 %252, 15
  store i64 %278, i64* %PC, align 8
  store i64 %256, i64* %254, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %279 = add i64 %320, -12
  store i64 4196199, i64* %PC, align 8
  %280 = inttoptr i64 %279 to i32*
  store i32 11, i32* %280, align 4
  %281 = load i64, i64* %PC, align 8
  %282 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %281, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %282

block_40085a:                                     ; preds = %block_400566
  %283 = add i64 %320, -12
  store i64 4196449, i64* %PC, align 8
  %284 = inttoptr i64 %283 to i32*
  store i32 16, i32* %284, align 4
  %285 = load i64, i64* %PC, align 8
  %286 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %285, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %286

block_400954:                                     ; preds = %block_400566
  %287 = add i64 %320, -12
  store i64 4196699, i64* %PC, align 8
  %288 = inttoptr i64 %287 to i32*
  store i32 21, i32* %288, align 4
  %289 = load i64, i64* %PC, align 8
  %290 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %289, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %290

block_400a4e:                                     ; preds = %block_400566
  %291 = add i64 %320, -12
  store i64 4196949, i64* %PC, align 8
  %292 = inttoptr i64 %291 to i32*
  store i32 26, i32* %292, align 4
  %293 = load i64, i64* %PC, align 8
  %294 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %293, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %294

block_400b48:                                     ; preds = %block_400566
  %295 = add i64 %320, -12
  store i64 4197199, i64* %PC, align 8
  %296 = inttoptr i64 %295 to i32*
  store i32 31, i32* %296, align 4
  %297 = load i64, i64* %PC, align 8
  %298 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %297, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %298

block_4007c4:                                     ; preds = %block_400566
  %299 = add i64 %320, -12
  store i64 4196299, i64* %PC, align 8
  %300 = inttoptr i64 %299 to i32*
  store i32 13, i32* %300, align 4
  %301 = load i64, i64* %PC, align 8
  %302 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %301, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %302

block_400566:                                     ; preds = %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400929
  %.sink25 = phi i64 [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1001, %block_400929 ]
  %MEMORY.0 = phi %struct.Memory* [ %569, %block_400828 ], [ %483, %block_40072e ], [ %439, %block_400ab2 ], [ %395, %block_400634 ], [ %351, %block_4009b8 ], [ %249, %block_400ae4 ], [ %205, %block_400666 ], [ %161, %block_4009ea ], [ %113, %block_40056c ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %525, %block_400929 ]
  %303 = bitcast i64* %RAX to i32**
  %304 = load i32*, i32** %303, align 8
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC, align 8
  %307 = load i32, i32* %304, align 4
  %308 = sext i32 %307 to i64
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = shl nsw i64 %308, 3
  %310 = add i64 %309, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %311 = add i64 %305, 11
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -40
  %316 = add i64 %305, 15
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  store i64 %313, i64* %317, align 8
  %318 = load i64, i64* %PC, align 8
  %319 = sub i64 %318, %.sink25
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -40
  %322 = add i64 %319, 4
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  switch i64 %324, label %641 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %325 = add i64 %320, -12
  store i64 4195799, i64* %PC, align 8
  %326 = inttoptr i64 %325 to i32*
  store i32 3, i32* %326, align 4
  %327 = load i64, i64* %PC, align 8
  %328 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %327, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %328

block_4008be:                                     ; preds = %block_400566
  %329 = add i64 %320, -12
  store i64 4196549, i64* %PC, align 8
  %330 = inttoptr i64 %329 to i32*
  store i32 18, i32* %330, align 4
  %331 = load i64, i64* %PC, align 8
  %332 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %332

block_4006ca:                                     ; preds = %block_400566
  %333 = add i64 %320, -12
  store i64 4196049, i64* %PC, align 8
  %334 = inttoptr i64 %333 to i32*
  store i32 8, i32* %334, align 4
  %335 = load i64, i64* %PC, align 8
  %336 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %335, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %336

block_4009b8:                                     ; preds = %block_400566
  %337 = add i64 %320, -12
  store i64 4196799, i64* %PC, align 8
  %338 = inttoptr i64 %337 to i32*
  store i32 23, i32* %338, align 4
  %339 = load i64, i64* %RBP, align 8
  %340 = add i64 %339, -12
  %341 = load i64, i64* %PC, align 8
  %342 = add i64 %341, 3
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %340 to i32*
  %344 = load i32, i32* %343, align 4
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %346 = add i64 %341, -1231
  %347 = add i64 %341, 8
  %348 = load i64, i64* %4, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %4, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %346, %struct.Memory* %MEMORY.0)
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -8
  %354 = load i64, i64* %PC, align 8
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356, align 8
  store i64 %357, i64* %RAX, align 8, !tbaa !2428
  %358 = add i64 %357, 4
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = icmp ugt i64 %357, -5
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %5, align 1, !tbaa !2432
  %361 = trunc i64 %358 to i32
  %362 = and i32 %361, 255
  %363 = tail call i32 @llvm.ctpop.i32(i32 %362) #8
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  store i8 %366, i8* %6, align 1, !tbaa !2446
  %367 = xor i64 %357, %358
  %368 = lshr i64 %367, 4
  %369 = trunc i64 %368 to i8
  %370 = and i8 %369, 1
  store i8 %370, i8* %7, align 1, !tbaa !2447
  %371 = icmp eq i64 %358, 0
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %8, align 1, !tbaa !2448
  %373 = lshr i64 %358, 63
  %374 = trunc i64 %373 to i8
  store i8 %374, i8* %9, align 1, !tbaa !2449
  %375 = lshr i64 %357, 63
  %376 = xor i64 %373, %375
  %377 = add nuw nsw i64 %376, %373
  %378 = icmp eq i64 %377, 2
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %10, align 1, !tbaa !2450
  %380 = add i64 %354, 15
  store i64 %380, i64* %PC, align 8
  store i64 %358, i64* %356, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %381 = add i64 %320, -12
  store i64 4195899, i64* %PC, align 8
  %382 = inttoptr i64 %381 to i32*
  store i32 5, i32* %382, align 4
  %383 = load i64, i64* %RBP, align 8
  %384 = add i64 %383, -12
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %384 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = zext i32 %388 to i64
  store i64 %389, i64* %RDI, align 8, !tbaa !2428
  %390 = add i64 %385, -331
  %391 = add i64 %385, 8
  %392 = load i64, i64* %4, align 8, !tbaa !2428
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394, align 8
  store i64 %393, i64* %4, align 8, !tbaa !2428
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  %395 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %390, %struct.Memory* %MEMORY.0)
  %396 = load i64, i64* %RBP, align 8
  %397 = add i64 %396, -8
  %398 = load i64, i64* %PC, align 8
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400, align 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = add i64 %401, 4
  store i64 %402, i64* %RCX, align 8, !tbaa !2428
  %403 = icmp ugt i64 %401, -5
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %5, align 1, !tbaa !2432
  %405 = trunc i64 %402 to i32
  %406 = and i32 %405, 255
  %407 = tail call i32 @llvm.ctpop.i32(i32 %406) #8
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* %6, align 1, !tbaa !2446
  %411 = xor i64 %401, %402
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  store i8 %414, i8* %7, align 1, !tbaa !2447
  %415 = icmp eq i64 %402, 0
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %8, align 1, !tbaa !2448
  %417 = lshr i64 %402, 63
  %418 = trunc i64 %417 to i8
  store i8 %418, i8* %9, align 1, !tbaa !2449
  %419 = lshr i64 %401, 63
  %420 = xor i64 %417, %419
  %421 = add nuw nsw i64 %420, %417
  %422 = icmp eq i64 %421, 2
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %10, align 1, !tbaa !2450
  %424 = add i64 %398, 15
  store i64 %424, i64* %PC, align 8
  store i64 %402, i64* %400, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %425 = add i64 %320, -12
  store i64 4197049, i64* %PC, align 8
  %426 = inttoptr i64 %425 to i32*
  store i32 28, i32* %426, align 4
  %427 = load i64, i64* %RBP, align 8
  %428 = add i64 %427, -12
  %429 = load i64, i64* %PC, align 8
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %428 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = zext i32 %432 to i64
  store i64 %433, i64* %RDI, align 8, !tbaa !2428
  %434 = add i64 %429, -1481
  %435 = add i64 %429, 8
  %436 = load i64, i64* %4, align 8, !tbaa !2428
  %437 = add i64 %436, -8
  %438 = inttoptr i64 %437 to i64*
  store i64 %435, i64* %438, align 8
  store i64 %437, i64* %4, align 8, !tbaa !2428
  store i64 %434, i64* %PC, align 8, !tbaa !2428
  %439 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %434, %struct.Memory* %MEMORY.0)
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -8
  %442 = load i64, i64* %PC, align 8
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %441 to i64*
  %445 = load i64, i64* %444, align 8
  store i64 %445, i64* %RAX, align 8, !tbaa !2428
  %446 = add i64 %445, 4
  store i64 %446, i64* %RCX, align 8, !tbaa !2428
  %447 = icmp ugt i64 %445, -5
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %5, align 1, !tbaa !2432
  %449 = trunc i64 %446 to i32
  %450 = and i32 %449, 255
  %451 = tail call i32 @llvm.ctpop.i32(i32 %450) #8
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  store i8 %454, i8* %6, align 1, !tbaa !2446
  %455 = xor i64 %445, %446
  %456 = lshr i64 %455, 4
  %457 = trunc i64 %456 to i8
  %458 = and i8 %457, 1
  store i8 %458, i8* %7, align 1, !tbaa !2447
  %459 = icmp eq i64 %446, 0
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %8, align 1, !tbaa !2448
  %461 = lshr i64 %446, 63
  %462 = trunc i64 %461 to i8
  store i8 %462, i8* %9, align 1, !tbaa !2449
  %463 = lshr i64 %445, 63
  %464 = xor i64 %461, %463
  %465 = add nuw nsw i64 %464, %461
  %466 = icmp eq i64 %465, 2
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %10, align 1, !tbaa !2450
  %468 = add i64 %442, 15
  store i64 %468, i64* %PC, align 8
  store i64 %446, i64* %444, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %469 = add i64 %320, -12
  store i64 4196149, i64* %PC, align 8
  %470 = inttoptr i64 %469 to i32*
  store i32 10, i32* %470, align 4
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -12
  %473 = load i64, i64* %PC, align 8
  %474 = add i64 %473, 3
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %RDI, align 8, !tbaa !2428
  %478 = add i64 %473, -581
  %479 = add i64 %473, 8
  %480 = load i64, i64* %4, align 8, !tbaa !2428
  %481 = add i64 %480, -8
  %482 = inttoptr i64 %481 to i64*
  store i64 %479, i64* %482, align 8
  store i64 %481, i64* %4, align 8, !tbaa !2428
  store i64 %478, i64* %PC, align 8, !tbaa !2428
  %483 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %478, %struct.Memory* %MEMORY.0)
  %484 = load i64, i64* %RBP, align 8
  %485 = add i64 %484, -8
  %486 = load i64, i64* %PC, align 8
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = add i64 %489, 4
  store i64 %490, i64* %RCX, align 8, !tbaa !2428
  %491 = icmp ugt i64 %489, -5
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %5, align 1, !tbaa !2432
  %493 = trunc i64 %490 to i32
  %494 = and i32 %493, 255
  %495 = tail call i32 @llvm.ctpop.i32(i32 %494) #8
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  store i8 %498, i8* %6, align 1, !tbaa !2446
  %499 = xor i64 %489, %490
  %500 = lshr i64 %499, 4
  %501 = trunc i64 %500 to i8
  %502 = and i8 %501, 1
  store i8 %502, i8* %7, align 1, !tbaa !2447
  %503 = icmp eq i64 %490, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %8, align 1, !tbaa !2448
  %505 = lshr i64 %490, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %9, align 1, !tbaa !2449
  %507 = lshr i64 %489, 63
  %508 = xor i64 %505, %507
  %509 = add nuw nsw i64 %508, %505
  %510 = icmp eq i64 %509, 2
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %10, align 1, !tbaa !2450
  %512 = add i64 %486, 15
  store i64 %512, i64* %PC, align 8
  store i64 %490, i64* %488, align 8
  br label %block_400566

block_400929:                                     ; preds = %block_400922, %3
  %513 = phi i64 [ %1, %3 ], [ %.pre, %block_400922 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400922 ]
  %514 = load i64, i64* %RBP, align 8
  %515 = add i64 %514, -12
  %516 = add i64 %513, 3
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %515 to i32*
  %518 = load i32, i32* %517, align 4
  %519 = zext i32 %518 to i64
  store i64 %519, i64* %RDI, align 8, !tbaa !2428
  %520 = add i64 %513, -1081
  %521 = add i64 %513, 8
  %522 = load i64, i64* %4, align 8, !tbaa !2428
  %523 = add i64 %522, -8
  %524 = inttoptr i64 %523 to i64*
  store i64 %521, i64* %524, align 8
  store i64 %523, i64* %4, align 8, !tbaa !2428
  store i64 %520, i64* %PC, align 8, !tbaa !2428
  %525 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %520, %struct.Memory* %MEMORY.1)
  %526 = load i64, i64* %RBP, align 8
  %527 = add i64 %526, -8
  %528 = load i64, i64* %PC, align 8
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530, align 8
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = add i64 %531, 4
  store i64 %532, i64* %RCX, align 8, !tbaa !2428
  %533 = icmp ugt i64 %531, -5
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %5, align 1, !tbaa !2432
  %535 = trunc i64 %532 to i32
  %536 = and i32 %535, 255
  %537 = tail call i32 @llvm.ctpop.i32(i32 %536) #8
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  store i8 %540, i8* %6, align 1, !tbaa !2446
  %541 = xor i64 %531, %532
  %542 = lshr i64 %541, 4
  %543 = trunc i64 %542 to i8
  %544 = and i8 %543, 1
  store i8 %544, i8* %7, align 1, !tbaa !2447
  %545 = icmp eq i64 %532, 0
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %8, align 1, !tbaa !2448
  %547 = lshr i64 %532, 63
  %548 = trunc i64 %547 to i8
  store i8 %548, i8* %9, align 1, !tbaa !2449
  %549 = lshr i64 %531, 63
  %550 = xor i64 %547, %549
  %551 = add nuw nsw i64 %550, %547
  %552 = icmp eq i64 %551, 2
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %10, align 1, !tbaa !2450
  %554 = add i64 %528, 15
  store i64 %554, i64* %PC, align 8
  store i64 %532, i64* %530, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %555 = add i64 %320, -12
  store i64 4196399, i64* %PC, align 8
  %556 = inttoptr i64 %555 to i32*
  store i32 15, i32* %556, align 4
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -12
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 3
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RDI, align 8, !tbaa !2428
  %564 = add i64 %559, -831
  %565 = add i64 %559, 8
  %566 = load i64, i64* %4, align 8, !tbaa !2428
  %567 = add i64 %566, -8
  %568 = inttoptr i64 %567 to i64*
  store i64 %565, i64* %568, align 8
  store i64 %567, i64* %4, align 8, !tbaa !2428
  store i64 %564, i64* %PC, align 8, !tbaa !2428
  %569 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %564, %struct.Memory* %MEMORY.0)
  %570 = load i64, i64* %RBP, align 8
  %571 = add i64 %570, -8
  %572 = load i64, i64* %PC, align 8
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC, align 8
  %574 = inttoptr i64 %571 to i64*
  %575 = load i64, i64* %574, align 8
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = add i64 %575, 4
  store i64 %576, i64* %RCX, align 8, !tbaa !2428
  %577 = icmp ugt i64 %575, -5
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %5, align 1, !tbaa !2432
  %579 = trunc i64 %576 to i32
  %580 = and i32 %579, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #8
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %6, align 1, !tbaa !2446
  %585 = xor i64 %575, %576
  %586 = lshr i64 %585, 4
  %587 = trunc i64 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %7, align 1, !tbaa !2447
  %589 = icmp eq i64 %576, 0
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %8, align 1, !tbaa !2448
  %591 = lshr i64 %576, 63
  %592 = trunc i64 %591 to i8
  store i8 %592, i8* %9, align 1, !tbaa !2449
  %593 = lshr i64 %575, 63
  %594 = xor i64 %591, %593
  %595 = add nuw nsw i64 %594, %591
  %596 = icmp eq i64 %595, 2
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %10, align 1, !tbaa !2450
  %598 = add i64 %572, 15
  store i64 %598, i64* %PC, align 8
  store i64 %576, i64* %574, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %599 = add i64 %320, -12
  store i64 4196649, i64* %PC, align 8
  %600 = inttoptr i64 %599 to i32*
  store i32 20, i32* %600, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400929

block_40059e:                                     ; preds = %block_400566
  %601 = add i64 %320, -12
  store i64 4195749, i64* %PC, align 8
  %602 = inttoptr i64 %601 to i32*
  store i32 2, i32* %602, align 4
  %603 = load i64, i64* %PC, align 8
  %604 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %603, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %604

block_400559:                                     ; preds = %block_400566
  %605 = add i64 %320, -12
  store i64 4195680, i64* %PC, align 8
  %606 = inttoptr i64 %605 to i32*
  store i32 0, i32* %606, align 4
  %607 = load i64, i64* %PC, align 8
  %608 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %607, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %608

block_400a1c:                                     ; preds = %block_400566
  %609 = add i64 %320, -12
  store i64 4196899, i64* %PC, align 8
  %610 = inttoptr i64 %609 to i32*
  store i32 25, i32* %610, align 4
  %611 = load i64, i64* %PC, align 8
  %612 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %611, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %612

block_400698:                                     ; preds = %block_400566
  %613 = add i64 %320, -12
  store i64 4195999, i64* %PC, align 8
  %614 = inttoptr i64 %613 to i32*
  store i32 7, i32* %614, align 4
  %615 = load i64, i64* %PC, align 8
  %616 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %615, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %616

block_400b16:                                     ; preds = %block_400566
  %617 = add i64 %320, -12
  store i64 4197149, i64* %PC, align 8
  %618 = inttoptr i64 %617 to i32*
  store i32 30, i32* %618, align 4
  %619 = load i64, i64* %PC, align 8
  %620 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %619, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %620

block_400792:                                     ; preds = %block_400566
  %621 = add i64 %320, -12
  store i64 4196249, i64* %PC, align 8
  %622 = inttoptr i64 %621 to i32*
  store i32 12, i32* %622, align 4
  %623 = load i64, i64* %PC, align 8
  %624 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %623, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %624

block_40088c:                                     ; preds = %block_400566
  %625 = add i64 %320, -12
  store i64 4196499, i64* %PC, align 8
  %626 = inttoptr i64 %625 to i32*
  store i32 17, i32* %626, align 4
  %627 = load i64, i64* %PC, align 8
  %628 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %627, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %628

block_400986:                                     ; preds = %block_400566
  %629 = add i64 %320, -12
  store i64 4196749, i64* %PC, align 8
  %630 = inttoptr i64 %629 to i32*
  store i32 22, i32* %630, align 4
  %631 = load i64, i64* %PC, align 8
  %632 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %631, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %632

block_400602:                                     ; preds = %block_400566
  %633 = add i64 %320, -12
  store i64 4195849, i64* %PC, align 8
  %634 = inttoptr i64 %633 to i32*
  store i32 4, i32* %634, align 4
  %635 = load i64, i64* %PC, align 8
  %636 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %635, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %636

block_400a80:                                     ; preds = %block_400566
  %637 = add i64 %320, -12
  store i64 4196999, i64* %PC, align 8
  %638 = inttoptr i64 %637 to i32*
  store i32 27, i32* %638, align 4
  %639 = load i64, i64* %PC, align 8
  %640 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %639, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %640

; <label>:641:                                    ; preds = %block_400566
  %642 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %324, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %642
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a87(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400a87

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %994, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %994, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.0)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %994, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.0)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %994, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %994, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.0)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %994, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.0)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %994, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.0)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %994, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.0)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %994, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.0)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %994, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.0)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %994, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.0)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %454 = add i64 %994, -12
  store i64 4196949, i64* %PC, align 8
  %455 = inttoptr i64 %454 to i32*
  store i32 26, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -12
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %458, -1381
  %464 = add i64 %458, 8
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.0)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -8
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = icmp ugt i64 %474, -5
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %4, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %5, align 1, !tbaa !2446
  %484 = xor i64 %474, %475
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %6, align 1, !tbaa !2447
  %488 = icmp eq i64 %475, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %7, align 1, !tbaa !2448
  %490 = lshr i64 %475, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %8, align 1, !tbaa !2449
  %492 = lshr i64 %474, 63
  %493 = xor i64 %490, %492
  %494 = add nuw nsw i64 %493, %490
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %9, align 1, !tbaa !2450
  %497 = add i64 %471, 15
  store i64 %497, i64* %PC, align 8
  store i64 %475, i64* %473, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %498 = add i64 %994, -12
  store i64 4196049, i64* %PC, align 8
  %499 = inttoptr i64 %498 to i32*
  store i32 8, i32* %499, align 4
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -12
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, 3
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %501 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %507 = add i64 %502, -481
  %508 = add i64 %502, 8
  %509 = load i64, i64* %RSP, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %508, i64* %511, align 8
  store i64 %510, i64* %RSP, align 8, !tbaa !2428
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  %512 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %507, %struct.Memory* %MEMORY.0)
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -8
  %515 = load i64, i64* %PC, align 8
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517, align 8
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = add i64 %518, 4
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ugt i64 %518, -5
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %4, align 1, !tbaa !2432
  %522 = trunc i64 %519 to i32
  %523 = and i32 %522, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %5, align 1, !tbaa !2446
  %528 = xor i64 %518, %519
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %6, align 1, !tbaa !2447
  %532 = icmp eq i64 %519, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %7, align 1, !tbaa !2448
  %534 = lshr i64 %519, 63
  %535 = trunc i64 %534 to i8
  store i8 %535, i8* %8, align 1, !tbaa !2449
  %536 = lshr i64 %518, 63
  %537 = xor i64 %534, %536
  %538 = add nuw nsw i64 %537, %534
  %539 = icmp eq i64 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %9, align 1, !tbaa !2450
  %541 = add i64 %515, 15
  store i64 %541, i64* %PC, align 8
  store i64 %519, i64* %517, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %542 = add i64 %994, -12
  store i64 4197199, i64* %PC, align 8
  %543 = inttoptr i64 %542 to i32*
  store i32 31, i32* %543, align 4
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -12
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = add i64 %546, -1631
  %552 = add i64 %546, 8
  %553 = load i64, i64* %RSP, align 8, !tbaa !2428
  %554 = add i64 %553, -8
  %555 = inttoptr i64 %554 to i64*
  store i64 %552, i64* %555, align 8
  store i64 %554, i64* %RSP, align 8, !tbaa !2428
  store i64 %551, i64* %PC, align 8, !tbaa !2428
  %556 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %551, %struct.Memory* %MEMORY.0)
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -8
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561, align 8
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = add i64 %562, 4
  store i64 %563, i64* %RCX, align 8, !tbaa !2428
  %564 = icmp ugt i64 %562, -5
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %4, align 1, !tbaa !2432
  %566 = trunc i64 %563 to i32
  %567 = and i32 %566, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %5, align 1, !tbaa !2446
  %572 = xor i64 %562, %563
  %573 = lshr i64 %572, 4
  %574 = trunc i64 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %6, align 1, !tbaa !2447
  %576 = icmp eq i64 %563, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %7, align 1, !tbaa !2448
  %578 = lshr i64 %563, 63
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %8, align 1, !tbaa !2449
  %580 = lshr i64 %562, 63
  %581 = xor i64 %578, %580
  %582 = add nuw nsw i64 %581, %578
  %583 = icmp eq i64 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %9, align 1, !tbaa !2450
  %585 = add i64 %559, 15
  store i64 %585, i64* %PC, align 8
  store i64 %563, i64* %561, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %586 = add i64 %994, -12
  store i64 4196299, i64* %PC, align 8
  %587 = inttoptr i64 %586 to i32*
  store i32 13, i32* %587, align 4
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -12
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i32*
  %593 = load i32, i32* %592, align 4
  %594 = zext i32 %593 to i64
  store i64 %594, i64* %RDI, align 8, !tbaa !2428
  %595 = add i64 %590, -731
  %596 = add i64 %590, 8
  %597 = load i64, i64* %RSP, align 8, !tbaa !2428
  %598 = add i64 %597, -8
  %599 = inttoptr i64 %598 to i64*
  store i64 %596, i64* %599, align 8
  store i64 %598, i64* %RSP, align 8, !tbaa !2428
  store i64 %595, i64* %PC, align 8, !tbaa !2428
  %600 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %595, %struct.Memory* %MEMORY.0)
  %601 = load i64, i64* %RBP, align 8
  %602 = add i64 %601, -8
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 4
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %602 to i64*
  %606 = load i64, i64* %605, align 8
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = add i64 %606, 4
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = icmp ugt i64 %606, -5
  %609 = zext i1 %608 to i8
  store i8 %609, i8* %4, align 1, !tbaa !2432
  %610 = trunc i64 %607 to i32
  %611 = and i32 %610, 255
  %612 = tail call i32 @llvm.ctpop.i32(i32 %611) #8
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  store i8 %615, i8* %5, align 1, !tbaa !2446
  %616 = xor i64 %606, %607
  %617 = lshr i64 %616, 4
  %618 = trunc i64 %617 to i8
  %619 = and i8 %618, 1
  store i8 %619, i8* %6, align 1, !tbaa !2447
  %620 = icmp eq i64 %607, 0
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %7, align 1, !tbaa !2448
  %622 = lshr i64 %607, 63
  %623 = trunc i64 %622 to i8
  store i8 %623, i8* %8, align 1, !tbaa !2449
  %624 = lshr i64 %606, 63
  %625 = xor i64 %622, %624
  %626 = add nuw nsw i64 %625, %622
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %9, align 1, !tbaa !2450
  %629 = add i64 %603, 15
  store i64 %629, i64* %PC, align 8
  store i64 %607, i64* %605, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %630 = add i64 %994, -12
  store i64 4196549, i64* %PC, align 8
  %631 = inttoptr i64 %630 to i32*
  store i32 18, i32* %631, align 4
  %632 = load i64, i64* %PC, align 8
  %633 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %632, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %633

block_4009b8:                                     ; preds = %block_400566
  %634 = add i64 %994, -12
  store i64 4196799, i64* %PC, align 8
  %635 = inttoptr i64 %634 to i32*
  store i32 23, i32* %635, align 4
  %636 = load i64, i64* %RBP, align 8
  %637 = add i64 %636, -12
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RDI, align 8, !tbaa !2428
  %643 = add i64 %638, -1231
  %644 = add i64 %638, 8
  %645 = load i64, i64* %RSP, align 8, !tbaa !2428
  %646 = add i64 %645, -8
  %647 = inttoptr i64 %646 to i64*
  store i64 %644, i64* %647, align 8
  store i64 %646, i64* %RSP, align 8, !tbaa !2428
  store i64 %643, i64* %PC, align 8, !tbaa !2428
  %648 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %643, %struct.Memory* %MEMORY.0)
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -8
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %650 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = add i64 %654, 4
  store i64 %655, i64* %RCX, align 8, !tbaa !2428
  %656 = icmp ugt i64 %654, -5
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %4, align 1, !tbaa !2432
  %658 = trunc i64 %655 to i32
  %659 = and i32 %658, 255
  %660 = tail call i32 @llvm.ctpop.i32(i32 %659) #8
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  store i8 %663, i8* %5, align 1, !tbaa !2446
  %664 = xor i64 %654, %655
  %665 = lshr i64 %664, 4
  %666 = trunc i64 %665 to i8
  %667 = and i8 %666, 1
  store i8 %667, i8* %6, align 1, !tbaa !2447
  %668 = icmp eq i64 %655, 0
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %7, align 1, !tbaa !2448
  %670 = lshr i64 %655, 63
  %671 = trunc i64 %670 to i8
  store i8 %671, i8* %8, align 1, !tbaa !2449
  %672 = lshr i64 %654, 63
  %673 = xor i64 %670, %672
  %674 = add nuw nsw i64 %673, %670
  %675 = icmp eq i64 %674, 2
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %9, align 1, !tbaa !2450
  %677 = add i64 %651, 15
  store i64 %677, i64* %PC, align 8
  store i64 %655, i64* %653, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %678 = add i64 %994, -12
  store i64 4195899, i64* %PC, align 8
  %679 = inttoptr i64 %678 to i32*
  store i32 5, i32* %679, align 4
  %680 = load i64, i64* %RBP, align 8
  %681 = add i64 %680, -12
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %681 to i32*
  %685 = load i32, i32* %684, align 4
  %686 = zext i32 %685 to i64
  store i64 %686, i64* %RDI, align 8, !tbaa !2428
  %687 = add i64 %682, -331
  %688 = add i64 %682, 8
  %689 = load i64, i64* %RSP, align 8, !tbaa !2428
  %690 = add i64 %689, -8
  %691 = inttoptr i64 %690 to i64*
  store i64 %688, i64* %691, align 8
  store i64 %690, i64* %RSP, align 8, !tbaa !2428
  store i64 %687, i64* %PC, align 8, !tbaa !2428
  %692 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %687, %struct.Memory* %MEMORY.0)
  %693 = load i64, i64* %RBP, align 8
  %694 = add i64 %693, -8
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = add i64 %698, 4
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = icmp ugt i64 %698, -5
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %4, align 1, !tbaa !2432
  %702 = trunc i64 %699 to i32
  %703 = and i32 %702, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #8
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %5, align 1, !tbaa !2446
  %708 = xor i64 %698, %699
  %709 = lshr i64 %708, 4
  %710 = trunc i64 %709 to i8
  %711 = and i8 %710, 1
  store i8 %711, i8* %6, align 1, !tbaa !2447
  %712 = icmp eq i64 %699, 0
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %7, align 1, !tbaa !2448
  %714 = lshr i64 %699, 63
  %715 = trunc i64 %714 to i8
  store i8 %715, i8* %8, align 1, !tbaa !2449
  %716 = lshr i64 %698, 63
  %717 = xor i64 %714, %716
  %718 = add nuw nsw i64 %717, %714
  %719 = icmp eq i64 %718, 2
  %720 = zext i1 %719 to i8
  store i8 %720, i8* %9, align 1, !tbaa !2450
  %721 = add i64 %695, 15
  store i64 %721, i64* %PC, align 8
  store i64 %699, i64* %697, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %722 = add i64 %994, -12
  store i64 4197049, i64* %PC, align 8
  %723 = inttoptr i64 %722 to i32*
  store i32 28, i32* %723, align 4
  %724 = load i64, i64* %RBP, align 8
  %725 = add i64 %724, -12
  %726 = load i64, i64* %PC, align 8
  %727 = add i64 %726, 3
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %725 to i32*
  %729 = load i32, i32* %728, align 4
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RDI, align 8, !tbaa !2428
  %731 = add i64 %726, -1481
  %732 = add i64 %726, 8
  %733 = load i64, i64* %RSP, align 8, !tbaa !2428
  %734 = add i64 %733, -8
  %735 = inttoptr i64 %734 to i64*
  store i64 %732, i64* %735, align 8
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  store i64 %731, i64* %PC, align 8, !tbaa !2428
  %736 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %731, %struct.Memory* %MEMORY.0)
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -8
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = add i64 %742, 4
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  %744 = icmp ugt i64 %742, -5
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %4, align 1, !tbaa !2432
  %746 = trunc i64 %743 to i32
  %747 = and i32 %746, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #8
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %5, align 1, !tbaa !2446
  %752 = xor i64 %742, %743
  %753 = lshr i64 %752, 4
  %754 = trunc i64 %753 to i8
  %755 = and i8 %754, 1
  store i8 %755, i8* %6, align 1, !tbaa !2447
  %756 = icmp eq i64 %743, 0
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %7, align 1, !tbaa !2448
  %758 = lshr i64 %743, 63
  %759 = trunc i64 %758 to i8
  store i8 %759, i8* %8, align 1, !tbaa !2449
  %760 = lshr i64 %742, 63
  %761 = xor i64 %758, %760
  %762 = add nuw nsw i64 %761, %758
  %763 = icmp eq i64 %762, 2
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %9, align 1, !tbaa !2450
  %765 = add i64 %739, 15
  store i64 %765, i64* %PC, align 8
  store i64 %743, i64* %741, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %766 = add i64 %994, -12
  store i64 4195680, i64* %PC, align 8
  %767 = inttoptr i64 %766 to i32*
  store i32 0, i32* %767, align 4
  %768 = load i64, i64* %RSP, align 8
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %768, 48
  store i64 %770, i64* %RSP, align 8, !tbaa !2428
  %771 = icmp ugt i64 %768, -49
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %4, align 1, !tbaa !2432
  %773 = trunc i64 %770 to i32
  %774 = and i32 %773, 255
  %775 = tail call i32 @llvm.ctpop.i32(i32 %774) #8
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  store i8 %778, i8* %5, align 1, !tbaa !2446
  %779 = xor i64 %768, 16
  %780 = xor i64 %779, %770
  %781 = lshr i64 %780, 4
  %782 = trunc i64 %781 to i8
  %783 = and i8 %782, 1
  store i8 %783, i8* %6, align 1, !tbaa !2447
  %784 = icmp eq i64 %770, 0
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %7, align 1, !tbaa !2448
  %786 = lshr i64 %770, 63
  %787 = trunc i64 %786 to i8
  store i8 %787, i8* %8, align 1, !tbaa !2449
  %788 = lshr i64 %768, 63
  %789 = xor i64 %786, %788
  %790 = add nuw nsw i64 %789, %786
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %9, align 1, !tbaa !2450
  %793 = add i64 %769, 5
  store i64 %793, i64* %PC, align 8
  %794 = add i64 %768, 56
  %795 = inttoptr i64 %770 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %RBP, align 8, !tbaa !2428
  store i64 %794, i64* %RSP, align 8, !tbaa !2428
  %797 = add i64 %769, 6
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  %799 = load i64, i64* %798, align 8
  store i64 %799, i64* %PC, align 8, !tbaa !2428
  %800 = add i64 %768, 64
  store i64 %800, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %801 = add i64 %994, -12
  store i64 4196149, i64* %PC, align 8
  %802 = inttoptr i64 %801 to i32*
  store i32 10, i32* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -12
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %805, -581
  %811 = add i64 %805, 8
  %812 = load i64, i64* %RSP, align 8, !tbaa !2428
  %813 = add i64 %812, -8
  %814 = inttoptr i64 %813 to i64*
  store i64 %811, i64* %814, align 8
  store i64 %813, i64* %RSP, align 8, !tbaa !2428
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  %815 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %810, %struct.Memory* %MEMORY.0)
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -8
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = add i64 %821, 4
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = icmp ugt i64 %821, -5
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %4, align 1, !tbaa !2432
  %825 = trunc i64 %822 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %5, align 1, !tbaa !2446
  %831 = xor i64 %821, %822
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %6, align 1, !tbaa !2447
  %835 = icmp eq i64 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %7, align 1, !tbaa !2448
  %837 = lshr i64 %822, 63
  %838 = trunc i64 %837 to i8
  store i8 %838, i8* %8, align 1, !tbaa !2449
  %839 = lshr i64 %821, 63
  %840 = xor i64 %837, %839
  %841 = add nuw nsw i64 %840, %837
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %9, align 1, !tbaa !2450
  %844 = add i64 %818, 15
  store i64 %844, i64* %PC, align 8
  store i64 %822, i64* %820, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %845 = add i64 %994, -12
  store i64 4196399, i64* %PC, align 8
  %846 = inttoptr i64 %845 to i32*
  store i32 15, i32* %846, align 4
  %847 = load i64, i64* %RBP, align 8
  %848 = add i64 %847, -12
  %849 = load i64, i64* %PC, align 8
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = add i64 %849, -831
  %855 = add i64 %849, 8
  %856 = load i64, i64* %RSP, align 8, !tbaa !2428
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %855, i64* %858, align 8
  store i64 %857, i64* %RSP, align 8, !tbaa !2428
  store i64 %854, i64* %PC, align 8, !tbaa !2428
  %859 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %854, %struct.Memory* %MEMORY.0)
  %860 = load i64, i64* %RBP, align 8
  %861 = add i64 %860, -8
  %862 = load i64, i64* %PC, align 8
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %865, 4
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ugt i64 %865, -5
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %4, align 1, !tbaa !2432
  %869 = trunc i64 %866 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %5, align 1, !tbaa !2446
  %875 = xor i64 %865, %866
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  store i8 %878, i8* %6, align 1, !tbaa !2447
  %879 = icmp eq i64 %866, 0
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %7, align 1, !tbaa !2448
  %881 = lshr i64 %866, 63
  %882 = trunc i64 %881 to i8
  store i8 %882, i8* %8, align 1, !tbaa !2449
  %883 = lshr i64 %865, 63
  %884 = xor i64 %881, %883
  %885 = add nuw nsw i64 %884, %881
  %886 = icmp eq i64 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %9, align 1, !tbaa !2450
  %888 = add i64 %862, 15
  store i64 %888, i64* %PC, align 8
  store i64 %866, i64* %864, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %889 = add i64 %994, -12
  store i64 4196649, i64* %PC, align 8
  %890 = inttoptr i64 %889 to i32*
  store i32 20, i32* %890, align 4
  %891 = load i64, i64* %RBP, align 8
  %892 = add i64 %891, -12
  %893 = load i64, i64* %PC, align 8
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %892 to i32*
  %896 = load i32, i32* %895, align 4
  %897 = zext i32 %896 to i64
  store i64 %897, i64* %RDI, align 8, !tbaa !2428
  %898 = add i64 %893, -1081
  %899 = add i64 %893, 8
  %900 = load i64, i64* %RSP, align 8, !tbaa !2428
  %901 = add i64 %900, -8
  %902 = inttoptr i64 %901 to i64*
  store i64 %899, i64* %902, align 8
  store i64 %901, i64* %RSP, align 8, !tbaa !2428
  store i64 %898, i64* %PC, align 8, !tbaa !2428
  %903 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %898, %struct.Memory* %MEMORY.0)
  %904 = load i64, i64* %RBP, align 8
  %905 = add i64 %904, -8
  %906 = load i64, i64* %PC, align 8
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %905 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = add i64 %909, 4
  store i64 %910, i64* %RCX, align 8, !tbaa !2428
  %911 = icmp ugt i64 %909, -5
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %4, align 1, !tbaa !2432
  %913 = trunc i64 %910 to i32
  %914 = and i32 %913, 255
  %915 = tail call i32 @llvm.ctpop.i32(i32 %914) #8
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  %918 = xor i8 %917, 1
  store i8 %918, i8* %5, align 1, !tbaa !2446
  %919 = xor i64 %909, %910
  %920 = lshr i64 %919, 4
  %921 = trunc i64 %920 to i8
  %922 = and i8 %921, 1
  store i8 %922, i8* %6, align 1, !tbaa !2447
  %923 = icmp eq i64 %910, 0
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %7, align 1, !tbaa !2448
  %925 = lshr i64 %910, 63
  %926 = trunc i64 %925 to i8
  store i8 %926, i8* %8, align 1, !tbaa !2449
  %927 = lshr i64 %909, 63
  %928 = xor i64 %925, %927
  %929 = add nuw nsw i64 %928, %925
  %930 = icmp eq i64 %929, 2
  %931 = zext i1 %930 to i8
  store i8 %931, i8* %9, align 1, !tbaa !2450
  %932 = add i64 %906, 15
  store i64 %932, i64* %PC, align 8
  store i64 %910, i64* %908, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %933 = add i64 %994, -12
  store i64 4195749, i64* %PC, align 8
  %934 = inttoptr i64 %933 to i32*
  store i32 2, i32* %934, align 4
  %935 = load i64, i64* %RBP, align 8
  %936 = add i64 %935, -12
  %937 = load i64, i64* %PC, align 8
  %938 = add i64 %937, 3
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939, align 4
  %941 = zext i32 %940 to i64
  store i64 %941, i64* %RDI, align 8, !tbaa !2428
  %942 = add i64 %937, -181
  %943 = add i64 %937, 8
  %944 = load i64, i64* %RSP, align 8, !tbaa !2428
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %943, i64* %946, align 8
  store i64 %945, i64* %RSP, align 8, !tbaa !2428
  store i64 %942, i64* %PC, align 8, !tbaa !2428
  %947 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %942, %struct.Memory* %MEMORY.0)
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -8
  %950 = load i64, i64* %PC, align 8
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = add i64 %953, 4
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = icmp ugt i64 %953, -5
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %4, align 1, !tbaa !2432
  %957 = trunc i64 %954 to i32
  %958 = and i32 %957, 255
  %959 = tail call i32 @llvm.ctpop.i32(i32 %958) #8
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  store i8 %962, i8* %5, align 1, !tbaa !2446
  %963 = xor i64 %953, %954
  %964 = lshr i64 %963, 4
  %965 = trunc i64 %964 to i8
  %966 = and i8 %965, 1
  store i8 %966, i8* %6, align 1, !tbaa !2447
  %967 = icmp eq i64 %954, 0
  %968 = zext i1 %967 to i8
  store i8 %968, i8* %7, align 1, !tbaa !2448
  %969 = lshr i64 %954, 63
  %970 = trunc i64 %969 to i8
  store i8 %970, i8* %8, align 1, !tbaa !2449
  %971 = lshr i64 %953, 63
  %972 = xor i64 %969, %971
  %973 = add nuw nsw i64 %972, %969
  %974 = icmp eq i64 %973, 2
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %9, align 1, !tbaa !2450
  %976 = add i64 %950, 15
  store i64 %976, i64* %PC, align 8
  store i64 %954, i64* %952, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400602, %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400a87
  %.sink8 = phi i64 [ 201, %block_400602 ], [ 1101, %block_400986 ], [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 651, %block_4007c4 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1351, %block_400a87 ]
  %MEMORY.0 = phi %struct.Memory* [ %1319, %block_400602 ], [ %1275, %block_400986 ], [ %1189, %block_40088c ], [ %1145, %block_400792 ], [ %1101, %block_400b16 ], [ %1057, %block_400698 ], [ %1013, %block_400a1c ], [ %947, %block_40059e ], [ %903, %block_400922 ], [ %859, %block_400828 ], [ %815, %block_40072e ], [ %736, %block_400ab2 ], [ %692, %block_400634 ], [ %648, %block_4009b8 ], [ %600, %block_4007c4 ], [ %556, %block_400b48 ], [ %512, %block_4006ca ], [ %468, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %1231, %block_400a87 ]
  %977 = bitcast i64* %RAX to i32**
  %978 = load i32*, i32** %977, align 8
  %979 = load i64, i64* %PC, align 8
  %980 = add i64 %979, 3
  store i64 %980, i64* %PC, align 8
  %981 = load i32, i32* %978, align 4
  %982 = sext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = shl nsw i64 %982, 3
  %984 = add i64 %983, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %985 = add i64 %979, 11
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = load i64, i64* %RBP, align 8
  %989 = add i64 %988, -40
  %990 = add i64 %979, 15
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %987, i64* %991, align 8
  %992 = load i64, i64* %PC, align 8
  %993 = sub i64 %992, %.sink8
  %994 = load i64, i64* %RBP, align 8
  %995 = add i64 %994, -40
  %996 = add i64 %993, 4
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i64*
  %998 = load i64, i64* %997, align 8
  store i64 %998, i64* %RAX, align 8, !tbaa !2428
  store i64 %998, i64* %PC, align 8, !tbaa !2428
  switch i64 %998, label %1351 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %999 = add i64 %994, -12
  store i64 4196899, i64* %PC, align 8
  %1000 = inttoptr i64 %999 to i32*
  store i32 25, i32* %1000, align 4
  %1001 = load i64, i64* %RBP, align 8
  %1002 = add i64 %1001, -12
  %1003 = load i64, i64* %PC, align 8
  %1004 = add i64 %1003, 3
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1002 to i32*
  %1006 = load i32, i32* %1005, align 4
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RDI, align 8, !tbaa !2428
  %1008 = add i64 %1003, -1331
  %1009 = add i64 %1003, 8
  %1010 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1011 = add i64 %1010, -8
  %1012 = inttoptr i64 %1011 to i64*
  store i64 %1009, i64* %1012, align 8
  store i64 %1011, i64* %RSP, align 8, !tbaa !2428
  store i64 %1008, i64* %PC, align 8, !tbaa !2428
  %1013 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1008, %struct.Memory* %MEMORY.0)
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -8
  %1016 = load i64, i64* %PC, align 8
  %1017 = add i64 %1016, 4
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1015 to i64*
  %1019 = load i64, i64* %1018, align 8
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = add i64 %1019, 4
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = icmp ugt i64 %1019, -5
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %4, align 1, !tbaa !2432
  %1023 = trunc i64 %1020 to i32
  %1024 = and i32 %1023, 255
  %1025 = tail call i32 @llvm.ctpop.i32(i32 %1024) #8
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  store i8 %1028, i8* %5, align 1, !tbaa !2446
  %1029 = xor i64 %1019, %1020
  %1030 = lshr i64 %1029, 4
  %1031 = trunc i64 %1030 to i8
  %1032 = and i8 %1031, 1
  store i8 %1032, i8* %6, align 1, !tbaa !2447
  %1033 = icmp eq i64 %1020, 0
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %7, align 1, !tbaa !2448
  %1035 = lshr i64 %1020, 63
  %1036 = trunc i64 %1035 to i8
  store i8 %1036, i8* %8, align 1, !tbaa !2449
  %1037 = lshr i64 %1019, 63
  %1038 = xor i64 %1035, %1037
  %1039 = add nuw nsw i64 %1038, %1035
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %9, align 1, !tbaa !2450
  %1042 = add i64 %1016, 15
  store i64 %1042, i64* %PC, align 8
  store i64 %1020, i64* %1018, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1043 = add i64 %994, -12
  store i64 4195999, i64* %PC, align 8
  %1044 = inttoptr i64 %1043 to i32*
  store i32 7, i32* %1044, align 4
  %1045 = load i64, i64* %RBP, align 8
  %1046 = add i64 %1045, -12
  %1047 = load i64, i64* %PC, align 8
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049, align 4
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RDI, align 8, !tbaa !2428
  %1052 = add i64 %1047, -431
  %1053 = add i64 %1047, 8
  %1054 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1055 = add i64 %1054, -8
  %1056 = inttoptr i64 %1055 to i64*
  store i64 %1053, i64* %1056, align 8
  store i64 %1055, i64* %RSP, align 8, !tbaa !2428
  store i64 %1052, i64* %PC, align 8, !tbaa !2428
  %1057 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1052, %struct.Memory* %MEMORY.0)
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -8
  %1060 = load i64, i64* %PC, align 8
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RAX, align 8, !tbaa !2428
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = icmp ugt i64 %1063, -5
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %4, align 1, !tbaa !2432
  %1067 = trunc i64 %1064 to i32
  %1068 = and i32 %1067, 255
  %1069 = tail call i32 @llvm.ctpop.i32(i32 %1068) #8
  %1070 = trunc i32 %1069 to i8
  %1071 = and i8 %1070, 1
  %1072 = xor i8 %1071, 1
  store i8 %1072, i8* %5, align 1, !tbaa !2446
  %1073 = xor i64 %1063, %1064
  %1074 = lshr i64 %1073, 4
  %1075 = trunc i64 %1074 to i8
  %1076 = and i8 %1075, 1
  store i8 %1076, i8* %6, align 1, !tbaa !2447
  %1077 = icmp eq i64 %1064, 0
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %7, align 1, !tbaa !2448
  %1079 = lshr i64 %1064, 63
  %1080 = trunc i64 %1079 to i8
  store i8 %1080, i8* %8, align 1, !tbaa !2449
  %1081 = lshr i64 %1063, 63
  %1082 = xor i64 %1079, %1081
  %1083 = add nuw nsw i64 %1082, %1079
  %1084 = icmp eq i64 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %9, align 1, !tbaa !2450
  %1086 = add i64 %1060, 15
  store i64 %1086, i64* %PC, align 8
  store i64 %1064, i64* %1062, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1087 = add i64 %994, -12
  store i64 4197149, i64* %PC, align 8
  %1088 = inttoptr i64 %1087 to i32*
  store i32 30, i32* %1088, align 4
  %1089 = load i64, i64* %RBP, align 8
  %1090 = add i64 %1089, -12
  %1091 = load i64, i64* %PC, align 8
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093, align 4
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RDI, align 8, !tbaa !2428
  %1096 = add i64 %1091, -1581
  %1097 = add i64 %1091, 8
  %1098 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1099 = add i64 %1098, -8
  %1100 = inttoptr i64 %1099 to i64*
  store i64 %1097, i64* %1100, align 8
  store i64 %1099, i64* %RSP, align 8, !tbaa !2428
  store i64 %1096, i64* %PC, align 8, !tbaa !2428
  %1101 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1096, %struct.Memory* %MEMORY.0)
  %1102 = load i64, i64* %RBP, align 8
  %1103 = add i64 %1102, -8
  %1104 = load i64, i64* %PC, align 8
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1103 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %RCX, align 8, !tbaa !2428
  %1109 = icmp ugt i64 %1107, -5
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %4, align 1, !tbaa !2432
  %1111 = trunc i64 %1108 to i32
  %1112 = and i32 %1111, 255
  %1113 = tail call i32 @llvm.ctpop.i32(i32 %1112) #8
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  store i8 %1116, i8* %5, align 1, !tbaa !2446
  %1117 = xor i64 %1107, %1108
  %1118 = lshr i64 %1117, 4
  %1119 = trunc i64 %1118 to i8
  %1120 = and i8 %1119, 1
  store i8 %1120, i8* %6, align 1, !tbaa !2447
  %1121 = icmp eq i64 %1108, 0
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %7, align 1, !tbaa !2448
  %1123 = lshr i64 %1108, 63
  %1124 = trunc i64 %1123 to i8
  store i8 %1124, i8* %8, align 1, !tbaa !2449
  %1125 = lshr i64 %1107, 63
  %1126 = xor i64 %1123, %1125
  %1127 = add nuw nsw i64 %1126, %1123
  %1128 = icmp eq i64 %1127, 2
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %9, align 1, !tbaa !2450
  %1130 = add i64 %1104, 15
  store i64 %1130, i64* %PC, align 8
  store i64 %1108, i64* %1106, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1131 = add i64 %994, -12
  store i64 4196249, i64* %PC, align 8
  %1132 = inttoptr i64 %1131 to i32*
  store i32 12, i32* %1132, align 4
  %1133 = load i64, i64* %RBP, align 8
  %1134 = add i64 %1133, -12
  %1135 = load i64, i64* %PC, align 8
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1134 to i32*
  %1138 = load i32, i32* %1137, align 4
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* %RDI, align 8, !tbaa !2428
  %1140 = add i64 %1135, -681
  %1141 = add i64 %1135, 8
  %1142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1143 = add i64 %1142, -8
  %1144 = inttoptr i64 %1143 to i64*
  store i64 %1141, i64* %1144, align 8
  store i64 %1143, i64* %RSP, align 8, !tbaa !2428
  store i64 %1140, i64* %PC, align 8, !tbaa !2428
  %1145 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1140, %struct.Memory* %MEMORY.0)
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -8
  %1148 = load i64, i64* %PC, align 8
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1147 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %RAX, align 8, !tbaa !2428
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %RCX, align 8, !tbaa !2428
  %1153 = icmp ugt i64 %1151, -5
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %4, align 1, !tbaa !2432
  %1155 = trunc i64 %1152 to i32
  %1156 = and i32 %1155, 255
  %1157 = tail call i32 @llvm.ctpop.i32(i32 %1156) #8
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  store i8 %1160, i8* %5, align 1, !tbaa !2446
  %1161 = xor i64 %1151, %1152
  %1162 = lshr i64 %1161, 4
  %1163 = trunc i64 %1162 to i8
  %1164 = and i8 %1163, 1
  store i8 %1164, i8* %6, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1152, 0
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %7, align 1, !tbaa !2448
  %1167 = lshr i64 %1152, 63
  %1168 = trunc i64 %1167 to i8
  store i8 %1168, i8* %8, align 1, !tbaa !2449
  %1169 = lshr i64 %1151, 63
  %1170 = xor i64 %1167, %1169
  %1171 = add nuw nsw i64 %1170, %1167
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %9, align 1, !tbaa !2450
  %1174 = add i64 %1148, 15
  store i64 %1174, i64* %PC, align 8
  store i64 %1152, i64* %1150, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1175 = add i64 %994, -12
  store i64 4196499, i64* %PC, align 8
  %1176 = inttoptr i64 %1175 to i32*
  store i32 17, i32* %1176, align 4
  %1177 = load i64, i64* %RBP, align 8
  %1178 = add i64 %1177, -12
  %1179 = load i64, i64* %PC, align 8
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC, align 8
  %1181 = inttoptr i64 %1178 to i32*
  %1182 = load i32, i32* %1181, align 4
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RDI, align 8, !tbaa !2428
  %1184 = add i64 %1179, -931
  %1185 = add i64 %1179, 8
  %1186 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1187 = add i64 %1186, -8
  %1188 = inttoptr i64 %1187 to i64*
  store i64 %1185, i64* %1188, align 8
  store i64 %1187, i64* %RSP, align 8, !tbaa !2428
  store i64 %1184, i64* %PC, align 8, !tbaa !2428
  %1189 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1184, %struct.Memory* %MEMORY.0)
  %1190 = load i64, i64* %RBP, align 8
  %1191 = add i64 %1190, -8
  %1192 = load i64, i64* %PC, align 8
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC, align 8
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194, align 8
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %RCX, align 8, !tbaa !2428
  %1197 = icmp ugt i64 %1195, -5
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %4, align 1, !tbaa !2432
  %1199 = trunc i64 %1196 to i32
  %1200 = and i32 %1199, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #8
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %5, align 1, !tbaa !2446
  %1205 = xor i64 %1195, %1196
  %1206 = lshr i64 %1205, 4
  %1207 = trunc i64 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %6, align 1, !tbaa !2447
  %1209 = icmp eq i64 %1196, 0
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %7, align 1, !tbaa !2448
  %1211 = lshr i64 %1196, 63
  %1212 = trunc i64 %1211 to i8
  store i8 %1212, i8* %8, align 1, !tbaa !2449
  %1213 = lshr i64 %1195, 63
  %1214 = xor i64 %1211, %1213
  %1215 = add nuw nsw i64 %1214, %1211
  %1216 = icmp eq i64 %1215, 2
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %9, align 1, !tbaa !2450
  %1218 = add i64 %1192, 15
  store i64 %1218, i64* %PC, align 8
  store i64 %1196, i64* %1194, align 8
  br label %block_400566

block_400a87:                                     ; preds = %block_400a80, %3
  %1219 = phi i64 [ %1, %3 ], [ %.pre, %block_400a80 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a80 ]
  %1220 = load i64, i64* %RBP, align 8
  %1221 = add i64 %1220, -12
  %1222 = add i64 %1219, 3
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1221 to i32*
  %1224 = load i32, i32* %1223, align 4
  %1225 = zext i32 %1224 to i64
  store i64 %1225, i64* %RDI, align 8, !tbaa !2428
  %1226 = add i64 %1219, -1431
  %1227 = add i64 %1219, 8
  %1228 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1229 = add i64 %1228, -8
  %1230 = inttoptr i64 %1229 to i64*
  store i64 %1227, i64* %1230, align 8
  store i64 %1229, i64* %RSP, align 8, !tbaa !2428
  store i64 %1226, i64* %PC, align 8, !tbaa !2428
  %1231 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1226, %struct.Memory* %MEMORY.1)
  %1232 = load i64, i64* %RBP, align 8
  %1233 = add i64 %1232, -8
  %1234 = load i64, i64* %PC, align 8
  %1235 = add i64 %1234, 4
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1239 = icmp ugt i64 %1237, -5
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %4, align 1, !tbaa !2432
  %1241 = trunc i64 %1238 to i32
  %1242 = and i32 %1241, 255
  %1243 = tail call i32 @llvm.ctpop.i32(i32 %1242) #8
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = xor i8 %1245, 1
  store i8 %1246, i8* %5, align 1, !tbaa !2446
  %1247 = xor i64 %1237, %1238
  %1248 = lshr i64 %1247, 4
  %1249 = trunc i64 %1248 to i8
  %1250 = and i8 %1249, 1
  store i8 %1250, i8* %6, align 1, !tbaa !2447
  %1251 = icmp eq i64 %1238, 0
  %1252 = zext i1 %1251 to i8
  store i8 %1252, i8* %7, align 1, !tbaa !2448
  %1253 = lshr i64 %1238, 63
  %1254 = trunc i64 %1253 to i8
  store i8 %1254, i8* %8, align 1, !tbaa !2449
  %1255 = lshr i64 %1237, 63
  %1256 = xor i64 %1253, %1255
  %1257 = add nuw nsw i64 %1256, %1253
  %1258 = icmp eq i64 %1257, 2
  %1259 = zext i1 %1258 to i8
  store i8 %1259, i8* %9, align 1, !tbaa !2450
  %1260 = add i64 %1234, 15
  store i64 %1260, i64* %PC, align 8
  store i64 %1238, i64* %1236, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1261 = add i64 %994, -12
  store i64 4196749, i64* %PC, align 8
  %1262 = inttoptr i64 %1261 to i32*
  store i32 22, i32* %1262, align 4
  %1263 = load i64, i64* %RBP, align 8
  %1264 = add i64 %1263, -12
  %1265 = load i64, i64* %PC, align 8
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1264 to i32*
  %1268 = load i32, i32* %1267, align 4
  %1269 = zext i32 %1268 to i64
  store i64 %1269, i64* %RDI, align 8, !tbaa !2428
  %1270 = add i64 %1265, -1181
  %1271 = add i64 %1265, 8
  %1272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1273 = add i64 %1272, -8
  %1274 = inttoptr i64 %1273 to i64*
  store i64 %1271, i64* %1274, align 8
  store i64 %1273, i64* %RSP, align 8, !tbaa !2428
  store i64 %1270, i64* %PC, align 8, !tbaa !2428
  %1275 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1270, %struct.Memory* %MEMORY.0)
  %1276 = load i64, i64* %RBP, align 8
  %1277 = add i64 %1276, -8
  %1278 = load i64, i64* %PC, align 8
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280, align 8
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1283 = icmp ugt i64 %1281, -5
  %1284 = zext i1 %1283 to i8
  store i8 %1284, i8* %4, align 1, !tbaa !2432
  %1285 = trunc i64 %1282 to i32
  %1286 = and i32 %1285, 255
  %1287 = tail call i32 @llvm.ctpop.i32(i32 %1286) #8
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = xor i8 %1289, 1
  store i8 %1290, i8* %5, align 1, !tbaa !2446
  %1291 = xor i64 %1281, %1282
  %1292 = lshr i64 %1291, 4
  %1293 = trunc i64 %1292 to i8
  %1294 = and i8 %1293, 1
  store i8 %1294, i8* %6, align 1, !tbaa !2447
  %1295 = icmp eq i64 %1282, 0
  %1296 = zext i1 %1295 to i8
  store i8 %1296, i8* %7, align 1, !tbaa !2448
  %1297 = lshr i64 %1282, 63
  %1298 = trunc i64 %1297 to i8
  store i8 %1298, i8* %8, align 1, !tbaa !2449
  %1299 = lshr i64 %1281, 63
  %1300 = xor i64 %1297, %1299
  %1301 = add nuw nsw i64 %1300, %1297
  %1302 = icmp eq i64 %1301, 2
  %1303 = zext i1 %1302 to i8
  store i8 %1303, i8* %9, align 1, !tbaa !2450
  %1304 = add i64 %1278, 15
  store i64 %1304, i64* %PC, align 8
  store i64 %1282, i64* %1280, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1305 = add i64 %994, -12
  store i64 4195849, i64* %PC, align 8
  %1306 = inttoptr i64 %1305 to i32*
  store i32 4, i32* %1306, align 4
  %1307 = load i64, i64* %RBP, align 8
  %1308 = add i64 %1307, -12
  %1309 = load i64, i64* %PC, align 8
  %1310 = add i64 %1309, 3
  store i64 %1310, i64* %PC, align 8
  %1311 = inttoptr i64 %1308 to i32*
  %1312 = load i32, i32* %1311, align 4
  %1313 = zext i32 %1312 to i64
  store i64 %1313, i64* %RDI, align 8, !tbaa !2428
  %1314 = add i64 %1309, -281
  %1315 = add i64 %1309, 8
  %1316 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1317 = add i64 %1316, -8
  %1318 = inttoptr i64 %1317 to i64*
  store i64 %1315, i64* %1318, align 8
  store i64 %1317, i64* %RSP, align 8, !tbaa !2428
  store i64 %1314, i64* %PC, align 8, !tbaa !2428
  %1319 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1314, %struct.Memory* %MEMORY.0)
  %1320 = load i64, i64* %RBP, align 8
  %1321 = add i64 %1320, -8
  %1322 = load i64, i64* %PC, align 8
  %1323 = add i64 %1322, 4
  store i64 %1323, i64* %PC, align 8
  %1324 = inttoptr i64 %1321 to i64*
  %1325 = load i64, i64* %1324, align 8
  store i64 %1325, i64* %RAX, align 8, !tbaa !2428
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %RCX, align 8, !tbaa !2428
  %1327 = icmp ugt i64 %1325, -5
  %1328 = zext i1 %1327 to i8
  store i8 %1328, i8* %4, align 1, !tbaa !2432
  %1329 = trunc i64 %1326 to i32
  %1330 = and i32 %1329, 255
  %1331 = tail call i32 @llvm.ctpop.i32(i32 %1330) #8
  %1332 = trunc i32 %1331 to i8
  %1333 = and i8 %1332, 1
  %1334 = xor i8 %1333, 1
  store i8 %1334, i8* %5, align 1, !tbaa !2446
  %1335 = xor i64 %1325, %1326
  %1336 = lshr i64 %1335, 4
  %1337 = trunc i64 %1336 to i8
  %1338 = and i8 %1337, 1
  store i8 %1338, i8* %6, align 1, !tbaa !2447
  %1339 = icmp eq i64 %1326, 0
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %7, align 1, !tbaa !2448
  %1341 = lshr i64 %1326, 63
  %1342 = trunc i64 %1341 to i8
  store i8 %1342, i8* %8, align 1, !tbaa !2449
  %1343 = lshr i64 %1325, 63
  %1344 = xor i64 %1341, %1343
  %1345 = add nuw nsw i64 %1344, %1341
  %1346 = icmp eq i64 %1345, 2
  %1347 = zext i1 %1346 to i8
  store i8 %1347, i8* %9, align 1, !tbaa !2450
  %1348 = add i64 %1322, 15
  store i64 %1348, i64* %PC, align 8
  store i64 %1326, i64* %1324, align 8
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %1349 = add i64 %994, -12
  store i64 4196999, i64* %PC, align 8
  %1350 = inttoptr i64 %1349 to i32*
  store i32 27, i32* %1350, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400a87

; <label>:1351:                                   ; preds = %block_400566
  %1352 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %998, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1352
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004f0_execute(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -4
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 3
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = load i32, i32* bitcast (%sum_type* @sum to i32*), align 8
  %22 = add i32 %21, %20
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = icmp ult i32 %22, %20
  %25 = icmp ult i32 %22, %21
  %26 = or i1 %24, %25
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %27, i8* %28, align 1, !tbaa !2432
  %29 = and i32 %22, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) #8
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %33, i8* %34, align 1, !tbaa !2446
  %35 = xor i32 %21, %20
  %36 = xor i32 %35, %22
  %37 = lshr i32 %36, 4
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %39, i8* %40, align 1, !tbaa !2447
  %41 = icmp eq i32 %22, 0
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %42, i8* %43, align 1, !tbaa !2448
  %44 = lshr i32 %22, 31
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %45, i8* %46, align 1, !tbaa !2449
  %47 = lshr i32 %20, 31
  %48 = lshr i32 %21, 31
  %49 = xor i32 %44, %47
  %50 = xor i32 %44, %48
  %51 = add nuw nsw i32 %49, %50
  %52 = icmp eq i32 %51, 2
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %53, i8* %54, align 1, !tbaa !2450
  store i32 %22, i32* bitcast (%sum_type* @sum to i32*), align 8
  %55 = add i64 %17, 18
  store i64 %55, i64* %PC, align 8
  %56 = load i64, i64* %6, align 8, !tbaa !2428
  %57 = add i64 %56, 8
  %58 = inttoptr i64 %56 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %RBP, align 8, !tbaa !2428
  store i64 %57, i64* %6, align 8, !tbaa !2428
  %60 = add i64 %17, 19
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %PC, align 8, !tbaa !2428
  %63 = add i64 %56, 16
  store i64 %63, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400861(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400861

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %400, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.1)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %400, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.1)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %99 = add i64 %400, -12
  store i64 4195699, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 1, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -131
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.1)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %143 = add i64 %400, -12
  store i64 4196099, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 9, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %146

block_4009ea:                                     ; preds = %block_400566
  %147 = add i64 %400, -12
  store i64 4196849, i64* %PC, align 8
  %148 = inttoptr i64 %147 to i32*
  store i32 24, i32* %148, align 4
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -12
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %151, -1281
  %157 = add i64 %151, 8
  %158 = load i64, i64* %4, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %4, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.1)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -8
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 4
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -5
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %5, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %6, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %7, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %8, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %9, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %10, align 1, !tbaa !2450
  %190 = add i64 %164, 15
  store i64 %190, i64* %PC, align 8
  store i64 %168, i64* %166, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %191 = add i64 %400, -12
  store i64 4195949, i64* %PC, align 8
  %192 = inttoptr i64 %191 to i32*
  store i32 6, i32* %192, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -12
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = add i64 %195, -381
  %201 = add i64 %195, 8
  %202 = load i64, i64* %4, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %4, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.1)
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %211, 4
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = icmp ugt i64 %211, -5
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %5, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #8
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %6, align 1, !tbaa !2446
  %221 = xor i64 %211, %212
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %7, align 1, !tbaa !2447
  %225 = icmp eq i64 %212, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %8, align 1, !tbaa !2448
  %227 = lshr i64 %212, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %9, align 1, !tbaa !2449
  %229 = lshr i64 %211, 63
  %230 = xor i64 %227, %229
  %231 = add nuw nsw i64 %230, %227
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %10, align 1, !tbaa !2450
  %234 = add i64 %208, 15
  store i64 %234, i64* %PC, align 8
  store i64 %212, i64* %210, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %235 = add i64 %400, -12
  store i64 4197099, i64* %PC, align 8
  %236 = inttoptr i64 %235 to i32*
  store i32 29, i32* %236, align 4
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -12
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %239, -1531
  %245 = add i64 %239, 8
  %246 = load i64, i64* %4, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %4, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -8
  %252 = load i64, i64* %PC, align 8
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = add i64 %255, 4
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = icmp ugt i64 %255, -5
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %5, align 1, !tbaa !2432
  %259 = trunc i64 %256 to i32
  %260 = and i32 %259, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %6, align 1, !tbaa !2446
  %265 = xor i64 %255, %256
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %7, align 1, !tbaa !2447
  %269 = icmp eq i64 %256, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %8, align 1, !tbaa !2448
  %271 = lshr i64 %256, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %9, align 1, !tbaa !2449
  %273 = lshr i64 %255, 63
  %274 = xor i64 %271, %273
  %275 = add nuw nsw i64 %274, %271
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %10, align 1, !tbaa !2450
  %278 = add i64 %252, 15
  store i64 %278, i64* %PC, align 8
  store i64 %256, i64* %254, align 8
  br label %block_400566

block_400861:                                     ; preds = %block_40085a, %3
  %279 = phi i64 [ %1, %3 ], [ %.pre, %block_40085a ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_40085a ]
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = add i64 %279, 3
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %286 = add i64 %279, -881
  %287 = add i64 %279, 8
  %288 = load i64, i64* %4, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %4, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %MEMORY.0)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -8
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = add i64 %297, 4
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = icmp ugt i64 %297, -5
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %5, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #8
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %6, align 1, !tbaa !2446
  %307 = xor i64 %297, %298
  %308 = lshr i64 %307, 4
  %309 = trunc i64 %308 to i8
  %310 = and i8 %309, 1
  store i8 %310, i8* %7, align 1, !tbaa !2447
  %311 = icmp eq i64 %298, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %8, align 1, !tbaa !2448
  %313 = lshr i64 %298, 63
  %314 = trunc i64 %313 to i8
  store i8 %314, i8* %9, align 1, !tbaa !2449
  %315 = lshr i64 %297, 63
  %316 = xor i64 %313, %315
  %317 = add nuw nsw i64 %316, %313
  %318 = icmp eq i64 %317, 2
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %10, align 1, !tbaa !2450
  %320 = add i64 %294, 15
  store i64 %320, i64* %PC, align 8
  store i64 %298, i64* %296, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %321 = add i64 %400, -12
  store i64 4196199, i64* %PC, align 8
  %322 = inttoptr i64 %321 to i32*
  store i32 11, i32* %322, align 4
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -12
  %325 = load i64, i64* %PC, align 8
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RDI, align 8, !tbaa !2428
  %330 = add i64 %325, -631
  %331 = add i64 %325, 8
  %332 = load i64, i64* %4, align 8, !tbaa !2428
  %333 = add i64 %332, -8
  %334 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %334, align 8
  store i64 %333, i64* %4, align 8, !tbaa !2428
  store i64 %330, i64* %PC, align 8, !tbaa !2428
  %335 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %330, %struct.Memory* %MEMORY.1)
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -8
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %341, 4
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = icmp ugt i64 %341, -5
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %5, align 1, !tbaa !2432
  %345 = trunc i64 %342 to i32
  %346 = and i32 %345, 255
  %347 = tail call i32 @llvm.ctpop.i32(i32 %346) #8
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  store i8 %350, i8* %6, align 1, !tbaa !2446
  %351 = xor i64 %341, %342
  %352 = lshr i64 %351, 4
  %353 = trunc i64 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %7, align 1, !tbaa !2447
  %355 = icmp eq i64 %342, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %8, align 1, !tbaa !2448
  %357 = lshr i64 %342, 63
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %9, align 1, !tbaa !2449
  %359 = lshr i64 %341, 63
  %360 = xor i64 %357, %359
  %361 = add nuw nsw i64 %360, %357
  %362 = icmp eq i64 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %10, align 1, !tbaa !2450
  %364 = add i64 %338, 15
  store i64 %364, i64* %PC, align 8
  store i64 %342, i64* %340, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %365 = add i64 %400, -12
  store i64 4196449, i64* %PC, align 8
  %366 = inttoptr i64 %365 to i32*
  store i32 16, i32* %366, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400861

block_400954:                                     ; preds = %block_400566
  %367 = add i64 %400, -12
  store i64 4196699, i64* %PC, align 8
  %368 = inttoptr i64 %367 to i32*
  store i32 21, i32* %368, align 4
  %369 = load i64, i64* %PC, align 8
  %370 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %369, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %370

block_400a4e:                                     ; preds = %block_400566
  %371 = add i64 %400, -12
  store i64 4196949, i64* %PC, align 8
  %372 = inttoptr i64 %371 to i32*
  store i32 26, i32* %372, align 4
  %373 = load i64, i64* %PC, align 8
  %374 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %373, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %374

block_400b48:                                     ; preds = %block_400566
  %375 = add i64 %400, -12
  store i64 4197199, i64* %PC, align 8
  %376 = inttoptr i64 %375 to i32*
  store i32 31, i32* %376, align 4
  %377 = load i64, i64* %PC, align 8
  %378 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %377, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %378

block_4007c4:                                     ; preds = %block_400566
  %379 = add i64 %400, -12
  store i64 4196299, i64* %PC, align 8
  %380 = inttoptr i64 %379 to i32*
  store i32 13, i32* %380, align 4
  %381 = load i64, i64* %PC, align 8
  %382 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %381, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %382

block_400566:                                     ; preds = %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400861
  %.sink21 = phi i64 [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 801, %block_400861 ]
  %MEMORY.1 = phi %struct.Memory* [ %743, %block_400a1c ], [ %695, %block_40059e ], [ %651, %block_400922 ], [ %607, %block_400828 ], [ %563, %block_40072e ], [ %519, %block_400ab2 ], [ %475, %block_400634 ], [ %431, %block_4009b8 ], [ %335, %block_400760 ], [ %249, %block_400ae4 ], [ %205, %block_400666 ], [ %161, %block_4009ea ], [ %113, %block_40056c ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %291, %block_400861 ]
  %383 = bitcast i64* %RAX to i32**
  %384 = load i32*, i32** %383, align 8
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC, align 8
  %387 = load i32, i32* %384, align 4
  %388 = sext i32 %387 to i64
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = shl nsw i64 %388, 3
  %390 = add i64 %389, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %391 = add i64 %385, 11
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = load i64, i64* %RBP, align 8
  %395 = add i64 %394, -40
  %396 = add i64 %385, 15
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i64*
  store i64 %393, i64* %397, align 8
  %398 = load i64, i64* %PC, align 8
  %399 = sub i64 %398, %.sink21
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -40
  %402 = add i64 %399, 4
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %401 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  store i64 %404, i64* %PC, align 8, !tbaa !2428
  switch i64 %404, label %801 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %405 = add i64 %400, -12
  store i64 4195799, i64* %PC, align 8
  %406 = inttoptr i64 %405 to i32*
  store i32 3, i32* %406, align 4
  %407 = load i64, i64* %PC, align 8
  %408 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %407, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %408

block_4008be:                                     ; preds = %block_400566
  %409 = add i64 %400, -12
  store i64 4196549, i64* %PC, align 8
  %410 = inttoptr i64 %409 to i32*
  store i32 18, i32* %410, align 4
  %411 = load i64, i64* %PC, align 8
  %412 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %411, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %412

block_4006ca:                                     ; preds = %block_400566
  %413 = add i64 %400, -12
  store i64 4196049, i64* %PC, align 8
  %414 = inttoptr i64 %413 to i32*
  store i32 8, i32* %414, align 4
  %415 = load i64, i64* %PC, align 8
  %416 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %415, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %416

block_4009b8:                                     ; preds = %block_400566
  %417 = add i64 %400, -12
  store i64 4196799, i64* %PC, align 8
  %418 = inttoptr i64 %417 to i32*
  store i32 23, i32* %418, align 4
  %419 = load i64, i64* %RBP, align 8
  %420 = add i64 %419, -12
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %420 to i32*
  %424 = load i32, i32* %423, align 4
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = add i64 %421, -1231
  %427 = add i64 %421, 8
  %428 = load i64, i64* %4, align 8, !tbaa !2428
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 %427, i64* %430, align 8
  store i64 %429, i64* %4, align 8, !tbaa !2428
  store i64 %426, i64* %PC, align 8, !tbaa !2428
  %431 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %426, %struct.Memory* %MEMORY.1)
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -8
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = add i64 %437, 4
  store i64 %438, i64* %RCX, align 8, !tbaa !2428
  %439 = icmp ugt i64 %437, -5
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %5, align 1, !tbaa !2432
  %441 = trunc i64 %438 to i32
  %442 = and i32 %441, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442) #8
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %6, align 1, !tbaa !2446
  %447 = xor i64 %437, %438
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i8
  %450 = and i8 %449, 1
  store i8 %450, i8* %7, align 1, !tbaa !2447
  %451 = icmp eq i64 %438, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %8, align 1, !tbaa !2448
  %453 = lshr i64 %438, 63
  %454 = trunc i64 %453 to i8
  store i8 %454, i8* %9, align 1, !tbaa !2449
  %455 = lshr i64 %437, 63
  %456 = xor i64 %453, %455
  %457 = add nuw nsw i64 %456, %453
  %458 = icmp eq i64 %457, 2
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %10, align 1, !tbaa !2450
  %460 = add i64 %434, 15
  store i64 %460, i64* %PC, align 8
  store i64 %438, i64* %436, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %461 = add i64 %400, -12
  store i64 4195899, i64* %PC, align 8
  %462 = inttoptr i64 %461 to i32*
  store i32 5, i32* %462, align 4
  %463 = load i64, i64* %RBP, align 8
  %464 = add i64 %463, -12
  %465 = load i64, i64* %PC, align 8
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467, align 4
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RDI, align 8, !tbaa !2428
  %470 = add i64 %465, -331
  %471 = add i64 %465, 8
  %472 = load i64, i64* %4, align 8, !tbaa !2428
  %473 = add i64 %472, -8
  %474 = inttoptr i64 %473 to i64*
  store i64 %471, i64* %474, align 8
  store i64 %473, i64* %4, align 8, !tbaa !2428
  store i64 %470, i64* %PC, align 8, !tbaa !2428
  %475 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %470, %struct.Memory* %MEMORY.1)
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -8
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = add i64 %481, 4
  store i64 %482, i64* %RCX, align 8, !tbaa !2428
  %483 = icmp ugt i64 %481, -5
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %5, align 1, !tbaa !2432
  %485 = trunc i64 %482 to i32
  %486 = and i32 %485, 255
  %487 = tail call i32 @llvm.ctpop.i32(i32 %486) #8
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = xor i8 %489, 1
  store i8 %490, i8* %6, align 1, !tbaa !2446
  %491 = xor i64 %481, %482
  %492 = lshr i64 %491, 4
  %493 = trunc i64 %492 to i8
  %494 = and i8 %493, 1
  store i8 %494, i8* %7, align 1, !tbaa !2447
  %495 = icmp eq i64 %482, 0
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %8, align 1, !tbaa !2448
  %497 = lshr i64 %482, 63
  %498 = trunc i64 %497 to i8
  store i8 %498, i8* %9, align 1, !tbaa !2449
  %499 = lshr i64 %481, 63
  %500 = xor i64 %497, %499
  %501 = add nuw nsw i64 %500, %497
  %502 = icmp eq i64 %501, 2
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %10, align 1, !tbaa !2450
  %504 = add i64 %478, 15
  store i64 %504, i64* %PC, align 8
  store i64 %482, i64* %480, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %505 = add i64 %400, -12
  store i64 4197049, i64* %PC, align 8
  %506 = inttoptr i64 %505 to i32*
  store i32 28, i32* %506, align 4
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -12
  %509 = load i64, i64* %PC, align 8
  %510 = add i64 %509, 3
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %508 to i32*
  %512 = load i32, i32* %511, align 4
  %513 = zext i32 %512 to i64
  store i64 %513, i64* %RDI, align 8, !tbaa !2428
  %514 = add i64 %509, -1481
  %515 = add i64 %509, 8
  %516 = load i64, i64* %4, align 8, !tbaa !2428
  %517 = add i64 %516, -8
  %518 = inttoptr i64 %517 to i64*
  store i64 %515, i64* %518, align 8
  store i64 %517, i64* %4, align 8, !tbaa !2428
  store i64 %514, i64* %PC, align 8, !tbaa !2428
  %519 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %514, %struct.Memory* %MEMORY.1)
  %520 = load i64, i64* %RBP, align 8
  %521 = add i64 %520, -8
  %522 = load i64, i64* %PC, align 8
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %521 to i64*
  %525 = load i64, i64* %524, align 8
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = add i64 %525, 4
  store i64 %526, i64* %RCX, align 8, !tbaa !2428
  %527 = icmp ugt i64 %525, -5
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %5, align 1, !tbaa !2432
  %529 = trunc i64 %526 to i32
  %530 = and i32 %529, 255
  %531 = tail call i32 @llvm.ctpop.i32(i32 %530) #8
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  store i8 %534, i8* %6, align 1, !tbaa !2446
  %535 = xor i64 %525, %526
  %536 = lshr i64 %535, 4
  %537 = trunc i64 %536 to i8
  %538 = and i8 %537, 1
  store i8 %538, i8* %7, align 1, !tbaa !2447
  %539 = icmp eq i64 %526, 0
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %8, align 1, !tbaa !2448
  %541 = lshr i64 %526, 63
  %542 = trunc i64 %541 to i8
  store i8 %542, i8* %9, align 1, !tbaa !2449
  %543 = lshr i64 %525, 63
  %544 = xor i64 %541, %543
  %545 = add nuw nsw i64 %544, %541
  %546 = icmp eq i64 %545, 2
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %10, align 1, !tbaa !2450
  %548 = add i64 %522, 15
  store i64 %548, i64* %PC, align 8
  store i64 %526, i64* %524, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %549 = add i64 %400, -12
  store i64 4196149, i64* %PC, align 8
  %550 = inttoptr i64 %549 to i32*
  store i32 10, i32* %550, align 4
  %551 = load i64, i64* %RBP, align 8
  %552 = add i64 %551, -12
  %553 = load i64, i64* %PC, align 8
  %554 = add i64 %553, 3
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %552 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = zext i32 %556 to i64
  store i64 %557, i64* %RDI, align 8, !tbaa !2428
  %558 = add i64 %553, -581
  %559 = add i64 %553, 8
  %560 = load i64, i64* %4, align 8, !tbaa !2428
  %561 = add i64 %560, -8
  %562 = inttoptr i64 %561 to i64*
  store i64 %559, i64* %562, align 8
  store i64 %561, i64* %4, align 8, !tbaa !2428
  store i64 %558, i64* %PC, align 8, !tbaa !2428
  %563 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %558, %struct.Memory* %MEMORY.1)
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -8
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, 4
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = add i64 %569, 4
  store i64 %570, i64* %RCX, align 8, !tbaa !2428
  %571 = icmp ugt i64 %569, -5
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %5, align 1, !tbaa !2432
  %573 = trunc i64 %570 to i32
  %574 = and i32 %573, 255
  %575 = tail call i32 @llvm.ctpop.i32(i32 %574) #8
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* %6, align 1, !tbaa !2446
  %579 = xor i64 %569, %570
  %580 = lshr i64 %579, 4
  %581 = trunc i64 %580 to i8
  %582 = and i8 %581, 1
  store i8 %582, i8* %7, align 1, !tbaa !2447
  %583 = icmp eq i64 %570, 0
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %8, align 1, !tbaa !2448
  %585 = lshr i64 %570, 63
  %586 = trunc i64 %585 to i8
  store i8 %586, i8* %9, align 1, !tbaa !2449
  %587 = lshr i64 %569, 63
  %588 = xor i64 %585, %587
  %589 = add nuw nsw i64 %588, %585
  %590 = icmp eq i64 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %10, align 1, !tbaa !2450
  %592 = add i64 %566, 15
  store i64 %592, i64* %PC, align 8
  store i64 %570, i64* %568, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %593 = add i64 %400, -12
  store i64 4196399, i64* %PC, align 8
  %594 = inttoptr i64 %593 to i32*
  store i32 15, i32* %594, align 4
  %595 = load i64, i64* %RBP, align 8
  %596 = add i64 %595, -12
  %597 = load i64, i64* %PC, align 8
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC, align 8
  %599 = inttoptr i64 %596 to i32*
  %600 = load i32, i32* %599, align 4
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RDI, align 8, !tbaa !2428
  %602 = add i64 %597, -831
  %603 = add i64 %597, 8
  %604 = load i64, i64* %4, align 8, !tbaa !2428
  %605 = add i64 %604, -8
  %606 = inttoptr i64 %605 to i64*
  store i64 %603, i64* %606, align 8
  store i64 %605, i64* %4, align 8, !tbaa !2428
  store i64 %602, i64* %PC, align 8, !tbaa !2428
  %607 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %602, %struct.Memory* %MEMORY.1)
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -8
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = add i64 %613, 4
  store i64 %614, i64* %RCX, align 8, !tbaa !2428
  %615 = icmp ugt i64 %613, -5
  %616 = zext i1 %615 to i8
  store i8 %616, i8* %5, align 1, !tbaa !2432
  %617 = trunc i64 %614 to i32
  %618 = and i32 %617, 255
  %619 = tail call i32 @llvm.ctpop.i32(i32 %618) #8
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  store i8 %622, i8* %6, align 1, !tbaa !2446
  %623 = xor i64 %613, %614
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %7, align 1, !tbaa !2447
  %627 = icmp eq i64 %614, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %8, align 1, !tbaa !2448
  %629 = lshr i64 %614, 63
  %630 = trunc i64 %629 to i8
  store i8 %630, i8* %9, align 1, !tbaa !2449
  %631 = lshr i64 %613, 63
  %632 = xor i64 %629, %631
  %633 = add nuw nsw i64 %632, %629
  %634 = icmp eq i64 %633, 2
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %10, align 1, !tbaa !2450
  %636 = add i64 %610, 15
  store i64 %636, i64* %PC, align 8
  store i64 %614, i64* %612, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %637 = add i64 %400, -12
  store i64 4196649, i64* %PC, align 8
  %638 = inttoptr i64 %637 to i32*
  store i32 20, i32* %638, align 4
  %639 = load i64, i64* %RBP, align 8
  %640 = add i64 %639, -12
  %641 = load i64, i64* %PC, align 8
  %642 = add i64 %641, 3
  store i64 %642, i64* %PC, align 8
  %643 = inttoptr i64 %640 to i32*
  %644 = load i32, i32* %643, align 4
  %645 = zext i32 %644 to i64
  store i64 %645, i64* %RDI, align 8, !tbaa !2428
  %646 = add i64 %641, -1081
  %647 = add i64 %641, 8
  %648 = load i64, i64* %4, align 8, !tbaa !2428
  %649 = add i64 %648, -8
  %650 = inttoptr i64 %649 to i64*
  store i64 %647, i64* %650, align 8
  store i64 %649, i64* %4, align 8, !tbaa !2428
  store i64 %646, i64* %PC, align 8, !tbaa !2428
  %651 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %646, %struct.Memory* %MEMORY.1)
  %652 = load i64, i64* %RBP, align 8
  %653 = add i64 %652, -8
  %654 = load i64, i64* %PC, align 8
  %655 = add i64 %654, 4
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RAX, align 8, !tbaa !2428
  %658 = add i64 %657, 4
  store i64 %658, i64* %RCX, align 8, !tbaa !2428
  %659 = icmp ugt i64 %657, -5
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %5, align 1, !tbaa !2432
  %661 = trunc i64 %658 to i32
  %662 = and i32 %661, 255
  %663 = tail call i32 @llvm.ctpop.i32(i32 %662) #8
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  store i8 %666, i8* %6, align 1, !tbaa !2446
  %667 = xor i64 %657, %658
  %668 = lshr i64 %667, 4
  %669 = trunc i64 %668 to i8
  %670 = and i8 %669, 1
  store i8 %670, i8* %7, align 1, !tbaa !2447
  %671 = icmp eq i64 %658, 0
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %8, align 1, !tbaa !2448
  %673 = lshr i64 %658, 63
  %674 = trunc i64 %673 to i8
  store i8 %674, i8* %9, align 1, !tbaa !2449
  %675 = lshr i64 %657, 63
  %676 = xor i64 %673, %675
  %677 = add nuw nsw i64 %676, %673
  %678 = icmp eq i64 %677, 2
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %10, align 1, !tbaa !2450
  %680 = add i64 %654, 15
  store i64 %680, i64* %PC, align 8
  store i64 %658, i64* %656, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %681 = add i64 %400, -12
  store i64 4195749, i64* %PC, align 8
  %682 = inttoptr i64 %681 to i32*
  store i32 2, i32* %682, align 4
  %683 = load i64, i64* %RBP, align 8
  %684 = add i64 %683, -12
  %685 = load i64, i64* %PC, align 8
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %684 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RDI, align 8, !tbaa !2428
  %690 = add i64 %685, -181
  %691 = add i64 %685, 8
  %692 = load i64, i64* %4, align 8, !tbaa !2428
  %693 = add i64 %692, -8
  %694 = inttoptr i64 %693 to i64*
  store i64 %691, i64* %694, align 8
  store i64 %693, i64* %4, align 8, !tbaa !2428
  store i64 %690, i64* %PC, align 8, !tbaa !2428
  %695 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %690, %struct.Memory* %MEMORY.1)
  %696 = load i64, i64* %RBP, align 8
  %697 = add i64 %696, -8
  %698 = load i64, i64* %PC, align 8
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700, align 8
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = add i64 %701, 4
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = icmp ugt i64 %701, -5
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %5, align 1, !tbaa !2432
  %705 = trunc i64 %702 to i32
  %706 = and i32 %705, 255
  %707 = tail call i32 @llvm.ctpop.i32(i32 %706) #8
  %708 = trunc i32 %707 to i8
  %709 = and i8 %708, 1
  %710 = xor i8 %709, 1
  store i8 %710, i8* %6, align 1, !tbaa !2446
  %711 = xor i64 %701, %702
  %712 = lshr i64 %711, 4
  %713 = trunc i64 %712 to i8
  %714 = and i8 %713, 1
  store i8 %714, i8* %7, align 1, !tbaa !2447
  %715 = icmp eq i64 %702, 0
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %8, align 1, !tbaa !2448
  %717 = lshr i64 %702, 63
  %718 = trunc i64 %717 to i8
  store i8 %718, i8* %9, align 1, !tbaa !2449
  %719 = lshr i64 %701, 63
  %720 = xor i64 %717, %719
  %721 = add nuw nsw i64 %720, %717
  %722 = icmp eq i64 %721, 2
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %10, align 1, !tbaa !2450
  %724 = add i64 %698, 15
  store i64 %724, i64* %PC, align 8
  store i64 %702, i64* %700, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %725 = add i64 %400, -12
  store i64 4195680, i64* %PC, align 8
  %726 = inttoptr i64 %725 to i32*
  store i32 0, i32* %726, align 4
  %727 = load i64, i64* %PC, align 8
  %728 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %727, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %728

block_400a1c:                                     ; preds = %block_400566
  %729 = add i64 %400, -12
  store i64 4196899, i64* %PC, align 8
  %730 = inttoptr i64 %729 to i32*
  store i32 25, i32* %730, align 4
  %731 = load i64, i64* %RBP, align 8
  %732 = add i64 %731, -12
  %733 = load i64, i64* %PC, align 8
  %734 = add i64 %733, 3
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %732 to i32*
  %736 = load i32, i32* %735, align 4
  %737 = zext i32 %736 to i64
  store i64 %737, i64* %RDI, align 8, !tbaa !2428
  %738 = add i64 %733, -1331
  %739 = add i64 %733, 8
  %740 = load i64, i64* %4, align 8, !tbaa !2428
  %741 = add i64 %740, -8
  %742 = inttoptr i64 %741 to i64*
  store i64 %739, i64* %742, align 8
  store i64 %741, i64* %4, align 8, !tbaa !2428
  store i64 %738, i64* %PC, align 8, !tbaa !2428
  %743 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %738, %struct.Memory* %MEMORY.1)
  %744 = load i64, i64* %RBP, align 8
  %745 = add i64 %744, -8
  %746 = load i64, i64* %PC, align 8
  %747 = add i64 %746, 4
  store i64 %747, i64* %PC, align 8
  %748 = inttoptr i64 %745 to i64*
  %749 = load i64, i64* %748, align 8
  store i64 %749, i64* %RAX, align 8, !tbaa !2428
  %750 = add i64 %749, 4
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ugt i64 %749, -5
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %5, align 1, !tbaa !2432
  %753 = trunc i64 %750 to i32
  %754 = and i32 %753, 255
  %755 = tail call i32 @llvm.ctpop.i32(i32 %754) #8
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  store i8 %758, i8* %6, align 1, !tbaa !2446
  %759 = xor i64 %749, %750
  %760 = lshr i64 %759, 4
  %761 = trunc i64 %760 to i8
  %762 = and i8 %761, 1
  store i8 %762, i8* %7, align 1, !tbaa !2447
  %763 = icmp eq i64 %750, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %8, align 1, !tbaa !2448
  %765 = lshr i64 %750, 63
  %766 = trunc i64 %765 to i8
  store i8 %766, i8* %9, align 1, !tbaa !2449
  %767 = lshr i64 %749, 63
  %768 = xor i64 %765, %767
  %769 = add nuw nsw i64 %768, %765
  %770 = icmp eq i64 %769, 2
  %771 = zext i1 %770 to i8
  store i8 %771, i8* %10, align 1, !tbaa !2450
  %772 = add i64 %746, 15
  store i64 %772, i64* %PC, align 8
  store i64 %750, i64* %748, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %773 = add i64 %400, -12
  store i64 4195999, i64* %PC, align 8
  %774 = inttoptr i64 %773 to i32*
  store i32 7, i32* %774, align 4
  %775 = load i64, i64* %PC, align 8
  %776 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %775, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %776

block_400b16:                                     ; preds = %block_400566
  %777 = add i64 %400, -12
  store i64 4197149, i64* %PC, align 8
  %778 = inttoptr i64 %777 to i32*
  store i32 30, i32* %778, align 4
  %779 = load i64, i64* %PC, align 8
  %780 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %779, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %780

block_400792:                                     ; preds = %block_400566
  %781 = add i64 %400, -12
  store i64 4196249, i64* %PC, align 8
  %782 = inttoptr i64 %781 to i32*
  store i32 12, i32* %782, align 4
  %783 = load i64, i64* %PC, align 8
  %784 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %783, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %784

block_40088c:                                     ; preds = %block_400566
  %785 = add i64 %400, -12
  store i64 4196499, i64* %PC, align 8
  %786 = inttoptr i64 %785 to i32*
  store i32 17, i32* %786, align 4
  %787 = load i64, i64* %PC, align 8
  %788 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %787, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %788

block_400986:                                     ; preds = %block_400566
  %789 = add i64 %400, -12
  store i64 4196749, i64* %PC, align 8
  %790 = inttoptr i64 %789 to i32*
  store i32 22, i32* %790, align 4
  %791 = load i64, i64* %PC, align 8
  %792 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %791, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %792

block_400602:                                     ; preds = %block_400566
  %793 = add i64 %400, -12
  store i64 4195849, i64* %PC, align 8
  %794 = inttoptr i64 %793 to i32*
  store i32 4, i32* %794, align 4
  %795 = load i64, i64* %PC, align 8
  %796 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %795, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %796

block_400a80:                                     ; preds = %block_400566
  %797 = add i64 %400, -12
  store i64 4196999, i64* %PC, align 8
  %798 = inttoptr i64 %797 to i32*
  store i32 27, i32* %798, align 4
  %799 = load i64, i64* %PC, align 8
  %800 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %799, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %800

; <label>:801:                                    ; preds = %block_400566
  %802 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %404, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %802
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -8232
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8224
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #8
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 %9, %12
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %12, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %9, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %8, -12
  %41 = add i64 %11, 17
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %40 to i32*
  store i32 0, i32* %42, align 4
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 7
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i32*
  store i32 2048, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8212
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 10
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i32*
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_400ba3

block_400c35:                                     ; preds = %block_400c05
  store i64 add (i64 ptrtoint (%seg_400ce0__rodata_type* @seg_400ce0__rodata to i64), i64 264), i64* %RDI, align 8, !tbaa !2428
  %54 = load i32, i32* bitcast (%sum_type* @sum to i32*), align 8
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %56 = add i64 %279, -2117
  %57 = add i64 %279, 24
  %58 = load i64, i64* %RSP, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %57, i64* %60, align 8
  store i64 %59, i64* %RSP, align 8, !tbaa !2428
  store i64 %56, i64* %PC, align 8, !tbaa !2428
  %61 = tail call fastcc %struct.Memory* @ext_602138_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %62 = load i64, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8224
  %65 = load i32, i32* %EAX, align 4
  %66 = add i64 %62, 8
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %67, align 4
  %68 = load i32, i32* %ESI, align 4
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %71 = load i64, i64* %RSP, align 8
  %72 = add i64 %71, 8224
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  %73 = icmp ugt i64 %71, -8225
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %15, align 1, !tbaa !2432
  %75 = trunc i64 %72 to i32
  %76 = and i32 %75, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #8
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %22, align 1, !tbaa !2446
  %81 = xor i64 %71, %72
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %27, align 1, !tbaa !2447
  %85 = icmp eq i64 %72, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %30, align 1, !tbaa !2448
  %87 = lshr i64 %72, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %33, align 1, !tbaa !2449
  %89 = lshr i64 %71, 63
  %90 = xor i64 %87, %89
  %91 = add nuw nsw i64 %90, %87
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %39, align 1, !tbaa !2450
  %94 = add i64 %70, 10
  store i64 %94, i64* %PC, align 8
  %95 = add i64 %71, 8232
  %96 = inttoptr i64 %72 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RBP, align 8, !tbaa !2428
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %70, 11
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %95 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %101 = add i64 %71, 8240
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %61

block_400bf4:                                     ; preds = %block_400ba3
  %102 = add i64 %281, -20
  %103 = add i64 %310, 7
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  store i32 0, i32* %104, align 4
  %105 = load i64, i64* %RBP, align 8
  %106 = add i64 %105, -8216
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 10
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %106 to i32*
  store i32 0, i32* %109, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_400c05

block_400c15:                                     ; preds = %block_400c05
  %110 = add i64 %251, -8208
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %279, -1797
  %112 = add i64 %279, 12
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_400510_eval_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.0)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8216
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 6
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, 1
  %124 = zext i32 %123 to i64
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = icmp eq i32 %122, -1
  %126 = icmp eq i32 %123, 0
  %127 = or i1 %125, %126
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %15, align 1, !tbaa !2432
  %129 = and i32 %123, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #8
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %22, align 1, !tbaa !2446
  %134 = xor i32 %122, %123
  %135 = lshr i32 %134, 4
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  store i8 %137, i8* %27, align 1, !tbaa !2447
  %138 = zext i1 %126 to i8
  store i8 %138, i8* %30, align 1, !tbaa !2448
  %139 = lshr i32 %123, 31
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %33, align 1, !tbaa !2449
  %141 = lshr i32 %122, 31
  %142 = xor i32 %139, %141
  %143 = add nuw nsw i32 %142, %139
  %144 = icmp eq i32 %143, 2
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %39, align 1, !tbaa !2450
  %146 = add i64 %119, 15
  store i64 %146, i64* %PC, align 8
  store i32 %123, i32* %121, align 4
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, -43
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  br label %block_400c05

block_400bb3:                                     ; preds = %block_400ba3
  store i64 31, i64* %RAX, align 8, !tbaa !2428
  %149 = add i64 %310, 11
  store i64 %149, i64* %PC, align 8
  %150 = load i32, i32* %284, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RCX, align 8, !tbaa !2428
  %152 = add i64 %281, -8220
  %153 = add i64 %310, 17
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i32*
  store i32 31, i32* %154, align 4
  %155 = load i32, i32* %ECX, align 4
  %156 = zext i32 %155 to i64
  %157 = load i64, i64* %PC, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %158 = sext i32 %155 to i64
  %159 = lshr i64 %158, 32
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -8220
  %162 = add i64 %157, 9
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = add i64 %157, 11
  store i64 %166, i64* %PC, align 8
  %167 = sext i32 %164 to i64
  %168 = shl nuw i64 %159, 32
  %169 = or i64 %168, %156
  %170 = sdiv i64 %169, %167
  %171 = shl i64 %170, 32
  %172 = ashr exact i64 %171, 32
  %173 = icmp eq i64 %170, %172
  br i1 %173, label %176, label %174

; <label>:174:                                    ; preds = %block_400bb3
  %175 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %166, %struct.Memory* %MEMORY.1) #9
  %.pre1 = load i64, i64* %RDX, align 8
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:176:                                    ; preds = %block_400bb3
  %177 = srem i64 %169, %167
  %178 = and i64 %170, 4294967295
  store i64 %178, i64* %53, align 8, !tbaa !2428
  %179 = and i64 %177, 4294967295
  store i64 %179, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %15, align 1, !tbaa !2432
  store i8 0, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %176, %174
  %180 = phi i64 [ %.pre3, %174 ], [ %160, %176 ]
  %181 = phi i64 [ %.pre2, %174 ], [ %166, %176 ]
  %182 = phi i64 [ %.pre1, %174 ], [ %179, %176 ]
  %183 = phi %struct.Memory* [ %175, %174 ], [ %MEMORY.1, %176 ]
  %184 = trunc i64 %182 to i32
  %185 = add i32 %184, 1
  %186 = zext i32 %185 to i64
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = icmp eq i32 %184, -1
  %188 = icmp eq i32 %185, 0
  %189 = or i1 %187, %188
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %15, align 1, !tbaa !2432
  %191 = and i32 %185, 255
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191) #8
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  store i8 %195, i8* %22, align 1, !tbaa !2446
  %196 = xor i32 %184, %185
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  store i8 %199, i8* %27, align 1, !tbaa !2447
  %200 = zext i1 %188 to i8
  store i8 %200, i8* %30, align 1, !tbaa !2448
  %201 = lshr i32 %185, 31
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %33, align 1, !tbaa !2449
  %203 = lshr i32 %184, 31
  %204 = xor i32 %201, %203
  %205 = add nuw nsw i32 %204, %201
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %39, align 1, !tbaa !2450
  %208 = add i64 %180, -8212
  %209 = add i64 %181, 10
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  store i64 %212, i64* %RSI, align 8, !tbaa !2428
  %213 = shl nsw i64 %212, 2
  %214 = add i64 %180, -8208
  %215 = add i64 %214, %213
  %216 = add i64 %181, 17
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i32*
  store i32 %185, i32* %217, align 4
  %218 = load i64, i64* %RBP, align 8
  %219 = add i64 %218, -8212
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %223, 1
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp eq i32 %223, -1
  %227 = icmp eq i32 %224, 0
  %228 = or i1 %226, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %15, align 1, !tbaa !2432
  %230 = and i32 %224, 255
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #8
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  store i8 %234, i8* %22, align 1, !tbaa !2446
  %235 = xor i32 %223, %224
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  store i8 %238, i8* %27, align 1, !tbaa !2447
  %239 = zext i1 %227 to i8
  store i8 %239, i8* %30, align 1, !tbaa !2448
  %240 = lshr i32 %224, 31
  %241 = trunc i32 %240 to i8
  store i8 %241, i8* %33, align 1, !tbaa !2449
  %242 = lshr i32 %223, 31
  %243 = xor i32 %240, %242
  %244 = add nuw nsw i32 %243, %240
  %245 = icmp eq i32 %244, 2
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %39, align 1, !tbaa !2450
  %247 = add i64 %220, 15
  store i64 %247, i64* %PC, align 8
  store i32 %224, i32* %222, align 4
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, -76
  store i64 %249, i64* %PC, align 8, !tbaa !2428
  br label %block_400ba3

block_400c05:                                     ; preds = %block_400c15, %block_400bf4
  %250 = phi i64 [ %.pre4, %block_400bf4 ], [ %148, %block_400c15 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400bf4 ], [ %116, %block_400c15 ]
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -8216
  %253 = add i64 %250, 10
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %252 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = add i32 %255, -100000
  %257 = icmp ult i32 %255, 100000
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %15, align 1, !tbaa !2432
  %259 = and i32 %256, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %22, align 1, !tbaa !2446
  %264 = xor i32 %255, %256
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %27, align 1, !tbaa !2447
  %268 = icmp eq i32 %256, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %30, align 1, !tbaa !2448
  %270 = lshr i32 %256, 31
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %33, align 1, !tbaa !2449
  %272 = lshr i32 %255, 31
  %273 = xor i32 %270, %272
  %274 = add nuw nsw i32 %273, %272
  %275 = icmp eq i32 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %39, align 1, !tbaa !2450
  %277 = icmp ne i8 %271, 0
  %278 = xor i1 %277, %275
  %.v5 = select i1 %278, i64 16, i64 48
  %279 = add i64 %250, %.v5
  store i64 %279, i64* %PC, align 8, !tbaa !2428
  br i1 %278, label %block_400c15, label %block_400c35

block_400ba3:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400b80
  %280 = phi i64 [ %.pre, %block_400b80 ], [ %249, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400b80 ], [ %183, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -8212
  %283 = add i64 %280, 10
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, -2047
  %287 = icmp ult i32 %285, 2047
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %15, align 1, !tbaa !2432
  %289 = and i32 %286, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #8
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %22, align 1, !tbaa !2446
  %294 = xor i32 %285, 16
  %295 = xor i32 %294, %286
  %296 = lshr i32 %295, 4
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  store i8 %298, i8* %27, align 1, !tbaa !2447
  %299 = icmp eq i32 %286, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %30, align 1, !tbaa !2448
  %301 = lshr i32 %286, 31
  %302 = trunc i32 %301 to i8
  store i8 %302, i8* %33, align 1, !tbaa !2449
  %303 = lshr i32 %285, 31
  %304 = xor i32 %301, %303
  %305 = add nuw nsw i32 %304, %303
  %306 = icmp eq i32 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %39, align 1, !tbaa !2450
  %308 = icmp ne i8 %302, 0
  %309 = xor i1 %308, %306
  %.v = select i1 %309, i64 16, i64 81
  %310 = add i64 %280, %.v
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  br i1 %309, label %block_400bb3, label %block_400bf4
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400470:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = sub i64 %9, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2451
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2451
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2451
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2451
  store i8 0, i8* %17, align 1, !tbaa !2451
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_4004a8, label %block_400493

block_400493:                                     ; preds = %block_400470
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %35 = add i64 %34, 21
  store i64 %35, i64* %PC, align 8, !tbaa !2428
  br label %block_4004a8

block_4004a8:                                     ; preds = %block_400493, %block_400470
  %36 = phi i64 [ %35, %block_400493 ], [ %34, %block_400470 ]
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %8, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %36, 2
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %6 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %7, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_40082f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_40082f

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %252, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %14

block_4007f6:                                     ; preds = %block_400566
  %15 = add i64 %252, -12
  store i64 4196349, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -12
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 3
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %19, -781
  %25 = add i64 %19, 8
  %26 = load i64, i64* %4, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %25, i64* %28, align 8
  store i64 %27, i64* %4, align 8, !tbaa !2428
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %29 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %24, %struct.Memory* %MEMORY.0)
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 4
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -5
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %5, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %6, align 1, !tbaa !2446
  %45 = xor i64 %35, %36
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %7, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %8, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %9, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %10, align 1, !tbaa !2450
  %58 = add i64 %32, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %34, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %59 = add i64 %252, -12
  store i64 4196849, i64* %PC, align 8
  %60 = inttoptr i64 %59 to i32*
  store i32 24, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -12
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 3
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  store i64 %67, i64* %RDI, align 8, !tbaa !2428
  %68 = add i64 %63, -1281
  %69 = add i64 %63, 8
  %70 = load i64, i64* %4, align 8, !tbaa !2428
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %72, align 8
  store i64 %71, i64* %4, align 8, !tbaa !2428
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  %73 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %68, %struct.Memory* %MEMORY.0)
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -8
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %79, 4
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = icmp ugt i64 %79, -5
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %5, align 1, !tbaa !2432
  %83 = trunc i64 %80 to i32
  %84 = and i32 %83, 255
  %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #8
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  store i8 %88, i8* %6, align 1, !tbaa !2446
  %89 = xor i64 %79, %80
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %7, align 1, !tbaa !2447
  %93 = icmp eq i64 %80, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %8, align 1, !tbaa !2448
  %95 = lshr i64 %80, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %9, align 1, !tbaa !2449
  %97 = lshr i64 %79, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %10, align 1, !tbaa !2450
  %102 = add i64 %76, 15
  store i64 %102, i64* %PC, align 8
  store i64 %80, i64* %78, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %103 = add i64 %252, -12
  store i64 4197099, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 29, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %106

block_4005d0:                                     ; preds = %block_400566
  %107 = add i64 %252, -12
  store i64 4195799, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 3, i32* %108, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %110

block_4007c4:                                     ; preds = %block_400566
  %111 = add i64 %252, -12
  store i64 4196299, i64* %PC, align 8
  %112 = inttoptr i64 %111 to i32*
  store i32 13, i32* %112, align 4
  %113 = load i64, i64* %PC, align 8
  %114 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %114

block_4008be:                                     ; preds = %block_400566
  %115 = add i64 %252, -12
  store i64 4196549, i64* %PC, align 8
  %116 = inttoptr i64 %115 to i32*
  store i32 18, i32* %116, align 4
  %117 = load i64, i64* %PC, align 8
  %118 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %117, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %118

block_40059e:                                     ; preds = %block_400566
  %119 = add i64 %252, -12
  store i64 4195749, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 2, i32* %120, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %122

block_400698:                                     ; preds = %block_400566
  %123 = add i64 %252, -12
  store i64 4195999, i64* %PC, align 8
  %124 = inttoptr i64 %123 to i32*
  store i32 7, i32* %124, align 4
  %125 = load i64, i64* %PC, align 8
  %126 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %125, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %126

block_400792:                                     ; preds = %block_400566
  %127 = add i64 %252, -12
  store i64 4196249, i64* %PC, align 8
  %128 = inttoptr i64 %127 to i32*
  store i32 12, i32* %128, align 4
  %129 = load i64, i64* %PC, align 8
  %130 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %129, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %130

block_40088c:                                     ; preds = %block_400566
  %131 = add i64 %252, -12
  store i64 4196499, i64* %PC, align 8
  %132 = inttoptr i64 %131 to i32*
  store i32 17, i32* %132, align 4
  %133 = load i64, i64* %PC, align 8
  %134 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %133, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %134

block_400986:                                     ; preds = %block_400566
  %135 = add i64 %252, -12
  store i64 4196749, i64* %PC, align 8
  %136 = inttoptr i64 %135 to i32*
  store i32 22, i32* %136, align 4
  %137 = load i64, i64* %PC, align 8
  %138 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %137, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %138

block_400a80:                                     ; preds = %block_400566
  %139 = add i64 %252, -12
  store i64 4196999, i64* %PC, align 8
  %140 = inttoptr i64 %139 to i32*
  store i32 27, i32* %140, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %141, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %142

block_4008f0:                                     ; preds = %block_400566
  %143 = add i64 %252, -12
  store i64 4196599, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 19, i32* %144, align 4
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -12
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %147, -1031
  %153 = add i64 %147, 8
  %154 = load i64, i64* %4, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %4, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %MEMORY.0)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %163, 4
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ugt i64 %163, -5
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %5, align 1, !tbaa !2432
  %167 = trunc i64 %164 to i32
  %168 = and i32 %167, 255
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #8
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %6, align 1, !tbaa !2446
  %173 = xor i64 %163, %164
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  store i8 %176, i8* %7, align 1, !tbaa !2447
  %177 = icmp eq i64 %164, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %8, align 1, !tbaa !2448
  %179 = lshr i64 %164, 63
  %180 = trunc i64 %179 to i8
  store i8 %180, i8* %9, align 1, !tbaa !2449
  %181 = lshr i64 %163, 63
  %182 = xor i64 %179, %181
  %183 = add nuw nsw i64 %182, %179
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %10, align 1, !tbaa !2450
  %186 = add i64 %160, 15
  store i64 %186, i64* %PC, align 8
  store i64 %164, i64* %162, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %187 = add i64 %252, -12
  store i64 4195699, i64* %PC, align 8
  %188 = inttoptr i64 %187 to i32*
  store i32 1, i32* %188, align 4
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -12
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RDI, align 8, !tbaa !2428
  %196 = add i64 %191, -131
  %197 = add i64 %191, 8
  %198 = load i64, i64* %4, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200, align 8
  store i64 %199, i64* %4, align 8, !tbaa !2428
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %201 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %196, %struct.Memory* %MEMORY.0)
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %207, 4
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ugt i64 %207, -5
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %5, align 1, !tbaa !2432
  %211 = trunc i64 %208 to i32
  %212 = and i32 %211, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %6, align 1, !tbaa !2446
  %217 = xor i64 %207, %208
  %218 = lshr i64 %217, 4
  %219 = trunc i64 %218 to i8
  %220 = and i8 %219, 1
  store i8 %220, i8* %7, align 1, !tbaa !2447
  %221 = icmp eq i64 %208, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %8, align 1, !tbaa !2448
  %223 = lshr i64 %208, 63
  %224 = trunc i64 %223 to i8
  store i8 %224, i8* %9, align 1, !tbaa !2449
  %225 = lshr i64 %207, 63
  %226 = xor i64 %223, %225
  %227 = add nuw nsw i64 %226, %223
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %10, align 1, !tbaa !2450
  %230 = add i64 %204, 15
  store i64 %230, i64* %PC, align 8
  store i64 %208, i64* %206, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %231 = add i64 %252, -12
  store i64 4195949, i64* %PC, align 8
  %232 = inttoptr i64 %231 to i32*
  store i32 6, i32* %232, align 4
  %233 = load i64, i64* %PC, align 8
  %234 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %233, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %234

block_400566:                                     ; preds = %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_4008f0, %block_4009ea, %block_4007f6, %block_40082f
  %.sink28 = phi i64 [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 1201, %block_4009ea ], [ 701, %block_4007f6 ], [ 751, %block_40082f ]
  %MEMORY.0 = phi %struct.Memory* [ %469, %block_40072e ], [ %383, %block_400634 ], [ %339, %block_400ab2 ], [ %295, %block_4009b8 ], [ %201, %block_40056c ], [ %157, %block_4008f0 ], [ %73, %block_4009ea ], [ %29, %block_4007f6 ], [ %425, %block_40082f ]
  %235 = bitcast i64* %RAX to i32**
  %236 = load i32*, i32** %235, align 8
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC, align 8
  %239 = load i32, i32* %236, align 4
  %240 = sext i32 %239 to i64
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = shl nsw i64 %240, 3
  %242 = add i64 %241, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %243 = add i64 %237, 11
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -40
  %248 = add i64 %237, 15
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %249, align 8
  %250 = load i64, i64* %PC, align 8
  %251 = sub i64 %250, %.sink28
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -40
  %254 = add i64 %251, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  switch i64 %256, label %521 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196292, label %block_4007c4
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %257 = add i64 %252, -12
  store i64 4196199, i64* %PC, align 8
  %258 = inttoptr i64 %257 to i32*
  store i32 11, i32* %258, align 4
  %259 = load i64, i64* %PC, align 8
  %260 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %259, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %260

block_40085a:                                     ; preds = %block_400566
  %261 = add i64 %252, -12
  store i64 4196449, i64* %PC, align 8
  %262 = inttoptr i64 %261 to i32*
  store i32 16, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %263, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %264

block_400954:                                     ; preds = %block_400566
  %265 = add i64 %252, -12
  store i64 4196699, i64* %PC, align 8
  %266 = inttoptr i64 %265 to i32*
  store i32 21, i32* %266, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %267, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %268

block_400559:                                     ; preds = %block_400566
  %269 = add i64 %252, -12
  store i64 4195680, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 0, i32* %270, align 4
  %271 = load i64, i64* %PC, align 8
  %272 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %271, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %272

block_400a4e:                                     ; preds = %block_400566
  %273 = add i64 %252, -12
  store i64 4196949, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 26, i32* %274, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %276

block_400b48:                                     ; preds = %block_400566
  %277 = add i64 %252, -12
  store i64 4197199, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 31, i32* %278, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %280

block_4009b8:                                     ; preds = %block_400566
  %281 = add i64 %252, -12
  store i64 4196799, i64* %PC, align 8
  %282 = inttoptr i64 %281 to i32*
  store i32 23, i32* %282, align 4
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -12
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %284 to i32*
  %288 = load i32, i32* %287, align 4
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RDI, align 8, !tbaa !2428
  %290 = add i64 %285, -1231
  %291 = add i64 %285, 8
  %292 = load i64, i64* %4, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %4, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %290, %struct.Memory* %MEMORY.0)
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -8
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = add i64 %301, 4
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = icmp ugt i64 %301, -5
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %5, align 1, !tbaa !2432
  %305 = trunc i64 %302 to i32
  %306 = and i32 %305, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #8
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %6, align 1, !tbaa !2446
  %311 = xor i64 %301, %302
  %312 = lshr i64 %311, 4
  %313 = trunc i64 %312 to i8
  %314 = and i8 %313, 1
  store i8 %314, i8* %7, align 1, !tbaa !2447
  %315 = icmp eq i64 %302, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %8, align 1, !tbaa !2448
  %317 = lshr i64 %302, 63
  %318 = trunc i64 %317 to i8
  store i8 %318, i8* %9, align 1, !tbaa !2449
  %319 = lshr i64 %301, 63
  %320 = xor i64 %317, %319
  %321 = add nuw nsw i64 %320, %317
  %322 = icmp eq i64 %321, 2
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %10, align 1, !tbaa !2450
  %324 = add i64 %298, 15
  store i64 %324, i64* %PC, align 8
  store i64 %302, i64* %300, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %325 = add i64 %252, -12
  store i64 4197049, i64* %PC, align 8
  %326 = inttoptr i64 %325 to i32*
  store i32 28, i32* %326, align 4
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -12
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331, align 4
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RDI, align 8, !tbaa !2428
  %334 = add i64 %329, -1481
  %335 = add i64 %329, 8
  %336 = load i64, i64* %4, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338, align 8
  store i64 %337, i64* %4, align 8, !tbaa !2428
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  %339 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %334, %struct.Memory* %MEMORY.0)
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -8
  %342 = load i64, i64* %PC, align 8
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = add i64 %345, 4
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = icmp ugt i64 %345, -5
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %5, align 1, !tbaa !2432
  %349 = trunc i64 %346 to i32
  %350 = and i32 %349, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #8
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %6, align 1, !tbaa !2446
  %355 = xor i64 %345, %346
  %356 = lshr i64 %355, 4
  %357 = trunc i64 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %7, align 1, !tbaa !2447
  %359 = icmp eq i64 %346, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %8, align 1, !tbaa !2448
  %361 = lshr i64 %346, 63
  %362 = trunc i64 %361 to i8
  store i8 %362, i8* %9, align 1, !tbaa !2449
  %363 = lshr i64 %345, 63
  %364 = xor i64 %361, %363
  %365 = add nuw nsw i64 %364, %361
  %366 = icmp eq i64 %365, 2
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %10, align 1, !tbaa !2450
  %368 = add i64 %342, 15
  store i64 %368, i64* %PC, align 8
  store i64 %346, i64* %344, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %369 = add i64 %252, -12
  store i64 4195899, i64* %PC, align 8
  %370 = inttoptr i64 %369 to i32*
  store i32 5, i32* %370, align 4
  %371 = load i64, i64* %RBP, align 8
  %372 = add i64 %371, -12
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RDI, align 8, !tbaa !2428
  %378 = add i64 %373, -331
  %379 = add i64 %373, 8
  %380 = load i64, i64* %4, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382, align 8
  store i64 %381, i64* %4, align 8, !tbaa !2428
  store i64 %378, i64* %PC, align 8, !tbaa !2428
  %383 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %378, %struct.Memory* %MEMORY.0)
  %384 = load i64, i64* %RBP, align 8
  %385 = add i64 %384, -8
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %385 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = add i64 %389, 4
  store i64 %390, i64* %RCX, align 8, !tbaa !2428
  %391 = icmp ugt i64 %389, -5
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %5, align 1, !tbaa !2432
  %393 = trunc i64 %390 to i32
  %394 = and i32 %393, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %6, align 1, !tbaa !2446
  %399 = xor i64 %389, %390
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  store i8 %402, i8* %7, align 1, !tbaa !2447
  %403 = icmp eq i64 %390, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %8, align 1, !tbaa !2448
  %405 = lshr i64 %390, 63
  %406 = trunc i64 %405 to i8
  store i8 %406, i8* %9, align 1, !tbaa !2449
  %407 = lshr i64 %389, 63
  %408 = xor i64 %405, %407
  %409 = add nuw nsw i64 %408, %405
  %410 = icmp eq i64 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %10, align 1, !tbaa !2450
  %412 = add i64 %386, 15
  store i64 %412, i64* %PC, align 8
  store i64 %390, i64* %388, align 8
  br label %block_400566

block_40082f:                                     ; preds = %block_400828, %3
  %413 = phi i64 [ %1, %3 ], [ %.pre, %block_400828 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400828 ]
  %414 = load i64, i64* %RBP, align 8
  %415 = add i64 %414, -12
  %416 = add i64 %413, 3
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RDI, align 8, !tbaa !2428
  %420 = add i64 %413, -831
  %421 = add i64 %413, 8
  %422 = load i64, i64* %4, align 8, !tbaa !2428
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %421, i64* %424, align 8
  store i64 %423, i64* %4, align 8, !tbaa !2428
  store i64 %420, i64* %PC, align 8, !tbaa !2428
  %425 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %420, %struct.Memory* %MEMORY.1)
  %426 = load i64, i64* %RBP, align 8
  %427 = add i64 %426, -8
  %428 = load i64, i64* %PC, align 8
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %427 to i64*
  %431 = load i64, i64* %430, align 8
  store i64 %431, i64* %RAX, align 8, !tbaa !2428
  %432 = add i64 %431, 4
  store i64 %432, i64* %RCX, align 8, !tbaa !2428
  %433 = icmp ugt i64 %431, -5
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %5, align 1, !tbaa !2432
  %435 = trunc i64 %432 to i32
  %436 = and i32 %435, 255
  %437 = tail call i32 @llvm.ctpop.i32(i32 %436) #8
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  %440 = xor i8 %439, 1
  store i8 %440, i8* %6, align 1, !tbaa !2446
  %441 = xor i64 %431, %432
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  store i8 %444, i8* %7, align 1, !tbaa !2447
  %445 = icmp eq i64 %432, 0
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %8, align 1, !tbaa !2448
  %447 = lshr i64 %432, 63
  %448 = trunc i64 %447 to i8
  store i8 %448, i8* %9, align 1, !tbaa !2449
  %449 = lshr i64 %431, 63
  %450 = xor i64 %447, %449
  %451 = add nuw nsw i64 %450, %447
  %452 = icmp eq i64 %451, 2
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %10, align 1, !tbaa !2450
  %454 = add i64 %428, 15
  store i64 %454, i64* %PC, align 8
  store i64 %432, i64* %430, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %455 = add i64 %252, -12
  store i64 4196149, i64* %PC, align 8
  %456 = inttoptr i64 %455 to i32*
  store i32 10, i32* %456, align 4
  %457 = load i64, i64* %RBP, align 8
  %458 = add i64 %457, -12
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461, align 4
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RDI, align 8, !tbaa !2428
  %464 = add i64 %459, -581
  %465 = add i64 %459, 8
  %466 = load i64, i64* %4, align 8, !tbaa !2428
  %467 = add i64 %466, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %465, i64* %468, align 8
  store i64 %467, i64* %4, align 8, !tbaa !2428
  store i64 %464, i64* %PC, align 8, !tbaa !2428
  %469 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %464, %struct.Memory* %MEMORY.0)
  %470 = load i64, i64* %RBP, align 8
  %471 = add i64 %470, -8
  %472 = load i64, i64* %PC, align 8
  %473 = add i64 %472, 4
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %471 to i64*
  %475 = load i64, i64* %474, align 8
  store i64 %475, i64* %RAX, align 8, !tbaa !2428
  %476 = add i64 %475, 4
  store i64 %476, i64* %RCX, align 8, !tbaa !2428
  %477 = icmp ugt i64 %475, -5
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %5, align 1, !tbaa !2432
  %479 = trunc i64 %476 to i32
  %480 = and i32 %479, 255
  %481 = tail call i32 @llvm.ctpop.i32(i32 %480) #8
  %482 = trunc i32 %481 to i8
  %483 = and i8 %482, 1
  %484 = xor i8 %483, 1
  store i8 %484, i8* %6, align 1, !tbaa !2446
  %485 = xor i64 %475, %476
  %486 = lshr i64 %485, 4
  %487 = trunc i64 %486 to i8
  %488 = and i8 %487, 1
  store i8 %488, i8* %7, align 1, !tbaa !2447
  %489 = icmp eq i64 %476, 0
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %8, align 1, !tbaa !2448
  %491 = lshr i64 %476, 63
  %492 = trunc i64 %491 to i8
  store i8 %492, i8* %9, align 1, !tbaa !2449
  %493 = lshr i64 %475, 63
  %494 = xor i64 %491, %493
  %495 = add nuw nsw i64 %494, %491
  %496 = icmp eq i64 %495, 2
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %10, align 1, !tbaa !2450
  %498 = add i64 %472, 15
  store i64 %498, i64* %PC, align 8
  store i64 %476, i64* %474, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %499 = add i64 %252, -12
  store i64 4196399, i64* %PC, align 8
  %500 = inttoptr i64 %499 to i32*
  store i32 15, i32* %500, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40082f

block_4006ca:                                     ; preds = %block_400566
  %501 = add i64 %252, -12
  store i64 4196049, i64* %PC, align 8
  %502 = inttoptr i64 %501 to i32*
  store i32 8, i32* %502, align 4
  %503 = load i64, i64* %PC, align 8
  %504 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %503, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %504

block_400922:                                     ; preds = %block_400566
  %505 = add i64 %252, -12
  store i64 4196649, i64* %PC, align 8
  %506 = inttoptr i64 %505 to i32*
  store i32 20, i32* %506, align 4
  %507 = load i64, i64* %PC, align 8
  %508 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %507, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %508

block_400a1c:                                     ; preds = %block_400566
  %509 = add i64 %252, -12
  store i64 4196899, i64* %PC, align 8
  %510 = inttoptr i64 %509 to i32*
  store i32 25, i32* %510, align 4
  %511 = load i64, i64* %PC, align 8
  %512 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %511, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %512

block_400b16:                                     ; preds = %block_400566
  %513 = add i64 %252, -12
  store i64 4197149, i64* %PC, align 8
  %514 = inttoptr i64 %513 to i32*
  store i32 30, i32* %514, align 4
  %515 = load i64, i64* %PC, align 8
  %516 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %515, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %516

block_400602:                                     ; preds = %block_400566
  %517 = add i64 %252, -12
  store i64 4195849, i64* %PC, align 8
  %518 = inttoptr i64 %517 to i32*
  store i32 4, i32* %518, align 4
  %519 = load i64, i64* %PC, align 8
  %520 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %519, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %520

; <label>:521:                                    ; preds = %block_400566
  %522 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %256, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %522
}

; Function Attrs: noinline
define %struct.Memory* @sub_400440_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400440:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)) to i8), i8* %10, align 1, !tbaa !2432
  %11 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)) to i32), i32 255)) #8
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !2446
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64))), i64 4) to i8), i8 1), i8* %16, align 1, !tbaa !2447
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0) to i8), i8* %17, align 1, !tbaa !2448
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 63) to i8), i8* %18, align 1, !tbaa !2449
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %19, align 1, !tbaa !2450
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %20 = add i64 %9, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), i64 39, i64 16)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), label %block_400468, label %block_400451

block_400451:                                     ; preds = %block_400440
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %10, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2447
  %21 = add i64 %9, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %21, i64* %PC, align 8, !tbaa !2428
  br label %block_400468

block_400468:                                     ; preds = %block_400451, %block_400440
  %22 = phi i64 [ %21, %block_400451 ], [ %20, %block_400440 ]
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %8, align 8
  store i64 %24, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %22, 2
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %6 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %PC, align 8, !tbaa !2428
  %28 = add i64 %6, 8
  store i64 %28, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009f1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4009f1

block_4006fc:                                     ; preds = %block_400566
  %11 = add i64 %248, -12
  store i64 4196099, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 9, i32* %12, align 4
  %13 = load i64, i64* %PC, align 8
  %14 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %13, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %14

block_4007f6:                                     ; preds = %block_400566
  %15 = add i64 %248, -12
  store i64 4196349, i64* %PC, align 8
  %16 = inttoptr i64 %15 to i32*
  store i32 14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -12
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 3
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %19, -781
  %25 = add i64 %19, 8
  %26 = load i64, i64* %4, align 8, !tbaa !2428
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %25, i64* %28, align 8
  store i64 %27, i64* %4, align 8, !tbaa !2428
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %29 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %24, %struct.Memory* %MEMORY.1)
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 4
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -5
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %5, align 1, !tbaa !2432
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %6, align 1, !tbaa !2446
  %45 = xor i64 %35, %36
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %7, align 1, !tbaa !2447
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %8, align 1, !tbaa !2448
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %9, align 1, !tbaa !2449
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %10, align 1, !tbaa !2450
  %58 = add i64 %32, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %34, align 8
  br label %block_400566

block_4009f1:                                     ; preds = %block_4009ea, %3
  %59 = phi i64 [ %1, %3 ], [ %.pre, %block_4009ea ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4009ea ]
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = add i64 %59, 3
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %59, -1281
  %67 = add i64 %59, 8
  %68 = load i64, i64* %4, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %4, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %MEMORY.0)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = add i64 %77, 4
  store i64 %78, i64* %RCX, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -5
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %5, align 1, !tbaa !2432
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %6, align 1, !tbaa !2446
  %87 = xor i64 %77, %78
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %7, align 1, !tbaa !2447
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %8, align 1, !tbaa !2448
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %9, align 1, !tbaa !2449
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %10, align 1, !tbaa !2450
  %100 = add i64 %74, 15
  store i64 %100, i64* %PC, align 8
  store i64 %78, i64* %76, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %101 = add i64 %248, -12
  store i64 4196849, i64* %PC, align 8
  %102 = inttoptr i64 %101 to i32*
  store i32 24, i32* %102, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4009f1

block_400ae4:                                     ; preds = %block_400566
  %103 = add i64 %248, -12
  store i64 4197099, i64* %PC, align 8
  %104 = inttoptr i64 %103 to i32*
  store i32 29, i32* %104, align 4
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @sub_400aeb(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %106

block_4005d0:                                     ; preds = %block_400566
  %107 = add i64 %248, -12
  store i64 4195799, i64* %PC, align 8
  %108 = inttoptr i64 %107 to i32*
  store i32 3, i32* %108, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %110

block_4007c4:                                     ; preds = %block_400566
  %111 = add i64 %248, -12
  store i64 4196299, i64* %PC, align 8
  %112 = inttoptr i64 %111 to i32*
  store i32 13, i32* %112, align 4
  %113 = load i64, i64* %PC, align 8
  %114 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %114

block_4008be:                                     ; preds = %block_400566
  %115 = add i64 %248, -12
  store i64 4196549, i64* %PC, align 8
  %116 = inttoptr i64 %115 to i32*
  store i32 18, i32* %116, align 4
  %117 = load i64, i64* %PC, align 8
  %118 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %117, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %118

block_40059e:                                     ; preds = %block_400566
  %119 = add i64 %248, -12
  store i64 4195749, i64* %PC, align 8
  %120 = inttoptr i64 %119 to i32*
  store i32 2, i32* %120, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = tail call %struct.Memory* @sub_4005a5(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %122

block_400698:                                     ; preds = %block_400566
  %123 = add i64 %248, -12
  store i64 4195999, i64* %PC, align 8
  %124 = inttoptr i64 %123 to i32*
  store i32 7, i32* %124, align 4
  %125 = load i64, i64* %PC, align 8
  %126 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %125, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %126

block_400792:                                     ; preds = %block_400566
  %127 = add i64 %248, -12
  store i64 4196249, i64* %PC, align 8
  %128 = inttoptr i64 %127 to i32*
  store i32 12, i32* %128, align 4
  %129 = load i64, i64* %PC, align 8
  %130 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_40088c:                                     ; preds = %block_400566
  %131 = add i64 %248, -12
  store i64 4196499, i64* %PC, align 8
  %132 = inttoptr i64 %131 to i32*
  store i32 17, i32* %132, align 4
  %133 = load i64, i64* %PC, align 8
  %134 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %133, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %134

block_400986:                                     ; preds = %block_400566
  %135 = add i64 %248, -12
  store i64 4196749, i64* %PC, align 8
  %136 = inttoptr i64 %135 to i32*
  store i32 22, i32* %136, align 4
  %137 = load i64, i64* %PC, align 8
  %138 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %137, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %138

block_400a80:                                     ; preds = %block_400566
  %139 = add i64 %248, -12
  store i64 4196999, i64* %PC, align 8
  %140 = inttoptr i64 %139 to i32*
  store i32 27, i32* %140, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %141, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %142

block_4008f0:                                     ; preds = %block_400566
  %143 = add i64 %248, -12
  store i64 4196599, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 19, i32* %144, align 4
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -12
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %147, -1031
  %153 = add i64 %147, 8
  %154 = load i64, i64* %4, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %4, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %MEMORY.1)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %163, 4
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ugt i64 %163, -5
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %5, align 1, !tbaa !2432
  %167 = trunc i64 %164 to i32
  %168 = and i32 %167, 255
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #8
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %6, align 1, !tbaa !2446
  %173 = xor i64 %163, %164
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  store i8 %176, i8* %7, align 1, !tbaa !2447
  %177 = icmp eq i64 %164, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %8, align 1, !tbaa !2448
  %179 = lshr i64 %164, 63
  %180 = trunc i64 %179 to i8
  store i8 %180, i8* %9, align 1, !tbaa !2449
  %181 = lshr i64 %163, 63
  %182 = xor i64 %179, %181
  %183 = add nuw nsw i64 %182, %179
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %10, align 1, !tbaa !2450
  %186 = add i64 %160, 15
  store i64 %186, i64* %PC, align 8
  store i64 %164, i64* %162, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %187 = add i64 %248, -12
  store i64 4195699, i64* %PC, align 8
  %188 = inttoptr i64 %187 to i32*
  store i32 1, i32* %188, align 4
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -12
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RDI, align 8, !tbaa !2428
  %196 = add i64 %191, -131
  %197 = add i64 %191, 8
  %198 = load i64, i64* %4, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200, align 8
  store i64 %199, i64* %4, align 8, !tbaa !2428
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %201 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %196, %struct.Memory* %MEMORY.1)
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %207, 4
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ugt i64 %207, -5
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %5, align 1, !tbaa !2432
  %211 = trunc i64 %208 to i32
  %212 = and i32 %211, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %6, align 1, !tbaa !2446
  %217 = xor i64 %207, %208
  %218 = lshr i64 %217, 4
  %219 = trunc i64 %218 to i8
  %220 = and i8 %219, 1
  store i8 %220, i8* %7, align 1, !tbaa !2447
  %221 = icmp eq i64 %208, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %8, align 1, !tbaa !2448
  %223 = lshr i64 %208, 63
  %224 = trunc i64 %223 to i8
  store i8 %224, i8* %9, align 1, !tbaa !2449
  %225 = lshr i64 %207, 63
  %226 = xor i64 %223, %225
  %227 = add nuw nsw i64 %226, %223
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %10, align 1, !tbaa !2450
  %230 = add i64 %204, 15
  store i64 %230, i64* %PC, align 8
  store i64 %208, i64* %206, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_4008f0, %block_4007f6, %block_4009f1
  %.sink29 = phi i64 [ 501, %block_40072e ], [ 251, %block_400634 ], [ 1401, %block_400ab2 ], [ 1151, %block_4009b8 ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1201, %block_4009f1 ]
  %MEMORY.1 = phi %struct.Memory* [ %427, %block_40072e ], [ %383, %block_400634 ], [ %339, %block_400ab2 ], [ %295, %block_4009b8 ], [ %201, %block_40056c ], [ %157, %block_4008f0 ], [ %29, %block_4007f6 ], [ %71, %block_4009f1 ]
  %231 = bitcast i64* %RAX to i32**
  %232 = load i32*, i32** %231, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC, align 8
  %235 = load i32, i32* %232, align 4
  %236 = sext i32 %235 to i64
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = shl nsw i64 %236, 3
  %238 = add i64 %237, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %239 = add i64 %233, 11
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -40
  %244 = add i64 %233, 15
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  store i64 %241, i64* %245, align 8
  %246 = load i64, i64* %PC, align 8
  %247 = sub i64 %246, %.sink29
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -40
  %250 = add i64 %247, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  store i64 %252, i64* %PC, align 8, !tbaa !2428
  switch i64 %252, label %481 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196292, label %block_4007c4
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400666:                                     ; preds = %block_400566
  %253 = add i64 %248, -12
  store i64 4195949, i64* %PC, align 8
  %254 = inttoptr i64 %253 to i32*
  store i32 6, i32* %254, align 4
  %255 = load i64, i64* %PC, align 8
  %256 = tail call %struct.Memory* @sub_40066d(%struct.State* nonnull %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_400760:                                     ; preds = %block_400566
  %257 = add i64 %248, -12
  store i64 4196199, i64* %PC, align 8
  %258 = inttoptr i64 %257 to i32*
  store i32 11, i32* %258, align 4
  %259 = load i64, i64* %PC, align 8
  %260 = tail call %struct.Memory* @sub_400767(%struct.State* nonnull %0, i64 %259, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %260

block_40085a:                                     ; preds = %block_400566
  %261 = add i64 %248, -12
  store i64 4196449, i64* %PC, align 8
  %262 = inttoptr i64 %261 to i32*
  store i32 16, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %263, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %264

block_400954:                                     ; preds = %block_400566
  %265 = add i64 %248, -12
  store i64 4196699, i64* %PC, align 8
  %266 = inttoptr i64 %265 to i32*
  store i32 21, i32* %266, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %267, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %268

block_400559:                                     ; preds = %block_400566
  %269 = add i64 %248, -12
  store i64 4195680, i64* %PC, align 8
  %270 = inttoptr i64 %269 to i32*
  store i32 0, i32* %270, align 4
  %271 = load i64, i64* %PC, align 8
  %272 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %271, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %272

block_400a4e:                                     ; preds = %block_400566
  %273 = add i64 %248, -12
  store i64 4196949, i64* %PC, align 8
  %274 = inttoptr i64 %273 to i32*
  store i32 26, i32* %274, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %276

block_400b48:                                     ; preds = %block_400566
  %277 = add i64 %248, -12
  store i64 4197199, i64* %PC, align 8
  %278 = inttoptr i64 %277 to i32*
  store i32 31, i32* %278, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %279, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %280

block_4009b8:                                     ; preds = %block_400566
  %281 = add i64 %248, -12
  store i64 4196799, i64* %PC, align 8
  %282 = inttoptr i64 %281 to i32*
  store i32 23, i32* %282, align 4
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -12
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %284 to i32*
  %288 = load i32, i32* %287, align 4
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RDI, align 8, !tbaa !2428
  %290 = add i64 %285, -1231
  %291 = add i64 %285, 8
  %292 = load i64, i64* %4, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %4, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %290, %struct.Memory* %MEMORY.1)
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -8
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = add i64 %301, 4
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = icmp ugt i64 %301, -5
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %5, align 1, !tbaa !2432
  %305 = trunc i64 %302 to i32
  %306 = and i32 %305, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #8
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %6, align 1, !tbaa !2446
  %311 = xor i64 %301, %302
  %312 = lshr i64 %311, 4
  %313 = trunc i64 %312 to i8
  %314 = and i8 %313, 1
  store i8 %314, i8* %7, align 1, !tbaa !2447
  %315 = icmp eq i64 %302, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %8, align 1, !tbaa !2448
  %317 = lshr i64 %302, 63
  %318 = trunc i64 %317 to i8
  store i8 %318, i8* %9, align 1, !tbaa !2449
  %319 = lshr i64 %301, 63
  %320 = xor i64 %317, %319
  %321 = add nuw nsw i64 %320, %317
  %322 = icmp eq i64 %321, 2
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %10, align 1, !tbaa !2450
  %324 = add i64 %298, 15
  store i64 %324, i64* %PC, align 8
  store i64 %302, i64* %300, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %325 = add i64 %248, -12
  store i64 4197049, i64* %PC, align 8
  %326 = inttoptr i64 %325 to i32*
  store i32 28, i32* %326, align 4
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -12
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331, align 4
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RDI, align 8, !tbaa !2428
  %334 = add i64 %329, -1481
  %335 = add i64 %329, 8
  %336 = load i64, i64* %4, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338, align 8
  store i64 %337, i64* %4, align 8, !tbaa !2428
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  %339 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %334, %struct.Memory* %MEMORY.1)
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -8
  %342 = load i64, i64* %PC, align 8
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = add i64 %345, 4
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = icmp ugt i64 %345, -5
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %5, align 1, !tbaa !2432
  %349 = trunc i64 %346 to i32
  %350 = and i32 %349, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #8
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %6, align 1, !tbaa !2446
  %355 = xor i64 %345, %346
  %356 = lshr i64 %355, 4
  %357 = trunc i64 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %7, align 1, !tbaa !2447
  %359 = icmp eq i64 %346, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %8, align 1, !tbaa !2448
  %361 = lshr i64 %346, 63
  %362 = trunc i64 %361 to i8
  store i8 %362, i8* %9, align 1, !tbaa !2449
  %363 = lshr i64 %345, 63
  %364 = xor i64 %361, %363
  %365 = add nuw nsw i64 %364, %361
  %366 = icmp eq i64 %365, 2
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %10, align 1, !tbaa !2450
  %368 = add i64 %342, 15
  store i64 %368, i64* %PC, align 8
  store i64 %346, i64* %344, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %369 = add i64 %248, -12
  store i64 4195899, i64* %PC, align 8
  %370 = inttoptr i64 %369 to i32*
  store i32 5, i32* %370, align 4
  %371 = load i64, i64* %RBP, align 8
  %372 = add i64 %371, -12
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RDI, align 8, !tbaa !2428
  %378 = add i64 %373, -331
  %379 = add i64 %373, 8
  %380 = load i64, i64* %4, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382, align 8
  store i64 %381, i64* %4, align 8, !tbaa !2428
  store i64 %378, i64* %PC, align 8, !tbaa !2428
  %383 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %378, %struct.Memory* %MEMORY.1)
  %384 = load i64, i64* %RBP, align 8
  %385 = add i64 %384, -8
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %385 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = add i64 %389, 4
  store i64 %390, i64* %RCX, align 8, !tbaa !2428
  %391 = icmp ugt i64 %389, -5
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %5, align 1, !tbaa !2432
  %393 = trunc i64 %390 to i32
  %394 = and i32 %393, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %6, align 1, !tbaa !2446
  %399 = xor i64 %389, %390
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  store i8 %402, i8* %7, align 1, !tbaa !2447
  %403 = icmp eq i64 %390, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %8, align 1, !tbaa !2448
  %405 = lshr i64 %390, 63
  %406 = trunc i64 %405 to i8
  store i8 %406, i8* %9, align 1, !tbaa !2449
  %407 = lshr i64 %389, 63
  %408 = xor i64 %405, %407
  %409 = add nuw nsw i64 %408, %405
  %410 = icmp eq i64 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %10, align 1, !tbaa !2450
  %412 = add i64 %386, 15
  store i64 %412, i64* %PC, align 8
  store i64 %390, i64* %388, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %413 = add i64 %248, -12
  store i64 4196149, i64* %PC, align 8
  %414 = inttoptr i64 %413 to i32*
  store i32 10, i32* %414, align 4
  %415 = load i64, i64* %RBP, align 8
  %416 = add i64 %415, -12
  %417 = load i64, i64* %PC, align 8
  %418 = add i64 %417, 3
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %416 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %RDI, align 8, !tbaa !2428
  %422 = add i64 %417, -581
  %423 = add i64 %417, 8
  %424 = load i64, i64* %4, align 8, !tbaa !2428
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 %423, i64* %426, align 8
  store i64 %425, i64* %4, align 8, !tbaa !2428
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  %427 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %422, %struct.Memory* %MEMORY.1)
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -8
  %430 = load i64, i64* %PC, align 8
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = add i64 %433, 4
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = icmp ugt i64 %433, -5
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %5, align 1, !tbaa !2432
  %437 = trunc i64 %434 to i32
  %438 = and i32 %437, 255
  %439 = tail call i32 @llvm.ctpop.i32(i32 %438) #8
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  store i8 %442, i8* %6, align 1, !tbaa !2446
  %443 = xor i64 %433, %434
  %444 = lshr i64 %443, 4
  %445 = trunc i64 %444 to i8
  %446 = and i8 %445, 1
  store i8 %446, i8* %7, align 1, !tbaa !2447
  %447 = icmp eq i64 %434, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %8, align 1, !tbaa !2448
  %449 = lshr i64 %434, 63
  %450 = trunc i64 %449 to i8
  store i8 %450, i8* %9, align 1, !tbaa !2449
  %451 = lshr i64 %433, 63
  %452 = xor i64 %449, %451
  %453 = add nuw nsw i64 %452, %449
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %10, align 1, !tbaa !2450
  %456 = add i64 %430, 15
  store i64 %456, i64* %PC, align 8
  store i64 %434, i64* %432, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %457 = add i64 %248, -12
  store i64 4196399, i64* %PC, align 8
  %458 = inttoptr i64 %457 to i32*
  store i32 15, i32* %458, align 4
  %459 = load i64, i64* %PC, align 8
  %460 = tail call %struct.Memory* @sub_40082f(%struct.State* nonnull %0, i64 %459, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %460

block_4006ca:                                     ; preds = %block_400566
  %461 = add i64 %248, -12
  store i64 4196049, i64* %PC, align 8
  %462 = inttoptr i64 %461 to i32*
  store i32 8, i32* %462, align 4
  %463 = load i64, i64* %PC, align 8
  %464 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %464

block_400922:                                     ; preds = %block_400566
  %465 = add i64 %248, -12
  store i64 4196649, i64* %PC, align 8
  %466 = inttoptr i64 %465 to i32*
  store i32 20, i32* %466, align 4
  %467 = load i64, i64* %PC, align 8
  %468 = tail call %struct.Memory* @sub_400929(%struct.State* nonnull %0, i64 %467, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %468

block_400a1c:                                     ; preds = %block_400566
  %469 = add i64 %248, -12
  store i64 4196899, i64* %PC, align 8
  %470 = inttoptr i64 %469 to i32*
  store i32 25, i32* %470, align 4
  %471 = load i64, i64* %PC, align 8
  %472 = tail call %struct.Memory* @sub_400a23(%struct.State* nonnull %0, i64 %471, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %472

block_400b16:                                     ; preds = %block_400566
  %473 = add i64 %248, -12
  store i64 4197149, i64* %PC, align 8
  %474 = inttoptr i64 %473 to i32*
  store i32 30, i32* %474, align 4
  %475 = load i64, i64* %PC, align 8
  %476 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %475, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %476

block_400602:                                     ; preds = %block_400566
  %477 = add i64 %248, -12
  store i64 4195849, i64* %PC, align 8
  %478 = inttoptr i64 %477 to i32*
  store i32 4, i32* %478, align 4
  %479 = load i64, i64* %PC, align 8
  %480 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %479, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %480

; <label>:481:                                    ; preds = %block_400566
  %482 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %252, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %482
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a23(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_400a23

block_4007f6:                                     ; preds = %block_400566
  %11 = add i64 %360, -12
  store i64 4196349, i64* %PC, align 8
  %12 = inttoptr i64 %11 to i32*
  store i32 14, i32* %12, align 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %13, -12
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %15, -781
  %21 = add i64 %15, 8
  %22 = load i64, i64* %4, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 8
  store i64 %23, i64* %4, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %25 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %20, %struct.Memory* %MEMORY.0)
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %RAX, align 8, !tbaa !2428
  %32 = add i64 %31, 4
  store i64 %32, i64* %RCX, align 8, !tbaa !2428
  %33 = icmp ugt i64 %31, -5
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1, !tbaa !2432
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #8
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %6, align 1, !tbaa !2446
  %41 = xor i64 %31, %32
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  store i8 %44, i8* %7, align 1, !tbaa !2447
  %45 = icmp eq i64 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1, !tbaa !2448
  %47 = lshr i64 %32, 63
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %9, align 1, !tbaa !2449
  %49 = lshr i64 %31, 63
  %50 = xor i64 %47, %49
  %51 = add nuw nsw i64 %50, %47
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %10, align 1, !tbaa !2450
  %54 = add i64 %28, 15
  store i64 %54, i64* %PC, align 8
  store i64 %32, i64* %30, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %55 = add i64 %360, -12
  store i64 4196599, i64* %PC, align 8
  %56 = inttoptr i64 %55 to i32*
  store i32 19, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %59, -1031
  %65 = add i64 %59, 8
  %66 = load i64, i64* %4, align 8, !tbaa !2428
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68, align 8
  store i64 %67, i64* %4, align 8, !tbaa !2428
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %69 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %MEMORY.0)
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %75, 4
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = icmp ugt i64 %75, -5
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %5, align 1, !tbaa !2432
  %79 = trunc i64 %76 to i32
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #8
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %6, align 1, !tbaa !2446
  %85 = xor i64 %75, %76
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %7, align 1, !tbaa !2447
  %89 = icmp eq i64 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %8, align 1, !tbaa !2448
  %91 = lshr i64 %76, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %9, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %10, align 1, !tbaa !2450
  %98 = add i64 %72, 15
  store i64 %98, i64* %PC, align 8
  store i64 %76, i64* %74, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %99 = add i64 %360, -12
  store i64 4195699, i64* %PC, align 8
  %100 = inttoptr i64 %99 to i32*
  store i32 1, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -12
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %108 = add i64 %103, -131
  %109 = add i64 %103, 8
  %110 = load i64, i64* %4, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %4, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %MEMORY.0)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %119, 4
  store i64 %120, i64* %RCX, align 8, !tbaa !2428
  %121 = icmp ugt i64 %119, -5
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %5, align 1, !tbaa !2432
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #8
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %6, align 1, !tbaa !2446
  %129 = xor i64 %119, %120
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %7, align 1, !tbaa !2447
  %133 = icmp eq i64 %120, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %8, align 1, !tbaa !2448
  %135 = lshr i64 %120, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %9, align 1, !tbaa !2449
  %137 = lshr i64 %119, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %10, align 1, !tbaa !2450
  %142 = add i64 %116, 15
  store i64 %142, i64* %PC, align 8
  store i64 %120, i64* %118, align 8
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %143 = add i64 %360, -12
  store i64 4196099, i64* %PC, align 8
  %144 = inttoptr i64 %143 to i32*
  store i32 9, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  %146 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %146

block_4009ea:                                     ; preds = %block_400566
  %147 = add i64 %360, -12
  store i64 4196849, i64* %PC, align 8
  %148 = inttoptr i64 %147 to i32*
  store i32 24, i32* %148, align 4
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -12
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %156 = add i64 %151, -1281
  %157 = add i64 %151, 8
  %158 = load i64, i64* %4, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %4, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.0)
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -8
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 4
  store i64 %168, i64* %RCX, align 8, !tbaa !2428
  %169 = icmp ugt i64 %167, -5
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %5, align 1, !tbaa !2432
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %6, align 1, !tbaa !2446
  %177 = xor i64 %167, %168
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %7, align 1, !tbaa !2447
  %181 = icmp eq i64 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %8, align 1, !tbaa !2448
  %183 = lshr i64 %168, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %9, align 1, !tbaa !2449
  %185 = lshr i64 %167, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %10, align 1, !tbaa !2450
  %190 = add i64 %164, 15
  store i64 %190, i64* %PC, align 8
  store i64 %168, i64* %166, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %191 = add i64 %360, -12
  store i64 4195949, i64* %PC, align 8
  %192 = inttoptr i64 %191 to i32*
  store i32 6, i32* %192, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -12
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = add i64 %195, -381
  %201 = add i64 %195, 8
  %202 = load i64, i64* %4, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %4, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %211, 4
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = icmp ugt i64 %211, -5
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %5, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #8
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %6, align 1, !tbaa !2446
  %221 = xor i64 %211, %212
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %7, align 1, !tbaa !2447
  %225 = icmp eq i64 %212, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %8, align 1, !tbaa !2448
  %227 = lshr i64 %212, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %9, align 1, !tbaa !2449
  %229 = lshr i64 %211, 63
  %230 = xor i64 %227, %229
  %231 = add nuw nsw i64 %230, %227
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %10, align 1, !tbaa !2450
  %234 = add i64 %208, 15
  store i64 %234, i64* %PC, align 8
  store i64 %212, i64* %210, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %235 = add i64 %360, -12
  store i64 4197099, i64* %PC, align 8
  %236 = inttoptr i64 %235 to i32*
  store i32 29, i32* %236, align 4
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -12
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = add i64 %239, -1531
  %245 = add i64 %239, 8
  %246 = load i64, i64* %4, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %4, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -8
  %252 = load i64, i64* %PC, align 8
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = add i64 %255, 4
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = icmp ugt i64 %255, -5
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %5, align 1, !tbaa !2432
  %259 = trunc i64 %256 to i32
  %260 = and i32 %259, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %6, align 1, !tbaa !2446
  %265 = xor i64 %255, %256
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %7, align 1, !tbaa !2447
  %269 = icmp eq i64 %256, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %8, align 1, !tbaa !2448
  %271 = lshr i64 %256, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %9, align 1, !tbaa !2449
  %273 = lshr i64 %255, 63
  %274 = xor i64 %271, %273
  %275 = add nuw nsw i64 %274, %271
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %10, align 1, !tbaa !2450
  %278 = add i64 %252, 15
  store i64 %278, i64* %PC, align 8
  store i64 %256, i64* %254, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %279 = add i64 %360, -12
  store i64 4196199, i64* %PC, align 8
  %280 = inttoptr i64 %279 to i32*
  store i32 11, i32* %280, align 4
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -12
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RDI, align 8, !tbaa !2428
  %288 = add i64 %283, -631
  %289 = add i64 %283, 8
  %290 = load i64, i64* %4, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %289, i64* %292, align 8
  store i64 %291, i64* %4, align 8, !tbaa !2428
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %293 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %288, %struct.Memory* %MEMORY.0)
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -8
  %296 = load i64, i64* %PC, align 8
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = add i64 %299, 4
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = icmp ugt i64 %299, -5
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %5, align 1, !tbaa !2432
  %303 = trunc i64 %300 to i32
  %304 = and i32 %303, 255
  %305 = tail call i32 @llvm.ctpop.i32(i32 %304) #8
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  store i8 %308, i8* %6, align 1, !tbaa !2446
  %309 = xor i64 %299, %300
  %310 = lshr i64 %309, 4
  %311 = trunc i64 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %7, align 1, !tbaa !2447
  %313 = icmp eq i64 %300, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %8, align 1, !tbaa !2448
  %315 = lshr i64 %300, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %9, align 1, !tbaa !2449
  %317 = lshr i64 %299, 63
  %318 = xor i64 %315, %317
  %319 = add nuw nsw i64 %318, %315
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %10, align 1, !tbaa !2450
  %322 = add i64 %296, 15
  store i64 %322, i64* %PC, align 8
  store i64 %300, i64* %298, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %323 = add i64 %360, -12
  store i64 4196449, i64* %PC, align 8
  %324 = inttoptr i64 %323 to i32*
  store i32 16, i32* %324, align 4
  %325 = load i64, i64* %PC, align 8
  %326 = tail call %struct.Memory* @sub_400861(%struct.State* nonnull %0, i64 %325, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %326

block_400954:                                     ; preds = %block_400566
  %327 = add i64 %360, -12
  store i64 4196699, i64* %PC, align 8
  %328 = inttoptr i64 %327 to i32*
  store i32 21, i32* %328, align 4
  %329 = load i64, i64* %PC, align 8
  %330 = tail call %struct.Memory* @sub_40095b(%struct.State* nonnull %0, i64 %329, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %330

block_400a4e:                                     ; preds = %block_400566
  %331 = add i64 %360, -12
  store i64 4196949, i64* %PC, align 8
  %332 = inttoptr i64 %331 to i32*
  store i32 26, i32* %332, align 4
  %333 = load i64, i64* %PC, align 8
  %334 = tail call %struct.Memory* @sub_400a55(%struct.State* nonnull %0, i64 %333, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %334

block_400b48:                                     ; preds = %block_400566
  %335 = add i64 %360, -12
  store i64 4197199, i64* %PC, align 8
  %336 = inttoptr i64 %335 to i32*
  store i32 31, i32* %336, align 4
  %337 = load i64, i64* %PC, align 8
  %338 = tail call %struct.Memory* @sub_400b4f(%struct.State* nonnull %0, i64 %337, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %338

block_4007c4:                                     ; preds = %block_400566
  %339 = add i64 %360, -12
  store i64 4196299, i64* %PC, align 8
  %340 = inttoptr i64 %339 to i32*
  store i32 13, i32* %340, align 4
  %341 = load i64, i64* %PC, align 8
  %342 = tail call %struct.Memory* @sub_4007cb(%struct.State* nonnull %0, i64 %341, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %342

block_400566:                                     ; preds = %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_400a23
  %.sink22 = phi i64 [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 1251, %block_400a23 ]
  %MEMORY.0 = phi %struct.Memory* [ %697, %block_40059e ], [ %653, %block_400922 ], [ %609, %block_400828 ], [ %565, %block_40072e ], [ %521, %block_400ab2 ], [ %477, %block_400634 ], [ %391, %block_4009b8 ], [ %293, %block_400760 ], [ %249, %block_400ae4 ], [ %205, %block_400666 ], [ %161, %block_4009ea ], [ %113, %block_40056c ], [ %69, %block_4008f0 ], [ %25, %block_4007f6 ], [ %433, %block_400a23 ]
  %343 = bitcast i64* %RAX to i32**
  %344 = load i32*, i32** %343, align 8
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC, align 8
  %347 = load i32, i32* %344, align 4
  %348 = sext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = shl nsw i64 %348, 3
  %350 = add i64 %349, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %351 = add i64 %345, 11
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -40
  %356 = add i64 %345, 15
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  store i64 %353, i64* %357, align 8
  %358 = load i64, i64* %PC, align 8
  %359 = sub i64 %358, %.sink22
  %360 = load i64, i64* %RBP, align 8
  %361 = add i64 %360, -40
  %362 = add i64 %359, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  switch i64 %364, label %761 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %365 = add i64 %360, -12
  store i64 4195799, i64* %PC, align 8
  %366 = inttoptr i64 %365 to i32*
  store i32 3, i32* %366, align 4
  %367 = load i64, i64* %PC, align 8
  %368 = tail call %struct.Memory* @sub_4005d7(%struct.State* nonnull %0, i64 %367, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %368

block_4008be:                                     ; preds = %block_400566
  %369 = add i64 %360, -12
  store i64 4196549, i64* %PC, align 8
  %370 = inttoptr i64 %369 to i32*
  store i32 18, i32* %370, align 4
  %371 = load i64, i64* %PC, align 8
  %372 = tail call %struct.Memory* @sub_4008c5(%struct.State* nonnull %0, i64 %371, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %372

block_4006ca:                                     ; preds = %block_400566
  %373 = add i64 %360, -12
  store i64 4196049, i64* %PC, align 8
  %374 = inttoptr i64 %373 to i32*
  store i32 8, i32* %374, align 4
  %375 = load i64, i64* %PC, align 8
  %376 = tail call %struct.Memory* @sub_4006d1(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %376

block_4009b8:                                     ; preds = %block_400566
  %377 = add i64 %360, -12
  store i64 4196799, i64* %PC, align 8
  %378 = inttoptr i64 %377 to i32*
  store i32 23, i32* %378, align 4
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -12
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %381, -1231
  %387 = add i64 %381, 8
  %388 = load i64, i64* %4, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %4, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %386, %struct.Memory* %MEMORY.0)
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -8
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %397, 4
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = icmp ugt i64 %397, -5
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %5, align 1, !tbaa !2432
  %401 = trunc i64 %398 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %6, align 1, !tbaa !2446
  %407 = xor i64 %397, %398
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %7, align 1, !tbaa !2447
  %411 = icmp eq i64 %398, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %8, align 1, !tbaa !2448
  %413 = lshr i64 %398, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %9, align 1, !tbaa !2449
  %415 = lshr i64 %397, 63
  %416 = xor i64 %413, %415
  %417 = add nuw nsw i64 %416, %413
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %10, align 1, !tbaa !2450
  %420 = add i64 %394, 15
  store i64 %420, i64* %PC, align 8
  store i64 %398, i64* %396, align 8
  br label %block_400566

block_400a23:                                     ; preds = %block_400a1c, %3
  %421 = phi i64 [ %1, %3 ], [ %.pre, %block_400a1c ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a1c ]
  %422 = load i64, i64* %RBP, align 8
  %423 = add i64 %422, -12
  %424 = add i64 %421, 3
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RDI, align 8, !tbaa !2428
  %428 = add i64 %421, -1331
  %429 = add i64 %421, 8
  %430 = load i64, i64* %4, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432, align 8
  store i64 %431, i64* %4, align 8, !tbaa !2428
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  %433 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %428, %struct.Memory* %MEMORY.1)
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -8
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438, align 8
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = add i64 %439, 4
  store i64 %440, i64* %RCX, align 8, !tbaa !2428
  %441 = icmp ugt i64 %439, -5
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %5, align 1, !tbaa !2432
  %443 = trunc i64 %440 to i32
  %444 = and i32 %443, 255
  %445 = tail call i32 @llvm.ctpop.i32(i32 %444) #8
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = xor i8 %447, 1
  store i8 %448, i8* %6, align 1, !tbaa !2446
  %449 = xor i64 %439, %440
  %450 = lshr i64 %449, 4
  %451 = trunc i64 %450 to i8
  %452 = and i8 %451, 1
  store i8 %452, i8* %7, align 1, !tbaa !2447
  %453 = icmp eq i64 %440, 0
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %8, align 1, !tbaa !2448
  %455 = lshr i64 %440, 63
  %456 = trunc i64 %455 to i8
  store i8 %456, i8* %9, align 1, !tbaa !2449
  %457 = lshr i64 %439, 63
  %458 = xor i64 %455, %457
  %459 = add nuw nsw i64 %458, %455
  %460 = icmp eq i64 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %10, align 1, !tbaa !2450
  %462 = add i64 %436, 15
  store i64 %462, i64* %PC, align 8
  store i64 %440, i64* %438, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %463 = add i64 %360, -12
  store i64 4195899, i64* %PC, align 8
  %464 = inttoptr i64 %463 to i32*
  store i32 5, i32* %464, align 4
  %465 = load i64, i64* %RBP, align 8
  %466 = add i64 %465, -12
  %467 = load i64, i64* %PC, align 8
  %468 = add i64 %467, 3
  store i64 %468, i64* %PC, align 8
  %469 = inttoptr i64 %466 to i32*
  %470 = load i32, i32* %469, align 4
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %RDI, align 8, !tbaa !2428
  %472 = add i64 %467, -331
  %473 = add i64 %467, 8
  %474 = load i64, i64* %4, align 8, !tbaa !2428
  %475 = add i64 %474, -8
  %476 = inttoptr i64 %475 to i64*
  store i64 %473, i64* %476, align 8
  store i64 %475, i64* %4, align 8, !tbaa !2428
  store i64 %472, i64* %PC, align 8, !tbaa !2428
  %477 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %472, %struct.Memory* %MEMORY.0)
  %478 = load i64, i64* %RBP, align 8
  %479 = add i64 %478, -8
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482, align 8
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = add i64 %483, 4
  store i64 %484, i64* %RCX, align 8, !tbaa !2428
  %485 = icmp ugt i64 %483, -5
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %5, align 1, !tbaa !2432
  %487 = trunc i64 %484 to i32
  %488 = and i32 %487, 255
  %489 = tail call i32 @llvm.ctpop.i32(i32 %488) #8
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  store i8 %492, i8* %6, align 1, !tbaa !2446
  %493 = xor i64 %483, %484
  %494 = lshr i64 %493, 4
  %495 = trunc i64 %494 to i8
  %496 = and i8 %495, 1
  store i8 %496, i8* %7, align 1, !tbaa !2447
  %497 = icmp eq i64 %484, 0
  %498 = zext i1 %497 to i8
  store i8 %498, i8* %8, align 1, !tbaa !2448
  %499 = lshr i64 %484, 63
  %500 = trunc i64 %499 to i8
  store i8 %500, i8* %9, align 1, !tbaa !2449
  %501 = lshr i64 %483, 63
  %502 = xor i64 %499, %501
  %503 = add nuw nsw i64 %502, %499
  %504 = icmp eq i64 %503, 2
  %505 = zext i1 %504 to i8
  store i8 %505, i8* %10, align 1, !tbaa !2450
  %506 = add i64 %480, 15
  store i64 %506, i64* %PC, align 8
  store i64 %484, i64* %482, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %507 = add i64 %360, -12
  store i64 4197049, i64* %PC, align 8
  %508 = inttoptr i64 %507 to i32*
  store i32 28, i32* %508, align 4
  %509 = load i64, i64* %RBP, align 8
  %510 = add i64 %509, -12
  %511 = load i64, i64* %PC, align 8
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RDI, align 8, !tbaa !2428
  %516 = add i64 %511, -1481
  %517 = add i64 %511, 8
  %518 = load i64, i64* %4, align 8, !tbaa !2428
  %519 = add i64 %518, -8
  %520 = inttoptr i64 %519 to i64*
  store i64 %517, i64* %520, align 8
  store i64 %519, i64* %4, align 8, !tbaa !2428
  store i64 %516, i64* %PC, align 8, !tbaa !2428
  %521 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %516, %struct.Memory* %MEMORY.0)
  %522 = load i64, i64* %RBP, align 8
  %523 = add i64 %522, -8
  %524 = load i64, i64* %PC, align 8
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %523 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = add i64 %527, 4
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = icmp ugt i64 %527, -5
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %5, align 1, !tbaa !2432
  %531 = trunc i64 %528 to i32
  %532 = and i32 %531, 255
  %533 = tail call i32 @llvm.ctpop.i32(i32 %532) #8
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  store i8 %536, i8* %6, align 1, !tbaa !2446
  %537 = xor i64 %527, %528
  %538 = lshr i64 %537, 4
  %539 = trunc i64 %538 to i8
  %540 = and i8 %539, 1
  store i8 %540, i8* %7, align 1, !tbaa !2447
  %541 = icmp eq i64 %528, 0
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %8, align 1, !tbaa !2448
  %543 = lshr i64 %528, 63
  %544 = trunc i64 %543 to i8
  store i8 %544, i8* %9, align 1, !tbaa !2449
  %545 = lshr i64 %527, 63
  %546 = xor i64 %543, %545
  %547 = add nuw nsw i64 %546, %543
  %548 = icmp eq i64 %547, 2
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %10, align 1, !tbaa !2450
  %550 = add i64 %524, 15
  store i64 %550, i64* %PC, align 8
  store i64 %528, i64* %526, align 8
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %551 = add i64 %360, -12
  store i64 4196149, i64* %PC, align 8
  %552 = inttoptr i64 %551 to i32*
  store i32 10, i32* %552, align 4
  %553 = load i64, i64* %RBP, align 8
  %554 = add i64 %553, -12
  %555 = load i64, i64* %PC, align 8
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557, align 4
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %560 = add i64 %555, -581
  %561 = add i64 %555, 8
  %562 = load i64, i64* %4, align 8, !tbaa !2428
  %563 = add i64 %562, -8
  %564 = inttoptr i64 %563 to i64*
  store i64 %561, i64* %564, align 8
  store i64 %563, i64* %4, align 8, !tbaa !2428
  store i64 %560, i64* %PC, align 8, !tbaa !2428
  %565 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %560, %struct.Memory* %MEMORY.0)
  %566 = load i64, i64* %RBP, align 8
  %567 = add i64 %566, -8
  %568 = load i64, i64* %PC, align 8
  %569 = add i64 %568, 4
  store i64 %569, i64* %PC, align 8
  %570 = inttoptr i64 %567 to i64*
  %571 = load i64, i64* %570, align 8
  store i64 %571, i64* %RAX, align 8, !tbaa !2428
  %572 = add i64 %571, 4
  store i64 %572, i64* %RCX, align 8, !tbaa !2428
  %573 = icmp ugt i64 %571, -5
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %5, align 1, !tbaa !2432
  %575 = trunc i64 %572 to i32
  %576 = and i32 %575, 255
  %577 = tail call i32 @llvm.ctpop.i32(i32 %576) #8
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  store i8 %580, i8* %6, align 1, !tbaa !2446
  %581 = xor i64 %571, %572
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  store i8 %584, i8* %7, align 1, !tbaa !2447
  %585 = icmp eq i64 %572, 0
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %8, align 1, !tbaa !2448
  %587 = lshr i64 %572, 63
  %588 = trunc i64 %587 to i8
  store i8 %588, i8* %9, align 1, !tbaa !2449
  %589 = lshr i64 %571, 63
  %590 = xor i64 %587, %589
  %591 = add nuw nsw i64 %590, %587
  %592 = icmp eq i64 %591, 2
  %593 = zext i1 %592 to i8
  store i8 %593, i8* %10, align 1, !tbaa !2450
  %594 = add i64 %568, 15
  store i64 %594, i64* %PC, align 8
  store i64 %572, i64* %570, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %595 = add i64 %360, -12
  store i64 4196399, i64* %PC, align 8
  %596 = inttoptr i64 %595 to i32*
  store i32 15, i32* %596, align 4
  %597 = load i64, i64* %RBP, align 8
  %598 = add i64 %597, -12
  %599 = load i64, i64* %PC, align 8
  %600 = add i64 %599, 3
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %598 to i32*
  %602 = load i32, i32* %601, align 4
  %603 = zext i32 %602 to i64
  store i64 %603, i64* %RDI, align 8, !tbaa !2428
  %604 = add i64 %599, -831
  %605 = add i64 %599, 8
  %606 = load i64, i64* %4, align 8, !tbaa !2428
  %607 = add i64 %606, -8
  %608 = inttoptr i64 %607 to i64*
  store i64 %605, i64* %608, align 8
  store i64 %607, i64* %4, align 8, !tbaa !2428
  store i64 %604, i64* %PC, align 8, !tbaa !2428
  %609 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %604, %struct.Memory* %MEMORY.0)
  %610 = load i64, i64* %RBP, align 8
  %611 = add i64 %610, -8
  %612 = load i64, i64* %PC, align 8
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = add i64 %615, 4
  store i64 %616, i64* %RCX, align 8, !tbaa !2428
  %617 = icmp ugt i64 %615, -5
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %5, align 1, !tbaa !2432
  %619 = trunc i64 %616 to i32
  %620 = and i32 %619, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620) #8
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %6, align 1, !tbaa !2446
  %625 = xor i64 %615, %616
  %626 = lshr i64 %625, 4
  %627 = trunc i64 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %7, align 1, !tbaa !2447
  %629 = icmp eq i64 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %8, align 1, !tbaa !2448
  %631 = lshr i64 %616, 63
  %632 = trunc i64 %631 to i8
  store i8 %632, i8* %9, align 1, !tbaa !2449
  %633 = lshr i64 %615, 63
  %634 = xor i64 %631, %633
  %635 = add nuw nsw i64 %634, %631
  %636 = icmp eq i64 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %10, align 1, !tbaa !2450
  %638 = add i64 %612, 15
  store i64 %638, i64* %PC, align 8
  store i64 %616, i64* %614, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %639 = add i64 %360, -12
  store i64 4196649, i64* %PC, align 8
  %640 = inttoptr i64 %639 to i32*
  store i32 20, i32* %640, align 4
  %641 = load i64, i64* %RBP, align 8
  %642 = add i64 %641, -12
  %643 = load i64, i64* %PC, align 8
  %644 = add i64 %643, 3
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %642 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %RDI, align 8, !tbaa !2428
  %648 = add i64 %643, -1081
  %649 = add i64 %643, 8
  %650 = load i64, i64* %4, align 8, !tbaa !2428
  %651 = add i64 %650, -8
  %652 = inttoptr i64 %651 to i64*
  store i64 %649, i64* %652, align 8
  store i64 %651, i64* %4, align 8, !tbaa !2428
  store i64 %648, i64* %PC, align 8, !tbaa !2428
  %653 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %648, %struct.Memory* %MEMORY.0)
  %654 = load i64, i64* %RBP, align 8
  %655 = add i64 %654, -8
  %656 = load i64, i64* %PC, align 8
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RAX, align 8, !tbaa !2428
  %660 = add i64 %659, 4
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = icmp ugt i64 %659, -5
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %5, align 1, !tbaa !2432
  %663 = trunc i64 %660 to i32
  %664 = and i32 %663, 255
  %665 = tail call i32 @llvm.ctpop.i32(i32 %664) #8
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  store i8 %668, i8* %6, align 1, !tbaa !2446
  %669 = xor i64 %659, %660
  %670 = lshr i64 %669, 4
  %671 = trunc i64 %670 to i8
  %672 = and i8 %671, 1
  store i8 %672, i8* %7, align 1, !tbaa !2447
  %673 = icmp eq i64 %660, 0
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %8, align 1, !tbaa !2448
  %675 = lshr i64 %660, 63
  %676 = trunc i64 %675 to i8
  store i8 %676, i8* %9, align 1, !tbaa !2449
  %677 = lshr i64 %659, 63
  %678 = xor i64 %675, %677
  %679 = add nuw nsw i64 %678, %675
  %680 = icmp eq i64 %679, 2
  %681 = zext i1 %680 to i8
  store i8 %681, i8* %10, align 1, !tbaa !2450
  %682 = add i64 %656, 15
  store i64 %682, i64* %PC, align 8
  store i64 %660, i64* %658, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %683 = add i64 %360, -12
  store i64 4195749, i64* %PC, align 8
  %684 = inttoptr i64 %683 to i32*
  store i32 2, i32* %684, align 4
  %685 = load i64, i64* %RBP, align 8
  %686 = add i64 %685, -12
  %687 = load i64, i64* %PC, align 8
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RDI, align 8, !tbaa !2428
  %692 = add i64 %687, -181
  %693 = add i64 %687, 8
  %694 = load i64, i64* %4, align 8, !tbaa !2428
  %695 = add i64 %694, -8
  %696 = inttoptr i64 %695 to i64*
  store i64 %693, i64* %696, align 8
  store i64 %695, i64* %4, align 8, !tbaa !2428
  store i64 %692, i64* %PC, align 8, !tbaa !2428
  %697 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %692, %struct.Memory* %MEMORY.0)
  %698 = load i64, i64* %RBP, align 8
  %699 = add i64 %698, -8
  %700 = load i64, i64* %PC, align 8
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC, align 8
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702, align 8
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = add i64 %703, 4
  store i64 %704, i64* %RCX, align 8, !tbaa !2428
  %705 = icmp ugt i64 %703, -5
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %5, align 1, !tbaa !2432
  %707 = trunc i64 %704 to i32
  %708 = and i32 %707, 255
  %709 = tail call i32 @llvm.ctpop.i32(i32 %708) #8
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = xor i8 %711, 1
  store i8 %712, i8* %6, align 1, !tbaa !2446
  %713 = xor i64 %703, %704
  %714 = lshr i64 %713, 4
  %715 = trunc i64 %714 to i8
  %716 = and i8 %715, 1
  store i8 %716, i8* %7, align 1, !tbaa !2447
  %717 = icmp eq i64 %704, 0
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %8, align 1, !tbaa !2448
  %719 = lshr i64 %704, 63
  %720 = trunc i64 %719 to i8
  store i8 %720, i8* %9, align 1, !tbaa !2449
  %721 = lshr i64 %703, 63
  %722 = xor i64 %719, %721
  %723 = add nuw nsw i64 %722, %719
  %724 = icmp eq i64 %723, 2
  %725 = zext i1 %724 to i8
  store i8 %725, i8* %10, align 1, !tbaa !2450
  %726 = add i64 %700, 15
  store i64 %726, i64* %PC, align 8
  store i64 %704, i64* %702, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %727 = add i64 %360, -12
  store i64 4195680, i64* %PC, align 8
  %728 = inttoptr i64 %727 to i32*
  store i32 0, i32* %728, align 4
  %729 = load i64, i64* %PC, align 8
  %730 = tail call %struct.Memory* @sub_400560(%struct.State* nonnull %0, i64 %729, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %730

block_400a1c:                                     ; preds = %block_400566
  %731 = add i64 %360, -12
  store i64 4196899, i64* %PC, align 8
  %732 = inttoptr i64 %731 to i32*
  store i32 25, i32* %732, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400a23

block_400698:                                     ; preds = %block_400566
  %733 = add i64 %360, -12
  store i64 4195999, i64* %PC, align 8
  %734 = inttoptr i64 %733 to i32*
  store i32 7, i32* %734, align 4
  %735 = load i64, i64* %PC, align 8
  %736 = tail call %struct.Memory* @sub_40069f(%struct.State* nonnull %0, i64 %735, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %736

block_400b16:                                     ; preds = %block_400566
  %737 = add i64 %360, -12
  store i64 4197149, i64* %PC, align 8
  %738 = inttoptr i64 %737 to i32*
  store i32 30, i32* %738, align 4
  %739 = load i64, i64* %PC, align 8
  %740 = tail call %struct.Memory* @sub_400b1d(%struct.State* nonnull %0, i64 %739, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %740

block_400792:                                     ; preds = %block_400566
  %741 = add i64 %360, -12
  store i64 4196249, i64* %PC, align 8
  %742 = inttoptr i64 %741 to i32*
  store i32 12, i32* %742, align 4
  %743 = load i64, i64* %PC, align 8
  %744 = tail call %struct.Memory* @sub_400799(%struct.State* nonnull %0, i64 %743, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %744

block_40088c:                                     ; preds = %block_400566
  %745 = add i64 %360, -12
  store i64 4196499, i64* %PC, align 8
  %746 = inttoptr i64 %745 to i32*
  store i32 17, i32* %746, align 4
  %747 = load i64, i64* %PC, align 8
  %748 = tail call %struct.Memory* @sub_400893(%struct.State* nonnull %0, i64 %747, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %748

block_400986:                                     ; preds = %block_400566
  %749 = add i64 %360, -12
  store i64 4196749, i64* %PC, align 8
  %750 = inttoptr i64 %749 to i32*
  store i32 22, i32* %750, align 4
  %751 = load i64, i64* %PC, align 8
  %752 = tail call %struct.Memory* @sub_40098d(%struct.State* nonnull %0, i64 %751, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %752

block_400602:                                     ; preds = %block_400566
  %753 = add i64 %360, -12
  store i64 4195849, i64* %PC, align 8
  %754 = inttoptr i64 %753 to i32*
  store i32 4, i32* %754, align 4
  %755 = load i64, i64* %PC, align 8
  %756 = tail call %struct.Memory* @sub_400609(%struct.State* nonnull %0, i64 %755, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %756

block_400a80:                                     ; preds = %block_400566
  %757 = add i64 %360, -12
  store i64 4196999, i64* %PC, align 8
  %758 = inttoptr i64 %757 to i32*
  store i32 27, i32* %758, align 4
  %759 = load i64, i64* %PC, align 8
  %760 = tail call %struct.Memory* @sub_400a87(%struct.State* nonnull %0, i64 %759, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %760

; <label>:761:                                    ; preds = %block_400566
  %762 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %364, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %762
}

; Function Attrs: noinline
define %struct.Memory* @sub_400560(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 48
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = icmp ugt i64 %3, -49
  %6 = zext i1 %5 to i8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6, i8* %7, align 1, !tbaa !2432
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #8
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !2446
  %15 = xor i64 %3, 16
  %16 = xor i64 %15, %4
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = icmp eq i64 %4, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1, !tbaa !2448
  %24 = lshr i64 %4, 63
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1, !tbaa !2449
  %27 = lshr i64 %3, 63
  %28 = xor i64 %24, %27
  %29 = add nuw nsw i64 %28, %24
  %30 = icmp eq i64 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = add i64 %1, 5
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %3, 56
  %35 = inttoptr i64 %4 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %RBP, align 8, !tbaa !2428
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %37 = add i64 %1, 6
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = add i64 %3, 64
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cd4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400cd4:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2448
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2449
  store i8 %16, i8* %17, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008c5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %block_4008c5

block_4006fc:                                     ; preds = %block_400566
  %10 = add i64 %1034, -12
  store i64 4196099, i64* %PC, align 8
  %11 = inttoptr i64 %10 to i32*
  store i32 9, i32* %11, align 4
  %12 = load i64, i64* %PC, align 8
  %13 = tail call %struct.Memory* @sub_400703(%struct.State* nonnull %0, i64 %12, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %13

block_4007f6:                                     ; preds = %block_400566
  %14 = add i64 %1034, -12
  store i64 4196349, i64* %PC, align 8
  %15 = inttoptr i64 %14 to i32*
  store i32 14, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -12
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 3
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %RDI, align 8, !tbaa !2428
  %23 = add i64 %18, -781
  %24 = add i64 %18, 8
  %25 = load i64, i64* %RSP, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %23, %struct.Memory* %MEMORY.1)
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RAX, align 8, !tbaa !2428
  %35 = add i64 %34, 4
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = icmp ugt i64 %34, -5
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %4, align 1, !tbaa !2432
  %38 = trunc i64 %35 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #8
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %5, align 1, !tbaa !2446
  %44 = xor i64 %34, %35
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  store i8 %47, i8* %6, align 1, !tbaa !2447
  %48 = icmp eq i64 %35, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %7, align 1, !tbaa !2448
  %50 = lshr i64 %35, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %8, align 1, !tbaa !2449
  %52 = lshr i64 %34, 63
  %53 = xor i64 %50, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %9, align 1, !tbaa !2450
  %57 = add i64 %31, 15
  store i64 %57, i64* %PC, align 8
  store i64 %35, i64* %33, align 8
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %58 = add i64 %1034, -12
  store i64 4196599, i64* %PC, align 8
  %59 = inttoptr i64 %58 to i32*
  store i32 19, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -12
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = add i64 %62, -1031
  %68 = add i64 %62, 8
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.1)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %78, 4
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -5
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %4, align 1, !tbaa !2432
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %5, align 1, !tbaa !2446
  %88 = xor i64 %78, %79
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %6, align 1, !tbaa !2447
  %92 = icmp eq i64 %79, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %7, align 1, !tbaa !2448
  %94 = lshr i64 %79, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %8, align 1, !tbaa !2449
  %96 = lshr i64 %78, 63
  %97 = xor i64 %94, %96
  %98 = add nuw nsw i64 %97, %94
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %9, align 1, !tbaa !2450
  %101 = add i64 %75, 15
  store i64 %101, i64* %PC, align 8
  store i64 %79, i64* %77, align 8
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %102 = add i64 %1034, -12
  store i64 4195699, i64* %PC, align 8
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103, align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -12
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %106, -131
  %112 = add i64 %106, 8
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %MEMORY.1)
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 4
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = icmp ugt i64 %122, -5
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %4, align 1, !tbaa !2432
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #8
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %5, align 1, !tbaa !2446
  %132 = xor i64 %122, %123
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %6, align 1, !tbaa !2447
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %7, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %8, align 1, !tbaa !2449
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %9, align 1, !tbaa !2450
  %145 = add i64 %119, 15
  store i64 %145, i64* %PC, align 8
  store i64 %123, i64* %121, align 8
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %146 = add i64 %1034, -12
  store i64 4196849, i64* %PC, align 8
  %147 = inttoptr i64 %146 to i32*
  store i32 24, i32* %147, align 4
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -12
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RDI, align 8, !tbaa !2428
  %155 = add i64 %150, -1281
  %156 = add i64 %150, 8
  %157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %MEMORY.1)
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = add i64 %166, 4
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = icmp ugt i64 %166, -5
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %4, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %5, align 1, !tbaa !2446
  %176 = xor i64 %166, %167
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %6, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %7, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %8, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %9, align 1, !tbaa !2450
  %189 = add i64 %163, 15
  store i64 %189, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %190 = add i64 %1034, -12
  store i64 4195949, i64* %PC, align 8
  %191 = inttoptr i64 %190 to i32*
  store i32 6, i32* %191, align 4
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -12
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDI, align 8, !tbaa !2428
  %199 = add i64 %194, -381
  %200 = add i64 %194, 8
  %201 = load i64, i64* %RSP, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203, align 8
  store i64 %202, i64* %RSP, align 8, !tbaa !2428
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %204 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %199, %struct.Memory* %MEMORY.1)
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %210, 4
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = icmp ugt i64 %210, -5
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %4, align 1, !tbaa !2432
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #8
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %5, align 1, !tbaa !2446
  %220 = xor i64 %210, %211
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %6, align 1, !tbaa !2447
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %7, align 1, !tbaa !2448
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %8, align 1, !tbaa !2449
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %9, align 1, !tbaa !2450
  %233 = add i64 %207, 15
  store i64 %233, i64* %PC, align 8
  store i64 %211, i64* %209, align 8
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %234 = add i64 %1034, -12
  store i64 4197099, i64* %PC, align 8
  %235 = inttoptr i64 %234 to i32*
  store i32 29, i32* %235, align 4
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -12
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %238, -1531
  %244 = add i64 %238, 8
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.1)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -8
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %254, 4
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = icmp ugt i64 %254, -5
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %4, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %5, align 1, !tbaa !2446
  %264 = xor i64 %254, %255
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %6, align 1, !tbaa !2447
  %268 = icmp eq i64 %255, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %7, align 1, !tbaa !2448
  %270 = lshr i64 %255, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %8, align 1, !tbaa !2449
  %272 = lshr i64 %254, 63
  %273 = xor i64 %270, %272
  %274 = add nuw nsw i64 %273, %270
  %275 = icmp eq i64 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %9, align 1, !tbaa !2450
  %277 = add i64 %251, 15
  store i64 %277, i64* %PC, align 8
  store i64 %255, i64* %253, align 8
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %278 = add i64 %1034, -12
  store i64 4196199, i64* %PC, align 8
  %279 = inttoptr i64 %278 to i32*
  store i32 11, i32* %279, align 4
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -12
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %281 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = add i64 %282, -631
  %288 = add i64 %282, 8
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.1)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, 4
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -5
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %4, align 1, !tbaa !2432
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #8
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %5, align 1, !tbaa !2446
  %308 = xor i64 %298, %299
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %6, align 1, !tbaa !2447
  %312 = icmp eq i64 %299, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %7, align 1, !tbaa !2448
  %314 = lshr i64 %299, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %8, align 1, !tbaa !2449
  %316 = lshr i64 %298, 63
  %317 = xor i64 %314, %316
  %318 = add nuw nsw i64 %317, %314
  %319 = icmp eq i64 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %9, align 1, !tbaa !2450
  %321 = add i64 %295, 15
  store i64 %321, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %322 = add i64 %1034, -12
  store i64 4196449, i64* %PC, align 8
  %323 = inttoptr i64 %322 to i32*
  store i32 16, i32* %323, align 4
  %324 = load i64, i64* %RBP, align 8
  %325 = add i64 %324, -12
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %326, -881
  %332 = add i64 %326, 8
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.1)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %342, 4
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = icmp ugt i64 %342, -5
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %4, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #8
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %5, align 1, !tbaa !2446
  %352 = xor i64 %342, %343
  %353 = lshr i64 %352, 4
  %354 = trunc i64 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %6, align 1, !tbaa !2447
  %356 = icmp eq i64 %343, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %7, align 1, !tbaa !2448
  %358 = lshr i64 %343, 63
  %359 = trunc i64 %358 to i8
  store i8 %359, i8* %8, align 1, !tbaa !2449
  %360 = lshr i64 %342, 63
  %361 = xor i64 %358, %360
  %362 = add nuw nsw i64 %361, %358
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %9, align 1, !tbaa !2450
  %365 = add i64 %339, 15
  store i64 %365, i64* %PC, align 8
  store i64 %343, i64* %341, align 8
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %366 = add i64 %1034, -12
  store i64 4196699, i64* %PC, align 8
  %367 = inttoptr i64 %366 to i32*
  store i32 21, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -12
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = add i64 %370, -1131
  %376 = add i64 %370, 8
  %377 = load i64, i64* %RSP, align 8, !tbaa !2428
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379, align 8
  store i64 %378, i64* %RSP, align 8, !tbaa !2428
  store i64 %375, i64* %PC, align 8, !tbaa !2428
  %380 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %375, %struct.Memory* %MEMORY.1)
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %386, 4
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -5
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %4, align 1, !tbaa !2432
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %5, align 1, !tbaa !2446
  %396 = xor i64 %386, %387
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %6, align 1, !tbaa !2447
  %400 = icmp eq i64 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %7, align 1, !tbaa !2448
  %402 = lshr i64 %387, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %8, align 1, !tbaa !2449
  %404 = lshr i64 %386, 63
  %405 = xor i64 %402, %404
  %406 = add nuw nsw i64 %405, %402
  %407 = icmp eq i64 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %9, align 1, !tbaa !2450
  %409 = add i64 %383, 15
  store i64 %409, i64* %PC, align 8
  store i64 %387, i64* %385, align 8
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %410 = add i64 %1034, -12
  store i64 4195799, i64* %PC, align 8
  %411 = inttoptr i64 %410 to i32*
  store i32 3, i32* %411, align 4
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -12
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 3
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -231
  %420 = add i64 %414, 8
  %421 = load i64, i64* %RSP, align 8, !tbaa !2428
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %RSP, align 8, !tbaa !2428
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  %424 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.1)
  %425 = load i64, i64* %RBP, align 8
  %426 = add i64 %425, -8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %430, 4
  store i64 %431, i64* %RCX, align 8, !tbaa !2428
  %432 = icmp ugt i64 %430, -5
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %4, align 1, !tbaa !2432
  %434 = trunc i64 %431 to i32
  %435 = and i32 %434, 255
  %436 = tail call i32 @llvm.ctpop.i32(i32 %435) #8
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  store i8 %439, i8* %5, align 1, !tbaa !2446
  %440 = xor i64 %430, %431
  %441 = lshr i64 %440, 4
  %442 = trunc i64 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %6, align 1, !tbaa !2447
  %444 = icmp eq i64 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %7, align 1, !tbaa !2448
  %446 = lshr i64 %431, 63
  %447 = trunc i64 %446 to i8
  store i8 %447, i8* %8, align 1, !tbaa !2449
  %448 = lshr i64 %430, 63
  %449 = xor i64 %446, %448
  %450 = add nuw nsw i64 %449, %446
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %9, align 1, !tbaa !2450
  %453 = add i64 %427, 15
  store i64 %453, i64* %PC, align 8
  store i64 %431, i64* %429, align 8
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %454 = add i64 %1034, -12
  store i64 4196949, i64* %PC, align 8
  %455 = inttoptr i64 %454 to i32*
  store i32 26, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -12
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDI, align 8, !tbaa !2428
  %463 = add i64 %458, -1381
  %464 = add i64 %458, 8
  %465 = load i64, i64* %RSP, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %467, align 8
  store i64 %466, i64* %RSP, align 8, !tbaa !2428
  store i64 %463, i64* %PC, align 8, !tbaa !2428
  %468 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %463, %struct.Memory* %MEMORY.1)
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -8
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %474, 4
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = icmp ugt i64 %474, -5
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %4, align 1, !tbaa !2432
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #8
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %5, align 1, !tbaa !2446
  %484 = xor i64 %474, %475
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %6, align 1, !tbaa !2447
  %488 = icmp eq i64 %475, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %7, align 1, !tbaa !2448
  %490 = lshr i64 %475, 63
  %491 = trunc i64 %490 to i8
  store i8 %491, i8* %8, align 1, !tbaa !2449
  %492 = lshr i64 %474, 63
  %493 = xor i64 %490, %492
  %494 = add nuw nsw i64 %493, %490
  %495 = icmp eq i64 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %9, align 1, !tbaa !2450
  %497 = add i64 %471, 15
  store i64 %497, i64* %PC, align 8
  store i64 %475, i64* %473, align 8
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %498 = add i64 %1034, -12
  store i64 4196049, i64* %PC, align 8
  %499 = inttoptr i64 %498 to i32*
  store i32 8, i32* %499, align 4
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -12
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, 3
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %501 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDI, align 8, !tbaa !2428
  %507 = add i64 %502, -481
  %508 = add i64 %502, 8
  %509 = load i64, i64* %RSP, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %508, i64* %511, align 8
  store i64 %510, i64* %RSP, align 8, !tbaa !2428
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  %512 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %507, %struct.Memory* %MEMORY.1)
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -8
  %515 = load i64, i64* %PC, align 8
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517, align 8
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = add i64 %518, 4
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ugt i64 %518, -5
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %4, align 1, !tbaa !2432
  %522 = trunc i64 %519 to i32
  %523 = and i32 %522, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %5, align 1, !tbaa !2446
  %528 = xor i64 %518, %519
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %6, align 1, !tbaa !2447
  %532 = icmp eq i64 %519, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %7, align 1, !tbaa !2448
  %534 = lshr i64 %519, 63
  %535 = trunc i64 %534 to i8
  store i8 %535, i8* %8, align 1, !tbaa !2449
  %536 = lshr i64 %518, 63
  %537 = xor i64 %534, %536
  %538 = add nuw nsw i64 %537, %534
  %539 = icmp eq i64 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %9, align 1, !tbaa !2450
  %541 = add i64 %515, 15
  store i64 %541, i64* %PC, align 8
  store i64 %519, i64* %517, align 8
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %542 = add i64 %1034, -12
  store i64 4197199, i64* %PC, align 8
  %543 = inttoptr i64 %542 to i32*
  store i32 31, i32* %543, align 4
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -12
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RDI, align 8, !tbaa !2428
  %551 = add i64 %546, -1631
  %552 = add i64 %546, 8
  %553 = load i64, i64* %RSP, align 8, !tbaa !2428
  %554 = add i64 %553, -8
  %555 = inttoptr i64 %554 to i64*
  store i64 %552, i64* %555, align 8
  store i64 %554, i64* %RSP, align 8, !tbaa !2428
  store i64 %551, i64* %PC, align 8, !tbaa !2428
  %556 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %551, %struct.Memory* %MEMORY.1)
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -8
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561, align 8
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = add i64 %562, 4
  store i64 %563, i64* %RCX, align 8, !tbaa !2428
  %564 = icmp ugt i64 %562, -5
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %4, align 1, !tbaa !2432
  %566 = trunc i64 %563 to i32
  %567 = and i32 %566, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %5, align 1, !tbaa !2446
  %572 = xor i64 %562, %563
  %573 = lshr i64 %572, 4
  %574 = trunc i64 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %6, align 1, !tbaa !2447
  %576 = icmp eq i64 %563, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %7, align 1, !tbaa !2448
  %578 = lshr i64 %563, 63
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %8, align 1, !tbaa !2449
  %580 = lshr i64 %562, 63
  %581 = xor i64 %578, %580
  %582 = add nuw nsw i64 %581, %578
  %583 = icmp eq i64 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %9, align 1, !tbaa !2450
  %585 = add i64 %559, 15
  store i64 %585, i64* %PC, align 8
  store i64 %563, i64* %561, align 8
  br label %block_400566

block_4008c5:                                     ; preds = %block_4008be, %3
  %586 = phi i64 [ %1, %3 ], [ %.pre, %block_4008be ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008be ]
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, -12
  %589 = add i64 %586, 3
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = zext i32 %591 to i64
  store i64 %592, i64* %RDI, align 8, !tbaa !2428
  %593 = add i64 %586, -981
  %594 = add i64 %586, 8
  %595 = load i64, i64* %RSP, align 8, !tbaa !2428
  %596 = add i64 %595, -8
  %597 = inttoptr i64 %596 to i64*
  store i64 %594, i64* %597, align 8
  store i64 %596, i64* %RSP, align 8, !tbaa !2428
  store i64 %593, i64* %PC, align 8, !tbaa !2428
  %598 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %593, %struct.Memory* %MEMORY.0)
  %599 = load i64, i64* %RBP, align 8
  %600 = add i64 %599, -8
  %601 = load i64, i64* %PC, align 8
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603, align 8
  store i64 %604, i64* %RAX, align 8, !tbaa !2428
  %605 = add i64 %604, 4
  store i64 %605, i64* %RCX, align 8, !tbaa !2428
  %606 = icmp ugt i64 %604, -5
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %4, align 1, !tbaa !2432
  %608 = trunc i64 %605 to i32
  %609 = and i32 %608, 255
  %610 = tail call i32 @llvm.ctpop.i32(i32 %609) #8
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  store i8 %613, i8* %5, align 1, !tbaa !2446
  %614 = xor i64 %604, %605
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  store i8 %617, i8* %6, align 1, !tbaa !2447
  %618 = icmp eq i64 %605, 0
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %7, align 1, !tbaa !2448
  %620 = lshr i64 %605, 63
  %621 = trunc i64 %620 to i8
  store i8 %621, i8* %8, align 1, !tbaa !2449
  %622 = lshr i64 %604, 63
  %623 = xor i64 %620, %622
  %624 = add nuw nsw i64 %623, %620
  %625 = icmp eq i64 %624, 2
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %9, align 1, !tbaa !2450
  %627 = add i64 %601, 15
  store i64 %627, i64* %PC, align 8
  store i64 %605, i64* %603, align 8
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %628 = add i64 %1034, -12
  store i64 4196299, i64* %PC, align 8
  %629 = inttoptr i64 %628 to i32*
  store i32 13, i32* %629, align 4
  %630 = load i64, i64* %RBP, align 8
  %631 = add i64 %630, -12
  %632 = load i64, i64* %PC, align 8
  %633 = add i64 %632, 3
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %631 to i32*
  %635 = load i32, i32* %634, align 4
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RDI, align 8, !tbaa !2428
  %637 = add i64 %632, -731
  %638 = add i64 %632, 8
  %639 = load i64, i64* %RSP, align 8, !tbaa !2428
  %640 = add i64 %639, -8
  %641 = inttoptr i64 %640 to i64*
  store i64 %638, i64* %641, align 8
  store i64 %640, i64* %RSP, align 8, !tbaa !2428
  store i64 %637, i64* %PC, align 8, !tbaa !2428
  %642 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %637, %struct.Memory* %MEMORY.1)
  %643 = load i64, i64* %RBP, align 8
  %644 = add i64 %643, -8
  %645 = load i64, i64* %PC, align 8
  %646 = add i64 %645, 4
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = add i64 %648, 4
  store i64 %649, i64* %RCX, align 8, !tbaa !2428
  %650 = icmp ugt i64 %648, -5
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %4, align 1, !tbaa !2432
  %652 = trunc i64 %649 to i32
  %653 = and i32 %652, 255
  %654 = tail call i32 @llvm.ctpop.i32(i32 %653) #8
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  %657 = xor i8 %656, 1
  store i8 %657, i8* %5, align 1, !tbaa !2446
  %658 = xor i64 %648, %649
  %659 = lshr i64 %658, 4
  %660 = trunc i64 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %6, align 1, !tbaa !2447
  %662 = icmp eq i64 %649, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %7, align 1, !tbaa !2448
  %664 = lshr i64 %649, 63
  %665 = trunc i64 %664 to i8
  store i8 %665, i8* %8, align 1, !tbaa !2449
  %666 = lshr i64 %648, 63
  %667 = xor i64 %664, %666
  %668 = add nuw nsw i64 %667, %664
  %669 = icmp eq i64 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %9, align 1, !tbaa !2450
  %671 = add i64 %645, 15
  store i64 %671, i64* %PC, align 8
  store i64 %649, i64* %647, align 8
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %672 = add i64 %1034, -12
  store i64 4196549, i64* %PC, align 8
  %673 = inttoptr i64 %672 to i32*
  store i32 18, i32* %673, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4008c5

block_4009b8:                                     ; preds = %block_400566
  %674 = add i64 %1034, -12
  store i64 4196799, i64* %PC, align 8
  %675 = inttoptr i64 %674 to i32*
  store i32 23, i32* %675, align 4
  %676 = load i64, i64* %RBP, align 8
  %677 = add i64 %676, -12
  %678 = load i64, i64* %PC, align 8
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %677 to i32*
  %681 = load i32, i32* %680, align 4
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDI, align 8, !tbaa !2428
  %683 = add i64 %678, -1231
  %684 = add i64 %678, 8
  %685 = load i64, i64* %RSP, align 8, !tbaa !2428
  %686 = add i64 %685, -8
  %687 = inttoptr i64 %686 to i64*
  store i64 %684, i64* %687, align 8
  store i64 %686, i64* %RSP, align 8, !tbaa !2428
  store i64 %683, i64* %PC, align 8, !tbaa !2428
  %688 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %683, %struct.Memory* %MEMORY.1)
  %689 = load i64, i64* %RBP, align 8
  %690 = add i64 %689, -8
  %691 = load i64, i64* %PC, align 8
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693, align 8
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = add i64 %694, 4
  store i64 %695, i64* %RCX, align 8, !tbaa !2428
  %696 = icmp ugt i64 %694, -5
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %4, align 1, !tbaa !2432
  %698 = trunc i64 %695 to i32
  %699 = and i32 %698, 255
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #8
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %5, align 1, !tbaa !2446
  %704 = xor i64 %694, %695
  %705 = lshr i64 %704, 4
  %706 = trunc i64 %705 to i8
  %707 = and i8 %706, 1
  store i8 %707, i8* %6, align 1, !tbaa !2447
  %708 = icmp eq i64 %695, 0
  %709 = zext i1 %708 to i8
  store i8 %709, i8* %7, align 1, !tbaa !2448
  %710 = lshr i64 %695, 63
  %711 = trunc i64 %710 to i8
  store i8 %711, i8* %8, align 1, !tbaa !2449
  %712 = lshr i64 %694, 63
  %713 = xor i64 %710, %712
  %714 = add nuw nsw i64 %713, %710
  %715 = icmp eq i64 %714, 2
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %9, align 1, !tbaa !2450
  %717 = add i64 %691, 15
  store i64 %717, i64* %PC, align 8
  store i64 %695, i64* %693, align 8
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %718 = add i64 %1034, -12
  store i64 4195899, i64* %PC, align 8
  %719 = inttoptr i64 %718 to i32*
  store i32 5, i32* %719, align 4
  %720 = load i64, i64* %RBP, align 8
  %721 = add i64 %720, -12
  %722 = load i64, i64* %PC, align 8
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724, align 4
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = add i64 %722, -331
  %728 = add i64 %722, 8
  %729 = load i64, i64* %RSP, align 8, !tbaa !2428
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 %728, i64* %731, align 8
  store i64 %730, i64* %RSP, align 8, !tbaa !2428
  store i64 %727, i64* %PC, align 8, !tbaa !2428
  %732 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %727, %struct.Memory* %MEMORY.1)
  %733 = load i64, i64* %RBP, align 8
  %734 = add i64 %733, -8
  %735 = load i64, i64* %PC, align 8
  %736 = add i64 %735, 4
  store i64 %736, i64* %PC, align 8
  %737 = inttoptr i64 %734 to i64*
  %738 = load i64, i64* %737, align 8
  store i64 %738, i64* %RAX, align 8, !tbaa !2428
  %739 = add i64 %738, 4
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = icmp ugt i64 %738, -5
  %741 = zext i1 %740 to i8
  store i8 %741, i8* %4, align 1, !tbaa !2432
  %742 = trunc i64 %739 to i32
  %743 = and i32 %742, 255
  %744 = tail call i32 @llvm.ctpop.i32(i32 %743) #8
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  %747 = xor i8 %746, 1
  store i8 %747, i8* %5, align 1, !tbaa !2446
  %748 = xor i64 %738, %739
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  store i8 %751, i8* %6, align 1, !tbaa !2447
  %752 = icmp eq i64 %739, 0
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %7, align 1, !tbaa !2448
  %754 = lshr i64 %739, 63
  %755 = trunc i64 %754 to i8
  store i8 %755, i8* %8, align 1, !tbaa !2449
  %756 = lshr i64 %738, 63
  %757 = xor i64 %754, %756
  %758 = add nuw nsw i64 %757, %754
  %759 = icmp eq i64 %758, 2
  %760 = zext i1 %759 to i8
  store i8 %760, i8* %9, align 1, !tbaa !2450
  %761 = add i64 %735, 15
  store i64 %761, i64* %PC, align 8
  store i64 %739, i64* %737, align 8
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %762 = add i64 %1034, -12
  store i64 4197049, i64* %PC, align 8
  %763 = inttoptr i64 %762 to i32*
  store i32 28, i32* %763, align 4
  %764 = load i64, i64* %RBP, align 8
  %765 = add i64 %764, -12
  %766 = load i64, i64* %PC, align 8
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768, align 4
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = add i64 %766, -1481
  %772 = add i64 %766, 8
  %773 = load i64, i64* %RSP, align 8, !tbaa !2428
  %774 = add i64 %773, -8
  %775 = inttoptr i64 %774 to i64*
  store i64 %772, i64* %775, align 8
  store i64 %774, i64* %RSP, align 8, !tbaa !2428
  store i64 %771, i64* %PC, align 8, !tbaa !2428
  %776 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %771, %struct.Memory* %MEMORY.1)
  %777 = load i64, i64* %RBP, align 8
  %778 = add i64 %777, -8
  %779 = load i64, i64* %PC, align 8
  %780 = add i64 %779, 4
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %778 to i64*
  %782 = load i64, i64* %781, align 8
  store i64 %782, i64* %RAX, align 8, !tbaa !2428
  %783 = add i64 %782, 4
  store i64 %783, i64* %RCX, align 8, !tbaa !2428
  %784 = icmp ugt i64 %782, -5
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %4, align 1, !tbaa !2432
  %786 = trunc i64 %783 to i32
  %787 = and i32 %786, 255
  %788 = tail call i32 @llvm.ctpop.i32(i32 %787) #8
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = xor i8 %790, 1
  store i8 %791, i8* %5, align 1, !tbaa !2446
  %792 = xor i64 %782, %783
  %793 = lshr i64 %792, 4
  %794 = trunc i64 %793 to i8
  %795 = and i8 %794, 1
  store i8 %795, i8* %6, align 1, !tbaa !2447
  %796 = icmp eq i64 %783, 0
  %797 = zext i1 %796 to i8
  store i8 %797, i8* %7, align 1, !tbaa !2448
  %798 = lshr i64 %783, 63
  %799 = trunc i64 %798 to i8
  store i8 %799, i8* %8, align 1, !tbaa !2449
  %800 = lshr i64 %782, 63
  %801 = xor i64 %798, %800
  %802 = add nuw nsw i64 %801, %798
  %803 = icmp eq i64 %802, 2
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %9, align 1, !tbaa !2450
  %805 = add i64 %779, 15
  store i64 %805, i64* %PC, align 8
  store i64 %783, i64* %781, align 8
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %806 = add i64 %1034, -12
  store i64 4195680, i64* %PC, align 8
  %807 = inttoptr i64 %806 to i32*
  store i32 0, i32* %807, align 4
  %808 = load i64, i64* %RSP, align 8
  %809 = load i64, i64* %PC, align 8
  %810 = add i64 %808, 48
  store i64 %810, i64* %RSP, align 8, !tbaa !2428
  %811 = icmp ugt i64 %808, -49
  %812 = zext i1 %811 to i8
  store i8 %812, i8* %4, align 1, !tbaa !2432
  %813 = trunc i64 %810 to i32
  %814 = and i32 %813, 255
  %815 = tail call i32 @llvm.ctpop.i32(i32 %814) #8
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  %818 = xor i8 %817, 1
  store i8 %818, i8* %5, align 1, !tbaa !2446
  %819 = xor i64 %808, 16
  %820 = xor i64 %819, %810
  %821 = lshr i64 %820, 4
  %822 = trunc i64 %821 to i8
  %823 = and i8 %822, 1
  store i8 %823, i8* %6, align 1, !tbaa !2447
  %824 = icmp eq i64 %810, 0
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %7, align 1, !tbaa !2448
  %826 = lshr i64 %810, 63
  %827 = trunc i64 %826 to i8
  store i8 %827, i8* %8, align 1, !tbaa !2449
  %828 = lshr i64 %808, 63
  %829 = xor i64 %826, %828
  %830 = add nuw nsw i64 %829, %826
  %831 = icmp eq i64 %830, 2
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %9, align 1, !tbaa !2450
  %833 = add i64 %809, 5
  store i64 %833, i64* %PC, align 8
  %834 = add i64 %808, 56
  %835 = inttoptr i64 %810 to i64*
  %836 = load i64, i64* %835, align 8
  store i64 %836, i64* %RBP, align 8, !tbaa !2428
  store i64 %834, i64* %RSP, align 8, !tbaa !2428
  %837 = add i64 %809, 6
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %834 to i64*
  %839 = load i64, i64* %838, align 8
  store i64 %839, i64* %PC, align 8, !tbaa !2428
  %840 = add i64 %808, 64
  store i64 %840, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %841 = add i64 %1034, -12
  store i64 4196149, i64* %PC, align 8
  %842 = inttoptr i64 %841 to i32*
  store i32 10, i32* %842, align 4
  %843 = load i64, i64* %RBP, align 8
  %844 = add i64 %843, -12
  %845 = load i64, i64* %PC, align 8
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC, align 8
  %847 = inttoptr i64 %844 to i32*
  %848 = load i32, i32* %847, align 4
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %850 = add i64 %845, -581
  %851 = add i64 %845, 8
  %852 = load i64, i64* %RSP, align 8, !tbaa !2428
  %853 = add i64 %852, -8
  %854 = inttoptr i64 %853 to i64*
  store i64 %851, i64* %854, align 8
  store i64 %853, i64* %RSP, align 8, !tbaa !2428
  store i64 %850, i64* %PC, align 8, !tbaa !2428
  %855 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %850, %struct.Memory* %MEMORY.1)
  %856 = load i64, i64* %RBP, align 8
  %857 = add i64 %856, -8
  %858 = load i64, i64* %PC, align 8
  %859 = add i64 %858, 4
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860, align 8
  store i64 %861, i64* %RAX, align 8, !tbaa !2428
  %862 = add i64 %861, 4
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = icmp ugt i64 %861, -5
  %864 = zext i1 %863 to i8
  store i8 %864, i8* %4, align 1, !tbaa !2432
  %865 = trunc i64 %862 to i32
  %866 = and i32 %865, 255
  %867 = tail call i32 @llvm.ctpop.i32(i32 %866) #8
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  store i8 %870, i8* %5, align 1, !tbaa !2446
  %871 = xor i64 %861, %862
  %872 = lshr i64 %871, 4
  %873 = trunc i64 %872 to i8
  %874 = and i8 %873, 1
  store i8 %874, i8* %6, align 1, !tbaa !2447
  %875 = icmp eq i64 %862, 0
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %7, align 1, !tbaa !2448
  %877 = lshr i64 %862, 63
  %878 = trunc i64 %877 to i8
  store i8 %878, i8* %8, align 1, !tbaa !2449
  %879 = lshr i64 %861, 63
  %880 = xor i64 %877, %879
  %881 = add nuw nsw i64 %880, %877
  %882 = icmp eq i64 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %9, align 1, !tbaa !2450
  %884 = add i64 %858, 15
  store i64 %884, i64* %PC, align 8
  store i64 %862, i64* %860, align 8
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %885 = add i64 %1034, -12
  store i64 4196399, i64* %PC, align 8
  %886 = inttoptr i64 %885 to i32*
  store i32 15, i32* %886, align 4
  %887 = load i64, i64* %RBP, align 8
  %888 = add i64 %887, -12
  %889 = load i64, i64* %PC, align 8
  %890 = add i64 %889, 3
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %888 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = zext i32 %892 to i64
  store i64 %893, i64* %RDI, align 8, !tbaa !2428
  %894 = add i64 %889, -831
  %895 = add i64 %889, 8
  %896 = load i64, i64* %RSP, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %895, i64* %898, align 8
  store i64 %897, i64* %RSP, align 8, !tbaa !2428
  store i64 %894, i64* %PC, align 8, !tbaa !2428
  %899 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %894, %struct.Memory* %MEMORY.1)
  %900 = load i64, i64* %RBP, align 8
  %901 = add i64 %900, -8
  %902 = load i64, i64* %PC, align 8
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %901 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = add i64 %905, 4
  store i64 %906, i64* %RCX, align 8, !tbaa !2428
  %907 = icmp ugt i64 %905, -5
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %4, align 1, !tbaa !2432
  %909 = trunc i64 %906 to i32
  %910 = and i32 %909, 255
  %911 = tail call i32 @llvm.ctpop.i32(i32 %910) #8
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  store i8 %914, i8* %5, align 1, !tbaa !2446
  %915 = xor i64 %905, %906
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  store i8 %918, i8* %6, align 1, !tbaa !2447
  %919 = icmp eq i64 %906, 0
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %7, align 1, !tbaa !2448
  %921 = lshr i64 %906, 63
  %922 = trunc i64 %921 to i8
  store i8 %922, i8* %8, align 1, !tbaa !2449
  %923 = lshr i64 %905, 63
  %924 = xor i64 %921, %923
  %925 = add nuw nsw i64 %924, %921
  %926 = icmp eq i64 %925, 2
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %9, align 1, !tbaa !2450
  %928 = add i64 %902, 15
  store i64 %928, i64* %PC, align 8
  store i64 %906, i64* %904, align 8
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %929 = add i64 %1034, -12
  store i64 4196649, i64* %PC, align 8
  %930 = inttoptr i64 %929 to i32*
  store i32 20, i32* %930, align 4
  %931 = load i64, i64* %RBP, align 8
  %932 = add i64 %931, -12
  %933 = load i64, i64* %PC, align 8
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %932 to i32*
  %936 = load i32, i32* %935, align 4
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RDI, align 8, !tbaa !2428
  %938 = add i64 %933, -1081
  %939 = add i64 %933, 8
  %940 = load i64, i64* %RSP, align 8, !tbaa !2428
  %941 = add i64 %940, -8
  %942 = inttoptr i64 %941 to i64*
  store i64 %939, i64* %942, align 8
  store i64 %941, i64* %RSP, align 8, !tbaa !2428
  store i64 %938, i64* %PC, align 8, !tbaa !2428
  %943 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %938, %struct.Memory* %MEMORY.1)
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, -8
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = add i64 %949, 4
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = icmp ugt i64 %949, -5
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %4, align 1, !tbaa !2432
  %953 = trunc i64 %950 to i32
  %954 = and i32 %953, 255
  %955 = tail call i32 @llvm.ctpop.i32(i32 %954) #8
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  store i8 %958, i8* %5, align 1, !tbaa !2446
  %959 = xor i64 %949, %950
  %960 = lshr i64 %959, 4
  %961 = trunc i64 %960 to i8
  %962 = and i8 %961, 1
  store i8 %962, i8* %6, align 1, !tbaa !2447
  %963 = icmp eq i64 %950, 0
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %7, align 1, !tbaa !2448
  %965 = lshr i64 %950, 63
  %966 = trunc i64 %965 to i8
  store i8 %966, i8* %8, align 1, !tbaa !2449
  %967 = lshr i64 %949, 63
  %968 = xor i64 %965, %967
  %969 = add nuw nsw i64 %968, %965
  %970 = icmp eq i64 %969, 2
  %971 = zext i1 %970 to i8
  store i8 %971, i8* %9, align 1, !tbaa !2450
  %972 = add i64 %946, 15
  store i64 %972, i64* %PC, align 8
  store i64 %950, i64* %948, align 8
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %973 = add i64 %1034, -12
  store i64 4195749, i64* %PC, align 8
  %974 = inttoptr i64 %973 to i32*
  store i32 2, i32* %974, align 4
  %975 = load i64, i64* %RBP, align 8
  %976 = add i64 %975, -12
  %977 = load i64, i64* %PC, align 8
  %978 = add i64 %977, 3
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %976 to i32*
  %980 = load i32, i32* %979, align 4
  %981 = zext i32 %980 to i64
  store i64 %981, i64* %RDI, align 8, !tbaa !2428
  %982 = add i64 %977, -181
  %983 = add i64 %977, 8
  %984 = load i64, i64* %RSP, align 8, !tbaa !2428
  %985 = add i64 %984, -8
  %986 = inttoptr i64 %985 to i64*
  store i64 %983, i64* %986, align 8
  store i64 %985, i64* %RSP, align 8, !tbaa !2428
  store i64 %982, i64* %PC, align 8, !tbaa !2428
  %987 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %982, %struct.Memory* %MEMORY.1)
  %988 = load i64, i64* %RBP, align 8
  %989 = add i64 %988, -8
  %990 = load i64, i64* %PC, align 8
  %991 = add i64 %990, 4
  store i64 %991, i64* %PC, align 8
  %992 = inttoptr i64 %989 to i64*
  %993 = load i64, i64* %992, align 8
  store i64 %993, i64* %RAX, align 8, !tbaa !2428
  %994 = add i64 %993, 4
  store i64 %994, i64* %RCX, align 8, !tbaa !2428
  %995 = icmp ugt i64 %993, -5
  %996 = zext i1 %995 to i8
  store i8 %996, i8* %4, align 1, !tbaa !2432
  %997 = trunc i64 %994 to i32
  %998 = and i32 %997, 255
  %999 = tail call i32 @llvm.ctpop.i32(i32 %998) #8
  %1000 = trunc i32 %999 to i8
  %1001 = and i8 %1000, 1
  %1002 = xor i8 %1001, 1
  store i8 %1002, i8* %5, align 1, !tbaa !2446
  %1003 = xor i64 %993, %994
  %1004 = lshr i64 %1003, 4
  %1005 = trunc i64 %1004 to i8
  %1006 = and i8 %1005, 1
  store i8 %1006, i8* %6, align 1, !tbaa !2447
  %1007 = icmp eq i64 %994, 0
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %7, align 1, !tbaa !2448
  %1009 = lshr i64 %994, 63
  %1010 = trunc i64 %1009 to i8
  store i8 %1010, i8* %8, align 1, !tbaa !2449
  %1011 = lshr i64 %993, 63
  %1012 = xor i64 %1009, %1011
  %1013 = add nuw nsw i64 %1012, %1009
  %1014 = icmp eq i64 %1013, 2
  %1015 = zext i1 %1014 to i8
  store i8 %1015, i8* %9, align 1, !tbaa !2450
  %1016 = add i64 %990, 15
  store i64 %1016, i64* %PC, align 8
  store i64 %994, i64* %992, align 8
  br label %block_400566

block_400566:                                     ; preds = %block_400a80, %block_400602, %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6, %block_4008c5
  %.sink7 = phi i64 [ 1351, %block_400a80 ], [ 201, %block_400602 ], [ 1101, %block_400986 ], [ 851, %block_40088c ], [ 601, %block_400792 ], [ 1501, %block_400b16 ], [ 351, %block_400698 ], [ 1251, %block_400a1c ], [ 101, %block_40059e ], [ 1001, %block_400922 ], [ 751, %block_400828 ], [ 501, %block_40072e ], [ 1401, %block_400ab2 ], [ 251, %block_400634 ], [ 1151, %block_4009b8 ], [ 651, %block_4007c4 ], [ 1551, %block_400b48 ], [ 401, %block_4006ca ], [ 1301, %block_400a4e ], [ 151, %block_4005d0 ], [ 1051, %block_400954 ], [ 801, %block_40085a ], [ 551, %block_400760 ], [ 1451, %block_400ae4 ], [ 301, %block_400666 ], [ 1201, %block_4009ea ], [ 51, %block_40056c ], [ 951, %block_4008f0 ], [ 701, %block_4007f6 ], [ 901, %block_4008c5 ]
  %MEMORY.1 = phi %struct.Memory* [ %1361, %block_400a80 ], [ %1317, %block_400602 ], [ %1273, %block_400986 ], [ %1229, %block_40088c ], [ %1185, %block_400792 ], [ %1141, %block_400b16 ], [ %1097, %block_400698 ], [ %1053, %block_400a1c ], [ %987, %block_40059e ], [ %943, %block_400922 ], [ %899, %block_400828 ], [ %855, %block_40072e ], [ %776, %block_400ab2 ], [ %732, %block_400634 ], [ %688, %block_4009b8 ], [ %642, %block_4007c4 ], [ %556, %block_400b48 ], [ %512, %block_4006ca ], [ %468, %block_400a4e ], [ %424, %block_4005d0 ], [ %380, %block_400954 ], [ %336, %block_40085a ], [ %292, %block_400760 ], [ %248, %block_400ae4 ], [ %204, %block_400666 ], [ %160, %block_4009ea ], [ %116, %block_40056c ], [ %72, %block_4008f0 ], [ %28, %block_4007f6 ], [ %598, %block_4008c5 ]
  %1017 = bitcast i64* %RAX to i32**
  %1018 = load i32*, i32** %1017, align 8
  %1019 = load i64, i64* %PC, align 8
  %1020 = add i64 %1019, 3
  store i64 %1020, i64* %PC, align 8
  %1021 = load i32, i32* %1018, align 4
  %1022 = sext i32 %1021 to i64
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = shl nsw i64 %1022, 3
  %1024 = add i64 %1023, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1025 = add i64 %1019, 11
  store i64 %1025, i64* %PC, align 8
  %1026 = inttoptr i64 %1024 to i64*
  %1027 = load i64, i64* %1026, align 8
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = load i64, i64* %RBP, align 8
  %1029 = add i64 %1028, -40
  %1030 = add i64 %1019, 15
  store i64 %1030, i64* %PC, align 8
  %1031 = inttoptr i64 %1029 to i64*
  store i64 %1027, i64* %1031, align 8
  %1032 = load i64, i64* %PC, align 8
  %1033 = sub i64 %1032, %.sink7
  %1034 = load i64, i64* %RBP, align 8
  %1035 = add i64 %1034, -40
  %1036 = add i64 %1033, 4
  store i64 %1036, i64* %PC, align 8
  %1037 = inttoptr i64 %1035 to i64*
  %1038 = load i64, i64* %1037, align 8
  store i64 %1038, i64* %RAX, align 8, !tbaa !2428
  store i64 %1038, i64* %PC, align 8, !tbaa !2428
  switch i64 %1038, label %1391 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %1039 = add i64 %1034, -12
  store i64 4196899, i64* %PC, align 8
  %1040 = inttoptr i64 %1039 to i32*
  store i32 25, i32* %1040, align 4
  %1041 = load i64, i64* %RBP, align 8
  %1042 = add i64 %1041, -12
  %1043 = load i64, i64* %PC, align 8
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1042 to i32*
  %1046 = load i32, i32* %1045, align 4
  %1047 = zext i32 %1046 to i64
  store i64 %1047, i64* %RDI, align 8, !tbaa !2428
  %1048 = add i64 %1043, -1331
  %1049 = add i64 %1043, 8
  %1050 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1051 = add i64 %1050, -8
  %1052 = inttoptr i64 %1051 to i64*
  store i64 %1049, i64* %1052, align 8
  store i64 %1051, i64* %RSP, align 8, !tbaa !2428
  store i64 %1048, i64* %PC, align 8, !tbaa !2428
  %1053 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1048, %struct.Memory* %MEMORY.1)
  %1054 = load i64, i64* %RBP, align 8
  %1055 = add i64 %1054, -8
  %1056 = load i64, i64* %PC, align 8
  %1057 = add i64 %1056, 4
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1055 to i64*
  %1059 = load i64, i64* %1058, align 8
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = add i64 %1059, 4
  store i64 %1060, i64* %RCX, align 8, !tbaa !2428
  %1061 = icmp ugt i64 %1059, -5
  %1062 = zext i1 %1061 to i8
  store i8 %1062, i8* %4, align 1, !tbaa !2432
  %1063 = trunc i64 %1060 to i32
  %1064 = and i32 %1063, 255
  %1065 = tail call i32 @llvm.ctpop.i32(i32 %1064) #8
  %1066 = trunc i32 %1065 to i8
  %1067 = and i8 %1066, 1
  %1068 = xor i8 %1067, 1
  store i8 %1068, i8* %5, align 1, !tbaa !2446
  %1069 = xor i64 %1059, %1060
  %1070 = lshr i64 %1069, 4
  %1071 = trunc i64 %1070 to i8
  %1072 = and i8 %1071, 1
  store i8 %1072, i8* %6, align 1, !tbaa !2447
  %1073 = icmp eq i64 %1060, 0
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %7, align 1, !tbaa !2448
  %1075 = lshr i64 %1060, 63
  %1076 = trunc i64 %1075 to i8
  store i8 %1076, i8* %8, align 1, !tbaa !2449
  %1077 = lshr i64 %1059, 63
  %1078 = xor i64 %1075, %1077
  %1079 = add nuw nsw i64 %1078, %1075
  %1080 = icmp eq i64 %1079, 2
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %9, align 1, !tbaa !2450
  %1082 = add i64 %1056, 15
  store i64 %1082, i64* %PC, align 8
  store i64 %1060, i64* %1058, align 8
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1083 = add i64 %1034, -12
  store i64 4195999, i64* %PC, align 8
  %1084 = inttoptr i64 %1083 to i32*
  store i32 7, i32* %1084, align 4
  %1085 = load i64, i64* %RBP, align 8
  %1086 = add i64 %1085, -12
  %1087 = load i64, i64* %PC, align 8
  %1088 = add i64 %1087, 3
  store i64 %1088, i64* %PC, align 8
  %1089 = inttoptr i64 %1086 to i32*
  %1090 = load i32, i32* %1089, align 4
  %1091 = zext i32 %1090 to i64
  store i64 %1091, i64* %RDI, align 8, !tbaa !2428
  %1092 = add i64 %1087, -431
  %1093 = add i64 %1087, 8
  %1094 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1095 = add i64 %1094, -8
  %1096 = inttoptr i64 %1095 to i64*
  store i64 %1093, i64* %1096, align 8
  store i64 %1095, i64* %RSP, align 8, !tbaa !2428
  store i64 %1092, i64* %PC, align 8, !tbaa !2428
  %1097 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1092, %struct.Memory* %MEMORY.1)
  %1098 = load i64, i64* %RBP, align 8
  %1099 = add i64 %1098, -8
  %1100 = load i64, i64* %PC, align 8
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC, align 8
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102, align 8
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1105 = icmp ugt i64 %1103, -5
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %4, align 1, !tbaa !2432
  %1107 = trunc i64 %1104 to i32
  %1108 = and i32 %1107, 255
  %1109 = tail call i32 @llvm.ctpop.i32(i32 %1108) #8
  %1110 = trunc i32 %1109 to i8
  %1111 = and i8 %1110, 1
  %1112 = xor i8 %1111, 1
  store i8 %1112, i8* %5, align 1, !tbaa !2446
  %1113 = xor i64 %1103, %1104
  %1114 = lshr i64 %1113, 4
  %1115 = trunc i64 %1114 to i8
  %1116 = and i8 %1115, 1
  store i8 %1116, i8* %6, align 1, !tbaa !2447
  %1117 = icmp eq i64 %1104, 0
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %7, align 1, !tbaa !2448
  %1119 = lshr i64 %1104, 63
  %1120 = trunc i64 %1119 to i8
  store i8 %1120, i8* %8, align 1, !tbaa !2449
  %1121 = lshr i64 %1103, 63
  %1122 = xor i64 %1119, %1121
  %1123 = add nuw nsw i64 %1122, %1119
  %1124 = icmp eq i64 %1123, 2
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %9, align 1, !tbaa !2450
  %1126 = add i64 %1100, 15
  store i64 %1126, i64* %PC, align 8
  store i64 %1104, i64* %1102, align 8
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1127 = add i64 %1034, -12
  store i64 4197149, i64* %PC, align 8
  %1128 = inttoptr i64 %1127 to i32*
  store i32 30, i32* %1128, align 4
  %1129 = load i64, i64* %RBP, align 8
  %1130 = add i64 %1129, -12
  %1131 = load i64, i64* %PC, align 8
  %1132 = add i64 %1131, 3
  store i64 %1132, i64* %PC, align 8
  %1133 = inttoptr i64 %1130 to i32*
  %1134 = load i32, i32* %1133, align 4
  %1135 = zext i32 %1134 to i64
  store i64 %1135, i64* %RDI, align 8, !tbaa !2428
  %1136 = add i64 %1131, -1581
  %1137 = add i64 %1131, 8
  %1138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1139 = add i64 %1138, -8
  %1140 = inttoptr i64 %1139 to i64*
  store i64 %1137, i64* %1140, align 8
  store i64 %1139, i64* %RSP, align 8, !tbaa !2428
  store i64 %1136, i64* %PC, align 8, !tbaa !2428
  %1141 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1136, %struct.Memory* %MEMORY.1)
  %1142 = load i64, i64* %RBP, align 8
  %1143 = add i64 %1142, -8
  %1144 = load i64, i64* %PC, align 8
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC, align 8
  %1146 = inttoptr i64 %1143 to i64*
  %1147 = load i64, i64* %1146, align 8
  store i64 %1147, i64* %RAX, align 8, !tbaa !2428
  %1148 = add i64 %1147, 4
  store i64 %1148, i64* %RCX, align 8, !tbaa !2428
  %1149 = icmp ugt i64 %1147, -5
  %1150 = zext i1 %1149 to i8
  store i8 %1150, i8* %4, align 1, !tbaa !2432
  %1151 = trunc i64 %1148 to i32
  %1152 = and i32 %1151, 255
  %1153 = tail call i32 @llvm.ctpop.i32(i32 %1152) #8
  %1154 = trunc i32 %1153 to i8
  %1155 = and i8 %1154, 1
  %1156 = xor i8 %1155, 1
  store i8 %1156, i8* %5, align 1, !tbaa !2446
  %1157 = xor i64 %1147, %1148
  %1158 = lshr i64 %1157, 4
  %1159 = trunc i64 %1158 to i8
  %1160 = and i8 %1159, 1
  store i8 %1160, i8* %6, align 1, !tbaa !2447
  %1161 = icmp eq i64 %1148, 0
  %1162 = zext i1 %1161 to i8
  store i8 %1162, i8* %7, align 1, !tbaa !2448
  %1163 = lshr i64 %1148, 63
  %1164 = trunc i64 %1163 to i8
  store i8 %1164, i8* %8, align 1, !tbaa !2449
  %1165 = lshr i64 %1147, 63
  %1166 = xor i64 %1163, %1165
  %1167 = add nuw nsw i64 %1166, %1163
  %1168 = icmp eq i64 %1167, 2
  %1169 = zext i1 %1168 to i8
  store i8 %1169, i8* %9, align 1, !tbaa !2450
  %1170 = add i64 %1144, 15
  store i64 %1170, i64* %PC, align 8
  store i64 %1148, i64* %1146, align 8
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1171 = add i64 %1034, -12
  store i64 4196249, i64* %PC, align 8
  %1172 = inttoptr i64 %1171 to i32*
  store i32 12, i32* %1172, align 4
  %1173 = load i64, i64* %RBP, align 8
  %1174 = add i64 %1173, -12
  %1175 = load i64, i64* %PC, align 8
  %1176 = add i64 %1175, 3
  store i64 %1176, i64* %PC, align 8
  %1177 = inttoptr i64 %1174 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = zext i32 %1178 to i64
  store i64 %1179, i64* %RDI, align 8, !tbaa !2428
  %1180 = add i64 %1175, -681
  %1181 = add i64 %1175, 8
  %1182 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1183 = add i64 %1182, -8
  %1184 = inttoptr i64 %1183 to i64*
  store i64 %1181, i64* %1184, align 8
  store i64 %1183, i64* %RSP, align 8, !tbaa !2428
  store i64 %1180, i64* %PC, align 8, !tbaa !2428
  %1185 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1180, %struct.Memory* %MEMORY.1)
  %1186 = load i64, i64* %RBP, align 8
  %1187 = add i64 %1186, -8
  %1188 = load i64, i64* %PC, align 8
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190, align 8
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = add i64 %1191, 4
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1193 = icmp ugt i64 %1191, -5
  %1194 = zext i1 %1193 to i8
  store i8 %1194, i8* %4, align 1, !tbaa !2432
  %1195 = trunc i64 %1192 to i32
  %1196 = and i32 %1195, 255
  %1197 = tail call i32 @llvm.ctpop.i32(i32 %1196) #8
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  store i8 %1200, i8* %5, align 1, !tbaa !2446
  %1201 = xor i64 %1191, %1192
  %1202 = lshr i64 %1201, 4
  %1203 = trunc i64 %1202 to i8
  %1204 = and i8 %1203, 1
  store i8 %1204, i8* %6, align 1, !tbaa !2447
  %1205 = icmp eq i64 %1192, 0
  %1206 = zext i1 %1205 to i8
  store i8 %1206, i8* %7, align 1, !tbaa !2448
  %1207 = lshr i64 %1192, 63
  %1208 = trunc i64 %1207 to i8
  store i8 %1208, i8* %8, align 1, !tbaa !2449
  %1209 = lshr i64 %1191, 63
  %1210 = xor i64 %1207, %1209
  %1211 = add nuw nsw i64 %1210, %1207
  %1212 = icmp eq i64 %1211, 2
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %9, align 1, !tbaa !2450
  %1214 = add i64 %1188, 15
  store i64 %1214, i64* %PC, align 8
  store i64 %1192, i64* %1190, align 8
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %1215 = add i64 %1034, -12
  store i64 4196499, i64* %PC, align 8
  %1216 = inttoptr i64 %1215 to i32*
  store i32 17, i32* %1216, align 4
  %1217 = load i64, i64* %RBP, align 8
  %1218 = add i64 %1217, -12
  %1219 = load i64, i64* %PC, align 8
  %1220 = add i64 %1219, 3
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1218 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = zext i32 %1222 to i64
  store i64 %1223, i64* %RDI, align 8, !tbaa !2428
  %1224 = add i64 %1219, -931
  %1225 = add i64 %1219, 8
  %1226 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1227 = add i64 %1226, -8
  %1228 = inttoptr i64 %1227 to i64*
  store i64 %1225, i64* %1228, align 8
  store i64 %1227, i64* %RSP, align 8, !tbaa !2428
  store i64 %1224, i64* %PC, align 8, !tbaa !2428
  %1229 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1224, %struct.Memory* %MEMORY.1)
  %1230 = load i64, i64* %RBP, align 8
  %1231 = add i64 %1230, -8
  %1232 = load i64, i64* %PC, align 8
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC, align 8
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234, align 8
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1237 = icmp ugt i64 %1235, -5
  %1238 = zext i1 %1237 to i8
  store i8 %1238, i8* %4, align 1, !tbaa !2432
  %1239 = trunc i64 %1236 to i32
  %1240 = and i32 %1239, 255
  %1241 = tail call i32 @llvm.ctpop.i32(i32 %1240) #8
  %1242 = trunc i32 %1241 to i8
  %1243 = and i8 %1242, 1
  %1244 = xor i8 %1243, 1
  store i8 %1244, i8* %5, align 1, !tbaa !2446
  %1245 = xor i64 %1235, %1236
  %1246 = lshr i64 %1245, 4
  %1247 = trunc i64 %1246 to i8
  %1248 = and i8 %1247, 1
  store i8 %1248, i8* %6, align 1, !tbaa !2447
  %1249 = icmp eq i64 %1236, 0
  %1250 = zext i1 %1249 to i8
  store i8 %1250, i8* %7, align 1, !tbaa !2448
  %1251 = lshr i64 %1236, 63
  %1252 = trunc i64 %1251 to i8
  store i8 %1252, i8* %8, align 1, !tbaa !2449
  %1253 = lshr i64 %1235, 63
  %1254 = xor i64 %1251, %1253
  %1255 = add nuw nsw i64 %1254, %1251
  %1256 = icmp eq i64 %1255, 2
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %9, align 1, !tbaa !2450
  %1258 = add i64 %1232, 15
  store i64 %1258, i64* %PC, align 8
  store i64 %1236, i64* %1234, align 8
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %1259 = add i64 %1034, -12
  store i64 4196749, i64* %PC, align 8
  %1260 = inttoptr i64 %1259 to i32*
  store i32 22, i32* %1260, align 4
  %1261 = load i64, i64* %RBP, align 8
  %1262 = add i64 %1261, -12
  %1263 = load i64, i64* %PC, align 8
  %1264 = add i64 %1263, 3
  store i64 %1264, i64* %PC, align 8
  %1265 = inttoptr i64 %1262 to i32*
  %1266 = load i32, i32* %1265, align 4
  %1267 = zext i32 %1266 to i64
  store i64 %1267, i64* %RDI, align 8, !tbaa !2428
  %1268 = add i64 %1263, -1181
  %1269 = add i64 %1263, 8
  %1270 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1271 = add i64 %1270, -8
  %1272 = inttoptr i64 %1271 to i64*
  store i64 %1269, i64* %1272, align 8
  store i64 %1271, i64* %RSP, align 8, !tbaa !2428
  store i64 %1268, i64* %PC, align 8, !tbaa !2428
  %1273 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1268, %struct.Memory* %MEMORY.1)
  %1274 = load i64, i64* %RBP, align 8
  %1275 = add i64 %1274, -8
  %1276 = load i64, i64* %PC, align 8
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1275 to i64*
  %1279 = load i64, i64* %1278, align 8
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  %1281 = icmp ugt i64 %1279, -5
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %4, align 1, !tbaa !2432
  %1283 = trunc i64 %1280 to i32
  %1284 = and i32 %1283, 255
  %1285 = tail call i32 @llvm.ctpop.i32(i32 %1284) #8
  %1286 = trunc i32 %1285 to i8
  %1287 = and i8 %1286, 1
  %1288 = xor i8 %1287, 1
  store i8 %1288, i8* %5, align 1, !tbaa !2446
  %1289 = xor i64 %1279, %1280
  %1290 = lshr i64 %1289, 4
  %1291 = trunc i64 %1290 to i8
  %1292 = and i8 %1291, 1
  store i8 %1292, i8* %6, align 1, !tbaa !2447
  %1293 = icmp eq i64 %1280, 0
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %7, align 1, !tbaa !2448
  %1295 = lshr i64 %1280, 63
  %1296 = trunc i64 %1295 to i8
  store i8 %1296, i8* %8, align 1, !tbaa !2449
  %1297 = lshr i64 %1279, 63
  %1298 = xor i64 %1295, %1297
  %1299 = add nuw nsw i64 %1298, %1295
  %1300 = icmp eq i64 %1299, 2
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %9, align 1, !tbaa !2450
  %1302 = add i64 %1276, 15
  store i64 %1302, i64* %PC, align 8
  store i64 %1280, i64* %1278, align 8
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %1303 = add i64 %1034, -12
  store i64 4195849, i64* %PC, align 8
  %1304 = inttoptr i64 %1303 to i32*
  store i32 4, i32* %1304, align 4
  %1305 = load i64, i64* %RBP, align 8
  %1306 = add i64 %1305, -12
  %1307 = load i64, i64* %PC, align 8
  %1308 = add i64 %1307, 3
  store i64 %1308, i64* %PC, align 8
  %1309 = inttoptr i64 %1306 to i32*
  %1310 = load i32, i32* %1309, align 4
  %1311 = zext i32 %1310 to i64
  store i64 %1311, i64* %RDI, align 8, !tbaa !2428
  %1312 = add i64 %1307, -281
  %1313 = add i64 %1307, 8
  %1314 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1315 = add i64 %1314, -8
  %1316 = inttoptr i64 %1315 to i64*
  store i64 %1313, i64* %1316, align 8
  store i64 %1315, i64* %RSP, align 8, !tbaa !2428
  store i64 %1312, i64* %PC, align 8, !tbaa !2428
  %1317 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1312, %struct.Memory* %MEMORY.1)
  %1318 = load i64, i64* %RBP, align 8
  %1319 = add i64 %1318, -8
  %1320 = load i64, i64* %PC, align 8
  %1321 = add i64 %1320, 4
  store i64 %1321, i64* %PC, align 8
  %1322 = inttoptr i64 %1319 to i64*
  %1323 = load i64, i64* %1322, align 8
  store i64 %1323, i64* %RAX, align 8, !tbaa !2428
  %1324 = add i64 %1323, 4
  store i64 %1324, i64* %RCX, align 8, !tbaa !2428
  %1325 = icmp ugt i64 %1323, -5
  %1326 = zext i1 %1325 to i8
  store i8 %1326, i8* %4, align 1, !tbaa !2432
  %1327 = trunc i64 %1324 to i32
  %1328 = and i32 %1327, 255
  %1329 = tail call i32 @llvm.ctpop.i32(i32 %1328) #8
  %1330 = trunc i32 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = xor i8 %1331, 1
  store i8 %1332, i8* %5, align 1, !tbaa !2446
  %1333 = xor i64 %1323, %1324
  %1334 = lshr i64 %1333, 4
  %1335 = trunc i64 %1334 to i8
  %1336 = and i8 %1335, 1
  store i8 %1336, i8* %6, align 1, !tbaa !2447
  %1337 = icmp eq i64 %1324, 0
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %7, align 1, !tbaa !2448
  %1339 = lshr i64 %1324, 63
  %1340 = trunc i64 %1339 to i8
  store i8 %1340, i8* %8, align 1, !tbaa !2449
  %1341 = lshr i64 %1323, 63
  %1342 = xor i64 %1339, %1341
  %1343 = add nuw nsw i64 %1342, %1339
  %1344 = icmp eq i64 %1343, 2
  %1345 = zext i1 %1344 to i8
  store i8 %1345, i8* %9, align 1, !tbaa !2450
  %1346 = add i64 %1320, 15
  store i64 %1346, i64* %PC, align 8
  store i64 %1324, i64* %1322, align 8
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %1347 = add i64 %1034, -12
  store i64 4196999, i64* %PC, align 8
  %1348 = inttoptr i64 %1347 to i32*
  store i32 27, i32* %1348, align 4
  %1349 = load i64, i64* %RBP, align 8
  %1350 = add i64 %1349, -12
  %1351 = load i64, i64* %PC, align 8
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC, align 8
  %1353 = inttoptr i64 %1350 to i32*
  %1354 = load i32, i32* %1353, align 4
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RDI, align 8, !tbaa !2428
  %1356 = add i64 %1351, -1431
  %1357 = add i64 %1351, 8
  %1358 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1359 = add i64 %1358, -8
  %1360 = inttoptr i64 %1359 to i64*
  store i64 %1357, i64* %1360, align 8
  store i64 %1359, i64* %RSP, align 8, !tbaa !2428
  store i64 %1356, i64* %PC, align 8, !tbaa !2428
  %1361 = tail call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* nonnull %0, i64 %1356, %struct.Memory* %MEMORY.1)
  %1362 = load i64, i64* %RBP, align 8
  %1363 = add i64 %1362, -8
  %1364 = load i64, i64* %PC, align 8
  %1365 = add i64 %1364, 4
  store i64 %1365, i64* %PC, align 8
  %1366 = inttoptr i64 %1363 to i64*
  %1367 = load i64, i64* %1366, align 8
  store i64 %1367, i64* %RAX, align 8, !tbaa !2428
  %1368 = add i64 %1367, 4
  store i64 %1368, i64* %RCX, align 8, !tbaa !2428
  %1369 = icmp ugt i64 %1367, -5
  %1370 = zext i1 %1369 to i8
  store i8 %1370, i8* %4, align 1, !tbaa !2432
  %1371 = trunc i64 %1368 to i32
  %1372 = and i32 %1371, 255
  %1373 = tail call i32 @llvm.ctpop.i32(i32 %1372) #8
  %1374 = trunc i32 %1373 to i8
  %1375 = and i8 %1374, 1
  %1376 = xor i8 %1375, 1
  store i8 %1376, i8* %5, align 1, !tbaa !2446
  %1377 = xor i64 %1367, %1368
  %1378 = lshr i64 %1377, 4
  %1379 = trunc i64 %1378 to i8
  %1380 = and i8 %1379, 1
  store i8 %1380, i8* %6, align 1, !tbaa !2447
  %1381 = icmp eq i64 %1368, 0
  %1382 = zext i1 %1381 to i8
  store i8 %1382, i8* %7, align 1, !tbaa !2448
  %1383 = lshr i64 %1368, 63
  %1384 = trunc i64 %1383 to i8
  store i8 %1384, i8* %8, align 1, !tbaa !2449
  %1385 = lshr i64 %1367, 63
  %1386 = xor i64 %1383, %1385
  %1387 = add nuw nsw i64 %1386, %1383
  %1388 = icmp eq i64 %1387, 2
  %1389 = zext i1 %1388 to i8
  store i8 %1389, i8* %9, align 1, !tbaa !2450
  %1390 = add i64 %1364, 15
  store i64 %1390, i64* %PC, align 8
  store i64 %1368, i64* %1366, align 8
  br label %block_400566

; <label>:1391:                                   ; preds = %block_400566
  %1392 = tail call %struct.Memory* @__remill_jump(%struct.State* nonnull %0, i64 %1038, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1392
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004b0___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4004b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4004b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400cd0___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400cd0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400cd0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400c60___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400c60___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400c60___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b80_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_602150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_602138_printf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @eval() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @eval_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400510_eval(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4003c8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4003c8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400cd4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400cd4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @execute() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4004f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @execute_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4004f0_execute(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_400c60___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_400cd0___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
