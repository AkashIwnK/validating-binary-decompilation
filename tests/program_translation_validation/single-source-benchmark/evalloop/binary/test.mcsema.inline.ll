; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003c8__init_type = type <{ [23 x i8] }>
%seg_4003e0__plt_type = type <{ [32 x i8] }>
%seg_400400__text_type = type <{ [2258 x i8] }>
%seg_400cd4__fini_type = type <{ [9 x i8] }>
%seg_400ce0__rodata_type = type <{ [264 x i8], [9 x i8] }>
%seg_400df4__eh_frame_hdr_type = type <{ [76 x i8] }>
%seg_400e40__eh_frame_type = type <{ [312 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_602020__data_type = type <{ [16 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%__bss_start_type = type <{ [4 x i8] }>
%sum_type = type <{ [4 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003c8__init = internal constant %seg_4003c8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05%\1C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4003e0__plt = internal constant %seg_4003e0__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\22\1C \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400400__text = internal constant %seg_400400__text_type <{ [2258 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\D0\0C@\00H\C7\C1`\0C@\00H\C7\C7\80\0B@\00\FF\15\C6\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80!`\00H=0!`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0!`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0!`\00UH\81\EE0!`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0!`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=y\1C \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05g\1C \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\8B}\FC\03<%4!`\00\89<%4!`\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC0H\89}\F8\C7E\F4\00\00\00\00H\8BE\F8H\89\C1H\83\C1\04H\89M\F8\8B\10\89\D0H\89\C1H\83\E9\1FH\89E\E8H\89M\E0\0F\87/\06\00\00H\8BE\E8H\8B\0C\C5\E8\0C@\00\FF\E1\C7E\F4\00\00\00\00H\83\C40]\C3H\8BE\D8\FF\E0\C7E\F4\01\00\00\00\8B}\F4\E8u\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\C8\FF\FF\FF\C7E\F4\02\00\00\00\8B}\F4\E8C\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\96\FF\FF\FF\C7E\F4\03\00\00\00\8B}\F4\E8\11\FF\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9d\FF\FF\FF\C7E\F4\04\00\00\00\8B}\F4\E8\DF\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E92\FF\FF\FF\C7E\F4\05\00\00\00\8B}\F4\E8\AD\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\00\FF\FF\FF\C7E\F4\06\00\00\00\8B}\F4\E8{\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\CE\FE\FF\FF\C7E\F4\07\00\00\00\8B}\F4\E8I\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\9C\FE\FF\FF\C7E\F4\08\00\00\00\8B}\F4\E8\17\FE\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9j\FE\FF\FF\C7E\F4\09\00\00\00\8B}\F4\E8\E5\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E98\FE\FF\FF\C7E\F4\0A\00\00\00\8B}\F4\E8\B3\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\06\FE\FF\FF\C7E\F4\0B\00\00\00\8B}\F4\E8\81\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\D4\FD\FF\FF\C7E\F4\0C\00\00\00\8B}\F4\E8O\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A2\FD\FF\FF\C7E\F4\0D\00\00\00\8B}\F4\E8\1D\FD\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9p\FD\FF\FF\C7E\F4\0E\00\00\00\8B}\F4\E8\EB\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9>\FD\FF\FF\C7E\F4\0F\00\00\00\8B}\F4\E8\B9\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\0C\FD\FF\FF\C7E\F4\10\00\00\00\8B}\F4\E8\87\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\DA\FC\FF\FF\C7E\F4\11\00\00\00\8B}\F4\E8U\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\A8\FC\FF\FF\C7E\F4\12\00\00\00\8B}\F4\E8#\FC\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9v\FC\FF\FF\C7E\F4\13\00\00\00\8B}\F4\E8\F1\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9D\FC\FF\FF\C7E\F4\14\00\00\00\8B}\F4\E8\BF\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\12\FC\FF\FF\C7E\F4\15\00\00\00\8B}\F4\E8\8D\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E0\FB\FF\FF\C7E\F4\16\00\00\00\8B}\F4\E8[\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\AE\FB\FF\FF\C7E\F4\17\00\00\00\8B}\F4\E8)\FB\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9|\FB\FF\FF\C7E\F4\18\00\00\00\8B}\F4\E8\F7\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9J\FB\FF\FF\C7E\F4\19\00\00\00\8B}\F4\E8\C5\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\18\FB\FF\FF\C7E\F4\1A\00\00\00\8B}\F4\E8\93\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\E6\FA\FF\FF\C7E\F4\1B\00\00\00\8B}\F4\E8a\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\B4\FA\FF\FF\C7E\F4\1C\00\00\00\8B}\F4\E8/\FA\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\82\FA\FF\FF\C7E\F4\1D\00\00\00\8B}\F4\E8\FD\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9P\FA\FF\FF\C7E\F4\1E\00\00\00\8B}\F4\E8\CB\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\1E\FA\FF\FF\C7E\F4\1F\00\00\00\8B}\F4\E8\99\F9\FF\FFH\8BE\F8H\89\C1H\83\C1\04H\89M\F8Hc\00H\8B\04\C50 `\00H\89E\D8\E9\EC\F9\FF\FF\E9\A4\F9\FF\FF\90UH\89\E5H\81\EC  \00\00\C7E\FC\00\00\00\00\C7E\F8\00\08\00\00\C7\85\EC\DF\FF\FF\00\00\00\00\81\BD\EC\DF\FF\FF\FF\07\00\00\0F\8DA\00\00\00\B8\1F\00\00\00\8B\8D\EC\DF\FF\FF\89\85\E4\DF\FF\FF\89\C8\99\8B\8D\E4\DF\FF\FF\F7\F9\83\C2\01Hc\B5\EC\DF\FF\FF\89\94\B5\F0\DF\FF\FF\8B\85\EC\DF\FF\FF\83\C0\01\89\85\EC\DF\FF\FF\E9\AF\FF\FF\FF\C7E\EC\00\00\00\00\C7\85\E8\DF\FF\FF\00\00\00\00\81\BD\E8\DF\FF\FF\A0\86\01\00\0F\8D \00\00\00H\8D\BD\F0\DF\FF\FF\E8\EF\F8\FF\FF\8B\85\E8\DF\FF\FF\83\C0\01\89\85\E8\DF\FF\FF\E9\D0\FF\FF\FFH\BF\E8\0D@\00\00\00\00\00\8B4%4!`\00\B0\00\E8\A3\F7\FF\FF1\F6\89\85\E0\DF\FF\FF\89\F0H\81\C4  \00\00]\C3AWAVI\89\D7AUATL\8D%~\11 \00UH\8D-~\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E87\F7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_400cd4__fini = internal constant %seg_400cd4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_400ce0__rodata = internal constant %seg_400ce0__rodata_type <{ [264 x i8] c"\01\00\02\00\00\00\00\00`\05@\00\00\00\00\00s\05@\00\00\00\00\00\A5\05@\00\00\00\00\00\D7\05@\00\00\00\00\00\09\06@\00\00\00\00\00;\06@\00\00\00\00\00m\06@\00\00\00\00\00\9F\06@\00\00\00\00\00\D1\06@\00\00\00\00\00\03\07@\00\00\00\00\005\07@\00\00\00\00\00g\07@\00\00\00\00\00\99\07@\00\00\00\00\00\CB\07@\00\00\00\00\00\FD\07@\00\00\00\00\00/\08@\00\00\00\00\00a\08@\00\00\00\00\00\93\08@\00\00\00\00\00\C5\08@\00\00\00\00\00\F7\08@\00\00\00\00\00)\09@\00\00\00\00\00[\09@\00\00\00\00\00\8D\09@\00\00\00\00\00\BF\09@\00\00\00\00\00\F1\09@\00\00\00\00\00#\0A@\00\00\00\00\00U\0A@\00\00\00\00\00\87\0A@\00\00\00\00\00\B9\0A@\00\00\00\00\00\EB\0A@\00\00\00\00\00\1D\0B@\00\00\00\00\00O\0B@\00\00\00\00\00", [9 x i8] c"Sum: %u\0A\00" }>
@seg_400df4__eh_frame_hdr = internal constant %seg_400df4__eh_frame_hdr_type <{ [76 x i8] c"\01\1B\03;H\00\00\00\08\00\00\00\EC\F5\FF\FF\A4\00\00\00\0C\F6\FF\FFd\00\00\00<\F6\FF\FF\90\00\00\00\FC\F6\FF\FF\CC\00\00\00\1C\F7\FF\FF\E8\00\00\00\8C\FD\FF\FF\04\01\00\00l\FE\FF\FF$\01\00\00\DC\FE\FF\FFl\01\00\00" }>
@seg_400e40__eh_frame = internal constant %seg_400e40__eh_frame_type <{ [312 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\A0\F5\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\A4\F5\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00@\F5\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00(\F6\FF\FF\1A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00,\F6\FF\FFo\06\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\90\00\00\00\80\FC\FF\FF\E0\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\B0\00\00\00@\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\F8\00\00\00h\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004b0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_602020__data = internal global %seg_602020__data_type <{ [16 x i8] zeroinitializer, i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 345), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 364), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 414), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 464), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 514), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 564), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 614), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 664), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 714), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 764), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 814), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 864), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 914), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 964), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1014), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1064), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1114), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1164), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1214), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1264), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1314), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1364), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1414), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1464), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1514), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1564), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1614), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1664), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1714), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1764), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1814), i64 add (i64 ptrtoint (%seg_400400__text_type* @seg_400400__text to i64), i64 1864) }>
@__bss_start = global %__bss_start_type zeroinitializer
@sum = global %sum_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400cd0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400c60___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @eval_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @execute_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400510_eval_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4009bf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4009bf

block_4006fc:                                     ; preds = %block_4009bf
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %176)
  ret %struct.Memory* %25

block_4007f6:                                     ; preds = %block_4009bf
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 14, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4007fd(%struct.State* %0, i64 %31, %struct.Memory* %176)
  ret %struct.Memory* %32

block_4008f0:                                     ; preds = %block_4009bf
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 19, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_4008f7(%struct.State* %0, i64 %38, %struct.Memory* %176)
  ret %struct.Memory* %39

block_40056c:                                     ; preds = %block_4009bf
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 1, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %45, %struct.Memory* %176)
  ret %struct.Memory* %46

block_4009ea:                                     ; preds = %block_4009bf
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 24, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %52, %struct.Memory* %176)
  ret %struct.Memory* %53

block_400666:                                     ; preds = %block_4009bf
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 6, i32* %58
  %59 = load i64, i64* %PC
  %60 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %59, %struct.Memory* %176)
  ret %struct.Memory* %60

block_400ae4:                                     ; preds = %block_4009bf
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 12
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to i32*
  store i32 29, i32* %65
  %66 = load i64, i64* %PC
  %67 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %66, %struct.Memory* %176)
  ret %struct.Memory* %67

block_400760:                                     ; preds = %block_4009bf
  %68 = load i64, i64* %RBP
  %69 = sub i64 %68, 12
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %69 to i32*
  store i32 11, i32* %72
  %73 = load i64, i64* %PC
  %74 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %73, %struct.Memory* %176)
  ret %struct.Memory* %74

block_40085a:                                     ; preds = %block_4009bf
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 12
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  store i32 16, i32* %79
  %80 = load i64, i64* %PC
  %81 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %80, %struct.Memory* %176)
  ret %struct.Memory* %81

block_4005d0:                                     ; preds = %block_4009bf
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 12
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  store i32 3, i32* %86
  %87 = load i64, i64* %PC
  %88 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %87, %struct.Memory* %176)
  ret %struct.Memory* %88

block_400a4e:                                     ; preds = %block_4009bf
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 12
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i32*
  store i32 26, i32* %93
  %94 = load i64, i64* %PC
  %95 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %94, %struct.Memory* %176)
  ret %struct.Memory* %95

block_4006ca:                                     ; preds = %block_4009bf
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 12
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 8, i32* %100
  %101 = load i64, i64* %PC
  %102 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %101, %struct.Memory* %176)
  ret %struct.Memory* %102

block_400b48:                                     ; preds = %block_4009bf
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 12
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 31, i32* %107
  %108 = load i64, i64* %PC
  %109 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %108, %struct.Memory* %176)
  ret %struct.Memory* %109

block_4007c4:                                     ; preds = %block_4009bf
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 12
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 7
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i32*
  store i32 13, i32* %114
  %115 = load i64, i64* %PC
  %116 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %115, %struct.Memory* %176)
  ret %struct.Memory* %116

block_4008be:                                     ; preds = %block_4009bf
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 18, i32* %121
  %122 = load i64, i64* %PC
  %123 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %122, %struct.Memory* %176)
  ret %struct.Memory* %123

block_4009b8:                                     ; preds = %block_4009bf
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 23, i32* %128
  br label %block_4009bf

block_400634:                                     ; preds = %block_4009bf
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 12
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 7
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i32*
  store i32 5, i32* %133
  %134 = load i64, i64* %PC
  %135 = tail call %struct.Memory* @sub_40063b(%struct.State* %0, i64 %134, %struct.Memory* %176)
  ret %struct.Memory* %135

block_400559:                                     ; preds = %block_4009bf
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 12
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 7
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  store i32 0, i32* %140
  %141 = load i64, i64* %PC
  %142 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %141, %struct.Memory* %176)
  ret %struct.Memory* %142

block_400ab2:                                     ; preds = %block_4009bf
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 12
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 7
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i32*
  store i32 28, i32* %147
  %148 = load i64, i64* %PC
  %149 = tail call %struct.Memory* @sub_400ab9(%struct.State* %0, i64 %148, %struct.Memory* %176)
  ret %struct.Memory* %149

block_40072e:                                     ; preds = %block_4009bf
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 12
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 7
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 10, i32* %154
  %155 = load i64, i64* %PC
  %156 = tail call %struct.Memory* @sub_400735(%struct.State* %0, i64 %155, %struct.Memory* %176)
  ret %struct.Memory* %156

block_4009bf:                                     ; preds = %block_4009b8, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %176, %block_4009b8 ]
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 12
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = sub i64 %164, 1234
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %167, i64* %173
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %174, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %175, %struct.Memory* %MEMORY.0)
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 8
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RCX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = add i64 4, %186
  store i64 %189, i64* %RCX, align 8, !tbaa !2428
  %190 = icmp ult i64 %189, %186
  %191 = icmp ult i64 %189, 4
  %192 = or i1 %190, %191
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %193, i8* %194, align 1, !tbaa !2432
  %195 = trunc i64 %189 to i32
  %196 = and i32 %195, 255
  %197 = call i32 @llvm.ctpop.i32(i32 %196) #16
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %200, i8* %201, align 1, !tbaa !2446
  %202 = xor i64 4, %186
  %203 = xor i64 %202, %189
  %204 = lshr i64 %203, 4
  %205 = trunc i64 %204 to i8
  %206 = and i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = icmp eq i64 %189, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = lshr i64 %189, 63
  %212 = trunc i64 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i64 %186, 63
  %215 = xor i64 %211, %214
  %216 = add nuw nsw i64 %215, %211
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %218, i8* %219, align 1, !tbaa !2450
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %RCX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %221 to i64*
  store i64 %222, i64* %225
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = mul i64 %232, 8
  %234 = add i64 %233, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 8
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 40
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %PC
  %246 = sub i64 %245, 1151
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 5
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %246, i64* %249, align 8, !tbaa !2428
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 40
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 2
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %256, i64* %259, align 8, !tbaa !2428
  %260 = load i64, i64* %PC
  switch i64 %260, label %345 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4195792, label %block_4005d0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196692, label %block_400954
    i64 4196642, label %block_400922
  ]

block_400828:                                     ; preds = %block_4009bf
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 12
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 7
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i32*
  store i32 15, i32* %265
  %266 = load i64, i64* %PC
  %267 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %266, %struct.Memory* %176)
  ret %struct.Memory* %267

block_400954:                                     ; preds = %block_4009bf
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 12
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 7
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i32*
  store i32 21, i32* %272
  %273 = load i64, i64* %PC
  %274 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %273, %struct.Memory* %176)
  ret %struct.Memory* %274

block_400922:                                     ; preds = %block_4009bf
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 12
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 7
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i32*
  store i32 20, i32* %279
  %280 = load i64, i64* %PC
  %281 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %280, %struct.Memory* %176)
  ret %struct.Memory* %281

block_40059e:                                     ; preds = %block_4009bf
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 12
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 7
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i32*
  store i32 2, i32* %286
  %287 = load i64, i64* %PC
  %288 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %287, %struct.Memory* %176)
  ret %struct.Memory* %288

block_400a1c:                                     ; preds = %block_4009bf
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 12
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 7
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  store i32 25, i32* %293
  %294 = load i64, i64* %PC
  %295 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %294, %struct.Memory* %176)
  ret %struct.Memory* %295

block_400698:                                     ; preds = %block_4009bf
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 12
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  store i32 7, i32* %300
  %301 = load i64, i64* %PC
  %302 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %301, %struct.Memory* %176)
  ret %struct.Memory* %302

block_400b16:                                     ; preds = %block_4009bf
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 12
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 7
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  store i32 30, i32* %307
  %308 = load i64, i64* %PC
  %309 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %308, %struct.Memory* %176)
  ret %struct.Memory* %309

block_400792:                                     ; preds = %block_4009bf
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 12
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 7
  store i64 %313, i64* %PC
  %314 = inttoptr i64 %311 to i32*
  store i32 12, i32* %314
  %315 = load i64, i64* %PC
  %316 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %315, %struct.Memory* %176)
  ret %struct.Memory* %316

block_40088c:                                     ; preds = %block_4009bf
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 12
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 7
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  store i32 17, i32* %321
  %322 = load i64, i64* %PC
  %323 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %322, %struct.Memory* %176)
  ret %struct.Memory* %323

block_400986:                                     ; preds = %block_4009bf
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 12
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %325 to i32*
  store i32 22, i32* %328
  %329 = load i64, i64* %PC
  %330 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %329, %struct.Memory* %176)
  ret %struct.Memory* %330

block_400602:                                     ; preds = %block_4009bf
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 12
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i32*
  store i32 4, i32* %335
  %336 = load i64, i64* %PC
  %337 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %336, %struct.Memory* %176)
  ret %struct.Memory* %337

block_400a80:                                     ; preds = %block_4009bf
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 12
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 7
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  store i32 27, i32* %342
  %343 = load i64, i64* %PC
  %344 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %343, %struct.Memory* %176)
  ret %struct.Memory* %344

; <label>:345:                                    ; preds = %block_4009bf
  %346 = load i64, i64* %PC
  %347 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %346, %struct.Memory* %176)
  ret %struct.Memory* %347
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007fd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4007fd

block_4007fd:                                     ; preds = %block_4007f6, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007f6 ]
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  %24 = load i32, i32* %23
  %25 = zext i32 %24 to i64
  store i64 %25, i64* %RDI, align 8, !tbaa !2428
  %26 = load i64, i64* %PC
  %27 = sub i64 %26, 784
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 5
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %27, i64* %36, align 8, !tbaa !2428
  %37 = load i64, i64* %PC
  %38 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %37, %struct.Memory* %MEMORY.0)
  %39 = load i64, i64* %RBP
  %40 = sub i64 %39, 8
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %40 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = load i64, i64* %RAX
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC
  store i64 %45, i64* %RCX, align 8, !tbaa !2428
  %48 = load i64, i64* %RCX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = add i64 4, %48
  store i64 %51, i64* %RCX, align 8, !tbaa !2428
  %52 = icmp ult i64 %51, %48
  %53 = icmp ult i64 %51, 4
  %54 = or i1 %52, %53
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %55, i8* %56, align 1, !tbaa !2432
  %57 = trunc i64 %51 to i32
  %58 = and i32 %57, 255
  %59 = call i32 @llvm.ctpop.i32(i32 %58) #16
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %62, i8* %63, align 1, !tbaa !2446
  %64 = xor i64 4, %48
  %65 = xor i64 %64, %51
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = icmp eq i64 %51, 0
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = lshr i64 %51, 63
  %74 = trunc i64 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %48, 63
  %77 = xor i64 %73, %76
  %78 = add nuw nsw i64 %77, %73
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %80, i8* %81, align 1, !tbaa !2450
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 8
  %84 = load i64, i64* %RCX
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RAX
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %88 to i32*
  %92 = load i32, i32* %91
  %93 = sext i32 %92 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = load i64, i64* %RAX
  %95 = mul i64 %94, 8
  %96 = add i64 %95, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 8
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 40
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %PC
  %108 = sub i64 %107, 701
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 5
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %108, i64* %111, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 12
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 7
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  store i32 9, i32* %116
  %117 = load i64, i64* %PC
  %118 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %117, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %118

block_4008f0:                                     ; preds = %block_400566
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 12
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 7
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  store i32 19, i32* %123
  %124 = load i64, i64* %PC
  %125 = tail call %struct.Memory* @sub_4008f7(%struct.State* %0, i64 %124, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %125

block_4009ea:                                     ; preds = %block_400566
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 12
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 24, i32* %130
  %131 = load i64, i64* %PC
  %132 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %131, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %132

block_4007f6:                                     ; preds = %block_400566
  %133 = load i64, i64* %RBP
  %134 = sub i64 %133, 12
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 7
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %134 to i32*
  store i32 14, i32* %137
  br label %block_4007fd

block_400566:                                     ; preds = %block_4009b8, %block_4007fd
  %MEMORY.1 = phi %struct.Memory* [ %38, %block_4007fd ], [ %264, %block_4009b8 ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 40
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 2
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %147, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  switch i64 %148, label %436 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196342, label %block_4007f6
    i64 4196192, label %block_400760
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400666:                                     ; preds = %block_400566
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 12
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 7
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i32*
  store i32 6, i32* %153
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %154, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %155

block_400ae4:                                     ; preds = %block_400566
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 12
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 7
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  store i32 29, i32* %160
  %161 = load i64, i64* %PC
  %162 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %161, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %162

block_40085a:                                     ; preds = %block_400566
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 12
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 7
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i32*
  store i32 16, i32* %167
  %168 = load i64, i64* %PC
  %169 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %168, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %169

block_400954:                                     ; preds = %block_400566
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 12
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 7
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i32*
  store i32 21, i32* %174
  %175 = load i64, i64* %PC
  %176 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %175, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %176

block_4005d0:                                     ; preds = %block_400566
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 12
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 7
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %178 to i32*
  store i32 3, i32* %181
  %182 = load i64, i64* %PC
  %183 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %182, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %183

block_400a4e:                                     ; preds = %block_400566
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 12
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 7
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i32*
  store i32 26, i32* %188
  %189 = load i64, i64* %PC
  %190 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %189, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %190

block_400760:                                     ; preds = %block_400566
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 12
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 7
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i32*
  store i32 11, i32* %195
  %196 = load i64, i64* %PC
  %197 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %196, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %197

block_400559:                                     ; preds = %block_400566
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 12
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 7
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  store i32 0, i32* %202
  %203 = load i64, i64* %PC
  %204 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %203, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %204

block_4006ca:                                     ; preds = %block_400566
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 12
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  store i32 8, i32* %209
  %210 = load i64, i64* %PC
  %211 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %210, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %211

block_400b48:                                     ; preds = %block_400566
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 12
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 7
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i32*
  store i32 31, i32* %216
  %217 = load i64, i64* %PC
  %218 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %217, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %218

block_4007c4:                                     ; preds = %block_400566
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 12
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 7
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i32*
  store i32 13, i32* %223
  %224 = load i64, i64* %PC
  %225 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %224, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %225

block_40056c:                                     ; preds = %block_400566
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 12
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  store i32 1, i32* %230
  %231 = load i64, i64* %PC
  %232 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %231, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %232

block_4008be:                                     ; preds = %block_400566
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 12
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 7
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i32*
  store i32 18, i32* %237
  %238 = load i64, i64* %PC
  %239 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %239

block_4009b8:                                     ; preds = %block_400566
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 12
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 7
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i32*
  store i32 23, i32* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 12
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* %PC
  %253 = sub i64 %252, 1234
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 5
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %259 = load i64, i64* %258, align 8, !tbaa !2428
  %260 = add i64 %259, -8
  %261 = inttoptr i64 %260 to i64*
  store i64 %255, i64* %261
  store i64 %260, i64* %258, align 8, !tbaa !2428
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %253, i64* %262, align 8, !tbaa !2428
  %263 = load i64, i64* %PC
  %264 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %263, %struct.Memory* %MEMORY.1)
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 8
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %266 to i64*
  %270 = load i64, i64* %269
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = load i64, i64* %RAX
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %274 = load i64, i64* %RCX
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = add i64 4, %274
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = icmp ult i64 %277, %274
  %279 = icmp ult i64 %277, 4
  %280 = or i1 %278, %279
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %281, i8* %282, align 1, !tbaa !2432
  %283 = trunc i64 %277 to i32
  %284 = and i32 %283, 255
  %285 = call i32 @llvm.ctpop.i32(i32 %284) #16
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = xor i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %288, i8* %289, align 1, !tbaa !2446
  %290 = xor i64 4, %274
  %291 = xor i64 %290, %277
  %292 = lshr i64 %291, 4
  %293 = trunc i64 %292 to i8
  %294 = and i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %294, i8* %295, align 1, !tbaa !2447
  %296 = icmp eq i64 %277, 0
  %297 = zext i1 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %297, i8* %298, align 1, !tbaa !2448
  %299 = lshr i64 %277, 63
  %300 = trunc i64 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %300, i8* %301, align 1, !tbaa !2449
  %302 = lshr i64 %274, 63
  %303 = xor i64 %299, %302
  %304 = add nuw nsw i64 %303, %299
  %305 = icmp eq i64 %304, 2
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %306, i8* %307, align 1, !tbaa !2450
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 8
  %310 = load i64, i64* %RCX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %309 to i64*
  store i64 %310, i64* %313
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  %318 = load i32, i32* %317
  %319 = sext i32 %318 to i64
  store i64 %319, i64* %RAX, align 8, !tbaa !2428
  %320 = load i64, i64* %RAX
  %321 = mul i64 %320, 8
  %322 = add i64 %321, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 8
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i64*
  %326 = load i64, i64* %325
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 40
  %329 = load i64, i64* %RAX
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 4
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %328 to i64*
  store i64 %329, i64* %332
  %333 = load i64, i64* %PC
  %334 = sub i64 %333, 1151
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %334, i64* %337, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 12
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 7
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  store i32 5, i32* %342
  %343 = load i64, i64* %PC
  %344 = tail call %struct.Memory* @sub_40063b(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %344

block_400ab2:                                     ; preds = %block_400566
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 12
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 7
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i32*
  store i32 28, i32* %349
  %350 = load i64, i64* %PC
  %351 = tail call %struct.Memory* @sub_400ab9(%struct.State* %0, i64 %350, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %351

block_40072e:                                     ; preds = %block_400566
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 12
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 7
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  store i32 10, i32* %356
  %357 = load i64, i64* %PC
  %358 = tail call %struct.Memory* @sub_400735(%struct.State* %0, i64 %357, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %358

block_400828:                                     ; preds = %block_400566
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 12
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 7
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i32*
  store i32 15, i32* %363
  %364 = load i64, i64* %PC
  %365 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %364, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %365

block_400922:                                     ; preds = %block_400566
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 12
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 7
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  store i32 20, i32* %370
  %371 = load i64, i64* %PC
  %372 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %371, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %372

block_40059e:                                     ; preds = %block_400566
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 12
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 7
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i32*
  store i32 2, i32* %377
  %378 = load i64, i64* %PC
  %379 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %378, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %379

block_400a1c:                                     ; preds = %block_400566
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 12
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 7
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  store i32 25, i32* %384
  %385 = load i64, i64* %PC
  %386 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %385, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %386

block_400698:                                     ; preds = %block_400566
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 12
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 7
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i32*
  store i32 7, i32* %391
  %392 = load i64, i64* %PC
  %393 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %392, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %393

block_400b16:                                     ; preds = %block_400566
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 12
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 7
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  store i32 30, i32* %398
  %399 = load i64, i64* %PC
  %400 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %399, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %400

block_400792:                                     ; preds = %block_400566
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 12
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 7
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i32*
  store i32 12, i32* %405
  %406 = load i64, i64* %PC
  %407 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %406, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %407

block_40088c:                                     ; preds = %block_400566
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 12
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i32*
  store i32 17, i32* %412
  %413 = load i64, i64* %PC
  %414 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %414

block_400986:                                     ; preds = %block_400566
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 12
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 7
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  store i32 22, i32* %419
  %420 = load i64, i64* %PC
  %421 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %420, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %421

block_400602:                                     ; preds = %block_400566
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 12
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 7
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i32*
  store i32 4, i32* %426
  %427 = load i64, i64* %PC
  %428 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %427, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %428

block_400a80:                                     ; preds = %block_400566
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 12
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 7
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i32*
  store i32 27, i32* %433
  %434 = load i64, i64* %PC
  %435 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %434, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %435

; <label>:436:                                    ; preds = %block_400566
  %437 = load i64, i64* %PC
  %438 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %437, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %438
}

; Function Attrs: noinline
define %struct.Memory* @sub_40063b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_40063b

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %25

block_4008f0:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 19, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4008f7(%struct.State* %0, i64 %31, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %32

block_400ae4:                                     ; preds = %block_400566
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 29, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %38, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %39

block_4005d0:                                     ; preds = %block_400566
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 3, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %46

block_4007c4:                                     ; preds = %block_400566
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 13, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %53

block_4008be:                                     ; preds = %block_400566
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 18, i32* %58
  %59 = load i64, i64* %PC
  %60 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %59, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %60

block_4009b8:                                     ; preds = %block_400566
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 12
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to i32*
  store i32 23, i32* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 12
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i32*
  %71 = load i32, i32* %70
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = load i64, i64* %PC
  %74 = sub i64 %73, 1234
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 5
  store i64 %78, i64* %PC
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %80 = load i64, i64* %79, align 8, !tbaa !2428
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %76, i64* %82
  store i64 %81, i64* %79, align 8, !tbaa !2428
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %83, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %84, %struct.Memory* %MEMORY.0)
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 8
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC
  store i64 %92, i64* %RCX, align 8, !tbaa !2428
  %95 = load i64, i64* %RCX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = add i64 4, %95
  store i64 %98, i64* %RCX, align 8, !tbaa !2428
  %99 = icmp ult i64 %98, %95
  %100 = icmp ult i64 %98, 4
  %101 = or i1 %99, %100
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %98 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = xor i64 4, %95
  %112 = xor i64 %111, %98
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %115, i8* %116, align 1, !tbaa !2447
  %117 = icmp eq i64 %98, 0
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %118, i8* %119, align 1, !tbaa !2448
  %120 = lshr i64 %98, 63
  %121 = trunc i64 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %121, i8* %122, align 1, !tbaa !2449
  %123 = lshr i64 %95, 63
  %124 = xor i64 %120, %123
  %125 = add nuw nsw i64 %124, %120
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2450
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %RCX
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RAX
  %142 = mul i64 %141, 8
  %143 = add i64 %142, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 8
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 40
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %149 to i64*
  store i64 %150, i64* %153
  %154 = load i64, i64* %PC
  %155 = sub i64 %154, 1151
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  store i64 %157, i64* %PC
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %155, i64* %158, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 28, i32* %163
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @sub_400ab9(%struct.State* %0, i64 %164, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %165

block_400698:                                     ; preds = %block_400566
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 12
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  store i32 7, i32* %170
  %171 = load i64, i64* %PC
  %172 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %172

block_400792:                                     ; preds = %block_400566
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 12, i32* %177
  %178 = load i64, i64* %PC
  %179 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %178, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %179

block_40088c:                                     ; preds = %block_400566
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 12
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 7
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  store i32 17, i32* %184
  %185 = load i64, i64* %PC
  %186 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %185, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %186

block_400986:                                     ; preds = %block_400566
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 22, i32* %191
  %192 = load i64, i64* %PC
  %193 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %192, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %193

block_400a80:                                     ; preds = %block_400566
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 12
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  store i32 27, i32* %198
  %199 = load i64, i64* %PC
  %200 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %199, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %200

block_40056c:                                     ; preds = %block_400566
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 12
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 7
  store i64 %204, i64* %PC
  %205 = inttoptr i64 %202 to i32*
  store i32 1, i32* %205
  %206 = load i64, i64* %PC
  %207 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %206, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %207

block_4007f6:                                     ; preds = %block_400566
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 12
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i32*
  store i32 14, i32* %212
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 12
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RDI, align 8, !tbaa !2428
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 784
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %227 = load i64, i64* %226, align 8, !tbaa !2428
  %228 = add i64 %227, -8
  %229 = inttoptr i64 %228 to i64*
  store i64 %223, i64* %229
  store i64 %228, i64* %226, align 8, !tbaa !2428
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %230, align 8, !tbaa !2428
  %231 = load i64, i64* %PC
  %232 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %231, %struct.Memory* %MEMORY.0)
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 8
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 4
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  store i64 %239, i64* %RCX, align 8, !tbaa !2428
  %242 = load i64, i64* %RCX
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 4
  store i64 %244, i64* %PC
  %245 = add i64 4, %242
  store i64 %245, i64* %RCX, align 8, !tbaa !2428
  %246 = icmp ult i64 %245, %242
  %247 = icmp ult i64 %245, 4
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %249, i8* %250, align 1, !tbaa !2432
  %251 = trunc i64 %245 to i32
  %252 = and i32 %251, 255
  %253 = call i32 @llvm.ctpop.i32(i32 %252) #16
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = xor i8 %255, 1
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %256, i8* %257, align 1, !tbaa !2446
  %258 = xor i64 4, %242
  %259 = xor i64 %258, %245
  %260 = lshr i64 %259, 4
  %261 = trunc i64 %260 to i8
  %262 = and i8 %261, 1
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %262, i8* %263, align 1, !tbaa !2447
  %264 = icmp eq i64 %245, 0
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %265, i8* %266, align 1, !tbaa !2448
  %267 = lshr i64 %245, 63
  %268 = trunc i64 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %268, i8* %269, align 1, !tbaa !2449
  %270 = lshr i64 %242, 63
  %271 = xor i64 %267, %270
  %272 = add nuw nsw i64 %271, %267
  %273 = icmp eq i64 %272, 2
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %274, i8* %275, align 1, !tbaa !2450
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 8
  %278 = load i64, i64* %RCX
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %277 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %RAX
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  store i64 %287, i64* %RAX, align 8, !tbaa !2428
  %288 = load i64, i64* %RAX
  %289 = mul i64 %288, 8
  %290 = add i64 %289, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 8
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i64*
  %294 = load i64, i64* %293
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 40
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %296 to i64*
  store i64 %297, i64* %300
  %301 = load i64, i64* %PC
  %302 = sub i64 %301, 701
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 5
  store i64 %304, i64* %PC
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %302, i64* %305, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_40063b, %block_4007f6, %block_4009b8
  %MEMORY.0 = phi %struct.Memory* [ %399, %block_40063b ], [ %232, %block_4007f6 ], [ %85, %block_4009b8 ]
  %306 = load i64, i64* %RBP
  %307 = sub i64 %306, 40
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RAX
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 2
  store i64 %314, i64* %PC
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %312, i64* %315, align 8, !tbaa !2428
  %316 = load i64, i64* %PC
  switch i64 %316, label %527 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400666:                                     ; preds = %block_400566
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 12
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 7
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  store i32 6, i32* %321
  %322 = load i64, i64* %PC
  %323 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %322, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %323

block_40085a:                                     ; preds = %block_400566
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 12
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %325 to i32*
  store i32 16, i32* %328
  %329 = load i64, i64* %PC
  %330 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %329, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %330

block_4006ca:                                     ; preds = %block_400566
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 12
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i32*
  store i32 8, i32* %335
  %336 = load i64, i64* %PC
  %337 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %336, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %337

block_400559:                                     ; preds = %block_400566
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 12
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 7
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  store i32 0, i32* %342
  %343 = load i64, i64* %PC
  %344 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %344

block_400954:                                     ; preds = %block_400566
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 12
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 7
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i32*
  store i32 21, i32* %349
  %350 = load i64, i64* %PC
  %351 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %350, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %351

block_400a4e:                                     ; preds = %block_400566
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 12
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 7
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  store i32 26, i32* %356
  %357 = load i64, i64* %PC
  %358 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %357, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %358

block_400760:                                     ; preds = %block_400566
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 12
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 7
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i32*
  store i32 11, i32* %363
  %364 = load i64, i64* %PC
  %365 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %364, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %365

block_400b48:                                     ; preds = %block_400566
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 12
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 7
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  store i32 31, i32* %370
  %371 = load i64, i64* %PC
  %372 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %371, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %372

block_4009ea:                                     ; preds = %block_400566
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 12
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 7
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i32*
  store i32 24, i32* %377
  %378 = load i64, i64* %PC
  %379 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %378, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %379

block_40063b:                                     ; preds = %block_400634, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400634 ]
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 12
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  %385 = load i32, i32* %384
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RDI, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = sub i64 %387, 334
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 5
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %394 = load i64, i64* %393, align 8, !tbaa !2428
  %395 = add i64 %394, -8
  %396 = inttoptr i64 %395 to i64*
  store i64 %390, i64* %396
  store i64 %395, i64* %393, align 8, !tbaa !2428
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %388, i64* %397, align 8, !tbaa !2428
  %398 = load i64, i64* %PC
  %399 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %398, %struct.Memory* %MEMORY.1)
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 8
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = load i64, i64* %RAX
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 3
  store i64 %408, i64* %PC
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %409 = load i64, i64* %RCX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = add i64 4, %409
  store i64 %412, i64* %RCX, align 8, !tbaa !2428
  %413 = icmp ult i64 %412, %409
  %414 = icmp ult i64 %412, 4
  %415 = or i1 %413, %414
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %416, i8* %417, align 1, !tbaa !2432
  %418 = trunc i64 %412 to i32
  %419 = and i32 %418, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #16
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2446
  %425 = xor i64 4, %409
  %426 = xor i64 %425, %412
  %427 = lshr i64 %426, 4
  %428 = trunc i64 %427 to i8
  %429 = and i8 %428, 1
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %429, i8* %430, align 1, !tbaa !2447
  %431 = icmp eq i64 %412, 0
  %432 = zext i1 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %432, i8* %433, align 1, !tbaa !2448
  %434 = lshr i64 %412, 63
  %435 = trunc i64 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %435, i8* %436, align 1, !tbaa !2449
  %437 = lshr i64 %409, 63
  %438 = xor i64 %434, %437
  %439 = add nuw nsw i64 %438, %434
  %440 = icmp eq i64 %439, 2
  %441 = zext i1 %440 to i8
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %441, i8* %442, align 1, !tbaa !2450
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 8
  %445 = load i64, i64* %RCX
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %444 to i64*
  store i64 %445, i64* %448
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  %452 = inttoptr i64 %449 to i32*
  %453 = load i32, i32* %452
  %454 = sext i32 %453 to i64
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = load i64, i64* %RAX
  %456 = mul i64 %455, 8
  %457 = add i64 %456, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 8
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 40
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %463 to i64*
  store i64 %464, i64* %467
  %468 = load i64, i64* %PC
  %469 = sub i64 %468, 251
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 5
  store i64 %471, i64* %PC
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %469, i64* %472, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 12
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 7
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i32*
  store i32 5, i32* %477
  br label %block_40063b

block_40072e:                                     ; preds = %block_400566
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 12
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 7
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i32*
  store i32 10, i32* %482
  %483 = load i64, i64* %PC
  %484 = tail call %struct.Memory* @sub_400735(%struct.State* %0, i64 %483, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %484

block_400828:                                     ; preds = %block_400566
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 12
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 7
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i32*
  store i32 15, i32* %489
  %490 = load i64, i64* %PC
  %491 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %490, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %491

block_40059e:                                     ; preds = %block_400566
  %492 = load i64, i64* %RBP
  %493 = sub i64 %492, 12
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 7
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to i32*
  store i32 2, i32* %496
  %497 = load i64, i64* %PC
  %498 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %497, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %498

block_400922:                                     ; preds = %block_400566
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 12
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  store i32 20, i32* %503
  %504 = load i64, i64* %PC
  %505 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %505

block_400a1c:                                     ; preds = %block_400566
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 25, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %512

block_400b16:                                     ; preds = %block_400566
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 30, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %519

block_400602:                                     ; preds = %block_400566
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 4, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %526

; <label>:527:                                    ; preds = %block_400566
  %528 = load i64, i64* %PC
  %529 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %528, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %529
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008f7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4008f7

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4008f7:                                     ; preds = %block_4008f0, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008f0 ]
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 3
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  %31 = load i32, i32* %30
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = sub i64 %33, 1034
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 5
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %34, i64* %43, align 8, !tbaa !2428
  %44 = load i64, i64* %PC
  %45 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %44, %struct.Memory* %MEMORY.0)
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 8
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RAX, align 8, !tbaa !2428
  %52 = load i64, i64* %RAX
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  store i64 %52, i64* %RCX, align 8, !tbaa !2428
  %55 = load i64, i64* %RCX
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = add i64 4, %55
  store i64 %58, i64* %RCX, align 8, !tbaa !2428
  %59 = icmp ult i64 %58, %55
  %60 = icmp ult i64 %58, 4
  %61 = or i1 %59, %60
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %58 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 4, %55
  %72 = xor i64 %71, %58
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %58, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %58, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %55, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %80
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RCX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RAX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %95 to i32*
  %99 = load i32, i32* %98
  %100 = sext i32 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RAX
  %102 = mul i64 %101, 8
  %103 = add i64 %102, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 8
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 40
  %110 = load i64, i64* %RAX
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %109 to i64*
  store i64 %110, i64* %113
  %114 = load i64, i64* %PC
  %115 = sub i64 %114, 951
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %115, i64* %118, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 12
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 7
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  store i32 19, i32* %123
  br label %block_4008f7

block_400ae4:                                     ; preds = %block_400566
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 29, i32* %128
  %129 = load i64, i64* %PC
  %130 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_4005d0:                                     ; preds = %block_400566
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 12
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 3, i32* %135
  %136 = load i64, i64* %PC
  %137 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %136, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %137

block_4007c4:                                     ; preds = %block_400566
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 12
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  store i32 13, i32* %142
  %143 = load i64, i64* %PC
  %144 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %143, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %144

block_4008be:                                     ; preds = %block_400566
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 12
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 18, i32* %149
  %150 = load i64, i64* %PC
  %151 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %151

block_4009b8:                                     ; preds = %block_400566
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 23, i32* %156
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 12
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %PC
  %165 = sub i64 %164, 1234
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %167, i64* %173
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %174, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %175, %struct.Memory* %MEMORY.1)
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 8
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RCX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = add i64 4, %186
  store i64 %189, i64* %RCX, align 8, !tbaa !2428
  %190 = icmp ult i64 %189, %186
  %191 = icmp ult i64 %189, 4
  %192 = or i1 %190, %191
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %193, i8* %194, align 1, !tbaa !2432
  %195 = trunc i64 %189 to i32
  %196 = and i32 %195, 255
  %197 = call i32 @llvm.ctpop.i32(i32 %196) #16
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %200, i8* %201, align 1, !tbaa !2446
  %202 = xor i64 4, %186
  %203 = xor i64 %202, %189
  %204 = lshr i64 %203, 4
  %205 = trunc i64 %204 to i8
  %206 = and i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = icmp eq i64 %189, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = lshr i64 %189, 63
  %212 = trunc i64 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i64 %186, 63
  %215 = xor i64 %211, %214
  %216 = add nuw nsw i64 %215, %211
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %218, i8* %219, align 1, !tbaa !2450
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %RCX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %221 to i64*
  store i64 %222, i64* %225
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = mul i64 %232, 8
  %234 = add i64 %233, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 8
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 40
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %PC
  %246 = sub i64 %245, 1151
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 5
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %246, i64* %249, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 28, i32* %254
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 12
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 1484
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %272, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %273, %struct.Memory* %MEMORY.1)
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RAX
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %284 = load i64, i64* %RCX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 4, %284
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 4
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2432
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2446
  %300 = xor i64 4, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2447
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2450
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %RCX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX
  %331 = mul i64 %330, 8
  %332 = add i64 %331, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 8
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 40
  %339 = load i64, i64* %RAX
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 1401
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %347, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 12
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  store i32 7, i32* %352
  %353 = load i64, i64* %PC
  %354 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %353, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %354

block_400792:                                     ; preds = %block_400566
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 12
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 7
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i32*
  store i32 12, i32* %359
  %360 = load i64, i64* %PC
  %361 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %360, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %361

block_40088c:                                     ; preds = %block_400566
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 12
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 7
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  store i32 17, i32* %366
  %367 = load i64, i64* %PC
  %368 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %367, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %368

block_400986:                                     ; preds = %block_400566
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 22, i32* %373
  %374 = load i64, i64* %PC
  %375 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %374, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %375

block_400a80:                                     ; preds = %block_400566
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 12
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 7
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  store i32 27, i32* %380
  %381 = load i64, i64* %PC
  %382 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %381, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %382

block_40056c:                                     ; preds = %block_400566
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 12
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 7
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  store i32 1, i32* %387
  %388 = load i64, i64* %PC
  %389 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %388, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %389

block_4007f6:                                     ; preds = %block_400566
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  store i32 14, i32* %394
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 12
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i32*
  %400 = load i32, i32* %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = sub i64 %402, 784
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 5
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 5
  store i64 %407, i64* %PC
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %409 = load i64, i64* %408, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %405, i64* %411
  store i64 %410, i64* %408, align 8, !tbaa !2428
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %403, i64* %412, align 8, !tbaa !2428
  %413 = load i64, i64* %PC
  %414 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.1)
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 8
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i64*
  %420 = load i64, i64* %419
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = load i64, i64* %RAX
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 3
  store i64 %423, i64* %PC
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %424 = load i64, i64* %RCX
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 4, %424
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 4
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 4, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 8
  %460 = load i64, i64* %RCX
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %459 to i64*
  store i64 %460, i64* %463
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RAX
  %471 = mul i64 %470, 8
  %472 = add i64 %471, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 8
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 40
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %478 to i64*
  store i64 %479, i64* %482
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 701
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  store i64 %486, i64* %PC
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %487, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400634, %block_4007f6, %block_400ab2, %block_4009b8, %block_4008f7
  %MEMORY.1 = phi %struct.Memory* [ %45, %block_4008f7 ], [ %414, %block_4007f6 ], [ %176, %block_4009b8 ], [ %274, %block_400ab2 ], [ %586, %block_400634 ]
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 40
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 2
  store i64 %496, i64* %PC
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  switch i64 %498, label %709 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400666:                                     ; preds = %block_400566
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 12
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  store i32 6, i32* %503
  %504 = load i64, i64* %PC
  %505 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %505

block_40085a:                                     ; preds = %block_400566
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 16, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %512

block_4006ca:                                     ; preds = %block_400566
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 8, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %519

block_400559:                                     ; preds = %block_400566
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 0, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %526

block_400954:                                     ; preds = %block_400566
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 12
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 7
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 21, i32* %531
  %532 = load i64, i64* %PC
  %533 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %532, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %533

block_400a4e:                                     ; preds = %block_400566
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 12
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 7
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  store i32 26, i32* %538
  %539 = load i64, i64* %PC
  %540 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %540

block_400760:                                     ; preds = %block_400566
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 12
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 7
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i32*
  store i32 11, i32* %545
  %546 = load i64, i64* %PC
  %547 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %546, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %547

block_400b48:                                     ; preds = %block_400566
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 12
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 7
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  store i32 31, i32* %552
  %553 = load i64, i64* %PC
  %554 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %554

block_4009ea:                                     ; preds = %block_400566
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 12
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 7
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  store i32 24, i32* %559
  %560 = load i64, i64* %PC
  %561 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %560, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %561

block_400634:                                     ; preds = %block_400566
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 12
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 7
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i32*
  store i32 5, i32* %566
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 12
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 3
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %568 to i32*
  %572 = load i32, i32* %571
  %573 = zext i32 %572 to i64
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %574 = load i64, i64* %PC
  %575 = sub i64 %574, 334
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 5
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 5
  store i64 %579, i64* %PC
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %581 = load i64, i64* %580, align 8, !tbaa !2428
  %582 = add i64 %581, -8
  %583 = inttoptr i64 %582 to i64*
  store i64 %577, i64* %583
  store i64 %582, i64* %580, align 8, !tbaa !2428
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %575, i64* %584, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %585, %struct.Memory* %MEMORY.1)
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC
  %591 = inttoptr i64 %588 to i64*
  %592 = load i64, i64* %591
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %596 = load i64, i64* %RCX
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC
  %599 = add i64 4, %596
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = icmp ult i64 %599, %596
  %601 = icmp ult i64 %599, 4
  %602 = or i1 %600, %601
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %603, i8* %604, align 1, !tbaa !2432
  %605 = trunc i64 %599 to i32
  %606 = and i32 %605, 255
  %607 = call i32 @llvm.ctpop.i32(i32 %606) #16
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = xor i8 %609, 1
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %610, i8* %611, align 1, !tbaa !2446
  %612 = xor i64 4, %596
  %613 = xor i64 %612, %599
  %614 = lshr i64 %613, 4
  %615 = trunc i64 %614 to i8
  %616 = and i8 %615, 1
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %616, i8* %617, align 1, !tbaa !2447
  %618 = icmp eq i64 %599, 0
  %619 = zext i1 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %619, i8* %620, align 1, !tbaa !2448
  %621 = lshr i64 %599, 63
  %622 = trunc i64 %621 to i8
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %622, i8* %623, align 1, !tbaa !2449
  %624 = lshr i64 %596, 63
  %625 = xor i64 %621, %624
  %626 = add nuw nsw i64 %625, %621
  %627 = icmp eq i64 %626, 2
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %628, i8* %629, align 1, !tbaa !2450
  %630 = load i64, i64* %RBP
  %631 = sub i64 %630, 8
  %632 = load i64, i64* %RCX
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %631 to i64*
  store i64 %632, i64* %635
  %636 = load i64, i64* %RAX
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 3
  store i64 %638, i64* %PC
  %639 = inttoptr i64 %636 to i32*
  %640 = load i32, i32* %639
  %641 = sext i32 %640 to i64
  store i64 %641, i64* %RAX, align 8, !tbaa !2428
  %642 = load i64, i64* %RAX
  %643 = mul i64 %642, 8
  %644 = add i64 %643, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 8
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = load i64, i64* %RBP
  %650 = sub i64 %649, 40
  %651 = load i64, i64* %RAX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %650 to i64*
  store i64 %651, i64* %654
  %655 = load i64, i64* %PC
  %656 = sub i64 %655, 251
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 5
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %656, i64* %659, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 12
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 7
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i32*
  store i32 10, i32* %664
  %665 = load i64, i64* %PC
  %666 = tail call %struct.Memory* @sub_400735(%struct.State* %0, i64 %665, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %666

block_400828:                                     ; preds = %block_400566
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 12
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 7
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  store i32 15, i32* %671
  %672 = load i64, i64* %PC
  %673 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %672, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %673

block_40059e:                                     ; preds = %block_400566
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 12
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 7
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i32*
  store i32 2, i32* %678
  %679 = load i64, i64* %PC
  %680 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %679, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %680

block_400922:                                     ; preds = %block_400566
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 12
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 7
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %682 to i32*
  store i32 20, i32* %685
  %686 = load i64, i64* %PC
  %687 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %686, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %687

block_400a1c:                                     ; preds = %block_400566
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 12
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  store i32 25, i32* %692
  %693 = load i64, i64* %PC
  %694 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %693, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %694

block_400b16:                                     ; preds = %block_400566
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 12
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  store i32 30, i32* %699
  %700 = load i64, i64* %PC
  %701 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %700, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %701

block_400602:                                     ; preds = %block_400566
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 12
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 7
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i32*
  store i32 4, i32* %706
  %707 = load i64, i64* %PC
  %708 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %707, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %708

; <label>:709:                                    ; preds = %block_400566
  %710 = load i64, i64* %PC
  %711 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %710, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %711
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c60___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400c60:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 2244
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_400cb6, label %block_400c96

block_400cb6:                                     ; preds = %block_400ca0, %block_400c60
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_400c60 ], [ %387, %block_400ca0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400c96:                                     ; preds = %block_400c60
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_400ca0

block_400ca0:                                     ; preds = %block_400ca0, %block_400c96
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_400c96 ], [ %387, %block_400ca0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_400ca0, label %block_400cb6
}

; Function Attrs: noinline
define %struct.Memory* @sub_40066d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_40066d

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007f6:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 14, i32* %30
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 12
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  %35 = inttoptr i64 %32 to i32*
  %36 = load i32, i32* %35
  %37 = zext i32 %36 to i64
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %38 = load i64, i64* %PC
  %39 = sub i64 %38, 784
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 5
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 5
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %39, i64* %48, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %49, %struct.Memory* %MEMORY.1)
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = load i64, i64* %RAX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RCX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = add i64 4, %60
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 4
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 4, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RCX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RAX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = mul i64 %106, 8
  %108 = add i64 %107, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 8
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 40
  %115 = load i64, i64* %RAX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %PC
  %120 = sub i64 %119, 701
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %120, i64* %123, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 29, i32* %128
  %129 = load i64, i64* %PC
  %130 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %129, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %130

block_4005d0:                                     ; preds = %block_400566
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 12
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 3, i32* %135
  %136 = load i64, i64* %PC
  %137 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %136, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %137

block_4007c4:                                     ; preds = %block_400566
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 12
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  store i32 13, i32* %142
  %143 = load i64, i64* %PC
  %144 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %143, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %144

block_4008be:                                     ; preds = %block_400566
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 12
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 18, i32* %149
  %150 = load i64, i64* %PC
  %151 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %151

block_40059e:                                     ; preds = %block_400566
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 12
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 7
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  store i32 2, i32* %156
  %157 = load i64, i64* %PC
  %158 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %157, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %158

block_400698:                                     ; preds = %block_400566
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 7, i32* %163
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %164, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %165

block_400792:                                     ; preds = %block_400566
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 12
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  store i32 12, i32* %170
  %171 = load i64, i64* %PC
  %172 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %172

block_40088c:                                     ; preds = %block_400566
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 17, i32* %177
  %178 = load i64, i64* %PC
  %179 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %178, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %179

block_400986:                                     ; preds = %block_400566
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 12
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 7
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  store i32 22, i32* %184
  %185 = load i64, i64* %PC
  %186 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %185, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %186

block_400a80:                                     ; preds = %block_400566
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 27, i32* %191
  %192 = load i64, i64* %PC
  %193 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %192, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %193

block_4008f0:                                     ; preds = %block_400566
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 12
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  store i32 19, i32* %198
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 12
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 3
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i32*
  %204 = load i32, i32* %203
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = sub i64 %206, 1034
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 5
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 5
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %213 = load i64, i64* %212, align 8, !tbaa !2428
  %214 = add i64 %213, -8
  %215 = inttoptr i64 %214 to i64*
  store i64 %209, i64* %215
  store i64 %214, i64* %212, align 8, !tbaa !2428
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %207, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  %218 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %217, %struct.Memory* %MEMORY.1)
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 8
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = load i64, i64* %RAX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  store i64 %225, i64* %RCX, align 8, !tbaa !2428
  %228 = load i64, i64* %RCX
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = add i64 4, %228
  store i64 %231, i64* %RCX, align 8, !tbaa !2428
  %232 = icmp ult i64 %231, %228
  %233 = icmp ult i64 %231, 4
  %234 = or i1 %232, %233
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %236, align 1, !tbaa !2432
  %237 = trunc i64 %231 to i32
  %238 = and i32 %237, 255
  %239 = call i32 @llvm.ctpop.i32(i32 %238) #16
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = xor i8 %241, 1
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %242, i8* %243, align 1, !tbaa !2446
  %244 = xor i64 4, %228
  %245 = xor i64 %244, %231
  %246 = lshr i64 %245, 4
  %247 = trunc i64 %246 to i8
  %248 = and i8 %247, 1
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %248, i8* %249, align 1, !tbaa !2447
  %250 = icmp eq i64 %231, 0
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %251, i8* %252, align 1, !tbaa !2448
  %253 = lshr i64 %231, 63
  %254 = trunc i64 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %254, i8* %255, align 1, !tbaa !2449
  %256 = lshr i64 %228, 63
  %257 = xor i64 %253, %256
  %258 = add nuw nsw i64 %257, %253
  %259 = icmp eq i64 %258, 2
  %260 = zext i1 %259 to i8
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %260, i8* %261, align 1, !tbaa !2450
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 8
  %264 = load i64, i64* %RCX
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %263 to i64*
  store i64 %264, i64* %267
  %268 = load i64, i64* %RAX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 3
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = load i64, i64* %RAX
  %275 = mul i64 %274, 8
  %276 = add i64 %275, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 8
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 40
  %283 = load i64, i64* %RAX
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %282 to i64*
  store i64 %283, i64* %286
  %287 = load i64, i64* %PC
  %288 = sub i64 %287, 951
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 5
  store i64 %290, i64* %PC
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %288, i64* %291, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 12
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 7
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i32*
  store i32 24, i32* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 12
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RDI, align 8, !tbaa !2428
  %304 = load i64, i64* %PC
  %305 = sub i64 %304, 1284
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %307, i64* %313
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %305, i64* %314, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %315, %struct.Memory* %MEMORY.1)
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 8
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  store i64 %323, i64* %RCX, align 8, !tbaa !2428
  %326 = load i64, i64* %RCX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = add i64 4, %326
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = icmp ult i64 %329, %326
  %331 = icmp ult i64 %329, 4
  %332 = or i1 %330, %331
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %333, i8* %334, align 1, !tbaa !2432
  %335 = trunc i64 %329 to i32
  %336 = and i32 %335, 255
  %337 = call i32 @llvm.ctpop.i32(i32 %336) #16
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %340, i8* %341, align 1, !tbaa !2446
  %342 = xor i64 4, %326
  %343 = xor i64 %342, %329
  %344 = lshr i64 %343, 4
  %345 = trunc i64 %344 to i8
  %346 = and i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = icmp eq i64 %329, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = lshr i64 %329, 63
  %352 = trunc i64 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2449
  %354 = lshr i64 %326, 63
  %355 = xor i64 %351, %354
  %356 = add nuw nsw i64 %355, %351
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %358, i8* %359, align 1, !tbaa !2450
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 8
  %362 = load i64, i64* %RCX
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %361 to i64*
  store i64 %362, i64* %365
  %366 = load i64, i64* %RAX
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 3
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RAX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 8
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RBP
  %380 = sub i64 %379, 40
  %381 = load i64, i64* %RAX
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %380 to i64*
  store i64 %381, i64* %384
  %385 = load i64, i64* %PC
  %386 = sub i64 %385, 1201
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  br label %block_400566

block_40066d:                                     ; preds = %block_400666, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400666 ]
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %397 = load i64, i64* %PC
  %398 = sub i64 %397, 384
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 5
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 5
  store i64 %402, i64* %PC
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %404 = load i64, i64* %403, align 8, !tbaa !2428
  %405 = add i64 %404, -8
  %406 = inttoptr i64 %405 to i64*
  store i64 %400, i64* %406
  store i64 %405, i64* %403, align 8, !tbaa !2428
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %398, i64* %407, align 8, !tbaa !2428
  %408 = load i64, i64* %PC
  %409 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %408, %struct.Memory* %MEMORY.0)
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 8
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = load i64, i64* %RAX
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 3
  store i64 %418, i64* %PC
  store i64 %416, i64* %RCX, align 8, !tbaa !2428
  %419 = load i64, i64* %RCX
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC
  %422 = add i64 4, %419
  store i64 %422, i64* %RCX, align 8, !tbaa !2428
  %423 = icmp ult i64 %422, %419
  %424 = icmp ult i64 %422, 4
  %425 = or i1 %423, %424
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %426, i8* %427, align 1, !tbaa !2432
  %428 = trunc i64 %422 to i32
  %429 = and i32 %428, 255
  %430 = call i32 @llvm.ctpop.i32(i32 %429) #16
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %433, i8* %434, align 1, !tbaa !2446
  %435 = xor i64 4, %419
  %436 = xor i64 %435, %422
  %437 = lshr i64 %436, 4
  %438 = trunc i64 %437 to i8
  %439 = and i8 %438, 1
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %439, i8* %440, align 1, !tbaa !2447
  %441 = icmp eq i64 %422, 0
  %442 = zext i1 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %442, i8* %443, align 1, !tbaa !2448
  %444 = lshr i64 %422, 63
  %445 = trunc i64 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %445, i8* %446, align 1, !tbaa !2449
  %447 = lshr i64 %419, 63
  %448 = xor i64 %444, %447
  %449 = add nuw nsw i64 %448, %444
  %450 = icmp eq i64 %449, 2
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 8
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = inttoptr i64 %454 to i64*
  store i64 %455, i64* %458
  %459 = load i64, i64* %RAX
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 3
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i32*
  %463 = load i32, i32* %462
  %464 = sext i32 %463 to i64
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = load i64, i64* %RAX
  %466 = mul i64 %465, 8
  %467 = add i64 %466, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 8
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %467 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 40
  %474 = load i64, i64* %RAX
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %473 to i64*
  store i64 %474, i64* %477
  %478 = load i64, i64* %PC
  %479 = sub i64 %478, 301
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %479, i64* %482, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 12
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 7
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i32*
  store i32 1, i32* %487
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 12
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 3
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i32*
  %493 = load i32, i32* %492
  %494 = zext i32 %493 to i64
  store i64 %494, i64* %RDI, align 8, !tbaa !2428
  %495 = load i64, i64* %PC
  %496 = sub i64 %495, 134
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 5
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 5
  store i64 %500, i64* %PC
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %502 = load i64, i64* %501, align 8, !tbaa !2428
  %503 = add i64 %502, -8
  %504 = inttoptr i64 %503 to i64*
  store i64 %498, i64* %504
  store i64 %503, i64* %501, align 8, !tbaa !2428
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %496, i64* %505, align 8, !tbaa !2428
  %506 = load i64, i64* %PC
  %507 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %506, %struct.Memory* %MEMORY.1)
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 8
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC
  %512 = inttoptr i64 %509 to i64*
  %513 = load i64, i64* %512
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = load i64, i64* %RAX
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 3
  store i64 %516, i64* %PC
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %517 = load i64, i64* %RCX
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC
  %520 = add i64 4, %517
  store i64 %520, i64* %RCX, align 8, !tbaa !2428
  %521 = icmp ult i64 %520, %517
  %522 = icmp ult i64 %520, 4
  %523 = or i1 %521, %522
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %524, i8* %525, align 1, !tbaa !2432
  %526 = trunc i64 %520 to i32
  %527 = and i32 %526, 255
  %528 = call i32 @llvm.ctpop.i32(i32 %527) #16
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  %531 = xor i8 %530, 1
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %531, i8* %532, align 1, !tbaa !2446
  %533 = xor i64 4, %517
  %534 = xor i64 %533, %520
  %535 = lshr i64 %534, 4
  %536 = trunc i64 %535 to i8
  %537 = and i8 %536, 1
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %537, i8* %538, align 1, !tbaa !2447
  %539 = icmp eq i64 %520, 0
  %540 = zext i1 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = lshr i64 %520, 63
  %543 = trunc i64 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i64 %517, 63
  %546 = xor i64 %542, %545
  %547 = add nuw nsw i64 %546, %542
  %548 = icmp eq i64 %547, 2
  %549 = zext i1 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %549, i8* %550, align 1, !tbaa !2450
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 8
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %552 to i64*
  store i64 %553, i64* %556
  %557 = load i64, i64* %RAX
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 3
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i32*
  %561 = load i32, i32* %560
  %562 = sext i32 %561 to i64
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = load i64, i64* %RAX
  %564 = mul i64 %563, 8
  %565 = add i64 %564, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 8
  store i64 %567, i64* %PC
  %568 = inttoptr i64 %565 to i64*
  %569 = load i64, i64* %568
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 40
  %572 = load i64, i64* %RAX
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %571 to i64*
  store i64 %572, i64* %575
  %576 = load i64, i64* %PC
  %577 = sub i64 %576, 51
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 5
  store i64 %579, i64* %PC
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %577, i64* %580, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %581 = load i64, i64* %RBP
  %582 = sub i64 %581, 12
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i32*
  store i32 6, i32* %585
  br label %block_40066d

block_400566:                                     ; preds = %block_400828, %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_40066d, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %409, %block_40066d ], [ %663, %block_4009b8 ], [ %218, %block_4008f0 ], [ %50, %block_4007f6 ], [ %316, %block_4009ea ], [ %507, %block_40056c ], [ %761, %block_400ab2 ], [ %859, %block_400634 ], [ %957, %block_40072e ], [ %1055, %block_400828 ]
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 40
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 2
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %592, i64* %595, align 8, !tbaa !2428
  %596 = load i64, i64* %PC
  switch i64 %596, label %1164 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 12
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 7
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  store i32 11, i32* %601
  %602 = load i64, i64* %PC
  %603 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %602, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %603

block_40085a:                                     ; preds = %block_400566
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 12
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 7
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  store i32 16, i32* %608
  %609 = load i64, i64* %PC
  %610 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %609, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %610

block_400954:                                     ; preds = %block_400566
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 12
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  store i32 21, i32* %615
  %616 = load i64, i64* %PC
  %617 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %616, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %617

block_400559:                                     ; preds = %block_400566
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 12
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 7
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i32*
  store i32 0, i32* %622
  %623 = load i64, i64* %PC
  %624 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %623, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %624

block_400a4e:                                     ; preds = %block_400566
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 12
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 7
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i32*
  store i32 26, i32* %629
  %630 = load i64, i64* %PC
  %631 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %630, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %631

block_400b48:                                     ; preds = %block_400566
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 12
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 7
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  store i32 31, i32* %636
  %637 = load i64, i64* %PC
  %638 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %637, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %638

block_4009b8:                                     ; preds = %block_400566
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 12
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 7
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  store i32 23, i32* %643
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 12
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to i32*
  %649 = load i32, i32* %648
  %650 = zext i32 %649 to i64
  store i64 %650, i64* %RDI, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = sub i64 %651, 1234
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 5
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %658 = load i64, i64* %657, align 8, !tbaa !2428
  %659 = add i64 %658, -8
  %660 = inttoptr i64 %659 to i64*
  store i64 %654, i64* %660
  store i64 %659, i64* %657, align 8, !tbaa !2428
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %652, i64* %661, align 8, !tbaa !2428
  %662 = load i64, i64* %PC
  %663 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %662, %struct.Memory* %MEMORY.1)
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 8
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i64*
  %669 = load i64, i64* %668
  store i64 %669, i64* %RAX, align 8, !tbaa !2428
  %670 = load i64, i64* %RAX
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC
  store i64 %670, i64* %RCX, align 8, !tbaa !2428
  %673 = load i64, i64* %RCX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = add i64 4, %673
  store i64 %676, i64* %RCX, align 8, !tbaa !2428
  %677 = icmp ult i64 %676, %673
  %678 = icmp ult i64 %676, 4
  %679 = or i1 %677, %678
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %680, i8* %681, align 1, !tbaa !2432
  %682 = trunc i64 %676 to i32
  %683 = and i32 %682, 255
  %684 = call i32 @llvm.ctpop.i32(i32 %683) #16
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %687, i8* %688, align 1, !tbaa !2446
  %689 = xor i64 4, %673
  %690 = xor i64 %689, %676
  %691 = lshr i64 %690, 4
  %692 = trunc i64 %691 to i8
  %693 = and i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %693, i8* %694, align 1, !tbaa !2447
  %695 = icmp eq i64 %676, 0
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %696, i8* %697, align 1, !tbaa !2448
  %698 = lshr i64 %676, 63
  %699 = trunc i64 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %699, i8* %700, align 1, !tbaa !2449
  %701 = lshr i64 %673, 63
  %702 = xor i64 %698, %701
  %703 = add nuw nsw i64 %702, %698
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %705, i8* %706, align 1, !tbaa !2450
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 8
  %709 = load i64, i64* %RCX
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 4
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %708 to i64*
  store i64 %709, i64* %712
  %713 = load i64, i64* %RAX
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  %717 = load i32, i32* %716
  %718 = sext i32 %717 to i64
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = load i64, i64* %RAX
  %720 = mul i64 %719, 8
  %721 = add i64 %720, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 8
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i64*
  %725 = load i64, i64* %724
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 40
  %728 = load i64, i64* %RAX
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %727 to i64*
  store i64 %728, i64* %731
  %732 = load i64, i64* %PC
  %733 = sub i64 %732, 1151
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 5
  store i64 %735, i64* %PC
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %733, i64* %736, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 12
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 7
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %738 to i32*
  store i32 28, i32* %741
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 12
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 3
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i32*
  %747 = load i32, i32* %746
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RDI, align 8, !tbaa !2428
  %749 = load i64, i64* %PC
  %750 = sub i64 %749, 1484
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 5
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 5
  store i64 %754, i64* %PC
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %756 = load i64, i64* %755, align 8, !tbaa !2428
  %757 = add i64 %756, -8
  %758 = inttoptr i64 %757 to i64*
  store i64 %752, i64* %758
  store i64 %757, i64* %755, align 8, !tbaa !2428
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %750, i64* %759, align 8, !tbaa !2428
  %760 = load i64, i64* %PC
  %761 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %760, %struct.Memory* %MEMORY.1)
  %762 = load i64, i64* %RBP
  %763 = sub i64 %762, 8
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 4
  store i64 %765, i64* %PC
  %766 = inttoptr i64 %763 to i64*
  %767 = load i64, i64* %766
  store i64 %767, i64* %RAX, align 8, !tbaa !2428
  %768 = load i64, i64* %RAX
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  store i64 %768, i64* %RCX, align 8, !tbaa !2428
  %771 = load i64, i64* %RCX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = add i64 4, %771
  store i64 %774, i64* %RCX, align 8, !tbaa !2428
  %775 = icmp ult i64 %774, %771
  %776 = icmp ult i64 %774, 4
  %777 = or i1 %775, %776
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %778, i8* %779, align 1, !tbaa !2432
  %780 = trunc i64 %774 to i32
  %781 = and i32 %780, 255
  %782 = call i32 @llvm.ctpop.i32(i32 %781) #16
  %783 = trunc i32 %782 to i8
  %784 = and i8 %783, 1
  %785 = xor i8 %784, 1
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %785, i8* %786, align 1, !tbaa !2446
  %787 = xor i64 4, %771
  %788 = xor i64 %787, %774
  %789 = lshr i64 %788, 4
  %790 = trunc i64 %789 to i8
  %791 = and i8 %790, 1
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %791, i8* %792, align 1, !tbaa !2447
  %793 = icmp eq i64 %774, 0
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %794, i8* %795, align 1, !tbaa !2448
  %796 = lshr i64 %774, 63
  %797 = trunc i64 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %797, i8* %798, align 1, !tbaa !2449
  %799 = lshr i64 %771, 63
  %800 = xor i64 %796, %799
  %801 = add nuw nsw i64 %800, %796
  %802 = icmp eq i64 %801, 2
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %803, i8* %804, align 1, !tbaa !2450
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 8
  %807 = load i64, i64* %RCX
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC
  %810 = inttoptr i64 %806 to i64*
  store i64 %807, i64* %810
  %811 = load i64, i64* %RAX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %811 to i32*
  %815 = load i32, i32* %814
  %816 = sext i32 %815 to i64
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = load i64, i64* %RAX
  %818 = mul i64 %817, 8
  %819 = add i64 %818, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 8
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i64*
  %823 = load i64, i64* %822
  store i64 %823, i64* %RAX, align 8, !tbaa !2428
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 40
  %826 = load i64, i64* %RAX
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 4
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %825 to i64*
  store i64 %826, i64* %829
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 1401
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %834, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 12
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 7
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  store i32 5, i32* %839
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 12
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RDI, align 8, !tbaa !2428
  %847 = load i64, i64* %PC
  %848 = sub i64 %847, 334
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 5
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 5
  store i64 %852, i64* %PC
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %854 = load i64, i64* %853, align 8, !tbaa !2428
  %855 = add i64 %854, -8
  %856 = inttoptr i64 %855 to i64*
  store i64 %850, i64* %856
  store i64 %855, i64* %853, align 8, !tbaa !2428
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %848, i64* %857, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %858, %struct.Memory* %MEMORY.1)
  %860 = load i64, i64* %RBP
  %861 = sub i64 %860, 8
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = load i64, i64* %RAX
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 3
  store i64 %868, i64* %PC
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %869 = load i64, i64* %RCX
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 4
  store i64 %871, i64* %PC
  %872 = add i64 4, %869
  store i64 %872, i64* %RCX, align 8, !tbaa !2428
  %873 = icmp ult i64 %872, %869
  %874 = icmp ult i64 %872, 4
  %875 = or i1 %873, %874
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %876, i8* %877, align 1, !tbaa !2432
  %878 = trunc i64 %872 to i32
  %879 = and i32 %878, 255
  %880 = call i32 @llvm.ctpop.i32(i32 %879) #16
  %881 = trunc i32 %880 to i8
  %882 = and i8 %881, 1
  %883 = xor i8 %882, 1
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %883, i8* %884, align 1, !tbaa !2446
  %885 = xor i64 4, %869
  %886 = xor i64 %885, %872
  %887 = lshr i64 %886, 4
  %888 = trunc i64 %887 to i8
  %889 = and i8 %888, 1
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %889, i8* %890, align 1, !tbaa !2447
  %891 = icmp eq i64 %872, 0
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %892, i8* %893, align 1, !tbaa !2448
  %894 = lshr i64 %872, 63
  %895 = trunc i64 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %895, i8* %896, align 1, !tbaa !2449
  %897 = lshr i64 %869, 63
  %898 = xor i64 %894, %897
  %899 = add nuw nsw i64 %898, %894
  %900 = icmp eq i64 %899, 2
  %901 = zext i1 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %901, i8* %902, align 1, !tbaa !2450
  %903 = load i64, i64* %RBP
  %904 = sub i64 %903, 8
  %905 = load i64, i64* %RCX
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %904 to i64*
  store i64 %905, i64* %908
  %909 = load i64, i64* %RAX
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 3
  store i64 %911, i64* %PC
  %912 = inttoptr i64 %909 to i32*
  %913 = load i32, i32* %912
  %914 = sext i32 %913 to i64
  store i64 %914, i64* %RAX, align 8, !tbaa !2428
  %915 = load i64, i64* %RAX
  %916 = mul i64 %915, 8
  %917 = add i64 %916, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 8
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i64*
  %921 = load i64, i64* %920
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 40
  %924 = load i64, i64* %RAX
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 4
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %923 to i64*
  store i64 %924, i64* %927
  %928 = load i64, i64* %PC
  %929 = sub i64 %928, 251
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  store i64 %931, i64* %PC
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %929, i64* %932, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 12
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 7
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i32*
  store i32 10, i32* %937
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 12
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i32*
  %943 = load i32, i32* %942
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RDI, align 8, !tbaa !2428
  %945 = load i64, i64* %PC
  %946 = sub i64 %945, 584
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 5
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 5
  store i64 %950, i64* %PC
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %952 = load i64, i64* %951, align 8, !tbaa !2428
  %953 = add i64 %952, -8
  %954 = inttoptr i64 %953 to i64*
  store i64 %948, i64* %954
  store i64 %953, i64* %951, align 8, !tbaa !2428
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %946, i64* %955, align 8, !tbaa !2428
  %956 = load i64, i64* %PC
  %957 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %956, %struct.Memory* %MEMORY.1)
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 8
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i64*
  %963 = load i64, i64* %962
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = load i64, i64* %RAX
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 3
  store i64 %966, i64* %PC
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %967 = load i64, i64* %RCX
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 4
  store i64 %969, i64* %PC
  %970 = add i64 4, %967
  store i64 %970, i64* %RCX, align 8, !tbaa !2428
  %971 = icmp ult i64 %970, %967
  %972 = icmp ult i64 %970, 4
  %973 = or i1 %971, %972
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %974, i8* %975, align 1, !tbaa !2432
  %976 = trunc i64 %970 to i32
  %977 = and i32 %976, 255
  %978 = call i32 @llvm.ctpop.i32(i32 %977) #16
  %979 = trunc i32 %978 to i8
  %980 = and i8 %979, 1
  %981 = xor i8 %980, 1
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %981, i8* %982, align 1, !tbaa !2446
  %983 = xor i64 4, %967
  %984 = xor i64 %983, %970
  %985 = lshr i64 %984, 4
  %986 = trunc i64 %985 to i8
  %987 = and i8 %986, 1
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %987, i8* %988, align 1, !tbaa !2447
  %989 = icmp eq i64 %970, 0
  %990 = zext i1 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %990, i8* %991, align 1, !tbaa !2448
  %992 = lshr i64 %970, 63
  %993 = trunc i64 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %993, i8* %994, align 1, !tbaa !2449
  %995 = lshr i64 %967, 63
  %996 = xor i64 %992, %995
  %997 = add nuw nsw i64 %996, %992
  %998 = icmp eq i64 %997, 2
  %999 = zext i1 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %999, i8* %1000, align 1, !tbaa !2450
  %1001 = load i64, i64* %RBP
  %1002 = sub i64 %1001, 8
  %1003 = load i64, i64* %RCX
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 4
  store i64 %1005, i64* %PC
  %1006 = inttoptr i64 %1002 to i64*
  store i64 %1003, i64* %1006
  %1007 = load i64, i64* %RAX
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 3
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i32*
  %1011 = load i32, i32* %1010
  %1012 = sext i32 %1011 to i64
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = load i64, i64* %RAX
  %1014 = mul i64 %1013, 8
  %1015 = add i64 %1014, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 8
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i64*
  %1019 = load i64, i64* %1018
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = load i64, i64* %RBP
  %1021 = sub i64 %1020, 40
  %1022 = load i64, i64* %RAX
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1021 to i64*
  store i64 %1022, i64* %1025
  %1026 = load i64, i64* %PC
  %1027 = sub i64 %1026, 501
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  store i64 %1029, i64* %PC
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1027, i64* %1030, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 12
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 7
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to i32*
  store i32 15, i32* %1035
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 12
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i32*
  %1041 = load i32, i32* %1040
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RDI, align 8, !tbaa !2428
  %1043 = load i64, i64* %PC
  %1044 = sub i64 %1043, 834
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 5
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 5
  store i64 %1048, i64* %PC
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1050 = load i64, i64* %1049, align 8, !tbaa !2428
  %1051 = add i64 %1050, -8
  %1052 = inttoptr i64 %1051 to i64*
  store i64 %1046, i64* %1052
  store i64 %1051, i64* %1049, align 8, !tbaa !2428
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1044, i64* %1053, align 8, !tbaa !2428
  %1054 = load i64, i64* %PC
  %1055 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1054, %struct.Memory* %MEMORY.1)
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 8
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RAX
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 3
  store i64 %1064, i64* %PC
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1065 = load i64, i64* %RCX
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 4
  store i64 %1067, i64* %PC
  %1068 = add i64 4, %1065
  store i64 %1068, i64* %RCX, align 8, !tbaa !2428
  %1069 = icmp ult i64 %1068, %1065
  %1070 = icmp ult i64 %1068, 4
  %1071 = or i1 %1069, %1070
  %1072 = zext i1 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1072, i8* %1073, align 1, !tbaa !2432
  %1074 = trunc i64 %1068 to i32
  %1075 = and i32 %1074, 255
  %1076 = call i32 @llvm.ctpop.i32(i32 %1075) #16
  %1077 = trunc i32 %1076 to i8
  %1078 = and i8 %1077, 1
  %1079 = xor i8 %1078, 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1079, i8* %1080, align 1, !tbaa !2446
  %1081 = xor i64 4, %1065
  %1082 = xor i64 %1081, %1068
  %1083 = lshr i64 %1082, 4
  %1084 = trunc i64 %1083 to i8
  %1085 = and i8 %1084, 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1085, i8* %1086, align 1, !tbaa !2447
  %1087 = icmp eq i64 %1068, 0
  %1088 = zext i1 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1088, i8* %1089, align 1, !tbaa !2448
  %1090 = lshr i64 %1068, 63
  %1091 = trunc i64 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1091, i8* %1092, align 1, !tbaa !2449
  %1093 = lshr i64 %1065, 63
  %1094 = xor i64 %1090, %1093
  %1095 = add nuw nsw i64 %1094, %1090
  %1096 = icmp eq i64 %1095, 2
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1097, i8* %1098, align 1, !tbaa !2450
  %1099 = load i64, i64* %RBP
  %1100 = sub i64 %1099, 8
  %1101 = load i64, i64* %RCX
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1100 to i64*
  store i64 %1101, i64* %1104
  %1105 = load i64, i64* %RAX
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 3
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1105 to i32*
  %1109 = load i32, i32* %1108
  %1110 = sext i32 %1109 to i64
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = load i64, i64* %RAX
  %1112 = mul i64 %1111, 8
  %1113 = add i64 %1112, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 8
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i64*
  %1117 = load i64, i64* %1116
  store i64 %1117, i64* %RAX, align 8, !tbaa !2428
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 40
  %1120 = load i64, i64* %RAX
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 4
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1119 to i64*
  store i64 %1120, i64* %1123
  %1124 = load i64, i64* %PC
  %1125 = sub i64 %1124, 751
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  store i64 %1127, i64* %PC
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1128, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 12
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 7
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i32*
  store i32 8, i32* %1133
  %1134 = load i64, i64* %PC
  %1135 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %1134, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1135

block_400922:                                     ; preds = %block_400566
  %1136 = load i64, i64* %RBP
  %1137 = sub i64 %1136, 12
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 7
  store i64 %1139, i64* %PC
  %1140 = inttoptr i64 %1137 to i32*
  store i32 20, i32* %1140
  %1141 = load i64, i64* %PC
  %1142 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %1141, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1142

block_400a1c:                                     ; preds = %block_400566
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 12
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 7
  store i64 %1146, i64* %PC
  %1147 = inttoptr i64 %1144 to i32*
  store i32 25, i32* %1147
  %1148 = load i64, i64* %PC
  %1149 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1148, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1149

block_400b16:                                     ; preds = %block_400566
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 12
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 7
  store i64 %1153, i64* %PC
  %1154 = inttoptr i64 %1151 to i32*
  store i32 30, i32* %1154
  %1155 = load i64, i64* %PC
  %1156 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1155, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1156

block_400602:                                     ; preds = %block_400566
  %1157 = load i64, i64* %RBP
  %1158 = sub i64 %1157, 12
  %1159 = load i64, i64* %PC
  %1160 = add i64 %1159, 7
  store i64 %1160, i64* %PC
  %1161 = inttoptr i64 %1158 to i32*
  store i32 4, i32* %1161
  %1162 = load i64, i64* %PC
  %1163 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1162, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1163

; <label>:1164:                                   ; preds = %block_400566
  %1165 = load i64, i64* %PC
  %1166 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1165, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1166
}

; Function Attrs: noinline
define %struct.Memory* @sub_400aeb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400aeb

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007f6:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 14, i32* %30
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 12
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  %35 = inttoptr i64 %32 to i32*
  %36 = load i32, i32* %35
  %37 = zext i32 %36 to i64
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %38 = load i64, i64* %PC
  %39 = sub i64 %38, 784
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 5
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 5
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %39, i64* %48, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %49, %struct.Memory* %MEMORY.1)
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = load i64, i64* %RAX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RCX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = add i64 4, %60
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 4
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 4, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RCX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RAX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = mul i64 %106, 8
  %108 = add i64 %107, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 8
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 40
  %115 = load i64, i64* %RAX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %PC
  %120 = sub i64 %119, 701
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %120, i64* %123, align 8, !tbaa !2428
  br label %block_400566

block_400aeb:                                     ; preds = %block_400ae4, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400ae4 ]
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %131 = load i64, i64* %PC
  %132 = sub i64 %131, 1534
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %134, i64* %140
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %132, i64* %141, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %142, %struct.Memory* %MEMORY.0)
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 8
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %153 = load i64, i64* %RCX
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = add i64 4, %153
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = icmp ult i64 %156, %153
  %158 = icmp ult i64 %156, 4
  %159 = or i1 %157, %158
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %161, align 1, !tbaa !2432
  %162 = trunc i64 %156 to i32
  %163 = and i32 %162, 255
  %164 = call i32 @llvm.ctpop.i32(i32 %163) #16
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %167, i8* %168, align 1, !tbaa !2446
  %169 = xor i64 4, %153
  %170 = xor i64 %169, %156
  %171 = lshr i64 %170, 4
  %172 = trunc i64 %171 to i8
  %173 = and i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %173, i8* %174, align 1, !tbaa !2447
  %175 = icmp eq i64 %156, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = lshr i64 %156, 63
  %179 = trunc i64 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = lshr i64 %153, 63
  %182 = xor i64 %178, %181
  %183 = add nuw nsw i64 %182, %178
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %185, i8* %186, align 1, !tbaa !2450
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 8
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RAX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = mul i64 %199, 8
  %201 = add i64 %200, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 8
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %RAX
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %207 to i64*
  store i64 %208, i64* %211
  %212 = load i64, i64* %PC
  %213 = sub i64 %212, 1451
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 12
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i32*
  store i32 29, i32* %221
  br label %block_400aeb

block_4005d0:                                     ; preds = %block_400566
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 3, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %228

block_4007c4:                                     ; preds = %block_400566
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 13, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %235

block_4008be:                                     ; preds = %block_400566
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 18, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %242

block_40059e:                                     ; preds = %block_400566
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 2, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %249

block_400698:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 7, i32* %254
  %255 = load i64, i64* %PC
  %256 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_400792:                                     ; preds = %block_400566
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  store i32 12, i32* %261
  %262 = load i64, i64* %PC
  %263 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %262, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %263

block_40088c:                                     ; preds = %block_400566
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 12
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 7
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  store i32 17, i32* %268
  %269 = load i64, i64* %PC
  %270 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %270

block_400986:                                     ; preds = %block_400566
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 22, i32* %275
  %276 = load i64, i64* %PC
  %277 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %276, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %277

block_400a80:                                     ; preds = %block_400566
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 7
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  store i32 27, i32* %282
  %283 = load i64, i64* %PC
  %284 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %283, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %284

block_4008f0:                                     ; preds = %block_400566
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 12
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 7
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i32*
  store i32 19, i32* %289
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 12
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 3
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i32*
  %295 = load i32, i32* %294
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %RDI, align 8, !tbaa !2428
  %297 = load i64, i64* %PC
  %298 = sub i64 %297, 1034
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, -8
  %306 = inttoptr i64 %305 to i64*
  store i64 %300, i64* %306
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %298, i64* %307, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %308, %struct.Memory* %MEMORY.1)
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 8
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 4
  store i64 %313, i64* %PC
  %314 = inttoptr i64 %311 to i64*
  %315 = load i64, i64* %314
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = load i64, i64* %RAX
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 3
  store i64 %318, i64* %PC
  store i64 %316, i64* %RCX, align 8, !tbaa !2428
  %319 = load i64, i64* %RCX
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = add i64 4, %319
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = icmp ult i64 %322, %319
  %324 = icmp ult i64 %322, 4
  %325 = or i1 %323, %324
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %326, i8* %327, align 1, !tbaa !2432
  %328 = trunc i64 %322 to i32
  %329 = and i32 %328, 255
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %333, i8* %334, align 1, !tbaa !2446
  %335 = xor i64 4, %319
  %336 = xor i64 %335, %322
  %337 = lshr i64 %336, 4
  %338 = trunc i64 %337 to i8
  %339 = and i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %339, i8* %340, align 1, !tbaa !2447
  %341 = icmp eq i64 %322, 0
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %342, i8* %343, align 1, !tbaa !2448
  %344 = lshr i64 %322, 63
  %345 = trunc i64 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %345, i8* %346, align 1, !tbaa !2449
  %347 = lshr i64 %319, 63
  %348 = xor i64 %344, %347
  %349 = add nuw nsw i64 %348, %344
  %350 = icmp eq i64 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 8
  %355 = load i64, i64* %RCX
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %354 to i64*
  store i64 %355, i64* %358
  %359 = load i64, i64* %RAX
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 3
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i32*
  %363 = load i32, i32* %362
  %364 = sext i32 %363 to i64
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RAX
  %366 = mul i64 %365, 8
  %367 = add i64 %366, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 8
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 40
  %374 = load i64, i64* %RAX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %373 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %PC
  %379 = sub i64 %378, 951
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %379, i64* %382, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 12
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 7
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  store i32 24, i32* %387
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 12
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 3
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to i32*
  %393 = load i32, i32* %392
  %394 = zext i32 %393 to i64
  store i64 %394, i64* %RDI, align 8, !tbaa !2428
  %395 = load i64, i64* %PC
  %396 = sub i64 %395, 1284
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 5
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 5
  store i64 %400, i64* %PC
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %402 = load i64, i64* %401, align 8, !tbaa !2428
  %403 = add i64 %402, -8
  %404 = inttoptr i64 %403 to i64*
  store i64 %398, i64* %404
  store i64 %403, i64* %401, align 8, !tbaa !2428
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %396, i64* %405, align 8, !tbaa !2428
  %406 = load i64, i64* %PC
  %407 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %406, %struct.Memory* %MEMORY.1)
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 8
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i64, i64* %RAX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 3
  store i64 %416, i64* %PC
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %417 = load i64, i64* %RCX
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  %420 = add i64 4, %417
  store i64 %420, i64* %RCX, align 8, !tbaa !2428
  %421 = icmp ult i64 %420, %417
  %422 = icmp ult i64 %420, 4
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %424, i8* %425, align 1, !tbaa !2432
  %426 = trunc i64 %420 to i32
  %427 = and i32 %426, 255
  %428 = call i32 @llvm.ctpop.i32(i32 %427) #16
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %431, i8* %432, align 1, !tbaa !2446
  %433 = xor i64 4, %417
  %434 = xor i64 %433, %420
  %435 = lshr i64 %434, 4
  %436 = trunc i64 %435 to i8
  %437 = and i8 %436, 1
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %437, i8* %438, align 1, !tbaa !2447
  %439 = icmp eq i64 %420, 0
  %440 = zext i1 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %440, i8* %441, align 1, !tbaa !2448
  %442 = lshr i64 %420, 63
  %443 = trunc i64 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %443, i8* %444, align 1, !tbaa !2449
  %445 = lshr i64 %417, 63
  %446 = xor i64 %442, %445
  %447 = add nuw nsw i64 %446, %442
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %449, i8* %450, align 1, !tbaa !2450
  %451 = load i64, i64* %RBP
  %452 = sub i64 %451, 8
  %453 = load i64, i64* %RCX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = inttoptr i64 %452 to i64*
  store i64 %453, i64* %456
  %457 = load i64, i64* %RAX
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460
  %462 = sext i32 %461 to i64
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = mul i64 %463, 8
  %465 = add i64 %464, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 8
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RBP
  %471 = sub i64 %470, 40
  %472 = load i64, i64* %RAX
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %471 to i64*
  store i64 %472, i64* %475
  %476 = load i64, i64* %PC
  %477 = sub i64 %476, 1201
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %477, i64* %480, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 7
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  store i32 1, i32* %485
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 12
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %RDI, align 8, !tbaa !2428
  %493 = load i64, i64* %PC
  %494 = sub i64 %493, 134
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 5
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 5
  store i64 %498, i64* %PC
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %500 = load i64, i64* %499, align 8, !tbaa !2428
  %501 = add i64 %500, -8
  %502 = inttoptr i64 %501 to i64*
  store i64 %496, i64* %502
  store i64 %501, i64* %499, align 8, !tbaa !2428
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %503, align 8, !tbaa !2428
  %504 = load i64, i64* %PC
  %505 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.1)
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 8
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i64*
  %511 = load i64, i64* %510
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC
  store i64 %512, i64* %RCX, align 8, !tbaa !2428
  %515 = load i64, i64* %RCX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = add i64 4, %515
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = icmp ult i64 %518, %515
  %520 = icmp ult i64 %518, 4
  %521 = or i1 %519, %520
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %522, i8* %523, align 1, !tbaa !2432
  %524 = trunc i64 %518 to i32
  %525 = and i32 %524, 255
  %526 = call i32 @llvm.ctpop.i32(i32 %525) #16
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %529, i8* %530, align 1, !tbaa !2446
  %531 = xor i64 4, %515
  %532 = xor i64 %531, %518
  %533 = lshr i64 %532, 4
  %534 = trunc i64 %533 to i8
  %535 = and i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %535, i8* %536, align 1, !tbaa !2447
  %537 = icmp eq i64 %518, 0
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %538, i8* %539, align 1, !tbaa !2448
  %540 = lshr i64 %518, 63
  %541 = trunc i64 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %541, i8* %542, align 1, !tbaa !2449
  %543 = lshr i64 %515, 63
  %544 = xor i64 %540, %543
  %545 = add nuw nsw i64 %544, %540
  %546 = icmp eq i64 %545, 2
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %547, i8* %548, align 1, !tbaa !2450
  %549 = load i64, i64* %RBP
  %550 = sub i64 %549, 8
  %551 = load i64, i64* %RCX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %550 to i64*
  store i64 %551, i64* %554
  %555 = load i64, i64* %RAX
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558
  %560 = sext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = mul i64 %561, 8
  %563 = add i64 %562, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 8
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i64*
  %567 = load i64, i64* %566
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 40
  %570 = load i64, i64* %RAX
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %569 to i64*
  store i64 %570, i64* %573
  %574 = load i64, i64* %PC
  %575 = sub i64 %574, 51
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 5
  store i64 %577, i64* %PC
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %575, i64* %578, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 12
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 7
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i32*
  store i32 6, i32* %583
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 12
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 3
  store i64 %587, i64* %PC
  %588 = inttoptr i64 %585 to i32*
  %589 = load i32, i32* %588
  %590 = zext i32 %589 to i64
  store i64 %590, i64* %RDI, align 8, !tbaa !2428
  %591 = load i64, i64* %PC
  %592 = sub i64 %591, 384
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 5
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  store i64 %596, i64* %PC
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %598 = load i64, i64* %597, align 8, !tbaa !2428
  %599 = add i64 %598, -8
  %600 = inttoptr i64 %599 to i64*
  store i64 %594, i64* %600
  store i64 %599, i64* %597, align 8, !tbaa !2428
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %592, i64* %601, align 8, !tbaa !2428
  %602 = load i64, i64* %PC
  %603 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %602, %struct.Memory* %MEMORY.1)
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 8
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i64*
  %609 = load i64, i64* %608
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %613 = load i64, i64* %RCX
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC
  %616 = add i64 4, %613
  store i64 %616, i64* %RCX, align 8, !tbaa !2428
  %617 = icmp ult i64 %616, %613
  %618 = icmp ult i64 %616, 4
  %619 = or i1 %617, %618
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %620, i8* %621, align 1, !tbaa !2432
  %622 = trunc i64 %616 to i32
  %623 = and i32 %622, 255
  %624 = call i32 @llvm.ctpop.i32(i32 %623) #16
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %627, i8* %628, align 1, !tbaa !2446
  %629 = xor i64 4, %613
  %630 = xor i64 %629, %616
  %631 = lshr i64 %630, 4
  %632 = trunc i64 %631 to i8
  %633 = and i8 %632, 1
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %633, i8* %634, align 1, !tbaa !2447
  %635 = icmp eq i64 %616, 0
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %636, i8* %637, align 1, !tbaa !2448
  %638 = lshr i64 %616, 63
  %639 = trunc i64 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = lshr i64 %613, 63
  %642 = xor i64 %638, %641
  %643 = add nuw nsw i64 %642, %638
  %644 = icmp eq i64 %643, 2
  %645 = zext i1 %644 to i8
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %645, i8* %646, align 1, !tbaa !2450
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %RCX
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %648 to i64*
  store i64 %649, i64* %652
  %653 = load i64, i64* %RAX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i32*
  %657 = load i32, i32* %656
  %658 = sext i32 %657 to i64
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = mul i64 %659, 8
  %661 = add i64 %660, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 8
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 40
  %668 = load i64, i64* %RAX
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 4
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %667 to i64*
  store i64 %668, i64* %671
  %672 = load i64, i64* %PC
  %673 = sub i64 %672, 301
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 5
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %673, i64* %676, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400828, %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_400666, %block_40056c, %block_4009ea, %block_4008f0, %block_400aeb, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %143, %block_400aeb ], [ %754, %block_4009b8 ], [ %309, %block_4008f0 ], [ %50, %block_4007f6 ], [ %603, %block_400666 ], [ %407, %block_4009ea ], [ %505, %block_40056c ], [ %852, %block_400ab2 ], [ %950, %block_400634 ], [ %1048, %block_40072e ], [ %1146, %block_400828 ]
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 40
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to i64*
  %682 = load i64, i64* %681
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = load i64, i64* %RAX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 2
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %683, i64* %686, align 8, !tbaa !2428
  %687 = load i64, i64* %PC
  switch i64 %687, label %1255 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 12
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  store i32 11, i32* %692
  %693 = load i64, i64* %PC
  %694 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %693, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %694

block_40085a:                                     ; preds = %block_400566
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 12
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  store i32 16, i32* %699
  %700 = load i64, i64* %PC
  %701 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %700, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %701

block_400954:                                     ; preds = %block_400566
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 12
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 7
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i32*
  store i32 21, i32* %706
  %707 = load i64, i64* %PC
  %708 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %707, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %708

block_400559:                                     ; preds = %block_400566
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 12
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 7
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i32*
  store i32 0, i32* %713
  %714 = load i64, i64* %PC
  %715 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %714, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %715

block_400a4e:                                     ; preds = %block_400566
  %716 = load i64, i64* %RBP
  %717 = sub i64 %716, 12
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 7
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %717 to i32*
  store i32 26, i32* %720
  %721 = load i64, i64* %PC
  %722 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %721, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %722

block_400b48:                                     ; preds = %block_400566
  %723 = load i64, i64* %RBP
  %724 = sub i64 %723, 12
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 7
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i32*
  store i32 31, i32* %727
  %728 = load i64, i64* %PC
  %729 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %728, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %729

block_4009b8:                                     ; preds = %block_400566
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 12
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 7
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to i32*
  store i32 23, i32* %734
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 12
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 3
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i32*
  %740 = load i32, i32* %739
  %741 = zext i32 %740 to i64
  store i64 %741, i64* %RDI, align 8, !tbaa !2428
  %742 = load i64, i64* %PC
  %743 = sub i64 %742, 1234
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 5
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %749 = load i64, i64* %748, align 8, !tbaa !2428
  %750 = add i64 %749, -8
  %751 = inttoptr i64 %750 to i64*
  store i64 %745, i64* %751
  store i64 %750, i64* %748, align 8, !tbaa !2428
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %743, i64* %752, align 8, !tbaa !2428
  %753 = load i64, i64* %PC
  %754 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %753, %struct.Memory* %MEMORY.1)
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 8
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i64*
  %760 = load i64, i64* %759
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = load i64, i64* %RAX
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 3
  store i64 %763, i64* %PC
  store i64 %761, i64* %RCX, align 8, !tbaa !2428
  %764 = load i64, i64* %RCX
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 4
  store i64 %766, i64* %PC
  %767 = add i64 4, %764
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = icmp ult i64 %767, %764
  %769 = icmp ult i64 %767, 4
  %770 = or i1 %768, %769
  %771 = zext i1 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %771, i8* %772, align 1, !tbaa !2432
  %773 = trunc i64 %767 to i32
  %774 = and i32 %773, 255
  %775 = call i32 @llvm.ctpop.i32(i32 %774) #16
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %778, i8* %779, align 1, !tbaa !2446
  %780 = xor i64 4, %764
  %781 = xor i64 %780, %767
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %784, i8* %785, align 1, !tbaa !2447
  %786 = icmp eq i64 %767, 0
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %787, i8* %788, align 1, !tbaa !2448
  %789 = lshr i64 %767, 63
  %790 = trunc i64 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %790, i8* %791, align 1, !tbaa !2449
  %792 = lshr i64 %764, 63
  %793 = xor i64 %789, %792
  %794 = add nuw nsw i64 %793, %789
  %795 = icmp eq i64 %794, 2
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %796, i8* %797, align 1, !tbaa !2450
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 8
  %800 = load i64, i64* %RCX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 4
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %799 to i64*
  store i64 %800, i64* %803
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807
  %809 = sext i32 %808 to i64
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = mul i64 %810, 8
  %812 = add i64 %811, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 8
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i64*
  %816 = load i64, i64* %815
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 40
  %819 = load i64, i64* %RAX
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 4
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %818 to i64*
  store i64 %819, i64* %822
  %823 = load i64, i64* %PC
  %824 = sub i64 %823, 1151
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 5
  store i64 %826, i64* %PC
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %824, i64* %827, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 12
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 7
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i32*
  store i32 28, i32* %832
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 12
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i32*
  %838 = load i32, i32* %837
  %839 = zext i32 %838 to i64
  store i64 %839, i64* %RDI, align 8, !tbaa !2428
  %840 = load i64, i64* %PC
  %841 = sub i64 %840, 1484
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 5
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  store i64 %845, i64* %PC
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %847 = load i64, i64* %846, align 8, !tbaa !2428
  %848 = add i64 %847, -8
  %849 = inttoptr i64 %848 to i64*
  store i64 %843, i64* %849
  store i64 %848, i64* %846, align 8, !tbaa !2428
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %841, i64* %850, align 8, !tbaa !2428
  %851 = load i64, i64* %PC
  %852 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %851, %struct.Memory* %MEMORY.1)
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 8
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 4
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i64*
  %858 = load i64, i64* %857
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = load i64, i64* %RAX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 3
  store i64 %861, i64* %PC
  store i64 %859, i64* %RCX, align 8, !tbaa !2428
  %862 = load i64, i64* %RCX
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = add i64 4, %862
  store i64 %865, i64* %RCX, align 8, !tbaa !2428
  %866 = icmp ult i64 %865, %862
  %867 = icmp ult i64 %865, 4
  %868 = or i1 %866, %867
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %869, i8* %870, align 1, !tbaa !2432
  %871 = trunc i64 %865 to i32
  %872 = and i32 %871, 255
  %873 = call i32 @llvm.ctpop.i32(i32 %872) #16
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = xor i8 %875, 1
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %876, i8* %877, align 1, !tbaa !2446
  %878 = xor i64 4, %862
  %879 = xor i64 %878, %865
  %880 = lshr i64 %879, 4
  %881 = trunc i64 %880 to i8
  %882 = and i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %882, i8* %883, align 1, !tbaa !2447
  %884 = icmp eq i64 %865, 0
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %885, i8* %886, align 1, !tbaa !2448
  %887 = lshr i64 %865, 63
  %888 = trunc i64 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %888, i8* %889, align 1, !tbaa !2449
  %890 = lshr i64 %862, 63
  %891 = xor i64 %887, %890
  %892 = add nuw nsw i64 %891, %887
  %893 = icmp eq i64 %892, 2
  %894 = zext i1 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %894, i8* %895, align 1, !tbaa !2450
  %896 = load i64, i64* %RBP
  %897 = sub i64 %896, 8
  %898 = load i64, i64* %RCX
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %897 to i64*
  store i64 %898, i64* %901
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 3
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i32*
  %906 = load i32, i32* %905
  %907 = sext i32 %906 to i64
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = load i64, i64* %RAX
  %909 = mul i64 %908, 8
  %910 = add i64 %909, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 8
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i64*
  %914 = load i64, i64* %913
  store i64 %914, i64* %RAX, align 8, !tbaa !2428
  %915 = load i64, i64* %RBP
  %916 = sub i64 %915, 40
  %917 = load i64, i64* %RAX
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 4
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %916 to i64*
  store i64 %917, i64* %920
  %921 = load i64, i64* %PC
  %922 = sub i64 %921, 1401
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 5
  store i64 %924, i64* %PC
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %922, i64* %925, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %926 = load i64, i64* %RBP
  %927 = sub i64 %926, 12
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 7
  store i64 %929, i64* %PC
  %930 = inttoptr i64 %927 to i32*
  store i32 5, i32* %930
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 12
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i32*
  %936 = load i32, i32* %935
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RDI, align 8, !tbaa !2428
  %938 = load i64, i64* %PC
  %939 = sub i64 %938, 334
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 5
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 5
  store i64 %943, i64* %PC
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %945 = load i64, i64* %944, align 8, !tbaa !2428
  %946 = add i64 %945, -8
  %947 = inttoptr i64 %946 to i64*
  store i64 %941, i64* %947
  store i64 %946, i64* %944, align 8, !tbaa !2428
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %939, i64* %948, align 8, !tbaa !2428
  %949 = load i64, i64* %PC
  %950 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %949, %struct.Memory* %MEMORY.1)
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 8
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RAX
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 3
  store i64 %959, i64* %PC
  store i64 %957, i64* %RCX, align 8, !tbaa !2428
  %960 = load i64, i64* %RCX
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 4
  store i64 %962, i64* %PC
  %963 = add i64 4, %960
  store i64 %963, i64* %RCX, align 8, !tbaa !2428
  %964 = icmp ult i64 %963, %960
  %965 = icmp ult i64 %963, 4
  %966 = or i1 %964, %965
  %967 = zext i1 %966 to i8
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %967, i8* %968, align 1, !tbaa !2432
  %969 = trunc i64 %963 to i32
  %970 = and i32 %969, 255
  %971 = call i32 @llvm.ctpop.i32(i32 %970) #16
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  %974 = xor i8 %973, 1
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %974, i8* %975, align 1, !tbaa !2446
  %976 = xor i64 4, %960
  %977 = xor i64 %976, %963
  %978 = lshr i64 %977, 4
  %979 = trunc i64 %978 to i8
  %980 = and i8 %979, 1
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %980, i8* %981, align 1, !tbaa !2447
  %982 = icmp eq i64 %963, 0
  %983 = zext i1 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %983, i8* %984, align 1, !tbaa !2448
  %985 = lshr i64 %963, 63
  %986 = trunc i64 %985 to i8
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %986, i8* %987, align 1, !tbaa !2449
  %988 = lshr i64 %960, 63
  %989 = xor i64 %985, %988
  %990 = add nuw nsw i64 %989, %985
  %991 = icmp eq i64 %990, 2
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %992, i8* %993, align 1, !tbaa !2450
  %994 = load i64, i64* %RBP
  %995 = sub i64 %994, 8
  %996 = load i64, i64* %RCX
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 4
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %995 to i64*
  store i64 %996, i64* %999
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 3
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i32*
  %1004 = load i32, i32* %1003
  %1005 = sext i32 %1004 to i64
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RAX
  %1007 = mul i64 %1006, 8
  %1008 = add i64 %1007, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 8
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1008 to i64*
  %1012 = load i64, i64* %1011
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = load i64, i64* %RBP
  %1014 = sub i64 %1013, 40
  %1015 = load i64, i64* %RAX
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 4
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1014 to i64*
  store i64 %1015, i64* %1018
  %1019 = load i64, i64* %PC
  %1020 = sub i64 %1019, 251
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 5
  store i64 %1022, i64* %PC
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1020, i64* %1023, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1024 = load i64, i64* %RBP
  %1025 = sub i64 %1024, 12
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 7
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1025 to i32*
  store i32 10, i32* %1028
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 12
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 3
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i32*
  %1034 = load i32, i32* %1033
  %1035 = zext i32 %1034 to i64
  store i64 %1035, i64* %RDI, align 8, !tbaa !2428
  %1036 = load i64, i64* %PC
  %1037 = sub i64 %1036, 584
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 5
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 5
  store i64 %1041, i64* %PC
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1043 = load i64, i64* %1042, align 8, !tbaa !2428
  %1044 = add i64 %1043, -8
  %1045 = inttoptr i64 %1044 to i64*
  store i64 %1039, i64* %1045
  store i64 %1044, i64* %1042, align 8, !tbaa !2428
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1037, i64* %1046, align 8, !tbaa !2428
  %1047 = load i64, i64* %PC
  %1048 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1047, %struct.Memory* %MEMORY.1)
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 8
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RAX, align 8, !tbaa !2428
  %1055 = load i64, i64* %RAX
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC
  store i64 %1055, i64* %RCX, align 8, !tbaa !2428
  %1058 = load i64, i64* %RCX
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 4
  store i64 %1060, i64* %PC
  %1061 = add i64 4, %1058
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1062 = icmp ult i64 %1061, %1058
  %1063 = icmp ult i64 %1061, 4
  %1064 = or i1 %1062, %1063
  %1065 = zext i1 %1064 to i8
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1065, i8* %1066, align 1, !tbaa !2432
  %1067 = trunc i64 %1061 to i32
  %1068 = and i32 %1067, 255
  %1069 = call i32 @llvm.ctpop.i32(i32 %1068) #16
  %1070 = trunc i32 %1069 to i8
  %1071 = and i8 %1070, 1
  %1072 = xor i8 %1071, 1
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1072, i8* %1073, align 1, !tbaa !2446
  %1074 = xor i64 4, %1058
  %1075 = xor i64 %1074, %1061
  %1076 = lshr i64 %1075, 4
  %1077 = trunc i64 %1076 to i8
  %1078 = and i8 %1077, 1
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1078, i8* %1079, align 1, !tbaa !2447
  %1080 = icmp eq i64 %1061, 0
  %1081 = zext i1 %1080 to i8
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1081, i8* %1082, align 1, !tbaa !2448
  %1083 = lshr i64 %1061, 63
  %1084 = trunc i64 %1083 to i8
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1084, i8* %1085, align 1, !tbaa !2449
  %1086 = lshr i64 %1058, 63
  %1087 = xor i64 %1083, %1086
  %1088 = add nuw nsw i64 %1087, %1083
  %1089 = icmp eq i64 %1088, 2
  %1090 = zext i1 %1089 to i8
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1090, i8* %1091, align 1, !tbaa !2450
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 8
  %1094 = load i64, i64* %RCX
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1093 to i64*
  store i64 %1094, i64* %1097
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 3
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1098 to i32*
  %1102 = load i32, i32* %1101
  %1103 = sext i32 %1102 to i64
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RAX
  %1105 = mul i64 %1104, 8
  %1106 = add i64 %1105, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 8
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = load i64, i64* %RBP
  %1112 = sub i64 %1111, 40
  %1113 = load i64, i64* %RAX
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 4
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1112 to i64*
  store i64 %1113, i64* %1116
  %1117 = load i64, i64* %PC
  %1118 = sub i64 %1117, 501
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 5
  store i64 %1120, i64* %PC
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1118, i64* %1121, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1122 = load i64, i64* %RBP
  %1123 = sub i64 %1122, 12
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 7
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1123 to i32*
  store i32 15, i32* %1126
  %1127 = load i64, i64* %RBP
  %1128 = sub i64 %1127, 12
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 3
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1128 to i32*
  %1132 = load i32, i32* %1131
  %1133 = zext i32 %1132 to i64
  store i64 %1133, i64* %RDI, align 8, !tbaa !2428
  %1134 = load i64, i64* %PC
  %1135 = sub i64 %1134, 834
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 5
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 5
  store i64 %1139, i64* %PC
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1141 = load i64, i64* %1140, align 8, !tbaa !2428
  %1142 = add i64 %1141, -8
  %1143 = inttoptr i64 %1142 to i64*
  store i64 %1137, i64* %1143
  store i64 %1142, i64* %1140, align 8, !tbaa !2428
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1135, i64* %1144, align 8, !tbaa !2428
  %1145 = load i64, i64* %PC
  %1146 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1145, %struct.Memory* %MEMORY.1)
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 8
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i64*
  %1152 = load i64, i64* %1151
  store i64 %1152, i64* %RAX, align 8, !tbaa !2428
  %1153 = load i64, i64* %RAX
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 3
  store i64 %1155, i64* %PC
  store i64 %1153, i64* %RCX, align 8, !tbaa !2428
  %1156 = load i64, i64* %RCX
  %1157 = load i64, i64* %PC
  %1158 = add i64 %1157, 4
  store i64 %1158, i64* %PC
  %1159 = add i64 4, %1156
  store i64 %1159, i64* %RCX, align 8, !tbaa !2428
  %1160 = icmp ult i64 %1159, %1156
  %1161 = icmp ult i64 %1159, 4
  %1162 = or i1 %1160, %1161
  %1163 = zext i1 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1163, i8* %1164, align 1, !tbaa !2432
  %1165 = trunc i64 %1159 to i32
  %1166 = and i32 %1165, 255
  %1167 = call i32 @llvm.ctpop.i32(i32 %1166) #16
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  %1170 = xor i8 %1169, 1
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1170, i8* %1171, align 1, !tbaa !2446
  %1172 = xor i64 4, %1156
  %1173 = xor i64 %1172, %1159
  %1174 = lshr i64 %1173, 4
  %1175 = trunc i64 %1174 to i8
  %1176 = and i8 %1175, 1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1176, i8* %1177, align 1, !tbaa !2447
  %1178 = icmp eq i64 %1159, 0
  %1179 = zext i1 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1179, i8* %1180, align 1, !tbaa !2448
  %1181 = lshr i64 %1159, 63
  %1182 = trunc i64 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1182, i8* %1183, align 1, !tbaa !2449
  %1184 = lshr i64 %1156, 63
  %1185 = xor i64 %1181, %1184
  %1186 = add nuw nsw i64 %1185, %1181
  %1187 = icmp eq i64 %1186, 2
  %1188 = zext i1 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1188, i8* %1189, align 1, !tbaa !2450
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 8
  %1192 = load i64, i64* %RCX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1191 to i64*
  store i64 %1192, i64* %1195
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 3
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i32*
  %1200 = load i32, i32* %1199
  %1201 = sext i32 %1200 to i64
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RAX
  %1203 = mul i64 %1202, 8
  %1204 = add i64 %1203, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 8
  store i64 %1206, i64* %PC
  %1207 = inttoptr i64 %1204 to i64*
  %1208 = load i64, i64* %1207
  store i64 %1208, i64* %RAX, align 8, !tbaa !2428
  %1209 = load i64, i64* %RBP
  %1210 = sub i64 %1209, 40
  %1211 = load i64, i64* %RAX
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 4
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1210 to i64*
  store i64 %1211, i64* %1214
  %1215 = load i64, i64* %PC
  %1216 = sub i64 %1215, 751
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 5
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1216, i64* %1219, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1220 = load i64, i64* %RBP
  %1221 = sub i64 %1220, 12
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 7
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1221 to i32*
  store i32 8, i32* %1224
  %1225 = load i64, i64* %PC
  %1226 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %1225, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1226

block_400922:                                     ; preds = %block_400566
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 12
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 7
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  store i32 20, i32* %1231
  %1232 = load i64, i64* %PC
  %1233 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %1232, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1233

block_400a1c:                                     ; preds = %block_400566
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 12
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 7
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  store i32 25, i32* %1238
  %1239 = load i64, i64* %PC
  %1240 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1239, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1240

block_400b16:                                     ; preds = %block_400566
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 12
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 7
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i32*
  store i32 30, i32* %1245
  %1246 = load i64, i64* %PC
  %1247 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1246, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1247

block_400602:                                     ; preds = %block_400566
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 12
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 7
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to i32*
  store i32 4, i32* %1252
  %1253 = load i64, i64* %PC
  %1254 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1253, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1254

; <label>:1255:                                   ; preds = %block_400566
  %1256 = load i64, i64* %PC
  %1257 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1256, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1257
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cd0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400767(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400767

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.1)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.1)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 1, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 12
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 134
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %234 = load i64, i64* %233, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %230, i64* %236
  store i64 %235, i64* %233, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %237, align 8, !tbaa !2428
  %238 = load i64, i64* %PC
  %239 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.1)
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = add i64 4, %249
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = icmp ult i64 %252, %249
  %254 = icmp ult i64 %252, 4
  %255 = or i1 %253, %254
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %256, i8* %257, align 1, !tbaa !2432
  %258 = trunc i64 %252 to i32
  %259 = and i32 %258, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i64 4, %249
  %266 = xor i64 %265, %252
  %267 = lshr i64 %266, 4
  %268 = trunc i64 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i64 %252, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %252, 63
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %249, 63
  %278 = xor i64 %274, %277
  %279 = add nuw nsw i64 %278, %274
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %RCX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288
  %289 = load i64, i64* %RAX
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RAX
  %296 = mul i64 %295, 8
  %297 = add i64 %296, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 8
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 40
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %303 to i64*
  store i64 %304, i64* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 51
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 9, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %319

block_4009ea:                                     ; preds = %block_400566
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 24, i32* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 12
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 1284
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.1)
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 8
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = add i64 4, %354
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = icmp ult i64 %357, %354
  %359 = icmp ult i64 %357, 4
  %360 = or i1 %358, %359
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2432
  %363 = trunc i64 %357 to i32
  %364 = and i32 %363, 255
  %365 = call i32 @llvm.ctpop.i32(i32 %364) #16
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %368, i8* %369, align 1, !tbaa !2446
  %370 = xor i64 4, %354
  %371 = xor i64 %370, %357
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i64 %357, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i64 %357, 63
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i64 %354, 63
  %383 = xor i64 %379, %382
  %384 = add nuw nsw i64 %383, %379
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 8
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %389 to i64*
  store i64 %390, i64* %393
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = mul i64 %400, 8
  %402 = add i64 %401, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 8
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 40
  %409 = load i64, i64* %RAX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 1201
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400566

block_400767:                                     ; preds = %block_400760, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400760 ]
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 3
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  %423 = load i32, i32* %422
  %424 = zext i32 %423 to i64
  store i64 %424, i64* %RDI, align 8, !tbaa !2428
  %425 = load i64, i64* %PC
  %426 = sub i64 %425, 634
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 5
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 5
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %432 = load i64, i64* %431, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %428, i64* %434
  store i64 %433, i64* %431, align 8, !tbaa !2428
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %426, i64* %435, align 8, !tbaa !2428
  %436 = load i64, i64* %PC
  %437 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %436, %struct.Memory* %MEMORY.0)
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 8
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 4
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %439 to i64*
  %443 = load i64, i64* %442
  store i64 %443, i64* %RAX, align 8, !tbaa !2428
  %444 = load i64, i64* %RAX
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 3
  store i64 %446, i64* %PC
  store i64 %444, i64* %RCX, align 8, !tbaa !2428
  %447 = load i64, i64* %RCX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = add i64 4, %447
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %451 = icmp ult i64 %450, %447
  %452 = icmp ult i64 %450, 4
  %453 = or i1 %451, %452
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %454, i8* %455, align 1, !tbaa !2432
  %456 = trunc i64 %450 to i32
  %457 = and i32 %456, 255
  %458 = call i32 @llvm.ctpop.i32(i32 %457) #16
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %461, i8* %462, align 1, !tbaa !2446
  %463 = xor i64 4, %447
  %464 = xor i64 %463, %450
  %465 = lshr i64 %464, 4
  %466 = trunc i64 %465 to i8
  %467 = and i8 %466, 1
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %467, i8* %468, align 1, !tbaa !2447
  %469 = icmp eq i64 %450, 0
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %470, i8* %471, align 1, !tbaa !2448
  %472 = lshr i64 %450, 63
  %473 = trunc i64 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %473, i8* %474, align 1, !tbaa !2449
  %475 = lshr i64 %447, 63
  %476 = xor i64 %472, %475
  %477 = add nuw nsw i64 %476, %472
  %478 = icmp eq i64 %477, 2
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %479, i8* %480, align 1, !tbaa !2450
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 8
  %483 = load i64, i64* %RCX
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %482 to i64*
  store i64 %483, i64* %486
  %487 = load i64, i64* %RAX
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490
  %492 = sext i32 %491 to i64
  store i64 %492, i64* %RAX, align 8, !tbaa !2428
  %493 = load i64, i64* %RAX
  %494 = mul i64 %493, 8
  %495 = add i64 %494, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 8
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i64*
  %499 = load i64, i64* %498
  store i64 %499, i64* %RAX, align 8, !tbaa !2428
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 40
  %502 = load i64, i64* %RAX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %PC
  %507 = sub i64 %506, 551
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %510, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %511 = load i64, i64* %RBP
  %512 = sub i64 %511, 12
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 7
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %512 to i32*
  store i32 6, i32* %515
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 3
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  %521 = load i32, i32* %520
  %522 = zext i32 %521 to i64
  store i64 %522, i64* %RDI, align 8, !tbaa !2428
  %523 = load i64, i64* %PC
  %524 = sub i64 %523, 384
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 5
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %530 = load i64, i64* %529, align 8, !tbaa !2428
  %531 = add i64 %530, -8
  %532 = inttoptr i64 %531 to i64*
  store i64 %526, i64* %532
  store i64 %531, i64* %529, align 8, !tbaa !2428
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %524, i64* %533, align 8, !tbaa !2428
  %534 = load i64, i64* %PC
  %535 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %534, %struct.Memory* %MEMORY.1)
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 8
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = load i64, i64* %RAX
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC
  store i64 %542, i64* %RCX, align 8, !tbaa !2428
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = add i64 4, %545
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = icmp ult i64 %548, %545
  %550 = icmp ult i64 %548, 4
  %551 = or i1 %549, %550
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %552, i8* %553, align 1, !tbaa !2432
  %554 = trunc i64 %548 to i32
  %555 = and i32 %554, 255
  %556 = call i32 @llvm.ctpop.i32(i32 %555) #16
  %557 = trunc i32 %556 to i8
  %558 = and i8 %557, 1
  %559 = xor i8 %558, 1
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %559, i8* %560, align 1, !tbaa !2446
  %561 = xor i64 4, %545
  %562 = xor i64 %561, %548
  %563 = lshr i64 %562, 4
  %564 = trunc i64 %563 to i8
  %565 = and i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %565, i8* %566, align 1, !tbaa !2447
  %567 = icmp eq i64 %548, 0
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %568, i8* %569, align 1, !tbaa !2448
  %570 = lshr i64 %548, 63
  %571 = trunc i64 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %571, i8* %572, align 1, !tbaa !2449
  %573 = lshr i64 %545, 63
  %574 = xor i64 %570, %573
  %575 = add nuw nsw i64 %574, %570
  %576 = icmp eq i64 %575, 2
  %577 = zext i1 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %577, i8* %578, align 1, !tbaa !2450
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 8
  %581 = load i64, i64* %RCX
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %580 to i64*
  store i64 %581, i64* %584
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 3
  store i64 %587, i64* %PC
  %588 = inttoptr i64 %585 to i32*
  %589 = load i32, i32* %588
  %590 = sext i32 %589 to i64
  store i64 %590, i64* %RAX, align 8, !tbaa !2428
  %591 = load i64, i64* %RAX
  %592 = mul i64 %591, 8
  %593 = add i64 %592, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 8
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 40
  %600 = load i64, i64* %RAX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %PC
  %605 = sub i64 %604, 301
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %605, i64* %608, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 12
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 7
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i32*
  store i32 29, i32* %613
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 3
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  %619 = load i32, i32* %618
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RDI, align 8, !tbaa !2428
  %621 = load i64, i64* %PC
  %622 = sub i64 %621, 1534
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %624, i64* %630
  store i64 %629, i64* %627, align 8, !tbaa !2428
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %622, i64* %631, align 8, !tbaa !2428
  %632 = load i64, i64* %PC
  %633 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %632, %struct.Memory* %MEMORY.1)
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 8
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = load i64, i64* %RAX
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 3
  store i64 %642, i64* %PC
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %643 = load i64, i64* %RCX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = add i64 4, %643
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %643
  %648 = icmp ult i64 %646, 4
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %650, i8* %651, align 1, !tbaa !2432
  %652 = trunc i64 %646 to i32
  %653 = and i32 %652, 255
  %654 = call i32 @llvm.ctpop.i32(i32 %653) #16
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  %657 = xor i8 %656, 1
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %657, i8* %658, align 1, !tbaa !2446
  %659 = xor i64 4, %643
  %660 = xor i64 %659, %646
  %661 = lshr i64 %660, 4
  %662 = trunc i64 %661 to i8
  %663 = and i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %663, i8* %664, align 1, !tbaa !2447
  %665 = icmp eq i64 %646, 0
  %666 = zext i1 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %666, i8* %667, align 1, !tbaa !2448
  %668 = lshr i64 %646, 63
  %669 = trunc i64 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %669, i8* %670, align 1, !tbaa !2449
  %671 = lshr i64 %643, 63
  %672 = xor i64 %668, %671
  %673 = add nuw nsw i64 %672, %668
  %674 = icmp eq i64 %673, 2
  %675 = zext i1 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %675, i8* %676, align 1, !tbaa !2450
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 8
  %679 = load i64, i64* %RCX
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = inttoptr i64 %678 to i64*
  store i64 %679, i64* %682
  %683 = load i64, i64* %RAX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i32*
  %687 = load i32, i32* %686
  %688 = sext i32 %687 to i64
  store i64 %688, i64* %RAX, align 8, !tbaa !2428
  %689 = load i64, i64* %RAX
  %690 = mul i64 %689, 8
  %691 = add i64 %690, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 8
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 40
  %698 = load i64, i64* %RAX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %PC
  %703 = sub i64 %702, 1451
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 5
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %703, i64* %706, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 12
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 7
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %708 to i32*
  store i32 11, i32* %711
  br label %block_400767

block_40085a:                                     ; preds = %block_400566
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 12
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 7
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  store i32 16, i32* %716
  %717 = load i64, i64* %PC
  %718 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %717, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %718

block_400954:                                     ; preds = %block_400566
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 12
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  store i32 21, i32* %723
  %724 = load i64, i64* %PC
  %725 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %724, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %725

block_400a4e:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 26, i32* %730
  %731 = load i64, i64* %PC
  %732 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %731, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %732

block_400b48:                                     ; preds = %block_400566
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 12
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i32*
  store i32 31, i32* %737
  %738 = load i64, i64* %PC
  %739 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %739

block_4007c4:                                     ; preds = %block_400566
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 12
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 7
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i32*
  store i32 13, i32* %744
  %745 = load i64, i64* %PC
  %746 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %745, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %746

block_400566:                                     ; preds = %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400ae4, %block_400666, %block_400767, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %437, %block_400767 ], [ %1293, %block_400922 ], [ %1195, %block_400828 ], [ %1097, %block_40072e ], [ %999, %block_400ab2 ], [ %901, %block_400634 ], [ %803, %block_4009b8 ], [ %141, %block_4008f0 ], [ %344, %block_4009ea ], [ %239, %block_40056c ], [ %43, %block_4007f6 ], [ %535, %block_400666 ], [ %633, %block_400ae4 ]
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 40
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 2
  store i64 %755, i64* %PC
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %756, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  switch i64 %757, label %1437 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 12
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 7
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  store i32 3, i32* %762
  %763 = load i64, i64* %PC
  %764 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %764

block_4008be:                                     ; preds = %block_400566
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 12
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  store i32 18, i32* %769
  %770 = load i64, i64* %PC
  %771 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %770, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %771

block_4006ca:                                     ; preds = %block_400566
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 12
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  store i32 8, i32* %776
  %777 = load i64, i64* %PC
  %778 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %777, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %778

block_4009b8:                                     ; preds = %block_400566
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 7
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  store i32 23, i32* %783
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 12
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = load i64, i64* %PC
  %792 = sub i64 %791, 1234
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 5
  store i64 %796, i64* %PC
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %798 = load i64, i64* %797, align 8, !tbaa !2428
  %799 = add i64 %798, -8
  %800 = inttoptr i64 %799 to i64*
  store i64 %794, i64* %800
  store i64 %799, i64* %797, align 8, !tbaa !2428
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %792, i64* %801, align 8, !tbaa !2428
  %802 = load i64, i64* %PC
  %803 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %802, %struct.Memory* %MEMORY.1)
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 8
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  store i64 %810, i64* %RCX, align 8, !tbaa !2428
  %813 = load i64, i64* %RCX
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 4
  store i64 %815, i64* %PC
  %816 = add i64 4, %813
  store i64 %816, i64* %RCX, align 8, !tbaa !2428
  %817 = icmp ult i64 %816, %813
  %818 = icmp ult i64 %816, 4
  %819 = or i1 %817, %818
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = trunc i64 %816 to i32
  %823 = and i32 %822, 255
  %824 = call i32 @llvm.ctpop.i32(i32 %823) #16
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %827, i8* %828, align 1, !tbaa !2446
  %829 = xor i64 4, %813
  %830 = xor i64 %829, %816
  %831 = lshr i64 %830, 4
  %832 = trunc i64 %831 to i8
  %833 = and i8 %832, 1
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %833, i8* %834, align 1, !tbaa !2447
  %835 = icmp eq i64 %816, 0
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %836, i8* %837, align 1, !tbaa !2448
  %838 = lshr i64 %816, 63
  %839 = trunc i64 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2449
  %841 = lshr i64 %813, 63
  %842 = xor i64 %838, %841
  %843 = add nuw nsw i64 %842, %838
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %845, i8* %846, align 1, !tbaa !2450
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %RCX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %848 to i64*
  store i64 %849, i64* %852
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 3
  store i64 %855, i64* %PC
  %856 = inttoptr i64 %853 to i32*
  %857 = load i32, i32* %856
  %858 = sext i32 %857 to i64
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = load i64, i64* %RAX
  %860 = mul i64 %859, 8
  %861 = add i64 %860, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 8
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 40
  %868 = load i64, i64* %RAX
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %867 to i64*
  store i64 %868, i64* %871
  %872 = load i64, i64* %PC
  %873 = sub i64 %872, 1151
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 5
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %873, i64* %876, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 12
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 7
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  store i32 5, i32* %881
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 12
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %883 to i32*
  %887 = load i32, i32* %886
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RDI, align 8, !tbaa !2428
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 334
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %892, i64* %898
  store i64 %897, i64* %895, align 8, !tbaa !2428
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %899, align 8, !tbaa !2428
  %900 = load i64, i64* %PC
  %901 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %900, %struct.Memory* %MEMORY.1)
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 8
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 4
  store i64 %905, i64* %PC
  %906 = inttoptr i64 %903 to i64*
  %907 = load i64, i64* %906
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = load i64, i64* %RAX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %911 = load i64, i64* %RCX
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 4
  store i64 %913, i64* %PC
  %914 = add i64 4, %911
  store i64 %914, i64* %RCX, align 8, !tbaa !2428
  %915 = icmp ult i64 %914, %911
  %916 = icmp ult i64 %914, 4
  %917 = or i1 %915, %916
  %918 = zext i1 %917 to i8
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %918, i8* %919, align 1, !tbaa !2432
  %920 = trunc i64 %914 to i32
  %921 = and i32 %920, 255
  %922 = call i32 @llvm.ctpop.i32(i32 %921) #16
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %925, i8* %926, align 1, !tbaa !2446
  %927 = xor i64 4, %911
  %928 = xor i64 %927, %914
  %929 = lshr i64 %928, 4
  %930 = trunc i64 %929 to i8
  %931 = and i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %931, i8* %932, align 1, !tbaa !2447
  %933 = icmp eq i64 %914, 0
  %934 = zext i1 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %934, i8* %935, align 1, !tbaa !2448
  %936 = lshr i64 %914, 63
  %937 = trunc i64 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %937, i8* %938, align 1, !tbaa !2449
  %939 = lshr i64 %911, 63
  %940 = xor i64 %936, %939
  %941 = add nuw nsw i64 %940, %936
  %942 = icmp eq i64 %941, 2
  %943 = zext i1 %942 to i8
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %943, i8* %944, align 1, !tbaa !2450
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 8
  %947 = load i64, i64* %RCX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %946 to i64*
  store i64 %947, i64* %950
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 3
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i32*
  %955 = load i32, i32* %954
  %956 = sext i32 %955 to i64
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RAX
  %958 = mul i64 %957, 8
  %959 = add i64 %958, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 8
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i64*
  %963 = load i64, i64* %962
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 40
  %966 = load i64, i64* %RAX
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 4
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %965 to i64*
  store i64 %966, i64* %969
  %970 = load i64, i64* %PC
  %971 = sub i64 %970, 251
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 5
  store i64 %973, i64* %PC
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %971, i64* %974, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 12
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  store i32 28, i32* %979
  %980 = load i64, i64* %RBP
  %981 = sub i64 %980, 12
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 3
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %981 to i32*
  %985 = load i32, i32* %984
  %986 = zext i32 %985 to i64
  store i64 %986, i64* %RDI, align 8, !tbaa !2428
  %987 = load i64, i64* %PC
  %988 = sub i64 %987, 1484
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 5
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 5
  store i64 %992, i64* %PC
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %994 = load i64, i64* %993, align 8, !tbaa !2428
  %995 = add i64 %994, -8
  %996 = inttoptr i64 %995 to i64*
  store i64 %990, i64* %996
  store i64 %995, i64* %993, align 8, !tbaa !2428
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %988, i64* %997, align 8, !tbaa !2428
  %998 = load i64, i64* %PC
  %999 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %998, %struct.Memory* %MEMORY.1)
  %1000 = load i64, i64* %RBP
  %1001 = sub i64 %1000, 8
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 4
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1001 to i64*
  %1005 = load i64, i64* %1004
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RAX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC
  store i64 %1006, i64* %RCX, align 8, !tbaa !2428
  %1009 = load i64, i64* %RCX
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 4
  store i64 %1011, i64* %PC
  %1012 = add i64 4, %1009
  store i64 %1012, i64* %RCX, align 8, !tbaa !2428
  %1013 = icmp ult i64 %1012, %1009
  %1014 = icmp ult i64 %1012, 4
  %1015 = or i1 %1013, %1014
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1016, i8* %1017, align 1, !tbaa !2432
  %1018 = trunc i64 %1012 to i32
  %1019 = and i32 %1018, 255
  %1020 = call i32 @llvm.ctpop.i32(i32 %1019) #16
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1023, i8* %1024, align 1, !tbaa !2446
  %1025 = xor i64 4, %1009
  %1026 = xor i64 %1025, %1012
  %1027 = lshr i64 %1026, 4
  %1028 = trunc i64 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1029, i8* %1030, align 1, !tbaa !2447
  %1031 = icmp eq i64 %1012, 0
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1032, i8* %1033, align 1, !tbaa !2448
  %1034 = lshr i64 %1012, 63
  %1035 = trunc i64 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1035, i8* %1036, align 1, !tbaa !2449
  %1037 = lshr i64 %1009, 63
  %1038 = xor i64 %1034, %1037
  %1039 = add nuw nsw i64 %1038, %1034
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1041, i8* %1042, align 1, !tbaa !2450
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 8
  %1045 = load i64, i64* %RCX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 4
  store i64 %1047, i64* %PC
  %1048 = inttoptr i64 %1044 to i64*
  store i64 %1045, i64* %1048
  %1049 = load i64, i64* %RAX
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 3
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1049 to i32*
  %1053 = load i32, i32* %1052
  %1054 = sext i32 %1053 to i64
  store i64 %1054, i64* %RAX, align 8, !tbaa !2428
  %1055 = load i64, i64* %RAX
  %1056 = mul i64 %1055, 8
  %1057 = add i64 %1056, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 8
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP
  %1063 = sub i64 %1062, 40
  %1064 = load i64, i64* %RAX
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1063 to i64*
  store i64 %1064, i64* %1067
  %1068 = load i64, i64* %PC
  %1069 = sub i64 %1068, 1401
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 5
  store i64 %1071, i64* %PC
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1069, i64* %1072, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 12
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 7
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  store i32 10, i32* %1077
  %1078 = load i64, i64* %RBP
  %1079 = sub i64 %1078, 12
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 3
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1079 to i32*
  %1083 = load i32, i32* %1082
  %1084 = zext i32 %1083 to i64
  store i64 %1084, i64* %RDI, align 8, !tbaa !2428
  %1085 = load i64, i64* %PC
  %1086 = sub i64 %1085, 584
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 5
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 5
  store i64 %1090, i64* %PC
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1092 = load i64, i64* %1091, align 8, !tbaa !2428
  %1093 = add i64 %1092, -8
  %1094 = inttoptr i64 %1093 to i64*
  store i64 %1088, i64* %1094
  store i64 %1093, i64* %1091, align 8, !tbaa !2428
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1086, i64* %1095, align 8, !tbaa !2428
  %1096 = load i64, i64* %PC
  %1097 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1096, %struct.Memory* %MEMORY.1)
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 8
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RAX
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 3
  store i64 %1106, i64* %PC
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RCX
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = add i64 4, %1107
  store i64 %1110, i64* %RCX, align 8, !tbaa !2428
  %1111 = icmp ult i64 %1110, %1107
  %1112 = icmp ult i64 %1110, 4
  %1113 = or i1 %1111, %1112
  %1114 = zext i1 %1113 to i8
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1114, i8* %1115, align 1, !tbaa !2432
  %1116 = trunc i64 %1110 to i32
  %1117 = and i32 %1116, 255
  %1118 = call i32 @llvm.ctpop.i32(i32 %1117) #16
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1121, i8* %1122, align 1, !tbaa !2446
  %1123 = xor i64 4, %1107
  %1124 = xor i64 %1123, %1110
  %1125 = lshr i64 %1124, 4
  %1126 = trunc i64 %1125 to i8
  %1127 = and i8 %1126, 1
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1127, i8* %1128, align 1, !tbaa !2447
  %1129 = icmp eq i64 %1110, 0
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1130, i8* %1131, align 1, !tbaa !2448
  %1132 = lshr i64 %1110, 63
  %1133 = trunc i64 %1132 to i8
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1133, i8* %1134, align 1, !tbaa !2449
  %1135 = lshr i64 %1107, 63
  %1136 = xor i64 %1132, %1135
  %1137 = add nuw nsw i64 %1136, %1132
  %1138 = icmp eq i64 %1137, 2
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1139, i8* %1140, align 1, !tbaa !2450
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 8
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1142 to i64*
  store i64 %1143, i64* %1146
  %1147 = load i64, i64* %RAX
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 3
  store i64 %1149, i64* %PC
  %1150 = inttoptr i64 %1147 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  store i64 %1152, i64* %RAX, align 8, !tbaa !2428
  %1153 = load i64, i64* %RAX
  %1154 = mul i64 %1153, 8
  %1155 = add i64 %1154, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 8
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1155 to i64*
  %1159 = load i64, i64* %1158
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 40
  %1162 = load i64, i64* %RAX
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1161 to i64*
  store i64 %1162, i64* %1165
  %1166 = load i64, i64* %PC
  %1167 = sub i64 %1166, 501
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 5
  store i64 %1169, i64* %PC
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1167, i64* %1170, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 12
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 7
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1172 to i32*
  store i32 15, i32* %1175
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 12
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 3
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180
  %1182 = zext i32 %1181 to i64
  store i64 %1182, i64* %RDI, align 8, !tbaa !2428
  %1183 = load i64, i64* %PC
  %1184 = sub i64 %1183, 834
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 5
  store i64 %1188, i64* %PC
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1190 = load i64, i64* %1189, align 8, !tbaa !2428
  %1191 = add i64 %1190, -8
  %1192 = inttoptr i64 %1191 to i64*
  store i64 %1186, i64* %1192
  store i64 %1191, i64* %1189, align 8, !tbaa !2428
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1184, i64* %1193, align 8, !tbaa !2428
  %1194 = load i64, i64* %PC
  %1195 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1194, %struct.Memory* %MEMORY.1)
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 8
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RAX
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 3
  store i64 %1204, i64* %PC
  store i64 %1202, i64* %RCX, align 8, !tbaa !2428
  %1205 = load i64, i64* %RCX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = add i64 4, %1205
  store i64 %1208, i64* %RCX, align 8, !tbaa !2428
  %1209 = icmp ult i64 %1208, %1205
  %1210 = icmp ult i64 %1208, 4
  %1211 = or i1 %1209, %1210
  %1212 = zext i1 %1211 to i8
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1212, i8* %1213, align 1, !tbaa !2432
  %1214 = trunc i64 %1208 to i32
  %1215 = and i32 %1214, 255
  %1216 = call i32 @llvm.ctpop.i32(i32 %1215) #16
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1219, i8* %1220, align 1, !tbaa !2446
  %1221 = xor i64 4, %1205
  %1222 = xor i64 %1221, %1208
  %1223 = lshr i64 %1222, 4
  %1224 = trunc i64 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1225, i8* %1226, align 1, !tbaa !2447
  %1227 = icmp eq i64 %1208, 0
  %1228 = zext i1 %1227 to i8
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1228, i8* %1229, align 1, !tbaa !2448
  %1230 = lshr i64 %1208, 63
  %1231 = trunc i64 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1231, i8* %1232, align 1, !tbaa !2449
  %1233 = lshr i64 %1205, 63
  %1234 = xor i64 %1230, %1233
  %1235 = add nuw nsw i64 %1234, %1230
  %1236 = icmp eq i64 %1235, 2
  %1237 = zext i1 %1236 to i8
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1237, i8* %1238, align 1, !tbaa !2450
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 8
  %1241 = load i64, i64* %RCX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = inttoptr i64 %1240 to i64*
  store i64 %1241, i64* %1244
  %1245 = load i64, i64* %RAX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 3
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1245 to i32*
  %1249 = load i32, i32* %1248
  %1250 = sext i32 %1249 to i64
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  %1251 = load i64, i64* %RAX
  %1252 = mul i64 %1251, 8
  %1253 = add i64 %1252, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 8
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256
  store i64 %1257, i64* %RAX, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 40
  %1260 = load i64, i64* %RAX
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 4
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1259 to i64*
  store i64 %1260, i64* %1263
  %1264 = load i64, i64* %PC
  %1265 = sub i64 %1264, 751
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 5
  store i64 %1267, i64* %PC
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1265, i64* %1268, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1269 = load i64, i64* %RBP
  %1270 = sub i64 %1269, 12
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 7
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1270 to i32*
  store i32 20, i32* %1273
  %1274 = load i64, i64* %RBP
  %1275 = sub i64 %1274, 12
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 3
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1275 to i32*
  %1279 = load i32, i32* %1278
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %RDI, align 8, !tbaa !2428
  %1281 = load i64, i64* %PC
  %1282 = sub i64 %1281, 1084
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 5
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 5
  store i64 %1286, i64* %PC
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1288 = load i64, i64* %1287, align 8, !tbaa !2428
  %1289 = add i64 %1288, -8
  %1290 = inttoptr i64 %1289 to i64*
  store i64 %1284, i64* %1290
  store i64 %1289, i64* %1287, align 8, !tbaa !2428
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1282, i64* %1291, align 8, !tbaa !2428
  %1292 = load i64, i64* %PC
  %1293 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1292, %struct.Memory* %MEMORY.1)
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 8
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 4
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i64*
  %1299 = load i64, i64* %1298
  store i64 %1299, i64* %RAX, align 8, !tbaa !2428
  %1300 = load i64, i64* %RAX
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 3
  store i64 %1302, i64* %PC
  store i64 %1300, i64* %RCX, align 8, !tbaa !2428
  %1303 = load i64, i64* %RCX
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 4
  store i64 %1305, i64* %PC
  %1306 = add i64 4, %1303
  store i64 %1306, i64* %RCX, align 8, !tbaa !2428
  %1307 = icmp ult i64 %1306, %1303
  %1308 = icmp ult i64 %1306, 4
  %1309 = or i1 %1307, %1308
  %1310 = zext i1 %1309 to i8
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1310, i8* %1311, align 1, !tbaa !2432
  %1312 = trunc i64 %1306 to i32
  %1313 = and i32 %1312, 255
  %1314 = call i32 @llvm.ctpop.i32(i32 %1313) #16
  %1315 = trunc i32 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = xor i8 %1316, 1
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1317, i8* %1318, align 1, !tbaa !2446
  %1319 = xor i64 4, %1303
  %1320 = xor i64 %1319, %1306
  %1321 = lshr i64 %1320, 4
  %1322 = trunc i64 %1321 to i8
  %1323 = and i8 %1322, 1
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1323, i8* %1324, align 1, !tbaa !2447
  %1325 = icmp eq i64 %1306, 0
  %1326 = zext i1 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1326, i8* %1327, align 1, !tbaa !2448
  %1328 = lshr i64 %1306, 63
  %1329 = trunc i64 %1328 to i8
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1329, i8* %1330, align 1, !tbaa !2449
  %1331 = lshr i64 %1303, 63
  %1332 = xor i64 %1328, %1331
  %1333 = add nuw nsw i64 %1332, %1328
  %1334 = icmp eq i64 %1333, 2
  %1335 = zext i1 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1335, i8* %1336, align 1, !tbaa !2450
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 8
  %1339 = load i64, i64* %RCX
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 4
  store i64 %1341, i64* %PC
  %1342 = inttoptr i64 %1338 to i64*
  store i64 %1339, i64* %1342
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1343 to i32*
  %1347 = load i32, i32* %1346
  %1348 = sext i32 %1347 to i64
  store i64 %1348, i64* %RAX, align 8, !tbaa !2428
  %1349 = load i64, i64* %RAX
  %1350 = mul i64 %1349, 8
  %1351 = add i64 %1350, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 8
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1351 to i64*
  %1355 = load i64, i64* %1354
  store i64 %1355, i64* %RAX, align 8, !tbaa !2428
  %1356 = load i64, i64* %RBP
  %1357 = sub i64 %1356, 40
  %1358 = load i64, i64* %RAX
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 4
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1357 to i64*
  store i64 %1358, i64* %1361
  %1362 = load i64, i64* %PC
  %1363 = sub i64 %1362, 1001
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 5
  store i64 %1365, i64* %PC
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1363, i64* %1366, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 12
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 7
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  store i32 2, i32* %1371
  %1372 = load i64, i64* %PC
  %1373 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %1372, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1373

block_400559:                                     ; preds = %block_400566
  %1374 = load i64, i64* %RBP
  %1375 = sub i64 %1374, 12
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 7
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1375 to i32*
  store i32 0, i32* %1378
  %1379 = load i64, i64* %PC
  %1380 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %1379, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1380

block_400a1c:                                     ; preds = %block_400566
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 12
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 7
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1382 to i32*
  store i32 25, i32* %1385
  %1386 = load i64, i64* %PC
  %1387 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1386, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1387

block_400698:                                     ; preds = %block_400566
  %1388 = load i64, i64* %RBP
  %1389 = sub i64 %1388, 12
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 7
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1389 to i32*
  store i32 7, i32* %1392
  %1393 = load i64, i64* %PC
  %1394 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %1393, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1394

block_400b16:                                     ; preds = %block_400566
  %1395 = load i64, i64* %RBP
  %1396 = sub i64 %1395, 12
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 7
  store i64 %1398, i64* %PC
  %1399 = inttoptr i64 %1396 to i32*
  store i32 30, i32* %1399
  %1400 = load i64, i64* %PC
  %1401 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1400, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1401

block_400792:                                     ; preds = %block_400566
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 12
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 7
  store i64 %1405, i64* %PC
  %1406 = inttoptr i64 %1403 to i32*
  store i32 12, i32* %1406
  %1407 = load i64, i64* %PC
  %1408 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1407, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1408

block_40088c:                                     ; preds = %block_400566
  %1409 = load i64, i64* %RBP
  %1410 = sub i64 %1409, 12
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 7
  store i64 %1412, i64* %PC
  %1413 = inttoptr i64 %1410 to i32*
  store i32 17, i32* %1413
  %1414 = load i64, i64* %PC
  %1415 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1414, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1415

block_400986:                                     ; preds = %block_400566
  %1416 = load i64, i64* %RBP
  %1417 = sub i64 %1416, 12
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 7
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1417 to i32*
  store i32 22, i32* %1420
  %1421 = load i64, i64* %PC
  %1422 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1421, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1422

block_400602:                                     ; preds = %block_400566
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 12
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 7
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i32*
  store i32 4, i32* %1427
  %1428 = load i64, i64* %PC
  %1429 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1428, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1429

block_400a80:                                     ; preds = %block_400566
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 12
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 7
  store i64 %1433, i64* %PC
  %1434 = inttoptr i64 %1431 to i32*
  store i32 27, i32* %1434
  %1435 = load i64, i64* %PC
  %1436 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1435, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1436

; <label>:1437:                                   ; preds = %block_400566
  %1438 = load i64, i64* %PC
  %1439 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1438, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1439
}

; Function Attrs: noinline
define %struct.Memory* @sub_40069f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40069f

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400a1c, %block_40059e, %block_40069f, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %1534, %block_40069f ], [ %1441, %block_400922 ], [ %1343, %block_400828 ], [ %1245, %block_40072e ], [ %1147, %block_400ab2 ], [ %1049, %block_400634 ], [ %951, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %853, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %1632, %block_40059e ], [ %1730, %block_400a1c ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %1851 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 0, i32* %730
  %731 = load i64, i64* %RSP
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = add i64 48, %731
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %731
  %736 = icmp ult i64 %734, 48
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 48, %731
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i64 %731, 63
  %760 = xor i64 %756, %759
  %761 = add nuw nsw i64 %760, %756
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %768 = load i64, i64* %767, align 8, !tbaa !2428
  %769 = add i64 %768, 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %RBP, align 8, !tbaa !2428
  store i64 %769, i64* %767, align 8, !tbaa !2428
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 1
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %774, align 8, !tbaa !2428
  %779 = add i64 %776, 8
  store i64 %779, i64* %775, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 7
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  store i32 21, i32* %784
  %785 = load i64, i64* %PC
  %786 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %785, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %786

block_4005d0:                                     ; preds = %block_400566
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 12
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 7
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i32*
  store i32 3, i32* %791
  %792 = load i64, i64* %PC
  %793 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %792, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %793

block_400a4e:                                     ; preds = %block_400566
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 12
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 7
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i32*
  store i32 26, i32* %798
  %799 = load i64, i64* %PC
  %800 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %799, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %800

block_4006ca:                                     ; preds = %block_400566
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 12
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 7
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i32*
  store i32 8, i32* %805
  %806 = load i64, i64* %PC
  %807 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %806, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %807

block_400b48:                                     ; preds = %block_400566
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 12
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 7
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i32*
  store i32 31, i32* %812
  %813 = load i64, i64* %PC
  %814 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %813, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %814

block_4007c4:                                     ; preds = %block_400566
  %815 = load i64, i64* %RBP
  %816 = sub i64 %815, 12
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %816 to i32*
  store i32 13, i32* %819
  %820 = load i64, i64* %PC
  %821 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %820, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %821

block_4008be:                                     ; preds = %block_400566
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 12
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 7
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i32*
  store i32 18, i32* %826
  %827 = load i64, i64* %PC
  %828 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %827, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %828

block_40056c:                                     ; preds = %block_400566
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 12
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 7
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i32*
  store i32 1, i32* %833
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 12
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 3
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i32*
  %839 = load i32, i32* %838
  %840 = zext i32 %839 to i64
  store i64 %840, i64* %RDI, align 8, !tbaa !2428
  %841 = load i64, i64* %PC
  %842 = sub i64 %841, 134
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 5
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 5
  store i64 %846, i64* %PC
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %848 = load i64, i64* %847, align 8, !tbaa !2428
  %849 = add i64 %848, -8
  %850 = inttoptr i64 %849 to i64*
  store i64 %844, i64* %850
  store i64 %849, i64* %847, align 8, !tbaa !2428
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %842, i64* %851, align 8, !tbaa !2428
  %852 = load i64, i64* %PC
  %853 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %852, %struct.Memory* %MEMORY.0)
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 8
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %855 to i64*
  %859 = load i64, i64* %858
  store i64 %859, i64* %RAX, align 8, !tbaa !2428
  %860 = load i64, i64* %RAX
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  store i64 %860, i64* %RCX, align 8, !tbaa !2428
  %863 = load i64, i64* %RCX
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC
  %866 = add i64 4, %863
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ult i64 %866, %863
  %868 = icmp ult i64 %866, 4
  %869 = or i1 %867, %868
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %870, i8* %871, align 1, !tbaa !2432
  %872 = trunc i64 %866 to i32
  %873 = and i32 %872, 255
  %874 = call i32 @llvm.ctpop.i32(i32 %873) #16
  %875 = trunc i32 %874 to i8
  %876 = and i8 %875, 1
  %877 = xor i8 %876, 1
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %877, i8* %878, align 1, !tbaa !2446
  %879 = xor i64 4, %863
  %880 = xor i64 %879, %866
  %881 = lshr i64 %880, 4
  %882 = trunc i64 %881 to i8
  %883 = and i8 %882, 1
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %883, i8* %884, align 1, !tbaa !2447
  %885 = icmp eq i64 %866, 0
  %886 = zext i1 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %886, i8* %887, align 1, !tbaa !2448
  %888 = lshr i64 %866, 63
  %889 = trunc i64 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %889, i8* %890, align 1, !tbaa !2449
  %891 = lshr i64 %863, 63
  %892 = xor i64 %888, %891
  %893 = add nuw nsw i64 %892, %888
  %894 = icmp eq i64 %893, 2
  %895 = zext i1 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %895, i8* %896, align 1, !tbaa !2450
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 8
  %899 = load i64, i64* %RCX
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %898 to i64*
  store i64 %899, i64* %902
  %903 = load i64, i64* %RAX
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 3
  store i64 %905, i64* %PC
  %906 = inttoptr i64 %903 to i32*
  %907 = load i32, i32* %906
  %908 = sext i32 %907 to i64
  store i64 %908, i64* %RAX, align 8, !tbaa !2428
  %909 = load i64, i64* %RAX
  %910 = mul i64 %909, 8
  %911 = add i64 %910, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 8
  store i64 %913, i64* %PC
  %914 = inttoptr i64 %911 to i64*
  %915 = load i64, i64* %914
  store i64 %915, i64* %RAX, align 8, !tbaa !2428
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 40
  %918 = load i64, i64* %RAX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %917 to i64*
  store i64 %918, i64* %921
  %922 = load i64, i64* %PC
  %923 = sub i64 %922, 51
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  store i64 %925, i64* %PC
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %923, i64* %926, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %927 = load i64, i64* %RBP
  %928 = sub i64 %927, 12
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 7
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i32*
  store i32 23, i32* %931
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 12
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 3
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i32*
  %937 = load i32, i32* %936
  %938 = zext i32 %937 to i64
  store i64 %938, i64* %RDI, align 8, !tbaa !2428
  %939 = load i64, i64* %PC
  %940 = sub i64 %939, 1234
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 5
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 5
  store i64 %944, i64* %PC
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %946 = load i64, i64* %945, align 8, !tbaa !2428
  %947 = add i64 %946, -8
  %948 = inttoptr i64 %947 to i64*
  store i64 %942, i64* %948
  store i64 %947, i64* %945, align 8, !tbaa !2428
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %940, i64* %949, align 8, !tbaa !2428
  %950 = load i64, i64* %PC
  %951 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %950, %struct.Memory* %MEMORY.0)
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 8
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i64*
  %957 = load i64, i64* %956
  store i64 %957, i64* %RAX, align 8, !tbaa !2428
  %958 = load i64, i64* %RAX
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 3
  store i64 %960, i64* %PC
  store i64 %958, i64* %RCX, align 8, !tbaa !2428
  %961 = load i64, i64* %RCX
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 4
  store i64 %963, i64* %PC
  %964 = add i64 4, %961
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %965 = icmp ult i64 %964, %961
  %966 = icmp ult i64 %964, 4
  %967 = or i1 %965, %966
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %968, i8* %969, align 1, !tbaa !2432
  %970 = trunc i64 %964 to i32
  %971 = and i32 %970, 255
  %972 = call i32 @llvm.ctpop.i32(i32 %971) #16
  %973 = trunc i32 %972 to i8
  %974 = and i8 %973, 1
  %975 = xor i8 %974, 1
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %975, i8* %976, align 1, !tbaa !2446
  %977 = xor i64 4, %961
  %978 = xor i64 %977, %964
  %979 = lshr i64 %978, 4
  %980 = trunc i64 %979 to i8
  %981 = and i8 %980, 1
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %981, i8* %982, align 1, !tbaa !2447
  %983 = icmp eq i64 %964, 0
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %984, i8* %985, align 1, !tbaa !2448
  %986 = lshr i64 %964, 63
  %987 = trunc i64 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %987, i8* %988, align 1, !tbaa !2449
  %989 = lshr i64 %961, 63
  %990 = xor i64 %986, %989
  %991 = add nuw nsw i64 %990, %986
  %992 = icmp eq i64 %991, 2
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %993, i8* %994, align 1, !tbaa !2450
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 8
  %997 = load i64, i64* %RCX
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 4
  store i64 %999, i64* %PC
  %1000 = inttoptr i64 %996 to i64*
  store i64 %997, i64* %1000
  %1001 = load i64, i64* %RAX
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 3
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1001 to i32*
  %1005 = load i32, i32* %1004
  %1006 = sext i32 %1005 to i64
  store i64 %1006, i64* %RAX, align 8, !tbaa !2428
  %1007 = load i64, i64* %RAX
  %1008 = mul i64 %1007, 8
  %1009 = add i64 %1008, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 8
  store i64 %1011, i64* %PC
  %1012 = inttoptr i64 %1009 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %RAX, align 8, !tbaa !2428
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 40
  %1016 = load i64, i64* %RAX
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 4
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1015 to i64*
  store i64 %1016, i64* %1019
  %1020 = load i64, i64* %PC
  %1021 = sub i64 %1020, 1151
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 5
  store i64 %1023, i64* %PC
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1021, i64* %1024, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 12
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 7
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1026 to i32*
  store i32 5, i32* %1029
  %1030 = load i64, i64* %RBP
  %1031 = sub i64 %1030, 12
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 3
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  %1035 = load i32, i32* %1034
  %1036 = zext i32 %1035 to i64
  store i64 %1036, i64* %RDI, align 8, !tbaa !2428
  %1037 = load i64, i64* %PC
  %1038 = sub i64 %1037, 334
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 5
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 5
  store i64 %1042, i64* %PC
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1044 = load i64, i64* %1043, align 8, !tbaa !2428
  %1045 = add i64 %1044, -8
  %1046 = inttoptr i64 %1045 to i64*
  store i64 %1040, i64* %1046
  store i64 %1045, i64* %1043, align 8, !tbaa !2428
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1038, i64* %1047, align 8, !tbaa !2428
  %1048 = load i64, i64* %PC
  %1049 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1048, %struct.Memory* %MEMORY.0)
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 8
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 4
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1051 to i64*
  %1055 = load i64, i64* %1054
  store i64 %1055, i64* %RAX, align 8, !tbaa !2428
  %1056 = load i64, i64* %RAX
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 3
  store i64 %1058, i64* %PC
  store i64 %1056, i64* %RCX, align 8, !tbaa !2428
  %1059 = load i64, i64* %RCX
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC
  %1062 = add i64 4, %1059
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1063 = icmp ult i64 %1062, %1059
  %1064 = icmp ult i64 %1062, 4
  %1065 = or i1 %1063, %1064
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1066, i8* %1067, align 1, !tbaa !2432
  %1068 = trunc i64 %1062 to i32
  %1069 = and i32 %1068, 255
  %1070 = call i32 @llvm.ctpop.i32(i32 %1069) #16
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = xor i8 %1072, 1
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1073, i8* %1074, align 1, !tbaa !2446
  %1075 = xor i64 4, %1059
  %1076 = xor i64 %1075, %1062
  %1077 = lshr i64 %1076, 4
  %1078 = trunc i64 %1077 to i8
  %1079 = and i8 %1078, 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1079, i8* %1080, align 1, !tbaa !2447
  %1081 = icmp eq i64 %1062, 0
  %1082 = zext i1 %1081 to i8
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1082, i8* %1083, align 1, !tbaa !2448
  %1084 = lshr i64 %1062, 63
  %1085 = trunc i64 %1084 to i8
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1085, i8* %1086, align 1, !tbaa !2449
  %1087 = lshr i64 %1059, 63
  %1088 = xor i64 %1084, %1087
  %1089 = add nuw nsw i64 %1088, %1084
  %1090 = icmp eq i64 %1089, 2
  %1091 = zext i1 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1091, i8* %1092, align 1, !tbaa !2450
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 8
  %1095 = load i64, i64* %RCX
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1094 to i64*
  store i64 %1095, i64* %1098
  %1099 = load i64, i64* %RAX
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 3
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i32*
  %1103 = load i32, i32* %1102
  %1104 = sext i32 %1103 to i64
  store i64 %1104, i64* %RAX, align 8, !tbaa !2428
  %1105 = load i64, i64* %RAX
  %1106 = mul i64 %1105, 8
  %1107 = add i64 %1106, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 8
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 40
  %1114 = load i64, i64* %RAX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1113 to i64*
  store i64 %1114, i64* %1117
  %1118 = load i64, i64* %PC
  %1119 = sub i64 %1118, 251
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 5
  store i64 %1121, i64* %PC
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1119, i64* %1122, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1123 = load i64, i64* %RBP
  %1124 = sub i64 %1123, 12
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 7
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1124 to i32*
  store i32 28, i32* %1127
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 12
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 3
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i32*
  %1133 = load i32, i32* %1132
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RDI, align 8, !tbaa !2428
  %1135 = load i64, i64* %PC
  %1136 = sub i64 %1135, 1484
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 5
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  store i64 %1140, i64* %PC
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1142 = load i64, i64* %1141, align 8, !tbaa !2428
  %1143 = add i64 %1142, -8
  %1144 = inttoptr i64 %1143 to i64*
  store i64 %1138, i64* %1144
  store i64 %1143, i64* %1141, align 8, !tbaa !2428
  %1145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1136, i64* %1145, align 8, !tbaa !2428
  %1146 = load i64, i64* %PC
  %1147 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1146, %struct.Memory* %MEMORY.0)
  %1148 = load i64, i64* %RBP
  %1149 = sub i64 %1148, 8
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 4
  store i64 %1151, i64* %PC
  %1152 = inttoptr i64 %1149 to i64*
  %1153 = load i64, i64* %1152
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = load i64, i64* %RAX
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  store i64 %1154, i64* %RCX, align 8, !tbaa !2428
  %1157 = load i64, i64* %RCX
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 4
  store i64 %1159, i64* %PC
  %1160 = add i64 4, %1157
  store i64 %1160, i64* %RCX, align 8, !tbaa !2428
  %1161 = icmp ult i64 %1160, %1157
  %1162 = icmp ult i64 %1160, 4
  %1163 = or i1 %1161, %1162
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1164, i8* %1165, align 1, !tbaa !2432
  %1166 = trunc i64 %1160 to i32
  %1167 = and i32 %1166, 255
  %1168 = call i32 @llvm.ctpop.i32(i32 %1167) #16
  %1169 = trunc i32 %1168 to i8
  %1170 = and i8 %1169, 1
  %1171 = xor i8 %1170, 1
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1171, i8* %1172, align 1, !tbaa !2446
  %1173 = xor i64 4, %1157
  %1174 = xor i64 %1173, %1160
  %1175 = lshr i64 %1174, 4
  %1176 = trunc i64 %1175 to i8
  %1177 = and i8 %1176, 1
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1177, i8* %1178, align 1, !tbaa !2447
  %1179 = icmp eq i64 %1160, 0
  %1180 = zext i1 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1180, i8* %1181, align 1, !tbaa !2448
  %1182 = lshr i64 %1160, 63
  %1183 = trunc i64 %1182 to i8
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1183, i8* %1184, align 1, !tbaa !2449
  %1185 = lshr i64 %1157, 63
  %1186 = xor i64 %1182, %1185
  %1187 = add nuw nsw i64 %1186, %1182
  %1188 = icmp eq i64 %1187, 2
  %1189 = zext i1 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1189, i8* %1190, align 1, !tbaa !2450
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 8
  %1193 = load i64, i64* %RCX
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 4
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1192 to i64*
  store i64 %1193, i64* %1196
  %1197 = load i64, i64* %RAX
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i32*
  %1201 = load i32, i32* %1200
  %1202 = sext i32 %1201 to i64
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  %1203 = load i64, i64* %RAX
  %1204 = mul i64 %1203, 8
  %1205 = add i64 %1204, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 8
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1205 to i64*
  %1209 = load i64, i64* %1208
  store i64 %1209, i64* %RAX, align 8, !tbaa !2428
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 40
  %1212 = load i64, i64* %RAX
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 4
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1211 to i64*
  store i64 %1212, i64* %1215
  %1216 = load i64, i64* %PC
  %1217 = sub i64 %1216, 1401
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 5
  store i64 %1219, i64* %PC
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1217, i64* %1220, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 12
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 7
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1222 to i32*
  store i32 10, i32* %1225
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 12
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 3
  store i64 %1229, i64* %PC
  %1230 = inttoptr i64 %1227 to i32*
  %1231 = load i32, i32* %1230
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %RDI, align 8, !tbaa !2428
  %1233 = load i64, i64* %PC
  %1234 = sub i64 %1233, 584
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 5
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 5
  store i64 %1238, i64* %PC
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1240 = load i64, i64* %1239, align 8, !tbaa !2428
  %1241 = add i64 %1240, -8
  %1242 = inttoptr i64 %1241 to i64*
  store i64 %1236, i64* %1242
  store i64 %1241, i64* %1239, align 8, !tbaa !2428
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1234, i64* %1243, align 8, !tbaa !2428
  %1244 = load i64, i64* %PC
  %1245 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1244, %struct.Memory* %MEMORY.0)
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 8
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i64*
  %1251 = load i64, i64* %1250
  store i64 %1251, i64* %RAX, align 8, !tbaa !2428
  %1252 = load i64, i64* %RAX
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 3
  store i64 %1254, i64* %PC
  store i64 %1252, i64* %RCX, align 8, !tbaa !2428
  %1255 = load i64, i64* %RCX
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 4
  store i64 %1257, i64* %PC
  %1258 = add i64 4, %1255
  store i64 %1258, i64* %RCX, align 8, !tbaa !2428
  %1259 = icmp ult i64 %1258, %1255
  %1260 = icmp ult i64 %1258, 4
  %1261 = or i1 %1259, %1260
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1262, i8* %1263, align 1, !tbaa !2432
  %1264 = trunc i64 %1258 to i32
  %1265 = and i32 %1264, 255
  %1266 = call i32 @llvm.ctpop.i32(i32 %1265) #16
  %1267 = trunc i32 %1266 to i8
  %1268 = and i8 %1267, 1
  %1269 = xor i8 %1268, 1
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1269, i8* %1270, align 1, !tbaa !2446
  %1271 = xor i64 4, %1255
  %1272 = xor i64 %1271, %1258
  %1273 = lshr i64 %1272, 4
  %1274 = trunc i64 %1273 to i8
  %1275 = and i8 %1274, 1
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1275, i8* %1276, align 1, !tbaa !2447
  %1277 = icmp eq i64 %1258, 0
  %1278 = zext i1 %1277 to i8
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1278, i8* %1279, align 1, !tbaa !2448
  %1280 = lshr i64 %1258, 63
  %1281 = trunc i64 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1281, i8* %1282, align 1, !tbaa !2449
  %1283 = lshr i64 %1255, 63
  %1284 = xor i64 %1280, %1283
  %1285 = add nuw nsw i64 %1284, %1280
  %1286 = icmp eq i64 %1285, 2
  %1287 = zext i1 %1286 to i8
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1287, i8* %1288, align 1, !tbaa !2450
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 8
  %1291 = load i64, i64* %RCX
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1290 to i64*
  store i64 %1291, i64* %1294
  %1295 = load i64, i64* %RAX
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 3
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i32*
  %1299 = load i32, i32* %1298
  %1300 = sext i32 %1299 to i64
  store i64 %1300, i64* %RAX, align 8, !tbaa !2428
  %1301 = load i64, i64* %RAX
  %1302 = mul i64 %1301, 8
  %1303 = add i64 %1302, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 8
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1303 to i64*
  %1307 = load i64, i64* %1306
  store i64 %1307, i64* %RAX, align 8, !tbaa !2428
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 40
  %1310 = load i64, i64* %RAX
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1309 to i64*
  store i64 %1310, i64* %1313
  %1314 = load i64, i64* %PC
  %1315 = sub i64 %1314, 501
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 5
  store i64 %1317, i64* %PC
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1315, i64* %1318, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 12
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  store i32 15, i32* %1323
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 12
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %RDI, align 8, !tbaa !2428
  %1331 = load i64, i64* %PC
  %1332 = sub i64 %1331, 834
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1338 = load i64, i64* %1337, align 8, !tbaa !2428
  %1339 = add i64 %1338, -8
  %1340 = inttoptr i64 %1339 to i64*
  store i64 %1334, i64* %1340
  store i64 %1339, i64* %1337, align 8, !tbaa !2428
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1332, i64* %1341, align 8, !tbaa !2428
  %1342 = load i64, i64* %PC
  %1343 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1342, %struct.Memory* %MEMORY.0)
  %1344 = load i64, i64* %RBP
  %1345 = sub i64 %1344, 8
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 4
  store i64 %1347, i64* %PC
  %1348 = inttoptr i64 %1345 to i64*
  %1349 = load i64, i64* %1348
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = load i64, i64* %RAX
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  store i64 %1350, i64* %RCX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RCX
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = add i64 4, %1353
  store i64 %1356, i64* %RCX, align 8, !tbaa !2428
  %1357 = icmp ult i64 %1356, %1353
  %1358 = icmp ult i64 %1356, 4
  %1359 = or i1 %1357, %1358
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1360, i8* %1361, align 1, !tbaa !2432
  %1362 = trunc i64 %1356 to i32
  %1363 = and i32 %1362, 255
  %1364 = call i32 @llvm.ctpop.i32(i32 %1363) #16
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1367, i8* %1368, align 1, !tbaa !2446
  %1369 = xor i64 4, %1353
  %1370 = xor i64 %1369, %1356
  %1371 = lshr i64 %1370, 4
  %1372 = trunc i64 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1373, i8* %1374, align 1, !tbaa !2447
  %1375 = icmp eq i64 %1356, 0
  %1376 = zext i1 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1376, i8* %1377, align 1, !tbaa !2448
  %1378 = lshr i64 %1356, 63
  %1379 = trunc i64 %1378 to i8
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1379, i8* %1380, align 1, !tbaa !2449
  %1381 = lshr i64 %1353, 63
  %1382 = xor i64 %1378, %1381
  %1383 = add nuw nsw i64 %1382, %1378
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 8
  %1389 = load i64, i64* %RCX
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 4
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1388 to i64*
  store i64 %1389, i64* %1392
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i32*
  %1397 = load i32, i32* %1396
  %1398 = sext i32 %1397 to i64
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RAX
  %1400 = mul i64 %1399, 8
  %1401 = add i64 %1400, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 8
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  store i64 %1405, i64* %RAX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 40
  %1408 = load i64, i64* %RAX
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 4
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1407 to i64*
  store i64 %1408, i64* %1411
  %1412 = load i64, i64* %PC
  %1413 = sub i64 %1412, 751
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 5
  store i64 %1415, i64* %PC
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1413, i64* %1416, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 12
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 7
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i32*
  store i32 20, i32* %1421
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 12
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1423 to i32*
  %1427 = load i32, i32* %1426
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RDI, align 8, !tbaa !2428
  %1429 = load i64, i64* %PC
  %1430 = sub i64 %1429, 1084
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 5
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 5
  store i64 %1434, i64* %PC
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1436 = load i64, i64* %1435, align 8, !tbaa !2428
  %1437 = add i64 %1436, -8
  %1438 = inttoptr i64 %1437 to i64*
  store i64 %1432, i64* %1438
  store i64 %1437, i64* %1435, align 8, !tbaa !2428
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1430, i64* %1439, align 8, !tbaa !2428
  %1440 = load i64, i64* %PC
  %1441 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1440, %struct.Memory* %MEMORY.0)
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 8
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 4
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to i64*
  %1447 = load i64, i64* %1446
  store i64 %1447, i64* %RAX, align 8, !tbaa !2428
  %1448 = load i64, i64* %RAX
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  store i64 %1448, i64* %RCX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RCX
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 4
  store i64 %1453, i64* %PC
  %1454 = add i64 4, %1451
  store i64 %1454, i64* %RCX, align 8, !tbaa !2428
  %1455 = icmp ult i64 %1454, %1451
  %1456 = icmp ult i64 %1454, 4
  %1457 = or i1 %1455, %1456
  %1458 = zext i1 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1458, i8* %1459, align 1, !tbaa !2432
  %1460 = trunc i64 %1454 to i32
  %1461 = and i32 %1460, 255
  %1462 = call i32 @llvm.ctpop.i32(i32 %1461) #16
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = xor i8 %1464, 1
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1465, i8* %1466, align 1, !tbaa !2446
  %1467 = xor i64 4, %1451
  %1468 = xor i64 %1467, %1454
  %1469 = lshr i64 %1468, 4
  %1470 = trunc i64 %1469 to i8
  %1471 = and i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1471, i8* %1472, align 1, !tbaa !2447
  %1473 = icmp eq i64 %1454, 0
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1474, i8* %1475, align 1, !tbaa !2448
  %1476 = lshr i64 %1454, 63
  %1477 = trunc i64 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1477, i8* %1478, align 1, !tbaa !2449
  %1479 = lshr i64 %1451, 63
  %1480 = xor i64 %1476, %1479
  %1481 = add nuw nsw i64 %1480, %1476
  %1482 = icmp eq i64 %1481, 2
  %1483 = zext i1 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1483, i8* %1484, align 1, !tbaa !2450
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 8
  %1487 = load i64, i64* %RCX
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1486 to i64*
  store i64 %1487, i64* %1490
  %1491 = load i64, i64* %RAX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1491 to i32*
  %1495 = load i32, i32* %1494
  %1496 = sext i32 %1495 to i64
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RAX
  %1498 = mul i64 %1497, 8
  %1499 = add i64 %1498, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 8
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1499 to i64*
  %1503 = load i64, i64* %1502
  store i64 %1503, i64* %RAX, align 8, !tbaa !2428
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 40
  %1506 = load i64, i64* %RAX
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 4
  store i64 %1508, i64* %PC
  %1509 = inttoptr i64 %1505 to i64*
  store i64 %1506, i64* %1509
  %1510 = load i64, i64* %PC
  %1511 = sub i64 %1510, 1001
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 5
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1511, i64* %1514, align 8, !tbaa !2428
  br label %block_400566

block_40069f:                                     ; preds = %block_400698, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400698 ]
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 12
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 3
  store i64 %1518, i64* %PC
  %1519 = inttoptr i64 %1516 to i32*
  %1520 = load i32, i32* %1519
  %1521 = zext i32 %1520 to i64
  store i64 %1521, i64* %RDI, align 8, !tbaa !2428
  %1522 = load i64, i64* %PC
  %1523 = sub i64 %1522, 434
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1529 = load i64, i64* %1528, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1525, i64* %1531
  store i64 %1530, i64* %1528, align 8, !tbaa !2428
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1523, i64* %1532, align 8, !tbaa !2428
  %1533 = load i64, i64* %PC
  %1534 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1533, %struct.Memory* %MEMORY.1)
  %1535 = load i64, i64* %RBP
  %1536 = sub i64 %1535, 8
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i64*
  %1540 = load i64, i64* %1539
  store i64 %1540, i64* %RAX, align 8, !tbaa !2428
  %1541 = load i64, i64* %RAX
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 3
  store i64 %1543, i64* %PC
  store i64 %1541, i64* %RCX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RCX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 4
  store i64 %1546, i64* %PC
  %1547 = add i64 4, %1544
  store i64 %1547, i64* %RCX, align 8, !tbaa !2428
  %1548 = icmp ult i64 %1547, %1544
  %1549 = icmp ult i64 %1547, 4
  %1550 = or i1 %1548, %1549
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1551, i8* %1552, align 1, !tbaa !2432
  %1553 = trunc i64 %1547 to i32
  %1554 = and i32 %1553, 255
  %1555 = call i32 @llvm.ctpop.i32(i32 %1554) #16
  %1556 = trunc i32 %1555 to i8
  %1557 = and i8 %1556, 1
  %1558 = xor i8 %1557, 1
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1558, i8* %1559, align 1, !tbaa !2446
  %1560 = xor i64 4, %1544
  %1561 = xor i64 %1560, %1547
  %1562 = lshr i64 %1561, 4
  %1563 = trunc i64 %1562 to i8
  %1564 = and i8 %1563, 1
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1564, i8* %1565, align 1, !tbaa !2447
  %1566 = icmp eq i64 %1547, 0
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1567, i8* %1568, align 1, !tbaa !2448
  %1569 = lshr i64 %1547, 63
  %1570 = trunc i64 %1569 to i8
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1570, i8* %1571, align 1, !tbaa !2449
  %1572 = lshr i64 %1544, 63
  %1573 = xor i64 %1569, %1572
  %1574 = add nuw nsw i64 %1573, %1569
  %1575 = icmp eq i64 %1574, 2
  %1576 = zext i1 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1576, i8* %1577, align 1, !tbaa !2450
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 8
  %1580 = load i64, i64* %RCX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 4
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1579 to i64*
  store i64 %1580, i64* %1583
  %1584 = load i64, i64* %RAX
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 3
  store i64 %1586, i64* %PC
  %1587 = inttoptr i64 %1584 to i32*
  %1588 = load i32, i32* %1587
  %1589 = sext i32 %1588 to i64
  store i64 %1589, i64* %RAX, align 8, !tbaa !2428
  %1590 = load i64, i64* %RAX
  %1591 = mul i64 %1590, 8
  %1592 = add i64 %1591, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 8
  store i64 %1594, i64* %PC
  %1595 = inttoptr i64 %1592 to i64*
  %1596 = load i64, i64* %1595
  store i64 %1596, i64* %RAX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 40
  %1599 = load i64, i64* %RAX
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 4
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1598 to i64*
  store i64 %1599, i64* %1602
  %1603 = load i64, i64* %PC
  %1604 = sub i64 %1603, 351
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 5
  store i64 %1606, i64* %PC
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1604, i64* %1607, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1608 = load i64, i64* %RBP
  %1609 = sub i64 %1608, 12
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 7
  store i64 %1611, i64* %PC
  %1612 = inttoptr i64 %1609 to i32*
  store i32 2, i32* %1612
  %1613 = load i64, i64* %RBP
  %1614 = sub i64 %1613, 12
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 3
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1614 to i32*
  %1618 = load i32, i32* %1617
  %1619 = zext i32 %1618 to i64
  store i64 %1619, i64* %RDI, align 8, !tbaa !2428
  %1620 = load i64, i64* %PC
  %1621 = sub i64 %1620, 184
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 5
  store i64 %1625, i64* %PC
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1627 = load i64, i64* %1626, align 8, !tbaa !2428
  %1628 = add i64 %1627, -8
  %1629 = inttoptr i64 %1628 to i64*
  store i64 %1623, i64* %1629
  store i64 %1628, i64* %1626, align 8, !tbaa !2428
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1621, i64* %1630, align 8, !tbaa !2428
  %1631 = load i64, i64* %PC
  %1632 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1631, %struct.Memory* %MEMORY.0)
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 8
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 4
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i64*
  %1638 = load i64, i64* %1637
  store i64 %1638, i64* %RAX, align 8, !tbaa !2428
  %1639 = load i64, i64* %RAX
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 3
  store i64 %1641, i64* %PC
  store i64 %1639, i64* %RCX, align 8, !tbaa !2428
  %1642 = load i64, i64* %RCX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = add i64 4, %1642
  store i64 %1645, i64* %RCX, align 8, !tbaa !2428
  %1646 = icmp ult i64 %1645, %1642
  %1647 = icmp ult i64 %1645, 4
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1649, i8* %1650, align 1, !tbaa !2432
  %1651 = trunc i64 %1645 to i32
  %1652 = and i32 %1651, 255
  %1653 = call i32 @llvm.ctpop.i32(i32 %1652) #16
  %1654 = trunc i32 %1653 to i8
  %1655 = and i8 %1654, 1
  %1656 = xor i8 %1655, 1
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1656, i8* %1657, align 1, !tbaa !2446
  %1658 = xor i64 4, %1642
  %1659 = xor i64 %1658, %1645
  %1660 = lshr i64 %1659, 4
  %1661 = trunc i64 %1660 to i8
  %1662 = and i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1662, i8* %1663, align 1, !tbaa !2447
  %1664 = icmp eq i64 %1645, 0
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1665, i8* %1666, align 1, !tbaa !2448
  %1667 = lshr i64 %1645, 63
  %1668 = trunc i64 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = lshr i64 %1642, 63
  %1671 = xor i64 %1667, %1670
  %1672 = add nuw nsw i64 %1671, %1667
  %1673 = icmp eq i64 %1672, 2
  %1674 = zext i1 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1674, i8* %1675, align 1, !tbaa !2450
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 8
  %1678 = load i64, i64* %RCX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 4
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1677 to i64*
  store i64 %1678, i64* %1681
  %1682 = load i64, i64* %RAX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i32*
  %1686 = load i32, i32* %1685
  %1687 = sext i32 %1686 to i64
  store i64 %1687, i64* %RAX, align 8, !tbaa !2428
  %1688 = load i64, i64* %RAX
  %1689 = mul i64 %1688, 8
  %1690 = add i64 %1689, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 8
  store i64 %1692, i64* %PC
  %1693 = inttoptr i64 %1690 to i64*
  %1694 = load i64, i64* %1693
  store i64 %1694, i64* %RAX, align 8, !tbaa !2428
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 40
  %1697 = load i64, i64* %RAX
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 4
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1696 to i64*
  store i64 %1697, i64* %1700
  %1701 = load i64, i64* %PC
  %1702 = sub i64 %1701, 101
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 5
  store i64 %1704, i64* %PC
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1702, i64* %1705, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 12
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 7
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i32*
  store i32 25, i32* %1710
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 12
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 3
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1712 to i32*
  %1716 = load i32, i32* %1715
  %1717 = zext i32 %1716 to i64
  store i64 %1717, i64* %RDI, align 8, !tbaa !2428
  %1718 = load i64, i64* %PC
  %1719 = sub i64 %1718, 1334
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 5
  store i64 %1723, i64* %PC
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1725 = load i64, i64* %1724, align 8, !tbaa !2428
  %1726 = add i64 %1725, -8
  %1727 = inttoptr i64 %1726 to i64*
  store i64 %1721, i64* %1727
  store i64 %1726, i64* %1724, align 8, !tbaa !2428
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1719, i64* %1728, align 8, !tbaa !2428
  %1729 = load i64, i64* %PC
  %1730 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1729, %struct.Memory* %MEMORY.0)
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 8
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 4
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i64*
  %1736 = load i64, i64* %1735
  store i64 %1736, i64* %RAX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RAX
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 3
  store i64 %1739, i64* %PC
  store i64 %1737, i64* %RCX, align 8, !tbaa !2428
  %1740 = load i64, i64* %RCX
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 4
  store i64 %1742, i64* %PC
  %1743 = add i64 4, %1740
  store i64 %1743, i64* %RCX, align 8, !tbaa !2428
  %1744 = icmp ult i64 %1743, %1740
  %1745 = icmp ult i64 %1743, 4
  %1746 = or i1 %1744, %1745
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1747, i8* %1748, align 1, !tbaa !2432
  %1749 = trunc i64 %1743 to i32
  %1750 = and i32 %1749, 255
  %1751 = call i32 @llvm.ctpop.i32(i32 %1750) #16
  %1752 = trunc i32 %1751 to i8
  %1753 = and i8 %1752, 1
  %1754 = xor i8 %1753, 1
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1754, i8* %1755, align 1, !tbaa !2446
  %1756 = xor i64 4, %1740
  %1757 = xor i64 %1756, %1743
  %1758 = lshr i64 %1757, 4
  %1759 = trunc i64 %1758 to i8
  %1760 = and i8 %1759, 1
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1760, i8* %1761, align 1, !tbaa !2447
  %1762 = icmp eq i64 %1743, 0
  %1763 = zext i1 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1763, i8* %1764, align 1, !tbaa !2448
  %1765 = lshr i64 %1743, 63
  %1766 = trunc i64 %1765 to i8
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1766, i8* %1767, align 1, !tbaa !2449
  %1768 = lshr i64 %1740, 63
  %1769 = xor i64 %1765, %1768
  %1770 = add nuw nsw i64 %1769, %1765
  %1771 = icmp eq i64 %1770, 2
  %1772 = zext i1 %1771 to i8
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1772, i8* %1773, align 1, !tbaa !2450
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 8
  %1776 = load i64, i64* %RCX
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 4
  store i64 %1778, i64* %PC
  %1779 = inttoptr i64 %1775 to i64*
  store i64 %1776, i64* %1779
  %1780 = load i64, i64* %RAX
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 3
  store i64 %1782, i64* %PC
  %1783 = inttoptr i64 %1780 to i32*
  %1784 = load i32, i32* %1783
  %1785 = sext i32 %1784 to i64
  store i64 %1785, i64* %RAX, align 8, !tbaa !2428
  %1786 = load i64, i64* %RAX
  %1787 = mul i64 %1786, 8
  %1788 = add i64 %1787, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 8
  store i64 %1790, i64* %PC
  %1791 = inttoptr i64 %1788 to i64*
  %1792 = load i64, i64* %1791
  store i64 %1792, i64* %RAX, align 8, !tbaa !2428
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 40
  %1795 = load i64, i64* %RAX
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 4
  store i64 %1797, i64* %PC
  %1798 = inttoptr i64 %1794 to i64*
  store i64 %1795, i64* %1798
  %1799 = load i64, i64* %PC
  %1800 = sub i64 %1799, 1251
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 5
  store i64 %1802, i64* %PC
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1800, i64* %1803, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1804 = load i64, i64* %RBP
  %1805 = sub i64 %1804, 12
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 7
  store i64 %1807, i64* %PC
  %1808 = inttoptr i64 %1805 to i32*
  store i32 7, i32* %1808
  br label %block_40069f

block_400b16:                                     ; preds = %block_400566
  %1809 = load i64, i64* %RBP
  %1810 = sub i64 %1809, 12
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 7
  store i64 %1812, i64* %PC
  %1813 = inttoptr i64 %1810 to i32*
  store i32 30, i32* %1813
  %1814 = load i64, i64* %PC
  %1815 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1814, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1815

block_400792:                                     ; preds = %block_400566
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 12
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 7
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to i32*
  store i32 12, i32* %1820
  %1821 = load i64, i64* %PC
  %1822 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1821, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1822

block_40088c:                                     ; preds = %block_400566
  %1823 = load i64, i64* %RBP
  %1824 = sub i64 %1823, 12
  %1825 = load i64, i64* %PC
  %1826 = add i64 %1825, 7
  store i64 %1826, i64* %PC
  %1827 = inttoptr i64 %1824 to i32*
  store i32 17, i32* %1827
  %1828 = load i64, i64* %PC
  %1829 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1828, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1829

block_400986:                                     ; preds = %block_400566
  %1830 = load i64, i64* %RBP
  %1831 = sub i64 %1830, 12
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 7
  store i64 %1833, i64* %PC
  %1834 = inttoptr i64 %1831 to i32*
  store i32 22, i32* %1834
  %1835 = load i64, i64* %PC
  %1836 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1835, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1836

block_400602:                                     ; preds = %block_400566
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 12
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 7
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i32*
  store i32 4, i32* %1841
  %1842 = load i64, i64* %PC
  %1843 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1842, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1843

block_400a80:                                     ; preds = %block_400566
  %1844 = load i64, i64* %RBP
  %1845 = sub i64 %1844, 12
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 7
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i32*
  store i32 27, i32* %1848
  %1849 = load i64, i64* %PC
  %1850 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1849, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1850

; <label>:1851:                                   ; preds = %block_400566
  %1852 = load i64, i64* %PC
  %1853 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1852, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1853
}

; Function Attrs: noinline
define %struct.Memory* @sub_40095b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40095b

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_40095b, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %647, %block_40095b ], [ %1525, %block_400922 ], [ %1427, %block_400828 ], [ %1329, %block_40072e ], [ %1231, %block_400ab2 ], [ %1133, %block_400634 ], [ %1035, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %937, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %1623, %block_40059e ], [ %554, %block_400760 ], [ %745, %block_40085a ], [ %1728, %block_400a1c ], [ %1826, %block_400698 ], [ %1924, %block_400b16 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %2033 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40095b:                                     ; preds = %block_400954, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400954 ]
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 3
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  %633 = load i32, i32* %632
  %634 = zext i32 %633 to i64
  store i64 %634, i64* %RDI, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = sub i64 %635, 1134
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 5
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 5
  store i64 %640, i64* %PC
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %642 = load i64, i64* %641, align 8, !tbaa !2428
  %643 = add i64 %642, -8
  %644 = inttoptr i64 %643 to i64*
  store i64 %638, i64* %644
  store i64 %643, i64* %641, align 8, !tbaa !2428
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %636, i64* %645, align 8, !tbaa !2428
  %646 = load i64, i64* %PC
  %647 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %646, %struct.Memory* %MEMORY.1)
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 8
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = load i64, i64* %RAX
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 3
  store i64 %656, i64* %PC
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %657 = load i64, i64* %RCX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = add i64 4, %657
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = icmp ult i64 %660, %657
  %662 = icmp ult i64 %660, 4
  %663 = or i1 %661, %662
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %664, i8* %665, align 1, !tbaa !2432
  %666 = trunc i64 %660 to i32
  %667 = and i32 %666, 255
  %668 = call i32 @llvm.ctpop.i32(i32 %667) #16
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %671, i8* %672, align 1, !tbaa !2446
  %673 = xor i64 4, %657
  %674 = xor i64 %673, %660
  %675 = lshr i64 %674, 4
  %676 = trunc i64 %675 to i8
  %677 = and i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %677, i8* %678, align 1, !tbaa !2447
  %679 = icmp eq i64 %660, 0
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %680, i8* %681, align 1, !tbaa !2448
  %682 = lshr i64 %660, 63
  %683 = trunc i64 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %683, i8* %684, align 1, !tbaa !2449
  %685 = lshr i64 %657, 63
  %686 = xor i64 %682, %685
  %687 = add nuw nsw i64 %686, %682
  %688 = icmp eq i64 %687, 2
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 8
  %693 = load i64, i64* %RCX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %692 to i64*
  store i64 %693, i64* %696
  %697 = load i64, i64* %RAX
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  store i64 %702, i64* %RAX, align 8, !tbaa !2428
  %703 = load i64, i64* %RAX
  %704 = mul i64 %703, 8
  %705 = add i64 %704, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 8
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i64*
  %709 = load i64, i64* %708
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = load i64, i64* %RBP
  %711 = sub i64 %710, 40
  %712 = load i64, i64* %RAX
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %711 to i64*
  store i64 %712, i64* %715
  %716 = load i64, i64* %PC
  %717 = sub i64 %716, 1051
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 5
  store i64 %719, i64* %PC
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %717, i64* %720, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %721 = load i64, i64* %RBP
  %722 = sub i64 %721, 12
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 7
  store i64 %724, i64* %PC
  %725 = inttoptr i64 %722 to i32*
  store i32 16, i32* %725
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  %731 = load i32, i32* %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RDI, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = sub i64 %733, 884
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 5
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 5
  store i64 %738, i64* %PC
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %740 = load i64, i64* %739, align 8, !tbaa !2428
  %741 = add i64 %740, -8
  %742 = inttoptr i64 %741 to i64*
  store i64 %736, i64* %742
  store i64 %741, i64* %739, align 8, !tbaa !2428
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %734, i64* %743, align 8, !tbaa !2428
  %744 = load i64, i64* %PC
  %745 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %744, %struct.Memory* %MEMORY.0)
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 8
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = load i64, i64* %RAX
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %755 = load i64, i64* %RCX
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 4
  store i64 %757, i64* %PC
  %758 = add i64 4, %755
  store i64 %758, i64* %RCX, align 8, !tbaa !2428
  %759 = icmp ult i64 %758, %755
  %760 = icmp ult i64 %758, 4
  %761 = or i1 %759, %760
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %762, i8* %763, align 1, !tbaa !2432
  %764 = trunc i64 %758 to i32
  %765 = and i32 %764, 255
  %766 = call i32 @llvm.ctpop.i32(i32 %765) #16
  %767 = trunc i32 %766 to i8
  %768 = and i8 %767, 1
  %769 = xor i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %769, i8* %770, align 1, !tbaa !2446
  %771 = xor i64 4, %755
  %772 = xor i64 %771, %758
  %773 = lshr i64 %772, 4
  %774 = trunc i64 %773 to i8
  %775 = and i8 %774, 1
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %775, i8* %776, align 1, !tbaa !2447
  %777 = icmp eq i64 %758, 0
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %778, i8* %779, align 1, !tbaa !2448
  %780 = lshr i64 %758, 63
  %781 = trunc i64 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %781, i8* %782, align 1, !tbaa !2449
  %783 = lshr i64 %755, 63
  %784 = xor i64 %780, %783
  %785 = add nuw nsw i64 %784, %780
  %786 = icmp eq i64 %785, 2
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %787, i8* %788, align 1, !tbaa !2450
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 8
  %791 = load i64, i64* %RCX
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 4
  store i64 %793, i64* %PC
  %794 = inttoptr i64 %790 to i64*
  store i64 %791, i64* %794
  %795 = load i64, i64* %RAX
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 3
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  store i64 %800, i64* %RAX, align 8, !tbaa !2428
  %801 = load i64, i64* %RAX
  %802 = mul i64 %801, 8
  %803 = add i64 %802, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 8
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 40
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %809 to i64*
  store i64 %810, i64* %813
  %814 = load i64, i64* %PC
  %815 = sub i64 %814, 801
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %815, i64* %818, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 12
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 7
  store i64 %822, i64* %PC
  %823 = inttoptr i64 %820 to i32*
  store i32 0, i32* %823
  %824 = load i64, i64* %RSP
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 4
  store i64 %826, i64* %PC
  %827 = add i64 48, %824
  store i64 %827, i64* %RSP, align 8, !tbaa !2428
  %828 = icmp ult i64 %827, %824
  %829 = icmp ult i64 %827, 48
  %830 = or i1 %828, %829
  %831 = zext i1 %830 to i8
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %831, i8* %832, align 1, !tbaa !2432
  %833 = trunc i64 %827 to i32
  %834 = and i32 %833, 255
  %835 = call i32 @llvm.ctpop.i32(i32 %834) #16
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  %838 = xor i8 %837, 1
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %838, i8* %839, align 1, !tbaa !2446
  %840 = xor i64 48, %824
  %841 = xor i64 %840, %827
  %842 = lshr i64 %841, 4
  %843 = trunc i64 %842 to i8
  %844 = and i8 %843, 1
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %844, i8* %845, align 1, !tbaa !2447
  %846 = icmp eq i64 %827, 0
  %847 = zext i1 %846 to i8
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %847, i8* %848, align 1, !tbaa !2448
  %849 = lshr i64 %827, 63
  %850 = trunc i64 %849 to i8
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %850, i8* %851, align 1, !tbaa !2449
  %852 = lshr i64 %824, 63
  %853 = xor i64 %849, %852
  %854 = add nuw nsw i64 %853, %849
  %855 = icmp eq i64 %854, 2
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %856, i8* %857, align 1, !tbaa !2450
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 1
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %861 = load i64, i64* %860, align 8, !tbaa !2428
  %862 = add i64 %861, 8
  %863 = inttoptr i64 %861 to i64*
  %864 = load i64, i64* %863
  store i64 %864, i64* %RBP, align 8, !tbaa !2428
  store i64 %862, i64* %860, align 8, !tbaa !2428
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 1
  store i64 %866, i64* %PC
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %869 = load i64, i64* %868, align 8, !tbaa !2428
  %870 = inttoptr i64 %869 to i64*
  %871 = load i64, i64* %870
  store i64 %871, i64* %867, align 8, !tbaa !2428
  %872 = add i64 %869, 8
  store i64 %872, i64* %868, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 12
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 7
  store i64 %876, i64* %PC
  %877 = inttoptr i64 %874 to i32*
  store i32 21, i32* %877
  br label %block_40095b

block_400a4e:                                     ; preds = %block_400566
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 12
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 7
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i32*
  store i32 26, i32* %882
  %883 = load i64, i64* %PC
  %884 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %883, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %884

block_4006ca:                                     ; preds = %block_400566
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 12
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i32*
  store i32 8, i32* %889
  %890 = load i64, i64* %PC
  %891 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %890, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %891

block_400b48:                                     ; preds = %block_400566
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 12
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 7
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  store i32 31, i32* %896
  %897 = load i64, i64* %PC
  %898 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %897, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %898

block_4007c4:                                     ; preds = %block_400566
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 12
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 7
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i32*
  store i32 13, i32* %903
  %904 = load i64, i64* %PC
  %905 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %904, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %905

block_4008be:                                     ; preds = %block_400566
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 12
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 7
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  store i32 18, i32* %910
  %911 = load i64, i64* %PC
  %912 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %911, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %912

block_40056c:                                     ; preds = %block_400566
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 12
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 7
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %914 to i32*
  store i32 1, i32* %917
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 12
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i32*
  %923 = load i32, i32* %922
  %924 = zext i32 %923 to i64
  store i64 %924, i64* %RDI, align 8, !tbaa !2428
  %925 = load i64, i64* %PC
  %926 = sub i64 %925, 134
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 5
  store i64 %930, i64* %PC
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %932 = load i64, i64* %931, align 8, !tbaa !2428
  %933 = add i64 %932, -8
  %934 = inttoptr i64 %933 to i64*
  store i64 %928, i64* %934
  store i64 %933, i64* %931, align 8, !tbaa !2428
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %926, i64* %935, align 8, !tbaa !2428
  %936 = load i64, i64* %PC
  %937 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %936, %struct.Memory* %MEMORY.0)
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 8
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RAX
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 3
  store i64 %946, i64* %PC
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %947 = load i64, i64* %RCX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = add i64 4, %947
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = icmp ult i64 %950, %947
  %952 = icmp ult i64 %950, 4
  %953 = or i1 %951, %952
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = trunc i64 %950 to i32
  %957 = and i32 %956, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #16
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = xor i64 4, %947
  %964 = xor i64 %963, %950
  %965 = lshr i64 %964, 4
  %966 = trunc i64 %965 to i8
  %967 = and i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %967, i8* %968, align 1, !tbaa !2447
  %969 = icmp eq i64 %950, 0
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %970, i8* %971, align 1, !tbaa !2448
  %972 = lshr i64 %950, 63
  %973 = trunc i64 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %973, i8* %974, align 1, !tbaa !2449
  %975 = lshr i64 %947, 63
  %976 = xor i64 %972, %975
  %977 = add nuw nsw i64 %976, %972
  %978 = icmp eq i64 %977, 2
  %979 = zext i1 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %979, i8* %980, align 1, !tbaa !2450
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 8
  %983 = load i64, i64* %RCX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %982 to i64*
  store i64 %983, i64* %986
  %987 = load i64, i64* %RAX
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 3
  store i64 %989, i64* %PC
  %990 = inttoptr i64 %987 to i32*
  %991 = load i32, i32* %990
  %992 = sext i32 %991 to i64
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = load i64, i64* %RAX
  %994 = mul i64 %993, 8
  %995 = add i64 %994, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 8
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %995 to i64*
  %999 = load i64, i64* %998
  store i64 %999, i64* %RAX, align 8, !tbaa !2428
  %1000 = load i64, i64* %RBP
  %1001 = sub i64 %1000, 40
  %1002 = load i64, i64* %RAX
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 4
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1001 to i64*
  store i64 %1002, i64* %1005
  %1006 = load i64, i64* %PC
  %1007 = sub i64 %1006, 51
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 5
  store i64 %1009, i64* %PC
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1007, i64* %1010, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 12
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 7
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  store i32 23, i32* %1015
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 3
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  %1021 = load i32, i32* %1020
  %1022 = zext i32 %1021 to i64
  store i64 %1022, i64* %RDI, align 8, !tbaa !2428
  %1023 = load i64, i64* %PC
  %1024 = sub i64 %1023, 1234
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 5
  store i64 %1028, i64* %PC
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1030 = load i64, i64* %1029, align 8, !tbaa !2428
  %1031 = add i64 %1030, -8
  %1032 = inttoptr i64 %1031 to i64*
  store i64 %1026, i64* %1032
  store i64 %1031, i64* %1029, align 8, !tbaa !2428
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1024, i64* %1033, align 8, !tbaa !2428
  %1034 = load i64, i64* %PC
  %1035 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1034, %struct.Memory* %MEMORY.0)
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 8
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 4
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RAX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC
  store i64 %1042, i64* %RCX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RCX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 4
  store i64 %1047, i64* %PC
  %1048 = add i64 4, %1045
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = icmp ult i64 %1048, %1045
  %1050 = icmp ult i64 %1048, 4
  %1051 = or i1 %1049, %1050
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1052, i8* %1053, align 1, !tbaa !2432
  %1054 = trunc i64 %1048 to i32
  %1055 = and i32 %1054, 255
  %1056 = call i32 @llvm.ctpop.i32(i32 %1055) #16
  %1057 = trunc i32 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = xor i8 %1058, 1
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1059, i8* %1060, align 1, !tbaa !2446
  %1061 = xor i64 4, %1045
  %1062 = xor i64 %1061, %1048
  %1063 = lshr i64 %1062, 4
  %1064 = trunc i64 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1065, i8* %1066, align 1, !tbaa !2447
  %1067 = icmp eq i64 %1048, 0
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1068, i8* %1069, align 1, !tbaa !2448
  %1070 = lshr i64 %1048, 63
  %1071 = trunc i64 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1071, i8* %1072, align 1, !tbaa !2449
  %1073 = lshr i64 %1045, 63
  %1074 = xor i64 %1070, %1073
  %1075 = add nuw nsw i64 %1074, %1070
  %1076 = icmp eq i64 %1075, 2
  %1077 = zext i1 %1076 to i8
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1077, i8* %1078, align 1, !tbaa !2450
  %1079 = load i64, i64* %RBP
  %1080 = sub i64 %1079, 8
  %1081 = load i64, i64* %RCX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1080 to i64*
  store i64 %1081, i64* %1084
  %1085 = load i64, i64* %RAX
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 3
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to i32*
  %1089 = load i32, i32* %1088
  %1090 = sext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RAX
  %1092 = mul i64 %1091, 8
  %1093 = add i64 %1092, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 8
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i64*
  %1097 = load i64, i64* %1096
  store i64 %1097, i64* %RAX, align 8, !tbaa !2428
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 40
  %1100 = load i64, i64* %RAX
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1099 to i64*
  store i64 %1100, i64* %1103
  %1104 = load i64, i64* %PC
  %1105 = sub i64 %1104, 1151
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 5
  store i64 %1107, i64* %PC
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1105, i64* %1108, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 12
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 7
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1110 to i32*
  store i32 5, i32* %1113
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 12
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 3
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  %1119 = load i32, i32* %1118
  %1120 = zext i32 %1119 to i64
  store i64 %1120, i64* %RDI, align 8, !tbaa !2428
  %1121 = load i64, i64* %PC
  %1122 = sub i64 %1121, 334
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1128 = load i64, i64* %1127, align 8, !tbaa !2428
  %1129 = add i64 %1128, -8
  %1130 = inttoptr i64 %1129 to i64*
  store i64 %1124, i64* %1130
  store i64 %1129, i64* %1127, align 8, !tbaa !2428
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1122, i64* %1131, align 8, !tbaa !2428
  %1132 = load i64, i64* %PC
  %1133 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1132, %struct.Memory* %MEMORY.0)
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 8
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 4
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i64*
  %1139 = load i64, i64* %1138
  store i64 %1139, i64* %RAX, align 8, !tbaa !2428
  %1140 = load i64, i64* %RAX
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC
  %1146 = add i64 4, %1143
  store i64 %1146, i64* %RCX, align 8, !tbaa !2428
  %1147 = icmp ult i64 %1146, %1143
  %1148 = icmp ult i64 %1146, 4
  %1149 = or i1 %1147, %1148
  %1150 = zext i1 %1149 to i8
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1150, i8* %1151, align 1, !tbaa !2432
  %1152 = trunc i64 %1146 to i32
  %1153 = and i32 %1152, 255
  %1154 = call i32 @llvm.ctpop.i32(i32 %1153) #16
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = xor i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1157, i8* %1158, align 1, !tbaa !2446
  %1159 = xor i64 4, %1143
  %1160 = xor i64 %1159, %1146
  %1161 = lshr i64 %1160, 4
  %1162 = trunc i64 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1163, i8* %1164, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1146, 0
  %1166 = zext i1 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1166, i8* %1167, align 1, !tbaa !2448
  %1168 = lshr i64 %1146, 63
  %1169 = trunc i64 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1169, i8* %1170, align 1, !tbaa !2449
  %1171 = lshr i64 %1143, 63
  %1172 = xor i64 %1168, %1171
  %1173 = add nuw nsw i64 %1172, %1168
  %1174 = icmp eq i64 %1173, 2
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1175, i8* %1176, align 1, !tbaa !2450
  %1177 = load i64, i64* %RBP
  %1178 = sub i64 %1177, 8
  %1179 = load i64, i64* %RCX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1178 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %RAX
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 3
  store i64 %1185, i64* %PC
  %1186 = inttoptr i64 %1183 to i32*
  %1187 = load i32, i32* %1186
  %1188 = sext i32 %1187 to i64
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = load i64, i64* %RAX
  %1190 = mul i64 %1189, 8
  %1191 = add i64 %1190, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 8
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 40
  %1198 = load i64, i64* %RAX
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 4
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1197 to i64*
  store i64 %1198, i64* %1201
  %1202 = load i64, i64* %PC
  %1203 = sub i64 %1202, 251
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 5
  store i64 %1205, i64* %PC
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1203, i64* %1206, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1207 = load i64, i64* %RBP
  %1208 = sub i64 %1207, 12
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 7
  store i64 %1210, i64* %PC
  %1211 = inttoptr i64 %1208 to i32*
  store i32 28, i32* %1211
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 12
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 3
  store i64 %1215, i64* %PC
  %1216 = inttoptr i64 %1213 to i32*
  %1217 = load i32, i32* %1216
  %1218 = zext i32 %1217 to i64
  store i64 %1218, i64* %RDI, align 8, !tbaa !2428
  %1219 = load i64, i64* %PC
  %1220 = sub i64 %1219, 1484
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 5
  store i64 %1224, i64* %PC
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1226 = load i64, i64* %1225, align 8, !tbaa !2428
  %1227 = add i64 %1226, -8
  %1228 = inttoptr i64 %1227 to i64*
  store i64 %1222, i64* %1228
  store i64 %1227, i64* %1225, align 8, !tbaa !2428
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1220, i64* %1229, align 8, !tbaa !2428
  %1230 = load i64, i64* %PC
  %1231 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1230, %struct.Memory* %MEMORY.0)
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 8
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 4
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = load i64, i64* %RAX
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 3
  store i64 %1240, i64* %PC
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RCX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = add i64 4, %1241
  store i64 %1244, i64* %RCX, align 8, !tbaa !2428
  %1245 = icmp ult i64 %1244, %1241
  %1246 = icmp ult i64 %1244, 4
  %1247 = or i1 %1245, %1246
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1248, i8* %1249, align 1, !tbaa !2432
  %1250 = trunc i64 %1244 to i32
  %1251 = and i32 %1250, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = xor i64 4, %1241
  %1258 = xor i64 %1257, %1244
  %1259 = lshr i64 %1258, 4
  %1260 = trunc i64 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2447
  %1263 = icmp eq i64 %1244, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2448
  %1266 = lshr i64 %1244, 63
  %1267 = trunc i64 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2449
  %1269 = lshr i64 %1241, 63
  %1270 = xor i64 %1266, %1269
  %1271 = add nuw nsw i64 %1270, %1266
  %1272 = icmp eq i64 %1271, 2
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1273, i8* %1274, align 1, !tbaa !2450
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 8
  %1277 = load i64, i64* %RCX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1276 to i64*
  store i64 %1277, i64* %1280
  %1281 = load i64, i64* %RAX
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 3
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i32*
  %1285 = load i32, i32* %1284
  %1286 = sext i32 %1285 to i64
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RAX
  %1288 = mul i64 %1287, 8
  %1289 = add i64 %1288, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 8
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1289 to i64*
  %1293 = load i64, i64* %1292
  store i64 %1293, i64* %RAX, align 8, !tbaa !2428
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 40
  %1296 = load i64, i64* %RAX
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 4
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1295 to i64*
  store i64 %1296, i64* %1299
  %1300 = load i64, i64* %PC
  %1301 = sub i64 %1300, 1401
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1301, i64* %1304, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 12
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 7
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i32*
  store i32 10, i32* %1309
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 12
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  %1315 = load i32, i32* %1314
  %1316 = zext i32 %1315 to i64
  store i64 %1316, i64* %RDI, align 8, !tbaa !2428
  %1317 = load i64, i64* %PC
  %1318 = sub i64 %1317, 584
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 5
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 5
  store i64 %1322, i64* %PC
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1324 = load i64, i64* %1323, align 8, !tbaa !2428
  %1325 = add i64 %1324, -8
  %1326 = inttoptr i64 %1325 to i64*
  store i64 %1320, i64* %1326
  store i64 %1325, i64* %1323, align 8, !tbaa !2428
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1318, i64* %1327, align 8, !tbaa !2428
  %1328 = load i64, i64* %PC
  %1329 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1328, %struct.Memory* %MEMORY.0)
  %1330 = load i64, i64* %RBP
  %1331 = sub i64 %1330, 8
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 4
  store i64 %1333, i64* %PC
  %1334 = inttoptr i64 %1331 to i64*
  %1335 = load i64, i64* %1334
  store i64 %1335, i64* %RAX, align 8, !tbaa !2428
  %1336 = load i64, i64* %RAX
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 3
  store i64 %1338, i64* %PC
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1339 = load i64, i64* %RCX
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 4
  store i64 %1341, i64* %PC
  %1342 = add i64 4, %1339
  store i64 %1342, i64* %RCX, align 8, !tbaa !2428
  %1343 = icmp ult i64 %1342, %1339
  %1344 = icmp ult i64 %1342, 4
  %1345 = or i1 %1343, %1344
  %1346 = zext i1 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1346, i8* %1347, align 1, !tbaa !2432
  %1348 = trunc i64 %1342 to i32
  %1349 = and i32 %1348, 255
  %1350 = call i32 @llvm.ctpop.i32(i32 %1349) #16
  %1351 = trunc i32 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = xor i8 %1352, 1
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1353, i8* %1354, align 1, !tbaa !2446
  %1355 = xor i64 4, %1339
  %1356 = xor i64 %1355, %1342
  %1357 = lshr i64 %1356, 4
  %1358 = trunc i64 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1359, i8* %1360, align 1, !tbaa !2447
  %1361 = icmp eq i64 %1342, 0
  %1362 = zext i1 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1362, i8* %1363, align 1, !tbaa !2448
  %1364 = lshr i64 %1342, 63
  %1365 = trunc i64 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1365, i8* %1366, align 1, !tbaa !2449
  %1367 = lshr i64 %1339, 63
  %1368 = xor i64 %1364, %1367
  %1369 = add nuw nsw i64 %1368, %1364
  %1370 = icmp eq i64 %1369, 2
  %1371 = zext i1 %1370 to i8
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1371, i8* %1372, align 1, !tbaa !2450
  %1373 = load i64, i64* %RBP
  %1374 = sub i64 %1373, 8
  %1375 = load i64, i64* %RCX
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 4
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1374 to i64*
  store i64 %1375, i64* %1378
  %1379 = load i64, i64* %RAX
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 3
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i32*
  %1383 = load i32, i32* %1382
  %1384 = sext i32 %1383 to i64
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RAX
  %1386 = mul i64 %1385, 8
  %1387 = add i64 %1386, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 8
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1387 to i64*
  %1391 = load i64, i64* %1390
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RBP
  %1393 = sub i64 %1392, 40
  %1394 = load i64, i64* %RAX
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1393 to i64*
  store i64 %1394, i64* %1397
  %1398 = load i64, i64* %PC
  %1399 = sub i64 %1398, 501
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 5
  store i64 %1401, i64* %PC
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1399, i64* %1402, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 12
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 7
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i32*
  store i32 15, i32* %1407
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  %1413 = load i32, i32* %1412
  %1414 = zext i32 %1413 to i64
  store i64 %1414, i64* %RDI, align 8, !tbaa !2428
  %1415 = load i64, i64* %PC
  %1416 = sub i64 %1415, 834
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 5
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 5
  store i64 %1420, i64* %PC
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1422 = load i64, i64* %1421, align 8, !tbaa !2428
  %1423 = add i64 %1422, -8
  %1424 = inttoptr i64 %1423 to i64*
  store i64 %1418, i64* %1424
  store i64 %1423, i64* %1421, align 8, !tbaa !2428
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1416, i64* %1425, align 8, !tbaa !2428
  %1426 = load i64, i64* %PC
  %1427 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1426, %struct.Memory* %MEMORY.0)
  %1428 = load i64, i64* %RBP
  %1429 = sub i64 %1428, 8
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 4
  store i64 %1431, i64* %PC
  %1432 = inttoptr i64 %1429 to i64*
  %1433 = load i64, i64* %1432
  store i64 %1433, i64* %RAX, align 8, !tbaa !2428
  %1434 = load i64, i64* %RAX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 3
  store i64 %1436, i64* %PC
  store i64 %1434, i64* %RCX, align 8, !tbaa !2428
  %1437 = load i64, i64* %RCX
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 4
  store i64 %1439, i64* %PC
  %1440 = add i64 4, %1437
  store i64 %1440, i64* %RCX, align 8, !tbaa !2428
  %1441 = icmp ult i64 %1440, %1437
  %1442 = icmp ult i64 %1440, 4
  %1443 = or i1 %1441, %1442
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1444, i8* %1445, align 1, !tbaa !2432
  %1446 = trunc i64 %1440 to i32
  %1447 = and i32 %1446, 255
  %1448 = call i32 @llvm.ctpop.i32(i32 %1447) #16
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = xor i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1451, i8* %1452, align 1, !tbaa !2446
  %1453 = xor i64 4, %1437
  %1454 = xor i64 %1453, %1440
  %1455 = lshr i64 %1454, 4
  %1456 = trunc i64 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1457, i8* %1458, align 1, !tbaa !2447
  %1459 = icmp eq i64 %1440, 0
  %1460 = zext i1 %1459 to i8
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1460, i8* %1461, align 1, !tbaa !2448
  %1462 = lshr i64 %1440, 63
  %1463 = trunc i64 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1463, i8* %1464, align 1, !tbaa !2449
  %1465 = lshr i64 %1437, 63
  %1466 = xor i64 %1462, %1465
  %1467 = add nuw nsw i64 %1466, %1462
  %1468 = icmp eq i64 %1467, 2
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1469, i8* %1470, align 1, !tbaa !2450
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 8
  %1473 = load i64, i64* %RCX
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 4
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1472 to i64*
  store i64 %1473, i64* %1476
  %1477 = load i64, i64* %RAX
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 3
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i32*
  %1481 = load i32, i32* %1480
  %1482 = sext i32 %1481 to i64
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = load i64, i64* %RAX
  %1484 = mul i64 %1483, 8
  %1485 = add i64 %1484, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 8
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1485 to i64*
  %1489 = load i64, i64* %1488
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 40
  %1492 = load i64, i64* %RAX
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 4
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1491 to i64*
  store i64 %1492, i64* %1495
  %1496 = load i64, i64* %PC
  %1497 = sub i64 %1496, 751
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 5
  store i64 %1499, i64* %PC
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1497, i64* %1500, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 12
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 7
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i32*
  store i32 20, i32* %1505
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 3
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  %1511 = load i32, i32* %1510
  %1512 = zext i32 %1511 to i64
  store i64 %1512, i64* %RDI, align 8, !tbaa !2428
  %1513 = load i64, i64* %PC
  %1514 = sub i64 %1513, 1084
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 5
  store i64 %1518, i64* %PC
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1520 = load i64, i64* %1519, align 8, !tbaa !2428
  %1521 = add i64 %1520, -8
  %1522 = inttoptr i64 %1521 to i64*
  store i64 %1516, i64* %1522
  store i64 %1521, i64* %1519, align 8, !tbaa !2428
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1514, i64* %1523, align 8, !tbaa !2428
  %1524 = load i64, i64* %PC
  %1525 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1524, %struct.Memory* %MEMORY.0)
  %1526 = load i64, i64* %RBP
  %1527 = sub i64 %1526, 8
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 4
  store i64 %1529, i64* %PC
  %1530 = inttoptr i64 %1527 to i64*
  %1531 = load i64, i64* %1530
  store i64 %1531, i64* %RAX, align 8, !tbaa !2428
  %1532 = load i64, i64* %RAX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 3
  store i64 %1534, i64* %PC
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RCX
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = add i64 4, %1535
  store i64 %1538, i64* %RCX, align 8, !tbaa !2428
  %1539 = icmp ult i64 %1538, %1535
  %1540 = icmp ult i64 %1538, 4
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1542, i8* %1543, align 1, !tbaa !2432
  %1544 = trunc i64 %1538 to i32
  %1545 = and i32 %1544, 255
  %1546 = call i32 @llvm.ctpop.i32(i32 %1545) #16
  %1547 = trunc i32 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = xor i8 %1548, 1
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1549, i8* %1550, align 1, !tbaa !2446
  %1551 = xor i64 4, %1535
  %1552 = xor i64 %1551, %1538
  %1553 = lshr i64 %1552, 4
  %1554 = trunc i64 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1555, i8* %1556, align 1, !tbaa !2447
  %1557 = icmp eq i64 %1538, 0
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1558, i8* %1559, align 1, !tbaa !2448
  %1560 = lshr i64 %1538, 63
  %1561 = trunc i64 %1560 to i8
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1561, i8* %1562, align 1, !tbaa !2449
  %1563 = lshr i64 %1535, 63
  %1564 = xor i64 %1560, %1563
  %1565 = add nuw nsw i64 %1564, %1560
  %1566 = icmp eq i64 %1565, 2
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1567, i8* %1568, align 1, !tbaa !2450
  %1569 = load i64, i64* %RBP
  %1570 = sub i64 %1569, 8
  %1571 = load i64, i64* %RCX
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 4
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1570 to i64*
  store i64 %1571, i64* %1574
  %1575 = load i64, i64* %RAX
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 3
  store i64 %1577, i64* %PC
  %1578 = inttoptr i64 %1575 to i32*
  %1579 = load i32, i32* %1578
  %1580 = sext i32 %1579 to i64
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RAX
  %1582 = mul i64 %1581, 8
  %1583 = add i64 %1582, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 8
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1583 to i64*
  %1587 = load i64, i64* %1586
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 40
  %1590 = load i64, i64* %RAX
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 4
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1589 to i64*
  store i64 %1590, i64* %1593
  %1594 = load i64, i64* %PC
  %1595 = sub i64 %1594, 1001
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 5
  store i64 %1597, i64* %PC
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1595, i64* %1598, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 12
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 7
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i32*
  store i32 2, i32* %1603
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RDI, align 8, !tbaa !2428
  %1611 = load i64, i64* %PC
  %1612 = sub i64 %1611, 184
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 5
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 5
  store i64 %1616, i64* %PC
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1618 = load i64, i64* %1617, align 8, !tbaa !2428
  %1619 = add i64 %1618, -8
  %1620 = inttoptr i64 %1619 to i64*
  store i64 %1614, i64* %1620
  store i64 %1619, i64* %1617, align 8, !tbaa !2428
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1612, i64* %1621, align 8, !tbaa !2428
  %1622 = load i64, i64* %PC
  %1623 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1622, %struct.Memory* %MEMORY.0)
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 8
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 4
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i64*
  %1629 = load i64, i64* %1628
  store i64 %1629, i64* %RAX, align 8, !tbaa !2428
  %1630 = load i64, i64* %RAX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 3
  store i64 %1632, i64* %PC
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RCX
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 4
  store i64 %1635, i64* %PC
  %1636 = add i64 4, %1633
  store i64 %1636, i64* %RCX, align 8, !tbaa !2428
  %1637 = icmp ult i64 %1636, %1633
  %1638 = icmp ult i64 %1636, 4
  %1639 = or i1 %1637, %1638
  %1640 = zext i1 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1640, i8* %1641, align 1, !tbaa !2432
  %1642 = trunc i64 %1636 to i32
  %1643 = and i32 %1642, 255
  %1644 = call i32 @llvm.ctpop.i32(i32 %1643) #16
  %1645 = trunc i32 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = xor i8 %1646, 1
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1647, i8* %1648, align 1, !tbaa !2446
  %1649 = xor i64 4, %1633
  %1650 = xor i64 %1649, %1636
  %1651 = lshr i64 %1650, 4
  %1652 = trunc i64 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1653, i8* %1654, align 1, !tbaa !2447
  %1655 = icmp eq i64 %1636, 0
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1656, i8* %1657, align 1, !tbaa !2448
  %1658 = lshr i64 %1636, 63
  %1659 = trunc i64 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1659, i8* %1660, align 1, !tbaa !2449
  %1661 = lshr i64 %1633, 63
  %1662 = xor i64 %1658, %1661
  %1663 = add nuw nsw i64 %1662, %1658
  %1664 = icmp eq i64 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2450
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 8
  %1669 = load i64, i64* %RCX
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 4
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1668 to i64*
  store i64 %1669, i64* %1672
  %1673 = load i64, i64* %RAX
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 3
  store i64 %1675, i64* %PC
  %1676 = inttoptr i64 %1673 to i32*
  %1677 = load i32, i32* %1676
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RAX
  %1680 = mul i64 %1679, 8
  %1681 = add i64 %1680, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 8
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1681 to i64*
  %1685 = load i64, i64* %1684
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RBP
  %1687 = sub i64 %1686, 40
  %1688 = load i64, i64* %RAX
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 4
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1687 to i64*
  store i64 %1688, i64* %1691
  %1692 = load i64, i64* %PC
  %1693 = sub i64 %1692, 101
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 5
  store i64 %1695, i64* %PC
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1693, i64* %1696, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1697 = load i64, i64* %RBP
  %1698 = sub i64 %1697, 12
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 7
  store i64 %1700, i64* %PC
  %1701 = inttoptr i64 %1698 to i32*
  store i32 3, i32* %1701
  %1702 = load i64, i64* %PC
  %1703 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %1702, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1703

block_400a1c:                                     ; preds = %block_400566
  %1704 = load i64, i64* %RBP
  %1705 = sub i64 %1704, 12
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 7
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i32*
  store i32 25, i32* %1708
  %1709 = load i64, i64* %RBP
  %1710 = sub i64 %1709, 12
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 3
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to i32*
  %1714 = load i32, i32* %1713
  %1715 = zext i32 %1714 to i64
  store i64 %1715, i64* %RDI, align 8, !tbaa !2428
  %1716 = load i64, i64* %PC
  %1717 = sub i64 %1716, 1334
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1723 = load i64, i64* %1722, align 8, !tbaa !2428
  %1724 = add i64 %1723, -8
  %1725 = inttoptr i64 %1724 to i64*
  store i64 %1719, i64* %1725
  store i64 %1724, i64* %1722, align 8, !tbaa !2428
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1717, i64* %1726, align 8, !tbaa !2428
  %1727 = load i64, i64* %PC
  %1728 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1727, %struct.Memory* %MEMORY.0)
  %1729 = load i64, i64* %RBP
  %1730 = sub i64 %1729, 8
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RAX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RAX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 3
  store i64 %1737, i64* %PC
  store i64 %1735, i64* %RCX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RCX
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %PC
  %1741 = add i64 4, %1738
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = icmp ult i64 %1741, %1738
  %1743 = icmp ult i64 %1741, 4
  %1744 = or i1 %1742, %1743
  %1745 = zext i1 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1745, i8* %1746, align 1, !tbaa !2432
  %1747 = trunc i64 %1741 to i32
  %1748 = and i32 %1747, 255
  %1749 = call i32 @llvm.ctpop.i32(i32 %1748) #16
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = xor i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1752, i8* %1753, align 1, !tbaa !2446
  %1754 = xor i64 4, %1738
  %1755 = xor i64 %1754, %1741
  %1756 = lshr i64 %1755, 4
  %1757 = trunc i64 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1758, i8* %1759, align 1, !tbaa !2447
  %1760 = icmp eq i64 %1741, 0
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1761, i8* %1762, align 1, !tbaa !2448
  %1763 = lshr i64 %1741, 63
  %1764 = trunc i64 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1764, i8* %1765, align 1, !tbaa !2449
  %1766 = lshr i64 %1738, 63
  %1767 = xor i64 %1763, %1766
  %1768 = add nuw nsw i64 %1767, %1763
  %1769 = icmp eq i64 %1768, 2
  %1770 = zext i1 %1769 to i8
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1770, i8* %1771, align 1, !tbaa !2450
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 8
  %1774 = load i64, i64* %RCX
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 4
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1773 to i64*
  store i64 %1774, i64* %1777
  %1778 = load i64, i64* %RAX
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = sext i32 %1782 to i64
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = mul i64 %1784, 8
  %1786 = add i64 %1785, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 8
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RAX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RBP
  %1792 = sub i64 %1791, 40
  %1793 = load i64, i64* %RAX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 4
  store i64 %1795, i64* %PC
  %1796 = inttoptr i64 %1792 to i64*
  store i64 %1793, i64* %1796
  %1797 = load i64, i64* %PC
  %1798 = sub i64 %1797, 1251
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 5
  store i64 %1800, i64* %PC
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1798, i64* %1801, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1802 = load i64, i64* %RBP
  %1803 = sub i64 %1802, 12
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 7
  store i64 %1805, i64* %PC
  %1806 = inttoptr i64 %1803 to i32*
  store i32 7, i32* %1806
  %1807 = load i64, i64* %RBP
  %1808 = sub i64 %1807, 12
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 3
  store i64 %1810, i64* %PC
  %1811 = inttoptr i64 %1808 to i32*
  %1812 = load i32, i32* %1811
  %1813 = zext i32 %1812 to i64
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1814 = load i64, i64* %PC
  %1815 = sub i64 %1814, 434
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 5
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  store i64 %1819, i64* %PC
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1821 = load i64, i64* %1820, align 8, !tbaa !2428
  %1822 = add i64 %1821, -8
  %1823 = inttoptr i64 %1822 to i64*
  store i64 %1817, i64* %1823
  store i64 %1822, i64* %1820, align 8, !tbaa !2428
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1815, i64* %1824, align 8, !tbaa !2428
  %1825 = load i64, i64* %PC
  %1826 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1825, %struct.Memory* %MEMORY.0)
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 8
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 4
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1828 to i64*
  %1832 = load i64, i64* %1831
  store i64 %1832, i64* %RAX, align 8, !tbaa !2428
  %1833 = load i64, i64* %RAX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 3
  store i64 %1835, i64* %PC
  store i64 %1833, i64* %RCX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RCX
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 4
  store i64 %1838, i64* %PC
  %1839 = add i64 4, %1836
  store i64 %1839, i64* %RCX, align 8, !tbaa !2428
  %1840 = icmp ult i64 %1839, %1836
  %1841 = icmp ult i64 %1839, 4
  %1842 = or i1 %1840, %1841
  %1843 = zext i1 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1843, i8* %1844, align 1, !tbaa !2432
  %1845 = trunc i64 %1839 to i32
  %1846 = and i32 %1845, 255
  %1847 = call i32 @llvm.ctpop.i32(i32 %1846) #16
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = xor i8 %1849, 1
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1850, i8* %1851, align 1, !tbaa !2446
  %1852 = xor i64 4, %1836
  %1853 = xor i64 %1852, %1839
  %1854 = lshr i64 %1853, 4
  %1855 = trunc i64 %1854 to i8
  %1856 = and i8 %1855, 1
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1856, i8* %1857, align 1, !tbaa !2447
  %1858 = icmp eq i64 %1839, 0
  %1859 = zext i1 %1858 to i8
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1859, i8* %1860, align 1, !tbaa !2448
  %1861 = lshr i64 %1839, 63
  %1862 = trunc i64 %1861 to i8
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1862, i8* %1863, align 1, !tbaa !2449
  %1864 = lshr i64 %1836, 63
  %1865 = xor i64 %1861, %1864
  %1866 = add nuw nsw i64 %1865, %1861
  %1867 = icmp eq i64 %1866, 2
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1868, i8* %1869, align 1, !tbaa !2450
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 8
  %1872 = load i64, i64* %RCX
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1871 to i64*
  store i64 %1872, i64* %1875
  %1876 = load i64, i64* %RAX
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 3
  store i64 %1878, i64* %PC
  %1879 = inttoptr i64 %1876 to i32*
  %1880 = load i32, i32* %1879
  %1881 = sext i32 %1880 to i64
  store i64 %1881, i64* %RAX, align 8, !tbaa !2428
  %1882 = load i64, i64* %RAX
  %1883 = mul i64 %1882, 8
  %1884 = add i64 %1883, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 8
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i64*
  %1888 = load i64, i64* %1887
  store i64 %1888, i64* %RAX, align 8, !tbaa !2428
  %1889 = load i64, i64* %RBP
  %1890 = sub i64 %1889, 40
  %1891 = load i64, i64* %RAX
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 4
  store i64 %1893, i64* %PC
  %1894 = inttoptr i64 %1890 to i64*
  store i64 %1891, i64* %1894
  %1895 = load i64, i64* %PC
  %1896 = sub i64 %1895, 351
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 5
  store i64 %1898, i64* %PC
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1896, i64* %1899, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1900 = load i64, i64* %RBP
  %1901 = sub i64 %1900, 12
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 7
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i32*
  store i32 30, i32* %1904
  %1905 = load i64, i64* %RBP
  %1906 = sub i64 %1905, 12
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 3
  store i64 %1908, i64* %PC
  %1909 = inttoptr i64 %1906 to i32*
  %1910 = load i32, i32* %1909
  %1911 = zext i32 %1910 to i64
  store i64 %1911, i64* %RDI, align 8, !tbaa !2428
  %1912 = load i64, i64* %PC
  %1913 = sub i64 %1912, 1584
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 5
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 5
  store i64 %1917, i64* %PC
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1919 = load i64, i64* %1918, align 8, !tbaa !2428
  %1920 = add i64 %1919, -8
  %1921 = inttoptr i64 %1920 to i64*
  store i64 %1915, i64* %1921
  store i64 %1920, i64* %1918, align 8, !tbaa !2428
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1913, i64* %1922, align 8, !tbaa !2428
  %1923 = load i64, i64* %PC
  %1924 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1923, %struct.Memory* %MEMORY.0)
  %1925 = load i64, i64* %RBP
  %1926 = sub i64 %1925, 8
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 4
  store i64 %1928, i64* %PC
  %1929 = inttoptr i64 %1926 to i64*
  %1930 = load i64, i64* %1929
  store i64 %1930, i64* %RAX, align 8, !tbaa !2428
  %1931 = load i64, i64* %RAX
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 3
  store i64 %1933, i64* %PC
  store i64 %1931, i64* %RCX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RCX
  %1935 = load i64, i64* %PC
  %1936 = add i64 %1935, 4
  store i64 %1936, i64* %PC
  %1937 = add i64 4, %1934
  store i64 %1937, i64* %RCX, align 8, !tbaa !2428
  %1938 = icmp ult i64 %1937, %1934
  %1939 = icmp ult i64 %1937, 4
  %1940 = or i1 %1938, %1939
  %1941 = zext i1 %1940 to i8
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1941, i8* %1942, align 1, !tbaa !2432
  %1943 = trunc i64 %1937 to i32
  %1944 = and i32 %1943, 255
  %1945 = call i32 @llvm.ctpop.i32(i32 %1944) #16
  %1946 = trunc i32 %1945 to i8
  %1947 = and i8 %1946, 1
  %1948 = xor i8 %1947, 1
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1948, i8* %1949, align 1, !tbaa !2446
  %1950 = xor i64 4, %1934
  %1951 = xor i64 %1950, %1937
  %1952 = lshr i64 %1951, 4
  %1953 = trunc i64 %1952 to i8
  %1954 = and i8 %1953, 1
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1954, i8* %1955, align 1, !tbaa !2447
  %1956 = icmp eq i64 %1937, 0
  %1957 = zext i1 %1956 to i8
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1957, i8* %1958, align 1, !tbaa !2448
  %1959 = lshr i64 %1937, 63
  %1960 = trunc i64 %1959 to i8
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1960, i8* %1961, align 1, !tbaa !2449
  %1962 = lshr i64 %1934, 63
  %1963 = xor i64 %1959, %1962
  %1964 = add nuw nsw i64 %1963, %1959
  %1965 = icmp eq i64 %1964, 2
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1966, i8* %1967, align 1, !tbaa !2450
  %1968 = load i64, i64* %RBP
  %1969 = sub i64 %1968, 8
  %1970 = load i64, i64* %RCX
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 4
  store i64 %1972, i64* %PC
  %1973 = inttoptr i64 %1969 to i64*
  store i64 %1970, i64* %1973
  %1974 = load i64, i64* %RAX
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 3
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1974 to i32*
  %1978 = load i32, i32* %1977
  %1979 = sext i32 %1978 to i64
  store i64 %1979, i64* %RAX, align 8, !tbaa !2428
  %1980 = load i64, i64* %RAX
  %1981 = mul i64 %1980, 8
  %1982 = add i64 %1981, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 8
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1982 to i64*
  %1986 = load i64, i64* %1985
  store i64 %1986, i64* %RAX, align 8, !tbaa !2428
  %1987 = load i64, i64* %RBP
  %1988 = sub i64 %1987, 40
  %1989 = load i64, i64* %RAX
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1988 to i64*
  store i64 %1989, i64* %1992
  %1993 = load i64, i64* %PC
  %1994 = sub i64 %1993, 1501
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1994, i64* %1997, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 12
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 7
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  store i32 12, i32* %2002
  %2003 = load i64, i64* %PC
  %2004 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %2003, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2004

block_40088c:                                     ; preds = %block_400566
  %2005 = load i64, i64* %RBP
  %2006 = sub i64 %2005, 12
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 7
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2006 to i32*
  store i32 17, i32* %2009
  %2010 = load i64, i64* %PC
  %2011 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %2010, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2011

block_400986:                                     ; preds = %block_400566
  %2012 = load i64, i64* %RBP
  %2013 = sub i64 %2012, 12
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 7
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to i32*
  store i32 22, i32* %2016
  %2017 = load i64, i64* %PC
  %2018 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2017, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2018

block_400602:                                     ; preds = %block_400566
  %2019 = load i64, i64* %RBP
  %2020 = sub i64 %2019, 12
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 7
  store i64 %2022, i64* %PC
  %2023 = inttoptr i64 %2020 to i32*
  store i32 4, i32* %2023
  %2024 = load i64, i64* %PC
  %2025 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2024, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2025

block_400a80:                                     ; preds = %block_400566
  %2026 = load i64, i64* %RBP
  %2027 = sub i64 %2026, 12
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 7
  store i64 %2029, i64* %PC
  %2030 = inttoptr i64 %2027 to i32*
  store i32 27, i32* %2030
  %2031 = load i64, i64* %PC
  %2032 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2031, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2032

; <label>:2033:                                   ; preds = %block_400566
  %2034 = load i64, i64* %PC
  %2035 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2034, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2035
}

; Function Attrs: noinline
define %struct.Memory* @sub_400799(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400799

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400b16, %block_400698, %block_400799, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %1821, %block_400799 ], [ %1525, %block_400922 ], [ %1427, %block_400828 ], [ %1329, %block_40072e ], [ %1231, %block_400ab2 ], [ %1133, %block_400634 ], [ %1035, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %937, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %1623, %block_40059e ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %804, %block_400954 ], [ %1728, %block_400a1c ], [ %1919, %block_400698 ], [ %2017, %block_400b16 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %2124 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 0, i32* %730
  %731 = load i64, i64* %RSP
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = add i64 48, %731
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %731
  %736 = icmp ult i64 %734, 48
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 48, %731
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i64 %731, 63
  %760 = xor i64 %756, %759
  %761 = add nuw nsw i64 %760, %756
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %768 = load i64, i64* %767, align 8, !tbaa !2428
  %769 = add i64 %768, 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %RBP, align 8, !tbaa !2428
  store i64 %769, i64* %767, align 8, !tbaa !2428
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 1
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %774, align 8, !tbaa !2428
  %779 = add i64 %776, 8
  store i64 %779, i64* %775, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 7
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  store i32 21, i32* %784
  %785 = load i64, i64* %RBP
  %786 = sub i64 %785, 12
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 3
  store i64 %788, i64* %PC
  %789 = inttoptr i64 %786 to i32*
  %790 = load i32, i32* %789
  %791 = zext i32 %790 to i64
  store i64 %791, i64* %RDI, align 8, !tbaa !2428
  %792 = load i64, i64* %PC
  %793 = sub i64 %792, 1134
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 5
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 5
  store i64 %797, i64* %PC
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %799 = load i64, i64* %798, align 8, !tbaa !2428
  %800 = add i64 %799, -8
  %801 = inttoptr i64 %800 to i64*
  store i64 %795, i64* %801
  store i64 %800, i64* %798, align 8, !tbaa !2428
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %793, i64* %802, align 8, !tbaa !2428
  %803 = load i64, i64* %PC
  %804 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %803, %struct.Memory* %MEMORY.0)
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 8
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 4
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i64*
  %810 = load i64, i64* %809
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = load i64, i64* %RAX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  store i64 %811, i64* %RCX, align 8, !tbaa !2428
  %814 = load i64, i64* %RCX
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = add i64 4, %814
  store i64 %817, i64* %RCX, align 8, !tbaa !2428
  %818 = icmp ult i64 %817, %814
  %819 = icmp ult i64 %817, 4
  %820 = or i1 %818, %819
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %821, i8* %822, align 1, !tbaa !2432
  %823 = trunc i64 %817 to i32
  %824 = and i32 %823, 255
  %825 = call i32 @llvm.ctpop.i32(i32 %824) #16
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %828, i8* %829, align 1, !tbaa !2446
  %830 = xor i64 4, %814
  %831 = xor i64 %830, %817
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %834, i8* %835, align 1, !tbaa !2447
  %836 = icmp eq i64 %817, 0
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %837, i8* %838, align 1, !tbaa !2448
  %839 = lshr i64 %817, 63
  %840 = trunc i64 %839 to i8
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %840, i8* %841, align 1, !tbaa !2449
  %842 = lshr i64 %814, 63
  %843 = xor i64 %839, %842
  %844 = add nuw nsw i64 %843, %839
  %845 = icmp eq i64 %844, 2
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %846, i8* %847, align 1, !tbaa !2450
  %848 = load i64, i64* %RBP
  %849 = sub i64 %848, 8
  %850 = load i64, i64* %RCX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %849 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %RAX
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 3
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i32*
  %858 = load i32, i32* %857
  %859 = sext i32 %858 to i64
  store i64 %859, i64* %RAX, align 8, !tbaa !2428
  %860 = load i64, i64* %RAX
  %861 = mul i64 %860, 8
  %862 = add i64 %861, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 8
  store i64 %864, i64* %PC
  %865 = inttoptr i64 %862 to i64*
  %866 = load i64, i64* %865
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 40
  %869 = load i64, i64* %RAX
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 4
  store i64 %871, i64* %PC
  %872 = inttoptr i64 %868 to i64*
  store i64 %869, i64* %872
  %873 = load i64, i64* %PC
  %874 = sub i64 %873, 1051
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 5
  store i64 %876, i64* %PC
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %874, i64* %877, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 12
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 7
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i32*
  store i32 26, i32* %882
  %883 = load i64, i64* %PC
  %884 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %883, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %884

block_4006ca:                                     ; preds = %block_400566
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 12
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i32*
  store i32 8, i32* %889
  %890 = load i64, i64* %PC
  %891 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %890, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %891

block_400b48:                                     ; preds = %block_400566
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 12
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 7
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  store i32 31, i32* %896
  %897 = load i64, i64* %PC
  %898 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %897, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %898

block_4007c4:                                     ; preds = %block_400566
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 12
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 7
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i32*
  store i32 13, i32* %903
  %904 = load i64, i64* %PC
  %905 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %904, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %905

block_4008be:                                     ; preds = %block_400566
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 12
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 7
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  store i32 18, i32* %910
  %911 = load i64, i64* %PC
  %912 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %911, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %912

block_40056c:                                     ; preds = %block_400566
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 12
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 7
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %914 to i32*
  store i32 1, i32* %917
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 12
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i32*
  %923 = load i32, i32* %922
  %924 = zext i32 %923 to i64
  store i64 %924, i64* %RDI, align 8, !tbaa !2428
  %925 = load i64, i64* %PC
  %926 = sub i64 %925, 134
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 5
  store i64 %930, i64* %PC
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %932 = load i64, i64* %931, align 8, !tbaa !2428
  %933 = add i64 %932, -8
  %934 = inttoptr i64 %933 to i64*
  store i64 %928, i64* %934
  store i64 %933, i64* %931, align 8, !tbaa !2428
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %926, i64* %935, align 8, !tbaa !2428
  %936 = load i64, i64* %PC
  %937 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %936, %struct.Memory* %MEMORY.0)
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 8
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RAX
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 3
  store i64 %946, i64* %PC
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %947 = load i64, i64* %RCX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = add i64 4, %947
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = icmp ult i64 %950, %947
  %952 = icmp ult i64 %950, 4
  %953 = or i1 %951, %952
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = trunc i64 %950 to i32
  %957 = and i32 %956, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #16
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = xor i64 4, %947
  %964 = xor i64 %963, %950
  %965 = lshr i64 %964, 4
  %966 = trunc i64 %965 to i8
  %967 = and i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %967, i8* %968, align 1, !tbaa !2447
  %969 = icmp eq i64 %950, 0
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %970, i8* %971, align 1, !tbaa !2448
  %972 = lshr i64 %950, 63
  %973 = trunc i64 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %973, i8* %974, align 1, !tbaa !2449
  %975 = lshr i64 %947, 63
  %976 = xor i64 %972, %975
  %977 = add nuw nsw i64 %976, %972
  %978 = icmp eq i64 %977, 2
  %979 = zext i1 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %979, i8* %980, align 1, !tbaa !2450
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 8
  %983 = load i64, i64* %RCX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %982 to i64*
  store i64 %983, i64* %986
  %987 = load i64, i64* %RAX
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 3
  store i64 %989, i64* %PC
  %990 = inttoptr i64 %987 to i32*
  %991 = load i32, i32* %990
  %992 = sext i32 %991 to i64
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = load i64, i64* %RAX
  %994 = mul i64 %993, 8
  %995 = add i64 %994, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 8
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %995 to i64*
  %999 = load i64, i64* %998
  store i64 %999, i64* %RAX, align 8, !tbaa !2428
  %1000 = load i64, i64* %RBP
  %1001 = sub i64 %1000, 40
  %1002 = load i64, i64* %RAX
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 4
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1001 to i64*
  store i64 %1002, i64* %1005
  %1006 = load i64, i64* %PC
  %1007 = sub i64 %1006, 51
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 5
  store i64 %1009, i64* %PC
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1007, i64* %1010, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 12
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 7
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  store i32 23, i32* %1015
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 12
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 3
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i32*
  %1021 = load i32, i32* %1020
  %1022 = zext i32 %1021 to i64
  store i64 %1022, i64* %RDI, align 8, !tbaa !2428
  %1023 = load i64, i64* %PC
  %1024 = sub i64 %1023, 1234
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 5
  store i64 %1028, i64* %PC
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1030 = load i64, i64* %1029, align 8, !tbaa !2428
  %1031 = add i64 %1030, -8
  %1032 = inttoptr i64 %1031 to i64*
  store i64 %1026, i64* %1032
  store i64 %1031, i64* %1029, align 8, !tbaa !2428
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1024, i64* %1033, align 8, !tbaa !2428
  %1034 = load i64, i64* %PC
  %1035 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1034, %struct.Memory* %MEMORY.0)
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 8
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 4
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RAX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC
  store i64 %1042, i64* %RCX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RCX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 4
  store i64 %1047, i64* %PC
  %1048 = add i64 4, %1045
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = icmp ult i64 %1048, %1045
  %1050 = icmp ult i64 %1048, 4
  %1051 = or i1 %1049, %1050
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1052, i8* %1053, align 1, !tbaa !2432
  %1054 = trunc i64 %1048 to i32
  %1055 = and i32 %1054, 255
  %1056 = call i32 @llvm.ctpop.i32(i32 %1055) #16
  %1057 = trunc i32 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = xor i8 %1058, 1
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1059, i8* %1060, align 1, !tbaa !2446
  %1061 = xor i64 4, %1045
  %1062 = xor i64 %1061, %1048
  %1063 = lshr i64 %1062, 4
  %1064 = trunc i64 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1065, i8* %1066, align 1, !tbaa !2447
  %1067 = icmp eq i64 %1048, 0
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1068, i8* %1069, align 1, !tbaa !2448
  %1070 = lshr i64 %1048, 63
  %1071 = trunc i64 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1071, i8* %1072, align 1, !tbaa !2449
  %1073 = lshr i64 %1045, 63
  %1074 = xor i64 %1070, %1073
  %1075 = add nuw nsw i64 %1074, %1070
  %1076 = icmp eq i64 %1075, 2
  %1077 = zext i1 %1076 to i8
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1077, i8* %1078, align 1, !tbaa !2450
  %1079 = load i64, i64* %RBP
  %1080 = sub i64 %1079, 8
  %1081 = load i64, i64* %RCX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1080 to i64*
  store i64 %1081, i64* %1084
  %1085 = load i64, i64* %RAX
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 3
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to i32*
  %1089 = load i32, i32* %1088
  %1090 = sext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RAX
  %1092 = mul i64 %1091, 8
  %1093 = add i64 %1092, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 8
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i64*
  %1097 = load i64, i64* %1096
  store i64 %1097, i64* %RAX, align 8, !tbaa !2428
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 40
  %1100 = load i64, i64* %RAX
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1099 to i64*
  store i64 %1100, i64* %1103
  %1104 = load i64, i64* %PC
  %1105 = sub i64 %1104, 1151
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 5
  store i64 %1107, i64* %PC
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1105, i64* %1108, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 12
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 7
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1110 to i32*
  store i32 5, i32* %1113
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 12
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 3
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  %1119 = load i32, i32* %1118
  %1120 = zext i32 %1119 to i64
  store i64 %1120, i64* %RDI, align 8, !tbaa !2428
  %1121 = load i64, i64* %PC
  %1122 = sub i64 %1121, 334
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1128 = load i64, i64* %1127, align 8, !tbaa !2428
  %1129 = add i64 %1128, -8
  %1130 = inttoptr i64 %1129 to i64*
  store i64 %1124, i64* %1130
  store i64 %1129, i64* %1127, align 8, !tbaa !2428
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1122, i64* %1131, align 8, !tbaa !2428
  %1132 = load i64, i64* %PC
  %1133 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1132, %struct.Memory* %MEMORY.0)
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 8
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 4
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i64*
  %1139 = load i64, i64* %1138
  store i64 %1139, i64* %RAX, align 8, !tbaa !2428
  %1140 = load i64, i64* %RAX
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC
  %1146 = add i64 4, %1143
  store i64 %1146, i64* %RCX, align 8, !tbaa !2428
  %1147 = icmp ult i64 %1146, %1143
  %1148 = icmp ult i64 %1146, 4
  %1149 = or i1 %1147, %1148
  %1150 = zext i1 %1149 to i8
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1150, i8* %1151, align 1, !tbaa !2432
  %1152 = trunc i64 %1146 to i32
  %1153 = and i32 %1152, 255
  %1154 = call i32 @llvm.ctpop.i32(i32 %1153) #16
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = xor i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1157, i8* %1158, align 1, !tbaa !2446
  %1159 = xor i64 4, %1143
  %1160 = xor i64 %1159, %1146
  %1161 = lshr i64 %1160, 4
  %1162 = trunc i64 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1163, i8* %1164, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1146, 0
  %1166 = zext i1 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1166, i8* %1167, align 1, !tbaa !2448
  %1168 = lshr i64 %1146, 63
  %1169 = trunc i64 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1169, i8* %1170, align 1, !tbaa !2449
  %1171 = lshr i64 %1143, 63
  %1172 = xor i64 %1168, %1171
  %1173 = add nuw nsw i64 %1172, %1168
  %1174 = icmp eq i64 %1173, 2
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1175, i8* %1176, align 1, !tbaa !2450
  %1177 = load i64, i64* %RBP
  %1178 = sub i64 %1177, 8
  %1179 = load i64, i64* %RCX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1178 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %RAX
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 3
  store i64 %1185, i64* %PC
  %1186 = inttoptr i64 %1183 to i32*
  %1187 = load i32, i32* %1186
  %1188 = sext i32 %1187 to i64
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = load i64, i64* %RAX
  %1190 = mul i64 %1189, 8
  %1191 = add i64 %1190, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 8
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 40
  %1198 = load i64, i64* %RAX
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 4
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1197 to i64*
  store i64 %1198, i64* %1201
  %1202 = load i64, i64* %PC
  %1203 = sub i64 %1202, 251
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 5
  store i64 %1205, i64* %PC
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1203, i64* %1206, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1207 = load i64, i64* %RBP
  %1208 = sub i64 %1207, 12
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 7
  store i64 %1210, i64* %PC
  %1211 = inttoptr i64 %1208 to i32*
  store i32 28, i32* %1211
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 12
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 3
  store i64 %1215, i64* %PC
  %1216 = inttoptr i64 %1213 to i32*
  %1217 = load i32, i32* %1216
  %1218 = zext i32 %1217 to i64
  store i64 %1218, i64* %RDI, align 8, !tbaa !2428
  %1219 = load i64, i64* %PC
  %1220 = sub i64 %1219, 1484
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 5
  store i64 %1224, i64* %PC
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1226 = load i64, i64* %1225, align 8, !tbaa !2428
  %1227 = add i64 %1226, -8
  %1228 = inttoptr i64 %1227 to i64*
  store i64 %1222, i64* %1228
  store i64 %1227, i64* %1225, align 8, !tbaa !2428
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1220, i64* %1229, align 8, !tbaa !2428
  %1230 = load i64, i64* %PC
  %1231 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1230, %struct.Memory* %MEMORY.0)
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 8
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 4
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = load i64, i64* %RAX
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 3
  store i64 %1240, i64* %PC
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RCX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = add i64 4, %1241
  store i64 %1244, i64* %RCX, align 8, !tbaa !2428
  %1245 = icmp ult i64 %1244, %1241
  %1246 = icmp ult i64 %1244, 4
  %1247 = or i1 %1245, %1246
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1248, i8* %1249, align 1, !tbaa !2432
  %1250 = trunc i64 %1244 to i32
  %1251 = and i32 %1250, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = xor i64 4, %1241
  %1258 = xor i64 %1257, %1244
  %1259 = lshr i64 %1258, 4
  %1260 = trunc i64 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2447
  %1263 = icmp eq i64 %1244, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2448
  %1266 = lshr i64 %1244, 63
  %1267 = trunc i64 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2449
  %1269 = lshr i64 %1241, 63
  %1270 = xor i64 %1266, %1269
  %1271 = add nuw nsw i64 %1270, %1266
  %1272 = icmp eq i64 %1271, 2
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1273, i8* %1274, align 1, !tbaa !2450
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 8
  %1277 = load i64, i64* %RCX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1276 to i64*
  store i64 %1277, i64* %1280
  %1281 = load i64, i64* %RAX
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 3
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i32*
  %1285 = load i32, i32* %1284
  %1286 = sext i32 %1285 to i64
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RAX
  %1288 = mul i64 %1287, 8
  %1289 = add i64 %1288, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 8
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1289 to i64*
  %1293 = load i64, i64* %1292
  store i64 %1293, i64* %RAX, align 8, !tbaa !2428
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 40
  %1296 = load i64, i64* %RAX
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 4
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1295 to i64*
  store i64 %1296, i64* %1299
  %1300 = load i64, i64* %PC
  %1301 = sub i64 %1300, 1401
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1301, i64* %1304, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 12
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 7
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i32*
  store i32 10, i32* %1309
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 12
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  %1315 = load i32, i32* %1314
  %1316 = zext i32 %1315 to i64
  store i64 %1316, i64* %RDI, align 8, !tbaa !2428
  %1317 = load i64, i64* %PC
  %1318 = sub i64 %1317, 584
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 5
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 5
  store i64 %1322, i64* %PC
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1324 = load i64, i64* %1323, align 8, !tbaa !2428
  %1325 = add i64 %1324, -8
  %1326 = inttoptr i64 %1325 to i64*
  store i64 %1320, i64* %1326
  store i64 %1325, i64* %1323, align 8, !tbaa !2428
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1318, i64* %1327, align 8, !tbaa !2428
  %1328 = load i64, i64* %PC
  %1329 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1328, %struct.Memory* %MEMORY.0)
  %1330 = load i64, i64* %RBP
  %1331 = sub i64 %1330, 8
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 4
  store i64 %1333, i64* %PC
  %1334 = inttoptr i64 %1331 to i64*
  %1335 = load i64, i64* %1334
  store i64 %1335, i64* %RAX, align 8, !tbaa !2428
  %1336 = load i64, i64* %RAX
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 3
  store i64 %1338, i64* %PC
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1339 = load i64, i64* %RCX
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 4
  store i64 %1341, i64* %PC
  %1342 = add i64 4, %1339
  store i64 %1342, i64* %RCX, align 8, !tbaa !2428
  %1343 = icmp ult i64 %1342, %1339
  %1344 = icmp ult i64 %1342, 4
  %1345 = or i1 %1343, %1344
  %1346 = zext i1 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1346, i8* %1347, align 1, !tbaa !2432
  %1348 = trunc i64 %1342 to i32
  %1349 = and i32 %1348, 255
  %1350 = call i32 @llvm.ctpop.i32(i32 %1349) #16
  %1351 = trunc i32 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = xor i8 %1352, 1
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1353, i8* %1354, align 1, !tbaa !2446
  %1355 = xor i64 4, %1339
  %1356 = xor i64 %1355, %1342
  %1357 = lshr i64 %1356, 4
  %1358 = trunc i64 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1359, i8* %1360, align 1, !tbaa !2447
  %1361 = icmp eq i64 %1342, 0
  %1362 = zext i1 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1362, i8* %1363, align 1, !tbaa !2448
  %1364 = lshr i64 %1342, 63
  %1365 = trunc i64 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1365, i8* %1366, align 1, !tbaa !2449
  %1367 = lshr i64 %1339, 63
  %1368 = xor i64 %1364, %1367
  %1369 = add nuw nsw i64 %1368, %1364
  %1370 = icmp eq i64 %1369, 2
  %1371 = zext i1 %1370 to i8
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1371, i8* %1372, align 1, !tbaa !2450
  %1373 = load i64, i64* %RBP
  %1374 = sub i64 %1373, 8
  %1375 = load i64, i64* %RCX
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 4
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1374 to i64*
  store i64 %1375, i64* %1378
  %1379 = load i64, i64* %RAX
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 3
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i32*
  %1383 = load i32, i32* %1382
  %1384 = sext i32 %1383 to i64
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RAX
  %1386 = mul i64 %1385, 8
  %1387 = add i64 %1386, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 8
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1387 to i64*
  %1391 = load i64, i64* %1390
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RBP
  %1393 = sub i64 %1392, 40
  %1394 = load i64, i64* %RAX
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1393 to i64*
  store i64 %1394, i64* %1397
  %1398 = load i64, i64* %PC
  %1399 = sub i64 %1398, 501
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 5
  store i64 %1401, i64* %PC
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1399, i64* %1402, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 12
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 7
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i32*
  store i32 15, i32* %1407
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  %1413 = load i32, i32* %1412
  %1414 = zext i32 %1413 to i64
  store i64 %1414, i64* %RDI, align 8, !tbaa !2428
  %1415 = load i64, i64* %PC
  %1416 = sub i64 %1415, 834
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 5
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 5
  store i64 %1420, i64* %PC
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1422 = load i64, i64* %1421, align 8, !tbaa !2428
  %1423 = add i64 %1422, -8
  %1424 = inttoptr i64 %1423 to i64*
  store i64 %1418, i64* %1424
  store i64 %1423, i64* %1421, align 8, !tbaa !2428
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1416, i64* %1425, align 8, !tbaa !2428
  %1426 = load i64, i64* %PC
  %1427 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1426, %struct.Memory* %MEMORY.0)
  %1428 = load i64, i64* %RBP
  %1429 = sub i64 %1428, 8
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 4
  store i64 %1431, i64* %PC
  %1432 = inttoptr i64 %1429 to i64*
  %1433 = load i64, i64* %1432
  store i64 %1433, i64* %RAX, align 8, !tbaa !2428
  %1434 = load i64, i64* %RAX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 3
  store i64 %1436, i64* %PC
  store i64 %1434, i64* %RCX, align 8, !tbaa !2428
  %1437 = load i64, i64* %RCX
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 4
  store i64 %1439, i64* %PC
  %1440 = add i64 4, %1437
  store i64 %1440, i64* %RCX, align 8, !tbaa !2428
  %1441 = icmp ult i64 %1440, %1437
  %1442 = icmp ult i64 %1440, 4
  %1443 = or i1 %1441, %1442
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1444, i8* %1445, align 1, !tbaa !2432
  %1446 = trunc i64 %1440 to i32
  %1447 = and i32 %1446, 255
  %1448 = call i32 @llvm.ctpop.i32(i32 %1447) #16
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = xor i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1451, i8* %1452, align 1, !tbaa !2446
  %1453 = xor i64 4, %1437
  %1454 = xor i64 %1453, %1440
  %1455 = lshr i64 %1454, 4
  %1456 = trunc i64 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1457, i8* %1458, align 1, !tbaa !2447
  %1459 = icmp eq i64 %1440, 0
  %1460 = zext i1 %1459 to i8
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1460, i8* %1461, align 1, !tbaa !2448
  %1462 = lshr i64 %1440, 63
  %1463 = trunc i64 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1463, i8* %1464, align 1, !tbaa !2449
  %1465 = lshr i64 %1437, 63
  %1466 = xor i64 %1462, %1465
  %1467 = add nuw nsw i64 %1466, %1462
  %1468 = icmp eq i64 %1467, 2
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1469, i8* %1470, align 1, !tbaa !2450
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 8
  %1473 = load i64, i64* %RCX
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 4
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1472 to i64*
  store i64 %1473, i64* %1476
  %1477 = load i64, i64* %RAX
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 3
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i32*
  %1481 = load i32, i32* %1480
  %1482 = sext i32 %1481 to i64
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = load i64, i64* %RAX
  %1484 = mul i64 %1483, 8
  %1485 = add i64 %1484, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 8
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1485 to i64*
  %1489 = load i64, i64* %1488
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 40
  %1492 = load i64, i64* %RAX
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 4
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1491 to i64*
  store i64 %1492, i64* %1495
  %1496 = load i64, i64* %PC
  %1497 = sub i64 %1496, 751
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 5
  store i64 %1499, i64* %PC
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1497, i64* %1500, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 12
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 7
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i32*
  store i32 20, i32* %1505
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 3
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  %1511 = load i32, i32* %1510
  %1512 = zext i32 %1511 to i64
  store i64 %1512, i64* %RDI, align 8, !tbaa !2428
  %1513 = load i64, i64* %PC
  %1514 = sub i64 %1513, 1084
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 5
  store i64 %1518, i64* %PC
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1520 = load i64, i64* %1519, align 8, !tbaa !2428
  %1521 = add i64 %1520, -8
  %1522 = inttoptr i64 %1521 to i64*
  store i64 %1516, i64* %1522
  store i64 %1521, i64* %1519, align 8, !tbaa !2428
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1514, i64* %1523, align 8, !tbaa !2428
  %1524 = load i64, i64* %PC
  %1525 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1524, %struct.Memory* %MEMORY.0)
  %1526 = load i64, i64* %RBP
  %1527 = sub i64 %1526, 8
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 4
  store i64 %1529, i64* %PC
  %1530 = inttoptr i64 %1527 to i64*
  %1531 = load i64, i64* %1530
  store i64 %1531, i64* %RAX, align 8, !tbaa !2428
  %1532 = load i64, i64* %RAX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 3
  store i64 %1534, i64* %PC
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RCX
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = add i64 4, %1535
  store i64 %1538, i64* %RCX, align 8, !tbaa !2428
  %1539 = icmp ult i64 %1538, %1535
  %1540 = icmp ult i64 %1538, 4
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1542, i8* %1543, align 1, !tbaa !2432
  %1544 = trunc i64 %1538 to i32
  %1545 = and i32 %1544, 255
  %1546 = call i32 @llvm.ctpop.i32(i32 %1545) #16
  %1547 = trunc i32 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = xor i8 %1548, 1
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1549, i8* %1550, align 1, !tbaa !2446
  %1551 = xor i64 4, %1535
  %1552 = xor i64 %1551, %1538
  %1553 = lshr i64 %1552, 4
  %1554 = trunc i64 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1555, i8* %1556, align 1, !tbaa !2447
  %1557 = icmp eq i64 %1538, 0
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1558, i8* %1559, align 1, !tbaa !2448
  %1560 = lshr i64 %1538, 63
  %1561 = trunc i64 %1560 to i8
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1561, i8* %1562, align 1, !tbaa !2449
  %1563 = lshr i64 %1535, 63
  %1564 = xor i64 %1560, %1563
  %1565 = add nuw nsw i64 %1564, %1560
  %1566 = icmp eq i64 %1565, 2
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1567, i8* %1568, align 1, !tbaa !2450
  %1569 = load i64, i64* %RBP
  %1570 = sub i64 %1569, 8
  %1571 = load i64, i64* %RCX
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 4
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1570 to i64*
  store i64 %1571, i64* %1574
  %1575 = load i64, i64* %RAX
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 3
  store i64 %1577, i64* %PC
  %1578 = inttoptr i64 %1575 to i32*
  %1579 = load i32, i32* %1578
  %1580 = sext i32 %1579 to i64
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RAX
  %1582 = mul i64 %1581, 8
  %1583 = add i64 %1582, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 8
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1583 to i64*
  %1587 = load i64, i64* %1586
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 40
  %1590 = load i64, i64* %RAX
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 4
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1589 to i64*
  store i64 %1590, i64* %1593
  %1594 = load i64, i64* %PC
  %1595 = sub i64 %1594, 1001
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 5
  store i64 %1597, i64* %PC
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1595, i64* %1598, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 12
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 7
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i32*
  store i32 2, i32* %1603
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RDI, align 8, !tbaa !2428
  %1611 = load i64, i64* %PC
  %1612 = sub i64 %1611, 184
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 5
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 5
  store i64 %1616, i64* %PC
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1618 = load i64, i64* %1617, align 8, !tbaa !2428
  %1619 = add i64 %1618, -8
  %1620 = inttoptr i64 %1619 to i64*
  store i64 %1614, i64* %1620
  store i64 %1619, i64* %1617, align 8, !tbaa !2428
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1612, i64* %1621, align 8, !tbaa !2428
  %1622 = load i64, i64* %PC
  %1623 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1622, %struct.Memory* %MEMORY.0)
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 8
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 4
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i64*
  %1629 = load i64, i64* %1628
  store i64 %1629, i64* %RAX, align 8, !tbaa !2428
  %1630 = load i64, i64* %RAX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 3
  store i64 %1632, i64* %PC
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RCX
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 4
  store i64 %1635, i64* %PC
  %1636 = add i64 4, %1633
  store i64 %1636, i64* %RCX, align 8, !tbaa !2428
  %1637 = icmp ult i64 %1636, %1633
  %1638 = icmp ult i64 %1636, 4
  %1639 = or i1 %1637, %1638
  %1640 = zext i1 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1640, i8* %1641, align 1, !tbaa !2432
  %1642 = trunc i64 %1636 to i32
  %1643 = and i32 %1642, 255
  %1644 = call i32 @llvm.ctpop.i32(i32 %1643) #16
  %1645 = trunc i32 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = xor i8 %1646, 1
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1647, i8* %1648, align 1, !tbaa !2446
  %1649 = xor i64 4, %1633
  %1650 = xor i64 %1649, %1636
  %1651 = lshr i64 %1650, 4
  %1652 = trunc i64 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1653, i8* %1654, align 1, !tbaa !2447
  %1655 = icmp eq i64 %1636, 0
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1656, i8* %1657, align 1, !tbaa !2448
  %1658 = lshr i64 %1636, 63
  %1659 = trunc i64 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1659, i8* %1660, align 1, !tbaa !2449
  %1661 = lshr i64 %1633, 63
  %1662 = xor i64 %1658, %1661
  %1663 = add nuw nsw i64 %1662, %1658
  %1664 = icmp eq i64 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2450
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 8
  %1669 = load i64, i64* %RCX
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 4
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1668 to i64*
  store i64 %1669, i64* %1672
  %1673 = load i64, i64* %RAX
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 3
  store i64 %1675, i64* %PC
  %1676 = inttoptr i64 %1673 to i32*
  %1677 = load i32, i32* %1676
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RAX
  %1680 = mul i64 %1679, 8
  %1681 = add i64 %1680, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 8
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1681 to i64*
  %1685 = load i64, i64* %1684
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RBP
  %1687 = sub i64 %1686, 40
  %1688 = load i64, i64* %RAX
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 4
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1687 to i64*
  store i64 %1688, i64* %1691
  %1692 = load i64, i64* %PC
  %1693 = sub i64 %1692, 101
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 5
  store i64 %1695, i64* %PC
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1693, i64* %1696, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1697 = load i64, i64* %RBP
  %1698 = sub i64 %1697, 12
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 7
  store i64 %1700, i64* %PC
  %1701 = inttoptr i64 %1698 to i32*
  store i32 3, i32* %1701
  %1702 = load i64, i64* %PC
  %1703 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %1702, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1703

block_400a1c:                                     ; preds = %block_400566
  %1704 = load i64, i64* %RBP
  %1705 = sub i64 %1704, 12
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 7
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i32*
  store i32 25, i32* %1708
  %1709 = load i64, i64* %RBP
  %1710 = sub i64 %1709, 12
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 3
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to i32*
  %1714 = load i32, i32* %1713
  %1715 = zext i32 %1714 to i64
  store i64 %1715, i64* %RDI, align 8, !tbaa !2428
  %1716 = load i64, i64* %PC
  %1717 = sub i64 %1716, 1334
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1723 = load i64, i64* %1722, align 8, !tbaa !2428
  %1724 = add i64 %1723, -8
  %1725 = inttoptr i64 %1724 to i64*
  store i64 %1719, i64* %1725
  store i64 %1724, i64* %1722, align 8, !tbaa !2428
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1717, i64* %1726, align 8, !tbaa !2428
  %1727 = load i64, i64* %PC
  %1728 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1727, %struct.Memory* %MEMORY.0)
  %1729 = load i64, i64* %RBP
  %1730 = sub i64 %1729, 8
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RAX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RAX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 3
  store i64 %1737, i64* %PC
  store i64 %1735, i64* %RCX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RCX
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %PC
  %1741 = add i64 4, %1738
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = icmp ult i64 %1741, %1738
  %1743 = icmp ult i64 %1741, 4
  %1744 = or i1 %1742, %1743
  %1745 = zext i1 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1745, i8* %1746, align 1, !tbaa !2432
  %1747 = trunc i64 %1741 to i32
  %1748 = and i32 %1747, 255
  %1749 = call i32 @llvm.ctpop.i32(i32 %1748) #16
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = xor i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1752, i8* %1753, align 1, !tbaa !2446
  %1754 = xor i64 4, %1738
  %1755 = xor i64 %1754, %1741
  %1756 = lshr i64 %1755, 4
  %1757 = trunc i64 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1758, i8* %1759, align 1, !tbaa !2447
  %1760 = icmp eq i64 %1741, 0
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1761, i8* %1762, align 1, !tbaa !2448
  %1763 = lshr i64 %1741, 63
  %1764 = trunc i64 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1764, i8* %1765, align 1, !tbaa !2449
  %1766 = lshr i64 %1738, 63
  %1767 = xor i64 %1763, %1766
  %1768 = add nuw nsw i64 %1767, %1763
  %1769 = icmp eq i64 %1768, 2
  %1770 = zext i1 %1769 to i8
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1770, i8* %1771, align 1, !tbaa !2450
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 8
  %1774 = load i64, i64* %RCX
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 4
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1773 to i64*
  store i64 %1774, i64* %1777
  %1778 = load i64, i64* %RAX
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = sext i32 %1782 to i64
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = mul i64 %1784, 8
  %1786 = add i64 %1785, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 8
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RAX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RBP
  %1792 = sub i64 %1791, 40
  %1793 = load i64, i64* %RAX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 4
  store i64 %1795, i64* %PC
  %1796 = inttoptr i64 %1792 to i64*
  store i64 %1793, i64* %1796
  %1797 = load i64, i64* %PC
  %1798 = sub i64 %1797, 1251
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 5
  store i64 %1800, i64* %PC
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1798, i64* %1801, align 8, !tbaa !2428
  br label %block_400566

block_400799:                                     ; preds = %block_400792, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400792 ]
  %1802 = load i64, i64* %RBP
  %1803 = sub i64 %1802, 12
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 3
  store i64 %1805, i64* %PC
  %1806 = inttoptr i64 %1803 to i32*
  %1807 = load i32, i32* %1806
  %1808 = zext i32 %1807 to i64
  store i64 %1808, i64* %RDI, align 8, !tbaa !2428
  %1809 = load i64, i64* %PC
  %1810 = sub i64 %1809, 684
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 5
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 5
  store i64 %1814, i64* %PC
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1816 = load i64, i64* %1815, align 8, !tbaa !2428
  %1817 = add i64 %1816, -8
  %1818 = inttoptr i64 %1817 to i64*
  store i64 %1812, i64* %1818
  store i64 %1817, i64* %1815, align 8, !tbaa !2428
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1810, i64* %1819, align 8, !tbaa !2428
  %1820 = load i64, i64* %PC
  %1821 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1820, %struct.Memory* %MEMORY.1)
  %1822 = load i64, i64* %RBP
  %1823 = sub i64 %1822, 8
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 4
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to i64*
  %1827 = load i64, i64* %1826
  store i64 %1827, i64* %RAX, align 8, !tbaa !2428
  %1828 = load i64, i64* %RAX
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 3
  store i64 %1830, i64* %PC
  store i64 %1828, i64* %RCX, align 8, !tbaa !2428
  %1831 = load i64, i64* %RCX
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 4
  store i64 %1833, i64* %PC
  %1834 = add i64 4, %1831
  store i64 %1834, i64* %RCX, align 8, !tbaa !2428
  %1835 = icmp ult i64 %1834, %1831
  %1836 = icmp ult i64 %1834, 4
  %1837 = or i1 %1835, %1836
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1838, i8* %1839, align 1, !tbaa !2432
  %1840 = trunc i64 %1834 to i32
  %1841 = and i32 %1840, 255
  %1842 = call i32 @llvm.ctpop.i32(i32 %1841) #16
  %1843 = trunc i32 %1842 to i8
  %1844 = and i8 %1843, 1
  %1845 = xor i8 %1844, 1
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1845, i8* %1846, align 1, !tbaa !2446
  %1847 = xor i64 4, %1831
  %1848 = xor i64 %1847, %1834
  %1849 = lshr i64 %1848, 4
  %1850 = trunc i64 %1849 to i8
  %1851 = and i8 %1850, 1
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1851, i8* %1852, align 1, !tbaa !2447
  %1853 = icmp eq i64 %1834, 0
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1854, i8* %1855, align 1, !tbaa !2448
  %1856 = lshr i64 %1834, 63
  %1857 = trunc i64 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1857, i8* %1858, align 1, !tbaa !2449
  %1859 = lshr i64 %1831, 63
  %1860 = xor i64 %1856, %1859
  %1861 = add nuw nsw i64 %1860, %1856
  %1862 = icmp eq i64 %1861, 2
  %1863 = zext i1 %1862 to i8
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1863, i8* %1864, align 1, !tbaa !2450
  %1865 = load i64, i64* %RBP
  %1866 = sub i64 %1865, 8
  %1867 = load i64, i64* %RCX
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 4
  store i64 %1869, i64* %PC
  %1870 = inttoptr i64 %1866 to i64*
  store i64 %1867, i64* %1870
  %1871 = load i64, i64* %RAX
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 3
  store i64 %1873, i64* %PC
  %1874 = inttoptr i64 %1871 to i32*
  %1875 = load i32, i32* %1874
  %1876 = sext i32 %1875 to i64
  store i64 %1876, i64* %RAX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RAX
  %1878 = mul i64 %1877, 8
  %1879 = add i64 %1878, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1880 = load i64, i64* %PC
  %1881 = add i64 %1880, 8
  store i64 %1881, i64* %PC
  %1882 = inttoptr i64 %1879 to i64*
  %1883 = load i64, i64* %1882
  store i64 %1883, i64* %RAX, align 8, !tbaa !2428
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 40
  %1886 = load i64, i64* %RAX
  %1887 = load i64, i64* %PC
  %1888 = add i64 %1887, 4
  store i64 %1888, i64* %PC
  %1889 = inttoptr i64 %1885 to i64*
  store i64 %1886, i64* %1889
  %1890 = load i64, i64* %PC
  %1891 = sub i64 %1890, 601
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 5
  store i64 %1893, i64* %PC
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1891, i64* %1894, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1895 = load i64, i64* %RBP
  %1896 = sub i64 %1895, 12
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 7
  store i64 %1898, i64* %PC
  %1899 = inttoptr i64 %1896 to i32*
  store i32 7, i32* %1899
  %1900 = load i64, i64* %RBP
  %1901 = sub i64 %1900, 12
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 3
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i32*
  %1905 = load i32, i32* %1904
  %1906 = zext i32 %1905 to i64
  store i64 %1906, i64* %RDI, align 8, !tbaa !2428
  %1907 = load i64, i64* %PC
  %1908 = sub i64 %1907, 434
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 5
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 5
  store i64 %1912, i64* %PC
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1914 = load i64, i64* %1913, align 8, !tbaa !2428
  %1915 = add i64 %1914, -8
  %1916 = inttoptr i64 %1915 to i64*
  store i64 %1910, i64* %1916
  store i64 %1915, i64* %1913, align 8, !tbaa !2428
  %1917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1908, i64* %1917, align 8, !tbaa !2428
  %1918 = load i64, i64* %PC
  %1919 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1918, %struct.Memory* %MEMORY.0)
  %1920 = load i64, i64* %RBP
  %1921 = sub i64 %1920, 8
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 4
  store i64 %1923, i64* %PC
  %1924 = inttoptr i64 %1921 to i64*
  %1925 = load i64, i64* %1924
  store i64 %1925, i64* %RAX, align 8, !tbaa !2428
  %1926 = load i64, i64* %RAX
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 3
  store i64 %1928, i64* %PC
  store i64 %1926, i64* %RCX, align 8, !tbaa !2428
  %1929 = load i64, i64* %RCX
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 4
  store i64 %1931, i64* %PC
  %1932 = add i64 4, %1929
  store i64 %1932, i64* %RCX, align 8, !tbaa !2428
  %1933 = icmp ult i64 %1932, %1929
  %1934 = icmp ult i64 %1932, 4
  %1935 = or i1 %1933, %1934
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1936, i8* %1937, align 1, !tbaa !2432
  %1938 = trunc i64 %1932 to i32
  %1939 = and i32 %1938, 255
  %1940 = call i32 @llvm.ctpop.i32(i32 %1939) #16
  %1941 = trunc i32 %1940 to i8
  %1942 = and i8 %1941, 1
  %1943 = xor i8 %1942, 1
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1943, i8* %1944, align 1, !tbaa !2446
  %1945 = xor i64 4, %1929
  %1946 = xor i64 %1945, %1932
  %1947 = lshr i64 %1946, 4
  %1948 = trunc i64 %1947 to i8
  %1949 = and i8 %1948, 1
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1949, i8* %1950, align 1, !tbaa !2447
  %1951 = icmp eq i64 %1932, 0
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1952, i8* %1953, align 1, !tbaa !2448
  %1954 = lshr i64 %1932, 63
  %1955 = trunc i64 %1954 to i8
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1955, i8* %1956, align 1, !tbaa !2449
  %1957 = lshr i64 %1929, 63
  %1958 = xor i64 %1954, %1957
  %1959 = add nuw nsw i64 %1958, %1954
  %1960 = icmp eq i64 %1959, 2
  %1961 = zext i1 %1960 to i8
  %1962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1961, i8* %1962, align 1, !tbaa !2450
  %1963 = load i64, i64* %RBP
  %1964 = sub i64 %1963, 8
  %1965 = load i64, i64* %RCX
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 4
  store i64 %1967, i64* %PC
  %1968 = inttoptr i64 %1964 to i64*
  store i64 %1965, i64* %1968
  %1969 = load i64, i64* %RAX
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 3
  store i64 %1971, i64* %PC
  %1972 = inttoptr i64 %1969 to i32*
  %1973 = load i32, i32* %1972
  %1974 = sext i32 %1973 to i64
  store i64 %1974, i64* %RAX, align 8, !tbaa !2428
  %1975 = load i64, i64* %RAX
  %1976 = mul i64 %1975, 8
  %1977 = add i64 %1976, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1978 = load i64, i64* %PC
  %1979 = add i64 %1978, 8
  store i64 %1979, i64* %PC
  %1980 = inttoptr i64 %1977 to i64*
  %1981 = load i64, i64* %1980
  store i64 %1981, i64* %RAX, align 8, !tbaa !2428
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 40
  %1984 = load i64, i64* %RAX
  %1985 = load i64, i64* %PC
  %1986 = add i64 %1985, 4
  store i64 %1986, i64* %PC
  %1987 = inttoptr i64 %1983 to i64*
  store i64 %1984, i64* %1987
  %1988 = load i64, i64* %PC
  %1989 = sub i64 %1988, 351
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 5
  store i64 %1991, i64* %PC
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1989, i64* %1992, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1993 = load i64, i64* %RBP
  %1994 = sub i64 %1993, 12
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 7
  store i64 %1996, i64* %PC
  %1997 = inttoptr i64 %1994 to i32*
  store i32 30, i32* %1997
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 12
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 3
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  %2003 = load i32, i32* %2002
  %2004 = zext i32 %2003 to i64
  store i64 %2004, i64* %RDI, align 8, !tbaa !2428
  %2005 = load i64, i64* %PC
  %2006 = sub i64 %2005, 1584
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 5
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 5
  store i64 %2010, i64* %PC
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2012 = load i64, i64* %2011, align 8, !tbaa !2428
  %2013 = add i64 %2012, -8
  %2014 = inttoptr i64 %2013 to i64*
  store i64 %2008, i64* %2014
  store i64 %2013, i64* %2011, align 8, !tbaa !2428
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2006, i64* %2015, align 8, !tbaa !2428
  %2016 = load i64, i64* %PC
  %2017 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2016, %struct.Memory* %MEMORY.0)
  %2018 = load i64, i64* %RBP
  %2019 = sub i64 %2018, 8
  %2020 = load i64, i64* %PC
  %2021 = add i64 %2020, 4
  store i64 %2021, i64* %PC
  %2022 = inttoptr i64 %2019 to i64*
  %2023 = load i64, i64* %2022
  store i64 %2023, i64* %RAX, align 8, !tbaa !2428
  %2024 = load i64, i64* %RAX
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 3
  store i64 %2026, i64* %PC
  store i64 %2024, i64* %RCX, align 8, !tbaa !2428
  %2027 = load i64, i64* %RCX
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 4
  store i64 %2029, i64* %PC
  %2030 = add i64 4, %2027
  store i64 %2030, i64* %RCX, align 8, !tbaa !2428
  %2031 = icmp ult i64 %2030, %2027
  %2032 = icmp ult i64 %2030, 4
  %2033 = or i1 %2031, %2032
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2034, i8* %2035, align 1, !tbaa !2432
  %2036 = trunc i64 %2030 to i32
  %2037 = and i32 %2036, 255
  %2038 = call i32 @llvm.ctpop.i32(i32 %2037) #16
  %2039 = trunc i32 %2038 to i8
  %2040 = and i8 %2039, 1
  %2041 = xor i8 %2040, 1
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2041, i8* %2042, align 1, !tbaa !2446
  %2043 = xor i64 4, %2027
  %2044 = xor i64 %2043, %2030
  %2045 = lshr i64 %2044, 4
  %2046 = trunc i64 %2045 to i8
  %2047 = and i8 %2046, 1
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2047, i8* %2048, align 1, !tbaa !2447
  %2049 = icmp eq i64 %2030, 0
  %2050 = zext i1 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2050, i8* %2051, align 1, !tbaa !2448
  %2052 = lshr i64 %2030, 63
  %2053 = trunc i64 %2052 to i8
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2053, i8* %2054, align 1, !tbaa !2449
  %2055 = lshr i64 %2027, 63
  %2056 = xor i64 %2052, %2055
  %2057 = add nuw nsw i64 %2056, %2052
  %2058 = icmp eq i64 %2057, 2
  %2059 = zext i1 %2058 to i8
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2059, i8* %2060, align 1, !tbaa !2450
  %2061 = load i64, i64* %RBP
  %2062 = sub i64 %2061, 8
  %2063 = load i64, i64* %RCX
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 4
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2062 to i64*
  store i64 %2063, i64* %2066
  %2067 = load i64, i64* %RAX
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 3
  store i64 %2069, i64* %PC
  %2070 = inttoptr i64 %2067 to i32*
  %2071 = load i32, i32* %2070
  %2072 = sext i32 %2071 to i64
  store i64 %2072, i64* %RAX, align 8, !tbaa !2428
  %2073 = load i64, i64* %RAX
  %2074 = mul i64 %2073, 8
  %2075 = add i64 %2074, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 8
  store i64 %2077, i64* %PC
  %2078 = inttoptr i64 %2075 to i64*
  %2079 = load i64, i64* %2078
  store i64 %2079, i64* %RAX, align 8, !tbaa !2428
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 40
  %2082 = load i64, i64* %RAX
  %2083 = load i64, i64* %PC
  %2084 = add i64 %2083, 4
  store i64 %2084, i64* %PC
  %2085 = inttoptr i64 %2081 to i64*
  store i64 %2082, i64* %2085
  %2086 = load i64, i64* %PC
  %2087 = sub i64 %2086, 1501
  %2088 = load i64, i64* %PC
  %2089 = add i64 %2088, 5
  store i64 %2089, i64* %PC
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2087, i64* %2090, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2091 = load i64, i64* %RBP
  %2092 = sub i64 %2091, 12
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 7
  store i64 %2094, i64* %PC
  %2095 = inttoptr i64 %2092 to i32*
  store i32 12, i32* %2095
  br label %block_400799

block_40088c:                                     ; preds = %block_400566
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 12
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 7
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i32*
  store i32 17, i32* %2100
  %2101 = load i64, i64* %PC
  %2102 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %2101, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2102

block_400986:                                     ; preds = %block_400566
  %2103 = load i64, i64* %RBP
  %2104 = sub i64 %2103, 12
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 7
  store i64 %2106, i64* %PC
  %2107 = inttoptr i64 %2104 to i32*
  store i32 22, i32* %2107
  %2108 = load i64, i64* %PC
  %2109 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2108, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2109

block_400602:                                     ; preds = %block_400566
  %2110 = load i64, i64* %RBP
  %2111 = sub i64 %2110, 12
  %2112 = load i64, i64* %PC
  %2113 = add i64 %2112, 7
  store i64 %2113, i64* %PC
  %2114 = inttoptr i64 %2111 to i32*
  store i32 4, i32* %2114
  %2115 = load i64, i64* %PC
  %2116 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2115, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2116

block_400a80:                                     ; preds = %block_400566
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 12
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 7
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to i32*
  store i32 27, i32* %2121
  %2122 = load i64, i64* %PC
  %2123 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2122, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2123

; <label>:2124:                                   ; preds = %block_400566
  %2125 = load i64, i64* %PC
  %2126 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2125, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2126
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a55(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400a55

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_4005d0, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_400a55, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %799, %block_400a55 ], [ %1616, %block_400922 ], [ %1518, %block_400828 ], [ %1420, %block_40072e ], [ %1322, %block_400ab2 ], [ %1224, %block_400634 ], [ %1126, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %1028, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %1714, %block_40059e ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %897, %block_400954 ], [ %1812, %block_4005d0 ], [ %1910, %block_400a1c ], [ %2008, %block_400698 ], [ %2106, %block_400b16 ], [ %2204, %block_400792 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %2306 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 0, i32* %730
  %731 = load i64, i64* %RSP
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = add i64 48, %731
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %731
  %736 = icmp ult i64 %734, 48
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 48, %731
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i64 %731, 63
  %760 = xor i64 %756, %759
  %761 = add nuw nsw i64 %760, %756
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %768 = load i64, i64* %767, align 8, !tbaa !2428
  %769 = add i64 %768, 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %RBP, align 8, !tbaa !2428
  store i64 %769, i64* %767, align 8, !tbaa !2428
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 1
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %774, align 8, !tbaa !2428
  %779 = add i64 %776, 8
  store i64 %779, i64* %775, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400a55:                                     ; preds = %block_400a4e, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a4e ]
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 3
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RDI, align 8, !tbaa !2428
  %787 = load i64, i64* %PC
  %788 = sub i64 %787, 1384
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 5
  store i64 %792, i64* %PC
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %794 = load i64, i64* %793, align 8, !tbaa !2428
  %795 = add i64 %794, -8
  %796 = inttoptr i64 %795 to i64*
  store i64 %790, i64* %796
  store i64 %795, i64* %793, align 8, !tbaa !2428
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %788, i64* %797, align 8, !tbaa !2428
  %798 = load i64, i64* %PC
  %799 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %798, %struct.Memory* %MEMORY.1)
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 8
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 3
  store i64 %808, i64* %PC
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %809 = load i64, i64* %RCX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = add i64 4, %809
  store i64 %812, i64* %RCX, align 8, !tbaa !2428
  %813 = icmp ult i64 %812, %809
  %814 = icmp ult i64 %812, 4
  %815 = or i1 %813, %814
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %816, i8* %817, align 1, !tbaa !2432
  %818 = trunc i64 %812 to i32
  %819 = and i32 %818, 255
  %820 = call i32 @llvm.ctpop.i32(i32 %819) #16
  %821 = trunc i32 %820 to i8
  %822 = and i8 %821, 1
  %823 = xor i8 %822, 1
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %823, i8* %824, align 1, !tbaa !2446
  %825 = xor i64 4, %809
  %826 = xor i64 %825, %812
  %827 = lshr i64 %826, 4
  %828 = trunc i64 %827 to i8
  %829 = and i8 %828, 1
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %829, i8* %830, align 1, !tbaa !2447
  %831 = icmp eq i64 %812, 0
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %832, i8* %833, align 1, !tbaa !2448
  %834 = lshr i64 %812, 63
  %835 = trunc i64 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %835, i8* %836, align 1, !tbaa !2449
  %837 = lshr i64 %809, 63
  %838 = xor i64 %834, %837
  %839 = add nuw nsw i64 %838, %834
  %840 = icmp eq i64 %839, 2
  %841 = zext i1 %840 to i8
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %841, i8* %842, align 1, !tbaa !2450
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 8
  %845 = load i64, i64* %RCX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %844 to i64*
  store i64 %845, i64* %848
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i32*
  %853 = load i32, i32* %852
  %854 = sext i32 %853 to i64
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = load i64, i64* %RAX
  %856 = mul i64 %855, 8
  %857 = add i64 %856, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 8
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860
  store i64 %861, i64* %RAX, align 8, !tbaa !2428
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 40
  %864 = load i64, i64* %RAX
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 4
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %863 to i64*
  store i64 %864, i64* %867
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 1301
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  store i64 %871, i64* %PC
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %872, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 12
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 7
  store i64 %876, i64* %PC
  %877 = inttoptr i64 %874 to i32*
  store i32 21, i32* %877
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 12
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i32*
  %883 = load i32, i32* %882
  %884 = zext i32 %883 to i64
  store i64 %884, i64* %RDI, align 8, !tbaa !2428
  %885 = load i64, i64* %PC
  %886 = sub i64 %885, 1134
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 5
  store i64 %890, i64* %PC
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %892 = load i64, i64* %891, align 8, !tbaa !2428
  %893 = add i64 %892, -8
  %894 = inttoptr i64 %893 to i64*
  store i64 %888, i64* %894
  store i64 %893, i64* %891, align 8, !tbaa !2428
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %886, i64* %895, align 8, !tbaa !2428
  %896 = load i64, i64* %PC
  %897 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %896, %struct.Memory* %MEMORY.0)
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 8
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i64*
  %903 = load i64, i64* %902
  store i64 %903, i64* %RAX, align 8, !tbaa !2428
  %904 = load i64, i64* %RAX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 3
  store i64 %906, i64* %PC
  store i64 %904, i64* %RCX, align 8, !tbaa !2428
  %907 = load i64, i64* %RCX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = add i64 4, %907
  store i64 %910, i64* %RCX, align 8, !tbaa !2428
  %911 = icmp ult i64 %910, %907
  %912 = icmp ult i64 %910, 4
  %913 = or i1 %911, %912
  %914 = zext i1 %913 to i8
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %914, i8* %915, align 1, !tbaa !2432
  %916 = trunc i64 %910 to i32
  %917 = and i32 %916, 255
  %918 = call i32 @llvm.ctpop.i32(i32 %917) #16
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %921, i8* %922, align 1, !tbaa !2446
  %923 = xor i64 4, %907
  %924 = xor i64 %923, %910
  %925 = lshr i64 %924, 4
  %926 = trunc i64 %925 to i8
  %927 = and i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %927, i8* %928, align 1, !tbaa !2447
  %929 = icmp eq i64 %910, 0
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %930, i8* %931, align 1, !tbaa !2448
  %932 = lshr i64 %910, 63
  %933 = trunc i64 %932 to i8
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %933, i8* %934, align 1, !tbaa !2449
  %935 = lshr i64 %907, 63
  %936 = xor i64 %932, %935
  %937 = add nuw nsw i64 %936, %932
  %938 = icmp eq i64 %937, 2
  %939 = zext i1 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %939, i8* %940, align 1, !tbaa !2450
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 8
  %943 = load i64, i64* %RCX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %942 to i64*
  store i64 %943, i64* %946
  %947 = load i64, i64* %RAX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 3
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i32*
  %951 = load i32, i32* %950
  %952 = sext i32 %951 to i64
  store i64 %952, i64* %RAX, align 8, !tbaa !2428
  %953 = load i64, i64* %RAX
  %954 = mul i64 %953, 8
  %955 = add i64 %954, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 8
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i64*
  %959 = load i64, i64* %958
  store i64 %959, i64* %RAX, align 8, !tbaa !2428
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 40
  %962 = load i64, i64* %RAX
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 4
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %961 to i64*
  store i64 %962, i64* %965
  %966 = load i64, i64* %PC
  %967 = sub i64 %966, 1051
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 5
  store i64 %969, i64* %PC
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %967, i64* %970, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 12
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 7
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  store i32 26, i32* %975
  br label %block_400a55

block_4006ca:                                     ; preds = %block_400566
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 12
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 7
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  store i32 8, i32* %980
  %981 = load i64, i64* %PC
  %982 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %981, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %982

block_400b48:                                     ; preds = %block_400566
  %983 = load i64, i64* %RBP
  %984 = sub i64 %983, 12
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 7
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %984 to i32*
  store i32 31, i32* %987
  %988 = load i64, i64* %PC
  %989 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %988, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %989

block_4007c4:                                     ; preds = %block_400566
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 12
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 7
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  store i32 13, i32* %994
  %995 = load i64, i64* %PC
  %996 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %995, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %996

block_4008be:                                     ; preds = %block_400566
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 12
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 7
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i32*
  store i32 18, i32* %1001
  %1002 = load i64, i64* %PC
  %1003 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1002, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1003

block_40056c:                                     ; preds = %block_400566
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 12
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 7
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i32*
  store i32 1, i32* %1008
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 3
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  %1014 = load i32, i32* %1013
  %1015 = zext i32 %1014 to i64
  store i64 %1015, i64* %RDI, align 8, !tbaa !2428
  %1016 = load i64, i64* %PC
  %1017 = sub i64 %1016, 134
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 5
  store i64 %1021, i64* %PC
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1023 = load i64, i64* %1022, align 8, !tbaa !2428
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1019, i64* %1025
  store i64 %1024, i64* %1022, align 8, !tbaa !2428
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1017, i64* %1026, align 8, !tbaa !2428
  %1027 = load i64, i64* %PC
  %1028 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1027, %struct.Memory* %MEMORY.0)
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 8
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RAX
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 3
  store i64 %1037, i64* %PC
  store i64 %1035, i64* %RCX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RCX
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 4
  store i64 %1040, i64* %PC
  %1041 = add i64 4, %1038
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = icmp ult i64 %1041, %1038
  %1043 = icmp ult i64 %1041, 4
  %1044 = or i1 %1042, %1043
  %1045 = zext i1 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1045, i8* %1046, align 1, !tbaa !2432
  %1047 = trunc i64 %1041 to i32
  %1048 = and i32 %1047, 255
  %1049 = call i32 @llvm.ctpop.i32(i32 %1048) #16
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = xor i8 %1051, 1
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1052, i8* %1053, align 1, !tbaa !2446
  %1054 = xor i64 4, %1038
  %1055 = xor i64 %1054, %1041
  %1056 = lshr i64 %1055, 4
  %1057 = trunc i64 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1058, i8* %1059, align 1, !tbaa !2447
  %1060 = icmp eq i64 %1041, 0
  %1061 = zext i1 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1061, i8* %1062, align 1, !tbaa !2448
  %1063 = lshr i64 %1041, 63
  %1064 = trunc i64 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1064, i8* %1065, align 1, !tbaa !2449
  %1066 = lshr i64 %1038, 63
  %1067 = xor i64 %1063, %1066
  %1068 = add nuw nsw i64 %1067, %1063
  %1069 = icmp eq i64 %1068, 2
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1070, i8* %1071, align 1, !tbaa !2450
  %1072 = load i64, i64* %RBP
  %1073 = sub i64 %1072, 8
  %1074 = load i64, i64* %RCX
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1073 to i64*
  store i64 %1074, i64* %1077
  %1078 = load i64, i64* %RAX
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 3
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1078 to i32*
  %1082 = load i32, i32* %1081
  %1083 = sext i32 %1082 to i64
  store i64 %1083, i64* %RAX, align 8, !tbaa !2428
  %1084 = load i64, i64* %RAX
  %1085 = mul i64 %1084, 8
  %1086 = add i64 %1085, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 8
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1086 to i64*
  %1090 = load i64, i64* %1089
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 40
  %1093 = load i64, i64* %RAX
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 4
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1092 to i64*
  store i64 %1093, i64* %1096
  %1097 = load i64, i64* %PC
  %1098 = sub i64 %1097, 51
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 5
  store i64 %1100, i64* %PC
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1098, i64* %1101, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 12
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 7
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i32*
  store i32 23, i32* %1106
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RDI, align 8, !tbaa !2428
  %1114 = load i64, i64* %PC
  %1115 = sub i64 %1114, 1234
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1121 = load i64, i64* %1120, align 8, !tbaa !2428
  %1122 = add i64 %1121, -8
  %1123 = inttoptr i64 %1122 to i64*
  store i64 %1117, i64* %1123
  store i64 %1122, i64* %1120, align 8, !tbaa !2428
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1124, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1125, %struct.Memory* %MEMORY.0)
  %1127 = load i64, i64* %RBP
  %1128 = sub i64 %1127, 8
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1128 to i64*
  %1132 = load i64, i64* %1131
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = load i64, i64* %RAX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  store i64 %1133, i64* %RCX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RCX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = add i64 4, %1136
  store i64 %1139, i64* %RCX, align 8, !tbaa !2428
  %1140 = icmp ult i64 %1139, %1136
  %1141 = icmp ult i64 %1139, 4
  %1142 = or i1 %1140, %1141
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1143, i8* %1144, align 1, !tbaa !2432
  %1145 = trunc i64 %1139 to i32
  %1146 = and i32 %1145, 255
  %1147 = call i32 @llvm.ctpop.i32(i32 %1146) #16
  %1148 = trunc i32 %1147 to i8
  %1149 = and i8 %1148, 1
  %1150 = xor i8 %1149, 1
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1150, i8* %1151, align 1, !tbaa !2446
  %1152 = xor i64 4, %1136
  %1153 = xor i64 %1152, %1139
  %1154 = lshr i64 %1153, 4
  %1155 = trunc i64 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1156, i8* %1157, align 1, !tbaa !2447
  %1158 = icmp eq i64 %1139, 0
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1159, i8* %1160, align 1, !tbaa !2448
  %1161 = lshr i64 %1139, 63
  %1162 = trunc i64 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1162, i8* %1163, align 1, !tbaa !2449
  %1164 = lshr i64 %1136, 63
  %1165 = xor i64 %1161, %1164
  %1166 = add nuw nsw i64 %1165, %1161
  %1167 = icmp eq i64 %1166, 2
  %1168 = zext i1 %1167 to i8
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1168, i8* %1169, align 1, !tbaa !2450
  %1170 = load i64, i64* %RBP
  %1171 = sub i64 %1170, 8
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 4
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1171 to i64*
  store i64 %1172, i64* %1175
  %1176 = load i64, i64* %RAX
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RAX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RAX
  %1183 = mul i64 %1182, 8
  %1184 = add i64 %1183, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 8
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i64*
  %1188 = load i64, i64* %1187
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 40
  %1191 = load i64, i64* %RAX
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1190 to i64*
  store i64 %1191, i64* %1194
  %1195 = load i64, i64* %PC
  %1196 = sub i64 %1195, 1151
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 5
  store i64 %1198, i64* %PC
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1196, i64* %1199, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 12
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 7
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1201 to i32*
  store i32 5, i32* %1204
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 3
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = zext i32 %1210 to i64
  store i64 %1211, i64* %RDI, align 8, !tbaa !2428
  %1212 = load i64, i64* %PC
  %1213 = sub i64 %1212, 334
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 5
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 5
  store i64 %1217, i64* %PC
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1219 = load i64, i64* %1218, align 8, !tbaa !2428
  %1220 = add i64 %1219, -8
  %1221 = inttoptr i64 %1220 to i64*
  store i64 %1215, i64* %1221
  store i64 %1220, i64* %1218, align 8, !tbaa !2428
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1213, i64* %1222, align 8, !tbaa !2428
  %1223 = load i64, i64* %PC
  %1224 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1223, %struct.Memory* %MEMORY.0)
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 8
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 4
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1226 to i64*
  %1230 = load i64, i64* %1229
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RAX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 3
  store i64 %1233, i64* %PC
  store i64 %1231, i64* %RCX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RCX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = add i64 4, %1234
  store i64 %1237, i64* %RCX, align 8, !tbaa !2428
  %1238 = icmp ult i64 %1237, %1234
  %1239 = icmp ult i64 %1237, 4
  %1240 = or i1 %1238, %1239
  %1241 = zext i1 %1240 to i8
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1241, i8* %1242, align 1, !tbaa !2432
  %1243 = trunc i64 %1237 to i32
  %1244 = and i32 %1243, 255
  %1245 = call i32 @llvm.ctpop.i32(i32 %1244) #16
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1248, i8* %1249, align 1, !tbaa !2446
  %1250 = xor i64 4, %1234
  %1251 = xor i64 %1250, %1237
  %1252 = lshr i64 %1251, 4
  %1253 = trunc i64 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1254, i8* %1255, align 1, !tbaa !2447
  %1256 = icmp eq i64 %1237, 0
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1257, i8* %1258, align 1, !tbaa !2448
  %1259 = lshr i64 %1237, 63
  %1260 = trunc i64 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1260, i8* %1261, align 1, !tbaa !2449
  %1262 = lshr i64 %1234, 63
  %1263 = xor i64 %1259, %1262
  %1264 = add nuw nsw i64 %1263, %1259
  %1265 = icmp eq i64 %1264, 2
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1266, i8* %1267, align 1, !tbaa !2450
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 8
  %1270 = load i64, i64* %RCX
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 4
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1269 to i64*
  store i64 %1270, i64* %1273
  %1274 = load i64, i64* %RAX
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 3
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  %1278 = load i32, i32* %1277
  %1279 = sext i32 %1278 to i64
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  %1280 = load i64, i64* %RAX
  %1281 = mul i64 %1280, 8
  %1282 = add i64 %1281, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 8
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1282 to i64*
  %1286 = load i64, i64* %1285
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 40
  %1289 = load i64, i64* %RAX
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 4
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1288 to i64*
  store i64 %1289, i64* %1292
  %1293 = load i64, i64* %PC
  %1294 = sub i64 %1293, 251
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 5
  store i64 %1296, i64* %PC
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1294, i64* %1297, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 7
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  store i32 28, i32* %1302
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  %1308 = load i32, i32* %1307
  %1309 = zext i32 %1308 to i64
  store i64 %1309, i64* %RDI, align 8, !tbaa !2428
  %1310 = load i64, i64* %PC
  %1311 = sub i64 %1310, 1484
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 5
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 5
  store i64 %1315, i64* %PC
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1317 = load i64, i64* %1316, align 8, !tbaa !2428
  %1318 = add i64 %1317, -8
  %1319 = inttoptr i64 %1318 to i64*
  store i64 %1313, i64* %1319
  store i64 %1318, i64* %1316, align 8, !tbaa !2428
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1311, i64* %1320, align 8, !tbaa !2428
  %1321 = load i64, i64* %PC
  %1322 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1321, %struct.Memory* %MEMORY.0)
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 8
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1324 to i64*
  %1328 = load i64, i64* %1327
  store i64 %1328, i64* %RAX, align 8, !tbaa !2428
  %1329 = load i64, i64* %RAX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 3
  store i64 %1331, i64* %PC
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1332 = load i64, i64* %RCX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 4
  store i64 %1334, i64* %PC
  %1335 = add i64 4, %1332
  store i64 %1335, i64* %RCX, align 8, !tbaa !2428
  %1336 = icmp ult i64 %1335, %1332
  %1337 = icmp ult i64 %1335, 4
  %1338 = or i1 %1336, %1337
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1339, i8* %1340, align 1, !tbaa !2432
  %1341 = trunc i64 %1335 to i32
  %1342 = and i32 %1341, 255
  %1343 = call i32 @llvm.ctpop.i32(i32 %1342) #16
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1346, i8* %1347, align 1, !tbaa !2446
  %1348 = xor i64 4, %1332
  %1349 = xor i64 %1348, %1335
  %1350 = lshr i64 %1349, 4
  %1351 = trunc i64 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1352, i8* %1353, align 1, !tbaa !2447
  %1354 = icmp eq i64 %1335, 0
  %1355 = zext i1 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1355, i8* %1356, align 1, !tbaa !2448
  %1357 = lshr i64 %1335, 63
  %1358 = trunc i64 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1358, i8* %1359, align 1, !tbaa !2449
  %1360 = lshr i64 %1332, 63
  %1361 = xor i64 %1357, %1360
  %1362 = add nuw nsw i64 %1361, %1357
  %1363 = icmp eq i64 %1362, 2
  %1364 = zext i1 %1363 to i8
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1364, i8* %1365, align 1, !tbaa !2450
  %1366 = load i64, i64* %RBP
  %1367 = sub i64 %1366, 8
  %1368 = load i64, i64* %RCX
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1367 to i64*
  store i64 %1368, i64* %1371
  %1372 = load i64, i64* %RAX
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 3
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  %1376 = load i32, i32* %1375
  %1377 = sext i32 %1376 to i64
  store i64 %1377, i64* %RAX, align 8, !tbaa !2428
  %1378 = load i64, i64* %RAX
  %1379 = mul i64 %1378, 8
  %1380 = add i64 %1379, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 8
  store i64 %1382, i64* %PC
  %1383 = inttoptr i64 %1380 to i64*
  %1384 = load i64, i64* %1383
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 40
  %1387 = load i64, i64* %RAX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %PC
  %1392 = sub i64 %1391, 1401
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1392, i64* %1395, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 12
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 7
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i32*
  store i32 10, i32* %1400
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 12
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 3
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  %1406 = load i32, i32* %1405
  %1407 = zext i32 %1406 to i64
  store i64 %1407, i64* %RDI, align 8, !tbaa !2428
  %1408 = load i64, i64* %PC
  %1409 = sub i64 %1408, 584
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 5
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 5
  store i64 %1413, i64* %PC
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1415 = load i64, i64* %1414, align 8, !tbaa !2428
  %1416 = add i64 %1415, -8
  %1417 = inttoptr i64 %1416 to i64*
  store i64 %1411, i64* %1417
  store i64 %1416, i64* %1414, align 8, !tbaa !2428
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1409, i64* %1418, align 8, !tbaa !2428
  %1419 = load i64, i64* %PC
  %1420 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1419, %struct.Memory* %MEMORY.0)
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 8
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = load i64, i64* %RAX
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  store i64 %1427, i64* %RCX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RCX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %PC
  %1433 = add i64 4, %1430
  store i64 %1433, i64* %RCX, align 8, !tbaa !2428
  %1434 = icmp ult i64 %1433, %1430
  %1435 = icmp ult i64 %1433, 4
  %1436 = or i1 %1434, %1435
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1437, i8* %1438, align 1, !tbaa !2432
  %1439 = trunc i64 %1433 to i32
  %1440 = and i32 %1439, 255
  %1441 = call i32 @llvm.ctpop.i32(i32 %1440) #16
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1444, i8* %1445, align 1, !tbaa !2446
  %1446 = xor i64 4, %1430
  %1447 = xor i64 %1446, %1433
  %1448 = lshr i64 %1447, 4
  %1449 = trunc i64 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1450, i8* %1451, align 1, !tbaa !2447
  %1452 = icmp eq i64 %1433, 0
  %1453 = zext i1 %1452 to i8
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1453, i8* %1454, align 1, !tbaa !2448
  %1455 = lshr i64 %1433, 63
  %1456 = trunc i64 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1456, i8* %1457, align 1, !tbaa !2449
  %1458 = lshr i64 %1430, 63
  %1459 = xor i64 %1455, %1458
  %1460 = add nuw nsw i64 %1459, %1455
  %1461 = icmp eq i64 %1460, 2
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1462, i8* %1463, align 1, !tbaa !2450
  %1464 = load i64, i64* %RBP
  %1465 = sub i64 %1464, 8
  %1466 = load i64, i64* %RCX
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 4
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1465 to i64*
  store i64 %1466, i64* %1469
  %1470 = load i64, i64* %RAX
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 3
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i32*
  %1474 = load i32, i32* %1473
  %1475 = sext i32 %1474 to i64
  store i64 %1475, i64* %RAX, align 8, !tbaa !2428
  %1476 = load i64, i64* %RAX
  %1477 = mul i64 %1476, 8
  %1478 = add i64 %1477, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 8
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1478 to i64*
  %1482 = load i64, i64* %1481
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 40
  %1485 = load i64, i64* %RAX
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 4
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1484 to i64*
  store i64 %1485, i64* %1488
  %1489 = load i64, i64* %PC
  %1490 = sub i64 %1489, 501
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 5
  store i64 %1492, i64* %PC
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1490, i64* %1493, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 12
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 7
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i32*
  store i32 15, i32* %1498
  %1499 = load i64, i64* %RBP
  %1500 = sub i64 %1499, 12
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1500 to i32*
  %1504 = load i32, i32* %1503
  %1505 = zext i32 %1504 to i64
  store i64 %1505, i64* %RDI, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = sub i64 %1506, 834
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 5
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1513 = load i64, i64* %1512, align 8, !tbaa !2428
  %1514 = add i64 %1513, -8
  %1515 = inttoptr i64 %1514 to i64*
  store i64 %1509, i64* %1515
  store i64 %1514, i64* %1512, align 8, !tbaa !2428
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1507, i64* %1516, align 8, !tbaa !2428
  %1517 = load i64, i64* %PC
  %1518 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1517, %struct.Memory* %MEMORY.0)
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 8
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to i64*
  %1524 = load i64, i64* %1523
  store i64 %1524, i64* %RAX, align 8, !tbaa !2428
  %1525 = load i64, i64* %RAX
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 3
  store i64 %1527, i64* %PC
  store i64 %1525, i64* %RCX, align 8, !tbaa !2428
  %1528 = load i64, i64* %RCX
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 4
  store i64 %1530, i64* %PC
  %1531 = add i64 4, %1528
  store i64 %1531, i64* %RCX, align 8, !tbaa !2428
  %1532 = icmp ult i64 %1531, %1528
  %1533 = icmp ult i64 %1531, 4
  %1534 = or i1 %1532, %1533
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1535, i8* %1536, align 1, !tbaa !2432
  %1537 = trunc i64 %1531 to i32
  %1538 = and i32 %1537, 255
  %1539 = call i32 @llvm.ctpop.i32(i32 %1538) #16
  %1540 = trunc i32 %1539 to i8
  %1541 = and i8 %1540, 1
  %1542 = xor i8 %1541, 1
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1542, i8* %1543, align 1, !tbaa !2446
  %1544 = xor i64 4, %1528
  %1545 = xor i64 %1544, %1531
  %1546 = lshr i64 %1545, 4
  %1547 = trunc i64 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1548, i8* %1549, align 1, !tbaa !2447
  %1550 = icmp eq i64 %1531, 0
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1551, i8* %1552, align 1, !tbaa !2448
  %1553 = lshr i64 %1531, 63
  %1554 = trunc i64 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1554, i8* %1555, align 1, !tbaa !2449
  %1556 = lshr i64 %1528, 63
  %1557 = xor i64 %1553, %1556
  %1558 = add nuw nsw i64 %1557, %1553
  %1559 = icmp eq i64 %1558, 2
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1560, i8* %1561, align 1, !tbaa !2450
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 8
  %1564 = load i64, i64* %RCX
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 4
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1563 to i64*
  store i64 %1564, i64* %1567
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = sext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i64, i64* %RAX
  %1575 = mul i64 %1574, 8
  %1576 = add i64 %1575, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 8
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %RAX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1582 to i64*
  store i64 %1583, i64* %1586
  %1587 = load i64, i64* %PC
  %1588 = sub i64 %1587, 751
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1588, i64* %1591, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 12
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 7
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i32*
  store i32 20, i32* %1596
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = sub i64 %1604, 1084
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 5
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1611 = load i64, i64* %1610, align 8, !tbaa !2428
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1607, i64* %1613
  store i64 %1612, i64* %1610, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1605, i64* %1614, align 8, !tbaa !2428
  %1615 = load i64, i64* %PC
  %1616 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1615, %struct.Memory* %MEMORY.0)
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 8
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RAX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 3
  store i64 %1625, i64* %PC
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RCX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 4
  store i64 %1628, i64* %PC
  %1629 = add i64 4, %1626
  store i64 %1629, i64* %RCX, align 8, !tbaa !2428
  %1630 = icmp ult i64 %1629, %1626
  %1631 = icmp ult i64 %1629, 4
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1634, align 1, !tbaa !2432
  %1635 = trunc i64 %1629 to i32
  %1636 = and i32 %1635, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #16
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 4, %1626
  %1643 = xor i64 %1642, %1629
  %1644 = lshr i64 %1643, 4
  %1645 = trunc i64 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1646, i8* %1647, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1629, 0
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = lshr i64 %1629, 63
  %1652 = trunc i64 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1652, i8* %1653, align 1, !tbaa !2449
  %1654 = lshr i64 %1626, 63
  %1655 = xor i64 %1651, %1654
  %1656 = add nuw nsw i64 %1655, %1651
  %1657 = icmp eq i64 %1656, 2
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 8
  %1662 = load i64, i64* %RCX
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1661 to i64*
  store i64 %1662, i64* %1665
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RAX
  %1673 = mul i64 %1672, 8
  %1674 = add i64 %1673, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 8
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %PC
  %1686 = sub i64 %1685, 1001
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1686, i64* %1689, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 12
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 2, i32* %1694
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDI, align 8, !tbaa !2428
  %1702 = load i64, i64* %PC
  %1703 = sub i64 %1702, 184
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  store i64 %1707, i64* %PC
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1709 = load i64, i64* %1708, align 8, !tbaa !2428
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1705, i64* %1711
  store i64 %1710, i64* %1708, align 8, !tbaa !2428
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1703, i64* %1712, align 8, !tbaa !2428
  %1713 = load i64, i64* %PC
  %1714 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1713, %struct.Memory* %MEMORY.0)
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 8
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = load i64, i64* %RAX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 4
  store i64 %1726, i64* %PC
  %1727 = add i64 4, %1724
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = icmp ult i64 %1727, %1724
  %1729 = icmp ult i64 %1727, 4
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1731, i8* %1732, align 1, !tbaa !2432
  %1733 = trunc i64 %1727 to i32
  %1734 = and i32 %1733, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #16
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2446
  %1740 = xor i64 4, %1724
  %1741 = xor i64 %1740, %1727
  %1742 = lshr i64 %1741, 4
  %1743 = trunc i64 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1744, i8* %1745, align 1, !tbaa !2447
  %1746 = icmp eq i64 %1727, 0
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1747, i8* %1748, align 1, !tbaa !2448
  %1749 = lshr i64 %1727, 63
  %1750 = trunc i64 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1750, i8* %1751, align 1, !tbaa !2449
  %1752 = lshr i64 %1724, 63
  %1753 = xor i64 %1749, %1752
  %1754 = add nuw nsw i64 %1753, %1749
  %1755 = icmp eq i64 %1754, 2
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1756, i8* %1757, align 1, !tbaa !2450
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 8
  %1760 = load i64, i64* %RCX
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1759 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %RAX
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 3
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RAX
  %1771 = mul i64 %1770, 8
  %1772 = add i64 %1771, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 40
  %1779 = load i64, i64* %RAX
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1778 to i64*
  store i64 %1779, i64* %1782
  %1783 = load i64, i64* %PC
  %1784 = sub i64 %1783, 101
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1784, i64* %1787, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 7
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i32*
  store i32 3, i32* %1792
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %PC
  %1801 = sub i64 %1800, 234
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 5
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1807 = load i64, i64* %1806, align 8, !tbaa !2428
  %1808 = add i64 %1807, -8
  %1809 = inttoptr i64 %1808 to i64*
  store i64 %1803, i64* %1809
  store i64 %1808, i64* %1806, align 8, !tbaa !2428
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1801, i64* %1810, align 8, !tbaa !2428
  %1811 = load i64, i64* %PC
  %1812 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1811, %struct.Memory* %MEMORY.0)
  %1813 = load i64, i64* %RBP
  %1814 = sub i64 %1813, 8
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1814 to i64*
  %1818 = load i64, i64* %1817
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  store i64 %1819, i64* %RCX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RCX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = add i64 4, %1822
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i64 %1825, %1822
  %1827 = icmp ult i64 %1825, 4
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2432
  %1831 = trunc i64 %1825 to i32
  %1832 = and i32 %1831, 255
  %1833 = call i32 @llvm.ctpop.i32(i32 %1832) #16
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1836, i8* %1837, align 1, !tbaa !2446
  %1838 = xor i64 4, %1822
  %1839 = xor i64 %1838, %1825
  %1840 = lshr i64 %1839, 4
  %1841 = trunc i64 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = icmp eq i64 %1825, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1825, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = lshr i64 %1822, 63
  %1851 = xor i64 %1847, %1850
  %1852 = add nuw nsw i64 %1851, %1847
  %1853 = icmp eq i64 %1852, 2
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = sext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RAX
  %1869 = mul i64 %1868, 8
  %1870 = add i64 %1869, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 8
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 40
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1876 to i64*
  store i64 %1877, i64* %1880
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 151
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  store i64 %1884, i64* %PC
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1885, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 12
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  store i32 25, i32* %1890
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 12
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RDI, align 8, !tbaa !2428
  %1898 = load i64, i64* %PC
  %1899 = sub i64 %1898, 1334
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1905 = load i64, i64* %1904, align 8, !tbaa !2428
  %1906 = add i64 %1905, -8
  %1907 = inttoptr i64 %1906 to i64*
  store i64 %1901, i64* %1907
  store i64 %1906, i64* %1904, align 8, !tbaa !2428
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1908, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1909, %struct.Memory* %MEMORY.0)
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 8
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i64*
  %1916 = load i64, i64* %1915
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RCX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 4
  store i64 %1922, i64* %PC
  %1923 = add i64 4, %1920
  store i64 %1923, i64* %RCX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1920
  %1925 = icmp ult i64 %1923, 4
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i64 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = xor i64 4, %1920
  %1937 = xor i64 %1936, %1923
  %1938 = lshr i64 %1937, 4
  %1939 = trunc i64 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1940, i8* %1941, align 1, !tbaa !2447
  %1942 = icmp eq i64 %1923, 0
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1943, i8* %1944, align 1, !tbaa !2448
  %1945 = lshr i64 %1923, 63
  %1946 = trunc i64 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1946, i8* %1947, align 1, !tbaa !2449
  %1948 = lshr i64 %1920, 63
  %1949 = xor i64 %1945, %1948
  %1950 = add nuw nsw i64 %1949, %1945
  %1951 = icmp eq i64 %1950, 2
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1952, i8* %1953, align 1, !tbaa !2450
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 8
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 4
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RAX
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 3
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  %1964 = load i32, i32* %1963
  %1965 = sext i32 %1964 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 8
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 40
  %1975 = load i64, i64* %RAX
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 4
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1974 to i64*
  store i64 %1975, i64* %1978
  %1979 = load i64, i64* %PC
  %1980 = sub i64 %1979, 1251
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1980, i64* %1983, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 12
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 7
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i32*
  store i32 7, i32* %1988
  %1989 = load i64, i64* %RBP
  %1990 = sub i64 %1989, 12
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  %1993 = inttoptr i64 %1990 to i32*
  %1994 = load i32, i32* %1993
  %1995 = zext i32 %1994 to i64
  store i64 %1995, i64* %RDI, align 8, !tbaa !2428
  %1996 = load i64, i64* %PC
  %1997 = sub i64 %1996, 434
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 5
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 5
  store i64 %2001, i64* %PC
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2003 = load i64, i64* %2002, align 8, !tbaa !2428
  %2004 = add i64 %2003, -8
  %2005 = inttoptr i64 %2004 to i64*
  store i64 %1999, i64* %2005
  store i64 %2004, i64* %2002, align 8, !tbaa !2428
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1997, i64* %2006, align 8, !tbaa !2428
  %2007 = load i64, i64* %PC
  %2008 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2007, %struct.Memory* %MEMORY.0)
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 8
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 4
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2010 to i64*
  %2014 = load i64, i64* %2013
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %2015 = load i64, i64* %RAX
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 3
  store i64 %2017, i64* %PC
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2018 = load i64, i64* %RCX
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 4
  store i64 %2020, i64* %PC
  %2021 = add i64 4, %2018
  store i64 %2021, i64* %RCX, align 8, !tbaa !2428
  %2022 = icmp ult i64 %2021, %2018
  %2023 = icmp ult i64 %2021, 4
  %2024 = or i1 %2022, %2023
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2025, i8* %2026, align 1, !tbaa !2432
  %2027 = trunc i64 %2021 to i32
  %2028 = and i32 %2027, 255
  %2029 = call i32 @llvm.ctpop.i32(i32 %2028) #16
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = xor i8 %2031, 1
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2032, i8* %2033, align 1, !tbaa !2446
  %2034 = xor i64 4, %2018
  %2035 = xor i64 %2034, %2021
  %2036 = lshr i64 %2035, 4
  %2037 = trunc i64 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2038, i8* %2039, align 1, !tbaa !2447
  %2040 = icmp eq i64 %2021, 0
  %2041 = zext i1 %2040 to i8
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2041, i8* %2042, align 1, !tbaa !2448
  %2043 = lshr i64 %2021, 63
  %2044 = trunc i64 %2043 to i8
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2044, i8* %2045, align 1, !tbaa !2449
  %2046 = lshr i64 %2018, 63
  %2047 = xor i64 %2043, %2046
  %2048 = add nuw nsw i64 %2047, %2043
  %2049 = icmp eq i64 %2048, 2
  %2050 = zext i1 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2050, i8* %2051, align 1, !tbaa !2450
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 8
  %2054 = load i64, i64* %RCX
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 4
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2053 to i64*
  store i64 %2054, i64* %2057
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i32*
  %2062 = load i32, i32* %2061
  %2063 = sext i32 %2062 to i64
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RAX
  %2065 = mul i64 %2064, 8
  %2066 = add i64 %2065, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 8
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2066 to i64*
  %2070 = load i64, i64* %2069
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 40
  %2073 = load i64, i64* %RAX
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 4
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2072 to i64*
  store i64 %2073, i64* %2076
  %2077 = load i64, i64* %PC
  %2078 = sub i64 %2077, 351
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 5
  store i64 %2080, i64* %PC
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2078, i64* %2081, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2082 = load i64, i64* %RBP
  %2083 = sub i64 %2082, 12
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 7
  store i64 %2085, i64* %PC
  %2086 = inttoptr i64 %2083 to i32*
  store i32 30, i32* %2086
  %2087 = load i64, i64* %RBP
  %2088 = sub i64 %2087, 12
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 3
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to i32*
  %2092 = load i32, i32* %2091
  %2093 = zext i32 %2092 to i64
  store i64 %2093, i64* %RDI, align 8, !tbaa !2428
  %2094 = load i64, i64* %PC
  %2095 = sub i64 %2094, 1584
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 5
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 5
  store i64 %2099, i64* %PC
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2101 = load i64, i64* %2100, align 8, !tbaa !2428
  %2102 = add i64 %2101, -8
  %2103 = inttoptr i64 %2102 to i64*
  store i64 %2097, i64* %2103
  store i64 %2102, i64* %2100, align 8, !tbaa !2428
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2095, i64* %2104, align 8, !tbaa !2428
  %2105 = load i64, i64* %PC
  %2106 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2105, %struct.Memory* %MEMORY.0)
  %2107 = load i64, i64* %RBP
  %2108 = sub i64 %2107, 8
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 4
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i64*
  %2112 = load i64, i64* %2111
  store i64 %2112, i64* %RAX, align 8, !tbaa !2428
  %2113 = load i64, i64* %RAX
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  store i64 %2113, i64* %RCX, align 8, !tbaa !2428
  %2116 = load i64, i64* %RCX
  %2117 = load i64, i64* %PC
  %2118 = add i64 %2117, 4
  store i64 %2118, i64* %PC
  %2119 = add i64 4, %2116
  store i64 %2119, i64* %RCX, align 8, !tbaa !2428
  %2120 = icmp ult i64 %2119, %2116
  %2121 = icmp ult i64 %2119, 4
  %2122 = or i1 %2120, %2121
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2123, i8* %2124, align 1, !tbaa !2432
  %2125 = trunc i64 %2119 to i32
  %2126 = and i32 %2125, 255
  %2127 = call i32 @llvm.ctpop.i32(i32 %2126) #16
  %2128 = trunc i32 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = xor i8 %2129, 1
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2130, i8* %2131, align 1, !tbaa !2446
  %2132 = xor i64 4, %2116
  %2133 = xor i64 %2132, %2119
  %2134 = lshr i64 %2133, 4
  %2135 = trunc i64 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2136, i8* %2137, align 1, !tbaa !2447
  %2138 = icmp eq i64 %2119, 0
  %2139 = zext i1 %2138 to i8
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2139, i8* %2140, align 1, !tbaa !2448
  %2141 = lshr i64 %2119, 63
  %2142 = trunc i64 %2141 to i8
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2142, i8* %2143, align 1, !tbaa !2449
  %2144 = lshr i64 %2116, 63
  %2145 = xor i64 %2141, %2144
  %2146 = add nuw nsw i64 %2145, %2141
  %2147 = icmp eq i64 %2146, 2
  %2148 = zext i1 %2147 to i8
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2148, i8* %2149, align 1, !tbaa !2450
  %2150 = load i64, i64* %RBP
  %2151 = sub i64 %2150, 8
  %2152 = load i64, i64* %RCX
  %2153 = load i64, i64* %PC
  %2154 = add i64 %2153, 4
  store i64 %2154, i64* %PC
  %2155 = inttoptr i64 %2151 to i64*
  store i64 %2152, i64* %2155
  %2156 = load i64, i64* %RAX
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 3
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2156 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RAX
  %2163 = mul i64 %2162, 8
  %2164 = add i64 %2163, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 8
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2164 to i64*
  %2168 = load i64, i64* %2167
  store i64 %2168, i64* %RAX, align 8, !tbaa !2428
  %2169 = load i64, i64* %RBP
  %2170 = sub i64 %2169, 40
  %2171 = load i64, i64* %RAX
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 4
  store i64 %2173, i64* %PC
  %2174 = inttoptr i64 %2170 to i64*
  store i64 %2171, i64* %2174
  %2175 = load i64, i64* %PC
  %2176 = sub i64 %2175, 1501
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 5
  store i64 %2178, i64* %PC
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2176, i64* %2179, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 12
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 7
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i32*
  store i32 12, i32* %2184
  %2185 = load i64, i64* %RBP
  %2186 = sub i64 %2185, 12
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 3
  store i64 %2188, i64* %PC
  %2189 = inttoptr i64 %2186 to i32*
  %2190 = load i32, i32* %2189
  %2191 = zext i32 %2190 to i64
  store i64 %2191, i64* %RDI, align 8, !tbaa !2428
  %2192 = load i64, i64* %PC
  %2193 = sub i64 %2192, 684
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 5
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 5
  store i64 %2197, i64* %PC
  %2198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2199 = load i64, i64* %2198, align 8, !tbaa !2428
  %2200 = add i64 %2199, -8
  %2201 = inttoptr i64 %2200 to i64*
  store i64 %2195, i64* %2201
  store i64 %2200, i64* %2198, align 8, !tbaa !2428
  %2202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2193, i64* %2202, align 8, !tbaa !2428
  %2203 = load i64, i64* %PC
  %2204 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2203, %struct.Memory* %MEMORY.0)
  %2205 = load i64, i64* %RBP
  %2206 = sub i64 %2205, 8
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 4
  store i64 %2208, i64* %PC
  %2209 = inttoptr i64 %2206 to i64*
  %2210 = load i64, i64* %2209
  store i64 %2210, i64* %RAX, align 8, !tbaa !2428
  %2211 = load i64, i64* %RAX
  %2212 = load i64, i64* %PC
  %2213 = add i64 %2212, 3
  store i64 %2213, i64* %PC
  store i64 %2211, i64* %RCX, align 8, !tbaa !2428
  %2214 = load i64, i64* %RCX
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 4
  store i64 %2216, i64* %PC
  %2217 = add i64 4, %2214
  store i64 %2217, i64* %RCX, align 8, !tbaa !2428
  %2218 = icmp ult i64 %2217, %2214
  %2219 = icmp ult i64 %2217, 4
  %2220 = or i1 %2218, %2219
  %2221 = zext i1 %2220 to i8
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2221, i8* %2222, align 1, !tbaa !2432
  %2223 = trunc i64 %2217 to i32
  %2224 = and i32 %2223, 255
  %2225 = call i32 @llvm.ctpop.i32(i32 %2224) #16
  %2226 = trunc i32 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = xor i8 %2227, 1
  %2229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2228, i8* %2229, align 1, !tbaa !2446
  %2230 = xor i64 4, %2214
  %2231 = xor i64 %2230, %2217
  %2232 = lshr i64 %2231, 4
  %2233 = trunc i64 %2232 to i8
  %2234 = and i8 %2233, 1
  %2235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2234, i8* %2235, align 1, !tbaa !2447
  %2236 = icmp eq i64 %2217, 0
  %2237 = zext i1 %2236 to i8
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2237, i8* %2238, align 1, !tbaa !2448
  %2239 = lshr i64 %2217, 63
  %2240 = trunc i64 %2239 to i8
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2240, i8* %2241, align 1, !tbaa !2449
  %2242 = lshr i64 %2214, 63
  %2243 = xor i64 %2239, %2242
  %2244 = add nuw nsw i64 %2243, %2239
  %2245 = icmp eq i64 %2244, 2
  %2246 = zext i1 %2245 to i8
  %2247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2246, i8* %2247, align 1, !tbaa !2450
  %2248 = load i64, i64* %RBP
  %2249 = sub i64 %2248, 8
  %2250 = load i64, i64* %RCX
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 4
  store i64 %2252, i64* %PC
  %2253 = inttoptr i64 %2249 to i64*
  store i64 %2250, i64* %2253
  %2254 = load i64, i64* %RAX
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 3
  store i64 %2256, i64* %PC
  %2257 = inttoptr i64 %2254 to i32*
  %2258 = load i32, i32* %2257
  %2259 = sext i32 %2258 to i64
  store i64 %2259, i64* %RAX, align 8, !tbaa !2428
  %2260 = load i64, i64* %RAX
  %2261 = mul i64 %2260, 8
  %2262 = add i64 %2261, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 8
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2262 to i64*
  %2266 = load i64, i64* %2265
  store i64 %2266, i64* %RAX, align 8, !tbaa !2428
  %2267 = load i64, i64* %RBP
  %2268 = sub i64 %2267, 40
  %2269 = load i64, i64* %RAX
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 4
  store i64 %2271, i64* %PC
  %2272 = inttoptr i64 %2268 to i64*
  store i64 %2269, i64* %2272
  %2273 = load i64, i64* %PC
  %2274 = sub i64 %2273, 601
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 5
  store i64 %2276, i64* %PC
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2274, i64* %2277, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2278 = load i64, i64* %RBP
  %2279 = sub i64 %2278, 12
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 7
  store i64 %2281, i64* %PC
  %2282 = inttoptr i64 %2279 to i32*
  store i32 17, i32* %2282
  %2283 = load i64, i64* %PC
  %2284 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %2283, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2284

block_400986:                                     ; preds = %block_400566
  %2285 = load i64, i64* %RBP
  %2286 = sub i64 %2285, 12
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 7
  store i64 %2288, i64* %PC
  %2289 = inttoptr i64 %2286 to i32*
  store i32 22, i32* %2289
  %2290 = load i64, i64* %PC
  %2291 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2290, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2291

block_400602:                                     ; preds = %block_400566
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 12
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 7
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i32*
  store i32 4, i32* %2296
  %2297 = load i64, i64* %PC
  %2298 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2297, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2298

block_400a80:                                     ; preds = %block_400566
  %2299 = load i64, i64* %RBP
  %2300 = sub i64 %2299, 12
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 7
  store i64 %2302, i64* %PC
  %2303 = inttoptr i64 %2300 to i32*
  store i32 27, i32* %2303
  %2304 = load i64, i64* %PC
  %2305 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2304, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2305

; <label>:2306:                                   ; preds = %block_400566
  %2307 = load i64, i64* %PC
  %2308 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2307, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2308
}

; Function Attrs: noinline
define %struct.Memory* @sub_400735(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400735

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.0)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 3, i32* %219
  %220 = load i64, i64* %PC
  %221 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %220, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %221

block_4006ca:                                     ; preds = %block_400566
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 8, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %228

block_4007c4:                                     ; preds = %block_400566
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 13, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %235

block_4009ea:                                     ; preds = %block_400566
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 24, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %242

block_4008be:                                     ; preds = %block_400566
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 18, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %249

block_4009b8:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 23, i32* %254
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 12
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 1234
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %272, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %273, %struct.Memory* %MEMORY.0)
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RAX
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %284 = load i64, i64* %RCX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 4, %284
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 4
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2432
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2446
  %300 = xor i64 4, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2447
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2450
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %RCX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX
  %331 = mul i64 %330, 8
  %332 = add i64 %331, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 8
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 40
  %339 = load i64, i64* %RAX
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 1151
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %347, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 12
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  store i32 28, i32* %352
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 12
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i32*
  %358 = load i32, i32* %357
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RDI, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = sub i64 %360, 1484
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %367 = load i64, i64* %366, align 8, !tbaa !2428
  %368 = add i64 %367, -8
  %369 = inttoptr i64 %368 to i64*
  store i64 %363, i64* %369
  store i64 %368, i64* %366, align 8, !tbaa !2428
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %361, i64* %370, align 8, !tbaa !2428
  %371 = load i64, i64* %PC
  %372 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %371, %struct.Memory* %MEMORY.0)
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 8
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 3
  store i64 %381, i64* %PC
  store i64 %379, i64* %RCX, align 8, !tbaa !2428
  %382 = load i64, i64* %RCX
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = add i64 4, %382
  store i64 %385, i64* %RCX, align 8, !tbaa !2428
  %386 = icmp ult i64 %385, %382
  %387 = icmp ult i64 %385, 4
  %388 = or i1 %386, %387
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %389, i8* %390, align 1, !tbaa !2432
  %391 = trunc i64 %385 to i32
  %392 = and i32 %391, 255
  %393 = call i32 @llvm.ctpop.i32(i32 %392) #16
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %396, i8* %397, align 1, !tbaa !2446
  %398 = xor i64 4, %382
  %399 = xor i64 %398, %385
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = icmp eq i64 %385, 0
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %405, i8* %406, align 1, !tbaa !2448
  %407 = lshr i64 %385, 63
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %408, i8* %409, align 1, !tbaa !2449
  %410 = lshr i64 %382, 63
  %411 = xor i64 %407, %410
  %412 = add nuw nsw i64 %411, %407
  %413 = icmp eq i64 %412, 2
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 8
  %418 = load i64, i64* %RCX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 4
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %417 to i64*
  store i64 %418, i64* %421
  %422 = load i64, i64* %RAX
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = sext i32 %426 to i64
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = mul i64 %428, 8
  %430 = add i64 %429, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 8
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i64*
  %434 = load i64, i64* %433
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %RBP
  %436 = sub i64 %435, 40
  %437 = load i64, i64* %RAX
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %436 to i64*
  store i64 %437, i64* %440
  %441 = load i64, i64* %PC
  %442 = sub i64 %441, 1401
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %442, i64* %445, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 12
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 7
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  store i32 2, i32* %450
  %451 = load i64, i64* %PC
  %452 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %451, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %452

block_400698:                                     ; preds = %block_400566
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 12
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 7, i32* %457
  %458 = load i64, i64* %PC
  %459 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %458, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %459

block_400792:                                     ; preds = %block_400566
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  store i32 12, i32* %464
  %465 = load i64, i64* %PC
  %466 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %465, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %466

block_40088c:                                     ; preds = %block_400566
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  store i32 17, i32* %471
  %472 = load i64, i64* %PC
  %473 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %472, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %473

block_400986:                                     ; preds = %block_400566
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 12
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 7
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i32*
  store i32 22, i32* %478
  %479 = load i64, i64* %PC
  %480 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %479, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %480

block_40056c:                                     ; preds = %block_400566
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 7
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  store i32 1, i32* %485
  %486 = load i64, i64* %PC
  %487 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %486, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %487

block_400566:                                     ; preds = %block_400634, %block_400735, %block_400ab2, %block_4009b8, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %581, %block_400735 ], [ %141, %block_4008f0 ], [ %43, %block_4007f6 ], [ %274, %block_4009b8 ], [ %372, %block_400ab2 ], [ %679, %block_400634 ]
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 40
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 2
  store i64 %496, i64* %PC
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  switch i64 %498, label %800 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196092, label %block_4006fc
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196192, label %block_400760
    i64 4197042, label %block_400ab2
    i64 4196542, label %block_4008be
    i64 4195742, label %block_40059e
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4195992, label %block_400698
    i64 4196242, label %block_400792
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196692, label %block_400954
    i64 4196992, label %block_400a80
  ]

block_40085a:                                     ; preds = %block_400566
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 12
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  store i32 16, i32* %503
  %504 = load i64, i64* %PC
  %505 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %505

block_400ae4:                                     ; preds = %block_400566
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 29, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %512

block_400559:                                     ; preds = %block_400566
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 0, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %519

block_400954:                                     ; preds = %block_400566
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 21, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %526

block_400a4e:                                     ; preds = %block_400566
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 12
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 7
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 26, i32* %531
  %532 = load i64, i64* %PC
  %533 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %532, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %533

block_400a80:                                     ; preds = %block_400566
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 12
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 7
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  store i32 27, i32* %538
  %539 = load i64, i64* %PC
  %540 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %540

block_400b48:                                     ; preds = %block_400566
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 12
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 7
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i32*
  store i32 31, i32* %545
  %546 = load i64, i64* %PC
  %547 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %546, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %547

block_400666:                                     ; preds = %block_400566
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 12
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 7
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  store i32 6, i32* %552
  %553 = load i64, i64* %PC
  %554 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %554

block_400760:                                     ; preds = %block_400566
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 12
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 7
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  store i32 11, i32* %559
  %560 = load i64, i64* %PC
  %561 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %560, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %561

block_400735:                                     ; preds = %block_40072e, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40072e ]
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 12
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 3
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i32*
  %567 = load i32, i32* %566
  %568 = zext i32 %567 to i64
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %569 = load i64, i64* %PC
  %570 = sub i64 %569, 584
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 5
  store i64 %574, i64* %PC
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %576 = load i64, i64* %575, align 8, !tbaa !2428
  %577 = add i64 %576, -8
  %578 = inttoptr i64 %577 to i64*
  store i64 %572, i64* %578
  store i64 %577, i64* %575, align 8, !tbaa !2428
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %570, i64* %579, align 8, !tbaa !2428
  %580 = load i64, i64* %PC
  %581 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %580, %struct.Memory* %MEMORY.1)
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 8
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 4
  store i64 %585, i64* %PC
  %586 = inttoptr i64 %583 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = load i64, i64* %RAX
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 3
  store i64 %590, i64* %PC
  store i64 %588, i64* %RCX, align 8, !tbaa !2428
  %591 = load i64, i64* %RCX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC
  %594 = add i64 4, %591
  store i64 %594, i64* %RCX, align 8, !tbaa !2428
  %595 = icmp ult i64 %594, %591
  %596 = icmp ult i64 %594, 4
  %597 = or i1 %595, %596
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %598, i8* %599, align 1, !tbaa !2432
  %600 = trunc i64 %594 to i32
  %601 = and i32 %600, 255
  %602 = call i32 @llvm.ctpop.i32(i32 %601) #16
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %605, i8* %606, align 1, !tbaa !2446
  %607 = xor i64 4, %591
  %608 = xor i64 %607, %594
  %609 = lshr i64 %608, 4
  %610 = trunc i64 %609 to i8
  %611 = and i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %611, i8* %612, align 1, !tbaa !2447
  %613 = icmp eq i64 %594, 0
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %614, i8* %615, align 1, !tbaa !2448
  %616 = lshr i64 %594, 63
  %617 = trunc i64 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %617, i8* %618, align 1, !tbaa !2449
  %619 = lshr i64 %591, 63
  %620 = xor i64 %616, %619
  %621 = add nuw nsw i64 %620, %616
  %622 = icmp eq i64 %621, 2
  %623 = zext i1 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %623, i8* %624, align 1, !tbaa !2450
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 8
  %627 = load i64, i64* %RCX
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 4
  store i64 %629, i64* %PC
  %630 = inttoptr i64 %626 to i64*
  store i64 %627, i64* %630
  %631 = load i64, i64* %RAX
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 3
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i32*
  %635 = load i32, i32* %634
  %636 = sext i32 %635 to i64
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = load i64, i64* %RAX
  %638 = mul i64 %637, 8
  %639 = add i64 %638, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 8
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 40
  %646 = load i64, i64* %RAX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = inttoptr i64 %645 to i64*
  store i64 %646, i64* %649
  %650 = load i64, i64* %PC
  %651 = sub i64 %650, 501
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 5
  store i64 %653, i64* %PC
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %651, i64* %654, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 12
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 7
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  store i32 5, i32* %659
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 12
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 3
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i32*
  %665 = load i32, i32* %664
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RDI, align 8, !tbaa !2428
  %667 = load i64, i64* %PC
  %668 = sub i64 %667, 334
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 5
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  store i64 %672, i64* %PC
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %674 = load i64, i64* %673, align 8, !tbaa !2428
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %670, i64* %676
  store i64 %675, i64* %673, align 8, !tbaa !2428
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %668, i64* %677, align 8, !tbaa !2428
  %678 = load i64, i64* %PC
  %679 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %678, %struct.Memory* %MEMORY.0)
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 8
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 4
  store i64 %683, i64* %PC
  %684 = inttoptr i64 %681 to i64*
  %685 = load i64, i64* %684
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = load i64, i64* %RAX
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  store i64 %686, i64* %RCX, align 8, !tbaa !2428
  %689 = load i64, i64* %RCX
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 4
  store i64 %691, i64* %PC
  %692 = add i64 4, %689
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  %693 = icmp ult i64 %692, %689
  %694 = icmp ult i64 %692, 4
  %695 = or i1 %693, %694
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %696, i8* %697, align 1, !tbaa !2432
  %698 = trunc i64 %692 to i32
  %699 = and i32 %698, 255
  %700 = call i32 @llvm.ctpop.i32(i32 %699) #16
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %703, i8* %704, align 1, !tbaa !2446
  %705 = xor i64 4, %689
  %706 = xor i64 %705, %692
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %709, i8* %710, align 1, !tbaa !2447
  %711 = icmp eq i64 %692, 0
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %712, i8* %713, align 1, !tbaa !2448
  %714 = lshr i64 %692, 63
  %715 = trunc i64 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %715, i8* %716, align 1, !tbaa !2449
  %717 = lshr i64 %689, 63
  %718 = xor i64 %714, %717
  %719 = add nuw nsw i64 %718, %714
  %720 = icmp eq i64 %719, 2
  %721 = zext i1 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %721, i8* %722, align 1, !tbaa !2450
  %723 = load i64, i64* %RBP
  %724 = sub i64 %723, 8
  %725 = load i64, i64* %RCX
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %724 to i64*
  store i64 %725, i64* %728
  %729 = load i64, i64* %RAX
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to i32*
  %733 = load i32, i32* %732
  %734 = sext i32 %733 to i64
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = load i64, i64* %RAX
  %736 = mul i64 %735, 8
  %737 = add i64 %736, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 8
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 40
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 4
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %743 to i64*
  store i64 %744, i64* %747
  %748 = load i64, i64* %PC
  %749 = sub i64 %748, 251
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 5
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %749, i64* %752, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 12
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 7
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i32*
  store i32 10, i32* %757
  br label %block_400735

block_400828:                                     ; preds = %block_400566
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 12
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 7
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  store i32 15, i32* %762
  %763 = load i64, i64* %PC
  %764 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %764

block_4006fc:                                     ; preds = %block_400566
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 12
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  store i32 9, i32* %769
  %770 = load i64, i64* %PC
  %771 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %770, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %771

block_400922:                                     ; preds = %block_400566
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 12
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  store i32 20, i32* %776
  %777 = load i64, i64* %PC
  %778 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %777, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %778

block_400a1c:                                     ; preds = %block_400566
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 7
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  store i32 25, i32* %783
  %784 = load i64, i64* %PC
  %785 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %784, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %785

block_400b16:                                     ; preds = %block_400566
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 12
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 7
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  store i32 30, i32* %790
  %791 = load i64, i64* %PC
  %792 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %791, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %792

block_400602:                                     ; preds = %block_400566
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 12
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 7
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  store i32 4, i32* %797
  %798 = load i64, i64* %PC
  %799 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %798, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %799

; <label>:800:                                    ; preds = %block_400566
  %801 = load i64, i64* %PC
  %802 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %801, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %802
}

; Function Attrs: noinline
define %struct.Memory* @sub_400893(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400893

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 1, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 134
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 51
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400893, %block_400b16, %block_400698, %block_400ab2, %block_400a1c, %block_40059e, %block_4009b8, %block_400922, %block_400828, %block_40072e, %block_400634, %block_400a4e, %block_400954, %block_4005d0, %block_4008f0, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %2199, %block_400893 ], [ %1616, %block_4009b8 ], [ %1518, %block_400922 ], [ %1413, %block_400828 ], [ %1714, %block_40059e ], [ %1058, %block_400a4e ], [ %1261, %block_40072e ], [ %1156, %block_400634 ], [ %960, %block_400954 ], [ %53, %block_4007f6 ], [ %848, %block_4005d0 ], [ %249, %block_4009ea ], [ %151, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %750, %block_4008f0 ], [ %1812, %block_400a1c ], [ %1910, %block_400ab2 ], [ %2008, %block_400698 ], [ %2106, %block_400b16 ], [ %2297, %block_400792 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %2397 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4197042, label %block_400ab2
    i64 4196892, label %block_400a1c
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196292, label %block_4007c4
    i64 4196692, label %block_400954
    i64 4195892, label %block_400634
    i64 4196142, label %block_40072e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196792, label %block_4009b8
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 19, i32* %730
  %731 = load i64, i64* %RBP
  %732 = sub i64 %731, 12
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 3
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %732 to i32*
  %736 = load i32, i32* %735
  %737 = zext i32 %736 to i64
  store i64 %737, i64* %RDI, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = sub i64 %738, 1034
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 5
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 5
  store i64 %743, i64* %PC
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %745 = load i64, i64* %744, align 8, !tbaa !2428
  %746 = add i64 %745, -8
  %747 = inttoptr i64 %746 to i64*
  store i64 %741, i64* %747
  store i64 %746, i64* %744, align 8, !tbaa !2428
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %739, i64* %748, align 8, !tbaa !2428
  %749 = load i64, i64* %PC
  %750 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %749, %struct.Memory* %MEMORY.0)
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 8
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RAX
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %760 = load i64, i64* %RCX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 4
  store i64 %762, i64* %PC
  %763 = add i64 4, %760
  store i64 %763, i64* %RCX, align 8, !tbaa !2428
  %764 = icmp ult i64 %763, %760
  %765 = icmp ult i64 %763, 4
  %766 = or i1 %764, %765
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %767, i8* %768, align 1, !tbaa !2432
  %769 = trunc i64 %763 to i32
  %770 = and i32 %769, 255
  %771 = call i32 @llvm.ctpop.i32(i32 %770) #16
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %774, i8* %775, align 1, !tbaa !2446
  %776 = xor i64 4, %760
  %777 = xor i64 %776, %763
  %778 = lshr i64 %777, 4
  %779 = trunc i64 %778 to i8
  %780 = and i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %780, i8* %781, align 1, !tbaa !2447
  %782 = icmp eq i64 %763, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2448
  %785 = lshr i64 %763, 63
  %786 = trunc i64 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2449
  %788 = lshr i64 %760, 63
  %789 = xor i64 %785, %788
  %790 = add nuw nsw i64 %789, %785
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 8
  %796 = load i64, i64* %RCX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %795 to i64*
  store i64 %796, i64* %799
  %800 = load i64, i64* %RAX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %800 to i32*
  %804 = load i32, i32* %803
  %805 = sext i32 %804 to i64
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = mul i64 %806, 8
  %808 = add i64 %807, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 8
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 40
  %815 = load i64, i64* %RAX
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %814 to i64*
  store i64 %815, i64* %818
  %819 = load i64, i64* %PC
  %820 = sub i64 %819, 951
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 5
  store i64 %822, i64* %PC
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %820, i64* %823, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 12
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 7
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  store i32 3, i32* %828
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 12
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i32*
  %834 = load i32, i32* %833
  %835 = zext i32 %834 to i64
  store i64 %835, i64* %RDI, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = sub i64 %836, 234
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 5
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %843 = load i64, i64* %842, align 8, !tbaa !2428
  %844 = add i64 %843, -8
  %845 = inttoptr i64 %844 to i64*
  store i64 %839, i64* %845
  store i64 %844, i64* %842, align 8, !tbaa !2428
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %837, i64* %846, align 8, !tbaa !2428
  %847 = load i64, i64* %PC
  %848 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %847, %struct.Memory* %MEMORY.0)
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 8
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i64*
  %854 = load i64, i64* %853
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = load i64, i64* %RAX
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 3
  store i64 %857, i64* %PC
  store i64 %855, i64* %RCX, align 8, !tbaa !2428
  %858 = load i64, i64* %RCX
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 4
  store i64 %860, i64* %PC
  %861 = add i64 4, %858
  store i64 %861, i64* %RCX, align 8, !tbaa !2428
  %862 = icmp ult i64 %861, %858
  %863 = icmp ult i64 %861, 4
  %864 = or i1 %862, %863
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %865, i8* %866, align 1, !tbaa !2432
  %867 = trunc i64 %861 to i32
  %868 = and i32 %867, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2446
  %874 = xor i64 4, %858
  %875 = xor i64 %874, %861
  %876 = lshr i64 %875, 4
  %877 = trunc i64 %876 to i8
  %878 = and i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %878, i8* %879, align 1, !tbaa !2447
  %880 = icmp eq i64 %861, 0
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %881, i8* %882, align 1, !tbaa !2448
  %883 = lshr i64 %861, 63
  %884 = trunc i64 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %884, i8* %885, align 1, !tbaa !2449
  %886 = lshr i64 %858, 63
  %887 = xor i64 %883, %886
  %888 = add nuw nsw i64 %887, %883
  %889 = icmp eq i64 %888, 2
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %890, i8* %891, align 1, !tbaa !2450
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 8
  %894 = load i64, i64* %RCX
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 4
  store i64 %896, i64* %PC
  %897 = inttoptr i64 %893 to i64*
  store i64 %894, i64* %897
  %898 = load i64, i64* %RAX
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 3
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i32*
  %902 = load i32, i32* %901
  %903 = sext i32 %902 to i64
  store i64 %903, i64* %RAX, align 8, !tbaa !2428
  %904 = load i64, i64* %RAX
  %905 = mul i64 %904, 8
  %906 = add i64 %905, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 8
  store i64 %908, i64* %PC
  %909 = inttoptr i64 %906 to i64*
  %910 = load i64, i64* %909
  store i64 %910, i64* %RAX, align 8, !tbaa !2428
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 40
  %913 = load i64, i64* %RAX
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 4
  store i64 %915, i64* %PC
  %916 = inttoptr i64 %912 to i64*
  store i64 %913, i64* %916
  %917 = load i64, i64* %PC
  %918 = sub i64 %917, 151
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 5
  store i64 %920, i64* %PC
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %918, i64* %921, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 12
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 7
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i32*
  store i32 8, i32* %926
  %927 = load i64, i64* %PC
  %928 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %927, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %928

block_4007c4:                                     ; preds = %block_400566
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 12
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 7
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to i32*
  store i32 13, i32* %933
  %934 = load i64, i64* %PC
  %935 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %935

block_400954:                                     ; preds = %block_400566
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 12
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 7
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i32*
  store i32 21, i32* %940
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 12
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i32*
  %946 = load i32, i32* %945
  %947 = zext i32 %946 to i64
  store i64 %947, i64* %RDI, align 8, !tbaa !2428
  %948 = load i64, i64* %PC
  %949 = sub i64 %948, 1134
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 5
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 5
  store i64 %953, i64* %PC
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %955 = load i64, i64* %954, align 8, !tbaa !2428
  %956 = add i64 %955, -8
  %957 = inttoptr i64 %956 to i64*
  store i64 %951, i64* %957
  store i64 %956, i64* %954, align 8, !tbaa !2428
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %949, i64* %958, align 8, !tbaa !2428
  %959 = load i64, i64* %PC
  %960 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %959, %struct.Memory* %MEMORY.0)
  %961 = load i64, i64* %RBP
  %962 = sub i64 %961, 8
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 4
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to i64*
  %966 = load i64, i64* %965
  store i64 %966, i64* %RAX, align 8, !tbaa !2428
  %967 = load i64, i64* %RAX
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 3
  store i64 %969, i64* %PC
  store i64 %967, i64* %RCX, align 8, !tbaa !2428
  %970 = load i64, i64* %RCX
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 4
  store i64 %972, i64* %PC
  %973 = add i64 4, %970
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = icmp ult i64 %973, %970
  %975 = icmp ult i64 %973, 4
  %976 = or i1 %974, %975
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %977, i8* %978, align 1, !tbaa !2432
  %979 = trunc i64 %973 to i32
  %980 = and i32 %979, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 4, %970
  %987 = xor i64 %986, %973
  %988 = lshr i64 %987, 4
  %989 = trunc i64 %988 to i8
  %990 = and i8 %989, 1
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %990, i8* %991, align 1, !tbaa !2447
  %992 = icmp eq i64 %973, 0
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %993, i8* %994, align 1, !tbaa !2448
  %995 = lshr i64 %973, 63
  %996 = trunc i64 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %996, i8* %997, align 1, !tbaa !2449
  %998 = lshr i64 %970, 63
  %999 = xor i64 %995, %998
  %1000 = add nuw nsw i64 %999, %995
  %1001 = icmp eq i64 %1000, 2
  %1002 = zext i1 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1002, i8* %1003, align 1, !tbaa !2450
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 8
  %1006 = load i64, i64* %RCX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 4
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1005 to i64*
  store i64 %1006, i64* %1009
  %1010 = load i64, i64* %RAX
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 3
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  %1014 = load i32, i32* %1013
  %1015 = sext i32 %1014 to i64
  store i64 %1015, i64* %RAX, align 8, !tbaa !2428
  %1016 = load i64, i64* %RAX
  %1017 = mul i64 %1016, 8
  %1018 = add i64 %1017, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 8
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i64*
  %1022 = load i64, i64* %1021
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 40
  %1025 = load i64, i64* %RAX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 4
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1024 to i64*
  store i64 %1025, i64* %1028
  %1029 = load i64, i64* %PC
  %1030 = sub i64 %1029, 1051
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1030, i64* %1033, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 12
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 7
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i32*
  store i32 26, i32* %1038
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 12
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1040 to i32*
  %1044 = load i32, i32* %1043
  %1045 = zext i32 %1044 to i64
  store i64 %1045, i64* %RDI, align 8, !tbaa !2428
  %1046 = load i64, i64* %PC
  %1047 = sub i64 %1046, 1384
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 5
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 5
  store i64 %1051, i64* %PC
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1053 = load i64, i64* %1052, align 8, !tbaa !2428
  %1054 = add i64 %1053, -8
  %1055 = inttoptr i64 %1054 to i64*
  store i64 %1049, i64* %1055
  store i64 %1054, i64* %1052, align 8, !tbaa !2428
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1047, i64* %1056, align 8, !tbaa !2428
  %1057 = load i64, i64* %PC
  %1058 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1057, %struct.Memory* %MEMORY.0)
  %1059 = load i64, i64* %RBP
  %1060 = sub i64 %1059, 8
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 4
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1060 to i64*
  %1064 = load i64, i64* %1063
  store i64 %1064, i64* %RAX, align 8, !tbaa !2428
  %1065 = load i64, i64* %RAX
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 3
  store i64 %1067, i64* %PC
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1068 = load i64, i64* %RCX
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 4
  store i64 %1070, i64* %PC
  %1071 = add i64 4, %1068
  store i64 %1071, i64* %RCX, align 8, !tbaa !2428
  %1072 = icmp ult i64 %1071, %1068
  %1073 = icmp ult i64 %1071, 4
  %1074 = or i1 %1072, %1073
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1075, i8* %1076, align 1, !tbaa !2432
  %1077 = trunc i64 %1071 to i32
  %1078 = and i32 %1077, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = xor i64 4, %1068
  %1085 = xor i64 %1084, %1071
  %1086 = lshr i64 %1085, 4
  %1087 = trunc i64 %1086 to i8
  %1088 = and i8 %1087, 1
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1088, i8* %1089, align 1, !tbaa !2447
  %1090 = icmp eq i64 %1071, 0
  %1091 = zext i1 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1091, i8* %1092, align 1, !tbaa !2448
  %1093 = lshr i64 %1071, 63
  %1094 = trunc i64 %1093 to i8
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1094, i8* %1095, align 1, !tbaa !2449
  %1096 = lshr i64 %1068, 63
  %1097 = xor i64 %1093, %1096
  %1098 = add nuw nsw i64 %1097, %1093
  %1099 = icmp eq i64 %1098, 2
  %1100 = zext i1 %1099 to i8
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1100, i8* %1101, align 1, !tbaa !2450
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 8
  %1104 = load i64, i64* %RCX
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 4
  store i64 %1106, i64* %PC
  %1107 = inttoptr i64 %1103 to i64*
  store i64 %1104, i64* %1107
  %1108 = load i64, i64* %RAX
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = sext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = load i64, i64* %RAX
  %1115 = mul i64 %1114, 8
  %1116 = add i64 %1115, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 8
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i64*
  %1120 = load i64, i64* %1119
  store i64 %1120, i64* %RAX, align 8, !tbaa !2428
  %1121 = load i64, i64* %RBP
  %1122 = sub i64 %1121, 40
  %1123 = load i64, i64* %RAX
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 4
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1122 to i64*
  store i64 %1123, i64* %1126
  %1127 = load i64, i64* %PC
  %1128 = sub i64 %1127, 1301
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 5
  store i64 %1130, i64* %PC
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1128, i64* %1131, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 12
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 7
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i32*
  store i32 5, i32* %1136
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 12
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1138 to i32*
  %1142 = load i32, i32* %1141
  %1143 = zext i32 %1142 to i64
  store i64 %1143, i64* %RDI, align 8, !tbaa !2428
  %1144 = load i64, i64* %PC
  %1145 = sub i64 %1144, 334
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 5
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 5
  store i64 %1149, i64* %PC
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1151 = load i64, i64* %1150, align 8, !tbaa !2428
  %1152 = add i64 %1151, -8
  %1153 = inttoptr i64 %1152 to i64*
  store i64 %1147, i64* %1153
  store i64 %1152, i64* %1150, align 8, !tbaa !2428
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1145, i64* %1154, align 8, !tbaa !2428
  %1155 = load i64, i64* %PC
  %1156 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1155, %struct.Memory* %MEMORY.0)
  %1157 = load i64, i64* %RBP
  %1158 = sub i64 %1157, 8
  %1159 = load i64, i64* %PC
  %1160 = add i64 %1159, 4
  store i64 %1160, i64* %PC
  %1161 = inttoptr i64 %1158 to i64*
  %1162 = load i64, i64* %1161
  store i64 %1162, i64* %RAX, align 8, !tbaa !2428
  %1163 = load i64, i64* %RAX
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 3
  store i64 %1165, i64* %PC
  store i64 %1163, i64* %RCX, align 8, !tbaa !2428
  %1166 = load i64, i64* %RCX
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %PC
  %1169 = add i64 4, %1166
  store i64 %1169, i64* %RCX, align 8, !tbaa !2428
  %1170 = icmp ult i64 %1169, %1166
  %1171 = icmp ult i64 %1169, 4
  %1172 = or i1 %1170, %1171
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1173, i8* %1174, align 1, !tbaa !2432
  %1175 = trunc i64 %1169 to i32
  %1176 = and i32 %1175, 255
  %1177 = call i32 @llvm.ctpop.i32(i32 %1176) #16
  %1178 = trunc i32 %1177 to i8
  %1179 = and i8 %1178, 1
  %1180 = xor i8 %1179, 1
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1180, i8* %1181, align 1, !tbaa !2446
  %1182 = xor i64 4, %1166
  %1183 = xor i64 %1182, %1169
  %1184 = lshr i64 %1183, 4
  %1185 = trunc i64 %1184 to i8
  %1186 = and i8 %1185, 1
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1186, i8* %1187, align 1, !tbaa !2447
  %1188 = icmp eq i64 %1169, 0
  %1189 = zext i1 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1189, i8* %1190, align 1, !tbaa !2448
  %1191 = lshr i64 %1169, 63
  %1192 = trunc i64 %1191 to i8
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1192, i8* %1193, align 1, !tbaa !2449
  %1194 = lshr i64 %1166, 63
  %1195 = xor i64 %1191, %1194
  %1196 = add nuw nsw i64 %1195, %1191
  %1197 = icmp eq i64 %1196, 2
  %1198 = zext i1 %1197 to i8
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1198, i8* %1199, align 1, !tbaa !2450
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 8
  %1202 = load i64, i64* %RCX
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1201 to i64*
  store i64 %1202, i64* %1205
  %1206 = load i64, i64* %RAX
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 3
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = sext i32 %1210 to i64
  store i64 %1211, i64* %RAX, align 8, !tbaa !2428
  %1212 = load i64, i64* %RAX
  %1213 = mul i64 %1212, 8
  %1214 = add i64 %1213, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 8
  store i64 %1216, i64* %PC
  %1217 = inttoptr i64 %1214 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %RAX, align 8, !tbaa !2428
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 40
  %1221 = load i64, i64* %RAX
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 4
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1220 to i64*
  store i64 %1221, i64* %1224
  %1225 = load i64, i64* %PC
  %1226 = sub i64 %1225, 251
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 5
  store i64 %1228, i64* %PC
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1226, i64* %1229, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 12
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 7
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i32*
  store i32 31, i32* %1234
  %1235 = load i64, i64* %PC
  %1236 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %1235, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1236

block_40072e:                                     ; preds = %block_400566
  %1237 = load i64, i64* %RBP
  %1238 = sub i64 %1237, 12
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 7
  store i64 %1240, i64* %PC
  %1241 = inttoptr i64 %1238 to i32*
  store i32 10, i32* %1241
  %1242 = load i64, i64* %RBP
  %1243 = sub i64 %1242, 12
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 3
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i32*
  %1247 = load i32, i32* %1246
  %1248 = zext i32 %1247 to i64
  store i64 %1248, i64* %RDI, align 8, !tbaa !2428
  %1249 = load i64, i64* %PC
  %1250 = sub i64 %1249, 584
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 5
  store i64 %1254, i64* %PC
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1256 = load i64, i64* %1255, align 8, !tbaa !2428
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1252, i64* %1258
  store i64 %1257, i64* %1255, align 8, !tbaa !2428
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1250, i64* %1259, align 8, !tbaa !2428
  %1260 = load i64, i64* %PC
  %1261 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1260, %struct.Memory* %MEMORY.0)
  %1262 = load i64, i64* %RBP
  %1263 = sub i64 %1262, 8
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 4
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1263 to i64*
  %1267 = load i64, i64* %1266
  store i64 %1267, i64* %RAX, align 8, !tbaa !2428
  %1268 = load i64, i64* %RAX
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 3
  store i64 %1270, i64* %PC
  store i64 %1268, i64* %RCX, align 8, !tbaa !2428
  %1271 = load i64, i64* %RCX
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 4
  store i64 %1273, i64* %PC
  %1274 = add i64 4, %1271
  store i64 %1274, i64* %RCX, align 8, !tbaa !2428
  %1275 = icmp ult i64 %1274, %1271
  %1276 = icmp ult i64 %1274, 4
  %1277 = or i1 %1275, %1276
  %1278 = zext i1 %1277 to i8
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1278, i8* %1279, align 1, !tbaa !2432
  %1280 = trunc i64 %1274 to i32
  %1281 = and i32 %1280, 255
  %1282 = call i32 @llvm.ctpop.i32(i32 %1281) #16
  %1283 = trunc i32 %1282 to i8
  %1284 = and i8 %1283, 1
  %1285 = xor i8 %1284, 1
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1285, i8* %1286, align 1, !tbaa !2446
  %1287 = xor i64 4, %1271
  %1288 = xor i64 %1287, %1274
  %1289 = lshr i64 %1288, 4
  %1290 = trunc i64 %1289 to i8
  %1291 = and i8 %1290, 1
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1291, i8* %1292, align 1, !tbaa !2447
  %1293 = icmp eq i64 %1274, 0
  %1294 = zext i1 %1293 to i8
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1294, i8* %1295, align 1, !tbaa !2448
  %1296 = lshr i64 %1274, 63
  %1297 = trunc i64 %1296 to i8
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1297, i8* %1298, align 1, !tbaa !2449
  %1299 = lshr i64 %1271, 63
  %1300 = xor i64 %1296, %1299
  %1301 = add nuw nsw i64 %1300, %1296
  %1302 = icmp eq i64 %1301, 2
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1303, i8* %1304, align 1, !tbaa !2450
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 8
  %1307 = load i64, i64* %RCX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1306 to i64*
  store i64 %1307, i64* %1310
  %1311 = load i64, i64* %RAX
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  %1315 = load i32, i32* %1314
  %1316 = sext i32 %1315 to i64
  store i64 %1316, i64* %RAX, align 8, !tbaa !2428
  %1317 = load i64, i64* %RAX
  %1318 = mul i64 %1317, 8
  %1319 = add i64 %1318, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 8
  store i64 %1321, i64* %PC
  %1322 = inttoptr i64 %1319 to i64*
  %1323 = load i64, i64* %1322
  store i64 %1323, i64* %RAX, align 8, !tbaa !2428
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 40
  %1326 = load i64, i64* %RAX
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC
  %1329 = inttoptr i64 %1325 to i64*
  store i64 %1326, i64* %1329
  %1330 = load i64, i64* %PC
  %1331 = sub i64 %1330, 501
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 5
  store i64 %1333, i64* %PC
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1331, i64* %1334, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1335 = load i64, i64* %RBP
  %1336 = sub i64 %1335, 12
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 7
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i32*
  store i32 0, i32* %1339
  %1340 = load i64, i64* %RSP
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 4
  store i64 %1342, i64* %PC
  %1343 = add i64 48, %1340
  store i64 %1343, i64* %RSP, align 8, !tbaa !2428
  %1344 = icmp ult i64 %1343, %1340
  %1345 = icmp ult i64 %1343, 48
  %1346 = or i1 %1344, %1345
  %1347 = zext i1 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1347, i8* %1348, align 1, !tbaa !2432
  %1349 = trunc i64 %1343 to i32
  %1350 = and i32 %1349, 255
  %1351 = call i32 @llvm.ctpop.i32(i32 %1350) #16
  %1352 = trunc i32 %1351 to i8
  %1353 = and i8 %1352, 1
  %1354 = xor i8 %1353, 1
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1354, i8* %1355, align 1, !tbaa !2446
  %1356 = xor i64 48, %1340
  %1357 = xor i64 %1356, %1343
  %1358 = lshr i64 %1357, 4
  %1359 = trunc i64 %1358 to i8
  %1360 = and i8 %1359, 1
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1360, i8* %1361, align 1, !tbaa !2447
  %1362 = icmp eq i64 %1343, 0
  %1363 = zext i1 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1363, i8* %1364, align 1, !tbaa !2448
  %1365 = lshr i64 %1343, 63
  %1366 = trunc i64 %1365 to i8
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1366, i8* %1367, align 1, !tbaa !2449
  %1368 = lshr i64 %1340, 63
  %1369 = xor i64 %1365, %1368
  %1370 = add nuw nsw i64 %1369, %1365
  %1371 = icmp eq i64 %1370, 2
  %1372 = zext i1 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1372, i8* %1373, align 1, !tbaa !2450
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 1
  store i64 %1375, i64* %PC
  %1376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1377 = load i64, i64* %1376, align 8, !tbaa !2428
  %1378 = add i64 %1377, 8
  %1379 = inttoptr i64 %1377 to i64*
  %1380 = load i64, i64* %1379
  store i64 %1380, i64* %RBP, align 8, !tbaa !2428
  store i64 %1378, i64* %1376, align 8, !tbaa !2428
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 1
  store i64 %1382, i64* %PC
  %1383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1385 = load i64, i64* %1384, align 8, !tbaa !2428
  %1386 = inttoptr i64 %1385 to i64*
  %1387 = load i64, i64* %1386
  store i64 %1387, i64* %1383, align 8, !tbaa !2428
  %1388 = add i64 %1385, 8
  store i64 %1388, i64* %1384, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400828:                                     ; preds = %block_400566
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 12
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 7
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i32*
  store i32 15, i32* %1393
  %1394 = load i64, i64* %RBP
  %1395 = sub i64 %1394, 12
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  %1398 = inttoptr i64 %1395 to i32*
  %1399 = load i32, i32* %1398
  %1400 = zext i32 %1399 to i64
  store i64 %1400, i64* %RDI, align 8, !tbaa !2428
  %1401 = load i64, i64* %PC
  %1402 = sub i64 %1401, 834
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 5
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 5
  store i64 %1406, i64* %PC
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1408 = load i64, i64* %1407, align 8, !tbaa !2428
  %1409 = add i64 %1408, -8
  %1410 = inttoptr i64 %1409 to i64*
  store i64 %1404, i64* %1410
  store i64 %1409, i64* %1407, align 8, !tbaa !2428
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1402, i64* %1411, align 8, !tbaa !2428
  %1412 = load i64, i64* %PC
  %1413 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1412, %struct.Memory* %MEMORY.0)
  %1414 = load i64, i64* %RBP
  %1415 = sub i64 %1414, 8
  %1416 = load i64, i64* %PC
  %1417 = add i64 %1416, 4
  store i64 %1417, i64* %PC
  %1418 = inttoptr i64 %1415 to i64*
  %1419 = load i64, i64* %1418
  store i64 %1419, i64* %RAX, align 8, !tbaa !2428
  %1420 = load i64, i64* %RAX
  %1421 = load i64, i64* %PC
  %1422 = add i64 %1421, 3
  store i64 %1422, i64* %PC
  store i64 %1420, i64* %RCX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RCX
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 4
  store i64 %1425, i64* %PC
  %1426 = add i64 4, %1423
  store i64 %1426, i64* %RCX, align 8, !tbaa !2428
  %1427 = icmp ult i64 %1426, %1423
  %1428 = icmp ult i64 %1426, 4
  %1429 = or i1 %1427, %1428
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1430, i8* %1431, align 1, !tbaa !2432
  %1432 = trunc i64 %1426 to i32
  %1433 = and i32 %1432, 255
  %1434 = call i32 @llvm.ctpop.i32(i32 %1433) #16
  %1435 = trunc i32 %1434 to i8
  %1436 = and i8 %1435, 1
  %1437 = xor i8 %1436, 1
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1437, i8* %1438, align 1, !tbaa !2446
  %1439 = xor i64 4, %1423
  %1440 = xor i64 %1439, %1426
  %1441 = lshr i64 %1440, 4
  %1442 = trunc i64 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1443, i8* %1444, align 1, !tbaa !2447
  %1445 = icmp eq i64 %1426, 0
  %1446 = zext i1 %1445 to i8
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1446, i8* %1447, align 1, !tbaa !2448
  %1448 = lshr i64 %1426, 63
  %1449 = trunc i64 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1449, i8* %1450, align 1, !tbaa !2449
  %1451 = lshr i64 %1423, 63
  %1452 = xor i64 %1448, %1451
  %1453 = add nuw nsw i64 %1452, %1448
  %1454 = icmp eq i64 %1453, 2
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1455, i8* %1456, align 1, !tbaa !2450
  %1457 = load i64, i64* %RBP
  %1458 = sub i64 %1457, 8
  %1459 = load i64, i64* %RCX
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 4
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1458 to i64*
  store i64 %1459, i64* %1462
  %1463 = load i64, i64* %RAX
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 3
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1463 to i32*
  %1467 = load i32, i32* %1466
  %1468 = sext i32 %1467 to i64
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = load i64, i64* %RAX
  %1470 = mul i64 %1469, 8
  %1471 = add i64 %1470, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 8
  store i64 %1473, i64* %PC
  %1474 = inttoptr i64 %1471 to i64*
  %1475 = load i64, i64* %1474
  store i64 %1475, i64* %RAX, align 8, !tbaa !2428
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 40
  %1478 = load i64, i64* %RAX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1477 to i64*
  store i64 %1478, i64* %1481
  %1482 = load i64, i64* %PC
  %1483 = sub i64 %1482, 751
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 5
  store i64 %1485, i64* %PC
  %1486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1483, i64* %1486, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1487 = load i64, i64* %RBP
  %1488 = sub i64 %1487, 12
  %1489 = load i64, i64* %PC
  %1490 = add i64 %1489, 7
  store i64 %1490, i64* %PC
  %1491 = inttoptr i64 %1488 to i32*
  store i32 18, i32* %1491
  %1492 = load i64, i64* %PC
  %1493 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1492, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1493

block_400922:                                     ; preds = %block_400566
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 12
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 7
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i32*
  store i32 20, i32* %1498
  %1499 = load i64, i64* %RBP
  %1500 = sub i64 %1499, 12
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1500 to i32*
  %1504 = load i32, i32* %1503
  %1505 = zext i32 %1504 to i64
  store i64 %1505, i64* %RDI, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = sub i64 %1506, 1084
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 5
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1513 = load i64, i64* %1512, align 8, !tbaa !2428
  %1514 = add i64 %1513, -8
  %1515 = inttoptr i64 %1514 to i64*
  store i64 %1509, i64* %1515
  store i64 %1514, i64* %1512, align 8, !tbaa !2428
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1507, i64* %1516, align 8, !tbaa !2428
  %1517 = load i64, i64* %PC
  %1518 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1517, %struct.Memory* %MEMORY.0)
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 8
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to i64*
  %1524 = load i64, i64* %1523
  store i64 %1524, i64* %RAX, align 8, !tbaa !2428
  %1525 = load i64, i64* %RAX
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 3
  store i64 %1527, i64* %PC
  store i64 %1525, i64* %RCX, align 8, !tbaa !2428
  %1528 = load i64, i64* %RCX
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 4
  store i64 %1530, i64* %PC
  %1531 = add i64 4, %1528
  store i64 %1531, i64* %RCX, align 8, !tbaa !2428
  %1532 = icmp ult i64 %1531, %1528
  %1533 = icmp ult i64 %1531, 4
  %1534 = or i1 %1532, %1533
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1535, i8* %1536, align 1, !tbaa !2432
  %1537 = trunc i64 %1531 to i32
  %1538 = and i32 %1537, 255
  %1539 = call i32 @llvm.ctpop.i32(i32 %1538) #16
  %1540 = trunc i32 %1539 to i8
  %1541 = and i8 %1540, 1
  %1542 = xor i8 %1541, 1
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1542, i8* %1543, align 1, !tbaa !2446
  %1544 = xor i64 4, %1528
  %1545 = xor i64 %1544, %1531
  %1546 = lshr i64 %1545, 4
  %1547 = trunc i64 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1548, i8* %1549, align 1, !tbaa !2447
  %1550 = icmp eq i64 %1531, 0
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1551, i8* %1552, align 1, !tbaa !2448
  %1553 = lshr i64 %1531, 63
  %1554 = trunc i64 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1554, i8* %1555, align 1, !tbaa !2449
  %1556 = lshr i64 %1528, 63
  %1557 = xor i64 %1553, %1556
  %1558 = add nuw nsw i64 %1557, %1553
  %1559 = icmp eq i64 %1558, 2
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1560, i8* %1561, align 1, !tbaa !2450
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 8
  %1564 = load i64, i64* %RCX
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 4
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1563 to i64*
  store i64 %1564, i64* %1567
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = sext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i64, i64* %RAX
  %1575 = mul i64 %1574, 8
  %1576 = add i64 %1575, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 8
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %RAX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1582 to i64*
  store i64 %1583, i64* %1586
  %1587 = load i64, i64* %PC
  %1588 = sub i64 %1587, 1001
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1588, i64* %1591, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 12
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 7
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i32*
  store i32 23, i32* %1596
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = sub i64 %1604, 1234
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 5
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1611 = load i64, i64* %1610, align 8, !tbaa !2428
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1607, i64* %1613
  store i64 %1612, i64* %1610, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1605, i64* %1614, align 8, !tbaa !2428
  %1615 = load i64, i64* %PC
  %1616 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1615, %struct.Memory* %MEMORY.0)
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 8
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RAX
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 3
  store i64 %1625, i64* %PC
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1626 = load i64, i64* %RCX
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 4
  store i64 %1628, i64* %PC
  %1629 = add i64 4, %1626
  store i64 %1629, i64* %RCX, align 8, !tbaa !2428
  %1630 = icmp ult i64 %1629, %1626
  %1631 = icmp ult i64 %1629, 4
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1634, align 1, !tbaa !2432
  %1635 = trunc i64 %1629 to i32
  %1636 = and i32 %1635, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #16
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 4, %1626
  %1643 = xor i64 %1642, %1629
  %1644 = lshr i64 %1643, 4
  %1645 = trunc i64 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1646, i8* %1647, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1629, 0
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = lshr i64 %1629, 63
  %1652 = trunc i64 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1652, i8* %1653, align 1, !tbaa !2449
  %1654 = lshr i64 %1626, 63
  %1655 = xor i64 %1651, %1654
  %1656 = add nuw nsw i64 %1655, %1651
  %1657 = icmp eq i64 %1656, 2
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 8
  %1662 = load i64, i64* %RCX
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1661 to i64*
  store i64 %1662, i64* %1665
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RAX
  %1673 = mul i64 %1672, 8
  %1674 = add i64 %1673, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 8
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %PC
  %1686 = sub i64 %1685, 1151
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1686, i64* %1689, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 12
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 2, i32* %1694
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDI, align 8, !tbaa !2428
  %1702 = load i64, i64* %PC
  %1703 = sub i64 %1702, 184
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  store i64 %1707, i64* %PC
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1709 = load i64, i64* %1708, align 8, !tbaa !2428
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1705, i64* %1711
  store i64 %1710, i64* %1708, align 8, !tbaa !2428
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1703, i64* %1712, align 8, !tbaa !2428
  %1713 = load i64, i64* %PC
  %1714 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1713, %struct.Memory* %MEMORY.0)
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 8
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 4
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = load i64, i64* %RAX
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  store i64 %1721, i64* %RCX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RCX
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 4
  store i64 %1726, i64* %PC
  %1727 = add i64 4, %1724
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = icmp ult i64 %1727, %1724
  %1729 = icmp ult i64 %1727, 4
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1731, i8* %1732, align 1, !tbaa !2432
  %1733 = trunc i64 %1727 to i32
  %1734 = and i32 %1733, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #16
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2446
  %1740 = xor i64 4, %1724
  %1741 = xor i64 %1740, %1727
  %1742 = lshr i64 %1741, 4
  %1743 = trunc i64 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1744, i8* %1745, align 1, !tbaa !2447
  %1746 = icmp eq i64 %1727, 0
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1747, i8* %1748, align 1, !tbaa !2448
  %1749 = lshr i64 %1727, 63
  %1750 = trunc i64 %1749 to i8
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1750, i8* %1751, align 1, !tbaa !2449
  %1752 = lshr i64 %1724, 63
  %1753 = xor i64 %1749, %1752
  %1754 = add nuw nsw i64 %1753, %1749
  %1755 = icmp eq i64 %1754, 2
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1756, i8* %1757, align 1, !tbaa !2450
  %1758 = load i64, i64* %RBP
  %1759 = sub i64 %1758, 8
  %1760 = load i64, i64* %RCX
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1759 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %RAX
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 3
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RAX
  %1771 = mul i64 %1770, 8
  %1772 = add i64 %1771, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 40
  %1779 = load i64, i64* %RAX
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = inttoptr i64 %1778 to i64*
  store i64 %1779, i64* %1782
  %1783 = load i64, i64* %PC
  %1784 = sub i64 %1783, 101
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1784, i64* %1787, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 7
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i32*
  store i32 25, i32* %1792
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %PC
  %1801 = sub i64 %1800, 1334
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 5
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 5
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1807 = load i64, i64* %1806, align 8, !tbaa !2428
  %1808 = add i64 %1807, -8
  %1809 = inttoptr i64 %1808 to i64*
  store i64 %1803, i64* %1809
  store i64 %1808, i64* %1806, align 8, !tbaa !2428
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1801, i64* %1810, align 8, !tbaa !2428
  %1811 = load i64, i64* %PC
  %1812 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1811, %struct.Memory* %MEMORY.0)
  %1813 = load i64, i64* %RBP
  %1814 = sub i64 %1813, 8
  %1815 = load i64, i64* %PC
  %1816 = add i64 %1815, 4
  store i64 %1816, i64* %PC
  %1817 = inttoptr i64 %1814 to i64*
  %1818 = load i64, i64* %1817
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  store i64 %1819, i64* %RCX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RCX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = add i64 4, %1822
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i64 %1825, %1822
  %1827 = icmp ult i64 %1825, 4
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2432
  %1831 = trunc i64 %1825 to i32
  %1832 = and i32 %1831, 255
  %1833 = call i32 @llvm.ctpop.i32(i32 %1832) #16
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1836, i8* %1837, align 1, !tbaa !2446
  %1838 = xor i64 4, %1822
  %1839 = xor i64 %1838, %1825
  %1840 = lshr i64 %1839, 4
  %1841 = trunc i64 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = icmp eq i64 %1825, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1825, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = lshr i64 %1822, 63
  %1851 = xor i64 %1847, %1850
  %1852 = add nuw nsw i64 %1851, %1847
  %1853 = icmp eq i64 %1852, 2
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = sext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RAX
  %1869 = mul i64 %1868, 8
  %1870 = add i64 %1869, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 8
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i64*
  %1874 = load i64, i64* %1873
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RBP
  %1876 = sub i64 %1875, 40
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1876 to i64*
  store i64 %1877, i64* %1880
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 1251
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  store i64 %1884, i64* %PC
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1885, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 12
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  store i32 28, i32* %1890
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 12
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RDI, align 8, !tbaa !2428
  %1898 = load i64, i64* %PC
  %1899 = sub i64 %1898, 1484
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 5
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1905 = load i64, i64* %1904, align 8, !tbaa !2428
  %1906 = add i64 %1905, -8
  %1907 = inttoptr i64 %1906 to i64*
  store i64 %1901, i64* %1907
  store i64 %1906, i64* %1904, align 8, !tbaa !2428
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1908, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1909, %struct.Memory* %MEMORY.0)
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 8
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i64*
  %1916 = load i64, i64* %1915
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1920 = load i64, i64* %RCX
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 4
  store i64 %1922, i64* %PC
  %1923 = add i64 4, %1920
  store i64 %1923, i64* %RCX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1920
  %1925 = icmp ult i64 %1923, 4
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i64 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = xor i64 4, %1920
  %1937 = xor i64 %1936, %1923
  %1938 = lshr i64 %1937, 4
  %1939 = trunc i64 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1940, i8* %1941, align 1, !tbaa !2447
  %1942 = icmp eq i64 %1923, 0
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1943, i8* %1944, align 1, !tbaa !2448
  %1945 = lshr i64 %1923, 63
  %1946 = trunc i64 %1945 to i8
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1946, i8* %1947, align 1, !tbaa !2449
  %1948 = lshr i64 %1920, 63
  %1949 = xor i64 %1945, %1948
  %1950 = add nuw nsw i64 %1949, %1945
  %1951 = icmp eq i64 %1950, 2
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1952, i8* %1953, align 1, !tbaa !2450
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 8
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 4
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RAX
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 3
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  %1964 = load i32, i32* %1963
  %1965 = sext i32 %1964 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 8
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 40
  %1975 = load i64, i64* %RAX
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 4
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1974 to i64*
  store i64 %1975, i64* %1978
  %1979 = load i64, i64* %PC
  %1980 = sub i64 %1979, 1401
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1980, i64* %1983, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 12
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 7
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i32*
  store i32 7, i32* %1988
  %1989 = load i64, i64* %RBP
  %1990 = sub i64 %1989, 12
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  %1993 = inttoptr i64 %1990 to i32*
  %1994 = load i32, i32* %1993
  %1995 = zext i32 %1994 to i64
  store i64 %1995, i64* %RDI, align 8, !tbaa !2428
  %1996 = load i64, i64* %PC
  %1997 = sub i64 %1996, 434
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 5
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 5
  store i64 %2001, i64* %PC
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2003 = load i64, i64* %2002, align 8, !tbaa !2428
  %2004 = add i64 %2003, -8
  %2005 = inttoptr i64 %2004 to i64*
  store i64 %1999, i64* %2005
  store i64 %2004, i64* %2002, align 8, !tbaa !2428
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1997, i64* %2006, align 8, !tbaa !2428
  %2007 = load i64, i64* %PC
  %2008 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2007, %struct.Memory* %MEMORY.0)
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 8
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 4
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2010 to i64*
  %2014 = load i64, i64* %2013
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %2015 = load i64, i64* %RAX
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 3
  store i64 %2017, i64* %PC
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2018 = load i64, i64* %RCX
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 4
  store i64 %2020, i64* %PC
  %2021 = add i64 4, %2018
  store i64 %2021, i64* %RCX, align 8, !tbaa !2428
  %2022 = icmp ult i64 %2021, %2018
  %2023 = icmp ult i64 %2021, 4
  %2024 = or i1 %2022, %2023
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2025, i8* %2026, align 1, !tbaa !2432
  %2027 = trunc i64 %2021 to i32
  %2028 = and i32 %2027, 255
  %2029 = call i32 @llvm.ctpop.i32(i32 %2028) #16
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = xor i8 %2031, 1
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2032, i8* %2033, align 1, !tbaa !2446
  %2034 = xor i64 4, %2018
  %2035 = xor i64 %2034, %2021
  %2036 = lshr i64 %2035, 4
  %2037 = trunc i64 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2038, i8* %2039, align 1, !tbaa !2447
  %2040 = icmp eq i64 %2021, 0
  %2041 = zext i1 %2040 to i8
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2041, i8* %2042, align 1, !tbaa !2448
  %2043 = lshr i64 %2021, 63
  %2044 = trunc i64 %2043 to i8
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2044, i8* %2045, align 1, !tbaa !2449
  %2046 = lshr i64 %2018, 63
  %2047 = xor i64 %2043, %2046
  %2048 = add nuw nsw i64 %2047, %2043
  %2049 = icmp eq i64 %2048, 2
  %2050 = zext i1 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2050, i8* %2051, align 1, !tbaa !2450
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 8
  %2054 = load i64, i64* %RCX
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 4
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2053 to i64*
  store i64 %2054, i64* %2057
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i32*
  %2062 = load i32, i32* %2061
  %2063 = sext i32 %2062 to i64
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RAX
  %2065 = mul i64 %2064, 8
  %2066 = add i64 %2065, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 8
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2066 to i64*
  %2070 = load i64, i64* %2069
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 40
  %2073 = load i64, i64* %RAX
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 4
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2072 to i64*
  store i64 %2073, i64* %2076
  %2077 = load i64, i64* %PC
  %2078 = sub i64 %2077, 351
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 5
  store i64 %2080, i64* %PC
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2078, i64* %2081, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2082 = load i64, i64* %RBP
  %2083 = sub i64 %2082, 12
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 7
  store i64 %2085, i64* %PC
  %2086 = inttoptr i64 %2083 to i32*
  store i32 30, i32* %2086
  %2087 = load i64, i64* %RBP
  %2088 = sub i64 %2087, 12
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 3
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to i32*
  %2092 = load i32, i32* %2091
  %2093 = zext i32 %2092 to i64
  store i64 %2093, i64* %RDI, align 8, !tbaa !2428
  %2094 = load i64, i64* %PC
  %2095 = sub i64 %2094, 1584
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 5
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 5
  store i64 %2099, i64* %PC
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2101 = load i64, i64* %2100, align 8, !tbaa !2428
  %2102 = add i64 %2101, -8
  %2103 = inttoptr i64 %2102 to i64*
  store i64 %2097, i64* %2103
  store i64 %2102, i64* %2100, align 8, !tbaa !2428
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2095, i64* %2104, align 8, !tbaa !2428
  %2105 = load i64, i64* %PC
  %2106 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2105, %struct.Memory* %MEMORY.0)
  %2107 = load i64, i64* %RBP
  %2108 = sub i64 %2107, 8
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 4
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i64*
  %2112 = load i64, i64* %2111
  store i64 %2112, i64* %RAX, align 8, !tbaa !2428
  %2113 = load i64, i64* %RAX
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  store i64 %2113, i64* %RCX, align 8, !tbaa !2428
  %2116 = load i64, i64* %RCX
  %2117 = load i64, i64* %PC
  %2118 = add i64 %2117, 4
  store i64 %2118, i64* %PC
  %2119 = add i64 4, %2116
  store i64 %2119, i64* %RCX, align 8, !tbaa !2428
  %2120 = icmp ult i64 %2119, %2116
  %2121 = icmp ult i64 %2119, 4
  %2122 = or i1 %2120, %2121
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2123, i8* %2124, align 1, !tbaa !2432
  %2125 = trunc i64 %2119 to i32
  %2126 = and i32 %2125, 255
  %2127 = call i32 @llvm.ctpop.i32(i32 %2126) #16
  %2128 = trunc i32 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = xor i8 %2129, 1
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2130, i8* %2131, align 1, !tbaa !2446
  %2132 = xor i64 4, %2116
  %2133 = xor i64 %2132, %2119
  %2134 = lshr i64 %2133, 4
  %2135 = trunc i64 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2136, i8* %2137, align 1, !tbaa !2447
  %2138 = icmp eq i64 %2119, 0
  %2139 = zext i1 %2138 to i8
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2139, i8* %2140, align 1, !tbaa !2448
  %2141 = lshr i64 %2119, 63
  %2142 = trunc i64 %2141 to i8
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2142, i8* %2143, align 1, !tbaa !2449
  %2144 = lshr i64 %2116, 63
  %2145 = xor i64 %2141, %2144
  %2146 = add nuw nsw i64 %2145, %2141
  %2147 = icmp eq i64 %2146, 2
  %2148 = zext i1 %2147 to i8
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2148, i8* %2149, align 1, !tbaa !2450
  %2150 = load i64, i64* %RBP
  %2151 = sub i64 %2150, 8
  %2152 = load i64, i64* %RCX
  %2153 = load i64, i64* %PC
  %2154 = add i64 %2153, 4
  store i64 %2154, i64* %PC
  %2155 = inttoptr i64 %2151 to i64*
  store i64 %2152, i64* %2155
  %2156 = load i64, i64* %RAX
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 3
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2156 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RAX
  %2163 = mul i64 %2162, 8
  %2164 = add i64 %2163, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 8
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2164 to i64*
  %2168 = load i64, i64* %2167
  store i64 %2168, i64* %RAX, align 8, !tbaa !2428
  %2169 = load i64, i64* %RBP
  %2170 = sub i64 %2169, 40
  %2171 = load i64, i64* %RAX
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 4
  store i64 %2173, i64* %PC
  %2174 = inttoptr i64 %2170 to i64*
  store i64 %2171, i64* %2174
  %2175 = load i64, i64* %PC
  %2176 = sub i64 %2175, 1501
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 5
  store i64 %2178, i64* %PC
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2176, i64* %2179, align 8, !tbaa !2428
  br label %block_400566

block_400893:                                     ; preds = %block_40088c, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40088c ]
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 12
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 3
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i32*
  %2185 = load i32, i32* %2184
  %2186 = zext i32 %2185 to i64
  store i64 %2186, i64* %RDI, align 8, !tbaa !2428
  %2187 = load i64, i64* %PC
  %2188 = sub i64 %2187, 934
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2194 = load i64, i64* %2193, align 8, !tbaa !2428
  %2195 = add i64 %2194, -8
  %2196 = inttoptr i64 %2195 to i64*
  store i64 %2190, i64* %2196
  store i64 %2195, i64* %2193, align 8, !tbaa !2428
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2188, i64* %2197, align 8, !tbaa !2428
  %2198 = load i64, i64* %PC
  %2199 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2198, %struct.Memory* %MEMORY.1)
  %2200 = load i64, i64* %RBP
  %2201 = sub i64 %2200, 8
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 4
  store i64 %2203, i64* %PC
  %2204 = inttoptr i64 %2201 to i64*
  %2205 = load i64, i64* %2204
  store i64 %2205, i64* %RAX, align 8, !tbaa !2428
  %2206 = load i64, i64* %RAX
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 3
  store i64 %2208, i64* %PC
  store i64 %2206, i64* %RCX, align 8, !tbaa !2428
  %2209 = load i64, i64* %RCX
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 4
  store i64 %2211, i64* %PC
  %2212 = add i64 4, %2209
  store i64 %2212, i64* %RCX, align 8, !tbaa !2428
  %2213 = icmp ult i64 %2212, %2209
  %2214 = icmp ult i64 %2212, 4
  %2215 = or i1 %2213, %2214
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2216, i8* %2217, align 1, !tbaa !2432
  %2218 = trunc i64 %2212 to i32
  %2219 = and i32 %2218, 255
  %2220 = call i32 @llvm.ctpop.i32(i32 %2219) #16
  %2221 = trunc i32 %2220 to i8
  %2222 = and i8 %2221, 1
  %2223 = xor i8 %2222, 1
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2223, i8* %2224, align 1, !tbaa !2446
  %2225 = xor i64 4, %2209
  %2226 = xor i64 %2225, %2212
  %2227 = lshr i64 %2226, 4
  %2228 = trunc i64 %2227 to i8
  %2229 = and i8 %2228, 1
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2229, i8* %2230, align 1, !tbaa !2447
  %2231 = icmp eq i64 %2212, 0
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2232, i8* %2233, align 1, !tbaa !2448
  %2234 = lshr i64 %2212, 63
  %2235 = trunc i64 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2235, i8* %2236, align 1, !tbaa !2449
  %2237 = lshr i64 %2209, 63
  %2238 = xor i64 %2234, %2237
  %2239 = add nuw nsw i64 %2238, %2234
  %2240 = icmp eq i64 %2239, 2
  %2241 = zext i1 %2240 to i8
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2241, i8* %2242, align 1, !tbaa !2450
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 8
  %2245 = load i64, i64* %RCX
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 4
  store i64 %2247, i64* %PC
  %2248 = inttoptr i64 %2244 to i64*
  store i64 %2245, i64* %2248
  %2249 = load i64, i64* %RAX
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 3
  store i64 %2251, i64* %PC
  %2252 = inttoptr i64 %2249 to i32*
  %2253 = load i32, i32* %2252
  %2254 = sext i32 %2253 to i64
  store i64 %2254, i64* %RAX, align 8, !tbaa !2428
  %2255 = load i64, i64* %RAX
  %2256 = mul i64 %2255, 8
  %2257 = add i64 %2256, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 8
  store i64 %2259, i64* %PC
  %2260 = inttoptr i64 %2257 to i64*
  %2261 = load i64, i64* %2260
  store i64 %2261, i64* %RAX, align 8, !tbaa !2428
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 40
  %2264 = load i64, i64* %RAX
  %2265 = load i64, i64* %PC
  %2266 = add i64 %2265, 4
  store i64 %2266, i64* %PC
  %2267 = inttoptr i64 %2263 to i64*
  store i64 %2264, i64* %2267
  %2268 = load i64, i64* %PC
  %2269 = sub i64 %2268, 851
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2269, i64* %2272, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2273 = load i64, i64* %RBP
  %2274 = sub i64 %2273, 12
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 7
  store i64 %2276, i64* %PC
  %2277 = inttoptr i64 %2274 to i32*
  store i32 12, i32* %2277
  %2278 = load i64, i64* %RBP
  %2279 = sub i64 %2278, 12
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 3
  store i64 %2281, i64* %PC
  %2282 = inttoptr i64 %2279 to i32*
  %2283 = load i32, i32* %2282
  %2284 = zext i32 %2283 to i64
  store i64 %2284, i64* %RDI, align 8, !tbaa !2428
  %2285 = load i64, i64* %PC
  %2286 = sub i64 %2285, 684
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 5
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 5
  store i64 %2290, i64* %PC
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2292 = load i64, i64* %2291, align 8, !tbaa !2428
  %2293 = add i64 %2292, -8
  %2294 = inttoptr i64 %2293 to i64*
  store i64 %2288, i64* %2294
  store i64 %2293, i64* %2291, align 8, !tbaa !2428
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2286, i64* %2295, align 8, !tbaa !2428
  %2296 = load i64, i64* %PC
  %2297 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2296, %struct.Memory* %MEMORY.0)
  %2298 = load i64, i64* %RBP
  %2299 = sub i64 %2298, 8
  %2300 = load i64, i64* %PC
  %2301 = add i64 %2300, 4
  store i64 %2301, i64* %PC
  %2302 = inttoptr i64 %2299 to i64*
  %2303 = load i64, i64* %2302
  store i64 %2303, i64* %RAX, align 8, !tbaa !2428
  %2304 = load i64, i64* %RAX
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 3
  store i64 %2306, i64* %PC
  store i64 %2304, i64* %RCX, align 8, !tbaa !2428
  %2307 = load i64, i64* %RCX
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 4
  store i64 %2309, i64* %PC
  %2310 = add i64 4, %2307
  store i64 %2310, i64* %RCX, align 8, !tbaa !2428
  %2311 = icmp ult i64 %2310, %2307
  %2312 = icmp ult i64 %2310, 4
  %2313 = or i1 %2311, %2312
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2314, i8* %2315, align 1, !tbaa !2432
  %2316 = trunc i64 %2310 to i32
  %2317 = and i32 %2316, 255
  %2318 = call i32 @llvm.ctpop.i32(i32 %2317) #16
  %2319 = trunc i32 %2318 to i8
  %2320 = and i8 %2319, 1
  %2321 = xor i8 %2320, 1
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2321, i8* %2322, align 1, !tbaa !2446
  %2323 = xor i64 4, %2307
  %2324 = xor i64 %2323, %2310
  %2325 = lshr i64 %2324, 4
  %2326 = trunc i64 %2325 to i8
  %2327 = and i8 %2326, 1
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2327, i8* %2328, align 1, !tbaa !2447
  %2329 = icmp eq i64 %2310, 0
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2330, i8* %2331, align 1, !tbaa !2448
  %2332 = lshr i64 %2310, 63
  %2333 = trunc i64 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2333, i8* %2334, align 1, !tbaa !2449
  %2335 = lshr i64 %2307, 63
  %2336 = xor i64 %2332, %2335
  %2337 = add nuw nsw i64 %2336, %2332
  %2338 = icmp eq i64 %2337, 2
  %2339 = zext i1 %2338 to i8
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2339, i8* %2340, align 1, !tbaa !2450
  %2341 = load i64, i64* %RBP
  %2342 = sub i64 %2341, 8
  %2343 = load i64, i64* %RCX
  %2344 = load i64, i64* %PC
  %2345 = add i64 %2344, 4
  store i64 %2345, i64* %PC
  %2346 = inttoptr i64 %2342 to i64*
  store i64 %2343, i64* %2346
  %2347 = load i64, i64* %RAX
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 3
  store i64 %2349, i64* %PC
  %2350 = inttoptr i64 %2347 to i32*
  %2351 = load i32, i32* %2350
  %2352 = sext i32 %2351 to i64
  store i64 %2352, i64* %RAX, align 8, !tbaa !2428
  %2353 = load i64, i64* %RAX
  %2354 = mul i64 %2353, 8
  %2355 = add i64 %2354, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 8
  store i64 %2357, i64* %PC
  %2358 = inttoptr i64 %2355 to i64*
  %2359 = load i64, i64* %2358
  store i64 %2359, i64* %RAX, align 8, !tbaa !2428
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 40
  %2362 = load i64, i64* %RAX
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 4
  store i64 %2364, i64* %PC
  %2365 = inttoptr i64 %2361 to i64*
  store i64 %2362, i64* %2365
  %2366 = load i64, i64* %PC
  %2367 = sub i64 %2366, 601
  %2368 = load i64, i64* %PC
  %2369 = add i64 %2368, 5
  store i64 %2369, i64* %PC
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2367, i64* %2370, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2371 = load i64, i64* %RBP
  %2372 = sub i64 %2371, 12
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 7
  store i64 %2374, i64* %PC
  %2375 = inttoptr i64 %2372 to i32*
  store i32 17, i32* %2375
  br label %block_400893

block_400986:                                     ; preds = %block_400566
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 12
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 7
  store i64 %2379, i64* %PC
  %2380 = inttoptr i64 %2377 to i32*
  store i32 22, i32* %2380
  %2381 = load i64, i64* %PC
  %2382 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2381, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2382

block_400602:                                     ; preds = %block_400566
  %2383 = load i64, i64* %RBP
  %2384 = sub i64 %2383, 12
  %2385 = load i64, i64* %PC
  %2386 = add i64 %2385, 7
  store i64 %2386, i64* %PC
  %2387 = inttoptr i64 %2384 to i32*
  store i32 4, i32* %2387
  %2388 = load i64, i64* %PC
  %2389 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2388, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2389

block_400a80:                                     ; preds = %block_400566
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 12
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 7
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to i32*
  store i32 27, i32* %2394
  %2395 = load i64, i64* %PC
  %2396 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2395, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2396

; <label>:2397:                                   ; preds = %block_400566
  %2398 = load i64, i64* %PC
  %2399 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2398, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2399
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006d1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4006d1

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 1, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 134
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 51
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 6, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 384
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 301
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400ab2, %block_400a1c, %block_40059e, %block_4009b8, %block_400922, %block_400828, %block_40072e, %block_400634, %block_400a4e, %block_400954, %block_4005d0, %block_4006d1, %block_4009ea, %block_4008f0, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_40056c, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %843, %block_4006d1 ], [ %1707, %block_4009b8 ], [ %1609, %block_400922 ], [ %1504, %block_400828 ], [ %1805, %block_40059e ], [ %1149, %block_400a4e ], [ %1352, %block_40072e ], [ %1247, %block_400634 ], [ %1051, %block_400954 ], [ %358, %block_400ae4 ], [ %249, %block_400666 ], [ %53, %block_4007f6 ], [ %941, %block_4005d0 ], [ %456, %block_400760 ], [ %554, %block_40085a ], [ %652, %block_4008f0 ], [ %151, %block_40056c ], [ %750, %block_4009ea ], [ %1903, %block_400a1c ], [ %2001, %block_400ab2 ], [ %2099, %block_400698 ], [ %2197, %block_400b16 ], [ %2295, %block_400792 ], [ %2393, %block_40088c ]
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 40
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = load i64, i64* %RAX
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 2
  store i64 %331, i64* %PC
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %332, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  switch i64 %333, label %2488 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4197042, label %block_400ab2
    i64 4196892, label %block_400a1c
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4196092, label %block_4006fc
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195942, label %block_400666
    i64 4197092, label %block_400ae4
    i64 4196292, label %block_4007c4
    i64 4196692, label %block_400954
    i64 4195892, label %block_400634
    i64 4196142, label %block_40072e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196792, label %block_4009b8
  ]

block_400ae4:                                     ; preds = %block_400566
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 12
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 7
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  store i32 29, i32* %338
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 12
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 3
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i32*
  %344 = load i32, i32* %343
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = sub i64 %346, 1534
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  store i64 %351, i64* %PC
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %353 = load i64, i64* %352, align 8, !tbaa !2428
  %354 = add i64 %353, -8
  %355 = inttoptr i64 %354 to i64*
  store i64 %349, i64* %355
  store i64 %354, i64* %352, align 8, !tbaa !2428
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %347, i64* %356, align 8, !tbaa !2428
  %357 = load i64, i64* %PC
  %358 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %357, %struct.Memory* %MEMORY.0)
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 8
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 3
  store i64 %367, i64* %PC
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %368 = load i64, i64* %RCX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = add i64 4, %368
  store i64 %371, i64* %RCX, align 8, !tbaa !2428
  %372 = icmp ult i64 %371, %368
  %373 = icmp ult i64 %371, 4
  %374 = or i1 %372, %373
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %375, i8* %376, align 1, !tbaa !2432
  %377 = trunc i64 %371 to i32
  %378 = and i32 %377, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2446
  %384 = xor i64 4, %368
  %385 = xor i64 %384, %371
  %386 = lshr i64 %385, 4
  %387 = trunc i64 %386 to i8
  %388 = and i8 %387, 1
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %388, i8* %389, align 1, !tbaa !2447
  %390 = icmp eq i64 %371, 0
  %391 = zext i1 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %391, i8* %392, align 1, !tbaa !2448
  %393 = lshr i64 %371, 63
  %394 = trunc i64 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %394, i8* %395, align 1, !tbaa !2449
  %396 = lshr i64 %368, 63
  %397 = xor i64 %393, %396
  %398 = add nuw nsw i64 %397, %393
  %399 = icmp eq i64 %398, 2
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %400, i8* %401, align 1, !tbaa !2450
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 8
  %404 = load i64, i64* %RCX
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 4
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %403 to i64*
  store i64 %404, i64* %407
  %408 = load i64, i64* %RAX
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = sext i32 %412 to i64
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i64, i64* %RAX
  %415 = mul i64 %414, 8
  %416 = add i64 %415, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 8
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i64*
  %420 = load i64, i64* %419
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %RAX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %422 to i64*
  store i64 %423, i64* %426
  %427 = load i64, i64* %PC
  %428 = sub i64 %427, 1451
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 5
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %428, i64* %431, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 11, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 634
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 551
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 16, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 884
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 801
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 19, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 1034
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 951
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 24, i32* %730
  %731 = load i64, i64* %RBP
  %732 = sub i64 %731, 12
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 3
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %732 to i32*
  %736 = load i32, i32* %735
  %737 = zext i32 %736 to i64
  store i64 %737, i64* %RDI, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = sub i64 %738, 1284
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 5
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 5
  store i64 %743, i64* %PC
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %745 = load i64, i64* %744, align 8, !tbaa !2428
  %746 = add i64 %745, -8
  %747 = inttoptr i64 %746 to i64*
  store i64 %741, i64* %747
  store i64 %746, i64* %744, align 8, !tbaa !2428
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %739, i64* %748, align 8, !tbaa !2428
  %749 = load i64, i64* %PC
  %750 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %749, %struct.Memory* %MEMORY.0)
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 8
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RAX
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %760 = load i64, i64* %RCX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 4
  store i64 %762, i64* %PC
  %763 = add i64 4, %760
  store i64 %763, i64* %RCX, align 8, !tbaa !2428
  %764 = icmp ult i64 %763, %760
  %765 = icmp ult i64 %763, 4
  %766 = or i1 %764, %765
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %767, i8* %768, align 1, !tbaa !2432
  %769 = trunc i64 %763 to i32
  %770 = and i32 %769, 255
  %771 = call i32 @llvm.ctpop.i32(i32 %770) #16
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %774, i8* %775, align 1, !tbaa !2446
  %776 = xor i64 4, %760
  %777 = xor i64 %776, %763
  %778 = lshr i64 %777, 4
  %779 = trunc i64 %778 to i8
  %780 = and i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %780, i8* %781, align 1, !tbaa !2447
  %782 = icmp eq i64 %763, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2448
  %785 = lshr i64 %763, 63
  %786 = trunc i64 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2449
  %788 = lshr i64 %760, 63
  %789 = xor i64 %785, %788
  %790 = add nuw nsw i64 %789, %785
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 8
  %796 = load i64, i64* %RCX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %795 to i64*
  store i64 %796, i64* %799
  %800 = load i64, i64* %RAX
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %800 to i32*
  %804 = load i32, i32* %803
  %805 = sext i32 %804 to i64
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = mul i64 %806, 8
  %808 = add i64 %807, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 8
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 40
  %815 = load i64, i64* %RAX
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %814 to i64*
  store i64 %815, i64* %818
  %819 = load i64, i64* %PC
  %820 = sub i64 %819, 1201
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 5
  store i64 %822, i64* %PC
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %820, i64* %823, align 8, !tbaa !2428
  br label %block_400566

block_4006d1:                                     ; preds = %block_4006ca, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4006ca ]
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 12
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 3
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  %829 = load i32, i32* %828
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %RDI, align 8, !tbaa !2428
  %831 = load i64, i64* %PC
  %832 = sub i64 %831, 484
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 5
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %838 = load i64, i64* %837, align 8, !tbaa !2428
  %839 = add i64 %838, -8
  %840 = inttoptr i64 %839 to i64*
  store i64 %834, i64* %840
  store i64 %839, i64* %837, align 8, !tbaa !2428
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %832, i64* %841, align 8, !tbaa !2428
  %842 = load i64, i64* %PC
  %843 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %842, %struct.Memory* %MEMORY.1)
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 8
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %845 to i64*
  %849 = load i64, i64* %848
  store i64 %849, i64* %RAX, align 8, !tbaa !2428
  %850 = load i64, i64* %RAX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 3
  store i64 %852, i64* %PC
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %853 = load i64, i64* %RCX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 4
  store i64 %855, i64* %PC
  %856 = add i64 4, %853
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = icmp ult i64 %856, %853
  %858 = icmp ult i64 %856, 4
  %859 = or i1 %857, %858
  %860 = zext i1 %859 to i8
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %860, i8* %861, align 1, !tbaa !2432
  %862 = trunc i64 %856 to i32
  %863 = and i32 %862, 255
  %864 = call i32 @llvm.ctpop.i32(i32 %863) #16
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = xor i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %867, i8* %868, align 1, !tbaa !2446
  %869 = xor i64 4, %853
  %870 = xor i64 %869, %856
  %871 = lshr i64 %870, 4
  %872 = trunc i64 %871 to i8
  %873 = and i8 %872, 1
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %873, i8* %874, align 1, !tbaa !2447
  %875 = icmp eq i64 %856, 0
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %876, i8* %877, align 1, !tbaa !2448
  %878 = lshr i64 %856, 63
  %879 = trunc i64 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %879, i8* %880, align 1, !tbaa !2449
  %881 = lshr i64 %853, 63
  %882 = xor i64 %878, %881
  %883 = add nuw nsw i64 %882, %878
  %884 = icmp eq i64 %883, 2
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %885, i8* %886, align 1, !tbaa !2450
  %887 = load i64, i64* %RBP
  %888 = sub i64 %887, 8
  %889 = load i64, i64* %RCX
  %890 = load i64, i64* %PC
  %891 = add i64 %890, 4
  store i64 %891, i64* %PC
  %892 = inttoptr i64 %888 to i64*
  store i64 %889, i64* %892
  %893 = load i64, i64* %RAX
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896
  %898 = sext i32 %897 to i64
  store i64 %898, i64* %RAX, align 8, !tbaa !2428
  %899 = load i64, i64* %RAX
  %900 = mul i64 %899, 8
  %901 = add i64 %900, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 8
  store i64 %903, i64* %PC
  %904 = inttoptr i64 %901 to i64*
  %905 = load i64, i64* %904
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 40
  %908 = load i64, i64* %RAX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 4
  store i64 %910, i64* %PC
  %911 = inttoptr i64 %907 to i64*
  store i64 %908, i64* %911
  %912 = load i64, i64* %PC
  %913 = sub i64 %912, 401
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 5
  store i64 %915, i64* %PC
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %913, i64* %916, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 12
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 7
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %918 to i32*
  store i32 3, i32* %921
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 12
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 3
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i32*
  %927 = load i32, i32* %926
  %928 = zext i32 %927 to i64
  store i64 %928, i64* %RDI, align 8, !tbaa !2428
  %929 = load i64, i64* %PC
  %930 = sub i64 %929, 234
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 5
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 5
  store i64 %934, i64* %PC
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %936 = load i64, i64* %935, align 8, !tbaa !2428
  %937 = add i64 %936, -8
  %938 = inttoptr i64 %937 to i64*
  store i64 %932, i64* %938
  store i64 %937, i64* %935, align 8, !tbaa !2428
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %930, i64* %939, align 8, !tbaa !2428
  %940 = load i64, i64* %PC
  %941 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %940, %struct.Memory* %MEMORY.0)
  %942 = load i64, i64* %RBP
  %943 = sub i64 %942, 8
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to i64*
  %947 = load i64, i64* %946
  store i64 %947, i64* %RAX, align 8, !tbaa !2428
  %948 = load i64, i64* %RAX
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 3
  store i64 %950, i64* %PC
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %951 = load i64, i64* %RCX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = add i64 4, %951
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = icmp ult i64 %954, %951
  %956 = icmp ult i64 %954, 4
  %957 = or i1 %955, %956
  %958 = zext i1 %957 to i8
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %958, i8* %959, align 1, !tbaa !2432
  %960 = trunc i64 %954 to i32
  %961 = and i32 %960, 255
  %962 = call i32 @llvm.ctpop.i32(i32 %961) #16
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %965, i8* %966, align 1, !tbaa !2446
  %967 = xor i64 4, %951
  %968 = xor i64 %967, %954
  %969 = lshr i64 %968, 4
  %970 = trunc i64 %969 to i8
  %971 = and i8 %970, 1
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %971, i8* %972, align 1, !tbaa !2447
  %973 = icmp eq i64 %954, 0
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %974, i8* %975, align 1, !tbaa !2448
  %976 = lshr i64 %954, 63
  %977 = trunc i64 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %977, i8* %978, align 1, !tbaa !2449
  %979 = lshr i64 %951, 63
  %980 = xor i64 %976, %979
  %981 = add nuw nsw i64 %980, %976
  %982 = icmp eq i64 %981, 2
  %983 = zext i1 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %983, i8* %984, align 1, !tbaa !2450
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 8
  %987 = load i64, i64* %RCX
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 4
  store i64 %989, i64* %PC
  %990 = inttoptr i64 %986 to i64*
  store i64 %987, i64* %990
  %991 = load i64, i64* %RAX
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 3
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  %995 = load i32, i32* %994
  %996 = sext i32 %995 to i64
  store i64 %996, i64* %RAX, align 8, !tbaa !2428
  %997 = load i64, i64* %RAX
  %998 = mul i64 %997, 8
  %999 = add i64 %998, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 8
  store i64 %1001, i64* %PC
  %1002 = inttoptr i64 %999 to i64*
  %1003 = load i64, i64* %1002
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 40
  %1006 = load i64, i64* %RAX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 4
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1005 to i64*
  store i64 %1006, i64* %1009
  %1010 = load i64, i64* %PC
  %1011 = sub i64 %1010, 151
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 5
  store i64 %1013, i64* %PC
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1011, i64* %1014, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1015 = load i64, i64* %RBP
  %1016 = sub i64 %1015, 12
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 7
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1016 to i32*
  store i32 8, i32* %1019
  br label %block_4006d1

block_4007c4:                                     ; preds = %block_400566
  %1020 = load i64, i64* %RBP
  %1021 = sub i64 %1020, 12
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 7
  store i64 %1023, i64* %PC
  %1024 = inttoptr i64 %1021 to i32*
  store i32 13, i32* %1024
  %1025 = load i64, i64* %PC
  %1026 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %1025, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1026

block_400954:                                     ; preds = %block_400566
  %1027 = load i64, i64* %RBP
  %1028 = sub i64 %1027, 12
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 7
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1028 to i32*
  store i32 21, i32* %1031
  %1032 = load i64, i64* %RBP
  %1033 = sub i64 %1032, 12
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 3
  store i64 %1035, i64* %PC
  %1036 = inttoptr i64 %1033 to i32*
  %1037 = load i32, i32* %1036
  %1038 = zext i32 %1037 to i64
  store i64 %1038, i64* %RDI, align 8, !tbaa !2428
  %1039 = load i64, i64* %PC
  %1040 = sub i64 %1039, 1134
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 5
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 5
  store i64 %1044, i64* %PC
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1046 = load i64, i64* %1045, align 8, !tbaa !2428
  %1047 = add i64 %1046, -8
  %1048 = inttoptr i64 %1047 to i64*
  store i64 %1042, i64* %1048
  store i64 %1047, i64* %1045, align 8, !tbaa !2428
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1040, i64* %1049, align 8, !tbaa !2428
  %1050 = load i64, i64* %PC
  %1051 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1050, %struct.Memory* %MEMORY.0)
  %1052 = load i64, i64* %RBP
  %1053 = sub i64 %1052, 8
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 4
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to i64*
  %1057 = load i64, i64* %1056
  store i64 %1057, i64* %RAX, align 8, !tbaa !2428
  %1058 = load i64, i64* %RAX
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 3
  store i64 %1060, i64* %PC
  store i64 %1058, i64* %RCX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RCX
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC
  %1064 = add i64 4, %1061
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = icmp ult i64 %1064, %1061
  %1066 = icmp ult i64 %1064, 4
  %1067 = or i1 %1065, %1066
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1068, i8* %1069, align 1, !tbaa !2432
  %1070 = trunc i64 %1064 to i32
  %1071 = and i32 %1070, 255
  %1072 = call i32 @llvm.ctpop.i32(i32 %1071) #16
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  %1075 = xor i8 %1074, 1
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1075, i8* %1076, align 1, !tbaa !2446
  %1077 = xor i64 4, %1061
  %1078 = xor i64 %1077, %1064
  %1079 = lshr i64 %1078, 4
  %1080 = trunc i64 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1081, i8* %1082, align 1, !tbaa !2447
  %1083 = icmp eq i64 %1064, 0
  %1084 = zext i1 %1083 to i8
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1084, i8* %1085, align 1, !tbaa !2448
  %1086 = lshr i64 %1064, 63
  %1087 = trunc i64 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1087, i8* %1088, align 1, !tbaa !2449
  %1089 = lshr i64 %1061, 63
  %1090 = xor i64 %1086, %1089
  %1091 = add nuw nsw i64 %1090, %1086
  %1092 = icmp eq i64 %1091, 2
  %1093 = zext i1 %1092 to i8
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1093, i8* %1094, align 1, !tbaa !2450
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 8
  %1097 = load i64, i64* %RCX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = inttoptr i64 %1096 to i64*
  store i64 %1097, i64* %1100
  %1101 = load i64, i64* %RAX
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 3
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i32*
  %1105 = load i32, i32* %1104
  %1106 = sext i32 %1105 to i64
  store i64 %1106, i64* %RAX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RAX
  %1108 = mul i64 %1107, 8
  %1109 = add i64 %1108, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 8
  store i64 %1111, i64* %PC
  %1112 = inttoptr i64 %1109 to i64*
  %1113 = load i64, i64* %1112
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 40
  %1116 = load i64, i64* %RAX
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 4
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1115 to i64*
  store i64 %1116, i64* %1119
  %1120 = load i64, i64* %PC
  %1121 = sub i64 %1120, 1051
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 5
  store i64 %1123, i64* %PC
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1121, i64* %1124, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 12
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 7
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1126 to i32*
  store i32 26, i32* %1129
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 12
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 3
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i32*
  %1135 = load i32, i32* %1134
  %1136 = zext i32 %1135 to i64
  store i64 %1136, i64* %RDI, align 8, !tbaa !2428
  %1137 = load i64, i64* %PC
  %1138 = sub i64 %1137, 1384
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 5
  store i64 %1142, i64* %PC
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1144 = load i64, i64* %1143, align 8, !tbaa !2428
  %1145 = add i64 %1144, -8
  %1146 = inttoptr i64 %1145 to i64*
  store i64 %1140, i64* %1146
  store i64 %1145, i64* %1143, align 8, !tbaa !2428
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1138, i64* %1147, align 8, !tbaa !2428
  %1148 = load i64, i64* %PC
  %1149 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1148, %struct.Memory* %MEMORY.0)
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 8
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 4
  store i64 %1153, i64* %PC
  %1154 = inttoptr i64 %1151 to i64*
  %1155 = load i64, i64* %1154
  store i64 %1155, i64* %RAX, align 8, !tbaa !2428
  %1156 = load i64, i64* %RAX
  %1157 = load i64, i64* %PC
  %1158 = add i64 %1157, 3
  store i64 %1158, i64* %PC
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1159 = load i64, i64* %RCX
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 4
  store i64 %1161, i64* %PC
  %1162 = add i64 4, %1159
  store i64 %1162, i64* %RCX, align 8, !tbaa !2428
  %1163 = icmp ult i64 %1162, %1159
  %1164 = icmp ult i64 %1162, 4
  %1165 = or i1 %1163, %1164
  %1166 = zext i1 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1166, i8* %1167, align 1, !tbaa !2432
  %1168 = trunc i64 %1162 to i32
  %1169 = and i32 %1168, 255
  %1170 = call i32 @llvm.ctpop.i32(i32 %1169) #16
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = xor i8 %1172, 1
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1173, i8* %1174, align 1, !tbaa !2446
  %1175 = xor i64 4, %1159
  %1176 = xor i64 %1175, %1162
  %1177 = lshr i64 %1176, 4
  %1178 = trunc i64 %1177 to i8
  %1179 = and i8 %1178, 1
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1179, i8* %1180, align 1, !tbaa !2447
  %1181 = icmp eq i64 %1162, 0
  %1182 = zext i1 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1182, i8* %1183, align 1, !tbaa !2448
  %1184 = lshr i64 %1162, 63
  %1185 = trunc i64 %1184 to i8
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1185, i8* %1186, align 1, !tbaa !2449
  %1187 = lshr i64 %1159, 63
  %1188 = xor i64 %1184, %1187
  %1189 = add nuw nsw i64 %1188, %1184
  %1190 = icmp eq i64 %1189, 2
  %1191 = zext i1 %1190 to i8
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1191, i8* %1192, align 1, !tbaa !2450
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 8
  %1195 = load i64, i64* %RCX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 4
  store i64 %1197, i64* %PC
  %1198 = inttoptr i64 %1194 to i64*
  store i64 %1195, i64* %1198
  %1199 = load i64, i64* %RAX
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 3
  store i64 %1201, i64* %PC
  %1202 = inttoptr i64 %1199 to i32*
  %1203 = load i32, i32* %1202
  %1204 = sext i32 %1203 to i64
  store i64 %1204, i64* %RAX, align 8, !tbaa !2428
  %1205 = load i64, i64* %RAX
  %1206 = mul i64 %1205, 8
  %1207 = add i64 %1206, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 8
  store i64 %1209, i64* %PC
  %1210 = inttoptr i64 %1207 to i64*
  %1211 = load i64, i64* %1210
  store i64 %1211, i64* %RAX, align 8, !tbaa !2428
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 40
  %1214 = load i64, i64* %RAX
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 4
  store i64 %1216, i64* %PC
  %1217 = inttoptr i64 %1213 to i64*
  store i64 %1214, i64* %1217
  %1218 = load i64, i64* %PC
  %1219 = sub i64 %1218, 1301
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 5
  store i64 %1221, i64* %PC
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1219, i64* %1222, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1223 = load i64, i64* %RBP
  %1224 = sub i64 %1223, 12
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 7
  store i64 %1226, i64* %PC
  %1227 = inttoptr i64 %1224 to i32*
  store i32 5, i32* %1227
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 12
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 3
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i32*
  %1233 = load i32, i32* %1232
  %1234 = zext i32 %1233 to i64
  store i64 %1234, i64* %RDI, align 8, !tbaa !2428
  %1235 = load i64, i64* %PC
  %1236 = sub i64 %1235, 334
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 5
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 5
  store i64 %1240, i64* %PC
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1242 = load i64, i64* %1241, align 8, !tbaa !2428
  %1243 = add i64 %1242, -8
  %1244 = inttoptr i64 %1243 to i64*
  store i64 %1238, i64* %1244
  store i64 %1243, i64* %1241, align 8, !tbaa !2428
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1236, i64* %1245, align 8, !tbaa !2428
  %1246 = load i64, i64* %PC
  %1247 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1246, %struct.Memory* %MEMORY.0)
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 8
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 4
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to i64*
  %1253 = load i64, i64* %1252
  store i64 %1253, i64* %RAX, align 8, !tbaa !2428
  %1254 = load i64, i64* %RAX
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 3
  store i64 %1256, i64* %PC
  store i64 %1254, i64* %RCX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RCX
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 4
  store i64 %1259, i64* %PC
  %1260 = add i64 4, %1257
  store i64 %1260, i64* %RCX, align 8, !tbaa !2428
  %1261 = icmp ult i64 %1260, %1257
  %1262 = icmp ult i64 %1260, 4
  %1263 = or i1 %1261, %1262
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1264, i8* %1265, align 1, !tbaa !2432
  %1266 = trunc i64 %1260 to i32
  %1267 = and i32 %1266, 255
  %1268 = call i32 @llvm.ctpop.i32(i32 %1267) #16
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  %1271 = xor i8 %1270, 1
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1271, i8* %1272, align 1, !tbaa !2446
  %1273 = xor i64 4, %1257
  %1274 = xor i64 %1273, %1260
  %1275 = lshr i64 %1274, 4
  %1276 = trunc i64 %1275 to i8
  %1277 = and i8 %1276, 1
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1277, i8* %1278, align 1, !tbaa !2447
  %1279 = icmp eq i64 %1260, 0
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1280, i8* %1281, align 1, !tbaa !2448
  %1282 = lshr i64 %1260, 63
  %1283 = trunc i64 %1282 to i8
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1283, i8* %1284, align 1, !tbaa !2449
  %1285 = lshr i64 %1257, 63
  %1286 = xor i64 %1282, %1285
  %1287 = add nuw nsw i64 %1286, %1282
  %1288 = icmp eq i64 %1287, 2
  %1289 = zext i1 %1288 to i8
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1289, i8* %1290, align 1, !tbaa !2450
  %1291 = load i64, i64* %RBP
  %1292 = sub i64 %1291, 8
  %1293 = load i64, i64* %RCX
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1292 to i64*
  store i64 %1293, i64* %1296
  %1297 = load i64, i64* %RAX
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 3
  store i64 %1299, i64* %PC
  %1300 = inttoptr i64 %1297 to i32*
  %1301 = load i32, i32* %1300
  %1302 = sext i32 %1301 to i64
  store i64 %1302, i64* %RAX, align 8, !tbaa !2428
  %1303 = load i64, i64* %RAX
  %1304 = mul i64 %1303, 8
  %1305 = add i64 %1304, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 8
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1305 to i64*
  %1309 = load i64, i64* %1308
  store i64 %1309, i64* %RAX, align 8, !tbaa !2428
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 40
  %1312 = load i64, i64* %RAX
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 4
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1311 to i64*
  store i64 %1312, i64* %1315
  %1316 = load i64, i64* %PC
  %1317 = sub i64 %1316, 251
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 5
  store i64 %1319, i64* %PC
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1317, i64* %1320, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1321 = load i64, i64* %RBP
  %1322 = sub i64 %1321, 12
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 7
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i32*
  store i32 31, i32* %1325
  %1326 = load i64, i64* %PC
  %1327 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %1326, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1327

block_40072e:                                     ; preds = %block_400566
  %1328 = load i64, i64* %RBP
  %1329 = sub i64 %1328, 12
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 7
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1329 to i32*
  store i32 10, i32* %1332
  %1333 = load i64, i64* %RBP
  %1334 = sub i64 %1333, 12
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 3
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1334 to i32*
  %1338 = load i32, i32* %1337
  %1339 = zext i32 %1338 to i64
  store i64 %1339, i64* %RDI, align 8, !tbaa !2428
  %1340 = load i64, i64* %PC
  %1341 = sub i64 %1340, 584
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 5
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1347 = load i64, i64* %1346, align 8, !tbaa !2428
  %1348 = add i64 %1347, -8
  %1349 = inttoptr i64 %1348 to i64*
  store i64 %1343, i64* %1349
  store i64 %1348, i64* %1346, align 8, !tbaa !2428
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1341, i64* %1350, align 8, !tbaa !2428
  %1351 = load i64, i64* %PC
  %1352 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1351, %struct.Memory* %MEMORY.0)
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 8
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 4
  store i64 %1356, i64* %PC
  %1357 = inttoptr i64 %1354 to i64*
  %1358 = load i64, i64* %1357
  store i64 %1358, i64* %RAX, align 8, !tbaa !2428
  %1359 = load i64, i64* %RAX
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 3
  store i64 %1361, i64* %PC
  store i64 %1359, i64* %RCX, align 8, !tbaa !2428
  %1362 = load i64, i64* %RCX
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = add i64 4, %1362
  store i64 %1365, i64* %RCX, align 8, !tbaa !2428
  %1366 = icmp ult i64 %1365, %1362
  %1367 = icmp ult i64 %1365, 4
  %1368 = or i1 %1366, %1367
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1369, i8* %1370, align 1, !tbaa !2432
  %1371 = trunc i64 %1365 to i32
  %1372 = and i32 %1371, 255
  %1373 = call i32 @llvm.ctpop.i32(i32 %1372) #16
  %1374 = trunc i32 %1373 to i8
  %1375 = and i8 %1374, 1
  %1376 = xor i8 %1375, 1
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1376, i8* %1377, align 1, !tbaa !2446
  %1378 = xor i64 4, %1362
  %1379 = xor i64 %1378, %1365
  %1380 = lshr i64 %1379, 4
  %1381 = trunc i64 %1380 to i8
  %1382 = and i8 %1381, 1
  %1383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1382, i8* %1383, align 1, !tbaa !2447
  %1384 = icmp eq i64 %1365, 0
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1385, i8* %1386, align 1, !tbaa !2448
  %1387 = lshr i64 %1365, 63
  %1388 = trunc i64 %1387 to i8
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1388, i8* %1389, align 1, !tbaa !2449
  %1390 = lshr i64 %1362, 63
  %1391 = xor i64 %1387, %1390
  %1392 = add nuw nsw i64 %1391, %1387
  %1393 = icmp eq i64 %1392, 2
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1394, i8* %1395, align 1, !tbaa !2450
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 8
  %1398 = load i64, i64* %RCX
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = inttoptr i64 %1397 to i64*
  store i64 %1398, i64* %1401
  %1402 = load i64, i64* %RAX
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 3
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  %1406 = load i32, i32* %1405
  %1407 = sext i32 %1406 to i64
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %1408 = load i64, i64* %RAX
  %1409 = mul i64 %1408, 8
  %1410 = add i64 %1409, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 8
  store i64 %1412, i64* %PC
  %1413 = inttoptr i64 %1410 to i64*
  %1414 = load i64, i64* %1413
  store i64 %1414, i64* %RAX, align 8, !tbaa !2428
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 40
  %1417 = load i64, i64* %RAX
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 4
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1416 to i64*
  store i64 %1417, i64* %1420
  %1421 = load i64, i64* %PC
  %1422 = sub i64 %1421, 501
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 5
  store i64 %1424, i64* %PC
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1422, i64* %1425, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 12
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 7
  store i64 %1429, i64* %PC
  %1430 = inttoptr i64 %1427 to i32*
  store i32 0, i32* %1430
  %1431 = load i64, i64* %RSP
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 4
  store i64 %1433, i64* %PC
  %1434 = add i64 48, %1431
  store i64 %1434, i64* %RSP, align 8, !tbaa !2428
  %1435 = icmp ult i64 %1434, %1431
  %1436 = icmp ult i64 %1434, 48
  %1437 = or i1 %1435, %1436
  %1438 = zext i1 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1438, i8* %1439, align 1, !tbaa !2432
  %1440 = trunc i64 %1434 to i32
  %1441 = and i32 %1440, 255
  %1442 = call i32 @llvm.ctpop.i32(i32 %1441) #16
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1445, i8* %1446, align 1, !tbaa !2446
  %1447 = xor i64 48, %1431
  %1448 = xor i64 %1447, %1434
  %1449 = lshr i64 %1448, 4
  %1450 = trunc i64 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1451, i8* %1452, align 1, !tbaa !2447
  %1453 = icmp eq i64 %1434, 0
  %1454 = zext i1 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1454, i8* %1455, align 1, !tbaa !2448
  %1456 = lshr i64 %1434, 63
  %1457 = trunc i64 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1457, i8* %1458, align 1, !tbaa !2449
  %1459 = lshr i64 %1431, 63
  %1460 = xor i64 %1456, %1459
  %1461 = add nuw nsw i64 %1460, %1456
  %1462 = icmp eq i64 %1461, 2
  %1463 = zext i1 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1463, i8* %1464, align 1, !tbaa !2450
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 1
  store i64 %1466, i64* %PC
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1468 = load i64, i64* %1467, align 8, !tbaa !2428
  %1469 = add i64 %1468, 8
  %1470 = inttoptr i64 %1468 to i64*
  %1471 = load i64, i64* %1470
  store i64 %1471, i64* %RBP, align 8, !tbaa !2428
  store i64 %1469, i64* %1467, align 8, !tbaa !2428
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 1
  store i64 %1473, i64* %PC
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1476 = load i64, i64* %1475, align 8, !tbaa !2428
  %1477 = inttoptr i64 %1476 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %1474, align 8, !tbaa !2428
  %1479 = add i64 %1476, 8
  store i64 %1479, i64* %1475, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400828:                                     ; preds = %block_400566
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 12
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 7
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i32*
  store i32 15, i32* %1484
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 12
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 3
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to i32*
  %1490 = load i32, i32* %1489
  %1491 = zext i32 %1490 to i64
  store i64 %1491, i64* %RDI, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = sub i64 %1492, 834
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 5
  store i64 %1497, i64* %PC
  %1498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1499 = load i64, i64* %1498, align 8, !tbaa !2428
  %1500 = add i64 %1499, -8
  %1501 = inttoptr i64 %1500 to i64*
  store i64 %1495, i64* %1501
  store i64 %1500, i64* %1498, align 8, !tbaa !2428
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1493, i64* %1502, align 8, !tbaa !2428
  %1503 = load i64, i64* %PC
  %1504 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1503, %struct.Memory* %MEMORY.0)
  %1505 = load i64, i64* %RBP
  %1506 = sub i64 %1505, 8
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 4
  store i64 %1508, i64* %PC
  %1509 = inttoptr i64 %1506 to i64*
  %1510 = load i64, i64* %1509
  store i64 %1510, i64* %RAX, align 8, !tbaa !2428
  %1511 = load i64, i64* %RAX
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 3
  store i64 %1513, i64* %PC
  store i64 %1511, i64* %RCX, align 8, !tbaa !2428
  %1514 = load i64, i64* %RCX
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 4
  store i64 %1516, i64* %PC
  %1517 = add i64 4, %1514
  store i64 %1517, i64* %RCX, align 8, !tbaa !2428
  %1518 = icmp ult i64 %1517, %1514
  %1519 = icmp ult i64 %1517, 4
  %1520 = or i1 %1518, %1519
  %1521 = zext i1 %1520 to i8
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1521, i8* %1522, align 1, !tbaa !2432
  %1523 = trunc i64 %1517 to i32
  %1524 = and i32 %1523, 255
  %1525 = call i32 @llvm.ctpop.i32(i32 %1524) #16
  %1526 = trunc i32 %1525 to i8
  %1527 = and i8 %1526, 1
  %1528 = xor i8 %1527, 1
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1528, i8* %1529, align 1, !tbaa !2446
  %1530 = xor i64 4, %1514
  %1531 = xor i64 %1530, %1517
  %1532 = lshr i64 %1531, 4
  %1533 = trunc i64 %1532 to i8
  %1534 = and i8 %1533, 1
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1534, i8* %1535, align 1, !tbaa !2447
  %1536 = icmp eq i64 %1517, 0
  %1537 = zext i1 %1536 to i8
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1537, i8* %1538, align 1, !tbaa !2448
  %1539 = lshr i64 %1517, 63
  %1540 = trunc i64 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1540, i8* %1541, align 1, !tbaa !2449
  %1542 = lshr i64 %1514, 63
  %1543 = xor i64 %1539, %1542
  %1544 = add nuw nsw i64 %1543, %1539
  %1545 = icmp eq i64 %1544, 2
  %1546 = zext i1 %1545 to i8
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1546, i8* %1547, align 1, !tbaa !2450
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 8
  %1550 = load i64, i64* %RCX
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 4
  store i64 %1552, i64* %PC
  %1553 = inttoptr i64 %1549 to i64*
  store i64 %1550, i64* %1553
  %1554 = load i64, i64* %RAX
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  %1557 = inttoptr i64 %1554 to i32*
  %1558 = load i32, i32* %1557
  %1559 = sext i32 %1558 to i64
  store i64 %1559, i64* %RAX, align 8, !tbaa !2428
  %1560 = load i64, i64* %RAX
  %1561 = mul i64 %1560, 8
  %1562 = add i64 %1561, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 8
  store i64 %1564, i64* %PC
  %1565 = inttoptr i64 %1562 to i64*
  %1566 = load i64, i64* %1565
  store i64 %1566, i64* %RAX, align 8, !tbaa !2428
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 40
  %1569 = load i64, i64* %RAX
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 4
  store i64 %1571, i64* %PC
  %1572 = inttoptr i64 %1568 to i64*
  store i64 %1569, i64* %1572
  %1573 = load i64, i64* %PC
  %1574 = sub i64 %1573, 751
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 5
  store i64 %1576, i64* %PC
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1574, i64* %1577, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 12
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 7
  store i64 %1581, i64* %PC
  %1582 = inttoptr i64 %1579 to i32*
  store i32 18, i32* %1582
  %1583 = load i64, i64* %PC
  %1584 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1583, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1584

block_400922:                                     ; preds = %block_400566
  %1585 = load i64, i64* %RBP
  %1586 = sub i64 %1585, 12
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 7
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1586 to i32*
  store i32 20, i32* %1589
  %1590 = load i64, i64* %RBP
  %1591 = sub i64 %1590, 12
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 3
  store i64 %1593, i64* %PC
  %1594 = inttoptr i64 %1591 to i32*
  %1595 = load i32, i32* %1594
  %1596 = zext i32 %1595 to i64
  store i64 %1596, i64* %RDI, align 8, !tbaa !2428
  %1597 = load i64, i64* %PC
  %1598 = sub i64 %1597, 1084
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 5
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1604 = load i64, i64* %1603, align 8, !tbaa !2428
  %1605 = add i64 %1604, -8
  %1606 = inttoptr i64 %1605 to i64*
  store i64 %1600, i64* %1606
  store i64 %1605, i64* %1603, align 8, !tbaa !2428
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1598, i64* %1607, align 8, !tbaa !2428
  %1608 = load i64, i64* %PC
  %1609 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1608, %struct.Memory* %MEMORY.0)
  %1610 = load i64, i64* %RBP
  %1611 = sub i64 %1610, 8
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 4
  store i64 %1613, i64* %PC
  %1614 = inttoptr i64 %1611 to i64*
  %1615 = load i64, i64* %1614
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = load i64, i64* %RAX
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 3
  store i64 %1618, i64* %PC
  store i64 %1616, i64* %RCX, align 8, !tbaa !2428
  %1619 = load i64, i64* %RCX
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = add i64 4, %1619
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = icmp ult i64 %1622, %1619
  %1624 = icmp ult i64 %1622, 4
  %1625 = or i1 %1623, %1624
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1626, i8* %1627, align 1, !tbaa !2432
  %1628 = trunc i64 %1622 to i32
  %1629 = and i32 %1628, 255
  %1630 = call i32 @llvm.ctpop.i32(i32 %1629) #16
  %1631 = trunc i32 %1630 to i8
  %1632 = and i8 %1631, 1
  %1633 = xor i8 %1632, 1
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1633, i8* %1634, align 1, !tbaa !2446
  %1635 = xor i64 4, %1619
  %1636 = xor i64 %1635, %1622
  %1637 = lshr i64 %1636, 4
  %1638 = trunc i64 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1639, i8* %1640, align 1, !tbaa !2447
  %1641 = icmp eq i64 %1622, 0
  %1642 = zext i1 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1642, i8* %1643, align 1, !tbaa !2448
  %1644 = lshr i64 %1622, 63
  %1645 = trunc i64 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1645, i8* %1646, align 1, !tbaa !2449
  %1647 = lshr i64 %1619, 63
  %1648 = xor i64 %1644, %1647
  %1649 = add nuw nsw i64 %1648, %1644
  %1650 = icmp eq i64 %1649, 2
  %1651 = zext i1 %1650 to i8
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1651, i8* %1652, align 1, !tbaa !2450
  %1653 = load i64, i64* %RBP
  %1654 = sub i64 %1653, 8
  %1655 = load i64, i64* %RCX
  %1656 = load i64, i64* %PC
  %1657 = add i64 %1656, 4
  store i64 %1657, i64* %PC
  %1658 = inttoptr i64 %1654 to i64*
  store i64 %1655, i64* %1658
  %1659 = load i64, i64* %RAX
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 3
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to i32*
  %1663 = load i32, i32* %1662
  %1664 = sext i32 %1663 to i64
  store i64 %1664, i64* %RAX, align 8, !tbaa !2428
  %1665 = load i64, i64* %RAX
  %1666 = mul i64 %1665, 8
  %1667 = add i64 %1666, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 8
  store i64 %1669, i64* %PC
  %1670 = inttoptr i64 %1667 to i64*
  %1671 = load i64, i64* %1670
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 40
  %1674 = load i64, i64* %RAX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %PC
  %1679 = sub i64 %1678, 1001
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 5
  store i64 %1681, i64* %PC
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1679, i64* %1682, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1683 = load i64, i64* %RBP
  %1684 = sub i64 %1683, 12
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 7
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1684 to i32*
  store i32 23, i32* %1687
  %1688 = load i64, i64* %RBP
  %1689 = sub i64 %1688, 12
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 3
  store i64 %1691, i64* %PC
  %1692 = inttoptr i64 %1689 to i32*
  %1693 = load i32, i32* %1692
  %1694 = zext i32 %1693 to i64
  store i64 %1694, i64* %RDI, align 8, !tbaa !2428
  %1695 = load i64, i64* %PC
  %1696 = sub i64 %1695, 1234
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1702 = load i64, i64* %1701, align 8, !tbaa !2428
  %1703 = add i64 %1702, -8
  %1704 = inttoptr i64 %1703 to i64*
  store i64 %1698, i64* %1704
  store i64 %1703, i64* %1701, align 8, !tbaa !2428
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1696, i64* %1705, align 8, !tbaa !2428
  %1706 = load i64, i64* %PC
  %1707 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1706, %struct.Memory* %MEMORY.0)
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 8
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 4
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to i64*
  %1713 = load i64, i64* %1712
  store i64 %1713, i64* %RAX, align 8, !tbaa !2428
  %1714 = load i64, i64* %RAX
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 3
  store i64 %1716, i64* %PC
  store i64 %1714, i64* %RCX, align 8, !tbaa !2428
  %1717 = load i64, i64* %RCX
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 4
  store i64 %1719, i64* %PC
  %1720 = add i64 4, %1717
  store i64 %1720, i64* %RCX, align 8, !tbaa !2428
  %1721 = icmp ult i64 %1720, %1717
  %1722 = icmp ult i64 %1720, 4
  %1723 = or i1 %1721, %1722
  %1724 = zext i1 %1723 to i8
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1724, i8* %1725, align 1, !tbaa !2432
  %1726 = trunc i64 %1720 to i32
  %1727 = and i32 %1726, 255
  %1728 = call i32 @llvm.ctpop.i32(i32 %1727) #16
  %1729 = trunc i32 %1728 to i8
  %1730 = and i8 %1729, 1
  %1731 = xor i8 %1730, 1
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1731, i8* %1732, align 1, !tbaa !2446
  %1733 = xor i64 4, %1717
  %1734 = xor i64 %1733, %1720
  %1735 = lshr i64 %1734, 4
  %1736 = trunc i64 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1737, i8* %1738, align 1, !tbaa !2447
  %1739 = icmp eq i64 %1720, 0
  %1740 = zext i1 %1739 to i8
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1740, i8* %1741, align 1, !tbaa !2448
  %1742 = lshr i64 %1720, 63
  %1743 = trunc i64 %1742 to i8
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1743, i8* %1744, align 1, !tbaa !2449
  %1745 = lshr i64 %1717, 63
  %1746 = xor i64 %1742, %1745
  %1747 = add nuw nsw i64 %1746, %1742
  %1748 = icmp eq i64 %1747, 2
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1749, i8* %1750, align 1, !tbaa !2450
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 8
  %1753 = load i64, i64* %RCX
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 4
  store i64 %1755, i64* %PC
  %1756 = inttoptr i64 %1752 to i64*
  store i64 %1753, i64* %1756
  %1757 = load i64, i64* %RAX
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 3
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  %1761 = load i32, i32* %1760
  %1762 = sext i32 %1761 to i64
  store i64 %1762, i64* %RAX, align 8, !tbaa !2428
  %1763 = load i64, i64* %RAX
  %1764 = mul i64 %1763, 8
  %1765 = add i64 %1764, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 8
  store i64 %1767, i64* %PC
  %1768 = inttoptr i64 %1765 to i64*
  %1769 = load i64, i64* %1768
  store i64 %1769, i64* %RAX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 40
  %1772 = load i64, i64* %RAX
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 4
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1771 to i64*
  store i64 %1772, i64* %1775
  %1776 = load i64, i64* %PC
  %1777 = sub i64 %1776, 1151
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 5
  store i64 %1779, i64* %PC
  %1780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1777, i64* %1780, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 12
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 7
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i32*
  store i32 2, i32* %1785
  %1786 = load i64, i64* %RBP
  %1787 = sub i64 %1786, 12
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to i32*
  %1791 = load i32, i32* %1790
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RDI, align 8, !tbaa !2428
  %1793 = load i64, i64* %PC
  %1794 = sub i64 %1793, 184
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1800 = load i64, i64* %1799, align 8, !tbaa !2428
  %1801 = add i64 %1800, -8
  %1802 = inttoptr i64 %1801 to i64*
  store i64 %1796, i64* %1802
  store i64 %1801, i64* %1799, align 8, !tbaa !2428
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1794, i64* %1803, align 8, !tbaa !2428
  %1804 = load i64, i64* %PC
  %1805 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1804, %struct.Memory* %MEMORY.0)
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 8
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RAX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RAX
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 3
  store i64 %1814, i64* %PC
  store i64 %1812, i64* %RCX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RCX
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 4
  store i64 %1817, i64* %PC
  %1818 = add i64 4, %1815
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = icmp ult i64 %1818, %1815
  %1820 = icmp ult i64 %1818, 4
  %1821 = or i1 %1819, %1820
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1822, i8* %1823, align 1, !tbaa !2432
  %1824 = trunc i64 %1818 to i32
  %1825 = and i32 %1824, 255
  %1826 = call i32 @llvm.ctpop.i32(i32 %1825) #16
  %1827 = trunc i32 %1826 to i8
  %1828 = and i8 %1827, 1
  %1829 = xor i8 %1828, 1
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1829, i8* %1830, align 1, !tbaa !2446
  %1831 = xor i64 4, %1815
  %1832 = xor i64 %1831, %1818
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1835, i8* %1836, align 1, !tbaa !2447
  %1837 = icmp eq i64 %1818, 0
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1838, i8* %1839, align 1, !tbaa !2448
  %1840 = lshr i64 %1818, 63
  %1841 = trunc i64 %1840 to i8
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1841, i8* %1842, align 1, !tbaa !2449
  %1843 = lshr i64 %1815, 63
  %1844 = xor i64 %1840, %1843
  %1845 = add nuw nsw i64 %1844, %1840
  %1846 = icmp eq i64 %1845, 2
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1847, i8* %1848, align 1, !tbaa !2450
  %1849 = load i64, i64* %RBP
  %1850 = sub i64 %1849, 8
  %1851 = load i64, i64* %RCX
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1850 to i64*
  store i64 %1851, i64* %1854
  %1855 = load i64, i64* %RAX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  %1859 = load i32, i32* %1858
  %1860 = sext i32 %1859 to i64
  store i64 %1860, i64* %RAX, align 8, !tbaa !2428
  %1861 = load i64, i64* %RAX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 8
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i64*
  %1867 = load i64, i64* %1866
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 40
  %1870 = load i64, i64* %RAX
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1869 to i64*
  store i64 %1870, i64* %1873
  %1874 = load i64, i64* %PC
  %1875 = sub i64 %1874, 101
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1875, i64* %1878, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 12
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 7
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i32*
  store i32 25, i32* %1883
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 12
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i32*
  %1889 = load i32, i32* %1888
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RDI, align 8, !tbaa !2428
  %1891 = load i64, i64* %PC
  %1892 = sub i64 %1891, 1334
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 5
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1898 = load i64, i64* %1897, align 8, !tbaa !2428
  %1899 = add i64 %1898, -8
  %1900 = inttoptr i64 %1899 to i64*
  store i64 %1894, i64* %1900
  store i64 %1899, i64* %1897, align 8, !tbaa !2428
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1892, i64* %1901, align 8, !tbaa !2428
  %1902 = load i64, i64* %PC
  %1903 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1902, %struct.Memory* %MEMORY.0)
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 8
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 4
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RAX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RAX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 3
  store i64 %1912, i64* %PC
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1913 = load i64, i64* %RCX
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = add i64 4, %1913
  store i64 %1916, i64* %RCX, align 8, !tbaa !2428
  %1917 = icmp ult i64 %1916, %1913
  %1918 = icmp ult i64 %1916, 4
  %1919 = or i1 %1917, %1918
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1920, i8* %1921, align 1, !tbaa !2432
  %1922 = trunc i64 %1916 to i32
  %1923 = and i32 %1922, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = xor i64 4, %1913
  %1930 = xor i64 %1929, %1916
  %1931 = lshr i64 %1930, 4
  %1932 = trunc i64 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1933, i8* %1934, align 1, !tbaa !2447
  %1935 = icmp eq i64 %1916, 0
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1936, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1916, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = lshr i64 %1913, 63
  %1942 = xor i64 %1938, %1941
  %1943 = add nuw nsw i64 %1942, %1938
  %1944 = icmp eq i64 %1943, 2
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1945, i8* %1946, align 1, !tbaa !2450
  %1947 = load i64, i64* %RBP
  %1948 = sub i64 %1947, 8
  %1949 = load i64, i64* %RCX
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1948 to i64*
  store i64 %1949, i64* %1952
  %1953 = load i64, i64* %RAX
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 3
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  %1957 = load i32, i32* %1956
  %1958 = sext i32 %1957 to i64
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RAX
  %1960 = mul i64 %1959, 8
  %1961 = add i64 %1960, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 40
  %1968 = load i64, i64* %RAX
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 4
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1967 to i64*
  store i64 %1968, i64* %1971
  %1972 = load i64, i64* %PC
  %1973 = sub i64 %1972, 1251
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 5
  store i64 %1975, i64* %PC
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1973, i64* %1976, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 12
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 7
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i32*
  store i32 28, i32* %1981
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 12
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  %1986 = inttoptr i64 %1983 to i32*
  %1987 = load i32, i32* %1986
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RDI, align 8, !tbaa !2428
  %1989 = load i64, i64* %PC
  %1990 = sub i64 %1989, 1484
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1996 = load i64, i64* %1995, align 8, !tbaa !2428
  %1997 = add i64 %1996, -8
  %1998 = inttoptr i64 %1997 to i64*
  store i64 %1992, i64* %1998
  store i64 %1997, i64* %1995, align 8, !tbaa !2428
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1990, i64* %1999, align 8, !tbaa !2428
  %2000 = load i64, i64* %PC
  %2001 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2000, %struct.Memory* %MEMORY.0)
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 8
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i64*
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = load i64, i64* %RAX
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 3
  store i64 %2010, i64* %PC
  store i64 %2008, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RCX
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = add i64 4, %2011
  store i64 %2014, i64* %RCX, align 8, !tbaa !2428
  %2015 = icmp ult i64 %2014, %2011
  %2016 = icmp ult i64 %2014, 4
  %2017 = or i1 %2015, %2016
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2018, i8* %2019, align 1, !tbaa !2432
  %2020 = trunc i64 %2014 to i32
  %2021 = and i32 %2020, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = xor i64 4, %2011
  %2028 = xor i64 %2027, %2014
  %2029 = lshr i64 %2028, 4
  %2030 = trunc i64 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2031, i8* %2032, align 1, !tbaa !2447
  %2033 = icmp eq i64 %2014, 0
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2034, i8* %2035, align 1, !tbaa !2448
  %2036 = lshr i64 %2014, 63
  %2037 = trunc i64 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2037, i8* %2038, align 1, !tbaa !2449
  %2039 = lshr i64 %2011, 63
  %2040 = xor i64 %2036, %2039
  %2041 = add nuw nsw i64 %2040, %2036
  %2042 = icmp eq i64 %2041, 2
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2044, align 1, !tbaa !2450
  %2045 = load i64, i64* %RBP
  %2046 = sub i64 %2045, 8
  %2047 = load i64, i64* %RCX
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 4
  store i64 %2049, i64* %PC
  %2050 = inttoptr i64 %2046 to i64*
  store i64 %2047, i64* %2050
  %2051 = load i64, i64* %RAX
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 3
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = mul i64 %2057, 8
  %2059 = add i64 %2058, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 8
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to i64*
  %2063 = load i64, i64* %2062
  store i64 %2063, i64* %RAX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RBP
  %2065 = sub i64 %2064, 40
  %2066 = load i64, i64* %RAX
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 4
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2065 to i64*
  store i64 %2066, i64* %2069
  %2070 = load i64, i64* %PC
  %2071 = sub i64 %2070, 1401
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 5
  store i64 %2073, i64* %PC
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2071, i64* %2074, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 12
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 7
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i32*
  store i32 7, i32* %2079
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 12
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2081 to i32*
  %2085 = load i32, i32* %2084
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDI, align 8, !tbaa !2428
  %2087 = load i64, i64* %PC
  %2088 = sub i64 %2087, 434
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 5
  store i64 %2092, i64* %PC
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2094 = load i64, i64* %2093, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2090, i64* %2096
  store i64 %2095, i64* %2093, align 8, !tbaa !2428
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2088, i64* %2097, align 8, !tbaa !2428
  %2098 = load i64, i64* %PC
  %2099 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2098, %struct.Memory* %MEMORY.0)
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 8
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 4
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to i64*
  %2105 = load i64, i64* %2104
  store i64 %2105, i64* %RAX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2109 = load i64, i64* %RCX
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = add i64 4, %2109
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = icmp ult i64 %2112, %2109
  %2114 = icmp ult i64 %2112, 4
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2116, i8* %2117, align 1, !tbaa !2432
  %2118 = trunc i64 %2112 to i32
  %2119 = and i32 %2118, 255
  %2120 = call i32 @llvm.ctpop.i32(i32 %2119) #16
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = xor i8 %2122, 1
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2123, i8* %2124, align 1, !tbaa !2446
  %2125 = xor i64 4, %2109
  %2126 = xor i64 %2125, %2112
  %2127 = lshr i64 %2126, 4
  %2128 = trunc i64 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2129, i8* %2130, align 1, !tbaa !2447
  %2131 = icmp eq i64 %2112, 0
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2132, i8* %2133, align 1, !tbaa !2448
  %2134 = lshr i64 %2112, 63
  %2135 = trunc i64 %2134 to i8
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2135, i8* %2136, align 1, !tbaa !2449
  %2137 = lshr i64 %2109, 63
  %2138 = xor i64 %2134, %2137
  %2139 = add nuw nsw i64 %2138, %2134
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2141, i8* %2142, align 1, !tbaa !2450
  %2143 = load i64, i64* %RBP
  %2144 = sub i64 %2143, 8
  %2145 = load i64, i64* %RCX
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2144 to i64*
  store i64 %2145, i64* %2148
  %2149 = load i64, i64* %RAX
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 3
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RAX
  %2156 = mul i64 %2155, 8
  %2157 = add i64 %2156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 8
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2157 to i64*
  %2161 = load i64, i64* %2160
  store i64 %2161, i64* %RAX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 40
  %2164 = load i64, i64* %RAX
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC
  %2167 = inttoptr i64 %2163 to i64*
  store i64 %2164, i64* %2167
  %2168 = load i64, i64* %PC
  %2169 = sub i64 %2168, 351
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 5
  store i64 %2171, i64* %PC
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2169, i64* %2172, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 12
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 7
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  store i32 30, i32* %2177
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 12
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i32*
  %2183 = load i32, i32* %2182
  %2184 = zext i32 %2183 to i64
  store i64 %2184, i64* %RDI, align 8, !tbaa !2428
  %2185 = load i64, i64* %PC
  %2186 = sub i64 %2185, 1584
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2192 = load i64, i64* %2191, align 8, !tbaa !2428
  %2193 = add i64 %2192, -8
  %2194 = inttoptr i64 %2193 to i64*
  store i64 %2188, i64* %2194
  store i64 %2193, i64* %2191, align 8, !tbaa !2428
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2186, i64* %2195, align 8, !tbaa !2428
  %2196 = load i64, i64* %PC
  %2197 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2196, %struct.Memory* %MEMORY.0)
  %2198 = load i64, i64* %RBP
  %2199 = sub i64 %2198, 8
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 4
  store i64 %2201, i64* %PC
  %2202 = inttoptr i64 %2199 to i64*
  %2203 = load i64, i64* %2202
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = load i64, i64* %RAX
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  store i64 %2204, i64* %RCX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RCX
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = add i64 4, %2207
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = icmp ult i64 %2210, %2207
  %2212 = icmp ult i64 %2210, 4
  %2213 = or i1 %2211, %2212
  %2214 = zext i1 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2214, i8* %2215, align 1, !tbaa !2432
  %2216 = trunc i64 %2210 to i32
  %2217 = and i32 %2216, 255
  %2218 = call i32 @llvm.ctpop.i32(i32 %2217) #16
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = xor i8 %2220, 1
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2221, i8* %2222, align 1, !tbaa !2446
  %2223 = xor i64 4, %2207
  %2224 = xor i64 %2223, %2210
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2227, i8* %2228, align 1, !tbaa !2447
  %2229 = icmp eq i64 %2210, 0
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2230, i8* %2231, align 1, !tbaa !2448
  %2232 = lshr i64 %2210, 63
  %2233 = trunc i64 %2232 to i8
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2233, i8* %2234, align 1, !tbaa !2449
  %2235 = lshr i64 %2207, 63
  %2236 = xor i64 %2232, %2235
  %2237 = add nuw nsw i64 %2236, %2232
  %2238 = icmp eq i64 %2237, 2
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2239, i8* %2240, align 1, !tbaa !2450
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 8
  %2243 = load i64, i64* %RCX
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2242 to i64*
  store i64 %2243, i64* %2246
  %2247 = load i64, i64* %RAX
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RAX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 8
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2255 to i64*
  %2259 = load i64, i64* %2258
  store i64 %2259, i64* %RAX, align 8, !tbaa !2428
  %2260 = load i64, i64* %RBP
  %2261 = sub i64 %2260, 40
  %2262 = load i64, i64* %RAX
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 4
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2261 to i64*
  store i64 %2262, i64* %2265
  %2266 = load i64, i64* %PC
  %2267 = sub i64 %2266, 1501
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 5
  store i64 %2269, i64* %PC
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2267, i64* %2270, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 12
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 7
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i32*
  store i32 12, i32* %2275
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 12
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 3
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to i32*
  %2281 = load i32, i32* %2280
  %2282 = zext i32 %2281 to i64
  store i64 %2282, i64* %RDI, align 8, !tbaa !2428
  %2283 = load i64, i64* %PC
  %2284 = sub i64 %2283, 684
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 5
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 5
  store i64 %2288, i64* %PC
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2290 = load i64, i64* %2289, align 8, !tbaa !2428
  %2291 = add i64 %2290, -8
  %2292 = inttoptr i64 %2291 to i64*
  store i64 %2286, i64* %2292
  store i64 %2291, i64* %2289, align 8, !tbaa !2428
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2284, i64* %2293, align 8, !tbaa !2428
  %2294 = load i64, i64* %PC
  %2295 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2294, %struct.Memory* %MEMORY.0)
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 8
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RAX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RAX
  %2303 = load i64, i64* %PC
  %2304 = add i64 %2303, 3
  store i64 %2304, i64* %PC
  store i64 %2302, i64* %RCX, align 8, !tbaa !2428
  %2305 = load i64, i64* %RCX
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 4
  store i64 %2307, i64* %PC
  %2308 = add i64 4, %2305
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = icmp ult i64 %2308, %2305
  %2310 = icmp ult i64 %2308, 4
  %2311 = or i1 %2309, %2310
  %2312 = zext i1 %2311 to i8
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2312, i8* %2313, align 1, !tbaa !2432
  %2314 = trunc i64 %2308 to i32
  %2315 = and i32 %2314, 255
  %2316 = call i32 @llvm.ctpop.i32(i32 %2315) #16
  %2317 = trunc i32 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = xor i8 %2318, 1
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2319, i8* %2320, align 1, !tbaa !2446
  %2321 = xor i64 4, %2305
  %2322 = xor i64 %2321, %2308
  %2323 = lshr i64 %2322, 4
  %2324 = trunc i64 %2323 to i8
  %2325 = and i8 %2324, 1
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2325, i8* %2326, align 1, !tbaa !2447
  %2327 = icmp eq i64 %2308, 0
  %2328 = zext i1 %2327 to i8
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2328, i8* %2329, align 1, !tbaa !2448
  %2330 = lshr i64 %2308, 63
  %2331 = trunc i64 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2331, i8* %2332, align 1, !tbaa !2449
  %2333 = lshr i64 %2305, 63
  %2334 = xor i64 %2330, %2333
  %2335 = add nuw nsw i64 %2334, %2330
  %2336 = icmp eq i64 %2335, 2
  %2337 = zext i1 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2337, i8* %2338, align 1, !tbaa !2450
  %2339 = load i64, i64* %RBP
  %2340 = sub i64 %2339, 8
  %2341 = load i64, i64* %RCX
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 4
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2340 to i64*
  store i64 %2341, i64* %2344
  %2345 = load i64, i64* %RAX
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 3
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sext i32 %2349 to i64
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RAX
  %2352 = mul i64 %2351, 8
  %2353 = add i64 %2352, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 8
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to i64*
  %2357 = load i64, i64* %2356
  store i64 %2357, i64* %RAX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RBP
  %2359 = sub i64 %2358, 40
  %2360 = load i64, i64* %RAX
  %2361 = load i64, i64* %PC
  %2362 = add i64 %2361, 4
  store i64 %2362, i64* %PC
  %2363 = inttoptr i64 %2359 to i64*
  store i64 %2360, i64* %2363
  %2364 = load i64, i64* %PC
  %2365 = sub i64 %2364, 601
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 5
  store i64 %2367, i64* %PC
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2365, i64* %2368, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2369 = load i64, i64* %RBP
  %2370 = sub i64 %2369, 12
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 7
  store i64 %2372, i64* %PC
  %2373 = inttoptr i64 %2370 to i32*
  store i32 17, i32* %2373
  %2374 = load i64, i64* %RBP
  %2375 = sub i64 %2374, 12
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 3
  store i64 %2377, i64* %PC
  %2378 = inttoptr i64 %2375 to i32*
  %2379 = load i32, i32* %2378
  %2380 = zext i32 %2379 to i64
  store i64 %2380, i64* %RDI, align 8, !tbaa !2428
  %2381 = load i64, i64* %PC
  %2382 = sub i64 %2381, 934
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 5
  %2385 = load i64, i64* %PC
  %2386 = add i64 %2385, 5
  store i64 %2386, i64* %PC
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2388 = load i64, i64* %2387, align 8, !tbaa !2428
  %2389 = add i64 %2388, -8
  %2390 = inttoptr i64 %2389 to i64*
  store i64 %2384, i64* %2390
  store i64 %2389, i64* %2387, align 8, !tbaa !2428
  %2391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2382, i64* %2391, align 8, !tbaa !2428
  %2392 = load i64, i64* %PC
  %2393 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2392, %struct.Memory* %MEMORY.0)
  %2394 = load i64, i64* %RBP
  %2395 = sub i64 %2394, 8
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 4
  store i64 %2397, i64* %PC
  %2398 = inttoptr i64 %2395 to i64*
  %2399 = load i64, i64* %2398
  store i64 %2399, i64* %RAX, align 8, !tbaa !2428
  %2400 = load i64, i64* %RAX
  %2401 = load i64, i64* %PC
  %2402 = add i64 %2401, 3
  store i64 %2402, i64* %PC
  store i64 %2400, i64* %RCX, align 8, !tbaa !2428
  %2403 = load i64, i64* %RCX
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 4
  store i64 %2405, i64* %PC
  %2406 = add i64 4, %2403
  store i64 %2406, i64* %RCX, align 8, !tbaa !2428
  %2407 = icmp ult i64 %2406, %2403
  %2408 = icmp ult i64 %2406, 4
  %2409 = or i1 %2407, %2408
  %2410 = zext i1 %2409 to i8
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2410, i8* %2411, align 1, !tbaa !2432
  %2412 = trunc i64 %2406 to i32
  %2413 = and i32 %2412, 255
  %2414 = call i32 @llvm.ctpop.i32(i32 %2413) #16
  %2415 = trunc i32 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = xor i8 %2416, 1
  %2418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2417, i8* %2418, align 1, !tbaa !2446
  %2419 = xor i64 4, %2403
  %2420 = xor i64 %2419, %2406
  %2421 = lshr i64 %2420, 4
  %2422 = trunc i64 %2421 to i8
  %2423 = and i8 %2422, 1
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2423, i8* %2424, align 1, !tbaa !2447
  %2425 = icmp eq i64 %2406, 0
  %2426 = zext i1 %2425 to i8
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2426, i8* %2427, align 1, !tbaa !2448
  %2428 = lshr i64 %2406, 63
  %2429 = trunc i64 %2428 to i8
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2429, i8* %2430, align 1, !tbaa !2449
  %2431 = lshr i64 %2403, 63
  %2432 = xor i64 %2428, %2431
  %2433 = add nuw nsw i64 %2432, %2428
  %2434 = icmp eq i64 %2433, 2
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2435, i8* %2436, align 1, !tbaa !2450
  %2437 = load i64, i64* %RBP
  %2438 = sub i64 %2437, 8
  %2439 = load i64, i64* %RCX
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 4
  store i64 %2441, i64* %PC
  %2442 = inttoptr i64 %2438 to i64*
  store i64 %2439, i64* %2442
  %2443 = load i64, i64* %RAX
  %2444 = load i64, i64* %PC
  %2445 = add i64 %2444, 3
  store i64 %2445, i64* %PC
  %2446 = inttoptr i64 %2443 to i32*
  %2447 = load i32, i32* %2446
  %2448 = sext i32 %2447 to i64
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RAX
  %2450 = mul i64 %2449, 8
  %2451 = add i64 %2450, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 8
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2451 to i64*
  %2455 = load i64, i64* %2454
  store i64 %2455, i64* %RAX, align 8, !tbaa !2428
  %2456 = load i64, i64* %RBP
  %2457 = sub i64 %2456, 40
  %2458 = load i64, i64* %RAX
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 4
  store i64 %2460, i64* %PC
  %2461 = inttoptr i64 %2457 to i64*
  store i64 %2458, i64* %2461
  %2462 = load i64, i64* %PC
  %2463 = sub i64 %2462, 851
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 5
  store i64 %2465, i64* %PC
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2463, i64* %2466, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 12
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 7
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i32*
  store i32 22, i32* %2471
  %2472 = load i64, i64* %PC
  %2473 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2472, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2473

block_400602:                                     ; preds = %block_400566
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 12
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 7
  store i64 %2477, i64* %PC
  %2478 = inttoptr i64 %2475 to i32*
  store i32 4, i32* %2478
  %2479 = load i64, i64* %PC
  %2480 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2479, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2480

block_400a80:                                     ; preds = %block_400566
  %2481 = load i64, i64* %RBP
  %2482 = sub i64 %2481, 12
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 7
  store i64 %2484, i64* %PC
  %2485 = inttoptr i64 %2482 to i32*
  store i32 27, i32* %2485
  %2486 = load i64, i64* %PC
  %2487 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2486, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2487

; <label>:2488:                                   ; preds = %block_400566
  %2489 = load i64, i64* %PC
  %2490 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2489, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2490
}

; Function Attrs: noinline
define %struct.Memory* @sub_40098d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_40098d

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 26, i32* %1013
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDI, align 8, !tbaa !2428
  %1021 = load i64, i64* %PC
  %1022 = sub i64 %1021, 1384
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  store i64 %1026, i64* %PC
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1028 = load i64, i64* %1027, align 8, !tbaa !2428
  %1029 = add i64 %1028, -8
  %1030 = inttoptr i64 %1029 to i64*
  store i64 %1024, i64* %1030
  store i64 %1029, i64* %1027, align 8, !tbaa !2428
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1022, i64* %1031, align 8, !tbaa !2428
  %1032 = load i64, i64* %PC
  %1033 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1032, %struct.Memory* %MEMORY.0)
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 8
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RCX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = add i64 4, %1043
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  %1047 = icmp ult i64 %1046, %1043
  %1048 = icmp ult i64 %1046, 4
  %1049 = or i1 %1047, %1048
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = trunc i64 %1046 to i32
  %1053 = and i32 %1052, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i64 4, %1043
  %1060 = xor i64 %1059, %1046
  %1061 = lshr i64 %1060, 4
  %1062 = trunc i64 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i64 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i64 %1046, 63
  %1069 = trunc i64 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i64 %1043, 63
  %1072 = xor i64 %1068, %1071
  %1073 = add nuw nsw i64 %1072, %1068
  %1074 = icmp eq i64 %1073, 2
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1075, i8* %1076, align 1, !tbaa !2450
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 8
  %1079 = load i64, i64* %RCX
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 4
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1078 to i64*
  store i64 %1079, i64* %1082
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = mul i64 %1089, 8
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  %1095 = load i64, i64* %1094
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 40
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1097 to i64*
  store i64 %1098, i64* %1101
  %1102 = load i64, i64* %PC
  %1103 = sub i64 %1102, 1301
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 7
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  store i32 8, i32* %1111
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = load i64, i64* %PC
  %1120 = sub i64 %1119, 484
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1126 = load i64, i64* %1125, align 8, !tbaa !2428
  %1127 = add i64 %1126, -8
  %1128 = inttoptr i64 %1127 to i64*
  store i64 %1122, i64* %1128
  store i64 %1127, i64* %1125, align 8, !tbaa !2428
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1120, i64* %1129, align 8, !tbaa !2428
  %1130 = load i64, i64* %PC
  %1131 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1130, %struct.Memory* %MEMORY.0)
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 8
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  store i64 %1138, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = add i64 4, %1141
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1145 = icmp ult i64 %1144, %1141
  %1146 = icmp ult i64 %1144, 4
  %1147 = or i1 %1145, %1146
  %1148 = zext i1 %1147 to i8
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1148, i8* %1149, align 1, !tbaa !2432
  %1150 = trunc i64 %1144 to i32
  %1151 = and i32 %1150, 255
  %1152 = call i32 @llvm.ctpop.i32(i32 %1151) #16
  %1153 = trunc i32 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = xor i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1155, i8* %1156, align 1, !tbaa !2446
  %1157 = xor i64 4, %1141
  %1158 = xor i64 %1157, %1144
  %1159 = lshr i64 %1158, 4
  %1160 = trunc i64 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1161, i8* %1162, align 1, !tbaa !2447
  %1163 = icmp eq i64 %1144, 0
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1164, i8* %1165, align 1, !tbaa !2448
  %1166 = lshr i64 %1144, 63
  %1167 = trunc i64 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = lshr i64 %1141, 63
  %1170 = xor i64 %1166, %1169
  %1171 = add nuw nsw i64 %1170, %1166
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 8
  %1177 = load i64, i64* %RCX
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1176 to i64*
  store i64 %1177, i64* %1180
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184
  %1186 = sext i32 %1185 to i64
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i64, i64* %RAX
  %1188 = mul i64 %1187, 8
  %1189 = add i64 %1188, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 8
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i64*
  %1193 = load i64, i64* %1192
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RBP
  %1195 = sub i64 %1194, 40
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1195 to i64*
  store i64 %1196, i64* %1199
  %1200 = load i64, i64* %PC
  %1201 = sub i64 %1200, 401
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1201, i64* %1204, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 7
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  store i32 31, i32* %1209
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  %1215 = load i32, i32* %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load i64, i64* %PC
  %1218 = sub i64 %1217, 1634
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %MEMORY.0)
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 8
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RAX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RCX
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = add i64 4, %1239
  store i64 %1242, i64* %RCX, align 8, !tbaa !2428
  %1243 = icmp ult i64 %1242, %1239
  %1244 = icmp ult i64 %1242, 4
  %1245 = or i1 %1243, %1244
  %1246 = zext i1 %1245 to i8
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1246, i8* %1247, align 1, !tbaa !2432
  %1248 = trunc i64 %1242 to i32
  %1249 = and i32 %1248, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = xor i64 4, %1239
  %1256 = xor i64 %1255, %1242
  %1257 = lshr i64 %1256, 4
  %1258 = trunc i64 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = icmp eq i64 %1242, 0
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = lshr i64 %1242, 63
  %1265 = trunc i64 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i64 %1239, 63
  %1268 = xor i64 %1264, %1267
  %1269 = add nuw nsw i64 %1268, %1264
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1271, i8* %1272, align 1, !tbaa !2450
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 8
  %1275 = load i64, i64* %RCX
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = sext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = mul i64 %1285, 8
  %1287 = add i64 %1286, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 8
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1287 to i64*
  %1291 = load i64, i64* %1290
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 40
  %1294 = load i64, i64* %RAX
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1293 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %PC
  %1299 = sub i64 %1298, 1551
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1299, i64* %1302, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 7
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  store i32 13, i32* %1307
  %1308 = load i64, i64* %PC
  %1309 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %1308, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1309

block_4008be:                                     ; preds = %block_400566
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 12
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 7
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  store i32 18, i32* %1314
  %1315 = load i64, i64* %PC
  %1316 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1315, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1316

block_4009b8:                                     ; preds = %block_400566
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 7
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  store i32 23, i32* %1321
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 12
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 3
  store i64 %1325, i64* %PC
  %1326 = inttoptr i64 %1323 to i32*
  %1327 = load i32, i32* %1326
  %1328 = zext i32 %1327 to i64
  store i64 %1328, i64* %RDI, align 8, !tbaa !2428
  %1329 = load i64, i64* %PC
  %1330 = sub i64 %1329, 1234
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 5
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  store i64 %1334, i64* %PC
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1336 = load i64, i64* %1335, align 8, !tbaa !2428
  %1337 = add i64 %1336, -8
  %1338 = inttoptr i64 %1337 to i64*
  store i64 %1332, i64* %1338
  store i64 %1337, i64* %1335, align 8, !tbaa !2428
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1330, i64* %1339, align 8, !tbaa !2428
  %1340 = load i64, i64* %PC
  %1341 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1340, %struct.Memory* %MEMORY.0)
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 8
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1343 to i64*
  %1347 = load i64, i64* %1346
  store i64 %1347, i64* %RAX, align 8, !tbaa !2428
  %1348 = load i64, i64* %RAX
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 3
  store i64 %1350, i64* %PC
  store i64 %1348, i64* %RCX, align 8, !tbaa !2428
  %1351 = load i64, i64* %RCX
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 4
  store i64 %1353, i64* %PC
  %1354 = add i64 4, %1351
  store i64 %1354, i64* %RCX, align 8, !tbaa !2428
  %1355 = icmp ult i64 %1354, %1351
  %1356 = icmp ult i64 %1354, 4
  %1357 = or i1 %1355, %1356
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1358, i8* %1359, align 1, !tbaa !2432
  %1360 = trunc i64 %1354 to i32
  %1361 = and i32 %1360, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #16
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i64 4, %1351
  %1368 = xor i64 %1367, %1354
  %1369 = lshr i64 %1368, 4
  %1370 = trunc i64 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2447
  %1373 = icmp eq i64 %1354, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2448
  %1376 = lshr i64 %1354, 63
  %1377 = trunc i64 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2449
  %1379 = lshr i64 %1351, 63
  %1380 = xor i64 %1376, %1379
  %1381 = add nuw nsw i64 %1380, %1376
  %1382 = icmp eq i64 %1381, 2
  %1383 = zext i1 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1383, i8* %1384, align 1, !tbaa !2450
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 8
  %1387 = load i64, i64* %RCX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %RAX
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sext i32 %1395 to i64
  store i64 %1396, i64* %RAX, align 8, !tbaa !2428
  %1397 = load i64, i64* %RAX
  %1398 = mul i64 %1397, 8
  %1399 = add i64 %1398, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 8
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i64*
  %1403 = load i64, i64* %1402
  store i64 %1403, i64* %RAX, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 40
  %1406 = load i64, i64* %RAX
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC
  %1409 = inttoptr i64 %1405 to i64*
  store i64 %1406, i64* %1409
  %1410 = load i64, i64* %PC
  %1411 = sub i64 %1410, 1151
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 5
  store i64 %1413, i64* %PC
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1411, i64* %1414, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 7
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  store i32 5, i32* %1419
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 12
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 3
  store i64 %1423, i64* %PC
  %1424 = inttoptr i64 %1421 to i32*
  %1425 = load i32, i32* %1424
  %1426 = zext i32 %1425 to i64
  store i64 %1426, i64* %RDI, align 8, !tbaa !2428
  %1427 = load i64, i64* %PC
  %1428 = sub i64 %1427, 334
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 5
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 5
  store i64 %1432, i64* %PC
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1434 = load i64, i64* %1433, align 8, !tbaa !2428
  %1435 = add i64 %1434, -8
  %1436 = inttoptr i64 %1435 to i64*
  store i64 %1430, i64* %1436
  store i64 %1435, i64* %1433, align 8, !tbaa !2428
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1428, i64* %1437, align 8, !tbaa !2428
  %1438 = load i64, i64* %PC
  %1439 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1438, %struct.Memory* %MEMORY.0)
  %1440 = load i64, i64* %RBP
  %1441 = sub i64 %1440, 8
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1441 to i64*
  %1445 = load i64, i64* %1444
  store i64 %1445, i64* %RAX, align 8, !tbaa !2428
  %1446 = load i64, i64* %RAX
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 3
  store i64 %1448, i64* %PC
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RCX
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 4
  store i64 %1451, i64* %PC
  %1452 = add i64 4, %1449
  store i64 %1452, i64* %RCX, align 8, !tbaa !2428
  %1453 = icmp ult i64 %1452, %1449
  %1454 = icmp ult i64 %1452, 4
  %1455 = or i1 %1453, %1454
  %1456 = zext i1 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1456, i8* %1457, align 1, !tbaa !2432
  %1458 = trunc i64 %1452 to i32
  %1459 = and i32 %1458, 255
  %1460 = call i32 @llvm.ctpop.i32(i32 %1459) #16
  %1461 = trunc i32 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = xor i8 %1462, 1
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1463, i8* %1464, align 1, !tbaa !2446
  %1465 = xor i64 4, %1449
  %1466 = xor i64 %1465, %1452
  %1467 = lshr i64 %1466, 4
  %1468 = trunc i64 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1469, i8* %1470, align 1, !tbaa !2447
  %1471 = icmp eq i64 %1452, 0
  %1472 = zext i1 %1471 to i8
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1472, i8* %1473, align 1, !tbaa !2448
  %1474 = lshr i64 %1452, 63
  %1475 = trunc i64 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1475, i8* %1476, align 1, !tbaa !2449
  %1477 = lshr i64 %1449, 63
  %1478 = xor i64 %1474, %1477
  %1479 = add nuw nsw i64 %1478, %1474
  %1480 = icmp eq i64 %1479, 2
  %1481 = zext i1 %1480 to i8
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1481, i8* %1482, align 1, !tbaa !2450
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 8
  %1485 = load i64, i64* %RCX
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 4
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1484 to i64*
  store i64 %1485, i64* %1488
  %1489 = load i64, i64* %RAX
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 3
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = sext i32 %1493 to i64
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RAX
  %1496 = mul i64 %1495, 8
  %1497 = add i64 %1496, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 8
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to i64*
  %1501 = load i64, i64* %1500
  store i64 %1501, i64* %RAX, align 8, !tbaa !2428
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 40
  %1504 = load i64, i64* %RAX
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 4
  store i64 %1506, i64* %PC
  %1507 = inttoptr i64 %1503 to i64*
  store i64 %1504, i64* %1507
  %1508 = load i64, i64* %PC
  %1509 = sub i64 %1508, 251
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1509, i64* %1512, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 7
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  store i32 28, i32* %1517
  %1518 = load i64, i64* %RBP
  %1519 = sub i64 %1518, 12
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 3
  store i64 %1521, i64* %PC
  %1522 = inttoptr i64 %1519 to i32*
  %1523 = load i32, i32* %1522
  %1524 = zext i32 %1523 to i64
  store i64 %1524, i64* %RDI, align 8, !tbaa !2428
  %1525 = load i64, i64* %PC
  %1526 = sub i64 %1525, 1484
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 5
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 5
  store i64 %1530, i64* %PC
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1532 = load i64, i64* %1531, align 8, !tbaa !2428
  %1533 = add i64 %1532, -8
  %1534 = inttoptr i64 %1533 to i64*
  store i64 %1528, i64* %1534
  store i64 %1533, i64* %1531, align 8, !tbaa !2428
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1526, i64* %1535, align 8, !tbaa !2428
  %1536 = load i64, i64* %PC
  %1537 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1536, %struct.Memory* %MEMORY.0)
  %1538 = load i64, i64* %RBP
  %1539 = sub i64 %1538, 8
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1539 to i64*
  %1543 = load i64, i64* %1542
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 3
  store i64 %1546, i64* %PC
  store i64 %1544, i64* %RCX, align 8, !tbaa !2428
  %1547 = load i64, i64* %RCX
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = add i64 4, %1547
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = icmp ult i64 %1550, %1547
  %1552 = icmp ult i64 %1550, 4
  %1553 = or i1 %1551, %1552
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1554, i8* %1555, align 1, !tbaa !2432
  %1556 = trunc i64 %1550 to i32
  %1557 = and i32 %1556, 255
  %1558 = call i32 @llvm.ctpop.i32(i32 %1557) #16
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = xor i8 %1560, 1
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1561, i8* %1562, align 1, !tbaa !2446
  %1563 = xor i64 4, %1547
  %1564 = xor i64 %1563, %1550
  %1565 = lshr i64 %1564, 4
  %1566 = trunc i64 %1565 to i8
  %1567 = and i8 %1566, 1
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1567, i8* %1568, align 1, !tbaa !2447
  %1569 = icmp eq i64 %1550, 0
  %1570 = zext i1 %1569 to i8
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1570, i8* %1571, align 1, !tbaa !2448
  %1572 = lshr i64 %1550, 63
  %1573 = trunc i64 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1573, i8* %1574, align 1, !tbaa !2449
  %1575 = lshr i64 %1547, 63
  %1576 = xor i64 %1572, %1575
  %1577 = add nuw nsw i64 %1576, %1572
  %1578 = icmp eq i64 %1577, 2
  %1579 = zext i1 %1578 to i8
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1579, i8* %1580, align 1, !tbaa !2450
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 8
  %1583 = load i64, i64* %RCX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1582 to i64*
  store i64 %1583, i64* %1586
  %1587 = load i64, i64* %RAX
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 3
  store i64 %1589, i64* %PC
  %1590 = inttoptr i64 %1587 to i32*
  %1591 = load i32, i32* %1590
  %1592 = sext i32 %1591 to i64
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RAX
  %1594 = mul i64 %1593, 8
  %1595 = add i64 %1594, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 8
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to i64*
  %1599 = load i64, i64* %1598
  store i64 %1599, i64* %RAX, align 8, !tbaa !2428
  %1600 = load i64, i64* %RBP
  %1601 = sub i64 %1600, 40
  %1602 = load i64, i64* %RAX
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 4
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1601 to i64*
  store i64 %1602, i64* %1605
  %1606 = load i64, i64* %PC
  %1607 = sub i64 %1606, 1401
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1607, i64* %1610, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 12
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 7
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  store i32 0, i32* %1615
  %1616 = load i64, i64* %RSP
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 4
  store i64 %1618, i64* %PC
  %1619 = add i64 48, %1616
  store i64 %1619, i64* %RSP, align 8, !tbaa !2428
  %1620 = icmp ult i64 %1619, %1616
  %1621 = icmp ult i64 %1619, 48
  %1622 = or i1 %1620, %1621
  %1623 = zext i1 %1622 to i8
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1623, i8* %1624, align 1, !tbaa !2432
  %1625 = trunc i64 %1619 to i32
  %1626 = and i32 %1625, 255
  %1627 = call i32 @llvm.ctpop.i32(i32 %1626) #16
  %1628 = trunc i32 %1627 to i8
  %1629 = and i8 %1628, 1
  %1630 = xor i8 %1629, 1
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1630, i8* %1631, align 1, !tbaa !2446
  %1632 = xor i64 48, %1616
  %1633 = xor i64 %1632, %1619
  %1634 = lshr i64 %1633, 4
  %1635 = trunc i64 %1634 to i8
  %1636 = and i8 %1635, 1
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1636, i8* %1637, align 1, !tbaa !2447
  %1638 = icmp eq i64 %1619, 0
  %1639 = zext i1 %1638 to i8
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1639, i8* %1640, align 1, !tbaa !2448
  %1641 = lshr i64 %1619, 63
  %1642 = trunc i64 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1642, i8* %1643, align 1, !tbaa !2449
  %1644 = lshr i64 %1616, 63
  %1645 = xor i64 %1641, %1644
  %1646 = add nuw nsw i64 %1645, %1641
  %1647 = icmp eq i64 %1646, 2
  %1648 = zext i1 %1647 to i8
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1648, i8* %1649, align 1, !tbaa !2450
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 1
  store i64 %1651, i64* %PC
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1653 = load i64, i64* %1652, align 8, !tbaa !2428
  %1654 = add i64 %1653, 8
  %1655 = inttoptr i64 %1653 to i64*
  %1656 = load i64, i64* %1655
  store i64 %1656, i64* %RBP, align 8, !tbaa !2428
  store i64 %1654, i64* %1652, align 8, !tbaa !2428
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 1
  store i64 %1658, i64* %PC
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1661 = load i64, i64* %1660, align 8, !tbaa !2428
  %1662 = inttoptr i64 %1661 to i64*
  %1663 = load i64, i64* %1662
  store i64 %1663, i64* %1659, align 8, !tbaa !2428
  %1664 = add i64 %1661, 8
  store i64 %1664, i64* %1660, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 12
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 7
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  store i32 10, i32* %1669
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 12
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RDI, align 8, !tbaa !2428
  %1677 = load i64, i64* %PC
  %1678 = sub i64 %1677, 584
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 5
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 5
  store i64 %1682, i64* %PC
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1684 = load i64, i64* %1683, align 8, !tbaa !2428
  %1685 = add i64 %1684, -8
  %1686 = inttoptr i64 %1685 to i64*
  store i64 %1680, i64* %1686
  store i64 %1685, i64* %1683, align 8, !tbaa !2428
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1678, i64* %1687, align 8, !tbaa !2428
  %1688 = load i64, i64* %PC
  %1689 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1688, %struct.Memory* %MEMORY.0)
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 8
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 4
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i64*
  %1695 = load i64, i64* %1694
  store i64 %1695, i64* %RAX, align 8, !tbaa !2428
  %1696 = load i64, i64* %RAX
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  store i64 %1696, i64* %RCX, align 8, !tbaa !2428
  %1699 = load i64, i64* %RCX
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = add i64 4, %1699
  store i64 %1702, i64* %RCX, align 8, !tbaa !2428
  %1703 = icmp ult i64 %1702, %1699
  %1704 = icmp ult i64 %1702, 4
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1706, i8* %1707, align 1, !tbaa !2432
  %1708 = trunc i64 %1702 to i32
  %1709 = and i32 %1708, 255
  %1710 = call i32 @llvm.ctpop.i32(i32 %1709) #16
  %1711 = trunc i32 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = xor i8 %1712, 1
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1713, i8* %1714, align 1, !tbaa !2446
  %1715 = xor i64 4, %1699
  %1716 = xor i64 %1715, %1702
  %1717 = lshr i64 %1716, 4
  %1718 = trunc i64 %1717 to i8
  %1719 = and i8 %1718, 1
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1719, i8* %1720, align 1, !tbaa !2447
  %1721 = icmp eq i64 %1702, 0
  %1722 = zext i1 %1721 to i8
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1722, i8* %1723, align 1, !tbaa !2448
  %1724 = lshr i64 %1702, 63
  %1725 = trunc i64 %1724 to i8
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1725, i8* %1726, align 1, !tbaa !2449
  %1727 = lshr i64 %1699, 63
  %1728 = xor i64 %1724, %1727
  %1729 = add nuw nsw i64 %1728, %1724
  %1730 = icmp eq i64 %1729, 2
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1731, i8* %1732, align 1, !tbaa !2450
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 8
  %1735 = load i64, i64* %RCX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1734 to i64*
  store i64 %1735, i64* %1738
  %1739 = load i64, i64* %RAX
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 3
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742
  %1744 = sext i32 %1743 to i64
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RAX
  %1746 = mul i64 %1745, 8
  %1747 = add i64 %1746, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 8
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RAX, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 40
  %1754 = load i64, i64* %RAX
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1753 to i64*
  store i64 %1754, i64* %1757
  %1758 = load i64, i64* %PC
  %1759 = sub i64 %1758, 501
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 5
  store i64 %1761, i64* %PC
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1759, i64* %1762, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 12
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  store i32 15, i32* %1767
  %1768 = load i64, i64* %RBP
  %1769 = sub i64 %1768, 12
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 3
  store i64 %1771, i64* %PC
  %1772 = inttoptr i64 %1769 to i32*
  %1773 = load i32, i32* %1772
  %1774 = zext i32 %1773 to i64
  store i64 %1774, i64* %RDI, align 8, !tbaa !2428
  %1775 = load i64, i64* %PC
  %1776 = sub i64 %1775, 834
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 5
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 5
  store i64 %1780, i64* %PC
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1782 = load i64, i64* %1781, align 8, !tbaa !2428
  %1783 = add i64 %1782, -8
  %1784 = inttoptr i64 %1783 to i64*
  store i64 %1778, i64* %1784
  store i64 %1783, i64* %1781, align 8, !tbaa !2428
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1776, i64* %1785, align 8, !tbaa !2428
  %1786 = load i64, i64* %PC
  %1787 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1786, %struct.Memory* %MEMORY.0)
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 8
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 4
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i64*
  %1793 = load i64, i64* %1792
  store i64 %1793, i64* %RAX, align 8, !tbaa !2428
  %1794 = load i64, i64* %RAX
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  store i64 %1794, i64* %RCX, align 8, !tbaa !2428
  %1797 = load i64, i64* %RCX
  %1798 = load i64, i64* %PC
  %1799 = add i64 %1798, 4
  store i64 %1799, i64* %PC
  %1800 = add i64 4, %1797
  store i64 %1800, i64* %RCX, align 8, !tbaa !2428
  %1801 = icmp ult i64 %1800, %1797
  %1802 = icmp ult i64 %1800, 4
  %1803 = or i1 %1801, %1802
  %1804 = zext i1 %1803 to i8
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1804, i8* %1805, align 1, !tbaa !2432
  %1806 = trunc i64 %1800 to i32
  %1807 = and i32 %1806, 255
  %1808 = call i32 @llvm.ctpop.i32(i32 %1807) #16
  %1809 = trunc i32 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = xor i8 %1810, 1
  %1812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1811, i8* %1812, align 1, !tbaa !2446
  %1813 = xor i64 4, %1797
  %1814 = xor i64 %1813, %1800
  %1815 = lshr i64 %1814, 4
  %1816 = trunc i64 %1815 to i8
  %1817 = and i8 %1816, 1
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1817, i8* %1818, align 1, !tbaa !2447
  %1819 = icmp eq i64 %1800, 0
  %1820 = zext i1 %1819 to i8
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1820, i8* %1821, align 1, !tbaa !2448
  %1822 = lshr i64 %1800, 63
  %1823 = trunc i64 %1822 to i8
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1823, i8* %1824, align 1, !tbaa !2449
  %1825 = lshr i64 %1797, 63
  %1826 = xor i64 %1822, %1825
  %1827 = add nuw nsw i64 %1826, %1822
  %1828 = icmp eq i64 %1827, 2
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1829, i8* %1830, align 1, !tbaa !2450
  %1831 = load i64, i64* %RBP
  %1832 = sub i64 %1831, 8
  %1833 = load i64, i64* %RCX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 4
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1832 to i64*
  store i64 %1833, i64* %1836
  %1837 = load i64, i64* %RAX
  %1838 = load i64, i64* %PC
  %1839 = add i64 %1838, 3
  store i64 %1839, i64* %PC
  %1840 = inttoptr i64 %1837 to i32*
  %1841 = load i32, i32* %1840
  %1842 = sext i32 %1841 to i64
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RAX
  %1844 = mul i64 %1843, 8
  %1845 = add i64 %1844, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 8
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 40
  %1852 = load i64, i64* %RAX
  %1853 = load i64, i64* %PC
  %1854 = add i64 %1853, 4
  store i64 %1854, i64* %PC
  %1855 = inttoptr i64 %1851 to i64*
  store i64 %1852, i64* %1855
  %1856 = load i64, i64* %PC
  %1857 = sub i64 %1856, 751
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 5
  store i64 %1859, i64* %PC
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1857, i64* %1860, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 12
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 7
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  store i32 20, i32* %1865
  %1866 = load i64, i64* %RBP
  %1867 = sub i64 %1866, 12
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 3
  store i64 %1869, i64* %PC
  %1870 = inttoptr i64 %1867 to i32*
  %1871 = load i32, i32* %1870
  %1872 = zext i32 %1871 to i64
  store i64 %1872, i64* %RDI, align 8, !tbaa !2428
  %1873 = load i64, i64* %PC
  %1874 = sub i64 %1873, 1084
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 5
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 5
  store i64 %1878, i64* %PC
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1880 = load i64, i64* %1879, align 8, !tbaa !2428
  %1881 = add i64 %1880, -8
  %1882 = inttoptr i64 %1881 to i64*
  store i64 %1876, i64* %1882
  store i64 %1881, i64* %1879, align 8, !tbaa !2428
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1874, i64* %1883, align 8, !tbaa !2428
  %1884 = load i64, i64* %PC
  %1885 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1884, %struct.Memory* %MEMORY.0)
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 8
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 4
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i64*
  %1891 = load i64, i64* %1890
  store i64 %1891, i64* %RAX, align 8, !tbaa !2428
  %1892 = load i64, i64* %RAX
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  store i64 %1892, i64* %RCX, align 8, !tbaa !2428
  %1895 = load i64, i64* %RCX
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 4
  store i64 %1897, i64* %PC
  %1898 = add i64 4, %1895
  store i64 %1898, i64* %RCX, align 8, !tbaa !2428
  %1899 = icmp ult i64 %1898, %1895
  %1900 = icmp ult i64 %1898, 4
  %1901 = or i1 %1899, %1900
  %1902 = zext i1 %1901 to i8
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1902, i8* %1903, align 1, !tbaa !2432
  %1904 = trunc i64 %1898 to i32
  %1905 = and i32 %1904, 255
  %1906 = call i32 @llvm.ctpop.i32(i32 %1905) #16
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = xor i8 %1908, 1
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1909, i8* %1910, align 1, !tbaa !2446
  %1911 = xor i64 4, %1895
  %1912 = xor i64 %1911, %1898
  %1913 = lshr i64 %1912, 4
  %1914 = trunc i64 %1913 to i8
  %1915 = and i8 %1914, 1
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1915, i8* %1916, align 1, !tbaa !2447
  %1917 = icmp eq i64 %1898, 0
  %1918 = zext i1 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1918, i8* %1919, align 1, !tbaa !2448
  %1920 = lshr i64 %1898, 63
  %1921 = trunc i64 %1920 to i8
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1921, i8* %1922, align 1, !tbaa !2449
  %1923 = lshr i64 %1895, 63
  %1924 = xor i64 %1920, %1923
  %1925 = add nuw nsw i64 %1924, %1920
  %1926 = icmp eq i64 %1925, 2
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 8
  %1931 = load i64, i64* %RCX
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 4
  store i64 %1933, i64* %PC
  %1934 = inttoptr i64 %1930 to i64*
  store i64 %1931, i64* %1934
  %1935 = load i64, i64* %RAX
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 3
  store i64 %1937, i64* %PC
  %1938 = inttoptr i64 %1935 to i32*
  %1939 = load i32, i32* %1938
  %1940 = sext i32 %1939 to i64
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = load i64, i64* %RAX
  %1942 = mul i64 %1941, 8
  %1943 = add i64 %1942, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 8
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1943 to i64*
  %1947 = load i64, i64* %1946
  store i64 %1947, i64* %RAX, align 8, !tbaa !2428
  %1948 = load i64, i64* %RBP
  %1949 = sub i64 %1948, 40
  %1950 = load i64, i64* %RAX
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 4
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1949 to i64*
  store i64 %1950, i64* %1953
  %1954 = load i64, i64* %PC
  %1955 = sub i64 %1954, 1001
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 5
  store i64 %1957, i64* %PC
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1955, i64* %1958, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1959 = load i64, i64* %RBP
  %1960 = sub i64 %1959, 12
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 7
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  store i32 2, i32* %1963
  %1964 = load i64, i64* %RBP
  %1965 = sub i64 %1964, 12
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 3
  store i64 %1967, i64* %PC
  %1968 = inttoptr i64 %1965 to i32*
  %1969 = load i32, i32* %1968
  %1970 = zext i32 %1969 to i64
  store i64 %1970, i64* %RDI, align 8, !tbaa !2428
  %1971 = load i64, i64* %PC
  %1972 = sub i64 %1971, 184
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 5
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 5
  store i64 %1976, i64* %PC
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1978 = load i64, i64* %1977, align 8, !tbaa !2428
  %1979 = add i64 %1978, -8
  %1980 = inttoptr i64 %1979 to i64*
  store i64 %1974, i64* %1980
  store i64 %1979, i64* %1977, align 8, !tbaa !2428
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1972, i64* %1981, align 8, !tbaa !2428
  %1982 = load i64, i64* %PC
  %1983 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1982, %struct.Memory* %MEMORY.0)
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 8
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 4
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i64*
  %1989 = load i64, i64* %1988
  store i64 %1989, i64* %RAX, align 8, !tbaa !2428
  %1990 = load i64, i64* %RAX
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  store i64 %1990, i64* %RCX, align 8, !tbaa !2428
  %1993 = load i64, i64* %RCX
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 4
  store i64 %1995, i64* %PC
  %1996 = add i64 4, %1993
  store i64 %1996, i64* %RCX, align 8, !tbaa !2428
  %1997 = icmp ult i64 %1996, %1993
  %1998 = icmp ult i64 %1996, 4
  %1999 = or i1 %1997, %1998
  %2000 = zext i1 %1999 to i8
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2000, i8* %2001, align 1, !tbaa !2432
  %2002 = trunc i64 %1996 to i32
  %2003 = and i32 %2002, 255
  %2004 = call i32 @llvm.ctpop.i32(i32 %2003) #16
  %2005 = trunc i32 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = xor i8 %2006, 1
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2007, i8* %2008, align 1, !tbaa !2446
  %2009 = xor i64 4, %1993
  %2010 = xor i64 %2009, %1996
  %2011 = lshr i64 %2010, 4
  %2012 = trunc i64 %2011 to i8
  %2013 = and i8 %2012, 1
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2013, i8* %2014, align 1, !tbaa !2447
  %2015 = icmp eq i64 %1996, 0
  %2016 = zext i1 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2016, i8* %2017, align 1, !tbaa !2448
  %2018 = lshr i64 %1996, 63
  %2019 = trunc i64 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2019, i8* %2020, align 1, !tbaa !2449
  %2021 = lshr i64 %1993, 63
  %2022 = xor i64 %2018, %2021
  %2023 = add nuw nsw i64 %2022, %2018
  %2024 = icmp eq i64 %2023, 2
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2025, i8* %2026, align 1, !tbaa !2450
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 8
  %2029 = load i64, i64* %RCX
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 4
  store i64 %2031, i64* %PC
  %2032 = inttoptr i64 %2028 to i64*
  store i64 %2029, i64* %2032
  %2033 = load i64, i64* %RAX
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 3
  store i64 %2035, i64* %PC
  %2036 = inttoptr i64 %2033 to i32*
  %2037 = load i32, i32* %2036
  %2038 = sext i32 %2037 to i64
  store i64 %2038, i64* %RAX, align 8, !tbaa !2428
  %2039 = load i64, i64* %RAX
  %2040 = mul i64 %2039, 8
  %2041 = add i64 %2040, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 8
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = load i64, i64* %RBP
  %2047 = sub i64 %2046, 40
  %2048 = load i64, i64* %RAX
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 4
  store i64 %2050, i64* %PC
  %2051 = inttoptr i64 %2047 to i64*
  store i64 %2048, i64* %2051
  %2052 = load i64, i64* %PC
  %2053 = sub i64 %2052, 101
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 5
  store i64 %2055, i64* %PC
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2053, i64* %2056, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_40098d, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %2479, %block_40098d ], [ %1885, %block_400922 ], [ %1787, %block_400828 ], [ %1689, %block_40072e ], [ %1033, %block_400a4e ], [ %1537, %block_400ab2 ], [ %1439, %block_400634 ], [ %1341, %block_4009b8 ], [ %1229, %block_400b48 ], [ %1131, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %1983, %block_40059e ], [ %2092, %block_400a1c ], [ %2190, %block_400698 ], [ %2288, %block_400b16 ], [ %2386, %block_400792 ], [ %2577, %block_40088c ]
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 40
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 4
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i64*
  %2062 = load i64, i64* %2061
  store i64 %2062, i64* %RAX, align 8, !tbaa !2428
  %2063 = load i64, i64* %RAX
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 2
  store i64 %2065, i64* %PC
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2063, i64* %2066, align 8, !tbaa !2428
  %2067 = load i64, i64* %PC
  switch i64 %2067, label %2670 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 12
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 7
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  store i32 25, i32* %2072
  %2073 = load i64, i64* %RBP
  %2074 = sub i64 %2073, 12
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 3
  store i64 %2076, i64* %PC
  %2077 = inttoptr i64 %2074 to i32*
  %2078 = load i32, i32* %2077
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDI, align 8, !tbaa !2428
  %2080 = load i64, i64* %PC
  %2081 = sub i64 %2080, 1334
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 5
  store i64 %2085, i64* %PC
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2087 = load i64, i64* %2086, align 8, !tbaa !2428
  %2088 = add i64 %2087, -8
  %2089 = inttoptr i64 %2088 to i64*
  store i64 %2083, i64* %2089
  store i64 %2088, i64* %2086, align 8, !tbaa !2428
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2081, i64* %2090, align 8, !tbaa !2428
  %2091 = load i64, i64* %PC
  %2092 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2091, %struct.Memory* %MEMORY.0)
  %2093 = load i64, i64* %RBP
  %2094 = sub i64 %2093, 8
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 4
  store i64 %2096, i64* %PC
  %2097 = inttoptr i64 %2094 to i64*
  %2098 = load i64, i64* %2097
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = load i64, i64* %RAX
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 3
  store i64 %2101, i64* %PC
  store i64 %2099, i64* %RCX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RCX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = add i64 4, %2102
  store i64 %2105, i64* %RCX, align 8, !tbaa !2428
  %2106 = icmp ult i64 %2105, %2102
  %2107 = icmp ult i64 %2105, 4
  %2108 = or i1 %2106, %2107
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2109, i8* %2110, align 1, !tbaa !2432
  %2111 = trunc i64 %2105 to i32
  %2112 = and i32 %2111, 255
  %2113 = call i32 @llvm.ctpop.i32(i32 %2112) #16
  %2114 = trunc i32 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = xor i8 %2115, 1
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2116, i8* %2117, align 1, !tbaa !2446
  %2118 = xor i64 4, %2102
  %2119 = xor i64 %2118, %2105
  %2120 = lshr i64 %2119, 4
  %2121 = trunc i64 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2122, i8* %2123, align 1, !tbaa !2447
  %2124 = icmp eq i64 %2105, 0
  %2125 = zext i1 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2125, i8* %2126, align 1, !tbaa !2448
  %2127 = lshr i64 %2105, 63
  %2128 = trunc i64 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2128, i8* %2129, align 1, !tbaa !2449
  %2130 = lshr i64 %2102, 63
  %2131 = xor i64 %2127, %2130
  %2132 = add nuw nsw i64 %2131, %2127
  %2133 = icmp eq i64 %2132, 2
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2134, i8* %2135, align 1, !tbaa !2450
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 8
  %2138 = load i64, i64* %RCX
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 4
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2137 to i64*
  store i64 %2138, i64* %2141
  %2142 = load i64, i64* %RAX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RAX
  %2149 = mul i64 %2148, 8
  %2150 = add i64 %2149, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 8
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 40
  %2157 = load i64, i64* %RAX
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 4
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2156 to i64*
  store i64 %2157, i64* %2160
  %2161 = load i64, i64* %PC
  %2162 = sub i64 %2161, 1251
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 5
  store i64 %2164, i64* %PC
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2162, i64* %2165, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 12
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 7
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  store i32 7, i32* %2170
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 12
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to i32*
  %2176 = load i32, i32* %2175
  %2177 = zext i32 %2176 to i64
  store i64 %2177, i64* %RDI, align 8, !tbaa !2428
  %2178 = load i64, i64* %PC
  %2179 = sub i64 %2178, 434
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC
  %2184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2185 = load i64, i64* %2184, align 8, !tbaa !2428
  %2186 = add i64 %2185, -8
  %2187 = inttoptr i64 %2186 to i64*
  store i64 %2181, i64* %2187
  store i64 %2186, i64* %2184, align 8, !tbaa !2428
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2179, i64* %2188, align 8, !tbaa !2428
  %2189 = load i64, i64* %PC
  %2190 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2189, %struct.Memory* %MEMORY.0)
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 8
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i64*
  %2196 = load i64, i64* %2195
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RAX
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 3
  store i64 %2199, i64* %PC
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2200 = load i64, i64* %RCX
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 4
  store i64 %2202, i64* %PC
  %2203 = add i64 4, %2200
  store i64 %2203, i64* %RCX, align 8, !tbaa !2428
  %2204 = icmp ult i64 %2203, %2200
  %2205 = icmp ult i64 %2203, 4
  %2206 = or i1 %2204, %2205
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2207, i8* %2208, align 1, !tbaa !2432
  %2209 = trunc i64 %2203 to i32
  %2210 = and i32 %2209, 255
  %2211 = call i32 @llvm.ctpop.i32(i32 %2210) #16
  %2212 = trunc i32 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = xor i8 %2213, 1
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2214, i8* %2215, align 1, !tbaa !2446
  %2216 = xor i64 4, %2200
  %2217 = xor i64 %2216, %2203
  %2218 = lshr i64 %2217, 4
  %2219 = trunc i64 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2220, i8* %2221, align 1, !tbaa !2447
  %2222 = icmp eq i64 %2203, 0
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2223, i8* %2224, align 1, !tbaa !2448
  %2225 = lshr i64 %2203, 63
  %2226 = trunc i64 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2226, i8* %2227, align 1, !tbaa !2449
  %2228 = lshr i64 %2200, 63
  %2229 = xor i64 %2225, %2228
  %2230 = add nuw nsw i64 %2229, %2225
  %2231 = icmp eq i64 %2230, 2
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2232, i8* %2233, align 1, !tbaa !2450
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 8
  %2236 = load i64, i64* %RCX
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 4
  store i64 %2238, i64* %PC
  %2239 = inttoptr i64 %2235 to i64*
  store i64 %2236, i64* %2239
  %2240 = load i64, i64* %RAX
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i32*
  %2244 = load i32, i32* %2243
  %2245 = sext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RAX
  %2247 = mul i64 %2246, 8
  %2248 = add i64 %2247, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 8
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2248 to i64*
  %2252 = load i64, i64* %2251
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RBP
  %2254 = sub i64 %2253, 40
  %2255 = load i64, i64* %RAX
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 4
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2254 to i64*
  store i64 %2255, i64* %2258
  %2259 = load i64, i64* %PC
  %2260 = sub i64 %2259, 351
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 5
  store i64 %2262, i64* %PC
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2260, i64* %2263, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 12
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 7
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2265 to i32*
  store i32 30, i32* %2268
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 12
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 3
  store i64 %2272, i64* %PC
  %2273 = inttoptr i64 %2270 to i32*
  %2274 = load i32, i32* %2273
  %2275 = zext i32 %2274 to i64
  store i64 %2275, i64* %RDI, align 8, !tbaa !2428
  %2276 = load i64, i64* %PC
  %2277 = sub i64 %2276, 1584
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 5
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 5
  store i64 %2281, i64* %PC
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2283 = load i64, i64* %2282, align 8, !tbaa !2428
  %2284 = add i64 %2283, -8
  %2285 = inttoptr i64 %2284 to i64*
  store i64 %2279, i64* %2285
  store i64 %2284, i64* %2282, align 8, !tbaa !2428
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2277, i64* %2286, align 8, !tbaa !2428
  %2287 = load i64, i64* %PC
  %2288 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2287, %struct.Memory* %MEMORY.0)
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 8
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 4
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = load i64, i64* %RAX
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RCX
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 4
  store i64 %2300, i64* %PC
  %2301 = add i64 4, %2298
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = icmp ult i64 %2301, %2298
  %2303 = icmp ult i64 %2301, 4
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = trunc i64 %2301 to i32
  %2308 = and i32 %2307, 255
  %2309 = call i32 @llvm.ctpop.i32(i32 %2308) #16
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2312, i8* %2313, align 1, !tbaa !2446
  %2314 = xor i64 4, %2298
  %2315 = xor i64 %2314, %2301
  %2316 = lshr i64 %2315, 4
  %2317 = trunc i64 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2318, i8* %2319, align 1, !tbaa !2447
  %2320 = icmp eq i64 %2301, 0
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2321, i8* %2322, align 1, !tbaa !2448
  %2323 = lshr i64 %2301, 63
  %2324 = trunc i64 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2324, i8* %2325, align 1, !tbaa !2449
  %2326 = lshr i64 %2298, 63
  %2327 = xor i64 %2323, %2326
  %2328 = add nuw nsw i64 %2327, %2323
  %2329 = icmp eq i64 %2328, 2
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2330, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 8
  %2334 = load i64, i64* %RCX
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2333 to i64*
  store i64 %2334, i64* %2337
  %2338 = load i64, i64* %RAX
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 3
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341
  %2343 = sext i32 %2342 to i64
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = mul i64 %2344, 8
  %2346 = add i64 %2345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 8
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i64*
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 40
  %2353 = load i64, i64* %RAX
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2352 to i64*
  store i64 %2353, i64* %2356
  %2357 = load i64, i64* %PC
  %2358 = sub i64 %2357, 1501
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2358, i64* %2361, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 12
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i32*
  store i32 12, i32* %2366
  %2367 = load i64, i64* %RBP
  %2368 = sub i64 %2367, 12
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 3
  store i64 %2370, i64* %PC
  %2371 = inttoptr i64 %2368 to i32*
  %2372 = load i32, i32* %2371
  %2373 = zext i32 %2372 to i64
  store i64 %2373, i64* %RDI, align 8, !tbaa !2428
  %2374 = load i64, i64* %PC
  %2375 = sub i64 %2374, 684
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 5
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  store i64 %2379, i64* %PC
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2381 = load i64, i64* %2380, align 8, !tbaa !2428
  %2382 = add i64 %2381, -8
  %2383 = inttoptr i64 %2382 to i64*
  store i64 %2377, i64* %2383
  store i64 %2382, i64* %2380, align 8, !tbaa !2428
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2375, i64* %2384, align 8, !tbaa !2428
  %2385 = load i64, i64* %PC
  %2386 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2385, %struct.Memory* %MEMORY.0)
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 8
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 4
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to i64*
  %2392 = load i64, i64* %2391
  store i64 %2392, i64* %RAX, align 8, !tbaa !2428
  %2393 = load i64, i64* %RAX
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 3
  store i64 %2395, i64* %PC
  store i64 %2393, i64* %RCX, align 8, !tbaa !2428
  %2396 = load i64, i64* %RCX
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 4
  store i64 %2398, i64* %PC
  %2399 = add i64 4, %2396
  store i64 %2399, i64* %RCX, align 8, !tbaa !2428
  %2400 = icmp ult i64 %2399, %2396
  %2401 = icmp ult i64 %2399, 4
  %2402 = or i1 %2400, %2401
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2403, i8* %2404, align 1, !tbaa !2432
  %2405 = trunc i64 %2399 to i32
  %2406 = and i32 %2405, 255
  %2407 = call i32 @llvm.ctpop.i32(i32 %2406) #16
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = xor i8 %2409, 1
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2410, i8* %2411, align 1, !tbaa !2446
  %2412 = xor i64 4, %2396
  %2413 = xor i64 %2412, %2399
  %2414 = lshr i64 %2413, 4
  %2415 = trunc i64 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2416, i8* %2417, align 1, !tbaa !2447
  %2418 = icmp eq i64 %2399, 0
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2419, i8* %2420, align 1, !tbaa !2448
  %2421 = lshr i64 %2399, 63
  %2422 = trunc i64 %2421 to i8
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2422, i8* %2423, align 1, !tbaa !2449
  %2424 = lshr i64 %2396, 63
  %2425 = xor i64 %2421, %2424
  %2426 = add nuw nsw i64 %2425, %2421
  %2427 = icmp eq i64 %2426, 2
  %2428 = zext i1 %2427 to i8
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2428, i8* %2429, align 1, !tbaa !2450
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 8
  %2432 = load i64, i64* %RCX
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 4
  store i64 %2434, i64* %PC
  %2435 = inttoptr i64 %2431 to i64*
  store i64 %2432, i64* %2435
  %2436 = load i64, i64* %RAX
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %PC
  %2439 = inttoptr i64 %2436 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RAX
  %2443 = mul i64 %2442, 8
  %2444 = add i64 %2443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 8
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2444 to i64*
  %2448 = load i64, i64* %2447
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %RAX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 4
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2450 to i64*
  store i64 %2451, i64* %2454
  %2455 = load i64, i64* %PC
  %2456 = sub i64 %2455, 601
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 5
  store i64 %2458, i64* %PC
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2456, i64* %2459, align 8, !tbaa !2428
  br label %block_400566

block_40098d:                                     ; preds = %block_400986, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400986 ]
  %2460 = load i64, i64* %RBP
  %2461 = sub i64 %2460, 12
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 3
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to i32*
  %2465 = load i32, i32* %2464
  %2466 = zext i32 %2465 to i64
  store i64 %2466, i64* %RDI, align 8, !tbaa !2428
  %2467 = load i64, i64* %PC
  %2468 = sub i64 %2467, 1184
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 5
  store i64 %2472, i64* %PC
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2474 = load i64, i64* %2473, align 8, !tbaa !2428
  %2475 = add i64 %2474, -8
  %2476 = inttoptr i64 %2475 to i64*
  store i64 %2470, i64* %2476
  store i64 %2475, i64* %2473, align 8, !tbaa !2428
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2468, i64* %2477, align 8, !tbaa !2428
  %2478 = load i64, i64* %PC
  %2479 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2478, %struct.Memory* %MEMORY.1)
  %2480 = load i64, i64* %RBP
  %2481 = sub i64 %2480, 8
  %2482 = load i64, i64* %PC
  %2483 = add i64 %2482, 4
  store i64 %2483, i64* %PC
  %2484 = inttoptr i64 %2481 to i64*
  %2485 = load i64, i64* %2484
  store i64 %2485, i64* %RAX, align 8, !tbaa !2428
  %2486 = load i64, i64* %RAX
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 3
  store i64 %2488, i64* %PC
  store i64 %2486, i64* %RCX, align 8, !tbaa !2428
  %2489 = load i64, i64* %RCX
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 4
  store i64 %2491, i64* %PC
  %2492 = add i64 4, %2489
  store i64 %2492, i64* %RCX, align 8, !tbaa !2428
  %2493 = icmp ult i64 %2492, %2489
  %2494 = icmp ult i64 %2492, 4
  %2495 = or i1 %2493, %2494
  %2496 = zext i1 %2495 to i8
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2496, i8* %2497, align 1, !tbaa !2432
  %2498 = trunc i64 %2492 to i32
  %2499 = and i32 %2498, 255
  %2500 = call i32 @llvm.ctpop.i32(i32 %2499) #16
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  %2503 = xor i8 %2502, 1
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2503, i8* %2504, align 1, !tbaa !2446
  %2505 = xor i64 4, %2489
  %2506 = xor i64 %2505, %2492
  %2507 = lshr i64 %2506, 4
  %2508 = trunc i64 %2507 to i8
  %2509 = and i8 %2508, 1
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2509, i8* %2510, align 1, !tbaa !2447
  %2511 = icmp eq i64 %2492, 0
  %2512 = zext i1 %2511 to i8
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2512, i8* %2513, align 1, !tbaa !2448
  %2514 = lshr i64 %2492, 63
  %2515 = trunc i64 %2514 to i8
  %2516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2515, i8* %2516, align 1, !tbaa !2449
  %2517 = lshr i64 %2489, 63
  %2518 = xor i64 %2514, %2517
  %2519 = add nuw nsw i64 %2518, %2514
  %2520 = icmp eq i64 %2519, 2
  %2521 = zext i1 %2520 to i8
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2521, i8* %2522, align 1, !tbaa !2450
  %2523 = load i64, i64* %RBP
  %2524 = sub i64 %2523, 8
  %2525 = load i64, i64* %RCX
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 4
  store i64 %2527, i64* %PC
  %2528 = inttoptr i64 %2524 to i64*
  store i64 %2525, i64* %2528
  %2529 = load i64, i64* %RAX
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 3
  store i64 %2531, i64* %PC
  %2532 = inttoptr i64 %2529 to i32*
  %2533 = load i32, i32* %2532
  %2534 = sext i32 %2533 to i64
  store i64 %2534, i64* %RAX, align 8, !tbaa !2428
  %2535 = load i64, i64* %RAX
  %2536 = mul i64 %2535, 8
  %2537 = add i64 %2536, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2538 = load i64, i64* %PC
  %2539 = add i64 %2538, 8
  store i64 %2539, i64* %PC
  %2540 = inttoptr i64 %2537 to i64*
  %2541 = load i64, i64* %2540
  store i64 %2541, i64* %RAX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RBP
  %2543 = sub i64 %2542, 40
  %2544 = load i64, i64* %RAX
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 4
  store i64 %2546, i64* %PC
  %2547 = inttoptr i64 %2543 to i64*
  store i64 %2544, i64* %2547
  %2548 = load i64, i64* %PC
  %2549 = sub i64 %2548, 1101
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 5
  store i64 %2551, i64* %PC
  %2552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2549, i64* %2552, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2553 = load i64, i64* %RBP
  %2554 = sub i64 %2553, 12
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 7
  store i64 %2556, i64* %PC
  %2557 = inttoptr i64 %2554 to i32*
  store i32 17, i32* %2557
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 12
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 3
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  %2563 = load i32, i32* %2562
  %2564 = zext i32 %2563 to i64
  store i64 %2564, i64* %RDI, align 8, !tbaa !2428
  %2565 = load i64, i64* %PC
  %2566 = sub i64 %2565, 934
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  %2569 = load i64, i64* %PC
  %2570 = add i64 %2569, 5
  store i64 %2570, i64* %PC
  %2571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2572 = load i64, i64* %2571, align 8, !tbaa !2428
  %2573 = add i64 %2572, -8
  %2574 = inttoptr i64 %2573 to i64*
  store i64 %2568, i64* %2574
  store i64 %2573, i64* %2571, align 8, !tbaa !2428
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2566, i64* %2575, align 8, !tbaa !2428
  %2576 = load i64, i64* %PC
  %2577 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2576, %struct.Memory* %MEMORY.0)
  %2578 = load i64, i64* %RBP
  %2579 = sub i64 %2578, 8
  %2580 = load i64, i64* %PC
  %2581 = add i64 %2580, 4
  store i64 %2581, i64* %PC
  %2582 = inttoptr i64 %2579 to i64*
  %2583 = load i64, i64* %2582
  store i64 %2583, i64* %RAX, align 8, !tbaa !2428
  %2584 = load i64, i64* %RAX
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 3
  store i64 %2586, i64* %PC
  store i64 %2584, i64* %RCX, align 8, !tbaa !2428
  %2587 = load i64, i64* %RCX
  %2588 = load i64, i64* %PC
  %2589 = add i64 %2588, 4
  store i64 %2589, i64* %PC
  %2590 = add i64 4, %2587
  store i64 %2590, i64* %RCX, align 8, !tbaa !2428
  %2591 = icmp ult i64 %2590, %2587
  %2592 = icmp ult i64 %2590, 4
  %2593 = or i1 %2591, %2592
  %2594 = zext i1 %2593 to i8
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2594, i8* %2595, align 1, !tbaa !2432
  %2596 = trunc i64 %2590 to i32
  %2597 = and i32 %2596, 255
  %2598 = call i32 @llvm.ctpop.i32(i32 %2597) #16
  %2599 = trunc i32 %2598 to i8
  %2600 = and i8 %2599, 1
  %2601 = xor i8 %2600, 1
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2601, i8* %2602, align 1, !tbaa !2446
  %2603 = xor i64 4, %2587
  %2604 = xor i64 %2603, %2590
  %2605 = lshr i64 %2604, 4
  %2606 = trunc i64 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2607, i8* %2608, align 1, !tbaa !2447
  %2609 = icmp eq i64 %2590, 0
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2610, i8* %2611, align 1, !tbaa !2448
  %2612 = lshr i64 %2590, 63
  %2613 = trunc i64 %2612 to i8
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2613, i8* %2614, align 1, !tbaa !2449
  %2615 = lshr i64 %2587, 63
  %2616 = xor i64 %2612, %2615
  %2617 = add nuw nsw i64 %2616, %2612
  %2618 = icmp eq i64 %2617, 2
  %2619 = zext i1 %2618 to i8
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2619, i8* %2620, align 1, !tbaa !2450
  %2621 = load i64, i64* %RBP
  %2622 = sub i64 %2621, 8
  %2623 = load i64, i64* %RCX
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 4
  store i64 %2625, i64* %PC
  %2626 = inttoptr i64 %2622 to i64*
  store i64 %2623, i64* %2626
  %2627 = load i64, i64* %RAX
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 3
  store i64 %2629, i64* %PC
  %2630 = inttoptr i64 %2627 to i32*
  %2631 = load i32, i32* %2630
  %2632 = sext i32 %2631 to i64
  store i64 %2632, i64* %RAX, align 8, !tbaa !2428
  %2633 = load i64, i64* %RAX
  %2634 = mul i64 %2633, 8
  %2635 = add i64 %2634, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 8
  store i64 %2637, i64* %PC
  %2638 = inttoptr i64 %2635 to i64*
  %2639 = load i64, i64* %2638
  store i64 %2639, i64* %RAX, align 8, !tbaa !2428
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 40
  %2642 = load i64, i64* %RAX
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 4
  store i64 %2644, i64* %PC
  %2645 = inttoptr i64 %2641 to i64*
  store i64 %2642, i64* %2645
  %2646 = load i64, i64* %PC
  %2647 = sub i64 %2646, 851
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 5
  store i64 %2649, i64* %PC
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2647, i64* %2650, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 12
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 7
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  store i32 22, i32* %2655
  br label %block_40098d

block_400602:                                     ; preds = %block_400566
  %2656 = load i64, i64* %RBP
  %2657 = sub i64 %2656, 12
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 7
  store i64 %2659, i64* %PC
  %2660 = inttoptr i64 %2657 to i32*
  store i32 4, i32* %2660
  %2661 = load i64, i64* %PC
  %2662 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2661, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2662

block_400a80:                                     ; preds = %block_400566
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 12
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 7
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i32*
  store i32 27, i32* %2667
  %2668 = load i64, i64* %PC
  %2669 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2668, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2669

; <label>:2670:                                   ; preds = %block_400566
  %2671 = load i64, i64* %PC
  %2672 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2671, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2672
}

; Function Attrs: noinline
define %struct.Memory* @sub_400609(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400609

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 26, i32* %1013
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDI, align 8, !tbaa !2428
  %1021 = load i64, i64* %PC
  %1022 = sub i64 %1021, 1384
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  store i64 %1026, i64* %PC
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1028 = load i64, i64* %1027, align 8, !tbaa !2428
  %1029 = add i64 %1028, -8
  %1030 = inttoptr i64 %1029 to i64*
  store i64 %1024, i64* %1030
  store i64 %1029, i64* %1027, align 8, !tbaa !2428
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1022, i64* %1031, align 8, !tbaa !2428
  %1032 = load i64, i64* %PC
  %1033 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1032, %struct.Memory* %MEMORY.0)
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 8
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RCX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = add i64 4, %1043
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  %1047 = icmp ult i64 %1046, %1043
  %1048 = icmp ult i64 %1046, 4
  %1049 = or i1 %1047, %1048
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = trunc i64 %1046 to i32
  %1053 = and i32 %1052, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i64 4, %1043
  %1060 = xor i64 %1059, %1046
  %1061 = lshr i64 %1060, 4
  %1062 = trunc i64 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i64 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i64 %1046, 63
  %1069 = trunc i64 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i64 %1043, 63
  %1072 = xor i64 %1068, %1071
  %1073 = add nuw nsw i64 %1072, %1068
  %1074 = icmp eq i64 %1073, 2
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1075, i8* %1076, align 1, !tbaa !2450
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 8
  %1079 = load i64, i64* %RCX
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 4
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1078 to i64*
  store i64 %1079, i64* %1082
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = mul i64 %1089, 8
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  %1095 = load i64, i64* %1094
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 40
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1097 to i64*
  store i64 %1098, i64* %1101
  %1102 = load i64, i64* %PC
  %1103 = sub i64 %1102, 1301
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 7
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  store i32 8, i32* %1111
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = load i64, i64* %PC
  %1120 = sub i64 %1119, 484
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1126 = load i64, i64* %1125, align 8, !tbaa !2428
  %1127 = add i64 %1126, -8
  %1128 = inttoptr i64 %1127 to i64*
  store i64 %1122, i64* %1128
  store i64 %1127, i64* %1125, align 8, !tbaa !2428
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1120, i64* %1129, align 8, !tbaa !2428
  %1130 = load i64, i64* %PC
  %1131 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1130, %struct.Memory* %MEMORY.0)
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 8
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  store i64 %1138, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = add i64 4, %1141
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1145 = icmp ult i64 %1144, %1141
  %1146 = icmp ult i64 %1144, 4
  %1147 = or i1 %1145, %1146
  %1148 = zext i1 %1147 to i8
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1148, i8* %1149, align 1, !tbaa !2432
  %1150 = trunc i64 %1144 to i32
  %1151 = and i32 %1150, 255
  %1152 = call i32 @llvm.ctpop.i32(i32 %1151) #16
  %1153 = trunc i32 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = xor i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1155, i8* %1156, align 1, !tbaa !2446
  %1157 = xor i64 4, %1141
  %1158 = xor i64 %1157, %1144
  %1159 = lshr i64 %1158, 4
  %1160 = trunc i64 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1161, i8* %1162, align 1, !tbaa !2447
  %1163 = icmp eq i64 %1144, 0
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1164, i8* %1165, align 1, !tbaa !2448
  %1166 = lshr i64 %1144, 63
  %1167 = trunc i64 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = lshr i64 %1141, 63
  %1170 = xor i64 %1166, %1169
  %1171 = add nuw nsw i64 %1170, %1166
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 8
  %1177 = load i64, i64* %RCX
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1176 to i64*
  store i64 %1177, i64* %1180
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184
  %1186 = sext i32 %1185 to i64
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i64, i64* %RAX
  %1188 = mul i64 %1187, 8
  %1189 = add i64 %1188, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 8
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i64*
  %1193 = load i64, i64* %1192
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RBP
  %1195 = sub i64 %1194, 40
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1195 to i64*
  store i64 %1196, i64* %1199
  %1200 = load i64, i64* %PC
  %1201 = sub i64 %1200, 401
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1201, i64* %1204, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 7
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  store i32 31, i32* %1209
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  %1215 = load i32, i32* %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load i64, i64* %PC
  %1218 = sub i64 %1217, 1634
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %MEMORY.0)
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 8
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RAX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RCX
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = add i64 4, %1239
  store i64 %1242, i64* %RCX, align 8, !tbaa !2428
  %1243 = icmp ult i64 %1242, %1239
  %1244 = icmp ult i64 %1242, 4
  %1245 = or i1 %1243, %1244
  %1246 = zext i1 %1245 to i8
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1246, i8* %1247, align 1, !tbaa !2432
  %1248 = trunc i64 %1242 to i32
  %1249 = and i32 %1248, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = xor i64 4, %1239
  %1256 = xor i64 %1255, %1242
  %1257 = lshr i64 %1256, 4
  %1258 = trunc i64 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = icmp eq i64 %1242, 0
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = lshr i64 %1242, 63
  %1265 = trunc i64 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i64 %1239, 63
  %1268 = xor i64 %1264, %1267
  %1269 = add nuw nsw i64 %1268, %1264
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1271, i8* %1272, align 1, !tbaa !2450
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 8
  %1275 = load i64, i64* %RCX
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = sext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = mul i64 %1285, 8
  %1287 = add i64 %1286, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 8
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1287 to i64*
  %1291 = load i64, i64* %1290
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 40
  %1294 = load i64, i64* %RAX
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1293 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %PC
  %1299 = sub i64 %1298, 1551
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1299, i64* %1302, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 7
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  store i32 13, i32* %1307
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 12
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 3
  store i64 %1311, i64* %PC
  %1312 = inttoptr i64 %1309 to i32*
  %1313 = load i32, i32* %1312
  %1314 = zext i32 %1313 to i64
  store i64 %1314, i64* %RDI, align 8, !tbaa !2428
  %1315 = load i64, i64* %PC
  %1316 = sub i64 %1315, 734
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 5
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 5
  store i64 %1320, i64* %PC
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1322 = load i64, i64* %1321, align 8, !tbaa !2428
  %1323 = add i64 %1322, -8
  %1324 = inttoptr i64 %1323 to i64*
  store i64 %1318, i64* %1324
  store i64 %1323, i64* %1321, align 8, !tbaa !2428
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1316, i64* %1325, align 8, !tbaa !2428
  %1326 = load i64, i64* %PC
  %1327 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1326, %struct.Memory* %MEMORY.0)
  %1328 = load i64, i64* %RBP
  %1329 = sub i64 %1328, 8
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 4
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1329 to i64*
  %1333 = load i64, i64* %1332
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 3
  store i64 %1336, i64* %PC
  store i64 %1334, i64* %RCX, align 8, !tbaa !2428
  %1337 = load i64, i64* %RCX
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 4
  store i64 %1339, i64* %PC
  %1340 = add i64 4, %1337
  store i64 %1340, i64* %RCX, align 8, !tbaa !2428
  %1341 = icmp ult i64 %1340, %1337
  %1342 = icmp ult i64 %1340, 4
  %1343 = or i1 %1341, %1342
  %1344 = zext i1 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1344, i8* %1345, align 1, !tbaa !2432
  %1346 = trunc i64 %1340 to i32
  %1347 = and i32 %1346, 255
  %1348 = call i32 @llvm.ctpop.i32(i32 %1347) #16
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  %1351 = xor i8 %1350, 1
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1351, i8* %1352, align 1, !tbaa !2446
  %1353 = xor i64 4, %1337
  %1354 = xor i64 %1353, %1340
  %1355 = lshr i64 %1354, 4
  %1356 = trunc i64 %1355 to i8
  %1357 = and i8 %1356, 1
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1357, i8* %1358, align 1, !tbaa !2447
  %1359 = icmp eq i64 %1340, 0
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1360, i8* %1361, align 1, !tbaa !2448
  %1362 = lshr i64 %1340, 63
  %1363 = trunc i64 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1363, i8* %1364, align 1, !tbaa !2449
  %1365 = lshr i64 %1337, 63
  %1366 = xor i64 %1362, %1365
  %1367 = add nuw nsw i64 %1366, %1362
  %1368 = icmp eq i64 %1367, 2
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1369, i8* %1370, align 1, !tbaa !2450
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 8
  %1373 = load i64, i64* %RCX
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 4
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1372 to i64*
  store i64 %1373, i64* %1376
  %1377 = load i64, i64* %RAX
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 3
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to i32*
  %1381 = load i32, i32* %1380
  %1382 = sext i32 %1381 to i64
  store i64 %1382, i64* %RAX, align 8, !tbaa !2428
  %1383 = load i64, i64* %RAX
  %1384 = mul i64 %1383, 8
  %1385 = add i64 %1384, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 8
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i64*
  %1389 = load i64, i64* %1388
  store i64 %1389, i64* %RAX, align 8, !tbaa !2428
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 40
  %1392 = load i64, i64* %RAX
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 4
  store i64 %1394, i64* %PC
  %1395 = inttoptr i64 %1391 to i64*
  store i64 %1392, i64* %1395
  %1396 = load i64, i64* %PC
  %1397 = sub i64 %1396, 651
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 5
  store i64 %1399, i64* %PC
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1397, i64* %1400, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 12
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 7
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  store i32 18, i32* %1405
  %1406 = load i64, i64* %PC
  %1407 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1406, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1407

block_4009b8:                                     ; preds = %block_400566
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 7
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  store i32 23, i32* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 12
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = sub i64 %1420, 1234
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  store i64 %1425, i64* %PC
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1427 = load i64, i64* %1426, align 8, !tbaa !2428
  %1428 = add i64 %1427, -8
  %1429 = inttoptr i64 %1428 to i64*
  store i64 %1423, i64* %1429
  store i64 %1428, i64* %1426, align 8, !tbaa !2428
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1421, i64* %1430, align 8, !tbaa !2428
  %1431 = load i64, i64* %PC
  %1432 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1431, %struct.Memory* %MEMORY.0)
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 8
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RAX
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 3
  store i64 %1441, i64* %PC
  store i64 %1439, i64* %RCX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RCX
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 4
  store i64 %1444, i64* %PC
  %1445 = add i64 4, %1442
  store i64 %1445, i64* %RCX, align 8, !tbaa !2428
  %1446 = icmp ult i64 %1445, %1442
  %1447 = icmp ult i64 %1445, 4
  %1448 = or i1 %1446, %1447
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1449, i8* %1450, align 1, !tbaa !2432
  %1451 = trunc i64 %1445 to i32
  %1452 = and i32 %1451, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #16
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = xor i64 4, %1442
  %1459 = xor i64 %1458, %1445
  %1460 = lshr i64 %1459, 4
  %1461 = trunc i64 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = icmp eq i64 %1445, 0
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i64 %1445, 63
  %1468 = trunc i64 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1468, i8* %1469, align 1, !tbaa !2449
  %1470 = lshr i64 %1442, 63
  %1471 = xor i64 %1467, %1470
  %1472 = add nuw nsw i64 %1471, %1467
  %1473 = icmp eq i64 %1472, 2
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1474, i8* %1475, align 1, !tbaa !2450
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 8
  %1478 = load i64, i64* %RCX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1477 to i64*
  store i64 %1478, i64* %1481
  %1482 = load i64, i64* %RAX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i32*
  %1486 = load i32, i32* %1485
  %1487 = sext i32 %1486 to i64
  store i64 %1487, i64* %RAX, align 8, !tbaa !2428
  %1488 = load i64, i64* %RAX
  %1489 = mul i64 %1488, 8
  %1490 = add i64 %1489, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 8
  store i64 %1492, i64* %PC
  %1493 = inttoptr i64 %1490 to i64*
  %1494 = load i64, i64* %1493
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 40
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1496 to i64*
  store i64 %1497, i64* %1500
  %1501 = load i64, i64* %PC
  %1502 = sub i64 %1501, 1151
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1502, i64* %1505, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 7
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  store i32 5, i32* %1510
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 12
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 3
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = zext i32 %1516 to i64
  store i64 %1517, i64* %RDI, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = sub i64 %1518, 334
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 5
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1525 = load i64, i64* %1524, align 8, !tbaa !2428
  %1526 = add i64 %1525, -8
  %1527 = inttoptr i64 %1526 to i64*
  store i64 %1521, i64* %1527
  store i64 %1526, i64* %1524, align 8, !tbaa !2428
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1519, i64* %1528, align 8, !tbaa !2428
  %1529 = load i64, i64* %PC
  %1530 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1529, %struct.Memory* %MEMORY.0)
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 8
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RAX
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 3
  store i64 %1539, i64* %PC
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RCX
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 4
  store i64 %1542, i64* %PC
  %1543 = add i64 4, %1540
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = icmp ult i64 %1543, %1540
  %1545 = icmp ult i64 %1543, 4
  %1546 = or i1 %1544, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1547, i8* %1548, align 1, !tbaa !2432
  %1549 = trunc i64 %1543 to i32
  %1550 = and i32 %1549, 255
  %1551 = call i32 @llvm.ctpop.i32(i32 %1550) #16
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1554, i8* %1555, align 1, !tbaa !2446
  %1556 = xor i64 4, %1540
  %1557 = xor i64 %1556, %1543
  %1558 = lshr i64 %1557, 4
  %1559 = trunc i64 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1560, i8* %1561, align 1, !tbaa !2447
  %1562 = icmp eq i64 %1543, 0
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1563, i8* %1564, align 1, !tbaa !2448
  %1565 = lshr i64 %1543, 63
  %1566 = trunc i64 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1566, i8* %1567, align 1, !tbaa !2449
  %1568 = lshr i64 %1540, 63
  %1569 = xor i64 %1565, %1568
  %1570 = add nuw nsw i64 %1569, %1565
  %1571 = icmp eq i64 %1570, 2
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1572, i8* %1573, align 1, !tbaa !2450
  %1574 = load i64, i64* %RBP
  %1575 = sub i64 %1574, 8
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1575 to i64*
  store i64 %1576, i64* %1579
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1580 to i32*
  %1584 = load i32, i32* %1583
  %1585 = sext i32 %1584 to i64
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i64, i64* %RAX
  %1587 = mul i64 %1586, 8
  %1588 = add i64 %1587, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 8
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1588 to i64*
  %1592 = load i64, i64* %1591
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 40
  %1595 = load i64, i64* %RAX
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598
  %1599 = load i64, i64* %PC
  %1600 = sub i64 %1599, 251
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1603, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 7
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  store i32 28, i32* %1608
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 12
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 3
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = zext i32 %1614 to i64
  store i64 %1615, i64* %RDI, align 8, !tbaa !2428
  %1616 = load i64, i64* %PC
  %1617 = sub i64 %1616, 1484
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 5
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1623 = load i64, i64* %1622, align 8, !tbaa !2428
  %1624 = add i64 %1623, -8
  %1625 = inttoptr i64 %1624 to i64*
  store i64 %1619, i64* %1625
  store i64 %1624, i64* %1622, align 8, !tbaa !2428
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1617, i64* %1626, align 8, !tbaa !2428
  %1627 = load i64, i64* %PC
  %1628 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1627, %struct.Memory* %MEMORY.0)
  %1629 = load i64, i64* %RBP
  %1630 = sub i64 %1629, 8
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1630 to i64*
  %1634 = load i64, i64* %1633
  store i64 %1634, i64* %RAX, align 8, !tbaa !2428
  %1635 = load i64, i64* %RAX
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  store i64 %1635, i64* %RCX, align 8, !tbaa !2428
  %1638 = load i64, i64* %RCX
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 4
  store i64 %1640, i64* %PC
  %1641 = add i64 4, %1638
  store i64 %1641, i64* %RCX, align 8, !tbaa !2428
  %1642 = icmp ult i64 %1641, %1638
  %1643 = icmp ult i64 %1641, 4
  %1644 = or i1 %1642, %1643
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1645, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1641 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = xor i64 4, %1638
  %1655 = xor i64 %1654, %1641
  %1656 = lshr i64 %1655, 4
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1658, i8* %1659, align 1, !tbaa !2447
  %1660 = icmp eq i64 %1641, 0
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1661, i8* %1662, align 1, !tbaa !2448
  %1663 = lshr i64 %1641, 63
  %1664 = trunc i64 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1664, i8* %1665, align 1, !tbaa !2449
  %1666 = lshr i64 %1638, 63
  %1667 = xor i64 %1663, %1666
  %1668 = add nuw nsw i64 %1667, %1663
  %1669 = icmp eq i64 %1668, 2
  %1670 = zext i1 %1669 to i8
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1670, i8* %1671, align 1, !tbaa !2450
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 8
  %1674 = load i64, i64* %RCX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %RAX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 3
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1678 to i32*
  %1682 = load i32, i32* %1681
  %1683 = sext i32 %1682 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RAX
  %1685 = mul i64 %1684, 8
  %1686 = add i64 %1685, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 8
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 40
  %1693 = load i64, i64* %RAX
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 4
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1692 to i64*
  store i64 %1693, i64* %1696
  %1697 = load i64, i64* %PC
  %1698 = sub i64 %1697, 1401
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1698, i64* %1701, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 12
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 7
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  store i32 0, i32* %1706
  %1707 = load i64, i64* %RSP
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 4
  store i64 %1709, i64* %PC
  %1710 = add i64 48, %1707
  store i64 %1710, i64* %RSP, align 8, !tbaa !2428
  %1711 = icmp ult i64 %1710, %1707
  %1712 = icmp ult i64 %1710, 48
  %1713 = or i1 %1711, %1712
  %1714 = zext i1 %1713 to i8
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1714, i8* %1715, align 1, !tbaa !2432
  %1716 = trunc i64 %1710 to i32
  %1717 = and i32 %1716, 255
  %1718 = call i32 @llvm.ctpop.i32(i32 %1717) #16
  %1719 = trunc i32 %1718 to i8
  %1720 = and i8 %1719, 1
  %1721 = xor i8 %1720, 1
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1721, i8* %1722, align 1, !tbaa !2446
  %1723 = xor i64 48, %1707
  %1724 = xor i64 %1723, %1710
  %1725 = lshr i64 %1724, 4
  %1726 = trunc i64 %1725 to i8
  %1727 = and i8 %1726, 1
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1727, i8* %1728, align 1, !tbaa !2447
  %1729 = icmp eq i64 %1710, 0
  %1730 = zext i1 %1729 to i8
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1730, i8* %1731, align 1, !tbaa !2448
  %1732 = lshr i64 %1710, 63
  %1733 = trunc i64 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1733, i8* %1734, align 1, !tbaa !2449
  %1735 = lshr i64 %1707, 63
  %1736 = xor i64 %1732, %1735
  %1737 = add nuw nsw i64 %1736, %1732
  %1738 = icmp eq i64 %1737, 2
  %1739 = zext i1 %1738 to i8
  %1740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1739, i8* %1740, align 1, !tbaa !2450
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 1
  store i64 %1742, i64* %PC
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1744 = load i64, i64* %1743, align 8, !tbaa !2428
  %1745 = add i64 %1744, 8
  %1746 = inttoptr i64 %1744 to i64*
  %1747 = load i64, i64* %1746
  store i64 %1747, i64* %RBP, align 8, !tbaa !2428
  store i64 %1745, i64* %1743, align 8, !tbaa !2428
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 1
  store i64 %1749, i64* %PC
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1752 = load i64, i64* %1751, align 8, !tbaa !2428
  %1753 = inttoptr i64 %1752 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %1750, align 8, !tbaa !2428
  %1755 = add i64 %1752, 8
  store i64 %1755, i64* %1751, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 12
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 7
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  store i32 10, i32* %1760
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 12
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RDI, align 8, !tbaa !2428
  %1768 = load i64, i64* %PC
  %1769 = sub i64 %1768, 584
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 5
  store i64 %1773, i64* %PC
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1775 = load i64, i64* %1774, align 8, !tbaa !2428
  %1776 = add i64 %1775, -8
  %1777 = inttoptr i64 %1776 to i64*
  store i64 %1771, i64* %1777
  store i64 %1776, i64* %1774, align 8, !tbaa !2428
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1769, i64* %1778, align 8, !tbaa !2428
  %1779 = load i64, i64* %PC
  %1780 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1779, %struct.Memory* %MEMORY.0)
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 8
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i64*
  %1786 = load i64, i64* %1785
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RAX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 4
  store i64 %1792, i64* %PC
  %1793 = add i64 4, %1790
  store i64 %1793, i64* %RCX, align 8, !tbaa !2428
  %1794 = icmp ult i64 %1793, %1790
  %1795 = icmp ult i64 %1793, 4
  %1796 = or i1 %1794, %1795
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = trunc i64 %1793 to i32
  %1800 = and i32 %1799, 255
  %1801 = call i32 @llvm.ctpop.i32(i32 %1800) #16
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1804, i8* %1805, align 1, !tbaa !2446
  %1806 = xor i64 4, %1790
  %1807 = xor i64 %1806, %1793
  %1808 = lshr i64 %1807, 4
  %1809 = trunc i64 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i64 %1793, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i64 %1793, 63
  %1816 = trunc i64 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i64 %1790, 63
  %1819 = xor i64 %1815, %1818
  %1820 = add nuw nsw i64 %1819, %1815
  %1821 = icmp eq i64 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 8
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1825 to i64*
  store i64 %1826, i64* %1829
  %1830 = load i64, i64* %RAX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 3
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = mul i64 %1836, 8
  %1838 = add i64 %1837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 8
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %RAX
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1844 to i64*
  store i64 %1845, i64* %1848
  %1849 = load i64, i64* %PC
  %1850 = sub i64 %1849, 501
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 5
  store i64 %1852, i64* %PC
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1850, i64* %1853, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1854 = load i64, i64* %RBP
  %1855 = sub i64 %1854, 12
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 7
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  store i32 15, i32* %1858
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 12
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 3
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1860 to i32*
  %1864 = load i32, i32* %1863
  %1865 = zext i32 %1864 to i64
  store i64 %1865, i64* %RDI, align 8, !tbaa !2428
  %1866 = load i64, i64* %PC
  %1867 = sub i64 %1866, 834
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 5
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 5
  store i64 %1871, i64* %PC
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1873 = load i64, i64* %1872, align 8, !tbaa !2428
  %1874 = add i64 %1873, -8
  %1875 = inttoptr i64 %1874 to i64*
  store i64 %1869, i64* %1875
  store i64 %1874, i64* %1872, align 8, !tbaa !2428
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1867, i64* %1876, align 8, !tbaa !2428
  %1877 = load i64, i64* %PC
  %1878 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1877, %struct.Memory* %MEMORY.0)
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 8
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 4
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i64*
  %1884 = load i64, i64* %1883
  store i64 %1884, i64* %RAX, align 8, !tbaa !2428
  %1885 = load i64, i64* %RAX
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  store i64 %1885, i64* %RCX, align 8, !tbaa !2428
  %1888 = load i64, i64* %RCX
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 4
  store i64 %1890, i64* %PC
  %1891 = add i64 4, %1888
  store i64 %1891, i64* %RCX, align 8, !tbaa !2428
  %1892 = icmp ult i64 %1891, %1888
  %1893 = icmp ult i64 %1891, 4
  %1894 = or i1 %1892, %1893
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1895, i8* %1896, align 1, !tbaa !2432
  %1897 = trunc i64 %1891 to i32
  %1898 = and i32 %1897, 255
  %1899 = call i32 @llvm.ctpop.i32(i32 %1898) #16
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1902, i8* %1903, align 1, !tbaa !2446
  %1904 = xor i64 4, %1888
  %1905 = xor i64 %1904, %1891
  %1906 = lshr i64 %1905, 4
  %1907 = trunc i64 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1908, i8* %1909, align 1, !tbaa !2447
  %1910 = icmp eq i64 %1891, 0
  %1911 = zext i1 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1911, i8* %1912, align 1, !tbaa !2448
  %1913 = lshr i64 %1891, 63
  %1914 = trunc i64 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1914, i8* %1915, align 1, !tbaa !2449
  %1916 = lshr i64 %1888, 63
  %1917 = xor i64 %1913, %1916
  %1918 = add nuw nsw i64 %1917, %1913
  %1919 = icmp eq i64 %1918, 2
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1920, i8* %1921, align 1, !tbaa !2450
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 8
  %1924 = load i64, i64* %RCX
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 4
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1923 to i64*
  store i64 %1924, i64* %1927
  %1928 = load i64, i64* %RAX
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 3
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = sext i32 %1932 to i64
  store i64 %1933, i64* %RAX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RAX
  %1935 = mul i64 %1934, 8
  %1936 = add i64 %1935, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 8
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i64*
  %1940 = load i64, i64* %1939
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = load i64, i64* %RBP
  %1942 = sub i64 %1941, 40
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1942 to i64*
  store i64 %1943, i64* %1946
  %1947 = load i64, i64* %PC
  %1948 = sub i64 %1947, 751
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  store i64 %1950, i64* %PC
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1948, i64* %1951, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 12
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 7
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  store i32 20, i32* %1956
  %1957 = load i64, i64* %RBP
  %1958 = sub i64 %1957, 12
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 3
  store i64 %1960, i64* %PC
  %1961 = inttoptr i64 %1958 to i32*
  %1962 = load i32, i32* %1961
  %1963 = zext i32 %1962 to i64
  store i64 %1963, i64* %RDI, align 8, !tbaa !2428
  %1964 = load i64, i64* %PC
  %1965 = sub i64 %1964, 1084
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 5
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1971 = load i64, i64* %1970, align 8, !tbaa !2428
  %1972 = add i64 %1971, -8
  %1973 = inttoptr i64 %1972 to i64*
  store i64 %1967, i64* %1973
  store i64 %1972, i64* %1970, align 8, !tbaa !2428
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1965, i64* %1974, align 8, !tbaa !2428
  %1975 = load i64, i64* %PC
  %1976 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1975, %struct.Memory* %MEMORY.0)
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 8
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 4
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i64*
  %1982 = load i64, i64* %1981
  store i64 %1982, i64* %RAX, align 8, !tbaa !2428
  %1983 = load i64, i64* %RAX
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  store i64 %1983, i64* %RCX, align 8, !tbaa !2428
  %1986 = load i64, i64* %RCX
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 4
  store i64 %1988, i64* %PC
  %1989 = add i64 4, %1986
  store i64 %1989, i64* %RCX, align 8, !tbaa !2428
  %1990 = icmp ult i64 %1989, %1986
  %1991 = icmp ult i64 %1989, 4
  %1992 = or i1 %1990, %1991
  %1993 = zext i1 %1992 to i8
  %1994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1993, i8* %1994, align 1, !tbaa !2432
  %1995 = trunc i64 %1989 to i32
  %1996 = and i32 %1995, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = xor i64 4, %1986
  %2003 = xor i64 %2002, %1989
  %2004 = lshr i64 %2003, 4
  %2005 = trunc i64 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2006, i8* %2007, align 1, !tbaa !2447
  %2008 = icmp eq i64 %1989, 0
  %2009 = zext i1 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2009, i8* %2010, align 1, !tbaa !2448
  %2011 = lshr i64 %1989, 63
  %2012 = trunc i64 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2012, i8* %2013, align 1, !tbaa !2449
  %2014 = lshr i64 %1986, 63
  %2015 = xor i64 %2011, %2014
  %2016 = add nuw nsw i64 %2015, %2011
  %2017 = icmp eq i64 %2016, 2
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2018, i8* %2019, align 1, !tbaa !2450
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 8
  %2022 = load i64, i64* %RCX
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 4
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2021 to i64*
  store i64 %2022, i64* %2025
  %2026 = load i64, i64* %RAX
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 3
  store i64 %2028, i64* %PC
  %2029 = inttoptr i64 %2026 to i32*
  %2030 = load i32, i32* %2029
  %2031 = sext i32 %2030 to i64
  store i64 %2031, i64* %RAX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RAX
  %2033 = mul i64 %2032, 8
  %2034 = add i64 %2033, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 8
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2034 to i64*
  %2038 = load i64, i64* %2037
  store i64 %2038, i64* %RAX, align 8, !tbaa !2428
  %2039 = load i64, i64* %RBP
  %2040 = sub i64 %2039, 40
  %2041 = load i64, i64* %RAX
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2040 to i64*
  store i64 %2041, i64* %2044
  %2045 = load i64, i64* %PC
  %2046 = sub i64 %2045, 1001
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 5
  store i64 %2048, i64* %PC
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2046, i64* %2049, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 12
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 7
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  store i32 2, i32* %2054
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 12
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 3
  store i64 %2058, i64* %PC
  %2059 = inttoptr i64 %2056 to i32*
  %2060 = load i32, i32* %2059
  %2061 = zext i32 %2060 to i64
  store i64 %2061, i64* %RDI, align 8, !tbaa !2428
  %2062 = load i64, i64* %PC
  %2063 = sub i64 %2062, 184
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 5
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 5
  store i64 %2067, i64* %PC
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2069 = load i64, i64* %2068, align 8, !tbaa !2428
  %2070 = add i64 %2069, -8
  %2071 = inttoptr i64 %2070 to i64*
  store i64 %2065, i64* %2071
  store i64 %2070, i64* %2068, align 8, !tbaa !2428
  %2072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2063, i64* %2072, align 8, !tbaa !2428
  %2073 = load i64, i64* %PC
  %2074 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2073, %struct.Memory* %MEMORY.0)
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 8
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 4
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i64*
  %2080 = load i64, i64* %2079
  store i64 %2080, i64* %RAX, align 8, !tbaa !2428
  %2081 = load i64, i64* %RAX
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2084 = load i64, i64* %RCX
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 4
  store i64 %2086, i64* %PC
  %2087 = add i64 4, %2084
  store i64 %2087, i64* %RCX, align 8, !tbaa !2428
  %2088 = icmp ult i64 %2087, %2084
  %2089 = icmp ult i64 %2087, 4
  %2090 = or i1 %2088, %2089
  %2091 = zext i1 %2090 to i8
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2091, i8* %2092, align 1, !tbaa !2432
  %2093 = trunc i64 %2087 to i32
  %2094 = and i32 %2093, 255
  %2095 = call i32 @llvm.ctpop.i32(i32 %2094) #16
  %2096 = trunc i32 %2095 to i8
  %2097 = and i8 %2096, 1
  %2098 = xor i8 %2097, 1
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2098, i8* %2099, align 1, !tbaa !2446
  %2100 = xor i64 4, %2084
  %2101 = xor i64 %2100, %2087
  %2102 = lshr i64 %2101, 4
  %2103 = trunc i64 %2102 to i8
  %2104 = and i8 %2103, 1
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2104, i8* %2105, align 1, !tbaa !2447
  %2106 = icmp eq i64 %2087, 0
  %2107 = zext i1 %2106 to i8
  %2108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2107, i8* %2108, align 1, !tbaa !2448
  %2109 = lshr i64 %2087, 63
  %2110 = trunc i64 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2110, i8* %2111, align 1, !tbaa !2449
  %2112 = lshr i64 %2084, 63
  %2113 = xor i64 %2109, %2112
  %2114 = add nuw nsw i64 %2113, %2109
  %2115 = icmp eq i64 %2114, 2
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2116, i8* %2117, align 1, !tbaa !2450
  %2118 = load i64, i64* %RBP
  %2119 = sub i64 %2118, 8
  %2120 = load i64, i64* %RCX
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 4
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2119 to i64*
  store i64 %2120, i64* %2123
  %2124 = load i64, i64* %RAX
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RAX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RAX
  %2131 = mul i64 %2130, 8
  %2132 = add i64 %2131, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 8
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  store i64 %2136, i64* %RAX, align 8, !tbaa !2428
  %2137 = load i64, i64* %RBP
  %2138 = sub i64 %2137, 40
  %2139 = load i64, i64* %RAX
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2138 to i64*
  store i64 %2139, i64* %2142
  %2143 = load i64, i64* %PC
  %2144 = sub i64 %2143, 101
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 5
  store i64 %2146, i64* %PC
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2144, i64* %2147, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400986, %block_400609, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %2668, %block_400609 ], [ %1976, %block_400922 ], [ %1878, %block_400828 ], [ %1780, %block_40072e ], [ %1033, %block_400a4e ], [ %1628, %block_400ab2 ], [ %1530, %block_400634 ], [ %1432, %block_4009b8 ], [ %1327, %block_4007c4 ], [ %1229, %block_400b48 ], [ %1131, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %2074, %block_40059e ], [ %2183, %block_400a1c ], [ %2281, %block_400698 ], [ %2379, %block_400b16 ], [ %2477, %block_400792 ], [ %2575, %block_40088c ], [ %2766, %block_400986 ]
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 4
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i64*
  %2153 = load i64, i64* %2152
  store i64 %2153, i64* %RAX, align 8, !tbaa !2428
  %2154 = load i64, i64* %RAX
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 2
  store i64 %2156, i64* %PC
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2154, i64* %2157, align 8, !tbaa !2428
  %2158 = load i64, i64* %PC
  switch i64 %2158, label %2852 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 12
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 7
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i32*
  store i32 25, i32* %2163
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 12
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i32*
  %2169 = load i32, i32* %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RDI, align 8, !tbaa !2428
  %2171 = load i64, i64* %PC
  %2172 = sub i64 %2171, 1334
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2178 = load i64, i64* %2177, align 8, !tbaa !2428
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2174, i64* %2180
  store i64 %2179, i64* %2177, align 8, !tbaa !2428
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2172, i64* %2181, align 8, !tbaa !2428
  %2182 = load i64, i64* %PC
  %2183 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2182, %struct.Memory* %MEMORY.0)
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 8
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RAX
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2193 = load i64, i64* %RCX
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = add i64 4, %2193
  store i64 %2196, i64* %RCX, align 8, !tbaa !2428
  %2197 = icmp ult i64 %2196, %2193
  %2198 = icmp ult i64 %2196, 4
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2200, i8* %2201, align 1, !tbaa !2432
  %2202 = trunc i64 %2196 to i32
  %2203 = and i32 %2202, 255
  %2204 = call i32 @llvm.ctpop.i32(i32 %2203) #16
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = xor i8 %2206, 1
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2207, i8* %2208, align 1, !tbaa !2446
  %2209 = xor i64 4, %2193
  %2210 = xor i64 %2209, %2196
  %2211 = lshr i64 %2210, 4
  %2212 = trunc i64 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2213, i8* %2214, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2196, 0
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2216, i8* %2217, align 1, !tbaa !2448
  %2218 = lshr i64 %2196, 63
  %2219 = trunc i64 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2219, i8* %2220, align 1, !tbaa !2449
  %2221 = lshr i64 %2193, 63
  %2222 = xor i64 %2218, %2221
  %2223 = add nuw nsw i64 %2222, %2218
  %2224 = icmp eq i64 %2223, 2
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2226, align 1, !tbaa !2450
  %2227 = load i64, i64* %RBP
  %2228 = sub i64 %2227, 8
  %2229 = load i64, i64* %RCX
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 4
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2228 to i64*
  store i64 %2229, i64* %2232
  %2233 = load i64, i64* %RAX
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 3
  store i64 %2235, i64* %PC
  %2236 = inttoptr i64 %2233 to i32*
  %2237 = load i32, i32* %2236
  %2238 = sext i32 %2237 to i64
  store i64 %2238, i64* %RAX, align 8, !tbaa !2428
  %2239 = load i64, i64* %RAX
  %2240 = mul i64 %2239, 8
  %2241 = add i64 %2240, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 8
  store i64 %2243, i64* %PC
  %2244 = inttoptr i64 %2241 to i64*
  %2245 = load i64, i64* %2244
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 40
  %2248 = load i64, i64* %RAX
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 4
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2247 to i64*
  store i64 %2248, i64* %2251
  %2252 = load i64, i64* %PC
  %2253 = sub i64 %2252, 1251
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 5
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2253, i64* %2256, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 12
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 7
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  store i32 7, i32* %2261
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 12
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 3
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RDI, align 8, !tbaa !2428
  %2269 = load i64, i64* %PC
  %2270 = sub i64 %2269, 434
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 5
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 5
  store i64 %2274, i64* %PC
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2276 = load i64, i64* %2275, align 8, !tbaa !2428
  %2277 = add i64 %2276, -8
  %2278 = inttoptr i64 %2277 to i64*
  store i64 %2272, i64* %2278
  store i64 %2277, i64* %2275, align 8, !tbaa !2428
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2270, i64* %2279, align 8, !tbaa !2428
  %2280 = load i64, i64* %PC
  %2281 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2280, %struct.Memory* %MEMORY.0)
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 8
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 4
  store i64 %2285, i64* %PC
  %2286 = inttoptr i64 %2283 to i64*
  %2287 = load i64, i64* %2286
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i64, i64* %RAX
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC
  store i64 %2288, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RCX
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = add i64 4, %2291
  store i64 %2294, i64* %RCX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2291
  %2296 = icmp ult i64 %2294, 4
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2298, i8* %2299, align 1, !tbaa !2432
  %2300 = trunc i64 %2294 to i32
  %2301 = and i32 %2300, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #16
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 4, %2291
  %2308 = xor i64 %2307, %2294
  %2309 = lshr i64 %2308, 4
  %2310 = trunc i64 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2311, i8* %2312, align 1, !tbaa !2447
  %2313 = icmp eq i64 %2294, 0
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2314, i8* %2315, align 1, !tbaa !2448
  %2316 = lshr i64 %2294, 63
  %2317 = trunc i64 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2317, i8* %2318, align 1, !tbaa !2449
  %2319 = lshr i64 %2291, 63
  %2320 = xor i64 %2316, %2319
  %2321 = add nuw nsw i64 %2320, %2316
  %2322 = icmp eq i64 %2321, 2
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2323, i8* %2324, align 1, !tbaa !2450
  %2325 = load i64, i64* %RBP
  %2326 = sub i64 %2325, 8
  %2327 = load i64, i64* %RCX
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2326 to i64*
  store i64 %2327, i64* %2330
  %2331 = load i64, i64* %RAX
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 3
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2331 to i32*
  %2335 = load i32, i32* %2334
  %2336 = sext i32 %2335 to i64
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = load i64, i64* %RAX
  %2338 = mul i64 %2337, 8
  %2339 = add i64 %2338, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 8
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 40
  %2346 = load i64, i64* %RAX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2345 to i64*
  store i64 %2346, i64* %2349
  %2350 = load i64, i64* %PC
  %2351 = sub i64 %2350, 351
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 5
  store i64 %2353, i64* %PC
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2351, i64* %2354, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2355 = load i64, i64* %RBP
  %2356 = sub i64 %2355, 12
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 7
  store i64 %2358, i64* %PC
  %2359 = inttoptr i64 %2356 to i32*
  store i32 30, i32* %2359
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 12
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 3
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i32*
  %2365 = load i32, i32* %2364
  %2366 = zext i32 %2365 to i64
  store i64 %2366, i64* %RDI, align 8, !tbaa !2428
  %2367 = load i64, i64* %PC
  %2368 = sub i64 %2367, 1584
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 5
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2374 = load i64, i64* %2373, align 8, !tbaa !2428
  %2375 = add i64 %2374, -8
  %2376 = inttoptr i64 %2375 to i64*
  store i64 %2370, i64* %2376
  store i64 %2375, i64* %2373, align 8, !tbaa !2428
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2368, i64* %2377, align 8, !tbaa !2428
  %2378 = load i64, i64* %PC
  %2379 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2378, %struct.Memory* %MEMORY.0)
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 8
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2381 to i64*
  %2385 = load i64, i64* %2384
  store i64 %2385, i64* %RAX, align 8, !tbaa !2428
  %2386 = load i64, i64* %RAX
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 3
  store i64 %2388, i64* %PC
  store i64 %2386, i64* %RCX, align 8, !tbaa !2428
  %2389 = load i64, i64* %RCX
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = add i64 4, %2389
  store i64 %2392, i64* %RCX, align 8, !tbaa !2428
  %2393 = icmp ult i64 %2392, %2389
  %2394 = icmp ult i64 %2392, 4
  %2395 = or i1 %2393, %2394
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2432
  %2398 = trunc i64 %2392 to i32
  %2399 = and i32 %2398, 255
  %2400 = call i32 @llvm.ctpop.i32(i32 %2399) #16
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2403, i8* %2404, align 1, !tbaa !2446
  %2405 = xor i64 4, %2389
  %2406 = xor i64 %2405, %2392
  %2407 = lshr i64 %2406, 4
  %2408 = trunc i64 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2409, i8* %2410, align 1, !tbaa !2447
  %2411 = icmp eq i64 %2392, 0
  %2412 = zext i1 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2412, i8* %2413, align 1, !tbaa !2448
  %2414 = lshr i64 %2392, 63
  %2415 = trunc i64 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2415, i8* %2416, align 1, !tbaa !2449
  %2417 = lshr i64 %2389, 63
  %2418 = xor i64 %2414, %2417
  %2419 = add nuw nsw i64 %2418, %2414
  %2420 = icmp eq i64 %2419, 2
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2421, i8* %2422, align 1, !tbaa !2450
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 8
  %2425 = load i64, i64* %RCX
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 4
  store i64 %2427, i64* %PC
  %2428 = inttoptr i64 %2424 to i64*
  store i64 %2425, i64* %2428
  %2429 = load i64, i64* %RAX
  %2430 = load i64, i64* %PC
  %2431 = add i64 %2430, 3
  store i64 %2431, i64* %PC
  %2432 = inttoptr i64 %2429 to i32*
  %2433 = load i32, i32* %2432
  %2434 = sext i32 %2433 to i64
  store i64 %2434, i64* %RAX, align 8, !tbaa !2428
  %2435 = load i64, i64* %RAX
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 8
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to i64*
  %2441 = load i64, i64* %2440
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 40
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 4
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2443 to i64*
  store i64 %2444, i64* %2447
  %2448 = load i64, i64* %PC
  %2449 = sub i64 %2448, 1501
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 5
  store i64 %2451, i64* %PC
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2449, i64* %2452, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 12
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 7
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  store i32 12, i32* %2457
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 12
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 3
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2459 to i32*
  %2463 = load i32, i32* %2462
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RDI, align 8, !tbaa !2428
  %2465 = load i64, i64* %PC
  %2466 = sub i64 %2465, 684
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2472 = load i64, i64* %2471, align 8, !tbaa !2428
  %2473 = add i64 %2472, -8
  %2474 = inttoptr i64 %2473 to i64*
  store i64 %2468, i64* %2474
  store i64 %2473, i64* %2471, align 8, !tbaa !2428
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2466, i64* %2475, align 8, !tbaa !2428
  %2476 = load i64, i64* %PC
  %2477 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2476, %struct.Memory* %MEMORY.0)
  %2478 = load i64, i64* %RBP
  %2479 = sub i64 %2478, 8
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2479 to i64*
  %2483 = load i64, i64* %2482
  store i64 %2483, i64* %RAX, align 8, !tbaa !2428
  %2484 = load i64, i64* %RAX
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  store i64 %2484, i64* %RCX, align 8, !tbaa !2428
  %2487 = load i64, i64* %RCX
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 4
  store i64 %2489, i64* %PC
  %2490 = add i64 4, %2487
  store i64 %2490, i64* %RCX, align 8, !tbaa !2428
  %2491 = icmp ult i64 %2490, %2487
  %2492 = icmp ult i64 %2490, 4
  %2493 = or i1 %2491, %2492
  %2494 = zext i1 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2494, i8* %2495, align 1, !tbaa !2432
  %2496 = trunc i64 %2490 to i32
  %2497 = and i32 %2496, 255
  %2498 = call i32 @llvm.ctpop.i32(i32 %2497) #16
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = xor i8 %2500, 1
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2501, i8* %2502, align 1, !tbaa !2446
  %2503 = xor i64 4, %2487
  %2504 = xor i64 %2503, %2490
  %2505 = lshr i64 %2504, 4
  %2506 = trunc i64 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2507, i8* %2508, align 1, !tbaa !2447
  %2509 = icmp eq i64 %2490, 0
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2510, i8* %2511, align 1, !tbaa !2448
  %2512 = lshr i64 %2490, 63
  %2513 = trunc i64 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2513, i8* %2514, align 1, !tbaa !2449
  %2515 = lshr i64 %2487, 63
  %2516 = xor i64 %2512, %2515
  %2517 = add nuw nsw i64 %2516, %2512
  %2518 = icmp eq i64 %2517, 2
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2519, i8* %2520, align 1, !tbaa !2450
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 8
  %2523 = load i64, i64* %RCX
  %2524 = load i64, i64* %PC
  %2525 = add i64 %2524, 4
  store i64 %2525, i64* %PC
  %2526 = inttoptr i64 %2522 to i64*
  store i64 %2523, i64* %2526
  %2527 = load i64, i64* %RAX
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 3
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RAX
  %2534 = mul i64 %2533, 8
  %2535 = add i64 %2534, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 8
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2535 to i64*
  %2539 = load i64, i64* %2538
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 40
  %2542 = load i64, i64* %RAX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2541 to i64*
  store i64 %2542, i64* %2545
  %2546 = load i64, i64* %PC
  %2547 = sub i64 %2546, 601
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2547, i64* %2550, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 12
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 7
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to i32*
  store i32 17, i32* %2555
  %2556 = load i64, i64* %RBP
  %2557 = sub i64 %2556, 12
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 3
  store i64 %2559, i64* %PC
  %2560 = inttoptr i64 %2557 to i32*
  %2561 = load i32, i32* %2560
  %2562 = zext i32 %2561 to i64
  store i64 %2562, i64* %RDI, align 8, !tbaa !2428
  %2563 = load i64, i64* %PC
  %2564 = sub i64 %2563, 934
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 5
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  store i64 %2568, i64* %PC
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2570 = load i64, i64* %2569, align 8, !tbaa !2428
  %2571 = add i64 %2570, -8
  %2572 = inttoptr i64 %2571 to i64*
  store i64 %2566, i64* %2572
  store i64 %2571, i64* %2569, align 8, !tbaa !2428
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2564, i64* %2573, align 8, !tbaa !2428
  %2574 = load i64, i64* %PC
  %2575 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2574, %struct.Memory* %MEMORY.0)
  %2576 = load i64, i64* %RBP
  %2577 = sub i64 %2576, 8
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2577 to i64*
  %2581 = load i64, i64* %2580
  store i64 %2581, i64* %RAX, align 8, !tbaa !2428
  %2582 = load i64, i64* %RAX
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 3
  store i64 %2584, i64* %PC
  store i64 %2582, i64* %RCX, align 8, !tbaa !2428
  %2585 = load i64, i64* %RCX
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 4
  store i64 %2587, i64* %PC
  %2588 = add i64 4, %2585
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = icmp ult i64 %2588, %2585
  %2590 = icmp ult i64 %2588, 4
  %2591 = or i1 %2589, %2590
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2592, i8* %2593, align 1, !tbaa !2432
  %2594 = trunc i64 %2588 to i32
  %2595 = and i32 %2594, 255
  %2596 = call i32 @llvm.ctpop.i32(i32 %2595) #16
  %2597 = trunc i32 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = xor i8 %2598, 1
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2599, i8* %2600, align 1, !tbaa !2446
  %2601 = xor i64 4, %2585
  %2602 = xor i64 %2601, %2588
  %2603 = lshr i64 %2602, 4
  %2604 = trunc i64 %2603 to i8
  %2605 = and i8 %2604, 1
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2605, i8* %2606, align 1, !tbaa !2447
  %2607 = icmp eq i64 %2588, 0
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2608, i8* %2609, align 1, !tbaa !2448
  %2610 = lshr i64 %2588, 63
  %2611 = trunc i64 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2611, i8* %2612, align 1, !tbaa !2449
  %2613 = lshr i64 %2585, 63
  %2614 = xor i64 %2610, %2613
  %2615 = add nuw nsw i64 %2614, %2610
  %2616 = icmp eq i64 %2615, 2
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2617, i8* %2618, align 1, !tbaa !2450
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 8
  %2621 = load i64, i64* %RCX
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 4
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2620 to i64*
  store i64 %2621, i64* %2624
  %2625 = load i64, i64* %RAX
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 3
  store i64 %2627, i64* %PC
  %2628 = inttoptr i64 %2625 to i32*
  %2629 = load i32, i32* %2628
  %2630 = sext i32 %2629 to i64
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RAX
  %2632 = mul i64 %2631, 8
  %2633 = add i64 %2632, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 8
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2633 to i64*
  %2637 = load i64, i64* %2636
  store i64 %2637, i64* %RAX, align 8, !tbaa !2428
  %2638 = load i64, i64* %RBP
  %2639 = sub i64 %2638, 40
  %2640 = load i64, i64* %RAX
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 4
  store i64 %2642, i64* %PC
  %2643 = inttoptr i64 %2639 to i64*
  store i64 %2640, i64* %2643
  %2644 = load i64, i64* %PC
  %2645 = sub i64 %2644, 851
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 5
  store i64 %2647, i64* %PC
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2645, i64* %2648, align 8, !tbaa !2428
  br label %block_400566

block_400609:                                     ; preds = %block_400602, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400602 ]
  %2649 = load i64, i64* %RBP
  %2650 = sub i64 %2649, 12
  %2651 = load i64, i64* %PC
  %2652 = add i64 %2651, 3
  store i64 %2652, i64* %PC
  %2653 = inttoptr i64 %2650 to i32*
  %2654 = load i32, i32* %2653
  %2655 = zext i32 %2654 to i64
  store i64 %2655, i64* %RDI, align 8, !tbaa !2428
  %2656 = load i64, i64* %PC
  %2657 = sub i64 %2656, 284
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 5
  store i64 %2661, i64* %PC
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2663 = load i64, i64* %2662, align 8, !tbaa !2428
  %2664 = add i64 %2663, -8
  %2665 = inttoptr i64 %2664 to i64*
  store i64 %2659, i64* %2665
  store i64 %2664, i64* %2662, align 8, !tbaa !2428
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2657, i64* %2666, align 8, !tbaa !2428
  %2667 = load i64, i64* %PC
  %2668 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2667, %struct.Memory* %MEMORY.1)
  %2669 = load i64, i64* %RBP
  %2670 = sub i64 %2669, 8
  %2671 = load i64, i64* %PC
  %2672 = add i64 %2671, 4
  store i64 %2672, i64* %PC
  %2673 = inttoptr i64 %2670 to i64*
  %2674 = load i64, i64* %2673
  store i64 %2674, i64* %RAX, align 8, !tbaa !2428
  %2675 = load i64, i64* %RAX
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 3
  store i64 %2677, i64* %PC
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2678 = load i64, i64* %RCX
  %2679 = load i64, i64* %PC
  %2680 = add i64 %2679, 4
  store i64 %2680, i64* %PC
  %2681 = add i64 4, %2678
  store i64 %2681, i64* %RCX, align 8, !tbaa !2428
  %2682 = icmp ult i64 %2681, %2678
  %2683 = icmp ult i64 %2681, 4
  %2684 = or i1 %2682, %2683
  %2685 = zext i1 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2685, i8* %2686, align 1, !tbaa !2432
  %2687 = trunc i64 %2681 to i32
  %2688 = and i32 %2687, 255
  %2689 = call i32 @llvm.ctpop.i32(i32 %2688) #16
  %2690 = trunc i32 %2689 to i8
  %2691 = and i8 %2690, 1
  %2692 = xor i8 %2691, 1
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2692, i8* %2693, align 1, !tbaa !2446
  %2694 = xor i64 4, %2678
  %2695 = xor i64 %2694, %2681
  %2696 = lshr i64 %2695, 4
  %2697 = trunc i64 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2698, i8* %2699, align 1, !tbaa !2447
  %2700 = icmp eq i64 %2681, 0
  %2701 = zext i1 %2700 to i8
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2701, i8* %2702, align 1, !tbaa !2448
  %2703 = lshr i64 %2681, 63
  %2704 = trunc i64 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2704, i8* %2705, align 1, !tbaa !2449
  %2706 = lshr i64 %2678, 63
  %2707 = xor i64 %2703, %2706
  %2708 = add nuw nsw i64 %2707, %2703
  %2709 = icmp eq i64 %2708, 2
  %2710 = zext i1 %2709 to i8
  %2711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2710, i8* %2711, align 1, !tbaa !2450
  %2712 = load i64, i64* %RBP
  %2713 = sub i64 %2712, 8
  %2714 = load i64, i64* %RCX
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 4
  store i64 %2716, i64* %PC
  %2717 = inttoptr i64 %2713 to i64*
  store i64 %2714, i64* %2717
  %2718 = load i64, i64* %RAX
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 3
  store i64 %2720, i64* %PC
  %2721 = inttoptr i64 %2718 to i32*
  %2722 = load i32, i32* %2721
  %2723 = sext i32 %2722 to i64
  store i64 %2723, i64* %RAX, align 8, !tbaa !2428
  %2724 = load i64, i64* %RAX
  %2725 = mul i64 %2724, 8
  %2726 = add i64 %2725, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2727 = load i64, i64* %PC
  %2728 = add i64 %2727, 8
  store i64 %2728, i64* %PC
  %2729 = inttoptr i64 %2726 to i64*
  %2730 = load i64, i64* %2729
  store i64 %2730, i64* %RAX, align 8, !tbaa !2428
  %2731 = load i64, i64* %RBP
  %2732 = sub i64 %2731, 40
  %2733 = load i64, i64* %RAX
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 4
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2732 to i64*
  store i64 %2733, i64* %2736
  %2737 = load i64, i64* %PC
  %2738 = sub i64 %2737, 201
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 5
  store i64 %2740, i64* %PC
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2738, i64* %2741, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2742 = load i64, i64* %RBP
  %2743 = sub i64 %2742, 12
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 7
  store i64 %2745, i64* %PC
  %2746 = inttoptr i64 %2743 to i32*
  store i32 22, i32* %2746
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 12
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 3
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  %2752 = load i32, i32* %2751
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* %RDI, align 8, !tbaa !2428
  %2754 = load i64, i64* %PC
  %2755 = sub i64 %2754, 1184
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 5
  store i64 %2759, i64* %PC
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2761 = load i64, i64* %2760, align 8, !tbaa !2428
  %2762 = add i64 %2761, -8
  %2763 = inttoptr i64 %2762 to i64*
  store i64 %2757, i64* %2763
  store i64 %2762, i64* %2760, align 8, !tbaa !2428
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2755, i64* %2764, align 8, !tbaa !2428
  %2765 = load i64, i64* %PC
  %2766 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2765, %struct.Memory* %MEMORY.0)
  %2767 = load i64, i64* %RBP
  %2768 = sub i64 %2767, 8
  %2769 = load i64, i64* %PC
  %2770 = add i64 %2769, 4
  store i64 %2770, i64* %PC
  %2771 = inttoptr i64 %2768 to i64*
  %2772 = load i64, i64* %2771
  store i64 %2772, i64* %RAX, align 8, !tbaa !2428
  %2773 = load i64, i64* %RAX
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 3
  store i64 %2775, i64* %PC
  store i64 %2773, i64* %RCX, align 8, !tbaa !2428
  %2776 = load i64, i64* %RCX
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 4
  store i64 %2778, i64* %PC
  %2779 = add i64 4, %2776
  store i64 %2779, i64* %RCX, align 8, !tbaa !2428
  %2780 = icmp ult i64 %2779, %2776
  %2781 = icmp ult i64 %2779, 4
  %2782 = or i1 %2780, %2781
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2783, i8* %2784, align 1, !tbaa !2432
  %2785 = trunc i64 %2779 to i32
  %2786 = and i32 %2785, 255
  %2787 = call i32 @llvm.ctpop.i32(i32 %2786) #16
  %2788 = trunc i32 %2787 to i8
  %2789 = and i8 %2788, 1
  %2790 = xor i8 %2789, 1
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2790, i8* %2791, align 1, !tbaa !2446
  %2792 = xor i64 4, %2776
  %2793 = xor i64 %2792, %2779
  %2794 = lshr i64 %2793, 4
  %2795 = trunc i64 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2796, i8* %2797, align 1, !tbaa !2447
  %2798 = icmp eq i64 %2779, 0
  %2799 = zext i1 %2798 to i8
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2799, i8* %2800, align 1, !tbaa !2448
  %2801 = lshr i64 %2779, 63
  %2802 = trunc i64 %2801 to i8
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2802, i8* %2803, align 1, !tbaa !2449
  %2804 = lshr i64 %2776, 63
  %2805 = xor i64 %2801, %2804
  %2806 = add nuw nsw i64 %2805, %2801
  %2807 = icmp eq i64 %2806, 2
  %2808 = zext i1 %2807 to i8
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2808, i8* %2809, align 1, !tbaa !2450
  %2810 = load i64, i64* %RBP
  %2811 = sub i64 %2810, 8
  %2812 = load i64, i64* %RCX
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 4
  store i64 %2814, i64* %PC
  %2815 = inttoptr i64 %2811 to i64*
  store i64 %2812, i64* %2815
  %2816 = load i64, i64* %RAX
  %2817 = load i64, i64* %PC
  %2818 = add i64 %2817, 3
  store i64 %2818, i64* %PC
  %2819 = inttoptr i64 %2816 to i32*
  %2820 = load i32, i32* %2819
  %2821 = sext i32 %2820 to i64
  store i64 %2821, i64* %RAX, align 8, !tbaa !2428
  %2822 = load i64, i64* %RAX
  %2823 = mul i64 %2822, 8
  %2824 = add i64 %2823, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 8
  store i64 %2826, i64* %PC
  %2827 = inttoptr i64 %2824 to i64*
  %2828 = load i64, i64* %2827
  store i64 %2828, i64* %RAX, align 8, !tbaa !2428
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 40
  %2831 = load i64, i64* %RAX
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 4
  store i64 %2833, i64* %PC
  %2834 = inttoptr i64 %2830 to i64*
  store i64 %2831, i64* %2834
  %2835 = load i64, i64* %PC
  %2836 = sub i64 %2835, 1101
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 5
  store i64 %2838, i64* %PC
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2836, i64* %2839, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %2840 = load i64, i64* %RBP
  %2841 = sub i64 %2840, 12
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 7
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2841 to i32*
  store i32 4, i32* %2844
  br label %block_400609

block_400a80:                                     ; preds = %block_400566
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 12
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 7
  store i64 %2848, i64* %PC
  %2849 = inttoptr i64 %2846 to i32*
  store i32 27, i32* %2849
  %2850 = load i64, i64* %PC
  %2851 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2850, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2851

; <label>:2852:                                   ; preds = %block_400566
  %2853 = load i64, i64* %PC
  %2854 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2853, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2854
}

; Function Attrs: noinline
define %struct.Memory* @sub_400703(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400703

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  br label %block_400703

block_4007f6:                                     ; preds = %block_400566
  %27 = load i64, i64* %RBP
  %28 = sub i64 %27, 12
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 7
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %28 to i32*
  store i32 14, i32* %31
  %32 = load i64, i64* %RBP
  %33 = sub i64 %32, 12
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %33 to i32*
  %37 = load i32, i32* %36
  %38 = zext i32 %37 to i64
  store i64 %38, i64* %RDI, align 8, !tbaa !2428
  %39 = load i64, i64* %PC
  %40 = sub i64 %39, 784
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 5
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %40, i64* %49, align 8, !tbaa !2428
  %50 = load i64, i64* %PC
  %51 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %50, %struct.Memory* %MEMORY.0)
  %52 = load i64, i64* %RBP
  %53 = sub i64 %52, 8
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = load i64, i64* %RAX
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  store i64 %58, i64* %RCX, align 8, !tbaa !2428
  %61 = load i64, i64* %RCX
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = add i64 4, %61
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = icmp ult i64 %64, %61
  %66 = icmp ult i64 %64, 4
  %67 = or i1 %65, %66
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %68, i8* %69, align 1, !tbaa !2432
  %70 = trunc i64 %64 to i32
  %71 = and i32 %70, 255
  %72 = call i32 @llvm.ctpop.i32(i32 %71) #16
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %75, i8* %76, align 1, !tbaa !2446
  %77 = xor i64 4, %61
  %78 = xor i64 %77, %64
  %79 = lshr i64 %78, 4
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %81, i8* %82, align 1, !tbaa !2447
  %83 = icmp eq i64 %64, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = lshr i64 %64, 63
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i64 %61, 63
  %90 = xor i64 %86, %89
  %91 = add nuw nsw i64 %90, %86
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %93, i8* %94, align 1, !tbaa !2450
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RAX
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i32*
  %105 = load i32, i32* %104
  %106 = sext i32 %105 to i64
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = load i64, i64* %RAX
  %108 = mul i64 %107, 8
  %109 = add i64 %108, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 8
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 40
  %116 = load i64, i64* %RAX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %PC
  %121 = sub i64 %120, 701
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 5
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 12
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 7
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  store i32 19, i32* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 12
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 3
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i32*
  %135 = load i32, i32* %134
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %137 = load i64, i64* %PC
  %138 = sub i64 %137, 1034
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %140, i64* %146
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %138, i64* %147, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %148, %struct.Memory* %MEMORY.0)
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 8
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %159 = load i64, i64* %RCX
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = add i64 4, %159
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %163 = icmp ult i64 %162, %159
  %164 = icmp ult i64 %162, 4
  %165 = or i1 %163, %164
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %166, i8* %167, align 1, !tbaa !2432
  %168 = trunc i64 %162 to i32
  %169 = and i32 %168, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = xor i64 4, %159
  %176 = xor i64 %175, %162
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = icmp eq i64 %162, 0
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %182, i8* %183, align 1, !tbaa !2448
  %184 = lshr i64 %162, 63
  %185 = trunc i64 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %185, i8* %186, align 1, !tbaa !2449
  %187 = lshr i64 %159, 63
  %188 = xor i64 %184, %187
  %189 = add nuw nsw i64 %188, %184
  %190 = icmp eq i64 %189, 2
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 8
  %195 = load i64, i64* %RCX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  %203 = load i32, i32* %202
  %204 = sext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RAX
  %206 = mul i64 %205, 8
  %207 = add i64 %206, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 8
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 40
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 951
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %222, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 12
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 7
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i32*
  store i32 24, i32* %227
  %228 = load i64, i64* %RBP
  %229 = sub i64 %228, 12
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 3
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %229 to i32*
  %233 = load i32, i32* %232
  %234 = zext i32 %233 to i64
  store i64 %234, i64* %RDI, align 8, !tbaa !2428
  %235 = load i64, i64* %PC
  %236 = sub i64 %235, 1284
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  store i64 %240, i64* %PC
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %242 = load i64, i64* %241, align 8, !tbaa !2428
  %243 = add i64 %242, -8
  %244 = inttoptr i64 %243 to i64*
  store i64 %238, i64* %244
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %236, i64* %245, align 8, !tbaa !2428
  %246 = load i64, i64* %PC
  %247 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %246, %struct.Memory* %MEMORY.0)
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %257 = load i64, i64* %RCX
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 4
  store i64 %259, i64* %PC
  %260 = add i64 4, %257
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = icmp ult i64 %260, %257
  %262 = icmp ult i64 %260, 4
  %263 = or i1 %261, %262
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %264, i8* %265, align 1, !tbaa !2432
  %266 = trunc i64 %260 to i32
  %267 = and i32 %266, 255
  %268 = call i32 @llvm.ctpop.i32(i32 %267) #16
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %271, i8* %272, align 1, !tbaa !2446
  %273 = xor i64 4, %257
  %274 = xor i64 %273, %260
  %275 = lshr i64 %274, 4
  %276 = trunc i64 %275 to i8
  %277 = and i8 %276, 1
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %277, i8* %278, align 1, !tbaa !2447
  %279 = icmp eq i64 %260, 0
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %280, i8* %281, align 1, !tbaa !2448
  %282 = lshr i64 %260, 63
  %283 = trunc i64 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = lshr i64 %257, 63
  %286 = xor i64 %282, %285
  %287 = add nuw nsw i64 %286, %282
  %288 = icmp eq i64 %287, 2
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %289, i8* %290, align 1, !tbaa !2450
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 8
  %293 = load i64, i64* %RCX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 3
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300
  %302 = sext i32 %301 to i64
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RAX
  %304 = mul i64 %303, 8
  %305 = add i64 %304, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 8
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 40
  %312 = load i64, i64* %RAX
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %311 to i64*
  store i64 %312, i64* %315
  %316 = load i64, i64* %PC
  %317 = sub i64 %316, 1201
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %317, i64* %320, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 12
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 7
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  store i32 29, i32* %325
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 12
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = sub i64 %333, 1534
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %340 = load i64, i64* %339, align 8, !tbaa !2428
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %336, i64* %342
  store i64 %341, i64* %339, align 8, !tbaa !2428
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %334, i64* %343, align 8, !tbaa !2428
  %344 = load i64, i64* %PC
  %345 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %344, %struct.Memory* %MEMORY.0)
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %355 = load i64, i64* %RCX
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = add i64 4, %355
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = icmp ult i64 %358, %355
  %360 = icmp ult i64 %358, 4
  %361 = or i1 %359, %360
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %362, i8* %363, align 1, !tbaa !2432
  %364 = trunc i64 %358 to i32
  %365 = and i32 %364, 255
  %366 = call i32 @llvm.ctpop.i32(i32 %365) #16
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %369, i8* %370, align 1, !tbaa !2446
  %371 = xor i64 4, %355
  %372 = xor i64 %371, %358
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %375, i8* %376, align 1, !tbaa !2447
  %377 = icmp eq i64 %358, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2448
  %380 = lshr i64 %358, 63
  %381 = trunc i64 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %381, i8* %382, align 1, !tbaa !2449
  %383 = lshr i64 %355, 63
  %384 = xor i64 %380, %383
  %385 = add nuw nsw i64 %384, %380
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %387, i8* %388, align 1, !tbaa !2450
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 8
  %391 = load i64, i64* %RCX
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %390 to i64*
  store i64 %391, i64* %394
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sext i32 %399 to i64
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = load i64, i64* %RAX
  %402 = mul i64 %401, 8
  %403 = add i64 %402, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 8
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 40
  %410 = load i64, i64* %RAX
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = inttoptr i64 %409 to i64*
  store i64 %410, i64* %413
  %414 = load i64, i64* %PC
  %415 = sub i64 %414, 1451
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %415, i64* %418, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 12
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 7
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i32*
  store i32 11, i32* %423
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 12
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i32*
  %429 = load i32, i32* %428
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %RDI, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  %432 = sub i64 %431, 634
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %438 = load i64, i64* %437, align 8, !tbaa !2428
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %434, i64* %440
  store i64 %439, i64* %437, align 8, !tbaa !2428
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %432, i64* %441, align 8, !tbaa !2428
  %442 = load i64, i64* %PC
  %443 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %442, %struct.Memory* %MEMORY.0)
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 8
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = load i64, i64* %RAX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %453 = load i64, i64* %RCX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = add i64 4, %453
  store i64 %456, i64* %RCX, align 8, !tbaa !2428
  %457 = icmp ult i64 %456, %453
  %458 = icmp ult i64 %456, 4
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %460, i8* %461, align 1, !tbaa !2432
  %462 = trunc i64 %456 to i32
  %463 = and i32 %462, 255
  %464 = call i32 @llvm.ctpop.i32(i32 %463) #16
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  %467 = xor i8 %466, 1
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %467, i8* %468, align 1, !tbaa !2446
  %469 = xor i64 4, %453
  %470 = xor i64 %469, %456
  %471 = lshr i64 %470, 4
  %472 = trunc i64 %471 to i8
  %473 = and i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %473, i8* %474, align 1, !tbaa !2447
  %475 = icmp eq i64 %456, 0
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %476, i8* %477, align 1, !tbaa !2448
  %478 = lshr i64 %456, 63
  %479 = trunc i64 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %479, i8* %480, align 1, !tbaa !2449
  %481 = lshr i64 %453, 63
  %482 = xor i64 %478, %481
  %483 = add nuw nsw i64 %482, %478
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2450
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 8
  %489 = load i64, i64* %RCX
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %488 to i64*
  store i64 %489, i64* %492
  %493 = load i64, i64* %RAX
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 3
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to i32*
  %497 = load i32, i32* %496
  %498 = sext i32 %497 to i64
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = load i64, i64* %RAX
  %500 = mul i64 %499, 8
  %501 = add i64 %500, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 8
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 40
  %508 = load i64, i64* %RAX
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %507 to i64*
  store i64 %508, i64* %511
  %512 = load i64, i64* %PC
  %513 = sub i64 %512, 551
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 5
  store i64 %515, i64* %PC
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %513, i64* %516, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 12
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 7
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  store i32 16, i32* %521
  %522 = load i64, i64* %RBP
  %523 = sub i64 %522, 12
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 3
  store i64 %525, i64* %PC
  %526 = inttoptr i64 %523 to i32*
  %527 = load i32, i32* %526
  %528 = zext i32 %527 to i64
  store i64 %528, i64* %RDI, align 8, !tbaa !2428
  %529 = load i64, i64* %PC
  %530 = sub i64 %529, 884
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 5
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %536 = load i64, i64* %535, align 8, !tbaa !2428
  %537 = add i64 %536, -8
  %538 = inttoptr i64 %537 to i64*
  store i64 %532, i64* %538
  store i64 %537, i64* %535, align 8, !tbaa !2428
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %530, i64* %539, align 8, !tbaa !2428
  %540 = load i64, i64* %PC
  %541 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %540, %struct.Memory* %MEMORY.0)
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 8
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = load i64, i64* %RAX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 3
  store i64 %550, i64* %PC
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %551 = load i64, i64* %RCX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC
  %554 = add i64 4, %551
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = icmp ult i64 %554, %551
  %556 = icmp ult i64 %554, 4
  %557 = or i1 %555, %556
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %558, i8* %559, align 1, !tbaa !2432
  %560 = trunc i64 %554 to i32
  %561 = and i32 %560, 255
  %562 = call i32 @llvm.ctpop.i32(i32 %561) #16
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  %565 = xor i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %565, i8* %566, align 1, !tbaa !2446
  %567 = xor i64 4, %551
  %568 = xor i64 %567, %554
  %569 = lshr i64 %568, 4
  %570 = trunc i64 %569 to i8
  %571 = and i8 %570, 1
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %571, i8* %572, align 1, !tbaa !2447
  %573 = icmp eq i64 %554, 0
  %574 = zext i1 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %574, i8* %575, align 1, !tbaa !2448
  %576 = lshr i64 %554, 63
  %577 = trunc i64 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %577, i8* %578, align 1, !tbaa !2449
  %579 = lshr i64 %551, 63
  %580 = xor i64 %576, %579
  %581 = add nuw nsw i64 %580, %576
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %583, i8* %584, align 1, !tbaa !2450
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 8
  %587 = load i64, i64* %RCX
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %586 to i64*
  store i64 %587, i64* %590
  %591 = load i64, i64* %RAX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = load i64, i64* %RAX
  %598 = mul i64 %597, 8
  %599 = add i64 %598, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 8
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 40
  %606 = load i64, i64* %RAX
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 4
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %605 to i64*
  store i64 %606, i64* %609
  %610 = load i64, i64* %PC
  %611 = sub i64 %610, 801
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 5
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %611, i64* %614, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 12
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  store i32 21, i32* %619
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 12
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 3
  store i64 %623, i64* %PC
  %624 = inttoptr i64 %621 to i32*
  %625 = load i32, i32* %624
  %626 = zext i32 %625 to i64
  store i64 %626, i64* %RDI, align 8, !tbaa !2428
  %627 = load i64, i64* %PC
  %628 = sub i64 %627, 1134
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 5
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  store i64 %632, i64* %PC
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %634 = load i64, i64* %633, align 8, !tbaa !2428
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %630, i64* %636
  store i64 %635, i64* %633, align 8, !tbaa !2428
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %628, i64* %637, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %638, %struct.Memory* %MEMORY.0)
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 8
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 4
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i64*
  %645 = load i64, i64* %644
  store i64 %645, i64* %RAX, align 8, !tbaa !2428
  %646 = load i64, i64* %RAX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 3
  store i64 %648, i64* %PC
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %649 = load i64, i64* %RCX
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = add i64 4, %649
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = icmp ult i64 %652, %649
  %654 = icmp ult i64 %652, 4
  %655 = or i1 %653, %654
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = trunc i64 %652 to i32
  %659 = and i32 %658, 255
  %660 = call i32 @llvm.ctpop.i32(i32 %659) #16
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %663, i8* %664, align 1, !tbaa !2446
  %665 = xor i64 4, %649
  %666 = xor i64 %665, %652
  %667 = lshr i64 %666, 4
  %668 = trunc i64 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i64 %652, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i64 %652, 63
  %675 = trunc i64 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i64 %649, 63
  %678 = xor i64 %674, %677
  %679 = add nuw nsw i64 %678, %674
  %680 = icmp eq i64 %679, 2
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %681, i8* %682, align 1, !tbaa !2450
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 8
  %685 = load i64, i64* %RCX
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %684 to i64*
  store i64 %685, i64* %688
  %689 = load i64, i64* %RAX
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 3
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692
  %694 = sext i32 %693 to i64
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = load i64, i64* %RAX
  %696 = mul i64 %695, 8
  %697 = add i64 %696, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 8
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 40
  %704 = load i64, i64* %RAX
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 4
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %703 to i64*
  store i64 %704, i64* %707
  %708 = load i64, i64* %PC
  %709 = sub i64 %708, 1051
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 5
  store i64 %711, i64* %PC
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %709, i64* %712, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 12
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i32*
  store i32 1, i32* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 12
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %725 = load i64, i64* %PC
  %726 = sub i64 %725, 134
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %732 = load i64, i64* %731, align 8, !tbaa !2428
  %733 = add i64 %732, -8
  %734 = inttoptr i64 %733 to i64*
  store i64 %728, i64* %734
  store i64 %733, i64* %731, align 8, !tbaa !2428
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %726, i64* %735, align 8, !tbaa !2428
  %736 = load i64, i64* %PC
  %737 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %736, %struct.Memory* %MEMORY.0)
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 8
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RCX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = add i64 4, %747
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ult i64 %750, %747
  %752 = icmp ult i64 %750, 4
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = trunc i64 %750 to i32
  %757 = and i32 %756, 255
  %758 = call i32 @llvm.ctpop.i32(i32 %757) #16
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %761, i8* %762, align 1, !tbaa !2446
  %763 = xor i64 4, %747
  %764 = xor i64 %763, %750
  %765 = lshr i64 %764, 4
  %766 = trunc i64 %765 to i8
  %767 = and i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %767, i8* %768, align 1, !tbaa !2447
  %769 = icmp eq i64 %750, 0
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %770, i8* %771, align 1, !tbaa !2448
  %772 = lshr i64 %750, 63
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %773, i8* %774, align 1, !tbaa !2449
  %775 = lshr i64 %747, 63
  %776 = xor i64 %772, %775
  %777 = add nuw nsw i64 %776, %772
  %778 = icmp eq i64 %777, 2
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %779, i8* %780, align 1, !tbaa !2450
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 8
  %783 = load i64, i64* %RCX
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 4
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  %791 = load i32, i32* %790
  %792 = sext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = load i64, i64* %RAX
  %794 = mul i64 %793, 8
  %795 = add i64 %794, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 8
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 40
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %801 to i64*
  store i64 %802, i64* %805
  %806 = load i64, i64* %PC
  %807 = sub i64 %806, 51
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 5
  store i64 %809, i64* %PC
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %807, i64* %810, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 12
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i32*
  store i32 26, i32* %815
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 12
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i32*
  %821 = load i32, i32* %820
  %822 = zext i32 %821 to i64
  store i64 %822, i64* %RDI, align 8, !tbaa !2428
  %823 = load i64, i64* %PC
  %824 = sub i64 %823, 1384
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 5
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  store i64 %828, i64* %PC
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %830 = load i64, i64* %829, align 8, !tbaa !2428
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %826, i64* %832
  store i64 %831, i64* %829, align 8, !tbaa !2428
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %824, i64* %833, align 8, !tbaa !2428
  %834 = load i64, i64* %PC
  %835 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %834, %struct.Memory* %MEMORY.0)
  %836 = load i64, i64* %RBP
  %837 = sub i64 %836, 8
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 4
  store i64 %839, i64* %PC
  %840 = inttoptr i64 %837 to i64*
  %841 = load i64, i64* %840
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = load i64, i64* %RAX
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 3
  store i64 %844, i64* %PC
  store i64 %842, i64* %RCX, align 8, !tbaa !2428
  %845 = load i64, i64* %RCX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = add i64 4, %845
  store i64 %848, i64* %RCX, align 8, !tbaa !2428
  %849 = icmp ult i64 %848, %845
  %850 = icmp ult i64 %848, 4
  %851 = or i1 %849, %850
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %852, i8* %853, align 1, !tbaa !2432
  %854 = trunc i64 %848 to i32
  %855 = and i32 %854, 255
  %856 = call i32 @llvm.ctpop.i32(i32 %855) #16
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  %859 = xor i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %859, i8* %860, align 1, !tbaa !2446
  %861 = xor i64 4, %845
  %862 = xor i64 %861, %848
  %863 = lshr i64 %862, 4
  %864 = trunc i64 %863 to i8
  %865 = and i8 %864, 1
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %865, i8* %866, align 1, !tbaa !2447
  %867 = icmp eq i64 %848, 0
  %868 = zext i1 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %868, i8* %869, align 1, !tbaa !2448
  %870 = lshr i64 %848, 63
  %871 = trunc i64 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %871, i8* %872, align 1, !tbaa !2449
  %873 = lshr i64 %845, 63
  %874 = xor i64 %870, %873
  %875 = add nuw nsw i64 %874, %870
  %876 = icmp eq i64 %875, 2
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %877, i8* %878, align 1, !tbaa !2450
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 8
  %881 = load i64, i64* %RCX
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 4
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %880 to i64*
  store i64 %881, i64* %884
  %885 = load i64, i64* %RAX
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 3
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i32*
  %889 = load i32, i32* %888
  %890 = sext i32 %889 to i64
  store i64 %890, i64* %RAX, align 8, !tbaa !2428
  %891 = load i64, i64* %RAX
  %892 = mul i64 %891, 8
  %893 = add i64 %892, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 8
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 40
  %900 = load i64, i64* %RAX
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 4
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %899 to i64*
  store i64 %900, i64* %903
  %904 = load i64, i64* %PC
  %905 = sub i64 %904, 1301
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 5
  store i64 %907, i64* %PC
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %905, i64* %908, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 12
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 7
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i32*
  store i32 8, i32* %913
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 12
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 3
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i32*
  %919 = load i32, i32* %918
  %920 = zext i32 %919 to i64
  store i64 %920, i64* %RDI, align 8, !tbaa !2428
  %921 = load i64, i64* %PC
  %922 = sub i64 %921, 484
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 5
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  store i64 %926, i64* %PC
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %928 = load i64, i64* %927, align 8, !tbaa !2428
  %929 = add i64 %928, -8
  %930 = inttoptr i64 %929 to i64*
  store i64 %924, i64* %930
  store i64 %929, i64* %927, align 8, !tbaa !2428
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %922, i64* %931, align 8, !tbaa !2428
  %932 = load i64, i64* %PC
  %933 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %932, %struct.Memory* %MEMORY.0)
  %934 = load i64, i64* %RBP
  %935 = sub i64 %934, 8
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC
  %938 = inttoptr i64 %935 to i64*
  %939 = load i64, i64* %938
  store i64 %939, i64* %RAX, align 8, !tbaa !2428
  %940 = load i64, i64* %RAX
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 3
  store i64 %942, i64* %PC
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %943 = load i64, i64* %RCX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = add i64 4, %943
  store i64 %946, i64* %RCX, align 8, !tbaa !2428
  %947 = icmp ult i64 %946, %943
  %948 = icmp ult i64 %946, 4
  %949 = or i1 %947, %948
  %950 = zext i1 %949 to i8
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %950, i8* %951, align 1, !tbaa !2432
  %952 = trunc i64 %946 to i32
  %953 = and i32 %952, 255
  %954 = call i32 @llvm.ctpop.i32(i32 %953) #16
  %955 = trunc i32 %954 to i8
  %956 = and i8 %955, 1
  %957 = xor i8 %956, 1
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %957, i8* %958, align 1, !tbaa !2446
  %959 = xor i64 4, %943
  %960 = xor i64 %959, %946
  %961 = lshr i64 %960, 4
  %962 = trunc i64 %961 to i8
  %963 = and i8 %962, 1
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %963, i8* %964, align 1, !tbaa !2447
  %965 = icmp eq i64 %946, 0
  %966 = zext i1 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %966, i8* %967, align 1, !tbaa !2448
  %968 = lshr i64 %946, 63
  %969 = trunc i64 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %969, i8* %970, align 1, !tbaa !2449
  %971 = lshr i64 %943, 63
  %972 = xor i64 %968, %971
  %973 = add nuw nsw i64 %972, %968
  %974 = icmp eq i64 %973, 2
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %975, i8* %976, align 1, !tbaa !2450
  %977 = load i64, i64* %RBP
  %978 = sub i64 %977, 8
  %979 = load i64, i64* %RCX
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 4
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %978 to i64*
  store i64 %979, i64* %982
  %983 = load i64, i64* %RAX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  %987 = load i32, i32* %986
  %988 = sext i32 %987 to i64
  store i64 %988, i64* %RAX, align 8, !tbaa !2428
  %989 = load i64, i64* %RAX
  %990 = mul i64 %989, 8
  %991 = add i64 %990, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 8
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i64*
  %995 = load i64, i64* %994
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RBP
  %997 = sub i64 %996, 40
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %997 to i64*
  store i64 %998, i64* %1001
  %1002 = load i64, i64* %PC
  %1003 = sub i64 %1002, 401
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 5
  store i64 %1005, i64* %PC
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1003, i64* %1006, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 12
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 7
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1008 to i32*
  store i32 31, i32* %1011
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 12
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 3
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i32*
  %1017 = load i32, i32* %1016
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RDI, align 8, !tbaa !2428
  %1019 = load i64, i64* %PC
  %1020 = sub i64 %1019, 1634
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 5
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  store i64 %1024, i64* %PC
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1026 = load i64, i64* %1025, align 8, !tbaa !2428
  %1027 = add i64 %1026, -8
  %1028 = inttoptr i64 %1027 to i64*
  store i64 %1022, i64* %1028
  store i64 %1027, i64* %1025, align 8, !tbaa !2428
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1020, i64* %1029, align 8, !tbaa !2428
  %1030 = load i64, i64* %PC
  %1031 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1030, %struct.Memory* %MEMORY.0)
  %1032 = load i64, i64* %RBP
  %1033 = sub i64 %1032, 8
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 4
  store i64 %1035, i64* %PC
  %1036 = inttoptr i64 %1033 to i64*
  %1037 = load i64, i64* %1036
  store i64 %1037, i64* %RAX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RAX
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 3
  store i64 %1040, i64* %PC
  store i64 %1038, i64* %RCX, align 8, !tbaa !2428
  %1041 = load i64, i64* %RCX
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 4
  store i64 %1043, i64* %PC
  %1044 = add i64 4, %1041
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = icmp ult i64 %1044, %1041
  %1046 = icmp ult i64 %1044, 4
  %1047 = or i1 %1045, %1046
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1048, i8* %1049, align 1, !tbaa !2432
  %1050 = trunc i64 %1044 to i32
  %1051 = and i32 %1050, 255
  %1052 = call i32 @llvm.ctpop.i32(i32 %1051) #16
  %1053 = trunc i32 %1052 to i8
  %1054 = and i8 %1053, 1
  %1055 = xor i8 %1054, 1
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1055, i8* %1056, align 1, !tbaa !2446
  %1057 = xor i64 4, %1041
  %1058 = xor i64 %1057, %1044
  %1059 = lshr i64 %1058, 4
  %1060 = trunc i64 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1061, i8* %1062, align 1, !tbaa !2447
  %1063 = icmp eq i64 %1044, 0
  %1064 = zext i1 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1064, i8* %1065, align 1, !tbaa !2448
  %1066 = lshr i64 %1044, 63
  %1067 = trunc i64 %1066 to i8
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1067, i8* %1068, align 1, !tbaa !2449
  %1069 = lshr i64 %1041, 63
  %1070 = xor i64 %1066, %1069
  %1071 = add nuw nsw i64 %1070, %1066
  %1072 = icmp eq i64 %1071, 2
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1073, i8* %1074, align 1, !tbaa !2450
  %1075 = load i64, i64* %RBP
  %1076 = sub i64 %1075, 8
  %1077 = load i64, i64* %RCX
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1076 to i64*
  store i64 %1077, i64* %1080
  %1081 = load i64, i64* %RAX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i32*
  %1085 = load i32, i32* %1084
  %1086 = sext i32 %1085 to i64
  store i64 %1086, i64* %RAX, align 8, !tbaa !2428
  %1087 = load i64, i64* %RAX
  %1088 = mul i64 %1087, 8
  %1089 = add i64 %1088, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 8
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 40
  %1096 = load i64, i64* %RAX
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 4
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1095 to i64*
  store i64 %1096, i64* %1099
  %1100 = load i64, i64* %PC
  %1101 = sub i64 %1100, 1551
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 5
  store i64 %1103, i64* %PC
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1101, i64* %1104, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 12
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 7
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i32*
  store i32 13, i32* %1109
  %1110 = load i64, i64* %RBP
  %1111 = sub i64 %1110, 12
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 3
  store i64 %1113, i64* %PC
  %1114 = inttoptr i64 %1111 to i32*
  %1115 = load i32, i32* %1114
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %RDI, align 8, !tbaa !2428
  %1117 = load i64, i64* %PC
  %1118 = sub i64 %1117, 734
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 5
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  store i64 %1122, i64* %PC
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1124 = load i64, i64* %1123, align 8, !tbaa !2428
  %1125 = add i64 %1124, -8
  %1126 = inttoptr i64 %1125 to i64*
  store i64 %1120, i64* %1126
  store i64 %1125, i64* %1123, align 8, !tbaa !2428
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1118, i64* %1127, align 8, !tbaa !2428
  %1128 = load i64, i64* %PC
  %1129 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1128, %struct.Memory* %MEMORY.0)
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 8
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 4
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i64*
  %1135 = load i64, i64* %1134
  store i64 %1135, i64* %RAX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RAX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 3
  store i64 %1138, i64* %PC
  store i64 %1136, i64* %RCX, align 8, !tbaa !2428
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 4
  store i64 %1141, i64* %PC
  %1142 = add i64 4, %1139
  store i64 %1142, i64* %RCX, align 8, !tbaa !2428
  %1143 = icmp ult i64 %1142, %1139
  %1144 = icmp ult i64 %1142, 4
  %1145 = or i1 %1143, %1144
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1146, i8* %1147, align 1, !tbaa !2432
  %1148 = trunc i64 %1142 to i32
  %1149 = and i32 %1148, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #16
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 4, %1139
  %1156 = xor i64 %1155, %1142
  %1157 = lshr i64 %1156, 4
  %1158 = trunc i64 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1159, i8* %1160, align 1, !tbaa !2447
  %1161 = icmp eq i64 %1142, 0
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1162, i8* %1163, align 1, !tbaa !2448
  %1164 = lshr i64 %1142, 63
  %1165 = trunc i64 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1165, i8* %1166, align 1, !tbaa !2449
  %1167 = lshr i64 %1139, 63
  %1168 = xor i64 %1164, %1167
  %1169 = add nuw nsw i64 %1168, %1164
  %1170 = icmp eq i64 %1169, 2
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1171, i8* %1172, align 1, !tbaa !2450
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 8
  %1175 = load i64, i64* %RCX
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 4
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1174 to i64*
  store i64 %1175, i64* %1178
  %1179 = load i64, i64* %RAX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 3
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i32*
  %1183 = load i32, i32* %1182
  %1184 = sext i32 %1183 to i64
  store i64 %1184, i64* %RAX, align 8, !tbaa !2428
  %1185 = load i64, i64* %RAX
  %1186 = mul i64 %1185, 8
  %1187 = add i64 %1186, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 8
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RBP
  %1193 = sub i64 %1192, 40
  %1194 = load i64, i64* %RAX
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 4
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1193 to i64*
  store i64 %1194, i64* %1197
  %1198 = load i64, i64* %PC
  %1199 = sub i64 %1198, 651
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 5
  store i64 %1201, i64* %PC
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1199, i64* %1202, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400a80, %block_400602, %block_400703, %block_400986, %block_4005d0, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_400666, %block_40059e, %block_400922, %block_4008be, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_40056c, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %2855, %block_400703 ], [ %2120, %block_400a1c ], [ %1924, %block_40059e ], [ %1826, %block_400922 ], [ %1728, %block_4008be ], [ %1630, %block_400828 ], [ %1532, %block_40072e ], [ %1434, %block_400ab2 ], [ %1336, %block_400634 ], [ %1238, %block_4009b8 ], [ %1129, %block_4007c4 ], [ %149, %block_4008f0 ], [ %1031, %block_400b48 ], [ %933, %block_4006ca ], [ %51, %block_4007f6 ], [ %247, %block_4009ea ], [ %737, %block_40056c ], [ %2022, %block_400666 ], [ %345, %block_400ae4 ], [ %443, %block_400760 ], [ %541, %block_40085a ], [ %639, %block_400954 ], [ %835, %block_400a4e ], [ %2218, %block_400698 ], [ %2316, %block_400b16 ], [ %2414, %block_400792 ], [ %2512, %block_40088c ], [ %2610, %block_4005d0 ], [ %2708, %block_400986 ], [ %2953, %block_400602 ], [ %3051, %block_400a80 ]
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 40
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 4
  store i64 %1206, i64* %PC
  %1207 = inttoptr i64 %1204 to i64*
  %1208 = load i64, i64* %1207
  store i64 %1208, i64* %RAX, align 8, !tbaa !2428
  %1209 = load i64, i64* %RAX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 2
  store i64 %1211, i64* %PC
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1209, i64* %1212, align 8, !tbaa !2428
  %1213 = load i64, i64* %PC
  switch i64 %1213, label %3125 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196892, label %block_400a1c
  ]

block_4009b8:                                     ; preds = %block_400566
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 12
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 7
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i32*
  store i32 23, i32* %1218
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 12
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 3
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i32*
  %1224 = load i32, i32* %1223
  %1225 = zext i32 %1224 to i64
  store i64 %1225, i64* %RDI, align 8, !tbaa !2428
  %1226 = load i64, i64* %PC
  %1227 = sub i64 %1226, 1234
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 5
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  store i64 %1231, i64* %PC
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1233 = load i64, i64* %1232, align 8, !tbaa !2428
  %1234 = add i64 %1233, -8
  %1235 = inttoptr i64 %1234 to i64*
  store i64 %1229, i64* %1235
  store i64 %1234, i64* %1232, align 8, !tbaa !2428
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1227, i64* %1236, align 8, !tbaa !2428
  %1237 = load i64, i64* %PC
  %1238 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1237, %struct.Memory* %MEMORY.0)
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 8
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 4
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i64*
  %1244 = load i64, i64* %1243
  store i64 %1244, i64* %RAX, align 8, !tbaa !2428
  %1245 = load i64, i64* %RAX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 3
  store i64 %1247, i64* %PC
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RCX
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 4
  store i64 %1250, i64* %PC
  %1251 = add i64 4, %1248
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = icmp ult i64 %1251, %1248
  %1253 = icmp ult i64 %1251, 4
  %1254 = or i1 %1252, %1253
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1255, i8* %1256, align 1, !tbaa !2432
  %1257 = trunc i64 %1251 to i32
  %1258 = and i32 %1257, 255
  %1259 = call i32 @llvm.ctpop.i32(i32 %1258) #16
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1262, i8* %1263, align 1, !tbaa !2446
  %1264 = xor i64 4, %1248
  %1265 = xor i64 %1264, %1251
  %1266 = lshr i64 %1265, 4
  %1267 = trunc i64 %1266 to i8
  %1268 = and i8 %1267, 1
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1268, i8* %1269, align 1, !tbaa !2447
  %1270 = icmp eq i64 %1251, 0
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1271, i8* %1272, align 1, !tbaa !2448
  %1273 = lshr i64 %1251, 63
  %1274 = trunc i64 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1274, i8* %1275, align 1, !tbaa !2449
  %1276 = lshr i64 %1248, 63
  %1277 = xor i64 %1273, %1276
  %1278 = add nuw nsw i64 %1277, %1273
  %1279 = icmp eq i64 %1278, 2
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1280, i8* %1281, align 1, !tbaa !2450
  %1282 = load i64, i64* %RBP
  %1283 = sub i64 %1282, 8
  %1284 = load i64, i64* %RCX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 4
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1283 to i64*
  store i64 %1284, i64* %1287
  %1288 = load i64, i64* %RAX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 3
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sext i32 %1292 to i64
  store i64 %1293, i64* %RAX, align 8, !tbaa !2428
  %1294 = load i64, i64* %RAX
  %1295 = mul i64 %1294, 8
  %1296 = add i64 %1295, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 8
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1296 to i64*
  %1300 = load i64, i64* %1299
  store i64 %1300, i64* %RAX, align 8, !tbaa !2428
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 40
  %1303 = load i64, i64* %RAX
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 4
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1302 to i64*
  store i64 %1303, i64* %1306
  %1307 = load i64, i64* %PC
  %1308 = sub i64 %1307, 1151
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 5
  store i64 %1310, i64* %PC
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1308, i64* %1311, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 12
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 7
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i32*
  store i32 5, i32* %1316
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = zext i32 %1322 to i64
  store i64 %1323, i64* %RDI, align 8, !tbaa !2428
  %1324 = load i64, i64* %PC
  %1325 = sub i64 %1324, 334
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  store i64 %1329, i64* %PC
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1331 = load i64, i64* %1330, align 8, !tbaa !2428
  %1332 = add i64 %1331, -8
  %1333 = inttoptr i64 %1332 to i64*
  store i64 %1327, i64* %1333
  store i64 %1332, i64* %1330, align 8, !tbaa !2428
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1325, i64* %1334, align 8, !tbaa !2428
  %1335 = load i64, i64* %PC
  %1336 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1335, %struct.Memory* %MEMORY.0)
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 8
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 4
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i64*
  %1342 = load i64, i64* %1341
  store i64 %1342, i64* %RAX, align 8, !tbaa !2428
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  store i64 %1343, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 4
  store i64 %1348, i64* %PC
  %1349 = add i64 4, %1346
  store i64 %1349, i64* %RCX, align 8, !tbaa !2428
  %1350 = icmp ult i64 %1349, %1346
  %1351 = icmp ult i64 %1349, 4
  %1352 = or i1 %1350, %1351
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1353, i8* %1354, align 1, !tbaa !2432
  %1355 = trunc i64 %1349 to i32
  %1356 = and i32 %1355, 255
  %1357 = call i32 @llvm.ctpop.i32(i32 %1356) #16
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1360, i8* %1361, align 1, !tbaa !2446
  %1362 = xor i64 4, %1346
  %1363 = xor i64 %1362, %1349
  %1364 = lshr i64 %1363, 4
  %1365 = trunc i64 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1366, i8* %1367, align 1, !tbaa !2447
  %1368 = icmp eq i64 %1349, 0
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1369, i8* %1370, align 1, !tbaa !2448
  %1371 = lshr i64 %1349, 63
  %1372 = trunc i64 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1372, i8* %1373, align 1, !tbaa !2449
  %1374 = lshr i64 %1346, 63
  %1375 = xor i64 %1371, %1374
  %1376 = add nuw nsw i64 %1375, %1371
  %1377 = icmp eq i64 %1376, 2
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1378, i8* %1379, align 1, !tbaa !2450
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 8
  %1382 = load i64, i64* %RCX
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1381 to i64*
  store i64 %1382, i64* %1385
  %1386 = load i64, i64* %RAX
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 3
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i32*
  %1390 = load i32, i32* %1389
  %1391 = sext i32 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RAX
  %1393 = mul i64 %1392, 8
  %1394 = add i64 %1393, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 8
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 40
  %1401 = load i64, i64* %RAX
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1400 to i64*
  store i64 %1401, i64* %1404
  %1405 = load i64, i64* %PC
  %1406 = sub i64 %1405, 251
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1406, i64* %1409, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 12
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 7
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i32*
  store i32 28, i32* %1414
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RDI, align 8, !tbaa !2428
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1484
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1433, %struct.Memory* %MEMORY.0)
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 8
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 4
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 3
  store i64 %1443, i64* %PC
  store i64 %1441, i64* %RCX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RCX
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = add i64 4, %1444
  store i64 %1447, i64* %RCX, align 8, !tbaa !2428
  %1448 = icmp ult i64 %1447, %1444
  %1449 = icmp ult i64 %1447, 4
  %1450 = or i1 %1448, %1449
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1451, i8* %1452, align 1, !tbaa !2432
  %1453 = trunc i64 %1447 to i32
  %1454 = and i32 %1453, 255
  %1455 = call i32 @llvm.ctpop.i32(i32 %1454) #16
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1458, i8* %1459, align 1, !tbaa !2446
  %1460 = xor i64 4, %1444
  %1461 = xor i64 %1460, %1447
  %1462 = lshr i64 %1461, 4
  %1463 = trunc i64 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1464, i8* %1465, align 1, !tbaa !2447
  %1466 = icmp eq i64 %1447, 0
  %1467 = zext i1 %1466 to i8
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1467, i8* %1468, align 1, !tbaa !2448
  %1469 = lshr i64 %1447, 63
  %1470 = trunc i64 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1470, i8* %1471, align 1, !tbaa !2449
  %1472 = lshr i64 %1444, 63
  %1473 = xor i64 %1469, %1472
  %1474 = add nuw nsw i64 %1473, %1469
  %1475 = icmp eq i64 %1474, 2
  %1476 = zext i1 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1476, i8* %1477, align 1, !tbaa !2450
  %1478 = load i64, i64* %RBP
  %1479 = sub i64 %1478, 8
  %1480 = load i64, i64* %RCX
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1479 to i64*
  store i64 %1480, i64* %1483
  %1484 = load i64, i64* %RAX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RAX
  %1491 = mul i64 %1490, 8
  %1492 = add i64 %1491, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 8
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i64, i64* %RAX
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1498 to i64*
  store i64 %1499, i64* %1502
  %1503 = load i64, i64* %PC
  %1504 = sub i64 %1503, 1401
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 5
  store i64 %1506, i64* %PC
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1504, i64* %1507, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 12
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 7
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  store i32 10, i32* %1512
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  %1518 = load i32, i32* %1517
  %1519 = zext i32 %1518 to i64
  store i64 %1519, i64* %RDI, align 8, !tbaa !2428
  %1520 = load i64, i64* %PC
  %1521 = sub i64 %1520, 584
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  store i64 %1525, i64* %PC
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1527 = load i64, i64* %1526, align 8, !tbaa !2428
  %1528 = add i64 %1527, -8
  %1529 = inttoptr i64 %1528 to i64*
  store i64 %1523, i64* %1529
  store i64 %1528, i64* %1526, align 8, !tbaa !2428
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1521, i64* %1530, align 8, !tbaa !2428
  %1531 = load i64, i64* %PC
  %1532 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1531, %struct.Memory* %MEMORY.0)
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 8
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 4
  store i64 %1536, i64* %PC
  %1537 = inttoptr i64 %1534 to i64*
  %1538 = load i64, i64* %1537
  store i64 %1538, i64* %RAX, align 8, !tbaa !2428
  %1539 = load i64, i64* %RAX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 3
  store i64 %1541, i64* %PC
  store i64 %1539, i64* %RCX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RCX
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 4
  store i64 %1544, i64* %PC
  %1545 = add i64 4, %1542
  store i64 %1545, i64* %RCX, align 8, !tbaa !2428
  %1546 = icmp ult i64 %1545, %1542
  %1547 = icmp ult i64 %1545, 4
  %1548 = or i1 %1546, %1547
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1549, i8* %1550, align 1, !tbaa !2432
  %1551 = trunc i64 %1545 to i32
  %1552 = and i32 %1551, 255
  %1553 = call i32 @llvm.ctpop.i32(i32 %1552) #16
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1556, i8* %1557, align 1, !tbaa !2446
  %1558 = xor i64 4, %1542
  %1559 = xor i64 %1558, %1545
  %1560 = lshr i64 %1559, 4
  %1561 = trunc i64 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1562, i8* %1563, align 1, !tbaa !2447
  %1564 = icmp eq i64 %1545, 0
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1565, i8* %1566, align 1, !tbaa !2448
  %1567 = lshr i64 %1545, 63
  %1568 = trunc i64 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1568, i8* %1569, align 1, !tbaa !2449
  %1570 = lshr i64 %1542, 63
  %1571 = xor i64 %1567, %1570
  %1572 = add nuw nsw i64 %1571, %1567
  %1573 = icmp eq i64 %1572, 2
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1574, i8* %1575, align 1, !tbaa !2450
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 8
  %1578 = load i64, i64* %RCX
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 4
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1577 to i64*
  store i64 %1578, i64* %1581
  %1582 = load i64, i64* %RAX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = mul i64 %1588, 8
  %1590 = add i64 %1589, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 8
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1590 to i64*
  %1594 = load i64, i64* %1593
  store i64 %1594, i64* %RAX, align 8, !tbaa !2428
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %RAX
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 4
  store i64 %1599, i64* %PC
  %1600 = inttoptr i64 %1596 to i64*
  store i64 %1597, i64* %1600
  %1601 = load i64, i64* %PC
  %1602 = sub i64 %1601, 501
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1602, i64* %1605, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 12
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 7
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i32*
  store i32 15, i32* %1610
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 12
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 3
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  %1616 = load i32, i32* %1615
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RDI, align 8, !tbaa !2428
  %1618 = load i64, i64* %PC
  %1619 = sub i64 %1618, 834
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  store i64 %1623, i64* %PC
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1625 = load i64, i64* %1624, align 8, !tbaa !2428
  %1626 = add i64 %1625, -8
  %1627 = inttoptr i64 %1626 to i64*
  store i64 %1621, i64* %1627
  store i64 %1626, i64* %1624, align 8, !tbaa !2428
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1619, i64* %1628, align 8, !tbaa !2428
  %1629 = load i64, i64* %PC
  %1630 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1629, %struct.Memory* %MEMORY.0)
  %1631 = load i64, i64* %RBP
  %1632 = sub i64 %1631, 8
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 4
  store i64 %1634, i64* %PC
  %1635 = inttoptr i64 %1632 to i64*
  %1636 = load i64, i64* %1635
  store i64 %1636, i64* %RAX, align 8, !tbaa !2428
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 3
  store i64 %1639, i64* %PC
  store i64 %1637, i64* %RCX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RCX
  %1641 = load i64, i64* %PC
  %1642 = add i64 %1641, 4
  store i64 %1642, i64* %PC
  %1643 = add i64 4, %1640
  store i64 %1643, i64* %RCX, align 8, !tbaa !2428
  %1644 = icmp ult i64 %1643, %1640
  %1645 = icmp ult i64 %1643, 4
  %1646 = or i1 %1644, %1645
  %1647 = zext i1 %1646 to i8
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1647, i8* %1648, align 1, !tbaa !2432
  %1649 = trunc i64 %1643 to i32
  %1650 = and i32 %1649, 255
  %1651 = call i32 @llvm.ctpop.i32(i32 %1650) #16
  %1652 = trunc i32 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = xor i8 %1653, 1
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1654, i8* %1655, align 1, !tbaa !2446
  %1656 = xor i64 4, %1640
  %1657 = xor i64 %1656, %1643
  %1658 = lshr i64 %1657, 4
  %1659 = trunc i64 %1658 to i8
  %1660 = and i8 %1659, 1
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1660, i8* %1661, align 1, !tbaa !2447
  %1662 = icmp eq i64 %1643, 0
  %1663 = zext i1 %1662 to i8
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1663, i8* %1664, align 1, !tbaa !2448
  %1665 = lshr i64 %1643, 63
  %1666 = trunc i64 %1665 to i8
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1666, i8* %1667, align 1, !tbaa !2449
  %1668 = lshr i64 %1640, 63
  %1669 = xor i64 %1665, %1668
  %1670 = add nuw nsw i64 %1669, %1665
  %1671 = icmp eq i64 %1670, 2
  %1672 = zext i1 %1671 to i8
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1672, i8* %1673, align 1, !tbaa !2450
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 8
  %1676 = load i64, i64* %RCX
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 4
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1675 to i64*
  store i64 %1676, i64* %1679
  %1680 = load i64, i64* %RAX
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 3
  store i64 %1682, i64* %PC
  %1683 = inttoptr i64 %1680 to i32*
  %1684 = load i32, i32* %1683
  %1685 = sext i32 %1684 to i64
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RAX
  %1687 = mul i64 %1686, 8
  %1688 = add i64 %1687, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 8
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1688 to i64*
  %1692 = load i64, i64* %1691
  store i64 %1692, i64* %RAX, align 8, !tbaa !2428
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 40
  %1695 = load i64, i64* %RAX
  %1696 = load i64, i64* %PC
  %1697 = add i64 %1696, 4
  store i64 %1697, i64* %PC
  %1698 = inttoptr i64 %1694 to i64*
  store i64 %1695, i64* %1698
  %1699 = load i64, i64* %PC
  %1700 = sub i64 %1699, 751
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 5
  store i64 %1702, i64* %PC
  %1703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1700, i64* %1703, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1704 = load i64, i64* %RBP
  %1705 = sub i64 %1704, 12
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 7
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i32*
  store i32 18, i32* %1708
  %1709 = load i64, i64* %RBP
  %1710 = sub i64 %1709, 12
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 3
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to i32*
  %1714 = load i32, i32* %1713
  %1715 = zext i32 %1714 to i64
  store i64 %1715, i64* %RDI, align 8, !tbaa !2428
  %1716 = load i64, i64* %PC
  %1717 = sub i64 %1716, 984
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1723 = load i64, i64* %1722, align 8, !tbaa !2428
  %1724 = add i64 %1723, -8
  %1725 = inttoptr i64 %1724 to i64*
  store i64 %1719, i64* %1725
  store i64 %1724, i64* %1722, align 8, !tbaa !2428
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1717, i64* %1726, align 8, !tbaa !2428
  %1727 = load i64, i64* %PC
  %1728 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1727, %struct.Memory* %MEMORY.0)
  %1729 = load i64, i64* %RBP
  %1730 = sub i64 %1729, 8
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RAX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RAX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 3
  store i64 %1737, i64* %PC
  store i64 %1735, i64* %RCX, align 8, !tbaa !2428
  %1738 = load i64, i64* %RCX
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %PC
  %1741 = add i64 4, %1738
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = icmp ult i64 %1741, %1738
  %1743 = icmp ult i64 %1741, 4
  %1744 = or i1 %1742, %1743
  %1745 = zext i1 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1745, i8* %1746, align 1, !tbaa !2432
  %1747 = trunc i64 %1741 to i32
  %1748 = and i32 %1747, 255
  %1749 = call i32 @llvm.ctpop.i32(i32 %1748) #16
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = xor i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1752, i8* %1753, align 1, !tbaa !2446
  %1754 = xor i64 4, %1738
  %1755 = xor i64 %1754, %1741
  %1756 = lshr i64 %1755, 4
  %1757 = trunc i64 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1758, i8* %1759, align 1, !tbaa !2447
  %1760 = icmp eq i64 %1741, 0
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1761, i8* %1762, align 1, !tbaa !2448
  %1763 = lshr i64 %1741, 63
  %1764 = trunc i64 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1764, i8* %1765, align 1, !tbaa !2449
  %1766 = lshr i64 %1738, 63
  %1767 = xor i64 %1763, %1766
  %1768 = add nuw nsw i64 %1767, %1763
  %1769 = icmp eq i64 %1768, 2
  %1770 = zext i1 %1769 to i8
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1770, i8* %1771, align 1, !tbaa !2450
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 8
  %1774 = load i64, i64* %RCX
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 4
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1773 to i64*
  store i64 %1774, i64* %1777
  %1778 = load i64, i64* %RAX
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = sext i32 %1782 to i64
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = mul i64 %1784, 8
  %1786 = add i64 %1785, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 8
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RAX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RBP
  %1792 = sub i64 %1791, 40
  %1793 = load i64, i64* %RAX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 4
  store i64 %1795, i64* %PC
  %1796 = inttoptr i64 %1792 to i64*
  store i64 %1793, i64* %1796
  %1797 = load i64, i64* %PC
  %1798 = sub i64 %1797, 901
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 5
  store i64 %1800, i64* %PC
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1798, i64* %1801, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1802 = load i64, i64* %RBP
  %1803 = sub i64 %1802, 12
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 7
  store i64 %1805, i64* %PC
  %1806 = inttoptr i64 %1803 to i32*
  store i32 20, i32* %1806
  %1807 = load i64, i64* %RBP
  %1808 = sub i64 %1807, 12
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 3
  store i64 %1810, i64* %PC
  %1811 = inttoptr i64 %1808 to i32*
  %1812 = load i32, i32* %1811
  %1813 = zext i32 %1812 to i64
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1814 = load i64, i64* %PC
  %1815 = sub i64 %1814, 1084
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 5
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  store i64 %1819, i64* %PC
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1821 = load i64, i64* %1820, align 8, !tbaa !2428
  %1822 = add i64 %1821, -8
  %1823 = inttoptr i64 %1822 to i64*
  store i64 %1817, i64* %1823
  store i64 %1822, i64* %1820, align 8, !tbaa !2428
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1815, i64* %1824, align 8, !tbaa !2428
  %1825 = load i64, i64* %PC
  %1826 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1825, %struct.Memory* %MEMORY.0)
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 8
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 4
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1828 to i64*
  %1832 = load i64, i64* %1831
  store i64 %1832, i64* %RAX, align 8, !tbaa !2428
  %1833 = load i64, i64* %RAX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 3
  store i64 %1835, i64* %PC
  store i64 %1833, i64* %RCX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RCX
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 4
  store i64 %1838, i64* %PC
  %1839 = add i64 4, %1836
  store i64 %1839, i64* %RCX, align 8, !tbaa !2428
  %1840 = icmp ult i64 %1839, %1836
  %1841 = icmp ult i64 %1839, 4
  %1842 = or i1 %1840, %1841
  %1843 = zext i1 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1843, i8* %1844, align 1, !tbaa !2432
  %1845 = trunc i64 %1839 to i32
  %1846 = and i32 %1845, 255
  %1847 = call i32 @llvm.ctpop.i32(i32 %1846) #16
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = xor i8 %1849, 1
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1850, i8* %1851, align 1, !tbaa !2446
  %1852 = xor i64 4, %1836
  %1853 = xor i64 %1852, %1839
  %1854 = lshr i64 %1853, 4
  %1855 = trunc i64 %1854 to i8
  %1856 = and i8 %1855, 1
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1856, i8* %1857, align 1, !tbaa !2447
  %1858 = icmp eq i64 %1839, 0
  %1859 = zext i1 %1858 to i8
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1859, i8* %1860, align 1, !tbaa !2448
  %1861 = lshr i64 %1839, 63
  %1862 = trunc i64 %1861 to i8
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1862, i8* %1863, align 1, !tbaa !2449
  %1864 = lshr i64 %1836, 63
  %1865 = xor i64 %1861, %1864
  %1866 = add nuw nsw i64 %1865, %1861
  %1867 = icmp eq i64 %1866, 2
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1868, i8* %1869, align 1, !tbaa !2450
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 8
  %1872 = load i64, i64* %RCX
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1871 to i64*
  store i64 %1872, i64* %1875
  %1876 = load i64, i64* %RAX
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 3
  store i64 %1878, i64* %PC
  %1879 = inttoptr i64 %1876 to i32*
  %1880 = load i32, i32* %1879
  %1881 = sext i32 %1880 to i64
  store i64 %1881, i64* %RAX, align 8, !tbaa !2428
  %1882 = load i64, i64* %RAX
  %1883 = mul i64 %1882, 8
  %1884 = add i64 %1883, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 8
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i64*
  %1888 = load i64, i64* %1887
  store i64 %1888, i64* %RAX, align 8, !tbaa !2428
  %1889 = load i64, i64* %RBP
  %1890 = sub i64 %1889, 40
  %1891 = load i64, i64* %RAX
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 4
  store i64 %1893, i64* %PC
  %1894 = inttoptr i64 %1890 to i64*
  store i64 %1891, i64* %1894
  %1895 = load i64, i64* %PC
  %1896 = sub i64 %1895, 1001
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 5
  store i64 %1898, i64* %PC
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1896, i64* %1899, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1900 = load i64, i64* %RBP
  %1901 = sub i64 %1900, 12
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 7
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i32*
  store i32 2, i32* %1904
  %1905 = load i64, i64* %RBP
  %1906 = sub i64 %1905, 12
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 3
  store i64 %1908, i64* %PC
  %1909 = inttoptr i64 %1906 to i32*
  %1910 = load i32, i32* %1909
  %1911 = zext i32 %1910 to i64
  store i64 %1911, i64* %RDI, align 8, !tbaa !2428
  %1912 = load i64, i64* %PC
  %1913 = sub i64 %1912, 184
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 5
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 5
  store i64 %1917, i64* %PC
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1919 = load i64, i64* %1918, align 8, !tbaa !2428
  %1920 = add i64 %1919, -8
  %1921 = inttoptr i64 %1920 to i64*
  store i64 %1915, i64* %1921
  store i64 %1920, i64* %1918, align 8, !tbaa !2428
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1913, i64* %1922, align 8, !tbaa !2428
  %1923 = load i64, i64* %PC
  %1924 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1923, %struct.Memory* %MEMORY.0)
  %1925 = load i64, i64* %RBP
  %1926 = sub i64 %1925, 8
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 4
  store i64 %1928, i64* %PC
  %1929 = inttoptr i64 %1926 to i64*
  %1930 = load i64, i64* %1929
  store i64 %1930, i64* %RAX, align 8, !tbaa !2428
  %1931 = load i64, i64* %RAX
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 3
  store i64 %1933, i64* %PC
  store i64 %1931, i64* %RCX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RCX
  %1935 = load i64, i64* %PC
  %1936 = add i64 %1935, 4
  store i64 %1936, i64* %PC
  %1937 = add i64 4, %1934
  store i64 %1937, i64* %RCX, align 8, !tbaa !2428
  %1938 = icmp ult i64 %1937, %1934
  %1939 = icmp ult i64 %1937, 4
  %1940 = or i1 %1938, %1939
  %1941 = zext i1 %1940 to i8
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1941, i8* %1942, align 1, !tbaa !2432
  %1943 = trunc i64 %1937 to i32
  %1944 = and i32 %1943, 255
  %1945 = call i32 @llvm.ctpop.i32(i32 %1944) #16
  %1946 = trunc i32 %1945 to i8
  %1947 = and i8 %1946, 1
  %1948 = xor i8 %1947, 1
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1948, i8* %1949, align 1, !tbaa !2446
  %1950 = xor i64 4, %1934
  %1951 = xor i64 %1950, %1937
  %1952 = lshr i64 %1951, 4
  %1953 = trunc i64 %1952 to i8
  %1954 = and i8 %1953, 1
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1954, i8* %1955, align 1, !tbaa !2447
  %1956 = icmp eq i64 %1937, 0
  %1957 = zext i1 %1956 to i8
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1957, i8* %1958, align 1, !tbaa !2448
  %1959 = lshr i64 %1937, 63
  %1960 = trunc i64 %1959 to i8
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1960, i8* %1961, align 1, !tbaa !2449
  %1962 = lshr i64 %1934, 63
  %1963 = xor i64 %1959, %1962
  %1964 = add nuw nsw i64 %1963, %1959
  %1965 = icmp eq i64 %1964, 2
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1966, i8* %1967, align 1, !tbaa !2450
  %1968 = load i64, i64* %RBP
  %1969 = sub i64 %1968, 8
  %1970 = load i64, i64* %RCX
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 4
  store i64 %1972, i64* %PC
  %1973 = inttoptr i64 %1969 to i64*
  store i64 %1970, i64* %1973
  %1974 = load i64, i64* %RAX
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 3
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1974 to i32*
  %1978 = load i32, i32* %1977
  %1979 = sext i32 %1978 to i64
  store i64 %1979, i64* %RAX, align 8, !tbaa !2428
  %1980 = load i64, i64* %RAX
  %1981 = mul i64 %1980, 8
  %1982 = add i64 %1981, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 8
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1982 to i64*
  %1986 = load i64, i64* %1985
  store i64 %1986, i64* %RAX, align 8, !tbaa !2428
  %1987 = load i64, i64* %RBP
  %1988 = sub i64 %1987, 40
  %1989 = load i64, i64* %RAX
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1988 to i64*
  store i64 %1989, i64* %1992
  %1993 = load i64, i64* %PC
  %1994 = sub i64 %1993, 101
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1994, i64* %1997, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 12
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 7
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  store i32 6, i32* %2002
  %2003 = load i64, i64* %RBP
  %2004 = sub i64 %2003, 12
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 3
  store i64 %2006, i64* %PC
  %2007 = inttoptr i64 %2004 to i32*
  %2008 = load i32, i32* %2007
  %2009 = zext i32 %2008 to i64
  store i64 %2009, i64* %RDI, align 8, !tbaa !2428
  %2010 = load i64, i64* %PC
  %2011 = sub i64 %2010, 384
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 5
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2017 = load i64, i64* %2016, align 8, !tbaa !2428
  %2018 = add i64 %2017, -8
  %2019 = inttoptr i64 %2018 to i64*
  store i64 %2013, i64* %2019
  store i64 %2018, i64* %2016, align 8, !tbaa !2428
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2011, i64* %2020, align 8, !tbaa !2428
  %2021 = load i64, i64* %PC
  %2022 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2021, %struct.Memory* %MEMORY.0)
  %2023 = load i64, i64* %RBP
  %2024 = sub i64 %2023, 8
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 4
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2024 to i64*
  %2028 = load i64, i64* %2027
  store i64 %2028, i64* %RAX, align 8, !tbaa !2428
  %2029 = load i64, i64* %RAX
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 3
  store i64 %2031, i64* %PC
  store i64 %2029, i64* %RCX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RCX
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 4
  store i64 %2034, i64* %PC
  %2035 = add i64 4, %2032
  store i64 %2035, i64* %RCX, align 8, !tbaa !2428
  %2036 = icmp ult i64 %2035, %2032
  %2037 = icmp ult i64 %2035, 4
  %2038 = or i1 %2036, %2037
  %2039 = zext i1 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2039, i8* %2040, align 1, !tbaa !2432
  %2041 = trunc i64 %2035 to i32
  %2042 = and i32 %2041, 255
  %2043 = call i32 @llvm.ctpop.i32(i32 %2042) #16
  %2044 = trunc i32 %2043 to i8
  %2045 = and i8 %2044, 1
  %2046 = xor i8 %2045, 1
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2046, i8* %2047, align 1, !tbaa !2446
  %2048 = xor i64 4, %2032
  %2049 = xor i64 %2048, %2035
  %2050 = lshr i64 %2049, 4
  %2051 = trunc i64 %2050 to i8
  %2052 = and i8 %2051, 1
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2052, i8* %2053, align 1, !tbaa !2447
  %2054 = icmp eq i64 %2035, 0
  %2055 = zext i1 %2054 to i8
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2055, i8* %2056, align 1, !tbaa !2448
  %2057 = lshr i64 %2035, 63
  %2058 = trunc i64 %2057 to i8
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2058, i8* %2059, align 1, !tbaa !2449
  %2060 = lshr i64 %2032, 63
  %2061 = xor i64 %2057, %2060
  %2062 = add nuw nsw i64 %2061, %2057
  %2063 = icmp eq i64 %2062, 2
  %2064 = zext i1 %2063 to i8
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2064, i8* %2065, align 1, !tbaa !2450
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 8
  %2068 = load i64, i64* %RCX
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 4
  store i64 %2070, i64* %PC
  %2071 = inttoptr i64 %2067 to i64*
  store i64 %2068, i64* %2071
  %2072 = load i64, i64* %RAX
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 3
  store i64 %2074, i64* %PC
  %2075 = inttoptr i64 %2072 to i32*
  %2076 = load i32, i32* %2075
  %2077 = sext i32 %2076 to i64
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = load i64, i64* %RAX
  %2079 = mul i64 %2078, 8
  %2080 = add i64 %2079, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 8
  store i64 %2082, i64* %PC
  %2083 = inttoptr i64 %2080 to i64*
  %2084 = load i64, i64* %2083
  store i64 %2084, i64* %RAX, align 8, !tbaa !2428
  %2085 = load i64, i64* %RBP
  %2086 = sub i64 %2085, 40
  %2087 = load i64, i64* %RAX
  %2088 = load i64, i64* %PC
  %2089 = add i64 %2088, 4
  store i64 %2089, i64* %PC
  %2090 = inttoptr i64 %2086 to i64*
  store i64 %2087, i64* %2090
  %2091 = load i64, i64* %PC
  %2092 = sub i64 %2091, 301
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 5
  store i64 %2094, i64* %PC
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2092, i64* %2095, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 12
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 7
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i32*
  store i32 25, i32* %2100
  %2101 = load i64, i64* %RBP
  %2102 = sub i64 %2101, 12
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 3
  store i64 %2104, i64* %PC
  %2105 = inttoptr i64 %2102 to i32*
  %2106 = load i32, i32* %2105
  %2107 = zext i32 %2106 to i64
  store i64 %2107, i64* %RDI, align 8, !tbaa !2428
  %2108 = load i64, i64* %PC
  %2109 = sub i64 %2108, 1334
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 5
  %2112 = load i64, i64* %PC
  %2113 = add i64 %2112, 5
  store i64 %2113, i64* %PC
  %2114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2115 = load i64, i64* %2114, align 8, !tbaa !2428
  %2116 = add i64 %2115, -8
  %2117 = inttoptr i64 %2116 to i64*
  store i64 %2111, i64* %2117
  store i64 %2116, i64* %2114, align 8, !tbaa !2428
  %2118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2109, i64* %2118, align 8, !tbaa !2428
  %2119 = load i64, i64* %PC
  %2120 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2119, %struct.Memory* %MEMORY.0)
  %2121 = load i64, i64* %RBP
  %2122 = sub i64 %2121, 8
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 4
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to i64*
  %2126 = load i64, i64* %2125
  store i64 %2126, i64* %RAX, align 8, !tbaa !2428
  %2127 = load i64, i64* %RAX
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 3
  store i64 %2129, i64* %PC
  store i64 %2127, i64* %RCX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RCX
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 4
  store i64 %2132, i64* %PC
  %2133 = add i64 4, %2130
  store i64 %2133, i64* %RCX, align 8, !tbaa !2428
  %2134 = icmp ult i64 %2133, %2130
  %2135 = icmp ult i64 %2133, 4
  %2136 = or i1 %2134, %2135
  %2137 = zext i1 %2136 to i8
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2137, i8* %2138, align 1, !tbaa !2432
  %2139 = trunc i64 %2133 to i32
  %2140 = and i32 %2139, 255
  %2141 = call i32 @llvm.ctpop.i32(i32 %2140) #16
  %2142 = trunc i32 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = xor i8 %2143, 1
  %2145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2144, i8* %2145, align 1, !tbaa !2446
  %2146 = xor i64 4, %2130
  %2147 = xor i64 %2146, %2133
  %2148 = lshr i64 %2147, 4
  %2149 = trunc i64 %2148 to i8
  %2150 = and i8 %2149, 1
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2150, i8* %2151, align 1, !tbaa !2447
  %2152 = icmp eq i64 %2133, 0
  %2153 = zext i1 %2152 to i8
  %2154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2153, i8* %2154, align 1, !tbaa !2448
  %2155 = lshr i64 %2133, 63
  %2156 = trunc i64 %2155 to i8
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2156, i8* %2157, align 1, !tbaa !2449
  %2158 = lshr i64 %2130, 63
  %2159 = xor i64 %2155, %2158
  %2160 = add nuw nsw i64 %2159, %2155
  %2161 = icmp eq i64 %2160, 2
  %2162 = zext i1 %2161 to i8
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2162, i8* %2163, align 1, !tbaa !2450
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 8
  %2166 = load i64, i64* %RCX
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 4
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2165 to i64*
  store i64 %2166, i64* %2169
  %2170 = load i64, i64* %RAX
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 3
  store i64 %2172, i64* %PC
  %2173 = inttoptr i64 %2170 to i32*
  %2174 = load i32, i32* %2173
  %2175 = sext i32 %2174 to i64
  store i64 %2175, i64* %RAX, align 8, !tbaa !2428
  %2176 = load i64, i64* %RAX
  %2177 = mul i64 %2176, 8
  %2178 = add i64 %2177, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2179 = load i64, i64* %PC
  %2180 = add i64 %2179, 8
  store i64 %2180, i64* %PC
  %2181 = inttoptr i64 %2178 to i64*
  %2182 = load i64, i64* %2181
  store i64 %2182, i64* %RAX, align 8, !tbaa !2428
  %2183 = load i64, i64* %RBP
  %2184 = sub i64 %2183, 40
  %2185 = load i64, i64* %RAX
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2184 to i64*
  store i64 %2185, i64* %2188
  %2189 = load i64, i64* %PC
  %2190 = sub i64 %2189, 1251
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2190, i64* %2193, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2194 = load i64, i64* %RBP
  %2195 = sub i64 %2194, 12
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 7
  store i64 %2197, i64* %PC
  %2198 = inttoptr i64 %2195 to i32*
  store i32 7, i32* %2198
  %2199 = load i64, i64* %RBP
  %2200 = sub i64 %2199, 12
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 3
  store i64 %2202, i64* %PC
  %2203 = inttoptr i64 %2200 to i32*
  %2204 = load i32, i32* %2203
  %2205 = zext i32 %2204 to i64
  store i64 %2205, i64* %RDI, align 8, !tbaa !2428
  %2206 = load i64, i64* %PC
  %2207 = sub i64 %2206, 434
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 5
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 5
  store i64 %2211, i64* %PC
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2213 = load i64, i64* %2212, align 8, !tbaa !2428
  %2214 = add i64 %2213, -8
  %2215 = inttoptr i64 %2214 to i64*
  store i64 %2209, i64* %2215
  store i64 %2214, i64* %2212, align 8, !tbaa !2428
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2207, i64* %2216, align 8, !tbaa !2428
  %2217 = load i64, i64* %PC
  %2218 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2217, %struct.Memory* %MEMORY.0)
  %2219 = load i64, i64* %RBP
  %2220 = sub i64 %2219, 8
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 4
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2220 to i64*
  %2224 = load i64, i64* %2223
  store i64 %2224, i64* %RAX, align 8, !tbaa !2428
  %2225 = load i64, i64* %RAX
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 3
  store i64 %2227, i64* %PC
  store i64 %2225, i64* %RCX, align 8, !tbaa !2428
  %2228 = load i64, i64* %RCX
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 4
  store i64 %2230, i64* %PC
  %2231 = add i64 4, %2228
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = icmp ult i64 %2231, %2228
  %2233 = icmp ult i64 %2231, 4
  %2234 = or i1 %2232, %2233
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2235, i8* %2236, align 1, !tbaa !2432
  %2237 = trunc i64 %2231 to i32
  %2238 = and i32 %2237, 255
  %2239 = call i32 @llvm.ctpop.i32(i32 %2238) #16
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  %2242 = xor i8 %2241, 1
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2242, i8* %2243, align 1, !tbaa !2446
  %2244 = xor i64 4, %2228
  %2245 = xor i64 %2244, %2231
  %2246 = lshr i64 %2245, 4
  %2247 = trunc i64 %2246 to i8
  %2248 = and i8 %2247, 1
  %2249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2248, i8* %2249, align 1, !tbaa !2447
  %2250 = icmp eq i64 %2231, 0
  %2251 = zext i1 %2250 to i8
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2251, i8* %2252, align 1, !tbaa !2448
  %2253 = lshr i64 %2231, 63
  %2254 = trunc i64 %2253 to i8
  %2255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2254, i8* %2255, align 1, !tbaa !2449
  %2256 = lshr i64 %2228, 63
  %2257 = xor i64 %2253, %2256
  %2258 = add nuw nsw i64 %2257, %2253
  %2259 = icmp eq i64 %2258, 2
  %2260 = zext i1 %2259 to i8
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2260, i8* %2261, align 1, !tbaa !2450
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 8
  %2264 = load i64, i64* %RCX
  %2265 = load i64, i64* %PC
  %2266 = add i64 %2265, 4
  store i64 %2266, i64* %PC
  %2267 = inttoptr i64 %2263 to i64*
  store i64 %2264, i64* %2267
  %2268 = load i64, i64* %RAX
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 3
  store i64 %2270, i64* %PC
  %2271 = inttoptr i64 %2268 to i32*
  %2272 = load i32, i32* %2271
  %2273 = sext i32 %2272 to i64
  store i64 %2273, i64* %RAX, align 8, !tbaa !2428
  %2274 = load i64, i64* %RAX
  %2275 = mul i64 %2274, 8
  %2276 = add i64 %2275, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 8
  store i64 %2278, i64* %PC
  %2279 = inttoptr i64 %2276 to i64*
  %2280 = load i64, i64* %2279
  store i64 %2280, i64* %RAX, align 8, !tbaa !2428
  %2281 = load i64, i64* %RBP
  %2282 = sub i64 %2281, 40
  %2283 = load i64, i64* %RAX
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 4
  store i64 %2285, i64* %PC
  %2286 = inttoptr i64 %2282 to i64*
  store i64 %2283, i64* %2286
  %2287 = load i64, i64* %PC
  %2288 = sub i64 %2287, 351
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 5
  store i64 %2290, i64* %PC
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2288, i64* %2291, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 12
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 7
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i32*
  store i32 30, i32* %2296
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 12
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 3
  store i64 %2300, i64* %PC
  %2301 = inttoptr i64 %2298 to i32*
  %2302 = load i32, i32* %2301
  %2303 = zext i32 %2302 to i64
  store i64 %2303, i64* %RDI, align 8, !tbaa !2428
  %2304 = load i64, i64* %PC
  %2305 = sub i64 %2304, 1584
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 5
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 5
  store i64 %2309, i64* %PC
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2311 = load i64, i64* %2310, align 8, !tbaa !2428
  %2312 = add i64 %2311, -8
  %2313 = inttoptr i64 %2312 to i64*
  store i64 %2307, i64* %2313
  store i64 %2312, i64* %2310, align 8, !tbaa !2428
  %2314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2305, i64* %2314, align 8, !tbaa !2428
  %2315 = load i64, i64* %PC
  %2316 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2315, %struct.Memory* %MEMORY.0)
  %2317 = load i64, i64* %RBP
  %2318 = sub i64 %2317, 8
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 4
  store i64 %2320, i64* %PC
  %2321 = inttoptr i64 %2318 to i64*
  %2322 = load i64, i64* %2321
  store i64 %2322, i64* %RAX, align 8, !tbaa !2428
  %2323 = load i64, i64* %RAX
  %2324 = load i64, i64* %PC
  %2325 = add i64 %2324, 3
  store i64 %2325, i64* %PC
  store i64 %2323, i64* %RCX, align 8, !tbaa !2428
  %2326 = load i64, i64* %RCX
  %2327 = load i64, i64* %PC
  %2328 = add i64 %2327, 4
  store i64 %2328, i64* %PC
  %2329 = add i64 4, %2326
  store i64 %2329, i64* %RCX, align 8, !tbaa !2428
  %2330 = icmp ult i64 %2329, %2326
  %2331 = icmp ult i64 %2329, 4
  %2332 = or i1 %2330, %2331
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2333, i8* %2334, align 1, !tbaa !2432
  %2335 = trunc i64 %2329 to i32
  %2336 = and i32 %2335, 255
  %2337 = call i32 @llvm.ctpop.i32(i32 %2336) #16
  %2338 = trunc i32 %2337 to i8
  %2339 = and i8 %2338, 1
  %2340 = xor i8 %2339, 1
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2340, i8* %2341, align 1, !tbaa !2446
  %2342 = xor i64 4, %2326
  %2343 = xor i64 %2342, %2329
  %2344 = lshr i64 %2343, 4
  %2345 = trunc i64 %2344 to i8
  %2346 = and i8 %2345, 1
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2346, i8* %2347, align 1, !tbaa !2447
  %2348 = icmp eq i64 %2329, 0
  %2349 = zext i1 %2348 to i8
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2349, i8* %2350, align 1, !tbaa !2448
  %2351 = lshr i64 %2329, 63
  %2352 = trunc i64 %2351 to i8
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2352, i8* %2353, align 1, !tbaa !2449
  %2354 = lshr i64 %2326, 63
  %2355 = xor i64 %2351, %2354
  %2356 = add nuw nsw i64 %2355, %2351
  %2357 = icmp eq i64 %2356, 2
  %2358 = zext i1 %2357 to i8
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2358, i8* %2359, align 1, !tbaa !2450
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 8
  %2362 = load i64, i64* %RCX
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 4
  store i64 %2364, i64* %PC
  %2365 = inttoptr i64 %2361 to i64*
  store i64 %2362, i64* %2365
  %2366 = load i64, i64* %RAX
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 3
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = sext i32 %2370 to i64
  store i64 %2371, i64* %RAX, align 8, !tbaa !2428
  %2372 = load i64, i64* %RAX
  %2373 = mul i64 %2372, 8
  %2374 = add i64 %2373, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 8
  store i64 %2376, i64* %PC
  %2377 = inttoptr i64 %2374 to i64*
  %2378 = load i64, i64* %2377
  store i64 %2378, i64* %RAX, align 8, !tbaa !2428
  %2379 = load i64, i64* %RBP
  %2380 = sub i64 %2379, 40
  %2381 = load i64, i64* %RAX
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2380 to i64*
  store i64 %2381, i64* %2384
  %2385 = load i64, i64* %PC
  %2386 = sub i64 %2385, 1501
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 5
  store i64 %2388, i64* %PC
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2386, i64* %2389, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 12
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 7
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to i32*
  store i32 12, i32* %2394
  %2395 = load i64, i64* %RBP
  %2396 = sub i64 %2395, 12
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 3
  store i64 %2398, i64* %PC
  %2399 = inttoptr i64 %2396 to i32*
  %2400 = load i32, i32* %2399
  %2401 = zext i32 %2400 to i64
  store i64 %2401, i64* %RDI, align 8, !tbaa !2428
  %2402 = load i64, i64* %PC
  %2403 = sub i64 %2402, 684
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 5
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 5
  store i64 %2407, i64* %PC
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2409 = load i64, i64* %2408, align 8, !tbaa !2428
  %2410 = add i64 %2409, -8
  %2411 = inttoptr i64 %2410 to i64*
  store i64 %2405, i64* %2411
  store i64 %2410, i64* %2408, align 8, !tbaa !2428
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2403, i64* %2412, align 8, !tbaa !2428
  %2413 = load i64, i64* %PC
  %2414 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2413, %struct.Memory* %MEMORY.0)
  %2415 = load i64, i64* %RBP
  %2416 = sub i64 %2415, 8
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 4
  store i64 %2418, i64* %PC
  %2419 = inttoptr i64 %2416 to i64*
  %2420 = load i64, i64* %2419
  store i64 %2420, i64* %RAX, align 8, !tbaa !2428
  %2421 = load i64, i64* %RAX
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 3
  store i64 %2423, i64* %PC
  store i64 %2421, i64* %RCX, align 8, !tbaa !2428
  %2424 = load i64, i64* %RCX
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 4
  store i64 %2426, i64* %PC
  %2427 = add i64 4, %2424
  store i64 %2427, i64* %RCX, align 8, !tbaa !2428
  %2428 = icmp ult i64 %2427, %2424
  %2429 = icmp ult i64 %2427, 4
  %2430 = or i1 %2428, %2429
  %2431 = zext i1 %2430 to i8
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2431, i8* %2432, align 1, !tbaa !2432
  %2433 = trunc i64 %2427 to i32
  %2434 = and i32 %2433, 255
  %2435 = call i32 @llvm.ctpop.i32(i32 %2434) #16
  %2436 = trunc i32 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = xor i8 %2437, 1
  %2439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2438, i8* %2439, align 1, !tbaa !2446
  %2440 = xor i64 4, %2424
  %2441 = xor i64 %2440, %2427
  %2442 = lshr i64 %2441, 4
  %2443 = trunc i64 %2442 to i8
  %2444 = and i8 %2443, 1
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2444, i8* %2445, align 1, !tbaa !2447
  %2446 = icmp eq i64 %2427, 0
  %2447 = zext i1 %2446 to i8
  %2448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2447, i8* %2448, align 1, !tbaa !2448
  %2449 = lshr i64 %2427, 63
  %2450 = trunc i64 %2449 to i8
  %2451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2450, i8* %2451, align 1, !tbaa !2449
  %2452 = lshr i64 %2424, 63
  %2453 = xor i64 %2449, %2452
  %2454 = add nuw nsw i64 %2453, %2449
  %2455 = icmp eq i64 %2454, 2
  %2456 = zext i1 %2455 to i8
  %2457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2456, i8* %2457, align 1, !tbaa !2450
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 8
  %2460 = load i64, i64* %RCX
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %PC
  %2463 = inttoptr i64 %2459 to i64*
  store i64 %2460, i64* %2463
  %2464 = load i64, i64* %RAX
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 3
  store i64 %2466, i64* %PC
  %2467 = inttoptr i64 %2464 to i32*
  %2468 = load i32, i32* %2467
  %2469 = sext i32 %2468 to i64
  store i64 %2469, i64* %RAX, align 8, !tbaa !2428
  %2470 = load i64, i64* %RAX
  %2471 = mul i64 %2470, 8
  %2472 = add i64 %2471, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 8
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2472 to i64*
  %2476 = load i64, i64* %2475
  store i64 %2476, i64* %RAX, align 8, !tbaa !2428
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 40
  %2479 = load i64, i64* %RAX
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2478 to i64*
  store i64 %2479, i64* %2482
  %2483 = load i64, i64* %PC
  %2484 = sub i64 %2483, 601
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 5
  store i64 %2486, i64* %PC
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2484, i64* %2487, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 12
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 7
  store i64 %2491, i64* %PC
  %2492 = inttoptr i64 %2489 to i32*
  store i32 17, i32* %2492
  %2493 = load i64, i64* %RBP
  %2494 = sub i64 %2493, 12
  %2495 = load i64, i64* %PC
  %2496 = add i64 %2495, 3
  store i64 %2496, i64* %PC
  %2497 = inttoptr i64 %2494 to i32*
  %2498 = load i32, i32* %2497
  %2499 = zext i32 %2498 to i64
  store i64 %2499, i64* %RDI, align 8, !tbaa !2428
  %2500 = load i64, i64* %PC
  %2501 = sub i64 %2500, 934
  %2502 = load i64, i64* %PC
  %2503 = add i64 %2502, 5
  %2504 = load i64, i64* %PC
  %2505 = add i64 %2504, 5
  store i64 %2505, i64* %PC
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2507 = load i64, i64* %2506, align 8, !tbaa !2428
  %2508 = add i64 %2507, -8
  %2509 = inttoptr i64 %2508 to i64*
  store i64 %2503, i64* %2509
  store i64 %2508, i64* %2506, align 8, !tbaa !2428
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2501, i64* %2510, align 8, !tbaa !2428
  %2511 = load i64, i64* %PC
  %2512 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2511, %struct.Memory* %MEMORY.0)
  %2513 = load i64, i64* %RBP
  %2514 = sub i64 %2513, 8
  %2515 = load i64, i64* %PC
  %2516 = add i64 %2515, 4
  store i64 %2516, i64* %PC
  %2517 = inttoptr i64 %2514 to i64*
  %2518 = load i64, i64* %2517
  store i64 %2518, i64* %RAX, align 8, !tbaa !2428
  %2519 = load i64, i64* %RAX
  %2520 = load i64, i64* %PC
  %2521 = add i64 %2520, 3
  store i64 %2521, i64* %PC
  store i64 %2519, i64* %RCX, align 8, !tbaa !2428
  %2522 = load i64, i64* %RCX
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 4
  store i64 %2524, i64* %PC
  %2525 = add i64 4, %2522
  store i64 %2525, i64* %RCX, align 8, !tbaa !2428
  %2526 = icmp ult i64 %2525, %2522
  %2527 = icmp ult i64 %2525, 4
  %2528 = or i1 %2526, %2527
  %2529 = zext i1 %2528 to i8
  %2530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2529, i8* %2530, align 1, !tbaa !2432
  %2531 = trunc i64 %2525 to i32
  %2532 = and i32 %2531, 255
  %2533 = call i32 @llvm.ctpop.i32(i32 %2532) #16
  %2534 = trunc i32 %2533 to i8
  %2535 = and i8 %2534, 1
  %2536 = xor i8 %2535, 1
  %2537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2536, i8* %2537, align 1, !tbaa !2446
  %2538 = xor i64 4, %2522
  %2539 = xor i64 %2538, %2525
  %2540 = lshr i64 %2539, 4
  %2541 = trunc i64 %2540 to i8
  %2542 = and i8 %2541, 1
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2542, i8* %2543, align 1, !tbaa !2447
  %2544 = icmp eq i64 %2525, 0
  %2545 = zext i1 %2544 to i8
  %2546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2545, i8* %2546, align 1, !tbaa !2448
  %2547 = lshr i64 %2525, 63
  %2548 = trunc i64 %2547 to i8
  %2549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2548, i8* %2549, align 1, !tbaa !2449
  %2550 = lshr i64 %2522, 63
  %2551 = xor i64 %2547, %2550
  %2552 = add nuw nsw i64 %2551, %2547
  %2553 = icmp eq i64 %2552, 2
  %2554 = zext i1 %2553 to i8
  %2555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2554, i8* %2555, align 1, !tbaa !2450
  %2556 = load i64, i64* %RBP
  %2557 = sub i64 %2556, 8
  %2558 = load i64, i64* %RCX
  %2559 = load i64, i64* %PC
  %2560 = add i64 %2559, 4
  store i64 %2560, i64* %PC
  %2561 = inttoptr i64 %2557 to i64*
  store i64 %2558, i64* %2561
  %2562 = load i64, i64* %RAX
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 3
  store i64 %2564, i64* %PC
  %2565 = inttoptr i64 %2562 to i32*
  %2566 = load i32, i32* %2565
  %2567 = sext i32 %2566 to i64
  store i64 %2567, i64* %RAX, align 8, !tbaa !2428
  %2568 = load i64, i64* %RAX
  %2569 = mul i64 %2568, 8
  %2570 = add i64 %2569, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 8
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to i64*
  %2574 = load i64, i64* %2573
  store i64 %2574, i64* %RAX, align 8, !tbaa !2428
  %2575 = load i64, i64* %RBP
  %2576 = sub i64 %2575, 40
  %2577 = load i64, i64* %RAX
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2576 to i64*
  store i64 %2577, i64* %2580
  %2581 = load i64, i64* %PC
  %2582 = sub i64 %2581, 851
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 5
  store i64 %2584, i64* %PC
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2582, i64* %2585, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %2586 = load i64, i64* %RBP
  %2587 = sub i64 %2586, 12
  %2588 = load i64, i64* %PC
  %2589 = add i64 %2588, 7
  store i64 %2589, i64* %PC
  %2590 = inttoptr i64 %2587 to i32*
  store i32 3, i32* %2590
  %2591 = load i64, i64* %RBP
  %2592 = sub i64 %2591, 12
  %2593 = load i64, i64* %PC
  %2594 = add i64 %2593, 3
  store i64 %2594, i64* %PC
  %2595 = inttoptr i64 %2592 to i32*
  %2596 = load i32, i32* %2595
  %2597 = zext i32 %2596 to i64
  store i64 %2597, i64* %RDI, align 8, !tbaa !2428
  %2598 = load i64, i64* %PC
  %2599 = sub i64 %2598, 234
  %2600 = load i64, i64* %PC
  %2601 = add i64 %2600, 5
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 5
  store i64 %2603, i64* %PC
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2605 = load i64, i64* %2604, align 8, !tbaa !2428
  %2606 = add i64 %2605, -8
  %2607 = inttoptr i64 %2606 to i64*
  store i64 %2601, i64* %2607
  store i64 %2606, i64* %2604, align 8, !tbaa !2428
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2599, i64* %2608, align 8, !tbaa !2428
  %2609 = load i64, i64* %PC
  %2610 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2609, %struct.Memory* %MEMORY.0)
  %2611 = load i64, i64* %RBP
  %2612 = sub i64 %2611, 8
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 4
  store i64 %2614, i64* %PC
  %2615 = inttoptr i64 %2612 to i64*
  %2616 = load i64, i64* %2615
  store i64 %2616, i64* %RAX, align 8, !tbaa !2428
  %2617 = load i64, i64* %RAX
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 3
  store i64 %2619, i64* %PC
  store i64 %2617, i64* %RCX, align 8, !tbaa !2428
  %2620 = load i64, i64* %RCX
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 4
  store i64 %2622, i64* %PC
  %2623 = add i64 4, %2620
  store i64 %2623, i64* %RCX, align 8, !tbaa !2428
  %2624 = icmp ult i64 %2623, %2620
  %2625 = icmp ult i64 %2623, 4
  %2626 = or i1 %2624, %2625
  %2627 = zext i1 %2626 to i8
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2627, i8* %2628, align 1, !tbaa !2432
  %2629 = trunc i64 %2623 to i32
  %2630 = and i32 %2629, 255
  %2631 = call i32 @llvm.ctpop.i32(i32 %2630) #16
  %2632 = trunc i32 %2631 to i8
  %2633 = and i8 %2632, 1
  %2634 = xor i8 %2633, 1
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2634, i8* %2635, align 1, !tbaa !2446
  %2636 = xor i64 4, %2620
  %2637 = xor i64 %2636, %2623
  %2638 = lshr i64 %2637, 4
  %2639 = trunc i64 %2638 to i8
  %2640 = and i8 %2639, 1
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2640, i8* %2641, align 1, !tbaa !2447
  %2642 = icmp eq i64 %2623, 0
  %2643 = zext i1 %2642 to i8
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2643, i8* %2644, align 1, !tbaa !2448
  %2645 = lshr i64 %2623, 63
  %2646 = trunc i64 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2646, i8* %2647, align 1, !tbaa !2449
  %2648 = lshr i64 %2620, 63
  %2649 = xor i64 %2645, %2648
  %2650 = add nuw nsw i64 %2649, %2645
  %2651 = icmp eq i64 %2650, 2
  %2652 = zext i1 %2651 to i8
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2652, i8* %2653, align 1, !tbaa !2450
  %2654 = load i64, i64* %RBP
  %2655 = sub i64 %2654, 8
  %2656 = load i64, i64* %RCX
  %2657 = load i64, i64* %PC
  %2658 = add i64 %2657, 4
  store i64 %2658, i64* %PC
  %2659 = inttoptr i64 %2655 to i64*
  store i64 %2656, i64* %2659
  %2660 = load i64, i64* %RAX
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 3
  store i64 %2662, i64* %PC
  %2663 = inttoptr i64 %2660 to i32*
  %2664 = load i32, i32* %2663
  %2665 = sext i32 %2664 to i64
  store i64 %2665, i64* %RAX, align 8, !tbaa !2428
  %2666 = load i64, i64* %RAX
  %2667 = mul i64 %2666, 8
  %2668 = add i64 %2667, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2669 = load i64, i64* %PC
  %2670 = add i64 %2669, 8
  store i64 %2670, i64* %PC
  %2671 = inttoptr i64 %2668 to i64*
  %2672 = load i64, i64* %2671
  store i64 %2672, i64* %RAX, align 8, !tbaa !2428
  %2673 = load i64, i64* %RBP
  %2674 = sub i64 %2673, 40
  %2675 = load i64, i64* %RAX
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 4
  store i64 %2677, i64* %PC
  %2678 = inttoptr i64 %2674 to i64*
  store i64 %2675, i64* %2678
  %2679 = load i64, i64* %PC
  %2680 = sub i64 %2679, 151
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 5
  store i64 %2682, i64* %PC
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2680, i64* %2683, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2684 = load i64, i64* %RBP
  %2685 = sub i64 %2684, 12
  %2686 = load i64, i64* %PC
  %2687 = add i64 %2686, 7
  store i64 %2687, i64* %PC
  %2688 = inttoptr i64 %2685 to i32*
  store i32 22, i32* %2688
  %2689 = load i64, i64* %RBP
  %2690 = sub i64 %2689, 12
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 3
  store i64 %2692, i64* %PC
  %2693 = inttoptr i64 %2690 to i32*
  %2694 = load i32, i32* %2693
  %2695 = zext i32 %2694 to i64
  store i64 %2695, i64* %RDI, align 8, !tbaa !2428
  %2696 = load i64, i64* %PC
  %2697 = sub i64 %2696, 1184
  %2698 = load i64, i64* %PC
  %2699 = add i64 %2698, 5
  %2700 = load i64, i64* %PC
  %2701 = add i64 %2700, 5
  store i64 %2701, i64* %PC
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2703 = load i64, i64* %2702, align 8, !tbaa !2428
  %2704 = add i64 %2703, -8
  %2705 = inttoptr i64 %2704 to i64*
  store i64 %2699, i64* %2705
  store i64 %2704, i64* %2702, align 8, !tbaa !2428
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2697, i64* %2706, align 8, !tbaa !2428
  %2707 = load i64, i64* %PC
  %2708 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2707, %struct.Memory* %MEMORY.0)
  %2709 = load i64, i64* %RBP
  %2710 = sub i64 %2709, 8
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 4
  store i64 %2712, i64* %PC
  %2713 = inttoptr i64 %2710 to i64*
  %2714 = load i64, i64* %2713
  store i64 %2714, i64* %RAX, align 8, !tbaa !2428
  %2715 = load i64, i64* %RAX
  %2716 = load i64, i64* %PC
  %2717 = add i64 %2716, 3
  store i64 %2717, i64* %PC
  store i64 %2715, i64* %RCX, align 8, !tbaa !2428
  %2718 = load i64, i64* %RCX
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 4
  store i64 %2720, i64* %PC
  %2721 = add i64 4, %2718
  store i64 %2721, i64* %RCX, align 8, !tbaa !2428
  %2722 = icmp ult i64 %2721, %2718
  %2723 = icmp ult i64 %2721, 4
  %2724 = or i1 %2722, %2723
  %2725 = zext i1 %2724 to i8
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2725, i8* %2726, align 1, !tbaa !2432
  %2727 = trunc i64 %2721 to i32
  %2728 = and i32 %2727, 255
  %2729 = call i32 @llvm.ctpop.i32(i32 %2728) #16
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  %2732 = xor i8 %2731, 1
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2732, i8* %2733, align 1, !tbaa !2446
  %2734 = xor i64 4, %2718
  %2735 = xor i64 %2734, %2721
  %2736 = lshr i64 %2735, 4
  %2737 = trunc i64 %2736 to i8
  %2738 = and i8 %2737, 1
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2738, i8* %2739, align 1, !tbaa !2447
  %2740 = icmp eq i64 %2721, 0
  %2741 = zext i1 %2740 to i8
  %2742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2741, i8* %2742, align 1, !tbaa !2448
  %2743 = lshr i64 %2721, 63
  %2744 = trunc i64 %2743 to i8
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2744, i8* %2745, align 1, !tbaa !2449
  %2746 = lshr i64 %2718, 63
  %2747 = xor i64 %2743, %2746
  %2748 = add nuw nsw i64 %2747, %2743
  %2749 = icmp eq i64 %2748, 2
  %2750 = zext i1 %2749 to i8
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2750, i8* %2751, align 1, !tbaa !2450
  %2752 = load i64, i64* %RBP
  %2753 = sub i64 %2752, 8
  %2754 = load i64, i64* %RCX
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 4
  store i64 %2756, i64* %PC
  %2757 = inttoptr i64 %2753 to i64*
  store i64 %2754, i64* %2757
  %2758 = load i64, i64* %RAX
  %2759 = load i64, i64* %PC
  %2760 = add i64 %2759, 3
  store i64 %2760, i64* %PC
  %2761 = inttoptr i64 %2758 to i32*
  %2762 = load i32, i32* %2761
  %2763 = sext i32 %2762 to i64
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = load i64, i64* %RAX
  %2765 = mul i64 %2764, 8
  %2766 = add i64 %2765, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 8
  store i64 %2768, i64* %PC
  %2769 = inttoptr i64 %2766 to i64*
  %2770 = load i64, i64* %2769
  store i64 %2770, i64* %RAX, align 8, !tbaa !2428
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 40
  %2773 = load i64, i64* %RAX
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 4
  store i64 %2775, i64* %PC
  %2776 = inttoptr i64 %2772 to i64*
  store i64 %2773, i64* %2776
  %2777 = load i64, i64* %PC
  %2778 = sub i64 %2777, 1101
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 5
  store i64 %2780, i64* %PC
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2778, i64* %2781, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %2782 = load i64, i64* %RBP
  %2783 = sub i64 %2782, 12
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 7
  store i64 %2785, i64* %PC
  %2786 = inttoptr i64 %2783 to i32*
  store i32 0, i32* %2786
  %2787 = load i64, i64* %RSP
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 4
  store i64 %2789, i64* %PC
  %2790 = add i64 48, %2787
  store i64 %2790, i64* %RSP, align 8, !tbaa !2428
  %2791 = icmp ult i64 %2790, %2787
  %2792 = icmp ult i64 %2790, 48
  %2793 = or i1 %2791, %2792
  %2794 = zext i1 %2793 to i8
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2794, i8* %2795, align 1, !tbaa !2432
  %2796 = trunc i64 %2790 to i32
  %2797 = and i32 %2796, 255
  %2798 = call i32 @llvm.ctpop.i32(i32 %2797) #16
  %2799 = trunc i32 %2798 to i8
  %2800 = and i8 %2799, 1
  %2801 = xor i8 %2800, 1
  %2802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2801, i8* %2802, align 1, !tbaa !2446
  %2803 = xor i64 48, %2787
  %2804 = xor i64 %2803, %2790
  %2805 = lshr i64 %2804, 4
  %2806 = trunc i64 %2805 to i8
  %2807 = and i8 %2806, 1
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2807, i8* %2808, align 1, !tbaa !2447
  %2809 = icmp eq i64 %2790, 0
  %2810 = zext i1 %2809 to i8
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2810, i8* %2811, align 1, !tbaa !2448
  %2812 = lshr i64 %2790, 63
  %2813 = trunc i64 %2812 to i8
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2813, i8* %2814, align 1, !tbaa !2449
  %2815 = lshr i64 %2787, 63
  %2816 = xor i64 %2812, %2815
  %2817 = add nuw nsw i64 %2816, %2812
  %2818 = icmp eq i64 %2817, 2
  %2819 = zext i1 %2818 to i8
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2819, i8* %2820, align 1, !tbaa !2450
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 1
  store i64 %2822, i64* %PC
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2824 = load i64, i64* %2823, align 8, !tbaa !2428
  %2825 = add i64 %2824, 8
  %2826 = inttoptr i64 %2824 to i64*
  %2827 = load i64, i64* %2826
  store i64 %2827, i64* %RBP, align 8, !tbaa !2428
  store i64 %2825, i64* %2823, align 8, !tbaa !2428
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 1
  store i64 %2829, i64* %PC
  %2830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2832 = load i64, i64* %2831, align 8, !tbaa !2428
  %2833 = inttoptr i64 %2832 to i64*
  %2834 = load i64, i64* %2833
  store i64 %2834, i64* %2830, align 8, !tbaa !2428
  %2835 = add i64 %2832, 8
  store i64 %2835, i64* %2831, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400703:                                     ; preds = %block_4006fc, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4006fc ]
  %2836 = load i64, i64* %RBP
  %2837 = sub i64 %2836, 12
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 3
  store i64 %2839, i64* %PC
  %2840 = inttoptr i64 %2837 to i32*
  %2841 = load i32, i32* %2840
  %2842 = zext i32 %2841 to i64
  store i64 %2842, i64* %RDI, align 8, !tbaa !2428
  %2843 = load i64, i64* %PC
  %2844 = sub i64 %2843, 534
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 5
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 5
  store i64 %2848, i64* %PC
  %2849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2850 = load i64, i64* %2849, align 8, !tbaa !2428
  %2851 = add i64 %2850, -8
  %2852 = inttoptr i64 %2851 to i64*
  store i64 %2846, i64* %2852
  store i64 %2851, i64* %2849, align 8, !tbaa !2428
  %2853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2844, i64* %2853, align 8, !tbaa !2428
  %2854 = load i64, i64* %PC
  %2855 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2854, %struct.Memory* %MEMORY.1)
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 8
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 4
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i64*
  %2861 = load i64, i64* %2860
  store i64 %2861, i64* %RAX, align 8, !tbaa !2428
  %2862 = load i64, i64* %RAX
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 3
  store i64 %2864, i64* %PC
  store i64 %2862, i64* %RCX, align 8, !tbaa !2428
  %2865 = load i64, i64* %RCX
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 4
  store i64 %2867, i64* %PC
  %2868 = add i64 4, %2865
  store i64 %2868, i64* %RCX, align 8, !tbaa !2428
  %2869 = icmp ult i64 %2868, %2865
  %2870 = icmp ult i64 %2868, 4
  %2871 = or i1 %2869, %2870
  %2872 = zext i1 %2871 to i8
  %2873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2872, i8* %2873, align 1, !tbaa !2432
  %2874 = trunc i64 %2868 to i32
  %2875 = and i32 %2874, 255
  %2876 = call i32 @llvm.ctpop.i32(i32 %2875) #16
  %2877 = trunc i32 %2876 to i8
  %2878 = and i8 %2877, 1
  %2879 = xor i8 %2878, 1
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2879, i8* %2880, align 1, !tbaa !2446
  %2881 = xor i64 4, %2865
  %2882 = xor i64 %2881, %2868
  %2883 = lshr i64 %2882, 4
  %2884 = trunc i64 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2885, i8* %2886, align 1, !tbaa !2447
  %2887 = icmp eq i64 %2868, 0
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2888, i8* %2889, align 1, !tbaa !2448
  %2890 = lshr i64 %2868, 63
  %2891 = trunc i64 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2891, i8* %2892, align 1, !tbaa !2449
  %2893 = lshr i64 %2865, 63
  %2894 = xor i64 %2890, %2893
  %2895 = add nuw nsw i64 %2894, %2890
  %2896 = icmp eq i64 %2895, 2
  %2897 = zext i1 %2896 to i8
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2897, i8* %2898, align 1, !tbaa !2450
  %2899 = load i64, i64* %RBP
  %2900 = sub i64 %2899, 8
  %2901 = load i64, i64* %RCX
  %2902 = load i64, i64* %PC
  %2903 = add i64 %2902, 4
  store i64 %2903, i64* %PC
  %2904 = inttoptr i64 %2900 to i64*
  store i64 %2901, i64* %2904
  %2905 = load i64, i64* %RAX
  %2906 = load i64, i64* %PC
  %2907 = add i64 %2906, 3
  store i64 %2907, i64* %PC
  %2908 = inttoptr i64 %2905 to i32*
  %2909 = load i32, i32* %2908
  %2910 = sext i32 %2909 to i64
  store i64 %2910, i64* %RAX, align 8, !tbaa !2428
  %2911 = load i64, i64* %RAX
  %2912 = mul i64 %2911, 8
  %2913 = add i64 %2912, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2914 = load i64, i64* %PC
  %2915 = add i64 %2914, 8
  store i64 %2915, i64* %PC
  %2916 = inttoptr i64 %2913 to i64*
  %2917 = load i64, i64* %2916
  store i64 %2917, i64* %RAX, align 8, !tbaa !2428
  %2918 = load i64, i64* %RBP
  %2919 = sub i64 %2918, 40
  %2920 = load i64, i64* %RAX
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 4
  store i64 %2922, i64* %PC
  %2923 = inttoptr i64 %2919 to i64*
  store i64 %2920, i64* %2923
  %2924 = load i64, i64* %PC
  %2925 = sub i64 %2924, 451
  %2926 = load i64, i64* %PC
  %2927 = add i64 %2926, 5
  store i64 %2927, i64* %PC
  %2928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2925, i64* %2928, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %2929 = load i64, i64* %RBP
  %2930 = sub i64 %2929, 12
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 7
  store i64 %2932, i64* %PC
  %2933 = inttoptr i64 %2930 to i32*
  store i32 4, i32* %2933
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 12
  %2936 = load i64, i64* %PC
  %2937 = add i64 %2936, 3
  store i64 %2937, i64* %PC
  %2938 = inttoptr i64 %2935 to i32*
  %2939 = load i32, i32* %2938
  %2940 = zext i32 %2939 to i64
  store i64 %2940, i64* %RDI, align 8, !tbaa !2428
  %2941 = load i64, i64* %PC
  %2942 = sub i64 %2941, 284
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 5
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 5
  store i64 %2946, i64* %PC
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2948 = load i64, i64* %2947, align 8, !tbaa !2428
  %2949 = add i64 %2948, -8
  %2950 = inttoptr i64 %2949 to i64*
  store i64 %2944, i64* %2950
  store i64 %2949, i64* %2947, align 8, !tbaa !2428
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2942, i64* %2951, align 8, !tbaa !2428
  %2952 = load i64, i64* %PC
  %2953 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2952, %struct.Memory* %MEMORY.0)
  %2954 = load i64, i64* %RBP
  %2955 = sub i64 %2954, 8
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 4
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2955 to i64*
  %2959 = load i64, i64* %2958
  store i64 %2959, i64* %RAX, align 8, !tbaa !2428
  %2960 = load i64, i64* %RAX
  %2961 = load i64, i64* %PC
  %2962 = add i64 %2961, 3
  store i64 %2962, i64* %PC
  store i64 %2960, i64* %RCX, align 8, !tbaa !2428
  %2963 = load i64, i64* %RCX
  %2964 = load i64, i64* %PC
  %2965 = add i64 %2964, 4
  store i64 %2965, i64* %PC
  %2966 = add i64 4, %2963
  store i64 %2966, i64* %RCX, align 8, !tbaa !2428
  %2967 = icmp ult i64 %2966, %2963
  %2968 = icmp ult i64 %2966, 4
  %2969 = or i1 %2967, %2968
  %2970 = zext i1 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2970, i8* %2971, align 1, !tbaa !2432
  %2972 = trunc i64 %2966 to i32
  %2973 = and i32 %2972, 255
  %2974 = call i32 @llvm.ctpop.i32(i32 %2973) #16
  %2975 = trunc i32 %2974 to i8
  %2976 = and i8 %2975, 1
  %2977 = xor i8 %2976, 1
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2977, i8* %2978, align 1, !tbaa !2446
  %2979 = xor i64 4, %2963
  %2980 = xor i64 %2979, %2966
  %2981 = lshr i64 %2980, 4
  %2982 = trunc i64 %2981 to i8
  %2983 = and i8 %2982, 1
  %2984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2983, i8* %2984, align 1, !tbaa !2447
  %2985 = icmp eq i64 %2966, 0
  %2986 = zext i1 %2985 to i8
  %2987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2986, i8* %2987, align 1, !tbaa !2448
  %2988 = lshr i64 %2966, 63
  %2989 = trunc i64 %2988 to i8
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2989, i8* %2990, align 1, !tbaa !2449
  %2991 = lshr i64 %2963, 63
  %2992 = xor i64 %2988, %2991
  %2993 = add nuw nsw i64 %2992, %2988
  %2994 = icmp eq i64 %2993, 2
  %2995 = zext i1 %2994 to i8
  %2996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2995, i8* %2996, align 1, !tbaa !2450
  %2997 = load i64, i64* %RBP
  %2998 = sub i64 %2997, 8
  %2999 = load i64, i64* %RCX
  %3000 = load i64, i64* %PC
  %3001 = add i64 %3000, 4
  store i64 %3001, i64* %PC
  %3002 = inttoptr i64 %2998 to i64*
  store i64 %2999, i64* %3002
  %3003 = load i64, i64* %RAX
  %3004 = load i64, i64* %PC
  %3005 = add i64 %3004, 3
  store i64 %3005, i64* %PC
  %3006 = inttoptr i64 %3003 to i32*
  %3007 = load i32, i32* %3006
  %3008 = sext i32 %3007 to i64
  store i64 %3008, i64* %RAX, align 8, !tbaa !2428
  %3009 = load i64, i64* %RAX
  %3010 = mul i64 %3009, 8
  %3011 = add i64 %3010, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3012 = load i64, i64* %PC
  %3013 = add i64 %3012, 8
  store i64 %3013, i64* %PC
  %3014 = inttoptr i64 %3011 to i64*
  %3015 = load i64, i64* %3014
  store i64 %3015, i64* %RAX, align 8, !tbaa !2428
  %3016 = load i64, i64* %RBP
  %3017 = sub i64 %3016, 40
  %3018 = load i64, i64* %RAX
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 4
  store i64 %3020, i64* %PC
  %3021 = inttoptr i64 %3017 to i64*
  store i64 %3018, i64* %3021
  %3022 = load i64, i64* %PC
  %3023 = sub i64 %3022, 201
  %3024 = load i64, i64* %PC
  %3025 = add i64 %3024, 5
  store i64 %3025, i64* %PC
  %3026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3023, i64* %3026, align 8, !tbaa !2428
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %3027 = load i64, i64* %RBP
  %3028 = sub i64 %3027, 12
  %3029 = load i64, i64* %PC
  %3030 = add i64 %3029, 7
  store i64 %3030, i64* %PC
  %3031 = inttoptr i64 %3028 to i32*
  store i32 27, i32* %3031
  %3032 = load i64, i64* %RBP
  %3033 = sub i64 %3032, 12
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 3
  store i64 %3035, i64* %PC
  %3036 = inttoptr i64 %3033 to i32*
  %3037 = load i32, i32* %3036
  %3038 = zext i32 %3037 to i64
  store i64 %3038, i64* %RDI, align 8, !tbaa !2428
  %3039 = load i64, i64* %PC
  %3040 = sub i64 %3039, 1434
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 5
  %3043 = load i64, i64* %PC
  %3044 = add i64 %3043, 5
  store i64 %3044, i64* %PC
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3046 = load i64, i64* %3045, align 8, !tbaa !2428
  %3047 = add i64 %3046, -8
  %3048 = inttoptr i64 %3047 to i64*
  store i64 %3042, i64* %3048
  store i64 %3047, i64* %3045, align 8, !tbaa !2428
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3040, i64* %3049, align 8, !tbaa !2428
  %3050 = load i64, i64* %PC
  %3051 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %3050, %struct.Memory* %MEMORY.0)
  %3052 = load i64, i64* %RBP
  %3053 = sub i64 %3052, 8
  %3054 = load i64, i64* %PC
  %3055 = add i64 %3054, 4
  store i64 %3055, i64* %PC
  %3056 = inttoptr i64 %3053 to i64*
  %3057 = load i64, i64* %3056
  store i64 %3057, i64* %RAX, align 8, !tbaa !2428
  %3058 = load i64, i64* %RAX
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 3
  store i64 %3060, i64* %PC
  store i64 %3058, i64* %RCX, align 8, !tbaa !2428
  %3061 = load i64, i64* %RCX
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 4
  store i64 %3063, i64* %PC
  %3064 = add i64 4, %3061
  store i64 %3064, i64* %RCX, align 8, !tbaa !2428
  %3065 = icmp ult i64 %3064, %3061
  %3066 = icmp ult i64 %3064, 4
  %3067 = or i1 %3065, %3066
  %3068 = zext i1 %3067 to i8
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3068, i8* %3069, align 1, !tbaa !2432
  %3070 = trunc i64 %3064 to i32
  %3071 = and i32 %3070, 255
  %3072 = call i32 @llvm.ctpop.i32(i32 %3071) #16
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3075, i8* %3076, align 1, !tbaa !2446
  %3077 = xor i64 4, %3061
  %3078 = xor i64 %3077, %3064
  %3079 = lshr i64 %3078, 4
  %3080 = trunc i64 %3079 to i8
  %3081 = and i8 %3080, 1
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3081, i8* %3082, align 1, !tbaa !2447
  %3083 = icmp eq i64 %3064, 0
  %3084 = zext i1 %3083 to i8
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3084, i8* %3085, align 1, !tbaa !2448
  %3086 = lshr i64 %3064, 63
  %3087 = trunc i64 %3086 to i8
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3087, i8* %3088, align 1, !tbaa !2449
  %3089 = lshr i64 %3061, 63
  %3090 = xor i64 %3086, %3089
  %3091 = add nuw nsw i64 %3090, %3086
  %3092 = icmp eq i64 %3091, 2
  %3093 = zext i1 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3093, i8* %3094, align 1, !tbaa !2450
  %3095 = load i64, i64* %RBP
  %3096 = sub i64 %3095, 8
  %3097 = load i64, i64* %RCX
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 4
  store i64 %3099, i64* %PC
  %3100 = inttoptr i64 %3096 to i64*
  store i64 %3097, i64* %3100
  %3101 = load i64, i64* %RAX
  %3102 = load i64, i64* %PC
  %3103 = add i64 %3102, 3
  store i64 %3103, i64* %PC
  %3104 = inttoptr i64 %3101 to i32*
  %3105 = load i32, i32* %3104
  %3106 = sext i32 %3105 to i64
  store i64 %3106, i64* %RAX, align 8, !tbaa !2428
  %3107 = load i64, i64* %RAX
  %3108 = mul i64 %3107, 8
  %3109 = add i64 %3108, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3110 = load i64, i64* %PC
  %3111 = add i64 %3110, 8
  store i64 %3111, i64* %PC
  %3112 = inttoptr i64 %3109 to i64*
  %3113 = load i64, i64* %3112
  store i64 %3113, i64* %RAX, align 8, !tbaa !2428
  %3114 = load i64, i64* %RBP
  %3115 = sub i64 %3114, 40
  %3116 = load i64, i64* %RAX
  %3117 = load i64, i64* %PC
  %3118 = add i64 %3117, 4
  store i64 %3118, i64* %PC
  %3119 = inttoptr i64 %3115 to i64*
  store i64 %3116, i64* %3119
  %3120 = load i64, i64* %PC
  %3121 = sub i64 %3120, 1351
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 5
  store i64 %3123, i64* %PC
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3121, i64* %3124, align 8, !tbaa !2428
  br label %block_400566

; <label>:3125:                                   ; preds = %block_400566
  %3126 = load i64, i64* %PC
  %3127 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3126, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %3127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_eval(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 48
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 48
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 48, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i64, i64* %RDI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 12
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  store i32 0, i32* %79
  br label %block_400523

block_4007fd:                                     ; preds = %block_40054b, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.15, %block_4007f6 ], [ %MEMORY.22, %block_40054b ]
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 12
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = load i64, i64* %PC
  %88 = sub i64 %87, 784
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %90, i64* %96
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %88, i64* %97, align 8, !tbaa !2428
  %98 = load i64, i64* %PC
  %99 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %98, %struct.Memory* %MEMORY.0)
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 8
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %109 = load i64, i64* %RCX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = add i64 4, %109
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = icmp ult i64 %112, %109
  %114 = icmp ult i64 %112, 4
  %115 = or i1 %113, %114
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %116, i8* %117, align 1, !tbaa !2432
  %118 = trunc i64 %112 to i32
  %119 = and i32 %118, 255
  %120 = call i32 @llvm.ctpop.i32(i32 %119) #16
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %123, i8* %124, align 1, !tbaa !2446
  %125 = xor i64 4, %109
  %126 = xor i64 %125, %112
  %127 = lshr i64 %126, 4
  %128 = trunc i64 %127 to i8
  %129 = and i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = icmp eq i64 %112, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2448
  %134 = lshr i64 %112, 63
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2449
  %137 = lshr i64 %109, 63
  %138 = xor i64 %134, %137
  %139 = add nuw nsw i64 %138, %134
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2450
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 8
  %145 = load i64, i64* %RCX
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %148
  %149 = load i64, i64* %RAX
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = load i64, i64* %RAX
  %156 = mul i64 %155, 8
  %157 = add i64 %156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 40
  %164 = load i64, i64* %RAX
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %163 to i64*
  store i64 %164, i64* %167
  %168 = load i64, i64* %PC
  %169 = sub i64 %168, 701
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %169, i64* %172, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 12
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  store i32 9, i32* %177
  br label %block_400703

block_4008f7:                                     ; preds = %block_40054b, %block_4008f0
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.15, %block_4008f0 ], [ %MEMORY.22, %block_40054b ]
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 12
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %PC
  %186 = sub i64 %185, 1034
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  store i64 %190, i64* %PC
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %192 = load i64, i64* %191, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %188, i64* %194
  store i64 %193, i64* %191, align 8, !tbaa !2428
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %186, i64* %195, align 8, !tbaa !2428
  %196 = load i64, i64* %PC
  %197 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %196, %struct.Memory* %MEMORY.1)
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 8
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %207 = load i64, i64* %RCX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = add i64 4, %207
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = icmp ult i64 %210, %207
  %212 = icmp ult i64 %210, 4
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = trunc i64 %210 to i32
  %217 = and i32 %216, 255
  %218 = call i32 @llvm.ctpop.i32(i32 %217) #16
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %221, i8* %222, align 1, !tbaa !2446
  %223 = xor i64 4, %207
  %224 = xor i64 %223, %210
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %210, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %210, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i64 %207, 63
  %236 = xor i64 %232, %235
  %237 = add nuw nsw i64 %236, %232
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 8
  %243 = load i64, i64* %RCX
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %242 to i64*
  store i64 %243, i64* %246
  %247 = load i64, i64* %RAX
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 3
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = sext i32 %251 to i64
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = load i64, i64* %RAX
  %254 = mul i64 %253, 8
  %255 = add i64 %254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 8
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 40
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %261 to i64*
  store i64 %262, i64* %265
  %266 = load i64, i64* %PC
  %267 = sub i64 %266, 951
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %267, i64* %270, align 8, !tbaa !2428
  br label %block_400566

block_4007f6:                                     ; preds = %block_400566
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 14, i32* %275
  br label %block_4007fd

block_400573:                                     ; preds = %block_40054b, %block_40056c
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.15, %block_40056c ], [ %MEMORY.22, %block_40054b ]
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 12
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %277 to i32*
  %281 = load i32, i32* %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RDI, align 8, !tbaa !2428
  %283 = load i64, i64* %PC
  %284 = sub i64 %283, 134
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %286, i64* %292
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %284, i64* %293, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %294, %struct.Memory* %MEMORY.2)
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 8
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %305 = load i64, i64* %RCX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = add i64 4, %305
  store i64 %308, i64* %RCX, align 8, !tbaa !2428
  %309 = icmp ult i64 %308, %305
  %310 = icmp ult i64 %308, 4
  %311 = or i1 %309, %310
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %312, i8* %313, align 1, !tbaa !2432
  %314 = trunc i64 %308 to i32
  %315 = and i32 %314, 255
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %319, i8* %320, align 1, !tbaa !2446
  %321 = xor i64 4, %305
  %322 = xor i64 %321, %308
  %323 = lshr i64 %322, 4
  %324 = trunc i64 %323 to i8
  %325 = and i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = icmp eq i64 %308, 0
  %328 = zext i1 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %328, i8* %329, align 1, !tbaa !2448
  %330 = lshr i64 %308, 63
  %331 = trunc i64 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %331, i8* %332, align 1, !tbaa !2449
  %333 = lshr i64 %305, 63
  %334 = xor i64 %330, %333
  %335 = add nuw nsw i64 %334, %330
  %336 = icmp eq i64 %335, 2
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 8
  %341 = load i64, i64* %RCX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %340 to i64*
  store i64 %341, i64* %344
  %345 = load i64, i64* %RAX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = sext i32 %349 to i64
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = mul i64 %351, 8
  %353 = add i64 %352, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 8
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %RAX, align 8, !tbaa !2428
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 40
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %359 to i64*
  store i64 %360, i64* %363
  %364 = load i64, i64* %PC
  %365 = sub i64 %364, 51
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %365, i64* %368, align 8, !tbaa !2428
  br label %block_400566

block_4009f1:                                     ; preds = %block_40054b, %block_4009ea
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.15, %block_4009ea ], [ %MEMORY.22, %block_40054b ]
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 12
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  %374 = load i32, i32* %373
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %RDI, align 8, !tbaa !2428
  %376 = load i64, i64* %PC
  %377 = sub i64 %376, 1284
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 5
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %383 = load i64, i64* %382, align 8, !tbaa !2428
  %384 = add i64 %383, -8
  %385 = inttoptr i64 %384 to i64*
  store i64 %379, i64* %385
  store i64 %384, i64* %382, align 8, !tbaa !2428
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %377, i64* %386, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %387, %struct.Memory* %MEMORY.3)
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 8
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i64*
  %394 = load i64, i64* %393
  store i64 %394, i64* %RAX, align 8, !tbaa !2428
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %398 = load i64, i64* %RCX
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = add i64 4, %398
  store i64 %401, i64* %RCX, align 8, !tbaa !2428
  %402 = icmp ult i64 %401, %398
  %403 = icmp ult i64 %401, 4
  %404 = or i1 %402, %403
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %405, i8* %406, align 1, !tbaa !2432
  %407 = trunc i64 %401 to i32
  %408 = and i32 %407, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2446
  %414 = xor i64 4, %398
  %415 = xor i64 %414, %401
  %416 = lshr i64 %415, 4
  %417 = trunc i64 %416 to i8
  %418 = and i8 %417, 1
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %418, i8* %419, align 1, !tbaa !2447
  %420 = icmp eq i64 %401, 0
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %421, i8* %422, align 1, !tbaa !2448
  %423 = lshr i64 %401, 63
  %424 = trunc i64 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %424, i8* %425, align 1, !tbaa !2449
  %426 = lshr i64 %398, 63
  %427 = xor i64 %423, %426
  %428 = add nuw nsw i64 %427, %423
  %429 = icmp eq i64 %428, 2
  %430 = zext i1 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %430, i8* %431, align 1, !tbaa !2450
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 8
  %434 = load i64, i64* %RCX
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %433 to i64*
  store i64 %434, i64* %437
  %438 = load i64, i64* %RAX
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %RAX, align 8, !tbaa !2428
  %444 = load i64, i64* %RAX
  %445 = mul i64 %444, 8
  %446 = add i64 %445, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 8
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i64*
  %450 = load i64, i64* %449
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = load i64, i64* %RBP
  %452 = sub i64 %451, 40
  %453 = load i64, i64* %RAX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = inttoptr i64 %452 to i64*
  store i64 %453, i64* %456
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 1201
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %458, i64* %461, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 12
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 7
  store i64 %465, i64* %PC
  %466 = inttoptr i64 %463 to i32*
  store i32 19, i32* %466
  br label %block_4008f7

block_40066d:                                     ; preds = %block_400666, %block_40054b
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.15, %block_400666 ], [ %MEMORY.22, %block_40054b ]
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RDI, align 8, !tbaa !2428
  %474 = load i64, i64* %PC
  %475 = sub i64 %474, 384
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 5
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %481 = load i64, i64* %480, align 8, !tbaa !2428
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %477, i64* %483
  store i64 %482, i64* %480, align 8, !tbaa !2428
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %475, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %PC
  %486 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %485, %struct.Memory* %MEMORY.4)
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 8
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %488 to i64*
  %492 = load i64, i64* %491
  store i64 %492, i64* %RAX, align 8, !tbaa !2428
  %493 = load i64, i64* %RAX
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 3
  store i64 %495, i64* %PC
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %496 = load i64, i64* %RCX
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = add i64 4, %496
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = icmp ult i64 %499, %496
  %501 = icmp ult i64 %499, 4
  %502 = or i1 %500, %501
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %503, i8* %504, align 1, !tbaa !2432
  %505 = trunc i64 %499 to i32
  %506 = and i32 %505, 255
  %507 = call i32 @llvm.ctpop.i32(i32 %506) #16
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = xor i8 %509, 1
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %510, i8* %511, align 1, !tbaa !2446
  %512 = xor i64 4, %496
  %513 = xor i64 %512, %499
  %514 = lshr i64 %513, 4
  %515 = trunc i64 %514 to i8
  %516 = and i8 %515, 1
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %516, i8* %517, align 1, !tbaa !2447
  %518 = icmp eq i64 %499, 0
  %519 = zext i1 %518 to i8
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %519, i8* %520, align 1, !tbaa !2448
  %521 = lshr i64 %499, 63
  %522 = trunc i64 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %522, i8* %523, align 1, !tbaa !2449
  %524 = lshr i64 %496, 63
  %525 = xor i64 %521, %524
  %526 = add nuw nsw i64 %525, %521
  %527 = icmp eq i64 %526, 2
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %528, i8* %529, align 1, !tbaa !2450
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 8
  %532 = load i64, i64* %RCX
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 4
  store i64 %534, i64* %PC
  %535 = inttoptr i64 %531 to i64*
  store i64 %532, i64* %535
  %536 = load i64, i64* %RAX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = sext i32 %540 to i64
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = load i64, i64* %RAX
  %543 = mul i64 %542, 8
  %544 = add i64 %543, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 8
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i64*
  %548 = load i64, i64* %547
  store i64 %548, i64* %RAX, align 8, !tbaa !2428
  %549 = load i64, i64* %RBP
  %550 = sub i64 %549, 40
  %551 = load i64, i64* %RAX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %550 to i64*
  store i64 %551, i64* %554
  %555 = load i64, i64* %PC
  %556 = sub i64 %555, 301
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 5
  store i64 %558, i64* %PC
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %556, i64* %559, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %560 = load i64, i64* %RBP
  %561 = sub i64 %560, 12
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 7
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %561 to i32*
  store i32 24, i32* %564
  br label %block_4009f1

block_400767:                                     ; preds = %block_40054b, %block_400760
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.15, %block_400760 ], [ %MEMORY.22, %block_40054b ]
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 12
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 3
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i32*
  %570 = load i32, i32* %569
  %571 = zext i32 %570 to i64
  store i64 %571, i64* %RDI, align 8, !tbaa !2428
  %572 = load i64, i64* %PC
  %573 = sub i64 %572, 634
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 5
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 5
  store i64 %577, i64* %PC
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %579 = load i64, i64* %578, align 8, !tbaa !2428
  %580 = add i64 %579, -8
  %581 = inttoptr i64 %580 to i64*
  store i64 %575, i64* %581
  store i64 %580, i64* %578, align 8, !tbaa !2428
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %573, i64* %582, align 8, !tbaa !2428
  %583 = load i64, i64* %PC
  %584 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %583, %struct.Memory* %MEMORY.5)
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 8
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i64*
  %590 = load i64, i64* %589
  store i64 %590, i64* %RAX, align 8, !tbaa !2428
  %591 = load i64, i64* %RAX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %594 = load i64, i64* %RCX
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = add i64 4, %594
  store i64 %597, i64* %RCX, align 8, !tbaa !2428
  %598 = icmp ult i64 %597, %594
  %599 = icmp ult i64 %597, 4
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2432
  %603 = trunc i64 %597 to i32
  %604 = and i32 %603, 255
  %605 = call i32 @llvm.ctpop.i32(i32 %604) #16
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %608, i8* %609, align 1, !tbaa !2446
  %610 = xor i64 4, %594
  %611 = xor i64 %610, %597
  %612 = lshr i64 %611, 4
  %613 = trunc i64 %612 to i8
  %614 = and i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %614, i8* %615, align 1, !tbaa !2447
  %616 = icmp eq i64 %597, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = lshr i64 %597, 63
  %620 = trunc i64 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i64 %594, 63
  %623 = xor i64 %619, %622
  %624 = add nuw nsw i64 %623, %619
  %625 = icmp eq i64 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2450
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 8
  %630 = load i64, i64* %RCX
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 4
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %629 to i64*
  store i64 %630, i64* %633
  %634 = load i64, i64* %RAX
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = sext i32 %638 to i64
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = load i64, i64* %RAX
  %641 = mul i64 %640, 8
  %642 = add i64 %641, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 8
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 40
  %649 = load i64, i64* %RAX
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %648 to i64*
  store i64 %649, i64* %652
  %653 = load i64, i64* %PC
  %654 = sub i64 %653, 551
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %654, i64* %657, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %658 = load i64, i64* %RBP
  %659 = sub i64 %658, 12
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 7
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i32*
  store i32 29, i32* %662
  br label %block_400aeb

block_400861:                                     ; preds = %block_40054b, %block_40085a
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.15, %block_40085a ], [ %MEMORY.22, %block_40054b ]
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 12
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 3
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i32*
  %668 = load i32, i32* %667
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RDI, align 8, !tbaa !2428
  %670 = load i64, i64* %PC
  %671 = sub i64 %670, 884
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 5
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %677 = load i64, i64* %676, align 8, !tbaa !2428
  %678 = add i64 %677, -8
  %679 = inttoptr i64 %678 to i64*
  store i64 %673, i64* %679
  store i64 %678, i64* %676, align 8, !tbaa !2428
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %671, i64* %680, align 8, !tbaa !2428
  %681 = load i64, i64* %PC
  %682 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %681, %struct.Memory* %MEMORY.6)
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 8
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %684 to i64*
  %688 = load i64, i64* %687
  store i64 %688, i64* %RAX, align 8, !tbaa !2428
  %689 = load i64, i64* %RAX
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 3
  store i64 %691, i64* %PC
  store i64 %689, i64* %RCX, align 8, !tbaa !2428
  %692 = load i64, i64* %RCX
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = add i64 4, %692
  store i64 %695, i64* %RCX, align 8, !tbaa !2428
  %696 = icmp ult i64 %695, %692
  %697 = icmp ult i64 %695, 4
  %698 = or i1 %696, %697
  %699 = zext i1 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %699, i8* %700, align 1, !tbaa !2432
  %701 = trunc i64 %695 to i32
  %702 = and i32 %701, 255
  %703 = call i32 @llvm.ctpop.i32(i32 %702) #16
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = xor i8 %705, 1
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %706, i8* %707, align 1, !tbaa !2446
  %708 = xor i64 4, %692
  %709 = xor i64 %708, %695
  %710 = lshr i64 %709, 4
  %711 = trunc i64 %710 to i8
  %712 = and i8 %711, 1
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %712, i8* %713, align 1, !tbaa !2447
  %714 = icmp eq i64 %695, 0
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %715, i8* %716, align 1, !tbaa !2448
  %717 = lshr i64 %695, 63
  %718 = trunc i64 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %718, i8* %719, align 1, !tbaa !2449
  %720 = lshr i64 %692, 63
  %721 = xor i64 %717, %720
  %722 = add nuw nsw i64 %721, %717
  %723 = icmp eq i64 %722, 2
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %724, i8* %725, align 1, !tbaa !2450
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 8
  %728 = load i64, i64* %RCX
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %727 to i64*
  store i64 %728, i64* %731
  %732 = load i64, i64* %RAX
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 3
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %732 to i32*
  %736 = load i32, i32* %735
  %737 = sext i32 %736 to i64
  store i64 %737, i64* %RAX, align 8, !tbaa !2428
  %738 = load i64, i64* %RAX
  %739 = mul i64 %738, 8
  %740 = add i64 %739, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 8
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %740 to i64*
  %744 = load i64, i64* %743
  store i64 %744, i64* %RAX, align 8, !tbaa !2428
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 40
  %747 = load i64, i64* %RAX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %746 to i64*
  store i64 %747, i64* %750
  %751 = load i64, i64* %PC
  %752 = sub i64 %751, 801
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 5
  store i64 %754, i64* %PC
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %752, i64* %755, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 12
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 7
  store i64 %759, i64* %PC
  %760 = inttoptr i64 %757 to i32*
  store i32 11, i32* %760
  br label %block_400767

block_40095b:                                     ; preds = %block_40054b, %block_400954
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.15, %block_400954 ], [ %MEMORY.22, %block_40054b ]
  %761 = load i64, i64* %RBP
  %762 = sub i64 %761, 12
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 3
  store i64 %764, i64* %PC
  %765 = inttoptr i64 %762 to i32*
  %766 = load i32, i32* %765
  %767 = zext i32 %766 to i64
  store i64 %767, i64* %RDI, align 8, !tbaa !2428
  %768 = load i64, i64* %PC
  %769 = sub i64 %768, 1134
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 5
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %775 = load i64, i64* %774, align 8, !tbaa !2428
  %776 = add i64 %775, -8
  %777 = inttoptr i64 %776 to i64*
  store i64 %771, i64* %777
  store i64 %776, i64* %774, align 8, !tbaa !2428
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %769, i64* %778, align 8, !tbaa !2428
  %779 = load i64, i64* %PC
  %780 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %779, %struct.Memory* %MEMORY.7)
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 8
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 4
  store i64 %784, i64* %PC
  %785 = inttoptr i64 %782 to i64*
  %786 = load i64, i64* %785
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  store i64 %787, i64* %RCX, align 8, !tbaa !2428
  %790 = load i64, i64* %RCX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = add i64 4, %790
  store i64 %793, i64* %RCX, align 8, !tbaa !2428
  %794 = icmp ult i64 %793, %790
  %795 = icmp ult i64 %793, 4
  %796 = or i1 %794, %795
  %797 = zext i1 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %797, i8* %798, align 1, !tbaa !2432
  %799 = trunc i64 %793 to i32
  %800 = and i32 %799, 255
  %801 = call i32 @llvm.ctpop.i32(i32 %800) #16
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  %804 = xor i8 %803, 1
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %804, i8* %805, align 1, !tbaa !2446
  %806 = xor i64 4, %790
  %807 = xor i64 %806, %793
  %808 = lshr i64 %807, 4
  %809 = trunc i64 %808 to i8
  %810 = and i8 %809, 1
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %810, i8* %811, align 1, !tbaa !2447
  %812 = icmp eq i64 %793, 0
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %813, i8* %814, align 1, !tbaa !2448
  %815 = lshr i64 %793, 63
  %816 = trunc i64 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %816, i8* %817, align 1, !tbaa !2449
  %818 = lshr i64 %790, 63
  %819 = xor i64 %815, %818
  %820 = add nuw nsw i64 %819, %815
  %821 = icmp eq i64 %820, 2
  %822 = zext i1 %821 to i8
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %822, i8* %823, align 1, !tbaa !2450
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 8
  %826 = load i64, i64* %RCX
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 4
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %825 to i64*
  store i64 %826, i64* %829
  %830 = load i64, i64* %RAX
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i32*
  %834 = load i32, i32* %833
  %835 = sext i32 %834 to i64
  store i64 %835, i64* %RAX, align 8, !tbaa !2428
  %836 = load i64, i64* %RAX
  %837 = mul i64 %836, 8
  %838 = add i64 %837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 8
  store i64 %840, i64* %PC
  %841 = inttoptr i64 %838 to i64*
  %842 = load i64, i64* %841
  store i64 %842, i64* %RAX, align 8, !tbaa !2428
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 40
  %845 = load i64, i64* %RAX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %844 to i64*
  store i64 %845, i64* %848
  %849 = load i64, i64* %PC
  %850 = sub i64 %849, 1051
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 5
  store i64 %852, i64* %PC
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %850, i64* %853, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 12
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 7
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %855 to i32*
  store i32 16, i32* %858
  br label %block_400861

block_4005d7:                                     ; preds = %block_4005d0, %block_40054b
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.15, %block_4005d0 ], [ %MEMORY.22, %block_40054b ]
  %859 = load i64, i64* %RBP
  %860 = sub i64 %859, 12
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %860 to i32*
  %864 = load i32, i32* %863
  %865 = zext i32 %864 to i64
  store i64 %865, i64* %RDI, align 8, !tbaa !2428
  %866 = load i64, i64* %PC
  %867 = sub i64 %866, 234
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 5
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  store i64 %871, i64* %PC
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %873 = load i64, i64* %872, align 8, !tbaa !2428
  %874 = add i64 %873, -8
  %875 = inttoptr i64 %874 to i64*
  store i64 %869, i64* %875
  store i64 %874, i64* %872, align 8, !tbaa !2428
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %867, i64* %876, align 8, !tbaa !2428
  %877 = load i64, i64* %PC
  %878 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %877, %struct.Memory* %MEMORY.8)
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 8
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = load i64, i64* %RAX
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 3
  store i64 %887, i64* %PC
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %888 = load i64, i64* %RCX
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = add i64 4, %888
  store i64 %891, i64* %RCX, align 8, !tbaa !2428
  %892 = icmp ult i64 %891, %888
  %893 = icmp ult i64 %891, 4
  %894 = or i1 %892, %893
  %895 = zext i1 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %895, i8* %896, align 1, !tbaa !2432
  %897 = trunc i64 %891 to i32
  %898 = and i32 %897, 255
  %899 = call i32 @llvm.ctpop.i32(i32 %898) #16
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  %902 = xor i8 %901, 1
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %902, i8* %903, align 1, !tbaa !2446
  %904 = xor i64 4, %888
  %905 = xor i64 %904, %891
  %906 = lshr i64 %905, 4
  %907 = trunc i64 %906 to i8
  %908 = and i8 %907, 1
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %908, i8* %909, align 1, !tbaa !2447
  %910 = icmp eq i64 %891, 0
  %911 = zext i1 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %911, i8* %912, align 1, !tbaa !2448
  %913 = lshr i64 %891, 63
  %914 = trunc i64 %913 to i8
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %914, i8* %915, align 1, !tbaa !2449
  %916 = lshr i64 %888, 63
  %917 = xor i64 %913, %916
  %918 = add nuw nsw i64 %917, %913
  %919 = icmp eq i64 %918, 2
  %920 = zext i1 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %920, i8* %921, align 1, !tbaa !2450
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 8
  %924 = load i64, i64* %RCX
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 4
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %923 to i64*
  store i64 %924, i64* %927
  %928 = load i64, i64* %RAX
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 3
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i32*
  %932 = load i32, i32* %931
  %933 = sext i32 %932 to i64
  store i64 %933, i64* %RAX, align 8, !tbaa !2428
  %934 = load i64, i64* %RAX
  %935 = mul i64 %934, 8
  %936 = add i64 %935, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 8
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to i64*
  %940 = load i64, i64* %939
  store i64 %940, i64* %RAX, align 8, !tbaa !2428
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 40
  %943 = load i64, i64* %RAX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %942 to i64*
  store i64 %943, i64* %946
  %947 = load i64, i64* %PC
  %948 = sub i64 %947, 151
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 5
  store i64 %950, i64* %PC
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %948, i64* %951, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 12
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 7
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i32*
  store i32 21, i32* %956
  br label %block_40095b

block_40056c:                                     ; preds = %block_400566
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 12
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i32*
  store i32 1, i32* %961
  br label %block_400573

block_400a23:                                     ; preds = %block_400a1c, %block_40054b
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.15, %block_400a1c ], [ %MEMORY.22, %block_40054b ]
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 12
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 3
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i32*
  %967 = load i32, i32* %966
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RDI, align 8, !tbaa !2428
  %969 = load i64, i64* %PC
  %970 = sub i64 %969, 1334
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 5
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 5
  store i64 %974, i64* %PC
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %976 = load i64, i64* %975, align 8, !tbaa !2428
  %977 = add i64 %976, -8
  %978 = inttoptr i64 %977 to i64*
  store i64 %972, i64* %978
  store i64 %977, i64* %975, align 8, !tbaa !2428
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %970, i64* %979, align 8, !tbaa !2428
  %980 = load i64, i64* %PC
  %981 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %980, %struct.Memory* %MEMORY.9)
  %982 = load i64, i64* %RBP
  %983 = sub i64 %982, 8
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i64*
  %987 = load i64, i64* %986
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 3
  store i64 %990, i64* %PC
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %991 = load i64, i64* %RCX
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 4
  store i64 %993, i64* %PC
  %994 = add i64 4, %991
  store i64 %994, i64* %RCX, align 8, !tbaa !2428
  %995 = icmp ult i64 %994, %991
  %996 = icmp ult i64 %994, 4
  %997 = or i1 %995, %996
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %998, i8* %999, align 1, !tbaa !2432
  %1000 = trunc i64 %994 to i32
  %1001 = and i32 %1000, 255
  %1002 = call i32 @llvm.ctpop.i32(i32 %1001) #16
  %1003 = trunc i32 %1002 to i8
  %1004 = and i8 %1003, 1
  %1005 = xor i8 %1004, 1
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1005, i8* %1006, align 1, !tbaa !2446
  %1007 = xor i64 4, %991
  %1008 = xor i64 %1007, %994
  %1009 = lshr i64 %1008, 4
  %1010 = trunc i64 %1009 to i8
  %1011 = and i8 %1010, 1
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1011, i8* %1012, align 1, !tbaa !2447
  %1013 = icmp eq i64 %994, 0
  %1014 = zext i1 %1013 to i8
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1014, i8* %1015, align 1, !tbaa !2448
  %1016 = lshr i64 %994, 63
  %1017 = trunc i64 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1017, i8* %1018, align 1, !tbaa !2449
  %1019 = lshr i64 %991, 63
  %1020 = xor i64 %1016, %1019
  %1021 = add nuw nsw i64 %1020, %1016
  %1022 = icmp eq i64 %1021, 2
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1023, i8* %1024, align 1, !tbaa !2450
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 8
  %1027 = load i64, i64* %RCX
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 4
  store i64 %1029, i64* %PC
  %1030 = inttoptr i64 %1026 to i64*
  store i64 %1027, i64* %1030
  %1031 = load i64, i64* %RAX
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 3
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  %1035 = load i32, i32* %1034
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = load i64, i64* %RAX
  %1038 = mul i64 %1037, 8
  %1039 = add i64 %1038, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 8
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i64*
  %1043 = load i64, i64* %1042
  store i64 %1043, i64* %RAX, align 8, !tbaa !2428
  %1044 = load i64, i64* %RBP
  %1045 = sub i64 %1044, 40
  %1046 = load i64, i64* %RAX
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1045 to i64*
  store i64 %1046, i64* %1049
  %1050 = load i64, i64* %PC
  %1051 = sub i64 %1050, 1251
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 5
  store i64 %1053, i64* %PC
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1051, i64* %1054, align 8, !tbaa !2428
  br label %block_400566

block_4006d1:                                     ; preds = %block_40054b, %block_4006ca
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.15, %block_4006ca ], [ %MEMORY.22, %block_40054b ]
  %1055 = load i64, i64* %RBP
  %1056 = sub i64 %1055, 12
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 3
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1056 to i32*
  %1060 = load i32, i32* %1059
  %1061 = zext i32 %1060 to i64
  store i64 %1061, i64* %RDI, align 8, !tbaa !2428
  %1062 = load i64, i64* %PC
  %1063 = sub i64 %1062, 484
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 5
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 5
  store i64 %1067, i64* %PC
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1069 = load i64, i64* %1068, align 8, !tbaa !2428
  %1070 = add i64 %1069, -8
  %1071 = inttoptr i64 %1070 to i64*
  store i64 %1065, i64* %1071
  store i64 %1070, i64* %1068, align 8, !tbaa !2428
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1063, i64* %1072, align 8, !tbaa !2428
  %1073 = load i64, i64* %PC
  %1074 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1073, %struct.Memory* %MEMORY.10)
  %1075 = load i64, i64* %RBP
  %1076 = sub i64 %1075, 8
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 4
  store i64 %1078, i64* %PC
  %1079 = inttoptr i64 %1076 to i64*
  %1080 = load i64, i64* %1079
  store i64 %1080, i64* %RAX, align 8, !tbaa !2428
  %1081 = load i64, i64* %RAX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  store i64 %1081, i64* %RCX, align 8, !tbaa !2428
  %1084 = load i64, i64* %RCX
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = add i64 4, %1084
  store i64 %1087, i64* %RCX, align 8, !tbaa !2428
  %1088 = icmp ult i64 %1087, %1084
  %1089 = icmp ult i64 %1087, 4
  %1090 = or i1 %1088, %1089
  %1091 = zext i1 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1091, i8* %1092, align 1, !tbaa !2432
  %1093 = trunc i64 %1087 to i32
  %1094 = and i32 %1093, 255
  %1095 = call i32 @llvm.ctpop.i32(i32 %1094) #16
  %1096 = trunc i32 %1095 to i8
  %1097 = and i8 %1096, 1
  %1098 = xor i8 %1097, 1
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1098, i8* %1099, align 1, !tbaa !2446
  %1100 = xor i64 4, %1084
  %1101 = xor i64 %1100, %1087
  %1102 = lshr i64 %1101, 4
  %1103 = trunc i64 %1102 to i8
  %1104 = and i8 %1103, 1
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1104, i8* %1105, align 1, !tbaa !2447
  %1106 = icmp eq i64 %1087, 0
  %1107 = zext i1 %1106 to i8
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1107, i8* %1108, align 1, !tbaa !2448
  %1109 = lshr i64 %1087, 63
  %1110 = trunc i64 %1109 to i8
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1110, i8* %1111, align 1, !tbaa !2449
  %1112 = lshr i64 %1084, 63
  %1113 = xor i64 %1109, %1112
  %1114 = add nuw nsw i64 %1113, %1109
  %1115 = icmp eq i64 %1114, 2
  %1116 = zext i1 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1116, i8* %1117, align 1, !tbaa !2450
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 8
  %1120 = load i64, i64* %RCX
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 4
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1119 to i64*
  store i64 %1120, i64* %1123
  %1124 = load i64, i64* %RAX
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 3
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1124 to i32*
  %1128 = load i32, i32* %1127
  %1129 = sext i32 %1128 to i64
  store i64 %1129, i64* %RAX, align 8, !tbaa !2428
  %1130 = load i64, i64* %RAX
  %1131 = mul i64 %1130, 8
  %1132 = add i64 %1131, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1133 = load i64, i64* %PC
  %1134 = add i64 %1133, 8
  store i64 %1134, i64* %PC
  %1135 = inttoptr i64 %1132 to i64*
  %1136 = load i64, i64* %1135
  store i64 %1136, i64* %RAX, align 8, !tbaa !2428
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 40
  %1139 = load i64, i64* %RAX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 4
  store i64 %1141, i64* %PC
  %1142 = inttoptr i64 %1138 to i64*
  store i64 %1139, i64* %1142
  %1143 = load i64, i64* %PC
  %1144 = sub i64 %1143, 401
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 5
  store i64 %1146, i64* %PC
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1144, i64* %1147, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1148 = load i64, i64* %RBP
  %1149 = sub i64 %1148, 12
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 7
  store i64 %1151, i64* %PC
  %1152 = inttoptr i64 %1149 to i32*
  store i32 26, i32* %1152
  br label %block_400a55

block_4007cb:                                     ; preds = %block_40054b, %block_4007c4
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.15, %block_4007c4 ], [ %MEMORY.22, %block_40054b ]
  %1153 = load i64, i64* %RBP
  %1154 = sub i64 %1153, 12
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = inttoptr i64 %1154 to i32*
  %1158 = load i32, i32* %1157
  %1159 = zext i32 %1158 to i64
  store i64 %1159, i64* %RDI, align 8, !tbaa !2428
  %1160 = load i64, i64* %PC
  %1161 = sub i64 %1160, 734
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 5
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 5
  store i64 %1165, i64* %PC
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1167 = load i64, i64* %1166, align 8, !tbaa !2428
  %1168 = add i64 %1167, -8
  %1169 = inttoptr i64 %1168 to i64*
  store i64 %1163, i64* %1169
  store i64 %1168, i64* %1166, align 8, !tbaa !2428
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1161, i64* %1170, align 8, !tbaa !2428
  %1171 = load i64, i64* %PC
  %1172 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1171, %struct.Memory* %MEMORY.11)
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 8
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 4
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to i64*
  %1178 = load i64, i64* %1177
  store i64 %1178, i64* %RAX, align 8, !tbaa !2428
  %1179 = load i64, i64* %RAX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 3
  store i64 %1181, i64* %PC
  store i64 %1179, i64* %RCX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC
  %1185 = add i64 4, %1182
  store i64 %1185, i64* %RCX, align 8, !tbaa !2428
  %1186 = icmp ult i64 %1185, %1182
  %1187 = icmp ult i64 %1185, 4
  %1188 = or i1 %1186, %1187
  %1189 = zext i1 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1189, i8* %1190, align 1, !tbaa !2432
  %1191 = trunc i64 %1185 to i32
  %1192 = and i32 %1191, 255
  %1193 = call i32 @llvm.ctpop.i32(i32 %1192) #16
  %1194 = trunc i32 %1193 to i8
  %1195 = and i8 %1194, 1
  %1196 = xor i8 %1195, 1
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1196, i8* %1197, align 1, !tbaa !2446
  %1198 = xor i64 4, %1182
  %1199 = xor i64 %1198, %1185
  %1200 = lshr i64 %1199, 4
  %1201 = trunc i64 %1200 to i8
  %1202 = and i8 %1201, 1
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1202, i8* %1203, align 1, !tbaa !2447
  %1204 = icmp eq i64 %1185, 0
  %1205 = zext i1 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1205, i8* %1206, align 1, !tbaa !2448
  %1207 = lshr i64 %1185, 63
  %1208 = trunc i64 %1207 to i8
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1208, i8* %1209, align 1, !tbaa !2449
  %1210 = lshr i64 %1182, 63
  %1211 = xor i64 %1207, %1210
  %1212 = add nuw nsw i64 %1211, %1207
  %1213 = icmp eq i64 %1212, 2
  %1214 = zext i1 %1213 to i8
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1214, i8* %1215, align 1, !tbaa !2450
  %1216 = load i64, i64* %RBP
  %1217 = sub i64 %1216, 8
  %1218 = load i64, i64* %RCX
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 4
  store i64 %1220, i64* %PC
  %1221 = inttoptr i64 %1217 to i64*
  store i64 %1218, i64* %1221
  %1222 = load i64, i64* %RAX
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1222 to i32*
  %1226 = load i32, i32* %1225
  %1227 = sext i32 %1226 to i64
  store i64 %1227, i64* %RAX, align 8, !tbaa !2428
  %1228 = load i64, i64* %RAX
  %1229 = mul i64 %1228, 8
  %1230 = add i64 %1229, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 8
  store i64 %1232, i64* %PC
  %1233 = inttoptr i64 %1230 to i64*
  %1234 = load i64, i64* %1233
  store i64 %1234, i64* %RAX, align 8, !tbaa !2428
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 40
  %1237 = load i64, i64* %RAX
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 4
  store i64 %1239, i64* %PC
  %1240 = inttoptr i64 %1236 to i64*
  store i64 %1237, i64* %1240
  %1241 = load i64, i64* %PC
  %1242 = sub i64 %1241, 651
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 5
  store i64 %1244, i64* %PC
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1242, i64* %1245, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 12
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 7
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i32*
  store i32 8, i32* %1250
  br label %block_4006d1

block_400b48:                                     ; preds = %block_400566
  %1251 = load i64, i64* %RBP
  %1252 = sub i64 %1251, 12
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 7
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1252 to i32*
  store i32 31, i32* %1255
  br label %block_400b4f

block_4008c5:                                     ; preds = %block_4008be, %block_40054b
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.15, %block_4008be ], [ %MEMORY.22, %block_40054b ]
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 12
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 3
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i32*
  %1261 = load i32, i32* %1260
  %1262 = zext i32 %1261 to i64
  store i64 %1262, i64* %RDI, align 8, !tbaa !2428
  %1263 = load i64, i64* %PC
  %1264 = sub i64 %1263, 984
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 5
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 5
  store i64 %1268, i64* %PC
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1270 = load i64, i64* %1269, align 8, !tbaa !2428
  %1271 = add i64 %1270, -8
  %1272 = inttoptr i64 %1271 to i64*
  store i64 %1266, i64* %1272
  store i64 %1271, i64* %1269, align 8, !tbaa !2428
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1264, i64* %1273, align 8, !tbaa !2428
  %1274 = load i64, i64* %PC
  %1275 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1274, %struct.Memory* %MEMORY.12)
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 8
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = load i64, i64* %RAX
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 3
  store i64 %1284, i64* %PC
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RCX
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 4
  store i64 %1287, i64* %PC
  %1288 = add i64 4, %1285
  store i64 %1288, i64* %RCX, align 8, !tbaa !2428
  %1289 = icmp ult i64 %1288, %1285
  %1290 = icmp ult i64 %1288, 4
  %1291 = or i1 %1289, %1290
  %1292 = zext i1 %1291 to i8
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1292, i8* %1293, align 1, !tbaa !2432
  %1294 = trunc i64 %1288 to i32
  %1295 = and i32 %1294, 255
  %1296 = call i32 @llvm.ctpop.i32(i32 %1295) #16
  %1297 = trunc i32 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = xor i8 %1298, 1
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1299, i8* %1300, align 1, !tbaa !2446
  %1301 = xor i64 4, %1285
  %1302 = xor i64 %1301, %1288
  %1303 = lshr i64 %1302, 4
  %1304 = trunc i64 %1303 to i8
  %1305 = and i8 %1304, 1
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1305, i8* %1306, align 1, !tbaa !2447
  %1307 = icmp eq i64 %1288, 0
  %1308 = zext i1 %1307 to i8
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1308, i8* %1309, align 1, !tbaa !2448
  %1310 = lshr i64 %1288, 63
  %1311 = trunc i64 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1311, i8* %1312, align 1, !tbaa !2449
  %1313 = lshr i64 %1285, 63
  %1314 = xor i64 %1310, %1313
  %1315 = add nuw nsw i64 %1314, %1310
  %1316 = icmp eq i64 %1315, 2
  %1317 = zext i1 %1316 to i8
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1317, i8* %1318, align 1, !tbaa !2450
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 8
  %1321 = load i64, i64* %RCX
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 4
  store i64 %1323, i64* %PC
  %1324 = inttoptr i64 %1320 to i64*
  store i64 %1321, i64* %1324
  %1325 = load i64, i64* %RAX
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328
  %1330 = sext i32 %1329 to i64
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1331 = load i64, i64* %RAX
  %1332 = mul i64 %1331, 8
  %1333 = add i64 %1332, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 8
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1333 to i64*
  %1337 = load i64, i64* %1336
  store i64 %1337, i64* %RAX, align 8, !tbaa !2428
  %1338 = load i64, i64* %RBP
  %1339 = sub i64 %1338, 40
  %1340 = load i64, i64* %RAX
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 4
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1339 to i64*
  store i64 %1340, i64* %1343
  %1344 = load i64, i64* %PC
  %1345 = sub i64 %1344, 901
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 5
  store i64 %1347, i64* %PC
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1345, i64* %1348, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 12
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 7
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to i32*
  store i32 13, i32* %1353
  br label %block_4007cb

block_40054b:                                     ; preds = %block_400523
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 24
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 4
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i64*
  %1359 = load i64, i64* %1358
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  %1360 = load i64, i64* %RAX
  %1361 = mul i64 %1360, 8
  %1362 = add i64 %1361, add (i64 ptrtoint (%seg_400ce0__rodata_type* @seg_400ce0__rodata to i64), i64 8)
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 8
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1362 to i64*
  %1366 = load i64, i64* %1365
  store i64 %1366, i64* %RCX, align 8, !tbaa !2428
  %1367 = load i64, i64* %RCX
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 2
  store i64 %1369, i64* %PC
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1367, i64* %1370, align 8, !tbaa !2428
  %1371 = load i64, i64* %PC
  switch i64 %1371, label %3334 [
    i64 4196699, label %block_40095b
    i64 4195799, label %block_4005d7
    i64 4196949, label %block_400a55
    i64 4195680, label %block_400560
    i64 4196049, label %block_4006d1
    i64 4197199, label %block_400b4f
    i64 4196299, label %block_4007cb
    i64 4196549, label %block_4008c5
    i64 4196799, label %block_4009bf
    i64 4196449, label %block_400861
    i64 4196199, label %block_400767
    i64 4195999, label %block_40069f
    i64 4197149, label %block_400b1d
    i64 4197099, label %block_400aeb
    i64 4195949, label %block_40066d
    i64 4196599, label %block_4008f7
    i64 4196899, label %block_400a23
    i64 4195749, label %block_4005a5
    i64 4196349, label %block_4007fd
    i64 4195699, label %block_400573
    i64 4196849, label %block_4009f1
    i64 4196249, label %block_400799
    i64 4196999, label %block_400a87
    i64 4195849, label %block_400609
    i64 4196649, label %block_400929
    i64 4196099, label %block_400703
    i64 4196749, label %block_40098d
    i64 4196499, label %block_400893
    i64 4196399, label %block_40082f
    i64 4196149, label %block_400735
    i64 4197049, label %block_400ab9
    i64 4195899, label %block_40063b
  ]

block_400b7a:                                     ; preds = %block_400523
  %1372 = load i64, i64* %PC
  %1373 = sub i64 %1372, 1623
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC
  %1376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1373, i64* %1376, align 8, !tbaa !2428
  br label %block_400523

block_400560:                                     ; preds = %block_400559, %block_40054b
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.15, %block_400559 ], [ %MEMORY.22, %block_40054b ]
  %1377 = load i64, i64* %RSP
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 4
  store i64 %1379, i64* %PC
  %1380 = add i64 48, %1377
  store i64 %1380, i64* %RSP, align 8, !tbaa !2428
  %1381 = icmp ult i64 %1380, %1377
  %1382 = icmp ult i64 %1380, 48
  %1383 = or i1 %1381, %1382
  %1384 = zext i1 %1383 to i8
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1384, i8* %1385, align 1, !tbaa !2432
  %1386 = trunc i64 %1380 to i32
  %1387 = and i32 %1386, 255
  %1388 = call i32 @llvm.ctpop.i32(i32 %1387) #16
  %1389 = trunc i32 %1388 to i8
  %1390 = and i8 %1389, 1
  %1391 = xor i8 %1390, 1
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1391, i8* %1392, align 1, !tbaa !2446
  %1393 = xor i64 48, %1377
  %1394 = xor i64 %1393, %1380
  %1395 = lshr i64 %1394, 4
  %1396 = trunc i64 %1395 to i8
  %1397 = and i8 %1396, 1
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1397, i8* %1398, align 1, !tbaa !2447
  %1399 = icmp eq i64 %1380, 0
  %1400 = zext i1 %1399 to i8
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1400, i8* %1401, align 1, !tbaa !2448
  %1402 = lshr i64 %1380, 63
  %1403 = trunc i64 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1403, i8* %1404, align 1, !tbaa !2449
  %1405 = lshr i64 %1377, 63
  %1406 = xor i64 %1402, %1405
  %1407 = add nuw nsw i64 %1406, %1402
  %1408 = icmp eq i64 %1407, 2
  %1409 = zext i1 %1408 to i8
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1409, i8* %1410, align 1, !tbaa !2450
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 1
  store i64 %1412, i64* %PC
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1414 = load i64, i64* %1413, align 8, !tbaa !2428
  %1415 = add i64 %1414, 8
  %1416 = inttoptr i64 %1414 to i64*
  %1417 = load i64, i64* %1416
  store i64 %1417, i64* %RBP, align 8, !tbaa !2428
  store i64 %1415, i64* %1413, align 8, !tbaa !2428
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 1
  store i64 %1419, i64* %PC
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1422 = load i64, i64* %1421, align 8, !tbaa !2428
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  store i64 %1424, i64* %1420, align 8, !tbaa !2428
  %1425 = add i64 %1422, 8
  store i64 %1425, i64* %1421, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.13

block_4009bf:                                     ; preds = %block_4009b8, %block_40054b
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.15, %block_4009b8 ], [ %MEMORY.22, %block_40054b ]
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 12
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  %1430 = inttoptr i64 %1427 to i32*
  %1431 = load i32, i32* %1430
  %1432 = zext i32 %1431 to i64
  store i64 %1432, i64* %RDI, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = sub i64 %1433, 1234
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 5
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 5
  store i64 %1438, i64* %PC
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1440 = load i64, i64* %1439, align 8, !tbaa !2428
  %1441 = add i64 %1440, -8
  %1442 = inttoptr i64 %1441 to i64*
  store i64 %1436, i64* %1442
  store i64 %1441, i64* %1439, align 8, !tbaa !2428
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1434, i64* %1443, align 8, !tbaa !2428
  %1444 = load i64, i64* %PC
  %1445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1444, %struct.Memory* %MEMORY.14)
  %1446 = load i64, i64* %RBP
  %1447 = sub i64 %1446, 8
  %1448 = load i64, i64* %PC
  %1449 = add i64 %1448, 4
  store i64 %1449, i64* %PC
  %1450 = inttoptr i64 %1447 to i64*
  %1451 = load i64, i64* %1450
  store i64 %1451, i64* %RAX, align 8, !tbaa !2428
  %1452 = load i64, i64* %RAX
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 3
  store i64 %1454, i64* %PC
  store i64 %1452, i64* %RCX, align 8, !tbaa !2428
  %1455 = load i64, i64* %RCX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 4
  store i64 %1457, i64* %PC
  %1458 = add i64 4, %1455
  store i64 %1458, i64* %RCX, align 8, !tbaa !2428
  %1459 = icmp ult i64 %1458, %1455
  %1460 = icmp ult i64 %1458, 4
  %1461 = or i1 %1459, %1460
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1462, i8* %1463, align 1, !tbaa !2432
  %1464 = trunc i64 %1458 to i32
  %1465 = and i32 %1464, 255
  %1466 = call i32 @llvm.ctpop.i32(i32 %1465) #16
  %1467 = trunc i32 %1466 to i8
  %1468 = and i8 %1467, 1
  %1469 = xor i8 %1468, 1
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1469, i8* %1470, align 1, !tbaa !2446
  %1471 = xor i64 4, %1455
  %1472 = xor i64 %1471, %1458
  %1473 = lshr i64 %1472, 4
  %1474 = trunc i64 %1473 to i8
  %1475 = and i8 %1474, 1
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1475, i8* %1476, align 1, !tbaa !2447
  %1477 = icmp eq i64 %1458, 0
  %1478 = zext i1 %1477 to i8
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1478, i8* %1479, align 1, !tbaa !2448
  %1480 = lshr i64 %1458, 63
  %1481 = trunc i64 %1480 to i8
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1481, i8* %1482, align 1, !tbaa !2449
  %1483 = lshr i64 %1455, 63
  %1484 = xor i64 %1480, %1483
  %1485 = add nuw nsw i64 %1484, %1480
  %1486 = icmp eq i64 %1485, 2
  %1487 = zext i1 %1486 to i8
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1487, i8* %1488, align 1, !tbaa !2450
  %1489 = load i64, i64* %RBP
  %1490 = sub i64 %1489, 8
  %1491 = load i64, i64* %RCX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 4
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1490 to i64*
  store i64 %1491, i64* %1494
  %1495 = load i64, i64* %RAX
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 3
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i32*
  %1499 = load i32, i32* %1498
  %1500 = sext i32 %1499 to i64
  store i64 %1500, i64* %RAX, align 8, !tbaa !2428
  %1501 = load i64, i64* %RAX
  %1502 = mul i64 %1501, 8
  %1503 = add i64 %1502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 8
  store i64 %1505, i64* %PC
  %1506 = inttoptr i64 %1503 to i64*
  %1507 = load i64, i64* %1506
  store i64 %1507, i64* %RAX, align 8, !tbaa !2428
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 40
  %1510 = load i64, i64* %RAX
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 4
  store i64 %1512, i64* %PC
  %1513 = inttoptr i64 %1509 to i64*
  store i64 %1510, i64* %1513
  %1514 = load i64, i64* %PC
  %1515 = sub i64 %1514, 1151
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 5
  store i64 %1517, i64* %PC
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1515, i64* %1518, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400ab9, %block_400703, %block_400a87, %block_400609, %block_40098d, %block_400a55, %block_400893, %block_400b4f, %block_400799, %block_400b1d, %block_40069f, %block_4005a5, %block_400929, %block_40082f, %block_400aeb, %block_400735, %block_40063b, %block_4009bf, %block_4008c5, %block_4007cb, %block_4006d1, %block_400a23, %block_4005d7, %block_40095b, %block_400861, %block_400767, %block_40066d, %block_4009f1, %block_400573, %block_4008f7, %block_4007fd
  %MEMORY.15 = phi %struct.Memory* [ %1549, %block_40063b ], [ %981, %block_400a23 ], [ %1941, %block_400929 ], [ %1275, %block_4008c5 ], [ %1843, %block_40082f ], [ %1647, %block_400735 ], [ %3250, %block_400ab9 ], [ %1445, %block_4009bf ], [ %1172, %block_4007cb ], [ %197, %block_4008f7 ], [ %2559, %block_400b4f ], [ %1074, %block_4006d1 ], [ %99, %block_4007fd ], [ %388, %block_4009f1 ], [ %295, %block_400573 ], [ %3157, %block_400703 ], [ %486, %block_40066d ], [ %1740, %block_400aeb ], [ %584, %block_400767 ], [ %682, %block_400861 ], [ %780, %block_40095b ], [ %2760, %block_400a55 ], [ %2266, %block_40069f ], [ %2364, %block_400b1d ], [ %2466, %block_400799 ], [ %2039, %block_4005a5 ], [ %2662, %block_400893 ], [ %878, %block_4005d7 ], [ %2858, %block_40098d ], [ %2956, %block_400609 ], [ %3054, %block_400a87 ]
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 40
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to i64*
  %1524 = load i64, i64* %1523
  store i64 %1524, i64* %RAX, align 8, !tbaa !2428
  %1525 = load i64, i64* %RAX
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 2
  store i64 %1527, i64* %PC
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1525, i64* %1528, align 8, !tbaa !2428
  %1529 = load i64, i64* %PC
  switch i64 %1529, label %3337 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4195742, label %block_40059e
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196592, label %block_4008f0
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4197247, label %block_400b7f
    i64 4196542, label %block_4008be
    i64 4196642, label %block_400922
    i64 4196892, label %block_400a1c
  ]

block_40063b:                                     ; preds = %block_400634, %block_40054b
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.22, %block_40054b ], [ %MEMORY.15, %block_400634 ]
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 12
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 3
  store i64 %1533, i64* %PC
  %1534 = inttoptr i64 %1531 to i32*
  %1535 = load i32, i32* %1534
  %1536 = zext i32 %1535 to i64
  store i64 %1536, i64* %RDI, align 8, !tbaa !2428
  %1537 = load i64, i64* %PC
  %1538 = sub i64 %1537, 334
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 5
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 5
  store i64 %1542, i64* %PC
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1544 = load i64, i64* %1543, align 8, !tbaa !2428
  %1545 = add i64 %1544, -8
  %1546 = inttoptr i64 %1545 to i64*
  store i64 %1540, i64* %1546
  store i64 %1545, i64* %1543, align 8, !tbaa !2428
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1538, i64* %1547, align 8, !tbaa !2428
  %1548 = load i64, i64* %PC
  %1549 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1548, %struct.Memory* %MEMORY.16)
  %1550 = load i64, i64* %RBP
  %1551 = sub i64 %1550, 8
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 4
  store i64 %1553, i64* %PC
  %1554 = inttoptr i64 %1551 to i64*
  %1555 = load i64, i64* %1554
  store i64 %1555, i64* %RAX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RAX
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 3
  store i64 %1558, i64* %PC
  store i64 %1556, i64* %RCX, align 8, !tbaa !2428
  %1559 = load i64, i64* %RCX
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 4
  store i64 %1561, i64* %PC
  %1562 = add i64 4, %1559
  store i64 %1562, i64* %RCX, align 8, !tbaa !2428
  %1563 = icmp ult i64 %1562, %1559
  %1564 = icmp ult i64 %1562, 4
  %1565 = or i1 %1563, %1564
  %1566 = zext i1 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1566, i8* %1567, align 1, !tbaa !2432
  %1568 = trunc i64 %1562 to i32
  %1569 = and i32 %1568, 255
  %1570 = call i32 @llvm.ctpop.i32(i32 %1569) #16
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1573, i8* %1574, align 1, !tbaa !2446
  %1575 = xor i64 4, %1559
  %1576 = xor i64 %1575, %1562
  %1577 = lshr i64 %1576, 4
  %1578 = trunc i64 %1577 to i8
  %1579 = and i8 %1578, 1
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1579, i8* %1580, align 1, !tbaa !2447
  %1581 = icmp eq i64 %1562, 0
  %1582 = zext i1 %1581 to i8
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1582, i8* %1583, align 1, !tbaa !2448
  %1584 = lshr i64 %1562, 63
  %1585 = trunc i64 %1584 to i8
  %1586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1585, i8* %1586, align 1, !tbaa !2449
  %1587 = lshr i64 %1559, 63
  %1588 = xor i64 %1584, %1587
  %1589 = add nuw nsw i64 %1588, %1584
  %1590 = icmp eq i64 %1589, 2
  %1591 = zext i1 %1590 to i8
  %1592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1591, i8* %1592, align 1, !tbaa !2450
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 8
  %1595 = load i64, i64* %RCX
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598
  %1599 = load i64, i64* %RAX
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 3
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1599 to i32*
  %1603 = load i32, i32* %1602
  %1604 = sext i32 %1603 to i64
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = load i64, i64* %RAX
  %1606 = mul i64 %1605, 8
  %1607 = add i64 %1606, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 8
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i64*
  %1611 = load i64, i64* %1610
  store i64 %1611, i64* %RAX, align 8, !tbaa !2428
  %1612 = load i64, i64* %RBP
  %1613 = sub i64 %1612, 40
  %1614 = load i64, i64* %RAX
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 4
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1613 to i64*
  store i64 %1614, i64* %1617
  %1618 = load i64, i64* %PC
  %1619 = sub i64 %1618, 251
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1619, i64* %1622, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1623 = load i64, i64* %RBP
  %1624 = sub i64 %1623, 12
  %1625 = load i64, i64* %PC
  %1626 = add i64 %1625, 7
  store i64 %1626, i64* %PC
  %1627 = inttoptr i64 %1624 to i32*
  store i32 23, i32* %1627
  br label %block_4009bf

block_400735:                                     ; preds = %block_40072e, %block_40054b
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.15, %block_40072e ], [ %MEMORY.22, %block_40054b ]
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 12
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 3
  store i64 %1631, i64* %PC
  %1632 = inttoptr i64 %1629 to i32*
  %1633 = load i32, i32* %1632
  %1634 = zext i32 %1633 to i64
  store i64 %1634, i64* %RDI, align 8, !tbaa !2428
  %1635 = load i64, i64* %PC
  %1636 = sub i64 %1635, 584
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 5
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 5
  store i64 %1640, i64* %PC
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1642 = load i64, i64* %1641, align 8, !tbaa !2428
  %1643 = add i64 %1642, -8
  %1644 = inttoptr i64 %1643 to i64*
  store i64 %1638, i64* %1644
  store i64 %1643, i64* %1641, align 8, !tbaa !2428
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1636, i64* %1645, align 8, !tbaa !2428
  %1646 = load i64, i64* %PC
  %1647 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1646, %struct.Memory* %MEMORY.17)
  %1648 = load i64, i64* %RBP
  %1649 = sub i64 %1648, 8
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 4
  store i64 %1651, i64* %PC
  %1652 = inttoptr i64 %1649 to i64*
  %1653 = load i64, i64* %1652
  store i64 %1653, i64* %RAX, align 8, !tbaa !2428
  %1654 = load i64, i64* %RAX
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 3
  store i64 %1656, i64* %PC
  store i64 %1654, i64* %RCX, align 8, !tbaa !2428
  %1657 = load i64, i64* %RCX
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 4
  store i64 %1659, i64* %PC
  %1660 = add i64 4, %1657
  store i64 %1660, i64* %RCX, align 8, !tbaa !2428
  %1661 = icmp ult i64 %1660, %1657
  %1662 = icmp ult i64 %1660, 4
  %1663 = or i1 %1661, %1662
  %1664 = zext i1 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1664, i8* %1665, align 1, !tbaa !2432
  %1666 = trunc i64 %1660 to i32
  %1667 = and i32 %1666, 255
  %1668 = call i32 @llvm.ctpop.i32(i32 %1667) #16
  %1669 = trunc i32 %1668 to i8
  %1670 = and i8 %1669, 1
  %1671 = xor i8 %1670, 1
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1671, i8* %1672, align 1, !tbaa !2446
  %1673 = xor i64 4, %1657
  %1674 = xor i64 %1673, %1660
  %1675 = lshr i64 %1674, 4
  %1676 = trunc i64 %1675 to i8
  %1677 = and i8 %1676, 1
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1677, i8* %1678, align 1, !tbaa !2447
  %1679 = icmp eq i64 %1660, 0
  %1680 = zext i1 %1679 to i8
  %1681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1680, i8* %1681, align 1, !tbaa !2448
  %1682 = lshr i64 %1660, 63
  %1683 = trunc i64 %1682 to i8
  %1684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1683, i8* %1684, align 1, !tbaa !2449
  %1685 = lshr i64 %1657, 63
  %1686 = xor i64 %1682, %1685
  %1687 = add nuw nsw i64 %1686, %1682
  %1688 = icmp eq i64 %1687, 2
  %1689 = zext i1 %1688 to i8
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1689, i8* %1690, align 1, !tbaa !2450
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 8
  %1693 = load i64, i64* %RCX
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 4
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1692 to i64*
  store i64 %1693, i64* %1696
  %1697 = load i64, i64* %RAX
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 3
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1697 to i32*
  %1701 = load i32, i32* %1700
  %1702 = sext i32 %1701 to i64
  store i64 %1702, i64* %RAX, align 8, !tbaa !2428
  %1703 = load i64, i64* %RAX
  %1704 = mul i64 %1703, 8
  %1705 = add i64 %1704, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 8
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i64*
  %1709 = load i64, i64* %1708
  store i64 %1709, i64* %RAX, align 8, !tbaa !2428
  %1710 = load i64, i64* %RBP
  %1711 = sub i64 %1710, 40
  %1712 = load i64, i64* %RAX
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1711 to i64*
  store i64 %1712, i64* %1715
  %1716 = load i64, i64* %PC
  %1717 = sub i64 %1716, 501
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  store i64 %1719, i64* %PC
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1717, i64* %1720, align 8, !tbaa !2428
  br label %block_400566

block_400aeb:                                     ; preds = %block_40054b, %block_400ae4
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.15, %block_400ae4 ], [ %MEMORY.22, %block_40054b ]
  %1721 = load i64, i64* %RBP
  %1722 = sub i64 %1721, 12
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 3
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1722 to i32*
  %1726 = load i32, i32* %1725
  %1727 = zext i32 %1726 to i64
  store i64 %1727, i64* %RDI, align 8, !tbaa !2428
  %1728 = load i64, i64* %PC
  %1729 = sub i64 %1728, 1534
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 5
  store i64 %1733, i64* %PC
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1735 = load i64, i64* %1734, align 8, !tbaa !2428
  %1736 = add i64 %1735, -8
  %1737 = inttoptr i64 %1736 to i64*
  store i64 %1731, i64* %1737
  store i64 %1736, i64* %1734, align 8, !tbaa !2428
  %1738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1729, i64* %1738, align 8, !tbaa !2428
  %1739 = load i64, i64* %PC
  %1740 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1739, %struct.Memory* %MEMORY.18)
  %1741 = load i64, i64* %RBP
  %1742 = sub i64 %1741, 8
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 4
  store i64 %1744, i64* %PC
  %1745 = inttoptr i64 %1742 to i64*
  %1746 = load i64, i64* %1745
  store i64 %1746, i64* %RAX, align 8, !tbaa !2428
  %1747 = load i64, i64* %RAX
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 3
  store i64 %1749, i64* %PC
  store i64 %1747, i64* %RCX, align 8, !tbaa !2428
  %1750 = load i64, i64* %RCX
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 4
  store i64 %1752, i64* %PC
  %1753 = add i64 4, %1750
  store i64 %1753, i64* %RCX, align 8, !tbaa !2428
  %1754 = icmp ult i64 %1753, %1750
  %1755 = icmp ult i64 %1753, 4
  %1756 = or i1 %1754, %1755
  %1757 = zext i1 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1757, i8* %1758, align 1, !tbaa !2432
  %1759 = trunc i64 %1753 to i32
  %1760 = and i32 %1759, 255
  %1761 = call i32 @llvm.ctpop.i32(i32 %1760) #16
  %1762 = trunc i32 %1761 to i8
  %1763 = and i8 %1762, 1
  %1764 = xor i8 %1763, 1
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1764, i8* %1765, align 1, !tbaa !2446
  %1766 = xor i64 4, %1750
  %1767 = xor i64 %1766, %1753
  %1768 = lshr i64 %1767, 4
  %1769 = trunc i64 %1768 to i8
  %1770 = and i8 %1769, 1
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1770, i8* %1771, align 1, !tbaa !2447
  %1772 = icmp eq i64 %1753, 0
  %1773 = zext i1 %1772 to i8
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1773, i8* %1774, align 1, !tbaa !2448
  %1775 = lshr i64 %1753, 63
  %1776 = trunc i64 %1775 to i8
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1776, i8* %1777, align 1, !tbaa !2449
  %1778 = lshr i64 %1750, 63
  %1779 = xor i64 %1775, %1778
  %1780 = add nuw nsw i64 %1779, %1775
  %1781 = icmp eq i64 %1780, 2
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1782, i8* %1783, align 1, !tbaa !2450
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 8
  %1786 = load i64, i64* %RCX
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 4
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1785 to i64*
  store i64 %1786, i64* %1789
  %1790 = load i64, i64* %RAX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 3
  store i64 %1792, i64* %PC
  %1793 = inttoptr i64 %1790 to i32*
  %1794 = load i32, i32* %1793
  %1795 = sext i32 %1794 to i64
  store i64 %1795, i64* %RAX, align 8, !tbaa !2428
  %1796 = load i64, i64* %RAX
  %1797 = mul i64 %1796, 8
  %1798 = add i64 %1797, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 8
  store i64 %1800, i64* %PC
  %1801 = inttoptr i64 %1798 to i64*
  %1802 = load i64, i64* %1801
  store i64 %1802, i64* %RAX, align 8, !tbaa !2428
  %1803 = load i64, i64* %RBP
  %1804 = sub i64 %1803, 40
  %1805 = load i64, i64* %RAX
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 4
  store i64 %1807, i64* %PC
  %1808 = inttoptr i64 %1804 to i64*
  store i64 %1805, i64* %1808
  %1809 = load i64, i64* %PC
  %1810 = sub i64 %1809, 1451
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 5
  store i64 %1812, i64* %PC
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1810, i64* %1813, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1814 = load i64, i64* %RBP
  %1815 = sub i64 %1814, 12
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 7
  store i64 %1817, i64* %PC
  %1818 = inttoptr i64 %1815 to i32*
  store i32 5, i32* %1818
  br label %block_40063b

block_400ab2:                                     ; preds = %block_400566
  %1819 = load i64, i64* %RBP
  %1820 = sub i64 %1819, 12
  %1821 = load i64, i64* %PC
  %1822 = add i64 %1821, 7
  store i64 %1822, i64* %PC
  %1823 = inttoptr i64 %1820 to i32*
  store i32 28, i32* %1823
  br label %block_400ab9

block_40082f:                                     ; preds = %block_400828, %block_40054b
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.15, %block_400828 ], [ %MEMORY.22, %block_40054b ]
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 12
  %1826 = load i64, i64* %PC
  %1827 = add i64 %1826, 3
  store i64 %1827, i64* %PC
  %1828 = inttoptr i64 %1825 to i32*
  %1829 = load i32, i32* %1828
  %1830 = zext i32 %1829 to i64
  store i64 %1830, i64* %RDI, align 8, !tbaa !2428
  %1831 = load i64, i64* %PC
  %1832 = sub i64 %1831, 834
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 5
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 5
  store i64 %1836, i64* %PC
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1838 = load i64, i64* %1837, align 8, !tbaa !2428
  %1839 = add i64 %1838, -8
  %1840 = inttoptr i64 %1839 to i64*
  store i64 %1834, i64* %1840
  store i64 %1839, i64* %1837, align 8, !tbaa !2428
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1832, i64* %1841, align 8, !tbaa !2428
  %1842 = load i64, i64* %PC
  %1843 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1842, %struct.Memory* %MEMORY.19)
  %1844 = load i64, i64* %RBP
  %1845 = sub i64 %1844, 8
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RAX
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 3
  store i64 %1852, i64* %PC
  store i64 %1850, i64* %RCX, align 8, !tbaa !2428
  %1853 = load i64, i64* %RCX
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 4
  store i64 %1855, i64* %PC
  %1856 = add i64 4, %1853
  store i64 %1856, i64* %RCX, align 8, !tbaa !2428
  %1857 = icmp ult i64 %1856, %1853
  %1858 = icmp ult i64 %1856, 4
  %1859 = or i1 %1857, %1858
  %1860 = zext i1 %1859 to i8
  %1861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1860, i8* %1861, align 1, !tbaa !2432
  %1862 = trunc i64 %1856 to i32
  %1863 = and i32 %1862, 255
  %1864 = call i32 @llvm.ctpop.i32(i32 %1863) #16
  %1865 = trunc i32 %1864 to i8
  %1866 = and i8 %1865, 1
  %1867 = xor i8 %1866, 1
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1867, i8* %1868, align 1, !tbaa !2446
  %1869 = xor i64 4, %1853
  %1870 = xor i64 %1869, %1856
  %1871 = lshr i64 %1870, 4
  %1872 = trunc i64 %1871 to i8
  %1873 = and i8 %1872, 1
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1873, i8* %1874, align 1, !tbaa !2447
  %1875 = icmp eq i64 %1856, 0
  %1876 = zext i1 %1875 to i8
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1876, i8* %1877, align 1, !tbaa !2448
  %1878 = lshr i64 %1856, 63
  %1879 = trunc i64 %1878 to i8
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1879, i8* %1880, align 1, !tbaa !2449
  %1881 = lshr i64 %1853, 63
  %1882 = xor i64 %1878, %1881
  %1883 = add nuw nsw i64 %1882, %1878
  %1884 = icmp eq i64 %1883, 2
  %1885 = zext i1 %1884 to i8
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1885, i8* %1886, align 1, !tbaa !2450
  %1887 = load i64, i64* %RBP
  %1888 = sub i64 %1887, 8
  %1889 = load i64, i64* %RCX
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 4
  store i64 %1891, i64* %PC
  %1892 = inttoptr i64 %1888 to i64*
  store i64 %1889, i64* %1892
  %1893 = load i64, i64* %RAX
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 3
  store i64 %1895, i64* %PC
  %1896 = inttoptr i64 %1893 to i32*
  %1897 = load i32, i32* %1896
  %1898 = sext i32 %1897 to i64
  store i64 %1898, i64* %RAX, align 8, !tbaa !2428
  %1899 = load i64, i64* %RAX
  %1900 = mul i64 %1899, 8
  %1901 = add i64 %1900, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 8
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i64*
  %1905 = load i64, i64* %1904
  store i64 %1905, i64* %RAX, align 8, !tbaa !2428
  %1906 = load i64, i64* %RBP
  %1907 = sub i64 %1906, 40
  %1908 = load i64, i64* %RAX
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 4
  store i64 %1910, i64* %PC
  %1911 = inttoptr i64 %1907 to i64*
  store i64 %1908, i64* %1911
  %1912 = load i64, i64* %PC
  %1913 = sub i64 %1912, 751
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 5
  store i64 %1915, i64* %PC
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1913, i64* %1916, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1917 = load i64, i64* %RBP
  %1918 = sub i64 %1917, 12
  %1919 = load i64, i64* %PC
  %1920 = add i64 %1919, 7
  store i64 %1920, i64* %PC
  %1921 = inttoptr i64 %1918 to i32*
  store i32 10, i32* %1921
  br label %block_400735

block_400929:                                     ; preds = %block_400922, %block_40054b
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.15, %block_400922 ], [ %MEMORY.22, %block_40054b ]
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 12
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 3
  store i64 %1925, i64* %PC
  %1926 = inttoptr i64 %1923 to i32*
  %1927 = load i32, i32* %1926
  %1928 = zext i32 %1927 to i64
  store i64 %1928, i64* %RDI, align 8, !tbaa !2428
  %1929 = load i64, i64* %PC
  %1930 = sub i64 %1929, 1084
  %1931 = load i64, i64* %PC
  %1932 = add i64 %1931, 5
  %1933 = load i64, i64* %PC
  %1934 = add i64 %1933, 5
  store i64 %1934, i64* %PC
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1936 = load i64, i64* %1935, align 8, !tbaa !2428
  %1937 = add i64 %1936, -8
  %1938 = inttoptr i64 %1937 to i64*
  store i64 %1932, i64* %1938
  store i64 %1937, i64* %1935, align 8, !tbaa !2428
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1930, i64* %1939, align 8, !tbaa !2428
  %1940 = load i64, i64* %PC
  %1941 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1940, %struct.Memory* %MEMORY.20)
  %1942 = load i64, i64* %RBP
  %1943 = sub i64 %1942, 8
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1943 to i64*
  %1947 = load i64, i64* %1946
  store i64 %1947, i64* %RAX, align 8, !tbaa !2428
  %1948 = load i64, i64* %RAX
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 3
  store i64 %1950, i64* %PC
  store i64 %1948, i64* %RCX, align 8, !tbaa !2428
  %1951 = load i64, i64* %RCX
  %1952 = load i64, i64* %PC
  %1953 = add i64 %1952, 4
  store i64 %1953, i64* %PC
  %1954 = add i64 4, %1951
  store i64 %1954, i64* %RCX, align 8, !tbaa !2428
  %1955 = icmp ult i64 %1954, %1951
  %1956 = icmp ult i64 %1954, 4
  %1957 = or i1 %1955, %1956
  %1958 = zext i1 %1957 to i8
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1958, i8* %1959, align 1, !tbaa !2432
  %1960 = trunc i64 %1954 to i32
  %1961 = and i32 %1960, 255
  %1962 = call i32 @llvm.ctpop.i32(i32 %1961) #16
  %1963 = trunc i32 %1962 to i8
  %1964 = and i8 %1963, 1
  %1965 = xor i8 %1964, 1
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1965, i8* %1966, align 1, !tbaa !2446
  %1967 = xor i64 4, %1951
  %1968 = xor i64 %1967, %1954
  %1969 = lshr i64 %1968, 4
  %1970 = trunc i64 %1969 to i8
  %1971 = and i8 %1970, 1
  %1972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1971, i8* %1972, align 1, !tbaa !2447
  %1973 = icmp eq i64 %1954, 0
  %1974 = zext i1 %1973 to i8
  %1975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1974, i8* %1975, align 1, !tbaa !2448
  %1976 = lshr i64 %1954, 63
  %1977 = trunc i64 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1977, i8* %1978, align 1, !tbaa !2449
  %1979 = lshr i64 %1951, 63
  %1980 = xor i64 %1976, %1979
  %1981 = add nuw nsw i64 %1980, %1976
  %1982 = icmp eq i64 %1981, 2
  %1983 = zext i1 %1982 to i8
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1983, i8* %1984, align 1, !tbaa !2450
  %1985 = load i64, i64* %RBP
  %1986 = sub i64 %1985, 8
  %1987 = load i64, i64* %RCX
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 4
  store i64 %1989, i64* %PC
  %1990 = inttoptr i64 %1986 to i64*
  store i64 %1987, i64* %1990
  %1991 = load i64, i64* %RAX
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 3
  store i64 %1993, i64* %PC
  %1994 = inttoptr i64 %1991 to i32*
  %1995 = load i32, i32* %1994
  %1996 = sext i32 %1995 to i64
  store i64 %1996, i64* %RAX, align 8, !tbaa !2428
  %1997 = load i64, i64* %RAX
  %1998 = mul i64 %1997, 8
  %1999 = add i64 %1998, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 8
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %RAX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 40
  %2006 = load i64, i64* %RAX
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 4
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2005 to i64*
  store i64 %2006, i64* %2009
  %2010 = load i64, i64* %PC
  %2011 = sub i64 %2010, 1001
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 5
  store i64 %2013, i64* %PC
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2011, i64* %2014, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %2015 = load i64, i64* %RBP
  %2016 = sub i64 %2015, 12
  %2017 = load i64, i64* %PC
  %2018 = add i64 %2017, 7
  store i64 %2018, i64* %PC
  %2019 = inttoptr i64 %2016 to i32*
  store i32 15, i32* %2019
  br label %block_40082f

block_4005a5:                                     ; preds = %block_40059e, %block_40054b
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.15, %block_40059e ], [ %MEMORY.22, %block_40054b ]
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 12
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 3
  store i64 %2023, i64* %PC
  %2024 = inttoptr i64 %2021 to i32*
  %2025 = load i32, i32* %2024
  %2026 = zext i32 %2025 to i64
  store i64 %2026, i64* %RDI, align 8, !tbaa !2428
  %2027 = load i64, i64* %PC
  %2028 = sub i64 %2027, 184
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 5
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 5
  store i64 %2032, i64* %PC
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2034 = load i64, i64* %2033, align 8, !tbaa !2428
  %2035 = add i64 %2034, -8
  %2036 = inttoptr i64 %2035 to i64*
  store i64 %2030, i64* %2036
  store i64 %2035, i64* %2033, align 8, !tbaa !2428
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2028, i64* %2037, align 8, !tbaa !2428
  %2038 = load i64, i64* %PC
  %2039 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2038, %struct.Memory* %MEMORY.21)
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 8
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = load i64, i64* %RAX
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 3
  store i64 %2048, i64* %PC
  store i64 %2046, i64* %RCX, align 8, !tbaa !2428
  %2049 = load i64, i64* %RCX
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 4
  store i64 %2051, i64* %PC
  %2052 = add i64 4, %2049
  store i64 %2052, i64* %RCX, align 8, !tbaa !2428
  %2053 = icmp ult i64 %2052, %2049
  %2054 = icmp ult i64 %2052, 4
  %2055 = or i1 %2053, %2054
  %2056 = zext i1 %2055 to i8
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2056, i8* %2057, align 1, !tbaa !2432
  %2058 = trunc i64 %2052 to i32
  %2059 = and i32 %2058, 255
  %2060 = call i32 @llvm.ctpop.i32(i32 %2059) #16
  %2061 = trunc i32 %2060 to i8
  %2062 = and i8 %2061, 1
  %2063 = xor i8 %2062, 1
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2063, i8* %2064, align 1, !tbaa !2446
  %2065 = xor i64 4, %2049
  %2066 = xor i64 %2065, %2052
  %2067 = lshr i64 %2066, 4
  %2068 = trunc i64 %2067 to i8
  %2069 = and i8 %2068, 1
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2069, i8* %2070, align 1, !tbaa !2447
  %2071 = icmp eq i64 %2052, 0
  %2072 = zext i1 %2071 to i8
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2072, i8* %2073, align 1, !tbaa !2448
  %2074 = lshr i64 %2052, 63
  %2075 = trunc i64 %2074 to i8
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2075, i8* %2076, align 1, !tbaa !2449
  %2077 = lshr i64 %2049, 63
  %2078 = xor i64 %2074, %2077
  %2079 = add nuw nsw i64 %2078, %2074
  %2080 = icmp eq i64 %2079, 2
  %2081 = zext i1 %2080 to i8
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2081, i8* %2082, align 1, !tbaa !2450
  %2083 = load i64, i64* %RBP
  %2084 = sub i64 %2083, 8
  %2085 = load i64, i64* %RCX
  %2086 = load i64, i64* %PC
  %2087 = add i64 %2086, 4
  store i64 %2087, i64* %PC
  %2088 = inttoptr i64 %2084 to i64*
  store i64 %2085, i64* %2088
  %2089 = load i64, i64* %RAX
  %2090 = load i64, i64* %PC
  %2091 = add i64 %2090, 3
  store i64 %2091, i64* %PC
  %2092 = inttoptr i64 %2089 to i32*
  %2093 = load i32, i32* %2092
  %2094 = sext i32 %2093 to i64
  store i64 %2094, i64* %RAX, align 8, !tbaa !2428
  %2095 = load i64, i64* %RAX
  %2096 = mul i64 %2095, 8
  %2097 = add i64 %2096, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 8
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i64*
  %2101 = load i64, i64* %2100
  store i64 %2101, i64* %RAX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RBP
  %2103 = sub i64 %2102, 40
  %2104 = load i64, i64* %RAX
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 4
  store i64 %2106, i64* %PC
  %2107 = inttoptr i64 %2103 to i64*
  store i64 %2104, i64* %2107
  %2108 = load i64, i64* %PC
  %2109 = sub i64 %2108, 101
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 5
  store i64 %2111, i64* %PC
  %2112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2109, i64* %2112, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %2113 = load i64, i64* %RBP
  %2114 = sub i64 %2113, 12
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 7
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2114 to i32*
  store i32 18, i32* %2117
  br label %block_4008c5

block_400523:                                     ; preds = %block_400b7a, %block_400510
  %MEMORY.22 = phi %struct.Memory* [ %2, %block_400510 ], [ %MEMORY.22, %block_400b7a ]
  %2118 = load i64, i64* %RBP
  %2119 = sub i64 %2118, 8
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 4
  store i64 %2121, i64* %PC
  %2122 = inttoptr i64 %2119 to i64*
  %2123 = load i64, i64* %2122
  store i64 %2123, i64* %RAX, align 8, !tbaa !2428
  %2124 = load i64, i64* %RAX
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  store i64 %2124, i64* %RCX, align 8, !tbaa !2428
  %2127 = load i64, i64* %RCX
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = add i64 4, %2127
  store i64 %2130, i64* %RCX, align 8, !tbaa !2428
  %2131 = icmp ult i64 %2130, %2127
  %2132 = icmp ult i64 %2130, 4
  %2133 = or i1 %2131, %2132
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2134, i8* %2135, align 1, !tbaa !2432
  %2136 = trunc i64 %2130 to i32
  %2137 = and i32 %2136, 255
  %2138 = call i32 @llvm.ctpop.i32(i32 %2137) #16
  %2139 = trunc i32 %2138 to i8
  %2140 = and i8 %2139, 1
  %2141 = xor i8 %2140, 1
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2141, i8* %2142, align 1, !tbaa !2446
  %2143 = xor i64 4, %2127
  %2144 = xor i64 %2143, %2130
  %2145 = lshr i64 %2144, 4
  %2146 = trunc i64 %2145 to i8
  %2147 = and i8 %2146, 1
  %2148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2147, i8* %2148, align 1, !tbaa !2447
  %2149 = icmp eq i64 %2130, 0
  %2150 = zext i1 %2149 to i8
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2150, i8* %2151, align 1, !tbaa !2448
  %2152 = lshr i64 %2130, 63
  %2153 = trunc i64 %2152 to i8
  %2154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2153, i8* %2154, align 1, !tbaa !2449
  %2155 = lshr i64 %2127, 63
  %2156 = xor i64 %2152, %2155
  %2157 = add nuw nsw i64 %2156, %2152
  %2158 = icmp eq i64 %2157, 2
  %2159 = zext i1 %2158 to i8
  %2160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2159, i8* %2160, align 1, !tbaa !2450
  %2161 = load i64, i64* %RBP
  %2162 = sub i64 %2161, 8
  %2163 = load i64, i64* %RCX
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 4
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2162 to i64*
  store i64 %2163, i64* %2166
  %2167 = load i64, i64* %RAX
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 2
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  %2171 = load i32, i32* %2170
  %2172 = zext i32 %2171 to i64
  store i64 %2172, i64* %RDX, align 8, !tbaa !2428
  %2173 = load i32, i32* %EDX
  %2174 = zext i32 %2173 to i64
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 2
  store i64 %2176, i64* %PC
  %2177 = and i64 %2174, 4294967295
  store i64 %2177, i64* %RAX, align 8, !tbaa !2428
  %2178 = load i64, i64* %RAX
  %2179 = load i64, i64* %PC
  %2180 = add i64 %2179, 3
  store i64 %2180, i64* %PC
  store i64 %2178, i64* %RCX, align 8, !tbaa !2428
  %2181 = load i64, i64* %RCX
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 4
  store i64 %2183, i64* %PC
  %2184 = sub i64 %2181, 31
  store i64 %2184, i64* %RCX, align 8, !tbaa !2428
  %2185 = icmp ult i64 %2181, 31
  %2186 = zext i1 %2185 to i8
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2186, i8* %2187, align 1, !tbaa !2432
  %2188 = trunc i64 %2184 to i32
  %2189 = and i32 %2188, 255
  %2190 = call i32 @llvm.ctpop.i32(i32 %2189) #16
  %2191 = trunc i32 %2190 to i8
  %2192 = and i8 %2191, 1
  %2193 = xor i8 %2192, 1
  %2194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2193, i8* %2194, align 1, !tbaa !2446
  %2195 = xor i64 31, %2181
  %2196 = xor i64 %2195, %2184
  %2197 = lshr i64 %2196, 4
  %2198 = trunc i64 %2197 to i8
  %2199 = and i8 %2198, 1
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2199, i8* %2200, align 1, !tbaa !2447
  %2201 = icmp eq i64 %2184, 0
  %2202 = zext i1 %2201 to i8
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2202, i8* %2203, align 1, !tbaa !2448
  %2204 = lshr i64 %2184, 63
  %2205 = trunc i64 %2204 to i8
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2205, i8* %2206, align 1, !tbaa !2449
  %2207 = lshr i64 %2181, 63
  %2208 = xor i64 %2204, %2207
  %2209 = add nuw nsw i64 %2208, %2207
  %2210 = icmp eq i64 %2209, 2
  %2211 = zext i1 %2210 to i8
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2211, i8* %2212, align 1, !tbaa !2450
  %2213 = load i64, i64* %RBP
  %2214 = sub i64 %2213, 24
  %2215 = load i64, i64* %RAX
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 4
  store i64 %2217, i64* %PC
  %2218 = inttoptr i64 %2214 to i64*
  store i64 %2215, i64* %2218
  %2219 = load i64, i64* %RBP
  %2220 = sub i64 %2219, 32
  %2221 = load i64, i64* %RCX
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 4
  store i64 %2223, i64* %PC
  %2224 = inttoptr i64 %2220 to i64*
  store i64 %2221, i64* %2224
  %2225 = load i64, i64* %PC
  %2226 = add i64 %2225, 1589
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 6
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 6
  store i64 %2230, i64* %PC
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2232 = load i8, i8* %2231, align 1, !tbaa !2432
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2234 = load i8, i8* %2233, align 1, !tbaa !2448
  %2235 = or i8 %2234, %2232
  %2236 = icmp eq i8 %2235, 0
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2239 = select i1 %2236, i64 %2226, i64 %2228
  store i64 %2239, i64* %2238, align 8, !tbaa !2428
  %2240 = load i8, i8* %BRANCH_TAKEN
  %2241 = icmp eq i8 %2240, 1
  br i1 %2241, label %block_400b7a, label %block_40054b

block_400922:                                     ; preds = %block_400566
  %2242 = load i64, i64* %RBP
  %2243 = sub i64 %2242, 12
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 7
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2243 to i32*
  store i32 20, i32* %2246
  br label %block_400929

block_40069f:                                     ; preds = %block_400698, %block_40054b
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.15, %block_400698 ], [ %MEMORY.22, %block_40054b ]
  %2247 = load i64, i64* %RBP
  %2248 = sub i64 %2247, 12
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 3
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2248 to i32*
  %2252 = load i32, i32* %2251
  %2253 = zext i32 %2252 to i64
  store i64 %2253, i64* %RDI, align 8, !tbaa !2428
  %2254 = load i64, i64* %PC
  %2255 = sub i64 %2254, 434
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 5
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 5
  store i64 %2259, i64* %PC
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2261 = load i64, i64* %2260, align 8, !tbaa !2428
  %2262 = add i64 %2261, -8
  %2263 = inttoptr i64 %2262 to i64*
  store i64 %2257, i64* %2263
  store i64 %2262, i64* %2260, align 8, !tbaa !2428
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2255, i64* %2264, align 8, !tbaa !2428
  %2265 = load i64, i64* %PC
  %2266 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2265, %struct.Memory* %MEMORY.23)
  %2267 = load i64, i64* %RBP
  %2268 = sub i64 %2267, 8
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 4
  store i64 %2270, i64* %PC
  %2271 = inttoptr i64 %2268 to i64*
  %2272 = load i64, i64* %2271
  store i64 %2272, i64* %RAX, align 8, !tbaa !2428
  %2273 = load i64, i64* %RAX
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 3
  store i64 %2275, i64* %PC
  store i64 %2273, i64* %RCX, align 8, !tbaa !2428
  %2276 = load i64, i64* %RCX
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 4
  store i64 %2278, i64* %PC
  %2279 = add i64 4, %2276
  store i64 %2279, i64* %RCX, align 8, !tbaa !2428
  %2280 = icmp ult i64 %2279, %2276
  %2281 = icmp ult i64 %2279, 4
  %2282 = or i1 %2280, %2281
  %2283 = zext i1 %2282 to i8
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2283, i8* %2284, align 1, !tbaa !2432
  %2285 = trunc i64 %2279 to i32
  %2286 = and i32 %2285, 255
  %2287 = call i32 @llvm.ctpop.i32(i32 %2286) #16
  %2288 = trunc i32 %2287 to i8
  %2289 = and i8 %2288, 1
  %2290 = xor i8 %2289, 1
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2290, i8* %2291, align 1, !tbaa !2446
  %2292 = xor i64 4, %2276
  %2293 = xor i64 %2292, %2279
  %2294 = lshr i64 %2293, 4
  %2295 = trunc i64 %2294 to i8
  %2296 = and i8 %2295, 1
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2296, i8* %2297, align 1, !tbaa !2447
  %2298 = icmp eq i64 %2279, 0
  %2299 = zext i1 %2298 to i8
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2299, i8* %2300, align 1, !tbaa !2448
  %2301 = lshr i64 %2279, 63
  %2302 = trunc i64 %2301 to i8
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2302, i8* %2303, align 1, !tbaa !2449
  %2304 = lshr i64 %2276, 63
  %2305 = xor i64 %2301, %2304
  %2306 = add nuw nsw i64 %2305, %2301
  %2307 = icmp eq i64 %2306, 2
  %2308 = zext i1 %2307 to i8
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2308, i8* %2309, align 1, !tbaa !2450
  %2310 = load i64, i64* %RBP
  %2311 = sub i64 %2310, 8
  %2312 = load i64, i64* %RCX
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 4
  store i64 %2314, i64* %PC
  %2315 = inttoptr i64 %2311 to i64*
  store i64 %2312, i64* %2315
  %2316 = load i64, i64* %RAX
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 3
  store i64 %2318, i64* %PC
  %2319 = inttoptr i64 %2316 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  store i64 %2321, i64* %RAX, align 8, !tbaa !2428
  %2322 = load i64, i64* %RAX
  %2323 = mul i64 %2322, 8
  %2324 = add i64 %2323, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2325 = load i64, i64* %PC
  %2326 = add i64 %2325, 8
  store i64 %2326, i64* %PC
  %2327 = inttoptr i64 %2324 to i64*
  %2328 = load i64, i64* %2327
  store i64 %2328, i64* %RAX, align 8, !tbaa !2428
  %2329 = load i64, i64* %RBP
  %2330 = sub i64 %2329, 40
  %2331 = load i64, i64* %RAX
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 4
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2330 to i64*
  store i64 %2331, i64* %2334
  %2335 = load i64, i64* %PC
  %2336 = sub i64 %2335, 351
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 5
  store i64 %2338, i64* %PC
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2336, i64* %2339, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %2340 = load i64, i64* %RBP
  %2341 = sub i64 %2340, 12
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 7
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2341 to i32*
  store i32 6, i32* %2344
  br label %block_40066d

block_400b1d:                                     ; preds = %block_400b16, %block_40054b
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.15, %block_400b16 ], [ %MEMORY.22, %block_40054b ]
  %2345 = load i64, i64* %RBP
  %2346 = sub i64 %2345, 12
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 3
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i32*
  %2350 = load i32, i32* %2349
  %2351 = zext i32 %2350 to i64
  store i64 %2351, i64* %RDI, align 8, !tbaa !2428
  %2352 = load i64, i64* %PC
  %2353 = sub i64 %2352, 1584
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 5
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %PC
  %2358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2359 = load i64, i64* %2358, align 8, !tbaa !2428
  %2360 = add i64 %2359, -8
  %2361 = inttoptr i64 %2360 to i64*
  store i64 %2355, i64* %2361
  store i64 %2360, i64* %2358, align 8, !tbaa !2428
  %2362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2353, i64* %2362, align 8, !tbaa !2428
  %2363 = load i64, i64* %PC
  %2364 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2363, %struct.Memory* %MEMORY.24)
  %2365 = load i64, i64* %RBP
  %2366 = sub i64 %2365, 8
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 4
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i64*
  %2370 = load i64, i64* %2369
  store i64 %2370, i64* %RAX, align 8, !tbaa !2428
  %2371 = load i64, i64* %RAX
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 3
  store i64 %2373, i64* %PC
  store i64 %2371, i64* %RCX, align 8, !tbaa !2428
  %2374 = load i64, i64* %RCX
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 4
  store i64 %2376, i64* %PC
  %2377 = add i64 4, %2374
  store i64 %2377, i64* %RCX, align 8, !tbaa !2428
  %2378 = icmp ult i64 %2377, %2374
  %2379 = icmp ult i64 %2377, 4
  %2380 = or i1 %2378, %2379
  %2381 = zext i1 %2380 to i8
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2381, i8* %2382, align 1, !tbaa !2432
  %2383 = trunc i64 %2377 to i32
  %2384 = and i32 %2383, 255
  %2385 = call i32 @llvm.ctpop.i32(i32 %2384) #16
  %2386 = trunc i32 %2385 to i8
  %2387 = and i8 %2386, 1
  %2388 = xor i8 %2387, 1
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2388, i8* %2389, align 1, !tbaa !2446
  %2390 = xor i64 4, %2374
  %2391 = xor i64 %2390, %2377
  %2392 = lshr i64 %2391, 4
  %2393 = trunc i64 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2394, i8* %2395, align 1, !tbaa !2447
  %2396 = icmp eq i64 %2377, 0
  %2397 = zext i1 %2396 to i8
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2397, i8* %2398, align 1, !tbaa !2448
  %2399 = lshr i64 %2377, 63
  %2400 = trunc i64 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2400, i8* %2401, align 1, !tbaa !2449
  %2402 = lshr i64 %2374, 63
  %2403 = xor i64 %2399, %2402
  %2404 = add nuw nsw i64 %2403, %2399
  %2405 = icmp eq i64 %2404, 2
  %2406 = zext i1 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2406, i8* %2407, align 1, !tbaa !2450
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 8
  %2410 = load i64, i64* %RCX
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 4
  store i64 %2412, i64* %PC
  %2413 = inttoptr i64 %2409 to i64*
  store i64 %2410, i64* %2413
  %2414 = load i64, i64* %RAX
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 3
  store i64 %2416, i64* %PC
  %2417 = inttoptr i64 %2414 to i32*
  %2418 = load i32, i32* %2417
  %2419 = sext i32 %2418 to i64
  store i64 %2419, i64* %RAX, align 8, !tbaa !2428
  %2420 = load i64, i64* %RAX
  %2421 = mul i64 %2420, 8
  %2422 = add i64 %2421, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2423 = load i64, i64* %PC
  %2424 = add i64 %2423, 8
  store i64 %2424, i64* %PC
  %2425 = inttoptr i64 %2422 to i64*
  %2426 = load i64, i64* %2425
  store i64 %2426, i64* %RAX, align 8, !tbaa !2428
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 40
  %2429 = load i64, i64* %RAX
  %2430 = load i64, i64* %PC
  %2431 = add i64 %2430, 4
  store i64 %2431, i64* %PC
  %2432 = inttoptr i64 %2428 to i64*
  store i64 %2429, i64* %2432
  %2433 = load i64, i64* %PC
  %2434 = sub i64 %2433, 1501
  %2435 = load i64, i64* %PC
  %2436 = add i64 %2435, 5
  store i64 %2436, i64* %PC
  %2437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2434, i64* %2437, align 8, !tbaa !2428
  br label %block_400566

block_400b7f:                                     ; preds = %block_400566
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 1
  store i64 %2439, i64* %PC
  %2440 = load i64, i64* %PC
  %2441 = tail call %struct.Memory* @sub_400b80_main(%struct.State* %0, i64 %2440, %struct.Memory* %MEMORY.15)
  ret %struct.Memory* %2441

block_400a1c:                                     ; preds = %block_400566
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 12
  %2444 = load i64, i64* %PC
  %2445 = add i64 %2444, 7
  store i64 %2445, i64* %PC
  %2446 = inttoptr i64 %2443 to i32*
  store i32 25, i32* %2446
  br label %block_400a23

block_400799:                                     ; preds = %block_400792, %block_40054b
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.15, %block_400792 ], [ %MEMORY.22, %block_40054b ]
  %2447 = load i64, i64* %RBP
  %2448 = sub i64 %2447, 12
  %2449 = load i64, i64* %PC
  %2450 = add i64 %2449, 3
  store i64 %2450, i64* %PC
  %2451 = inttoptr i64 %2448 to i32*
  %2452 = load i32, i32* %2451
  %2453 = zext i32 %2452 to i64
  store i64 %2453, i64* %RDI, align 8, !tbaa !2428
  %2454 = load i64, i64* %PC
  %2455 = sub i64 %2454, 684
  %2456 = load i64, i64* %PC
  %2457 = add i64 %2456, 5
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 5
  store i64 %2459, i64* %PC
  %2460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2461 = load i64, i64* %2460, align 8, !tbaa !2428
  %2462 = add i64 %2461, -8
  %2463 = inttoptr i64 %2462 to i64*
  store i64 %2457, i64* %2463
  store i64 %2462, i64* %2460, align 8, !tbaa !2428
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2455, i64* %2464, align 8, !tbaa !2428
  %2465 = load i64, i64* %PC
  %2466 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2465, %struct.Memory* %MEMORY.25)
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 8
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 4
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i64*
  %2472 = load i64, i64* %2471
  store i64 %2472, i64* %RAX, align 8, !tbaa !2428
  %2473 = load i64, i64* %RAX
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 3
  store i64 %2475, i64* %PC
  store i64 %2473, i64* %RCX, align 8, !tbaa !2428
  %2476 = load i64, i64* %RCX
  %2477 = load i64, i64* %PC
  %2478 = add i64 %2477, 4
  store i64 %2478, i64* %PC
  %2479 = add i64 4, %2476
  store i64 %2479, i64* %RCX, align 8, !tbaa !2428
  %2480 = icmp ult i64 %2479, %2476
  %2481 = icmp ult i64 %2479, 4
  %2482 = or i1 %2480, %2481
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2483, i8* %2484, align 1, !tbaa !2432
  %2485 = trunc i64 %2479 to i32
  %2486 = and i32 %2485, 255
  %2487 = call i32 @llvm.ctpop.i32(i32 %2486) #16
  %2488 = trunc i32 %2487 to i8
  %2489 = and i8 %2488, 1
  %2490 = xor i8 %2489, 1
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2490, i8* %2491, align 1, !tbaa !2446
  %2492 = xor i64 4, %2476
  %2493 = xor i64 %2492, %2479
  %2494 = lshr i64 %2493, 4
  %2495 = trunc i64 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2496, i8* %2497, align 1, !tbaa !2447
  %2498 = icmp eq i64 %2479, 0
  %2499 = zext i1 %2498 to i8
  %2500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2499, i8* %2500, align 1, !tbaa !2448
  %2501 = lshr i64 %2479, 63
  %2502 = trunc i64 %2501 to i8
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2502, i8* %2503, align 1, !tbaa !2449
  %2504 = lshr i64 %2476, 63
  %2505 = xor i64 %2501, %2504
  %2506 = add nuw nsw i64 %2505, %2501
  %2507 = icmp eq i64 %2506, 2
  %2508 = zext i1 %2507 to i8
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2508, i8* %2509, align 1, !tbaa !2450
  %2510 = load i64, i64* %RBP
  %2511 = sub i64 %2510, 8
  %2512 = load i64, i64* %RCX
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 4
  store i64 %2514, i64* %PC
  %2515 = inttoptr i64 %2511 to i64*
  store i64 %2512, i64* %2515
  %2516 = load i64, i64* %RAX
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 3
  store i64 %2518, i64* %PC
  %2519 = inttoptr i64 %2516 to i32*
  %2520 = load i32, i32* %2519
  %2521 = sext i32 %2520 to i64
  store i64 %2521, i64* %RAX, align 8, !tbaa !2428
  %2522 = load i64, i64* %RAX
  %2523 = mul i64 %2522, 8
  %2524 = add i64 %2523, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2525 = load i64, i64* %PC
  %2526 = add i64 %2525, 8
  store i64 %2526, i64* %PC
  %2527 = inttoptr i64 %2524 to i64*
  %2528 = load i64, i64* %2527
  store i64 %2528, i64* %RAX, align 8, !tbaa !2428
  %2529 = load i64, i64* %RBP
  %2530 = sub i64 %2529, 40
  %2531 = load i64, i64* %RAX
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 4
  store i64 %2533, i64* %PC
  %2534 = inttoptr i64 %2530 to i64*
  store i64 %2531, i64* %2534
  %2535 = load i64, i64* %PC
  %2536 = sub i64 %2535, 601
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 5
  store i64 %2538, i64* %PC
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2536, i64* %2539, align 8, !tbaa !2428
  br label %block_400566

block_400b4f:                                     ; preds = %block_40054b, %block_400b48
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.15, %block_400b48 ], [ %MEMORY.22, %block_40054b ]
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 12
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 3
  store i64 %2543, i64* %PC
  %2544 = inttoptr i64 %2541 to i32*
  %2545 = load i32, i32* %2544
  %2546 = zext i32 %2545 to i64
  store i64 %2546, i64* %RDI, align 8, !tbaa !2428
  %2547 = load i64, i64* %PC
  %2548 = sub i64 %2547, 1634
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 5
  %2551 = load i64, i64* %PC
  %2552 = add i64 %2551, 5
  store i64 %2552, i64* %PC
  %2553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2554 = load i64, i64* %2553, align 8, !tbaa !2428
  %2555 = add i64 %2554, -8
  %2556 = inttoptr i64 %2555 to i64*
  store i64 %2550, i64* %2556
  store i64 %2555, i64* %2553, align 8, !tbaa !2428
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2548, i64* %2557, align 8, !tbaa !2428
  %2558 = load i64, i64* %PC
  %2559 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2558, %struct.Memory* %MEMORY.26)
  %2560 = load i64, i64* %RBP
  %2561 = sub i64 %2560, 8
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 4
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i64*
  %2565 = load i64, i64* %2564
  store i64 %2565, i64* %RAX, align 8, !tbaa !2428
  %2566 = load i64, i64* %RAX
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 3
  store i64 %2568, i64* %PC
  store i64 %2566, i64* %RCX, align 8, !tbaa !2428
  %2569 = load i64, i64* %RCX
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 4
  store i64 %2571, i64* %PC
  %2572 = add i64 4, %2569
  store i64 %2572, i64* %RCX, align 8, !tbaa !2428
  %2573 = icmp ult i64 %2572, %2569
  %2574 = icmp ult i64 %2572, 4
  %2575 = or i1 %2573, %2574
  %2576 = zext i1 %2575 to i8
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2576, i8* %2577, align 1, !tbaa !2432
  %2578 = trunc i64 %2572 to i32
  %2579 = and i32 %2578, 255
  %2580 = call i32 @llvm.ctpop.i32(i32 %2579) #16
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = xor i8 %2582, 1
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2583, i8* %2584, align 1, !tbaa !2446
  %2585 = xor i64 4, %2569
  %2586 = xor i64 %2585, %2572
  %2587 = lshr i64 %2586, 4
  %2588 = trunc i64 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2589, i8* %2590, align 1, !tbaa !2447
  %2591 = icmp eq i64 %2572, 0
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2592, i8* %2593, align 1, !tbaa !2448
  %2594 = lshr i64 %2572, 63
  %2595 = trunc i64 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2595, i8* %2596, align 1, !tbaa !2449
  %2597 = lshr i64 %2569, 63
  %2598 = xor i64 %2594, %2597
  %2599 = add nuw nsw i64 %2598, %2594
  %2600 = icmp eq i64 %2599, 2
  %2601 = zext i1 %2600 to i8
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2601, i8* %2602, align 1, !tbaa !2450
  %2603 = load i64, i64* %RBP
  %2604 = sub i64 %2603, 8
  %2605 = load i64, i64* %RCX
  %2606 = load i64, i64* %PC
  %2607 = add i64 %2606, 4
  store i64 %2607, i64* %PC
  %2608 = inttoptr i64 %2604 to i64*
  store i64 %2605, i64* %2608
  %2609 = load i64, i64* %RAX
  %2610 = load i64, i64* %PC
  %2611 = add i64 %2610, 3
  store i64 %2611, i64* %PC
  %2612 = inttoptr i64 %2609 to i32*
  %2613 = load i32, i32* %2612
  %2614 = sext i32 %2613 to i64
  store i64 %2614, i64* %RAX, align 8, !tbaa !2428
  %2615 = load i64, i64* %RAX
  %2616 = mul i64 %2615, 8
  %2617 = add i64 %2616, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 8
  store i64 %2619, i64* %PC
  %2620 = inttoptr i64 %2617 to i64*
  %2621 = load i64, i64* %2620
  store i64 %2621, i64* %RAX, align 8, !tbaa !2428
  %2622 = load i64, i64* %RBP
  %2623 = sub i64 %2622, 40
  %2624 = load i64, i64* %RAX
  %2625 = load i64, i64* %PC
  %2626 = add i64 %2625, 4
  store i64 %2626, i64* %PC
  %2627 = inttoptr i64 %2623 to i64*
  store i64 %2624, i64* %2627
  %2628 = load i64, i64* %PC
  %2629 = sub i64 %2628, 1551
  %2630 = load i64, i64* %PC
  %2631 = add i64 %2630, 5
  store i64 %2631, i64* %PC
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2629, i64* %2632, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2633 = load i64, i64* %RBP
  %2634 = sub i64 %2633, 12
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 7
  store i64 %2636, i64* %PC
  %2637 = inttoptr i64 %2634 to i32*
  store i32 7, i32* %2637
  br label %block_40069f

block_400b16:                                     ; preds = %block_400566
  %2638 = load i64, i64* %RBP
  %2639 = sub i64 %2638, 12
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 7
  store i64 %2641, i64* %PC
  %2642 = inttoptr i64 %2639 to i32*
  store i32 30, i32* %2642
  br label %block_400b1d

block_400893:                                     ; preds = %block_40088c, %block_40054b
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.15, %block_40088c ], [ %MEMORY.22, %block_40054b ]
  %2643 = load i64, i64* %RBP
  %2644 = sub i64 %2643, 12
  %2645 = load i64, i64* %PC
  %2646 = add i64 %2645, 3
  store i64 %2646, i64* %PC
  %2647 = inttoptr i64 %2644 to i32*
  %2648 = load i32, i32* %2647
  %2649 = zext i32 %2648 to i64
  store i64 %2649, i64* %RDI, align 8, !tbaa !2428
  %2650 = load i64, i64* %PC
  %2651 = sub i64 %2650, 934
  %2652 = load i64, i64* %PC
  %2653 = add i64 %2652, 5
  %2654 = load i64, i64* %PC
  %2655 = add i64 %2654, 5
  store i64 %2655, i64* %PC
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2657 = load i64, i64* %2656, align 8, !tbaa !2428
  %2658 = add i64 %2657, -8
  %2659 = inttoptr i64 %2658 to i64*
  store i64 %2653, i64* %2659
  store i64 %2658, i64* %2656, align 8, !tbaa !2428
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2651, i64* %2660, align 8, !tbaa !2428
  %2661 = load i64, i64* %PC
  %2662 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2661, %struct.Memory* %MEMORY.27)
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 8
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 4
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i64*
  %2668 = load i64, i64* %2667
  store i64 %2668, i64* %RAX, align 8, !tbaa !2428
  %2669 = load i64, i64* %RAX
  %2670 = load i64, i64* %PC
  %2671 = add i64 %2670, 3
  store i64 %2671, i64* %PC
  store i64 %2669, i64* %RCX, align 8, !tbaa !2428
  %2672 = load i64, i64* %RCX
  %2673 = load i64, i64* %PC
  %2674 = add i64 %2673, 4
  store i64 %2674, i64* %PC
  %2675 = add i64 4, %2672
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2676 = icmp ult i64 %2675, %2672
  %2677 = icmp ult i64 %2675, 4
  %2678 = or i1 %2676, %2677
  %2679 = zext i1 %2678 to i8
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2679, i8* %2680, align 1, !tbaa !2432
  %2681 = trunc i64 %2675 to i32
  %2682 = and i32 %2681, 255
  %2683 = call i32 @llvm.ctpop.i32(i32 %2682) #16
  %2684 = trunc i32 %2683 to i8
  %2685 = and i8 %2684, 1
  %2686 = xor i8 %2685, 1
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2686, i8* %2687, align 1, !tbaa !2446
  %2688 = xor i64 4, %2672
  %2689 = xor i64 %2688, %2675
  %2690 = lshr i64 %2689, 4
  %2691 = trunc i64 %2690 to i8
  %2692 = and i8 %2691, 1
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2692, i8* %2693, align 1, !tbaa !2447
  %2694 = icmp eq i64 %2675, 0
  %2695 = zext i1 %2694 to i8
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2695, i8* %2696, align 1, !tbaa !2448
  %2697 = lshr i64 %2675, 63
  %2698 = trunc i64 %2697 to i8
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2698, i8* %2699, align 1, !tbaa !2449
  %2700 = lshr i64 %2672, 63
  %2701 = xor i64 %2697, %2700
  %2702 = add nuw nsw i64 %2701, %2697
  %2703 = icmp eq i64 %2702, 2
  %2704 = zext i1 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2704, i8* %2705, align 1, !tbaa !2450
  %2706 = load i64, i64* %RBP
  %2707 = sub i64 %2706, 8
  %2708 = load i64, i64* %RCX
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 4
  store i64 %2710, i64* %PC
  %2711 = inttoptr i64 %2707 to i64*
  store i64 %2708, i64* %2711
  %2712 = load i64, i64* %RAX
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 3
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to i32*
  %2716 = load i32, i32* %2715
  %2717 = sext i32 %2716 to i64
  store i64 %2717, i64* %RAX, align 8, !tbaa !2428
  %2718 = load i64, i64* %RAX
  %2719 = mul i64 %2718, 8
  %2720 = add i64 %2719, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2721 = load i64, i64* %PC
  %2722 = add i64 %2721, 8
  store i64 %2722, i64* %PC
  %2723 = inttoptr i64 %2720 to i64*
  %2724 = load i64, i64* %2723
  store i64 %2724, i64* %RAX, align 8, !tbaa !2428
  %2725 = load i64, i64* %RBP
  %2726 = sub i64 %2725, 40
  %2727 = load i64, i64* %RAX
  %2728 = load i64, i64* %PC
  %2729 = add i64 %2728, 4
  store i64 %2729, i64* %PC
  %2730 = inttoptr i64 %2726 to i64*
  store i64 %2727, i64* %2730
  %2731 = load i64, i64* %PC
  %2732 = sub i64 %2731, 851
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 5
  store i64 %2734, i64* %PC
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2732, i64* %2735, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2736 = load i64, i64* %RBP
  %2737 = sub i64 %2736, 12
  %2738 = load i64, i64* %PC
  %2739 = add i64 %2738, 7
  store i64 %2739, i64* %PC
  %2740 = inttoptr i64 %2737 to i32*
  store i32 12, i32* %2740
  br label %block_400799

block_400a55:                                     ; preds = %block_40054b, %block_400a4e
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.15, %block_400a4e ], [ %MEMORY.22, %block_40054b ]
  %2741 = load i64, i64* %RBP
  %2742 = sub i64 %2741, 12
  %2743 = load i64, i64* %PC
  %2744 = add i64 %2743, 3
  store i64 %2744, i64* %PC
  %2745 = inttoptr i64 %2742 to i32*
  %2746 = load i32, i32* %2745
  %2747 = zext i32 %2746 to i64
  store i64 %2747, i64* %RDI, align 8, !tbaa !2428
  %2748 = load i64, i64* %PC
  %2749 = sub i64 %2748, 1384
  %2750 = load i64, i64* %PC
  %2751 = add i64 %2750, 5
  %2752 = load i64, i64* %PC
  %2753 = add i64 %2752, 5
  store i64 %2753, i64* %PC
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2755 = load i64, i64* %2754, align 8, !tbaa !2428
  %2756 = add i64 %2755, -8
  %2757 = inttoptr i64 %2756 to i64*
  store i64 %2751, i64* %2757
  store i64 %2756, i64* %2754, align 8, !tbaa !2428
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2749, i64* %2758, align 8, !tbaa !2428
  %2759 = load i64, i64* %PC
  %2760 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2759, %struct.Memory* %MEMORY.28)
  %2761 = load i64, i64* %RBP
  %2762 = sub i64 %2761, 8
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 4
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %2762 to i64*
  %2766 = load i64, i64* %2765
  store i64 %2766, i64* %RAX, align 8, !tbaa !2428
  %2767 = load i64, i64* %RAX
  %2768 = load i64, i64* %PC
  %2769 = add i64 %2768, 3
  store i64 %2769, i64* %PC
  store i64 %2767, i64* %RCX, align 8, !tbaa !2428
  %2770 = load i64, i64* %RCX
  %2771 = load i64, i64* %PC
  %2772 = add i64 %2771, 4
  store i64 %2772, i64* %PC
  %2773 = add i64 4, %2770
  store i64 %2773, i64* %RCX, align 8, !tbaa !2428
  %2774 = icmp ult i64 %2773, %2770
  %2775 = icmp ult i64 %2773, 4
  %2776 = or i1 %2774, %2775
  %2777 = zext i1 %2776 to i8
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2777, i8* %2778, align 1, !tbaa !2432
  %2779 = trunc i64 %2773 to i32
  %2780 = and i32 %2779, 255
  %2781 = call i32 @llvm.ctpop.i32(i32 %2780) #16
  %2782 = trunc i32 %2781 to i8
  %2783 = and i8 %2782, 1
  %2784 = xor i8 %2783, 1
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2784, i8* %2785, align 1, !tbaa !2446
  %2786 = xor i64 4, %2770
  %2787 = xor i64 %2786, %2773
  %2788 = lshr i64 %2787, 4
  %2789 = trunc i64 %2788 to i8
  %2790 = and i8 %2789, 1
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2790, i8* %2791, align 1, !tbaa !2447
  %2792 = icmp eq i64 %2773, 0
  %2793 = zext i1 %2792 to i8
  %2794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2793, i8* %2794, align 1, !tbaa !2448
  %2795 = lshr i64 %2773, 63
  %2796 = trunc i64 %2795 to i8
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2796, i8* %2797, align 1, !tbaa !2449
  %2798 = lshr i64 %2770, 63
  %2799 = xor i64 %2795, %2798
  %2800 = add nuw nsw i64 %2799, %2795
  %2801 = icmp eq i64 %2800, 2
  %2802 = zext i1 %2801 to i8
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2802, i8* %2803, align 1, !tbaa !2450
  %2804 = load i64, i64* %RBP
  %2805 = sub i64 %2804, 8
  %2806 = load i64, i64* %RCX
  %2807 = load i64, i64* %PC
  %2808 = add i64 %2807, 4
  store i64 %2808, i64* %PC
  %2809 = inttoptr i64 %2805 to i64*
  store i64 %2806, i64* %2809
  %2810 = load i64, i64* %RAX
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 3
  store i64 %2812, i64* %PC
  %2813 = inttoptr i64 %2810 to i32*
  %2814 = load i32, i32* %2813
  %2815 = sext i32 %2814 to i64
  store i64 %2815, i64* %RAX, align 8, !tbaa !2428
  %2816 = load i64, i64* %RAX
  %2817 = mul i64 %2816, 8
  %2818 = add i64 %2817, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2819 = load i64, i64* %PC
  %2820 = add i64 %2819, 8
  store i64 %2820, i64* %PC
  %2821 = inttoptr i64 %2818 to i64*
  %2822 = load i64, i64* %2821
  store i64 %2822, i64* %RAX, align 8, !tbaa !2428
  %2823 = load i64, i64* %RBP
  %2824 = sub i64 %2823, 40
  %2825 = load i64, i64* %RAX
  %2826 = load i64, i64* %PC
  %2827 = add i64 %2826, 4
  store i64 %2827, i64* %PC
  %2828 = inttoptr i64 %2824 to i64*
  store i64 %2825, i64* %2828
  %2829 = load i64, i64* %PC
  %2830 = sub i64 %2829, 1301
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 5
  store i64 %2832, i64* %PC
  %2833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2830, i64* %2833, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %2834 = load i64, i64* %RBP
  %2835 = sub i64 %2834, 12
  %2836 = load i64, i64* %PC
  %2837 = add i64 %2836, 7
  store i64 %2837, i64* %PC
  %2838 = inttoptr i64 %2835 to i32*
  store i32 2, i32* %2838
  br label %block_4005a5

block_40098d:                                     ; preds = %block_400986, %block_40054b
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.15, %block_400986 ], [ %MEMORY.22, %block_40054b ]
  %2839 = load i64, i64* %RBP
  %2840 = sub i64 %2839, 12
  %2841 = load i64, i64* %PC
  %2842 = add i64 %2841, 3
  store i64 %2842, i64* %PC
  %2843 = inttoptr i64 %2840 to i32*
  %2844 = load i32, i32* %2843
  %2845 = zext i32 %2844 to i64
  store i64 %2845, i64* %RDI, align 8, !tbaa !2428
  %2846 = load i64, i64* %PC
  %2847 = sub i64 %2846, 1184
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 5
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 5
  store i64 %2851, i64* %PC
  %2852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2853 = load i64, i64* %2852, align 8, !tbaa !2428
  %2854 = add i64 %2853, -8
  %2855 = inttoptr i64 %2854 to i64*
  store i64 %2849, i64* %2855
  store i64 %2854, i64* %2852, align 8, !tbaa !2428
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2847, i64* %2856, align 8, !tbaa !2428
  %2857 = load i64, i64* %PC
  %2858 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2857, %struct.Memory* %MEMORY.29)
  %2859 = load i64, i64* %RBP
  %2860 = sub i64 %2859, 8
  %2861 = load i64, i64* %PC
  %2862 = add i64 %2861, 4
  store i64 %2862, i64* %PC
  %2863 = inttoptr i64 %2860 to i64*
  %2864 = load i64, i64* %2863
  store i64 %2864, i64* %RAX, align 8, !tbaa !2428
  %2865 = load i64, i64* %RAX
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 3
  store i64 %2867, i64* %PC
  store i64 %2865, i64* %RCX, align 8, !tbaa !2428
  %2868 = load i64, i64* %RCX
  %2869 = load i64, i64* %PC
  %2870 = add i64 %2869, 4
  store i64 %2870, i64* %PC
  %2871 = add i64 4, %2868
  store i64 %2871, i64* %RCX, align 8, !tbaa !2428
  %2872 = icmp ult i64 %2871, %2868
  %2873 = icmp ult i64 %2871, 4
  %2874 = or i1 %2872, %2873
  %2875 = zext i1 %2874 to i8
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2875, i8* %2876, align 1, !tbaa !2432
  %2877 = trunc i64 %2871 to i32
  %2878 = and i32 %2877, 255
  %2879 = call i32 @llvm.ctpop.i32(i32 %2878) #16
  %2880 = trunc i32 %2879 to i8
  %2881 = and i8 %2880, 1
  %2882 = xor i8 %2881, 1
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2882, i8* %2883, align 1, !tbaa !2446
  %2884 = xor i64 4, %2868
  %2885 = xor i64 %2884, %2871
  %2886 = lshr i64 %2885, 4
  %2887 = trunc i64 %2886 to i8
  %2888 = and i8 %2887, 1
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2888, i8* %2889, align 1, !tbaa !2447
  %2890 = icmp eq i64 %2871, 0
  %2891 = zext i1 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2891, i8* %2892, align 1, !tbaa !2448
  %2893 = lshr i64 %2871, 63
  %2894 = trunc i64 %2893 to i8
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2894, i8* %2895, align 1, !tbaa !2449
  %2896 = lshr i64 %2868, 63
  %2897 = xor i64 %2893, %2896
  %2898 = add nuw nsw i64 %2897, %2893
  %2899 = icmp eq i64 %2898, 2
  %2900 = zext i1 %2899 to i8
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2900, i8* %2901, align 1, !tbaa !2450
  %2902 = load i64, i64* %RBP
  %2903 = sub i64 %2902, 8
  %2904 = load i64, i64* %RCX
  %2905 = load i64, i64* %PC
  %2906 = add i64 %2905, 4
  store i64 %2906, i64* %PC
  %2907 = inttoptr i64 %2903 to i64*
  store i64 %2904, i64* %2907
  %2908 = load i64, i64* %RAX
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 3
  store i64 %2910, i64* %PC
  %2911 = inttoptr i64 %2908 to i32*
  %2912 = load i32, i32* %2911
  %2913 = sext i32 %2912 to i64
  store i64 %2913, i64* %RAX, align 8, !tbaa !2428
  %2914 = load i64, i64* %RAX
  %2915 = mul i64 %2914, 8
  %2916 = add i64 %2915, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 8
  store i64 %2918, i64* %PC
  %2919 = inttoptr i64 %2916 to i64*
  %2920 = load i64, i64* %2919
  store i64 %2920, i64* %RAX, align 8, !tbaa !2428
  %2921 = load i64, i64* %RBP
  %2922 = sub i64 %2921, 40
  %2923 = load i64, i64* %RAX
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 4
  store i64 %2925, i64* %PC
  %2926 = inttoptr i64 %2922 to i64*
  store i64 %2923, i64* %2926
  %2927 = load i64, i64* %PC
  %2928 = sub i64 %2927, 1101
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 5
  store i64 %2930, i64* %PC
  %2931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2928, i64* %2931, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2932 = load i64, i64* %RBP
  %2933 = sub i64 %2932, 12
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 7
  store i64 %2935, i64* %PC
  %2936 = inttoptr i64 %2933 to i32*
  store i32 17, i32* %2936
  br label %block_400893

block_400609:                                     ; preds = %block_400602, %block_40054b
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.15, %block_400602 ], [ %MEMORY.22, %block_40054b ]
  %2937 = load i64, i64* %RBP
  %2938 = sub i64 %2937, 12
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 3
  store i64 %2940, i64* %PC
  %2941 = inttoptr i64 %2938 to i32*
  %2942 = load i32, i32* %2941
  %2943 = zext i32 %2942 to i64
  store i64 %2943, i64* %RDI, align 8, !tbaa !2428
  %2944 = load i64, i64* %PC
  %2945 = sub i64 %2944, 284
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 5
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 5
  store i64 %2949, i64* %PC
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2951 = load i64, i64* %2950, align 8, !tbaa !2428
  %2952 = add i64 %2951, -8
  %2953 = inttoptr i64 %2952 to i64*
  store i64 %2947, i64* %2953
  store i64 %2952, i64* %2950, align 8, !tbaa !2428
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2945, i64* %2954, align 8, !tbaa !2428
  %2955 = load i64, i64* %PC
  %2956 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2955, %struct.Memory* %MEMORY.30)
  %2957 = load i64, i64* %RBP
  %2958 = sub i64 %2957, 8
  %2959 = load i64, i64* %PC
  %2960 = add i64 %2959, 4
  store i64 %2960, i64* %PC
  %2961 = inttoptr i64 %2958 to i64*
  %2962 = load i64, i64* %2961
  store i64 %2962, i64* %RAX, align 8, !tbaa !2428
  %2963 = load i64, i64* %RAX
  %2964 = load i64, i64* %PC
  %2965 = add i64 %2964, 3
  store i64 %2965, i64* %PC
  store i64 %2963, i64* %RCX, align 8, !tbaa !2428
  %2966 = load i64, i64* %RCX
  %2967 = load i64, i64* %PC
  %2968 = add i64 %2967, 4
  store i64 %2968, i64* %PC
  %2969 = add i64 4, %2966
  store i64 %2969, i64* %RCX, align 8, !tbaa !2428
  %2970 = icmp ult i64 %2969, %2966
  %2971 = icmp ult i64 %2969, 4
  %2972 = or i1 %2970, %2971
  %2973 = zext i1 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2973, i8* %2974, align 1, !tbaa !2432
  %2975 = trunc i64 %2969 to i32
  %2976 = and i32 %2975, 255
  %2977 = call i32 @llvm.ctpop.i32(i32 %2976) #16
  %2978 = trunc i32 %2977 to i8
  %2979 = and i8 %2978, 1
  %2980 = xor i8 %2979, 1
  %2981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2980, i8* %2981, align 1, !tbaa !2446
  %2982 = xor i64 4, %2966
  %2983 = xor i64 %2982, %2969
  %2984 = lshr i64 %2983, 4
  %2985 = trunc i64 %2984 to i8
  %2986 = and i8 %2985, 1
  %2987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2986, i8* %2987, align 1, !tbaa !2447
  %2988 = icmp eq i64 %2969, 0
  %2989 = zext i1 %2988 to i8
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2989, i8* %2990, align 1, !tbaa !2448
  %2991 = lshr i64 %2969, 63
  %2992 = trunc i64 %2991 to i8
  %2993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2992, i8* %2993, align 1, !tbaa !2449
  %2994 = lshr i64 %2966, 63
  %2995 = xor i64 %2991, %2994
  %2996 = add nuw nsw i64 %2995, %2991
  %2997 = icmp eq i64 %2996, 2
  %2998 = zext i1 %2997 to i8
  %2999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2998, i8* %2999, align 1, !tbaa !2450
  %3000 = load i64, i64* %RBP
  %3001 = sub i64 %3000, 8
  %3002 = load i64, i64* %RCX
  %3003 = load i64, i64* %PC
  %3004 = add i64 %3003, 4
  store i64 %3004, i64* %PC
  %3005 = inttoptr i64 %3001 to i64*
  store i64 %3002, i64* %3005
  %3006 = load i64, i64* %RAX
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 3
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i32*
  %3010 = load i32, i32* %3009
  %3011 = sext i32 %3010 to i64
  store i64 %3011, i64* %RAX, align 8, !tbaa !2428
  %3012 = load i64, i64* %RAX
  %3013 = mul i64 %3012, 8
  %3014 = add i64 %3013, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3015 = load i64, i64* %PC
  %3016 = add i64 %3015, 8
  store i64 %3016, i64* %PC
  %3017 = inttoptr i64 %3014 to i64*
  %3018 = load i64, i64* %3017
  store i64 %3018, i64* %RAX, align 8, !tbaa !2428
  %3019 = load i64, i64* %RBP
  %3020 = sub i64 %3019, 40
  %3021 = load i64, i64* %RAX
  %3022 = load i64, i64* %PC
  %3023 = add i64 %3022, 4
  store i64 %3023, i64* %PC
  %3024 = inttoptr i64 %3020 to i64*
  store i64 %3021, i64* %3024
  %3025 = load i64, i64* %PC
  %3026 = sub i64 %3025, 201
  %3027 = load i64, i64* %PC
  %3028 = add i64 %3027, 5
  store i64 %3028, i64* %PC
  %3029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3026, i64* %3029, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %3030 = load i64, i64* %RBP
  %3031 = sub i64 %3030, 12
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 7
  store i64 %3033, i64* %PC
  %3034 = inttoptr i64 %3031 to i32*
  store i32 3, i32* %3034
  br label %block_4005d7

block_400a87:                                     ; preds = %block_400a80, %block_40054b
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.15, %block_400a80 ], [ %MEMORY.22, %block_40054b ]
  %3035 = load i64, i64* %RBP
  %3036 = sub i64 %3035, 12
  %3037 = load i64, i64* %PC
  %3038 = add i64 %3037, 3
  store i64 %3038, i64* %PC
  %3039 = inttoptr i64 %3036 to i32*
  %3040 = load i32, i32* %3039
  %3041 = zext i32 %3040 to i64
  store i64 %3041, i64* %RDI, align 8, !tbaa !2428
  %3042 = load i64, i64* %PC
  %3043 = sub i64 %3042, 1434
  %3044 = load i64, i64* %PC
  %3045 = add i64 %3044, 5
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 5
  store i64 %3047, i64* %PC
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3049 = load i64, i64* %3048, align 8, !tbaa !2428
  %3050 = add i64 %3049, -8
  %3051 = inttoptr i64 %3050 to i64*
  store i64 %3045, i64* %3051
  store i64 %3050, i64* %3048, align 8, !tbaa !2428
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3043, i64* %3052, align 8, !tbaa !2428
  %3053 = load i64, i64* %PC
  %3054 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %3053, %struct.Memory* %MEMORY.31)
  %3055 = load i64, i64* %RBP
  %3056 = sub i64 %3055, 8
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 4
  store i64 %3058, i64* %PC
  %3059 = inttoptr i64 %3056 to i64*
  %3060 = load i64, i64* %3059
  store i64 %3060, i64* %RAX, align 8, !tbaa !2428
  %3061 = load i64, i64* %RAX
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 3
  store i64 %3063, i64* %PC
  store i64 %3061, i64* %RCX, align 8, !tbaa !2428
  %3064 = load i64, i64* %RCX
  %3065 = load i64, i64* %PC
  %3066 = add i64 %3065, 4
  store i64 %3066, i64* %PC
  %3067 = add i64 4, %3064
  store i64 %3067, i64* %RCX, align 8, !tbaa !2428
  %3068 = icmp ult i64 %3067, %3064
  %3069 = icmp ult i64 %3067, 4
  %3070 = or i1 %3068, %3069
  %3071 = zext i1 %3070 to i8
  %3072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3071, i8* %3072, align 1, !tbaa !2432
  %3073 = trunc i64 %3067 to i32
  %3074 = and i32 %3073, 255
  %3075 = call i32 @llvm.ctpop.i32(i32 %3074) #16
  %3076 = trunc i32 %3075 to i8
  %3077 = and i8 %3076, 1
  %3078 = xor i8 %3077, 1
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3078, i8* %3079, align 1, !tbaa !2446
  %3080 = xor i64 4, %3064
  %3081 = xor i64 %3080, %3067
  %3082 = lshr i64 %3081, 4
  %3083 = trunc i64 %3082 to i8
  %3084 = and i8 %3083, 1
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3084, i8* %3085, align 1, !tbaa !2447
  %3086 = icmp eq i64 %3067, 0
  %3087 = zext i1 %3086 to i8
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3087, i8* %3088, align 1, !tbaa !2448
  %3089 = lshr i64 %3067, 63
  %3090 = trunc i64 %3089 to i8
  %3091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3090, i8* %3091, align 1, !tbaa !2449
  %3092 = lshr i64 %3064, 63
  %3093 = xor i64 %3089, %3092
  %3094 = add nuw nsw i64 %3093, %3089
  %3095 = icmp eq i64 %3094, 2
  %3096 = zext i1 %3095 to i8
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3096, i8* %3097, align 1, !tbaa !2450
  %3098 = load i64, i64* %RBP
  %3099 = sub i64 %3098, 8
  %3100 = load i64, i64* %RCX
  %3101 = load i64, i64* %PC
  %3102 = add i64 %3101, 4
  store i64 %3102, i64* %PC
  %3103 = inttoptr i64 %3099 to i64*
  store i64 %3100, i64* %3103
  %3104 = load i64, i64* %RAX
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 3
  store i64 %3106, i64* %PC
  %3107 = inttoptr i64 %3104 to i32*
  %3108 = load i32, i32* %3107
  %3109 = sext i32 %3108 to i64
  store i64 %3109, i64* %RAX, align 8, !tbaa !2428
  %3110 = load i64, i64* %RAX
  %3111 = mul i64 %3110, 8
  %3112 = add i64 %3111, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3113 = load i64, i64* %PC
  %3114 = add i64 %3113, 8
  store i64 %3114, i64* %PC
  %3115 = inttoptr i64 %3112 to i64*
  %3116 = load i64, i64* %3115
  store i64 %3116, i64* %RAX, align 8, !tbaa !2428
  %3117 = load i64, i64* %RBP
  %3118 = sub i64 %3117, 40
  %3119 = load i64, i64* %RAX
  %3120 = load i64, i64* %PC
  %3121 = add i64 %3120, 4
  store i64 %3121, i64* %PC
  %3122 = inttoptr i64 %3118 to i64*
  store i64 %3119, i64* %3122
  %3123 = load i64, i64* %PC
  %3124 = sub i64 %3123, 1351
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 5
  store i64 %3126, i64* %PC
  %3127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3124, i64* %3127, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %3128 = load i64, i64* %RBP
  %3129 = sub i64 %3128, 12
  %3130 = load i64, i64* %PC
  %3131 = add i64 %3130, 7
  store i64 %3131, i64* %PC
  %3132 = inttoptr i64 %3129 to i32*
  store i32 22, i32* %3132
  br label %block_40098d

block_400559:                                     ; preds = %block_400566
  %3133 = load i64, i64* %RBP
  %3134 = sub i64 %3133, 12
  %3135 = load i64, i64* %PC
  %3136 = add i64 %3135, 7
  store i64 %3136, i64* %PC
  %3137 = inttoptr i64 %3134 to i32*
  store i32 0, i32* %3137
  br label %block_400560

block_400703:                                     ; preds = %block_40054b, %block_4006fc
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.15, %block_4006fc ], [ %MEMORY.22, %block_40054b ]
  %3138 = load i64, i64* %RBP
  %3139 = sub i64 %3138, 12
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 3
  store i64 %3141, i64* %PC
  %3142 = inttoptr i64 %3139 to i32*
  %3143 = load i32, i32* %3142
  %3144 = zext i32 %3143 to i64
  store i64 %3144, i64* %RDI, align 8, !tbaa !2428
  %3145 = load i64, i64* %PC
  %3146 = sub i64 %3145, 534
  %3147 = load i64, i64* %PC
  %3148 = add i64 %3147, 5
  %3149 = load i64, i64* %PC
  %3150 = add i64 %3149, 5
  store i64 %3150, i64* %PC
  %3151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3152 = load i64, i64* %3151, align 8, !tbaa !2428
  %3153 = add i64 %3152, -8
  %3154 = inttoptr i64 %3153 to i64*
  store i64 %3148, i64* %3154
  store i64 %3153, i64* %3151, align 8, !tbaa !2428
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3146, i64* %3155, align 8, !tbaa !2428
  %3156 = load i64, i64* %PC
  %3157 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %3156, %struct.Memory* %MEMORY.32)
  %3158 = load i64, i64* %RBP
  %3159 = sub i64 %3158, 8
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 4
  store i64 %3161, i64* %PC
  %3162 = inttoptr i64 %3159 to i64*
  %3163 = load i64, i64* %3162
  store i64 %3163, i64* %RAX, align 8, !tbaa !2428
  %3164 = load i64, i64* %RAX
  %3165 = load i64, i64* %PC
  %3166 = add i64 %3165, 3
  store i64 %3166, i64* %PC
  store i64 %3164, i64* %RCX, align 8, !tbaa !2428
  %3167 = load i64, i64* %RCX
  %3168 = load i64, i64* %PC
  %3169 = add i64 %3168, 4
  store i64 %3169, i64* %PC
  %3170 = add i64 4, %3167
  store i64 %3170, i64* %RCX, align 8, !tbaa !2428
  %3171 = icmp ult i64 %3170, %3167
  %3172 = icmp ult i64 %3170, 4
  %3173 = or i1 %3171, %3172
  %3174 = zext i1 %3173 to i8
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3174, i8* %3175, align 1, !tbaa !2432
  %3176 = trunc i64 %3170 to i32
  %3177 = and i32 %3176, 255
  %3178 = call i32 @llvm.ctpop.i32(i32 %3177) #16
  %3179 = trunc i32 %3178 to i8
  %3180 = and i8 %3179, 1
  %3181 = xor i8 %3180, 1
  %3182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3181, i8* %3182, align 1, !tbaa !2446
  %3183 = xor i64 4, %3167
  %3184 = xor i64 %3183, %3170
  %3185 = lshr i64 %3184, 4
  %3186 = trunc i64 %3185 to i8
  %3187 = and i8 %3186, 1
  %3188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3187, i8* %3188, align 1, !tbaa !2447
  %3189 = icmp eq i64 %3170, 0
  %3190 = zext i1 %3189 to i8
  %3191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3190, i8* %3191, align 1, !tbaa !2448
  %3192 = lshr i64 %3170, 63
  %3193 = trunc i64 %3192 to i8
  %3194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3193, i8* %3194, align 1, !tbaa !2449
  %3195 = lshr i64 %3167, 63
  %3196 = xor i64 %3192, %3195
  %3197 = add nuw nsw i64 %3196, %3192
  %3198 = icmp eq i64 %3197, 2
  %3199 = zext i1 %3198 to i8
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3199, i8* %3200, align 1, !tbaa !2450
  %3201 = load i64, i64* %RBP
  %3202 = sub i64 %3201, 8
  %3203 = load i64, i64* %RCX
  %3204 = load i64, i64* %PC
  %3205 = add i64 %3204, 4
  store i64 %3205, i64* %PC
  %3206 = inttoptr i64 %3202 to i64*
  store i64 %3203, i64* %3206
  %3207 = load i64, i64* %RAX
  %3208 = load i64, i64* %PC
  %3209 = add i64 %3208, 3
  store i64 %3209, i64* %PC
  %3210 = inttoptr i64 %3207 to i32*
  %3211 = load i32, i32* %3210
  %3212 = sext i32 %3211 to i64
  store i64 %3212, i64* %RAX, align 8, !tbaa !2428
  %3213 = load i64, i64* %RAX
  %3214 = mul i64 %3213, 8
  %3215 = add i64 %3214, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3216 = load i64, i64* %PC
  %3217 = add i64 %3216, 8
  store i64 %3217, i64* %PC
  %3218 = inttoptr i64 %3215 to i64*
  %3219 = load i64, i64* %3218
  store i64 %3219, i64* %RAX, align 8, !tbaa !2428
  %3220 = load i64, i64* %RBP
  %3221 = sub i64 %3220, 40
  %3222 = load i64, i64* %RAX
  %3223 = load i64, i64* %PC
  %3224 = add i64 %3223, 4
  store i64 %3224, i64* %PC
  %3225 = inttoptr i64 %3221 to i64*
  store i64 %3222, i64* %3225
  %3226 = load i64, i64* %PC
  %3227 = sub i64 %3226, 451
  %3228 = load i64, i64* %PC
  %3229 = add i64 %3228, 5
  store i64 %3229, i64* %PC
  %3230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3227, i64* %3230, align 8, !tbaa !2428
  br label %block_400566

block_400ab9:                                     ; preds = %block_400ab2, %block_40054b
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.15, %block_400ab2 ], [ %MEMORY.22, %block_40054b ]
  %3231 = load i64, i64* %RBP
  %3232 = sub i64 %3231, 12
  %3233 = load i64, i64* %PC
  %3234 = add i64 %3233, 3
  store i64 %3234, i64* %PC
  %3235 = inttoptr i64 %3232 to i32*
  %3236 = load i32, i32* %3235
  %3237 = zext i32 %3236 to i64
  store i64 %3237, i64* %RDI, align 8, !tbaa !2428
  %3238 = load i64, i64* %PC
  %3239 = sub i64 %3238, 1484
  %3240 = load i64, i64* %PC
  %3241 = add i64 %3240, 5
  %3242 = load i64, i64* %PC
  %3243 = add i64 %3242, 5
  store i64 %3243, i64* %PC
  %3244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3245 = load i64, i64* %3244, align 8, !tbaa !2428
  %3246 = add i64 %3245, -8
  %3247 = inttoptr i64 %3246 to i64*
  store i64 %3241, i64* %3247
  store i64 %3246, i64* %3244, align 8, !tbaa !2428
  %3248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3239, i64* %3248, align 8, !tbaa !2428
  %3249 = load i64, i64* %PC
  %3250 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %3249, %struct.Memory* %MEMORY.33)
  %3251 = load i64, i64* %RBP
  %3252 = sub i64 %3251, 8
  %3253 = load i64, i64* %PC
  %3254 = add i64 %3253, 4
  store i64 %3254, i64* %PC
  %3255 = inttoptr i64 %3252 to i64*
  %3256 = load i64, i64* %3255
  store i64 %3256, i64* %RAX, align 8, !tbaa !2428
  %3257 = load i64, i64* %RAX
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 3
  store i64 %3259, i64* %PC
  store i64 %3257, i64* %RCX, align 8, !tbaa !2428
  %3260 = load i64, i64* %RCX
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 4
  store i64 %3262, i64* %PC
  %3263 = add i64 4, %3260
  store i64 %3263, i64* %RCX, align 8, !tbaa !2428
  %3264 = icmp ult i64 %3263, %3260
  %3265 = icmp ult i64 %3263, 4
  %3266 = or i1 %3264, %3265
  %3267 = zext i1 %3266 to i8
  %3268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3267, i8* %3268, align 1, !tbaa !2432
  %3269 = trunc i64 %3263 to i32
  %3270 = and i32 %3269, 255
  %3271 = call i32 @llvm.ctpop.i32(i32 %3270) #16
  %3272 = trunc i32 %3271 to i8
  %3273 = and i8 %3272, 1
  %3274 = xor i8 %3273, 1
  %3275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3274, i8* %3275, align 1, !tbaa !2446
  %3276 = xor i64 4, %3260
  %3277 = xor i64 %3276, %3263
  %3278 = lshr i64 %3277, 4
  %3279 = trunc i64 %3278 to i8
  %3280 = and i8 %3279, 1
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3280, i8* %3281, align 1, !tbaa !2447
  %3282 = icmp eq i64 %3263, 0
  %3283 = zext i1 %3282 to i8
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3283, i8* %3284, align 1, !tbaa !2448
  %3285 = lshr i64 %3263, 63
  %3286 = trunc i64 %3285 to i8
  %3287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3286, i8* %3287, align 1, !tbaa !2449
  %3288 = lshr i64 %3260, 63
  %3289 = xor i64 %3285, %3288
  %3290 = add nuw nsw i64 %3289, %3285
  %3291 = icmp eq i64 %3290, 2
  %3292 = zext i1 %3291 to i8
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3292, i8* %3293, align 1, !tbaa !2450
  %3294 = load i64, i64* %RBP
  %3295 = sub i64 %3294, 8
  %3296 = load i64, i64* %RCX
  %3297 = load i64, i64* %PC
  %3298 = add i64 %3297, 4
  store i64 %3298, i64* %PC
  %3299 = inttoptr i64 %3295 to i64*
  store i64 %3296, i64* %3299
  %3300 = load i64, i64* %RAX
  %3301 = load i64, i64* %PC
  %3302 = add i64 %3301, 3
  store i64 %3302, i64* %PC
  %3303 = inttoptr i64 %3300 to i32*
  %3304 = load i32, i32* %3303
  %3305 = sext i32 %3304 to i64
  store i64 %3305, i64* %RAX, align 8, !tbaa !2428
  %3306 = load i64, i64* %RAX
  %3307 = mul i64 %3306, 8
  %3308 = add i64 %3307, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 8
  store i64 %3310, i64* %PC
  %3311 = inttoptr i64 %3308 to i64*
  %3312 = load i64, i64* %3311
  store i64 %3312, i64* %RAX, align 8, !tbaa !2428
  %3313 = load i64, i64* %RBP
  %3314 = sub i64 %3313, 40
  %3315 = load i64, i64* %RAX
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 4
  store i64 %3317, i64* %PC
  %3318 = inttoptr i64 %3314 to i64*
  store i64 %3315, i64* %3318
  %3319 = load i64, i64* %PC
  %3320 = sub i64 %3319, 1401
  %3321 = load i64, i64* %PC
  %3322 = add i64 %3321, 5
  store i64 %3322, i64* %PC
  %3323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3320, i64* %3323, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %3324 = load i64, i64* %RBP
  %3325 = sub i64 %3324, 12
  %3326 = load i64, i64* %PC
  %3327 = add i64 %3326, 7
  store i64 %3327, i64* %PC
  %3328 = inttoptr i64 %3325 to i32*
  store i32 4, i32* %3328
  br label %block_400609

block_400a80:                                     ; preds = %block_400566
  %3329 = load i64, i64* %RBP
  %3330 = sub i64 %3329, 12
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 7
  store i64 %3332, i64* %PC
  %3333 = inttoptr i64 %3330 to i32*
  store i32 27, i32* %3333
  br label %block_400a87

; <label>:3334:                                   ; preds = %block_40054b
  %3335 = load i64, i64* %PC
  %3336 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %3335, %struct.Memory* %MEMORY.22)
  ret %struct.Memory* %3336

; <label>:3337:                                   ; preds = %block_400566
  %3338 = load i64, i64* %PC
  %3339 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3338, %struct.Memory* %MEMORY.15)
  ret %struct.Memory* %3339
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b1d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400b1d

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400698, %block_400a1c, %block_400b1d, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %1632, %block_400b1d ], [ %1434, %block_400922 ], [ %1336, %block_400828 ], [ %1238, %block_40072e ], [ %1140, %block_400ab2 ], [ %1042, %block_400634 ], [ %944, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %846, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %1532, %block_40059e ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %1730, %block_400a1c ], [ %1828, %block_400698 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %1942 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 0, i32* %730
  %731 = load i64, i64* %RSP
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = add i64 48, %731
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %731
  %736 = icmp ult i64 %734, 48
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 48, %731
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i64 %731, 63
  %760 = xor i64 %756, %759
  %761 = add nuw nsw i64 %760, %756
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %768 = load i64, i64* %767, align 8, !tbaa !2428
  %769 = add i64 %768, 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %RBP, align 8, !tbaa !2428
  store i64 %769, i64* %767, align 8, !tbaa !2428
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 1
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %774, align 8, !tbaa !2428
  %779 = add i64 %776, 8
  store i64 %779, i64* %775, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400954:                                     ; preds = %block_400566
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 7
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  store i32 21, i32* %784
  %785 = load i64, i64* %PC
  %786 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %785, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %786

block_400a4e:                                     ; preds = %block_400566
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 12
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 7
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i32*
  store i32 26, i32* %791
  %792 = load i64, i64* %PC
  %793 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %792, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %793

block_4006ca:                                     ; preds = %block_400566
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 12
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 7
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i32*
  store i32 8, i32* %798
  %799 = load i64, i64* %PC
  %800 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %799, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %800

block_400b48:                                     ; preds = %block_400566
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 12
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 7
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i32*
  store i32 31, i32* %805
  %806 = load i64, i64* %PC
  %807 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %806, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %807

block_4007c4:                                     ; preds = %block_400566
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 12
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 7
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i32*
  store i32 13, i32* %812
  %813 = load i64, i64* %PC
  %814 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %813, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %814

block_4008be:                                     ; preds = %block_400566
  %815 = load i64, i64* %RBP
  %816 = sub i64 %815, 12
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %816 to i32*
  store i32 18, i32* %819
  %820 = load i64, i64* %PC
  %821 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %820, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %821

block_40056c:                                     ; preds = %block_400566
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 12
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 7
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i32*
  store i32 1, i32* %826
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 12
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 3
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  %832 = load i32, i32* %831
  %833 = zext i32 %832 to i64
  store i64 %833, i64* %RDI, align 8, !tbaa !2428
  %834 = load i64, i64* %PC
  %835 = sub i64 %834, 134
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 5
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 5
  store i64 %839, i64* %PC
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %841 = load i64, i64* %840, align 8, !tbaa !2428
  %842 = add i64 %841, -8
  %843 = inttoptr i64 %842 to i64*
  store i64 %837, i64* %843
  store i64 %842, i64* %840, align 8, !tbaa !2428
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %835, i64* %844, align 8, !tbaa !2428
  %845 = load i64, i64* %PC
  %846 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %845, %struct.Memory* %MEMORY.0)
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RAX, align 8, !tbaa !2428
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 3
  store i64 %855, i64* %PC
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %856 = load i64, i64* %RCX
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 4
  store i64 %858, i64* %PC
  %859 = add i64 4, %856
  store i64 %859, i64* %RCX, align 8, !tbaa !2428
  %860 = icmp ult i64 %859, %856
  %861 = icmp ult i64 %859, 4
  %862 = or i1 %860, %861
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %864, align 1, !tbaa !2432
  %865 = trunc i64 %859 to i32
  %866 = and i32 %865, 255
  %867 = call i32 @llvm.ctpop.i32(i32 %866) #16
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %870, i8* %871, align 1, !tbaa !2446
  %872 = xor i64 4, %856
  %873 = xor i64 %872, %859
  %874 = lshr i64 %873, 4
  %875 = trunc i64 %874 to i8
  %876 = and i8 %875, 1
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %876, i8* %877, align 1, !tbaa !2447
  %878 = icmp eq i64 %859, 0
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %879, i8* %880, align 1, !tbaa !2448
  %881 = lshr i64 %859, 63
  %882 = trunc i64 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %882, i8* %883, align 1, !tbaa !2449
  %884 = lshr i64 %856, 63
  %885 = xor i64 %881, %884
  %886 = add nuw nsw i64 %885, %881
  %887 = icmp eq i64 %886, 2
  %888 = zext i1 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %888, i8* %889, align 1, !tbaa !2450
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 8
  %892 = load i64, i64* %RCX
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 4
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %891 to i64*
  store i64 %892, i64* %895
  %896 = load i64, i64* %RAX
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 3
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %896 to i32*
  %900 = load i32, i32* %899
  %901 = sext i32 %900 to i64
  store i64 %901, i64* %RAX, align 8, !tbaa !2428
  %902 = load i64, i64* %RAX
  %903 = mul i64 %902, 8
  %904 = add i64 %903, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 8
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %904 to i64*
  %908 = load i64, i64* %907
  store i64 %908, i64* %RAX, align 8, !tbaa !2428
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 40
  %911 = load i64, i64* %RAX
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 4
  store i64 %913, i64* %PC
  %914 = inttoptr i64 %910 to i64*
  store i64 %911, i64* %914
  %915 = load i64, i64* %PC
  %916 = sub i64 %915, 51
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 5
  store i64 %918, i64* %PC
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %916, i64* %919, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %920 = load i64, i64* %RBP
  %921 = sub i64 %920, 12
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 7
  store i64 %923, i64* %PC
  %924 = inttoptr i64 %921 to i32*
  store i32 23, i32* %924
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 12
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929
  %931 = zext i32 %930 to i64
  store i64 %931, i64* %RDI, align 8, !tbaa !2428
  %932 = load i64, i64* %PC
  %933 = sub i64 %932, 1234
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 5
  store i64 %937, i64* %PC
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %939 = load i64, i64* %938, align 8, !tbaa !2428
  %940 = add i64 %939, -8
  %941 = inttoptr i64 %940 to i64*
  store i64 %935, i64* %941
  store i64 %940, i64* %938, align 8, !tbaa !2428
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %933, i64* %942, align 8, !tbaa !2428
  %943 = load i64, i64* %PC
  %944 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %943, %struct.Memory* %MEMORY.0)
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 8
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %RAX, align 8, !tbaa !2428
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 3
  store i64 %953, i64* %PC
  store i64 %951, i64* %RCX, align 8, !tbaa !2428
  %954 = load i64, i64* %RCX
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 4
  store i64 %956, i64* %PC
  %957 = add i64 4, %954
  store i64 %957, i64* %RCX, align 8, !tbaa !2428
  %958 = icmp ult i64 %957, %954
  %959 = icmp ult i64 %957, 4
  %960 = or i1 %958, %959
  %961 = zext i1 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %961, i8* %962, align 1, !tbaa !2432
  %963 = trunc i64 %957 to i32
  %964 = and i32 %963, 255
  %965 = call i32 @llvm.ctpop.i32(i32 %964) #16
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = xor i8 %967, 1
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %968, i8* %969, align 1, !tbaa !2446
  %970 = xor i64 4, %954
  %971 = xor i64 %970, %957
  %972 = lshr i64 %971, 4
  %973 = trunc i64 %972 to i8
  %974 = and i8 %973, 1
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %974, i8* %975, align 1, !tbaa !2447
  %976 = icmp eq i64 %957, 0
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %977, i8* %978, align 1, !tbaa !2448
  %979 = lshr i64 %957, 63
  %980 = trunc i64 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %980, i8* %981, align 1, !tbaa !2449
  %982 = lshr i64 %954, 63
  %983 = xor i64 %979, %982
  %984 = add nuw nsw i64 %983, %979
  %985 = icmp eq i64 %984, 2
  %986 = zext i1 %985 to i8
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %986, i8* %987, align 1, !tbaa !2450
  %988 = load i64, i64* %RBP
  %989 = sub i64 %988, 8
  %990 = load i64, i64* %RCX
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 4
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %989 to i64*
  store i64 %990, i64* %993
  %994 = load i64, i64* %RAX
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 3
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i32*
  %998 = load i32, i32* %997
  %999 = sext i32 %998 to i64
  store i64 %999, i64* %RAX, align 8, !tbaa !2428
  %1000 = load i64, i64* %RAX
  %1001 = mul i64 %1000, 8
  %1002 = add i64 %1001, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 8
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1002 to i64*
  %1006 = load i64, i64* %1005
  store i64 %1006, i64* %RAX, align 8, !tbaa !2428
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 40
  %1009 = load i64, i64* %RAX
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 4
  store i64 %1011, i64* %PC
  %1012 = inttoptr i64 %1008 to i64*
  store i64 %1009, i64* %1012
  %1013 = load i64, i64* %PC
  %1014 = sub i64 %1013, 1151
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 5
  store i64 %1016, i64* %PC
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1014, i64* %1017, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1018 = load i64, i64* %RBP
  %1019 = sub i64 %1018, 12
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 7
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i32*
  store i32 5, i32* %1022
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 12
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 3
  store i64 %1026, i64* %PC
  %1027 = inttoptr i64 %1024 to i32*
  %1028 = load i32, i32* %1027
  %1029 = zext i32 %1028 to i64
  store i64 %1029, i64* %RDI, align 8, !tbaa !2428
  %1030 = load i64, i64* %PC
  %1031 = sub i64 %1030, 334
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1037 = load i64, i64* %1036, align 8, !tbaa !2428
  %1038 = add i64 %1037, -8
  %1039 = inttoptr i64 %1038 to i64*
  store i64 %1033, i64* %1039
  store i64 %1038, i64* %1036, align 8, !tbaa !2428
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1031, i64* %1040, align 8, !tbaa !2428
  %1041 = load i64, i64* %PC
  %1042 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1041, %struct.Memory* %MEMORY.0)
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 8
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 4
  store i64 %1046, i64* %PC
  %1047 = inttoptr i64 %1044 to i64*
  %1048 = load i64, i64* %1047
  store i64 %1048, i64* %RAX, align 8, !tbaa !2428
  %1049 = load i64, i64* %RAX
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 3
  store i64 %1051, i64* %PC
  store i64 %1049, i64* %RCX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RCX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = add i64 4, %1052
  store i64 %1055, i64* %RCX, align 8, !tbaa !2428
  %1056 = icmp ult i64 %1055, %1052
  %1057 = icmp ult i64 %1055, 4
  %1058 = or i1 %1056, %1057
  %1059 = zext i1 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1059, i8* %1060, align 1, !tbaa !2432
  %1061 = trunc i64 %1055 to i32
  %1062 = and i32 %1061, 255
  %1063 = call i32 @llvm.ctpop.i32(i32 %1062) #16
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = xor i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1066, i8* %1067, align 1, !tbaa !2446
  %1068 = xor i64 4, %1052
  %1069 = xor i64 %1068, %1055
  %1070 = lshr i64 %1069, 4
  %1071 = trunc i64 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1072, i8* %1073, align 1, !tbaa !2447
  %1074 = icmp eq i64 %1055, 0
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1075, i8* %1076, align 1, !tbaa !2448
  %1077 = lshr i64 %1055, 63
  %1078 = trunc i64 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1078, i8* %1079, align 1, !tbaa !2449
  %1080 = lshr i64 %1052, 63
  %1081 = xor i64 %1077, %1080
  %1082 = add nuw nsw i64 %1081, %1077
  %1083 = icmp eq i64 %1082, 2
  %1084 = zext i1 %1083 to i8
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1084, i8* %1085, align 1, !tbaa !2450
  %1086 = load i64, i64* %RBP
  %1087 = sub i64 %1086, 8
  %1088 = load i64, i64* %RCX
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 4
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1087 to i64*
  store i64 %1088, i64* %1091
  %1092 = load i64, i64* %RAX
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 3
  store i64 %1094, i64* %PC
  %1095 = inttoptr i64 %1092 to i32*
  %1096 = load i32, i32* %1095
  %1097 = sext i32 %1096 to i64
  store i64 %1097, i64* %RAX, align 8, !tbaa !2428
  %1098 = load i64, i64* %RAX
  %1099 = mul i64 %1098, 8
  %1100 = add i64 %1099, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 8
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1100 to i64*
  %1104 = load i64, i64* %1103
  store i64 %1104, i64* %RAX, align 8, !tbaa !2428
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 40
  %1107 = load i64, i64* %RAX
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1106 to i64*
  store i64 %1107, i64* %1110
  %1111 = load i64, i64* %PC
  %1112 = sub i64 %1111, 251
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 5
  store i64 %1114, i64* %PC
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1112, i64* %1115, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1116 = load i64, i64* %RBP
  %1117 = sub i64 %1116, 12
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 7
  store i64 %1119, i64* %PC
  %1120 = inttoptr i64 %1117 to i32*
  store i32 28, i32* %1120
  %1121 = load i64, i64* %RBP
  %1122 = sub i64 %1121, 12
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 3
  store i64 %1124, i64* %PC
  %1125 = inttoptr i64 %1122 to i32*
  %1126 = load i32, i32* %1125
  %1127 = zext i32 %1126 to i64
  store i64 %1127, i64* %RDI, align 8, !tbaa !2428
  %1128 = load i64, i64* %PC
  %1129 = sub i64 %1128, 1484
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 5
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 5
  store i64 %1133, i64* %PC
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1135 = load i64, i64* %1134, align 8, !tbaa !2428
  %1136 = add i64 %1135, -8
  %1137 = inttoptr i64 %1136 to i64*
  store i64 %1131, i64* %1137
  store i64 %1136, i64* %1134, align 8, !tbaa !2428
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1129, i64* %1138, align 8, !tbaa !2428
  %1139 = load i64, i64* %PC
  %1140 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1139, %struct.Memory* %MEMORY.0)
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 8
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 4
  store i64 %1144, i64* %PC
  %1145 = inttoptr i64 %1142 to i64*
  %1146 = load i64, i64* %1145
  store i64 %1146, i64* %RAX, align 8, !tbaa !2428
  %1147 = load i64, i64* %RAX
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 3
  store i64 %1149, i64* %PC
  store i64 %1147, i64* %RCX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RCX
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %PC
  %1153 = add i64 4, %1150
  store i64 %1153, i64* %RCX, align 8, !tbaa !2428
  %1154 = icmp ult i64 %1153, %1150
  %1155 = icmp ult i64 %1153, 4
  %1156 = or i1 %1154, %1155
  %1157 = zext i1 %1156 to i8
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1157, i8* %1158, align 1, !tbaa !2432
  %1159 = trunc i64 %1153 to i32
  %1160 = and i32 %1159, 255
  %1161 = call i32 @llvm.ctpop.i32(i32 %1160) #16
  %1162 = trunc i32 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = xor i8 %1163, 1
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1164, i8* %1165, align 1, !tbaa !2446
  %1166 = xor i64 4, %1150
  %1167 = xor i64 %1166, %1153
  %1168 = lshr i64 %1167, 4
  %1169 = trunc i64 %1168 to i8
  %1170 = and i8 %1169, 1
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1170, i8* %1171, align 1, !tbaa !2447
  %1172 = icmp eq i64 %1153, 0
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1173, i8* %1174, align 1, !tbaa !2448
  %1175 = lshr i64 %1153, 63
  %1176 = trunc i64 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1176, i8* %1177, align 1, !tbaa !2449
  %1178 = lshr i64 %1150, 63
  %1179 = xor i64 %1175, %1178
  %1180 = add nuw nsw i64 %1179, %1175
  %1181 = icmp eq i64 %1180, 2
  %1182 = zext i1 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1182, i8* %1183, align 1, !tbaa !2450
  %1184 = load i64, i64* %RBP
  %1185 = sub i64 %1184, 8
  %1186 = load i64, i64* %RCX
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 4
  store i64 %1188, i64* %PC
  %1189 = inttoptr i64 %1185 to i64*
  store i64 %1186, i64* %1189
  %1190 = load i64, i64* %RAX
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 3
  store i64 %1192, i64* %PC
  %1193 = inttoptr i64 %1190 to i32*
  %1194 = load i32, i32* %1193
  %1195 = sext i32 %1194 to i64
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = load i64, i64* %RAX
  %1197 = mul i64 %1196, 8
  %1198 = add i64 %1197, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 8
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i64*
  %1202 = load i64, i64* %1201
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  %1203 = load i64, i64* %RBP
  %1204 = sub i64 %1203, 40
  %1205 = load i64, i64* %RAX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1204 to i64*
  store i64 %1205, i64* %1208
  %1209 = load i64, i64* %PC
  %1210 = sub i64 %1209, 1401
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 5
  store i64 %1212, i64* %PC
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1210, i64* %1213, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 12
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 7
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i32*
  store i32 10, i32* %1218
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 12
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 3
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i32*
  %1224 = load i32, i32* %1223
  %1225 = zext i32 %1224 to i64
  store i64 %1225, i64* %RDI, align 8, !tbaa !2428
  %1226 = load i64, i64* %PC
  %1227 = sub i64 %1226, 584
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 5
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  store i64 %1231, i64* %PC
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1233 = load i64, i64* %1232, align 8, !tbaa !2428
  %1234 = add i64 %1233, -8
  %1235 = inttoptr i64 %1234 to i64*
  store i64 %1229, i64* %1235
  store i64 %1234, i64* %1232, align 8, !tbaa !2428
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1227, i64* %1236, align 8, !tbaa !2428
  %1237 = load i64, i64* %PC
  %1238 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1237, %struct.Memory* %MEMORY.0)
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 8
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 4
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i64*
  %1244 = load i64, i64* %1243
  store i64 %1244, i64* %RAX, align 8, !tbaa !2428
  %1245 = load i64, i64* %RAX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 3
  store i64 %1247, i64* %PC
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RCX
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 4
  store i64 %1250, i64* %PC
  %1251 = add i64 4, %1248
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = icmp ult i64 %1251, %1248
  %1253 = icmp ult i64 %1251, 4
  %1254 = or i1 %1252, %1253
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1255, i8* %1256, align 1, !tbaa !2432
  %1257 = trunc i64 %1251 to i32
  %1258 = and i32 %1257, 255
  %1259 = call i32 @llvm.ctpop.i32(i32 %1258) #16
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1262, i8* %1263, align 1, !tbaa !2446
  %1264 = xor i64 4, %1248
  %1265 = xor i64 %1264, %1251
  %1266 = lshr i64 %1265, 4
  %1267 = trunc i64 %1266 to i8
  %1268 = and i8 %1267, 1
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1268, i8* %1269, align 1, !tbaa !2447
  %1270 = icmp eq i64 %1251, 0
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1271, i8* %1272, align 1, !tbaa !2448
  %1273 = lshr i64 %1251, 63
  %1274 = trunc i64 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1274, i8* %1275, align 1, !tbaa !2449
  %1276 = lshr i64 %1248, 63
  %1277 = xor i64 %1273, %1276
  %1278 = add nuw nsw i64 %1277, %1273
  %1279 = icmp eq i64 %1278, 2
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1280, i8* %1281, align 1, !tbaa !2450
  %1282 = load i64, i64* %RBP
  %1283 = sub i64 %1282, 8
  %1284 = load i64, i64* %RCX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 4
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1283 to i64*
  store i64 %1284, i64* %1287
  %1288 = load i64, i64* %RAX
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 3
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sext i32 %1292 to i64
  store i64 %1293, i64* %RAX, align 8, !tbaa !2428
  %1294 = load i64, i64* %RAX
  %1295 = mul i64 %1294, 8
  %1296 = add i64 %1295, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 8
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1296 to i64*
  %1300 = load i64, i64* %1299
  store i64 %1300, i64* %RAX, align 8, !tbaa !2428
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 40
  %1303 = load i64, i64* %RAX
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 4
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1302 to i64*
  store i64 %1303, i64* %1306
  %1307 = load i64, i64* %PC
  %1308 = sub i64 %1307, 501
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 5
  store i64 %1310, i64* %PC
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1308, i64* %1311, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 12
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 7
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i32*
  store i32 15, i32* %1316
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = zext i32 %1322 to i64
  store i64 %1323, i64* %RDI, align 8, !tbaa !2428
  %1324 = load i64, i64* %PC
  %1325 = sub i64 %1324, 834
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  %1328 = load i64, i64* %PC
  %1329 = add i64 %1328, 5
  store i64 %1329, i64* %PC
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1331 = load i64, i64* %1330, align 8, !tbaa !2428
  %1332 = add i64 %1331, -8
  %1333 = inttoptr i64 %1332 to i64*
  store i64 %1327, i64* %1333
  store i64 %1332, i64* %1330, align 8, !tbaa !2428
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1325, i64* %1334, align 8, !tbaa !2428
  %1335 = load i64, i64* %PC
  %1336 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1335, %struct.Memory* %MEMORY.0)
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 8
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 4
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i64*
  %1342 = load i64, i64* %1341
  store i64 %1342, i64* %RAX, align 8, !tbaa !2428
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  store i64 %1343, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 4
  store i64 %1348, i64* %PC
  %1349 = add i64 4, %1346
  store i64 %1349, i64* %RCX, align 8, !tbaa !2428
  %1350 = icmp ult i64 %1349, %1346
  %1351 = icmp ult i64 %1349, 4
  %1352 = or i1 %1350, %1351
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1353, i8* %1354, align 1, !tbaa !2432
  %1355 = trunc i64 %1349 to i32
  %1356 = and i32 %1355, 255
  %1357 = call i32 @llvm.ctpop.i32(i32 %1356) #16
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1360, i8* %1361, align 1, !tbaa !2446
  %1362 = xor i64 4, %1346
  %1363 = xor i64 %1362, %1349
  %1364 = lshr i64 %1363, 4
  %1365 = trunc i64 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1366, i8* %1367, align 1, !tbaa !2447
  %1368 = icmp eq i64 %1349, 0
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1369, i8* %1370, align 1, !tbaa !2448
  %1371 = lshr i64 %1349, 63
  %1372 = trunc i64 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1372, i8* %1373, align 1, !tbaa !2449
  %1374 = lshr i64 %1346, 63
  %1375 = xor i64 %1371, %1374
  %1376 = add nuw nsw i64 %1375, %1371
  %1377 = icmp eq i64 %1376, 2
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1378, i8* %1379, align 1, !tbaa !2450
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 8
  %1382 = load i64, i64* %RCX
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1381 to i64*
  store i64 %1382, i64* %1385
  %1386 = load i64, i64* %RAX
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 3
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i32*
  %1390 = load i32, i32* %1389
  %1391 = sext i32 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = load i64, i64* %RAX
  %1393 = mul i64 %1392, 8
  %1394 = add i64 %1393, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 8
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 40
  %1401 = load i64, i64* %RAX
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1400 to i64*
  store i64 %1401, i64* %1404
  %1405 = load i64, i64* %PC
  %1406 = sub i64 %1405, 751
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1406, i64* %1409, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 12
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 7
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i32*
  store i32 20, i32* %1414
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RDI, align 8, !tbaa !2428
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1084
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1433, %struct.Memory* %MEMORY.0)
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 8
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 4
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RAX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 3
  store i64 %1443, i64* %PC
  store i64 %1441, i64* %RCX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RCX
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = add i64 4, %1444
  store i64 %1447, i64* %RCX, align 8, !tbaa !2428
  %1448 = icmp ult i64 %1447, %1444
  %1449 = icmp ult i64 %1447, 4
  %1450 = or i1 %1448, %1449
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1451, i8* %1452, align 1, !tbaa !2432
  %1453 = trunc i64 %1447 to i32
  %1454 = and i32 %1453, 255
  %1455 = call i32 @llvm.ctpop.i32(i32 %1454) #16
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1458, i8* %1459, align 1, !tbaa !2446
  %1460 = xor i64 4, %1444
  %1461 = xor i64 %1460, %1447
  %1462 = lshr i64 %1461, 4
  %1463 = trunc i64 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1464, i8* %1465, align 1, !tbaa !2447
  %1466 = icmp eq i64 %1447, 0
  %1467 = zext i1 %1466 to i8
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1467, i8* %1468, align 1, !tbaa !2448
  %1469 = lshr i64 %1447, 63
  %1470 = trunc i64 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1470, i8* %1471, align 1, !tbaa !2449
  %1472 = lshr i64 %1444, 63
  %1473 = xor i64 %1469, %1472
  %1474 = add nuw nsw i64 %1473, %1469
  %1475 = icmp eq i64 %1474, 2
  %1476 = zext i1 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1476, i8* %1477, align 1, !tbaa !2450
  %1478 = load i64, i64* %RBP
  %1479 = sub i64 %1478, 8
  %1480 = load i64, i64* %RCX
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1479 to i64*
  store i64 %1480, i64* %1483
  %1484 = load i64, i64* %RAX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i64, i64* %RAX
  %1491 = mul i64 %1490, 8
  %1492 = add i64 %1491, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 8
  store i64 %1494, i64* %PC
  %1495 = inttoptr i64 %1492 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i64, i64* %RAX
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1498 to i64*
  store i64 %1499, i64* %1502
  %1503 = load i64, i64* %PC
  %1504 = sub i64 %1503, 1001
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 5
  store i64 %1506, i64* %PC
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1504, i64* %1507, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 12
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 7
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  store i32 2, i32* %1512
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 3
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  %1518 = load i32, i32* %1517
  %1519 = zext i32 %1518 to i64
  store i64 %1519, i64* %RDI, align 8, !tbaa !2428
  %1520 = load i64, i64* %PC
  %1521 = sub i64 %1520, 184
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  store i64 %1525, i64* %PC
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1527 = load i64, i64* %1526, align 8, !tbaa !2428
  %1528 = add i64 %1527, -8
  %1529 = inttoptr i64 %1528 to i64*
  store i64 %1523, i64* %1529
  store i64 %1528, i64* %1526, align 8, !tbaa !2428
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1521, i64* %1530, align 8, !tbaa !2428
  %1531 = load i64, i64* %PC
  %1532 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1531, %struct.Memory* %MEMORY.0)
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 8
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 4
  store i64 %1536, i64* %PC
  %1537 = inttoptr i64 %1534 to i64*
  %1538 = load i64, i64* %1537
  store i64 %1538, i64* %RAX, align 8, !tbaa !2428
  %1539 = load i64, i64* %RAX
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 3
  store i64 %1541, i64* %PC
  store i64 %1539, i64* %RCX, align 8, !tbaa !2428
  %1542 = load i64, i64* %RCX
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 4
  store i64 %1544, i64* %PC
  %1545 = add i64 4, %1542
  store i64 %1545, i64* %RCX, align 8, !tbaa !2428
  %1546 = icmp ult i64 %1545, %1542
  %1547 = icmp ult i64 %1545, 4
  %1548 = or i1 %1546, %1547
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1549, i8* %1550, align 1, !tbaa !2432
  %1551 = trunc i64 %1545 to i32
  %1552 = and i32 %1551, 255
  %1553 = call i32 @llvm.ctpop.i32(i32 %1552) #16
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1556, i8* %1557, align 1, !tbaa !2446
  %1558 = xor i64 4, %1542
  %1559 = xor i64 %1558, %1545
  %1560 = lshr i64 %1559, 4
  %1561 = trunc i64 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1562, i8* %1563, align 1, !tbaa !2447
  %1564 = icmp eq i64 %1545, 0
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1565, i8* %1566, align 1, !tbaa !2448
  %1567 = lshr i64 %1545, 63
  %1568 = trunc i64 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1568, i8* %1569, align 1, !tbaa !2449
  %1570 = lshr i64 %1542, 63
  %1571 = xor i64 %1567, %1570
  %1572 = add nuw nsw i64 %1571, %1567
  %1573 = icmp eq i64 %1572, 2
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1574, i8* %1575, align 1, !tbaa !2450
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 8
  %1578 = load i64, i64* %RCX
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 4
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1577 to i64*
  store i64 %1578, i64* %1581
  %1582 = load i64, i64* %RAX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = mul i64 %1588, 8
  %1590 = add i64 %1589, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 8
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1590 to i64*
  %1594 = load i64, i64* %1593
  store i64 %1594, i64* %RAX, align 8, !tbaa !2428
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 40
  %1597 = load i64, i64* %RAX
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 4
  store i64 %1599, i64* %PC
  %1600 = inttoptr i64 %1596 to i64*
  store i64 %1597, i64* %1600
  %1601 = load i64, i64* %PC
  %1602 = sub i64 %1601, 101
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1602, i64* %1605, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 12
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 7
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i32*
  store i32 3, i32* %1610
  %1611 = load i64, i64* %PC
  %1612 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %1611, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1612

block_400b1d:                                     ; preds = %block_400b16, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400b16 ]
  %1613 = load i64, i64* %RBP
  %1614 = sub i64 %1613, 12
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 3
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1614 to i32*
  %1618 = load i32, i32* %1617
  %1619 = zext i32 %1618 to i64
  store i64 %1619, i64* %RDI, align 8, !tbaa !2428
  %1620 = load i64, i64* %PC
  %1621 = sub i64 %1620, 1584
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 5
  store i64 %1625, i64* %PC
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1627 = load i64, i64* %1626, align 8, !tbaa !2428
  %1628 = add i64 %1627, -8
  %1629 = inttoptr i64 %1628 to i64*
  store i64 %1623, i64* %1629
  store i64 %1628, i64* %1626, align 8, !tbaa !2428
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1621, i64* %1630, align 8, !tbaa !2428
  %1631 = load i64, i64* %PC
  %1632 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1631, %struct.Memory* %MEMORY.1)
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 8
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 4
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i64*
  %1638 = load i64, i64* %1637
  store i64 %1638, i64* %RAX, align 8, !tbaa !2428
  %1639 = load i64, i64* %RAX
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 3
  store i64 %1641, i64* %PC
  store i64 %1639, i64* %RCX, align 8, !tbaa !2428
  %1642 = load i64, i64* %RCX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = add i64 4, %1642
  store i64 %1645, i64* %RCX, align 8, !tbaa !2428
  %1646 = icmp ult i64 %1645, %1642
  %1647 = icmp ult i64 %1645, 4
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1649, i8* %1650, align 1, !tbaa !2432
  %1651 = trunc i64 %1645 to i32
  %1652 = and i32 %1651, 255
  %1653 = call i32 @llvm.ctpop.i32(i32 %1652) #16
  %1654 = trunc i32 %1653 to i8
  %1655 = and i8 %1654, 1
  %1656 = xor i8 %1655, 1
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1656, i8* %1657, align 1, !tbaa !2446
  %1658 = xor i64 4, %1642
  %1659 = xor i64 %1658, %1645
  %1660 = lshr i64 %1659, 4
  %1661 = trunc i64 %1660 to i8
  %1662 = and i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1662, i8* %1663, align 1, !tbaa !2447
  %1664 = icmp eq i64 %1645, 0
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1665, i8* %1666, align 1, !tbaa !2448
  %1667 = lshr i64 %1645, 63
  %1668 = trunc i64 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = lshr i64 %1642, 63
  %1671 = xor i64 %1667, %1670
  %1672 = add nuw nsw i64 %1671, %1667
  %1673 = icmp eq i64 %1672, 2
  %1674 = zext i1 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1674, i8* %1675, align 1, !tbaa !2450
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 8
  %1678 = load i64, i64* %RCX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 4
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1677 to i64*
  store i64 %1678, i64* %1681
  %1682 = load i64, i64* %RAX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i32*
  %1686 = load i32, i32* %1685
  %1687 = sext i32 %1686 to i64
  store i64 %1687, i64* %RAX, align 8, !tbaa !2428
  %1688 = load i64, i64* %RAX
  %1689 = mul i64 %1688, 8
  %1690 = add i64 %1689, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 8
  store i64 %1692, i64* %PC
  %1693 = inttoptr i64 %1690 to i64*
  %1694 = load i64, i64* %1693
  store i64 %1694, i64* %RAX, align 8, !tbaa !2428
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 40
  %1697 = load i64, i64* %RAX
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 4
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1696 to i64*
  store i64 %1697, i64* %1700
  %1701 = load i64, i64* %PC
  %1702 = sub i64 %1701, 1501
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 5
  store i64 %1704, i64* %PC
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1702, i64* %1705, align 8, !tbaa !2428
  br label %block_400566

block_400a1c:                                     ; preds = %block_400566
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 12
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 7
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i32*
  store i32 25, i32* %1710
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 12
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 3
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1712 to i32*
  %1716 = load i32, i32* %1715
  %1717 = zext i32 %1716 to i64
  store i64 %1717, i64* %RDI, align 8, !tbaa !2428
  %1718 = load i64, i64* %PC
  %1719 = sub i64 %1718, 1334
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 5
  store i64 %1723, i64* %PC
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1725 = load i64, i64* %1724, align 8, !tbaa !2428
  %1726 = add i64 %1725, -8
  %1727 = inttoptr i64 %1726 to i64*
  store i64 %1721, i64* %1727
  store i64 %1726, i64* %1724, align 8, !tbaa !2428
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1719, i64* %1728, align 8, !tbaa !2428
  %1729 = load i64, i64* %PC
  %1730 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1729, %struct.Memory* %MEMORY.0)
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 8
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 4
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i64*
  %1736 = load i64, i64* %1735
  store i64 %1736, i64* %RAX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RAX
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 3
  store i64 %1739, i64* %PC
  store i64 %1737, i64* %RCX, align 8, !tbaa !2428
  %1740 = load i64, i64* %RCX
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 4
  store i64 %1742, i64* %PC
  %1743 = add i64 4, %1740
  store i64 %1743, i64* %RCX, align 8, !tbaa !2428
  %1744 = icmp ult i64 %1743, %1740
  %1745 = icmp ult i64 %1743, 4
  %1746 = or i1 %1744, %1745
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1747, i8* %1748, align 1, !tbaa !2432
  %1749 = trunc i64 %1743 to i32
  %1750 = and i32 %1749, 255
  %1751 = call i32 @llvm.ctpop.i32(i32 %1750) #16
  %1752 = trunc i32 %1751 to i8
  %1753 = and i8 %1752, 1
  %1754 = xor i8 %1753, 1
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1754, i8* %1755, align 1, !tbaa !2446
  %1756 = xor i64 4, %1740
  %1757 = xor i64 %1756, %1743
  %1758 = lshr i64 %1757, 4
  %1759 = trunc i64 %1758 to i8
  %1760 = and i8 %1759, 1
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1760, i8* %1761, align 1, !tbaa !2447
  %1762 = icmp eq i64 %1743, 0
  %1763 = zext i1 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1763, i8* %1764, align 1, !tbaa !2448
  %1765 = lshr i64 %1743, 63
  %1766 = trunc i64 %1765 to i8
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1766, i8* %1767, align 1, !tbaa !2449
  %1768 = lshr i64 %1740, 63
  %1769 = xor i64 %1765, %1768
  %1770 = add nuw nsw i64 %1769, %1765
  %1771 = icmp eq i64 %1770, 2
  %1772 = zext i1 %1771 to i8
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1772, i8* %1773, align 1, !tbaa !2450
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 8
  %1776 = load i64, i64* %RCX
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 4
  store i64 %1778, i64* %PC
  %1779 = inttoptr i64 %1775 to i64*
  store i64 %1776, i64* %1779
  %1780 = load i64, i64* %RAX
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 3
  store i64 %1782, i64* %PC
  %1783 = inttoptr i64 %1780 to i32*
  %1784 = load i32, i32* %1783
  %1785 = sext i32 %1784 to i64
  store i64 %1785, i64* %RAX, align 8, !tbaa !2428
  %1786 = load i64, i64* %RAX
  %1787 = mul i64 %1786, 8
  %1788 = add i64 %1787, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 8
  store i64 %1790, i64* %PC
  %1791 = inttoptr i64 %1788 to i64*
  %1792 = load i64, i64* %1791
  store i64 %1792, i64* %RAX, align 8, !tbaa !2428
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 40
  %1795 = load i64, i64* %RAX
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 4
  store i64 %1797, i64* %PC
  %1798 = inttoptr i64 %1794 to i64*
  store i64 %1795, i64* %1798
  %1799 = load i64, i64* %PC
  %1800 = sub i64 %1799, 1251
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 5
  store i64 %1802, i64* %PC
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1800, i64* %1803, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1804 = load i64, i64* %RBP
  %1805 = sub i64 %1804, 12
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 7
  store i64 %1807, i64* %PC
  %1808 = inttoptr i64 %1805 to i32*
  store i32 7, i32* %1808
  %1809 = load i64, i64* %RBP
  %1810 = sub i64 %1809, 12
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 3
  store i64 %1812, i64* %PC
  %1813 = inttoptr i64 %1810 to i32*
  %1814 = load i32, i32* %1813
  %1815 = zext i32 %1814 to i64
  store i64 %1815, i64* %RDI, align 8, !tbaa !2428
  %1816 = load i64, i64* %PC
  %1817 = sub i64 %1816, 434
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 5
  store i64 %1821, i64* %PC
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1823 = load i64, i64* %1822, align 8, !tbaa !2428
  %1824 = add i64 %1823, -8
  %1825 = inttoptr i64 %1824 to i64*
  store i64 %1819, i64* %1825
  store i64 %1824, i64* %1822, align 8, !tbaa !2428
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1817, i64* %1826, align 8, !tbaa !2428
  %1827 = load i64, i64* %PC
  %1828 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1827, %struct.Memory* %MEMORY.0)
  %1829 = load i64, i64* %RBP
  %1830 = sub i64 %1829, 8
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 4
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i64*
  %1834 = load i64, i64* %1833
  store i64 %1834, i64* %RAX, align 8, !tbaa !2428
  %1835 = load i64, i64* %RAX
  %1836 = load i64, i64* %PC
  %1837 = add i64 %1836, 3
  store i64 %1837, i64* %PC
  store i64 %1835, i64* %RCX, align 8, !tbaa !2428
  %1838 = load i64, i64* %RCX
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = add i64 4, %1838
  store i64 %1841, i64* %RCX, align 8, !tbaa !2428
  %1842 = icmp ult i64 %1841, %1838
  %1843 = icmp ult i64 %1841, 4
  %1844 = or i1 %1842, %1843
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1845, i8* %1846, align 1, !tbaa !2432
  %1847 = trunc i64 %1841 to i32
  %1848 = and i32 %1847, 255
  %1849 = call i32 @llvm.ctpop.i32(i32 %1848) #16
  %1850 = trunc i32 %1849 to i8
  %1851 = and i8 %1850, 1
  %1852 = xor i8 %1851, 1
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1852, i8* %1853, align 1, !tbaa !2446
  %1854 = xor i64 4, %1838
  %1855 = xor i64 %1854, %1841
  %1856 = lshr i64 %1855, 4
  %1857 = trunc i64 %1856 to i8
  %1858 = and i8 %1857, 1
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1858, i8* %1859, align 1, !tbaa !2447
  %1860 = icmp eq i64 %1841, 0
  %1861 = zext i1 %1860 to i8
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1861, i8* %1862, align 1, !tbaa !2448
  %1863 = lshr i64 %1841, 63
  %1864 = trunc i64 %1863 to i8
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1864, i8* %1865, align 1, !tbaa !2449
  %1866 = lshr i64 %1838, 63
  %1867 = xor i64 %1863, %1866
  %1868 = add nuw nsw i64 %1867, %1863
  %1869 = icmp eq i64 %1868, 2
  %1870 = zext i1 %1869 to i8
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1870, i8* %1871, align 1, !tbaa !2450
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 8
  %1874 = load i64, i64* %RCX
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 4
  store i64 %1876, i64* %PC
  %1877 = inttoptr i64 %1873 to i64*
  store i64 %1874, i64* %1877
  %1878 = load i64, i64* %RAX
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = sext i32 %1882 to i64
  store i64 %1883, i64* %RAX, align 8, !tbaa !2428
  %1884 = load i64, i64* %RAX
  %1885 = mul i64 %1884, 8
  %1886 = add i64 %1885, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1887 = load i64, i64* %PC
  %1888 = add i64 %1887, 8
  store i64 %1888, i64* %PC
  %1889 = inttoptr i64 %1886 to i64*
  %1890 = load i64, i64* %1889
  store i64 %1890, i64* %RAX, align 8, !tbaa !2428
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 40
  %1893 = load i64, i64* %RAX
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 4
  store i64 %1895, i64* %PC
  %1896 = inttoptr i64 %1892 to i64*
  store i64 %1893, i64* %1896
  %1897 = load i64, i64* %PC
  %1898 = sub i64 %1897, 351
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 5
  store i64 %1900, i64* %PC
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1898, i64* %1901, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1902 = load i64, i64* %RBP
  %1903 = sub i64 %1902, 12
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 7
  store i64 %1905, i64* %PC
  %1906 = inttoptr i64 %1903 to i32*
  store i32 30, i32* %1906
  br label %block_400b1d

block_400792:                                     ; preds = %block_400566
  %1907 = load i64, i64* %RBP
  %1908 = sub i64 %1907, 12
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 7
  store i64 %1910, i64* %PC
  %1911 = inttoptr i64 %1908 to i32*
  store i32 12, i32* %1911
  %1912 = load i64, i64* %PC
  %1913 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1912, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1913

block_40088c:                                     ; preds = %block_400566
  %1914 = load i64, i64* %RBP
  %1915 = sub i64 %1914, 12
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 7
  store i64 %1917, i64* %PC
  %1918 = inttoptr i64 %1915 to i32*
  store i32 17, i32* %1918
  %1919 = load i64, i64* %PC
  %1920 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1919, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1920

block_400986:                                     ; preds = %block_400566
  %1921 = load i64, i64* %RBP
  %1922 = sub i64 %1921, 12
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 7
  store i64 %1924, i64* %PC
  %1925 = inttoptr i64 %1922 to i32*
  store i32 22, i32* %1925
  %1926 = load i64, i64* %PC
  %1927 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1926, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1927

block_400602:                                     ; preds = %block_400566
  %1928 = load i64, i64* %RBP
  %1929 = sub i64 %1928, 12
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 7
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to i32*
  store i32 4, i32* %1932
  %1933 = load i64, i64* %PC
  %1934 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1933, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1934

block_400a80:                                     ; preds = %block_400566
  %1935 = load i64, i64* %RBP
  %1936 = sub i64 %1935, 12
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 7
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i32*
  store i32 27, i32* %1939
  %1940 = load i64, i64* %PC
  %1941 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1940, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1941

; <label>:1942:                                   ; preds = %block_400566
  %1943 = load i64, i64* %PC
  %1944 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1943, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1944
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007cb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4007cb

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 26, i32* %1013
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDI, align 8, !tbaa !2428
  %1021 = load i64, i64* %PC
  %1022 = sub i64 %1021, 1384
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  store i64 %1026, i64* %PC
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1028 = load i64, i64* %1027, align 8, !tbaa !2428
  %1029 = add i64 %1028, -8
  %1030 = inttoptr i64 %1029 to i64*
  store i64 %1024, i64* %1030
  store i64 %1029, i64* %1027, align 8, !tbaa !2428
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1022, i64* %1031, align 8, !tbaa !2428
  %1032 = load i64, i64* %PC
  %1033 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1032, %struct.Memory* %MEMORY.1)
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 8
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RCX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = add i64 4, %1043
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  %1047 = icmp ult i64 %1046, %1043
  %1048 = icmp ult i64 %1046, 4
  %1049 = or i1 %1047, %1048
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = trunc i64 %1046 to i32
  %1053 = and i32 %1052, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i64 4, %1043
  %1060 = xor i64 %1059, %1046
  %1061 = lshr i64 %1060, 4
  %1062 = trunc i64 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i64 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i64 %1046, 63
  %1069 = trunc i64 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i64 %1043, 63
  %1072 = xor i64 %1068, %1071
  %1073 = add nuw nsw i64 %1072, %1068
  %1074 = icmp eq i64 %1073, 2
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1075, i8* %1076, align 1, !tbaa !2450
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 8
  %1079 = load i64, i64* %RCX
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 4
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1078 to i64*
  store i64 %1079, i64* %1082
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = mul i64 %1089, 8
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  %1095 = load i64, i64* %1094
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 40
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1097 to i64*
  store i64 %1098, i64* %1101
  %1102 = load i64, i64* %PC
  %1103 = sub i64 %1102, 1301
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  br label %block_400566

block_4007cb:                                     ; preds = %block_4007c4, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4007c4 ]
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RDI, align 8, !tbaa !2428
  %1114 = load i64, i64* %PC
  %1115 = sub i64 %1114, 734
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1121 = load i64, i64* %1120, align 8, !tbaa !2428
  %1122 = add i64 %1121, -8
  %1123 = inttoptr i64 %1122 to i64*
  store i64 %1117, i64* %1123
  store i64 %1122, i64* %1120, align 8, !tbaa !2428
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1124, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1125, %struct.Memory* %MEMORY.0)
  %1127 = load i64, i64* %RBP
  %1128 = sub i64 %1127, 8
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1128 to i64*
  %1132 = load i64, i64* %1131
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = load i64, i64* %RAX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  store i64 %1133, i64* %RCX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RCX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = add i64 4, %1136
  store i64 %1139, i64* %RCX, align 8, !tbaa !2428
  %1140 = icmp ult i64 %1139, %1136
  %1141 = icmp ult i64 %1139, 4
  %1142 = or i1 %1140, %1141
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1143, i8* %1144, align 1, !tbaa !2432
  %1145 = trunc i64 %1139 to i32
  %1146 = and i32 %1145, 255
  %1147 = call i32 @llvm.ctpop.i32(i32 %1146) #16
  %1148 = trunc i32 %1147 to i8
  %1149 = and i8 %1148, 1
  %1150 = xor i8 %1149, 1
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1150, i8* %1151, align 1, !tbaa !2446
  %1152 = xor i64 4, %1136
  %1153 = xor i64 %1152, %1139
  %1154 = lshr i64 %1153, 4
  %1155 = trunc i64 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1156, i8* %1157, align 1, !tbaa !2447
  %1158 = icmp eq i64 %1139, 0
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1159, i8* %1160, align 1, !tbaa !2448
  %1161 = lshr i64 %1139, 63
  %1162 = trunc i64 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1162, i8* %1163, align 1, !tbaa !2449
  %1164 = lshr i64 %1136, 63
  %1165 = xor i64 %1161, %1164
  %1166 = add nuw nsw i64 %1165, %1161
  %1167 = icmp eq i64 %1166, 2
  %1168 = zext i1 %1167 to i8
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1168, i8* %1169, align 1, !tbaa !2450
  %1170 = load i64, i64* %RBP
  %1171 = sub i64 %1170, 8
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 4
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1171 to i64*
  store i64 %1172, i64* %1175
  %1176 = load i64, i64* %RAX
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RAX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RAX
  %1183 = mul i64 %1182, 8
  %1184 = add i64 %1183, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 8
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i64*
  %1188 = load i64, i64* %1187
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 40
  %1191 = load i64, i64* %RAX
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1190 to i64*
  store i64 %1191, i64* %1194
  %1195 = load i64, i64* %PC
  %1196 = sub i64 %1195, 651
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 5
  store i64 %1198, i64* %PC
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1196, i64* %1199, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 12
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 7
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1201 to i32*
  store i32 8, i32* %1204
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 3
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = zext i32 %1210 to i64
  store i64 %1211, i64* %RDI, align 8, !tbaa !2428
  %1212 = load i64, i64* %PC
  %1213 = sub i64 %1212, 484
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 5
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 5
  store i64 %1217, i64* %PC
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1219 = load i64, i64* %1218, align 8, !tbaa !2428
  %1220 = add i64 %1219, -8
  %1221 = inttoptr i64 %1220 to i64*
  store i64 %1215, i64* %1221
  store i64 %1220, i64* %1218, align 8, !tbaa !2428
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1213, i64* %1222, align 8, !tbaa !2428
  %1223 = load i64, i64* %PC
  %1224 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1223, %struct.Memory* %MEMORY.1)
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 8
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 4
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1226 to i64*
  %1230 = load i64, i64* %1229
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RAX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 3
  store i64 %1233, i64* %PC
  store i64 %1231, i64* %RCX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RCX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = add i64 4, %1234
  store i64 %1237, i64* %RCX, align 8, !tbaa !2428
  %1238 = icmp ult i64 %1237, %1234
  %1239 = icmp ult i64 %1237, 4
  %1240 = or i1 %1238, %1239
  %1241 = zext i1 %1240 to i8
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1241, i8* %1242, align 1, !tbaa !2432
  %1243 = trunc i64 %1237 to i32
  %1244 = and i32 %1243, 255
  %1245 = call i32 @llvm.ctpop.i32(i32 %1244) #16
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1248, i8* %1249, align 1, !tbaa !2446
  %1250 = xor i64 4, %1234
  %1251 = xor i64 %1250, %1237
  %1252 = lshr i64 %1251, 4
  %1253 = trunc i64 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1254, i8* %1255, align 1, !tbaa !2447
  %1256 = icmp eq i64 %1237, 0
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1257, i8* %1258, align 1, !tbaa !2448
  %1259 = lshr i64 %1237, 63
  %1260 = trunc i64 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1260, i8* %1261, align 1, !tbaa !2449
  %1262 = lshr i64 %1234, 63
  %1263 = xor i64 %1259, %1262
  %1264 = add nuw nsw i64 %1263, %1259
  %1265 = icmp eq i64 %1264, 2
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1266, i8* %1267, align 1, !tbaa !2450
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 8
  %1270 = load i64, i64* %RCX
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 4
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1269 to i64*
  store i64 %1270, i64* %1273
  %1274 = load i64, i64* %RAX
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 3
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  %1278 = load i32, i32* %1277
  %1279 = sext i32 %1278 to i64
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  %1280 = load i64, i64* %RAX
  %1281 = mul i64 %1280, 8
  %1282 = add i64 %1281, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 8
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1282 to i64*
  %1286 = load i64, i64* %1285
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 40
  %1289 = load i64, i64* %RAX
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 4
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1288 to i64*
  store i64 %1289, i64* %1292
  %1293 = load i64, i64* %PC
  %1294 = sub i64 %1293, 401
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 5
  store i64 %1296, i64* %PC
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1294, i64* %1297, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 7
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  store i32 31, i32* %1302
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  %1308 = load i32, i32* %1307
  %1309 = zext i32 %1308 to i64
  store i64 %1309, i64* %RDI, align 8, !tbaa !2428
  %1310 = load i64, i64* %PC
  %1311 = sub i64 %1310, 1634
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 5
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 5
  store i64 %1315, i64* %PC
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1317 = load i64, i64* %1316, align 8, !tbaa !2428
  %1318 = add i64 %1317, -8
  %1319 = inttoptr i64 %1318 to i64*
  store i64 %1313, i64* %1319
  store i64 %1318, i64* %1316, align 8, !tbaa !2428
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1311, i64* %1320, align 8, !tbaa !2428
  %1321 = load i64, i64* %PC
  %1322 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1321, %struct.Memory* %MEMORY.1)
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 8
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1324 to i64*
  %1328 = load i64, i64* %1327
  store i64 %1328, i64* %RAX, align 8, !tbaa !2428
  %1329 = load i64, i64* %RAX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 3
  store i64 %1331, i64* %PC
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1332 = load i64, i64* %RCX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 4
  store i64 %1334, i64* %PC
  %1335 = add i64 4, %1332
  store i64 %1335, i64* %RCX, align 8, !tbaa !2428
  %1336 = icmp ult i64 %1335, %1332
  %1337 = icmp ult i64 %1335, 4
  %1338 = or i1 %1336, %1337
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1339, i8* %1340, align 1, !tbaa !2432
  %1341 = trunc i64 %1335 to i32
  %1342 = and i32 %1341, 255
  %1343 = call i32 @llvm.ctpop.i32(i32 %1342) #16
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1346, i8* %1347, align 1, !tbaa !2446
  %1348 = xor i64 4, %1332
  %1349 = xor i64 %1348, %1335
  %1350 = lshr i64 %1349, 4
  %1351 = trunc i64 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1352, i8* %1353, align 1, !tbaa !2447
  %1354 = icmp eq i64 %1335, 0
  %1355 = zext i1 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1355, i8* %1356, align 1, !tbaa !2448
  %1357 = lshr i64 %1335, 63
  %1358 = trunc i64 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1358, i8* %1359, align 1, !tbaa !2449
  %1360 = lshr i64 %1332, 63
  %1361 = xor i64 %1357, %1360
  %1362 = add nuw nsw i64 %1361, %1357
  %1363 = icmp eq i64 %1362, 2
  %1364 = zext i1 %1363 to i8
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1364, i8* %1365, align 1, !tbaa !2450
  %1366 = load i64, i64* %RBP
  %1367 = sub i64 %1366, 8
  %1368 = load i64, i64* %RCX
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1367 to i64*
  store i64 %1368, i64* %1371
  %1372 = load i64, i64* %RAX
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 3
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  %1376 = load i32, i32* %1375
  %1377 = sext i32 %1376 to i64
  store i64 %1377, i64* %RAX, align 8, !tbaa !2428
  %1378 = load i64, i64* %RAX
  %1379 = mul i64 %1378, 8
  %1380 = add i64 %1379, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 8
  store i64 %1382, i64* %PC
  %1383 = inttoptr i64 %1380 to i64*
  %1384 = load i64, i64* %1383
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 40
  %1387 = load i64, i64* %RAX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %PC
  %1392 = sub i64 %1391, 1551
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1392, i64* %1395, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 12
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 7
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i32*
  store i32 13, i32* %1400
  br label %block_4007cb

block_4008be:                                     ; preds = %block_400566
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 12
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 7
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  store i32 18, i32* %1405
  %1406 = load i64, i64* %PC
  %1407 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1406, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1407

block_4009b8:                                     ; preds = %block_400566
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 7
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  store i32 23, i32* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 12
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = sub i64 %1420, 1234
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  store i64 %1425, i64* %PC
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1427 = load i64, i64* %1426, align 8, !tbaa !2428
  %1428 = add i64 %1427, -8
  %1429 = inttoptr i64 %1428 to i64*
  store i64 %1423, i64* %1429
  store i64 %1428, i64* %1426, align 8, !tbaa !2428
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1421, i64* %1430, align 8, !tbaa !2428
  %1431 = load i64, i64* %PC
  %1432 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1431, %struct.Memory* %MEMORY.1)
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 8
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RAX
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 3
  store i64 %1441, i64* %PC
  store i64 %1439, i64* %RCX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RCX
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 4
  store i64 %1444, i64* %PC
  %1445 = add i64 4, %1442
  store i64 %1445, i64* %RCX, align 8, !tbaa !2428
  %1446 = icmp ult i64 %1445, %1442
  %1447 = icmp ult i64 %1445, 4
  %1448 = or i1 %1446, %1447
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1449, i8* %1450, align 1, !tbaa !2432
  %1451 = trunc i64 %1445 to i32
  %1452 = and i32 %1451, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #16
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = xor i64 4, %1442
  %1459 = xor i64 %1458, %1445
  %1460 = lshr i64 %1459, 4
  %1461 = trunc i64 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = icmp eq i64 %1445, 0
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i64 %1445, 63
  %1468 = trunc i64 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1468, i8* %1469, align 1, !tbaa !2449
  %1470 = lshr i64 %1442, 63
  %1471 = xor i64 %1467, %1470
  %1472 = add nuw nsw i64 %1471, %1467
  %1473 = icmp eq i64 %1472, 2
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1474, i8* %1475, align 1, !tbaa !2450
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 8
  %1478 = load i64, i64* %RCX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1477 to i64*
  store i64 %1478, i64* %1481
  %1482 = load i64, i64* %RAX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i32*
  %1486 = load i32, i32* %1485
  %1487 = sext i32 %1486 to i64
  store i64 %1487, i64* %RAX, align 8, !tbaa !2428
  %1488 = load i64, i64* %RAX
  %1489 = mul i64 %1488, 8
  %1490 = add i64 %1489, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 8
  store i64 %1492, i64* %PC
  %1493 = inttoptr i64 %1490 to i64*
  %1494 = load i64, i64* %1493
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 40
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1496 to i64*
  store i64 %1497, i64* %1500
  %1501 = load i64, i64* %PC
  %1502 = sub i64 %1501, 1151
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1502, i64* %1505, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 7
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  store i32 5, i32* %1510
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 12
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 3
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = zext i32 %1516 to i64
  store i64 %1517, i64* %RDI, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = sub i64 %1518, 334
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 5
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1525 = load i64, i64* %1524, align 8, !tbaa !2428
  %1526 = add i64 %1525, -8
  %1527 = inttoptr i64 %1526 to i64*
  store i64 %1521, i64* %1527
  store i64 %1526, i64* %1524, align 8, !tbaa !2428
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1519, i64* %1528, align 8, !tbaa !2428
  %1529 = load i64, i64* %PC
  %1530 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1529, %struct.Memory* %MEMORY.1)
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 8
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RAX
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 3
  store i64 %1539, i64* %PC
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RCX
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 4
  store i64 %1542, i64* %PC
  %1543 = add i64 4, %1540
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = icmp ult i64 %1543, %1540
  %1545 = icmp ult i64 %1543, 4
  %1546 = or i1 %1544, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1547, i8* %1548, align 1, !tbaa !2432
  %1549 = trunc i64 %1543 to i32
  %1550 = and i32 %1549, 255
  %1551 = call i32 @llvm.ctpop.i32(i32 %1550) #16
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1554, i8* %1555, align 1, !tbaa !2446
  %1556 = xor i64 4, %1540
  %1557 = xor i64 %1556, %1543
  %1558 = lshr i64 %1557, 4
  %1559 = trunc i64 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1560, i8* %1561, align 1, !tbaa !2447
  %1562 = icmp eq i64 %1543, 0
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1563, i8* %1564, align 1, !tbaa !2448
  %1565 = lshr i64 %1543, 63
  %1566 = trunc i64 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1566, i8* %1567, align 1, !tbaa !2449
  %1568 = lshr i64 %1540, 63
  %1569 = xor i64 %1565, %1568
  %1570 = add nuw nsw i64 %1569, %1565
  %1571 = icmp eq i64 %1570, 2
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1572, i8* %1573, align 1, !tbaa !2450
  %1574 = load i64, i64* %RBP
  %1575 = sub i64 %1574, 8
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1575 to i64*
  store i64 %1576, i64* %1579
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1580 to i32*
  %1584 = load i32, i32* %1583
  %1585 = sext i32 %1584 to i64
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i64, i64* %RAX
  %1587 = mul i64 %1586, 8
  %1588 = add i64 %1587, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 8
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1588 to i64*
  %1592 = load i64, i64* %1591
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 40
  %1595 = load i64, i64* %RAX
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598
  %1599 = load i64, i64* %PC
  %1600 = sub i64 %1599, 251
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1603, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 7
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  store i32 28, i32* %1608
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 12
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 3
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = zext i32 %1614 to i64
  store i64 %1615, i64* %RDI, align 8, !tbaa !2428
  %1616 = load i64, i64* %PC
  %1617 = sub i64 %1616, 1484
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 5
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1623 = load i64, i64* %1622, align 8, !tbaa !2428
  %1624 = add i64 %1623, -8
  %1625 = inttoptr i64 %1624 to i64*
  store i64 %1619, i64* %1625
  store i64 %1624, i64* %1622, align 8, !tbaa !2428
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1617, i64* %1626, align 8, !tbaa !2428
  %1627 = load i64, i64* %PC
  %1628 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1627, %struct.Memory* %MEMORY.1)
  %1629 = load i64, i64* %RBP
  %1630 = sub i64 %1629, 8
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1630 to i64*
  %1634 = load i64, i64* %1633
  store i64 %1634, i64* %RAX, align 8, !tbaa !2428
  %1635 = load i64, i64* %RAX
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  store i64 %1635, i64* %RCX, align 8, !tbaa !2428
  %1638 = load i64, i64* %RCX
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 4
  store i64 %1640, i64* %PC
  %1641 = add i64 4, %1638
  store i64 %1641, i64* %RCX, align 8, !tbaa !2428
  %1642 = icmp ult i64 %1641, %1638
  %1643 = icmp ult i64 %1641, 4
  %1644 = or i1 %1642, %1643
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1645, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1641 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = xor i64 4, %1638
  %1655 = xor i64 %1654, %1641
  %1656 = lshr i64 %1655, 4
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1658, i8* %1659, align 1, !tbaa !2447
  %1660 = icmp eq i64 %1641, 0
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1661, i8* %1662, align 1, !tbaa !2448
  %1663 = lshr i64 %1641, 63
  %1664 = trunc i64 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1664, i8* %1665, align 1, !tbaa !2449
  %1666 = lshr i64 %1638, 63
  %1667 = xor i64 %1663, %1666
  %1668 = add nuw nsw i64 %1667, %1663
  %1669 = icmp eq i64 %1668, 2
  %1670 = zext i1 %1669 to i8
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1670, i8* %1671, align 1, !tbaa !2450
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 8
  %1674 = load i64, i64* %RCX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %RAX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 3
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1678 to i32*
  %1682 = load i32, i32* %1681
  %1683 = sext i32 %1682 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RAX
  %1685 = mul i64 %1684, 8
  %1686 = add i64 %1685, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 8
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 40
  %1693 = load i64, i64* %RAX
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 4
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1692 to i64*
  store i64 %1693, i64* %1696
  %1697 = load i64, i64* %PC
  %1698 = sub i64 %1697, 1401
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1698, i64* %1701, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 12
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 7
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  store i32 0, i32* %1706
  %1707 = load i64, i64* %RSP
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 4
  store i64 %1709, i64* %PC
  %1710 = add i64 48, %1707
  store i64 %1710, i64* %RSP, align 8, !tbaa !2428
  %1711 = icmp ult i64 %1710, %1707
  %1712 = icmp ult i64 %1710, 48
  %1713 = or i1 %1711, %1712
  %1714 = zext i1 %1713 to i8
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1714, i8* %1715, align 1, !tbaa !2432
  %1716 = trunc i64 %1710 to i32
  %1717 = and i32 %1716, 255
  %1718 = call i32 @llvm.ctpop.i32(i32 %1717) #16
  %1719 = trunc i32 %1718 to i8
  %1720 = and i8 %1719, 1
  %1721 = xor i8 %1720, 1
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1721, i8* %1722, align 1, !tbaa !2446
  %1723 = xor i64 48, %1707
  %1724 = xor i64 %1723, %1710
  %1725 = lshr i64 %1724, 4
  %1726 = trunc i64 %1725 to i8
  %1727 = and i8 %1726, 1
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1727, i8* %1728, align 1, !tbaa !2447
  %1729 = icmp eq i64 %1710, 0
  %1730 = zext i1 %1729 to i8
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1730, i8* %1731, align 1, !tbaa !2448
  %1732 = lshr i64 %1710, 63
  %1733 = trunc i64 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1733, i8* %1734, align 1, !tbaa !2449
  %1735 = lshr i64 %1707, 63
  %1736 = xor i64 %1732, %1735
  %1737 = add nuw nsw i64 %1736, %1732
  %1738 = icmp eq i64 %1737, 2
  %1739 = zext i1 %1738 to i8
  %1740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1739, i8* %1740, align 1, !tbaa !2450
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 1
  store i64 %1742, i64* %PC
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1744 = load i64, i64* %1743, align 8, !tbaa !2428
  %1745 = add i64 %1744, 8
  %1746 = inttoptr i64 %1744 to i64*
  %1747 = load i64, i64* %1746
  store i64 %1747, i64* %RBP, align 8, !tbaa !2428
  store i64 %1745, i64* %1743, align 8, !tbaa !2428
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 1
  store i64 %1749, i64* %PC
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1752 = load i64, i64* %1751, align 8, !tbaa !2428
  %1753 = inttoptr i64 %1752 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %1750, align 8, !tbaa !2428
  %1755 = add i64 %1752, 8
  store i64 %1755, i64* %1751, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 12
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 7
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  store i32 10, i32* %1760
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 12
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RDI, align 8, !tbaa !2428
  %1768 = load i64, i64* %PC
  %1769 = sub i64 %1768, 584
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 5
  store i64 %1773, i64* %PC
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1775 = load i64, i64* %1774, align 8, !tbaa !2428
  %1776 = add i64 %1775, -8
  %1777 = inttoptr i64 %1776 to i64*
  store i64 %1771, i64* %1777
  store i64 %1776, i64* %1774, align 8, !tbaa !2428
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1769, i64* %1778, align 8, !tbaa !2428
  %1779 = load i64, i64* %PC
  %1780 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1779, %struct.Memory* %MEMORY.1)
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 8
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i64*
  %1786 = load i64, i64* %1785
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RAX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 4
  store i64 %1792, i64* %PC
  %1793 = add i64 4, %1790
  store i64 %1793, i64* %RCX, align 8, !tbaa !2428
  %1794 = icmp ult i64 %1793, %1790
  %1795 = icmp ult i64 %1793, 4
  %1796 = or i1 %1794, %1795
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = trunc i64 %1793 to i32
  %1800 = and i32 %1799, 255
  %1801 = call i32 @llvm.ctpop.i32(i32 %1800) #16
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1804, i8* %1805, align 1, !tbaa !2446
  %1806 = xor i64 4, %1790
  %1807 = xor i64 %1806, %1793
  %1808 = lshr i64 %1807, 4
  %1809 = trunc i64 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i64 %1793, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i64 %1793, 63
  %1816 = trunc i64 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i64 %1790, 63
  %1819 = xor i64 %1815, %1818
  %1820 = add nuw nsw i64 %1819, %1815
  %1821 = icmp eq i64 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 8
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1825 to i64*
  store i64 %1826, i64* %1829
  %1830 = load i64, i64* %RAX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 3
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = mul i64 %1836, 8
  %1838 = add i64 %1837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 8
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %RAX
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1844 to i64*
  store i64 %1845, i64* %1848
  %1849 = load i64, i64* %PC
  %1850 = sub i64 %1849, 501
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 5
  store i64 %1852, i64* %PC
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1850, i64* %1853, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1854 = load i64, i64* %RBP
  %1855 = sub i64 %1854, 12
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 7
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  store i32 15, i32* %1858
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 12
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 3
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1860 to i32*
  %1864 = load i32, i32* %1863
  %1865 = zext i32 %1864 to i64
  store i64 %1865, i64* %RDI, align 8, !tbaa !2428
  %1866 = load i64, i64* %PC
  %1867 = sub i64 %1866, 834
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 5
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 5
  store i64 %1871, i64* %PC
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1873 = load i64, i64* %1872, align 8, !tbaa !2428
  %1874 = add i64 %1873, -8
  %1875 = inttoptr i64 %1874 to i64*
  store i64 %1869, i64* %1875
  store i64 %1874, i64* %1872, align 8, !tbaa !2428
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1867, i64* %1876, align 8, !tbaa !2428
  %1877 = load i64, i64* %PC
  %1878 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1877, %struct.Memory* %MEMORY.1)
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 8
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 4
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i64*
  %1884 = load i64, i64* %1883
  store i64 %1884, i64* %RAX, align 8, !tbaa !2428
  %1885 = load i64, i64* %RAX
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  store i64 %1885, i64* %RCX, align 8, !tbaa !2428
  %1888 = load i64, i64* %RCX
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 4
  store i64 %1890, i64* %PC
  %1891 = add i64 4, %1888
  store i64 %1891, i64* %RCX, align 8, !tbaa !2428
  %1892 = icmp ult i64 %1891, %1888
  %1893 = icmp ult i64 %1891, 4
  %1894 = or i1 %1892, %1893
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1895, i8* %1896, align 1, !tbaa !2432
  %1897 = trunc i64 %1891 to i32
  %1898 = and i32 %1897, 255
  %1899 = call i32 @llvm.ctpop.i32(i32 %1898) #16
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1902, i8* %1903, align 1, !tbaa !2446
  %1904 = xor i64 4, %1888
  %1905 = xor i64 %1904, %1891
  %1906 = lshr i64 %1905, 4
  %1907 = trunc i64 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1908, i8* %1909, align 1, !tbaa !2447
  %1910 = icmp eq i64 %1891, 0
  %1911 = zext i1 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1911, i8* %1912, align 1, !tbaa !2448
  %1913 = lshr i64 %1891, 63
  %1914 = trunc i64 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1914, i8* %1915, align 1, !tbaa !2449
  %1916 = lshr i64 %1888, 63
  %1917 = xor i64 %1913, %1916
  %1918 = add nuw nsw i64 %1917, %1913
  %1919 = icmp eq i64 %1918, 2
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1920, i8* %1921, align 1, !tbaa !2450
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 8
  %1924 = load i64, i64* %RCX
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 4
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1923 to i64*
  store i64 %1924, i64* %1927
  %1928 = load i64, i64* %RAX
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 3
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = sext i32 %1932 to i64
  store i64 %1933, i64* %RAX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RAX
  %1935 = mul i64 %1934, 8
  %1936 = add i64 %1935, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 8
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i64*
  %1940 = load i64, i64* %1939
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = load i64, i64* %RBP
  %1942 = sub i64 %1941, 40
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1942 to i64*
  store i64 %1943, i64* %1946
  %1947 = load i64, i64* %PC
  %1948 = sub i64 %1947, 751
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  store i64 %1950, i64* %PC
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1948, i64* %1951, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 12
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 7
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  store i32 20, i32* %1956
  %1957 = load i64, i64* %RBP
  %1958 = sub i64 %1957, 12
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 3
  store i64 %1960, i64* %PC
  %1961 = inttoptr i64 %1958 to i32*
  %1962 = load i32, i32* %1961
  %1963 = zext i32 %1962 to i64
  store i64 %1963, i64* %RDI, align 8, !tbaa !2428
  %1964 = load i64, i64* %PC
  %1965 = sub i64 %1964, 1084
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 5
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1971 = load i64, i64* %1970, align 8, !tbaa !2428
  %1972 = add i64 %1971, -8
  %1973 = inttoptr i64 %1972 to i64*
  store i64 %1967, i64* %1973
  store i64 %1972, i64* %1970, align 8, !tbaa !2428
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1965, i64* %1974, align 8, !tbaa !2428
  %1975 = load i64, i64* %PC
  %1976 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1975, %struct.Memory* %MEMORY.1)
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 8
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 4
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i64*
  %1982 = load i64, i64* %1981
  store i64 %1982, i64* %RAX, align 8, !tbaa !2428
  %1983 = load i64, i64* %RAX
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  store i64 %1983, i64* %RCX, align 8, !tbaa !2428
  %1986 = load i64, i64* %RCX
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 4
  store i64 %1988, i64* %PC
  %1989 = add i64 4, %1986
  store i64 %1989, i64* %RCX, align 8, !tbaa !2428
  %1990 = icmp ult i64 %1989, %1986
  %1991 = icmp ult i64 %1989, 4
  %1992 = or i1 %1990, %1991
  %1993 = zext i1 %1992 to i8
  %1994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1993, i8* %1994, align 1, !tbaa !2432
  %1995 = trunc i64 %1989 to i32
  %1996 = and i32 %1995, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = xor i64 4, %1986
  %2003 = xor i64 %2002, %1989
  %2004 = lshr i64 %2003, 4
  %2005 = trunc i64 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2006, i8* %2007, align 1, !tbaa !2447
  %2008 = icmp eq i64 %1989, 0
  %2009 = zext i1 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2009, i8* %2010, align 1, !tbaa !2448
  %2011 = lshr i64 %1989, 63
  %2012 = trunc i64 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2012, i8* %2013, align 1, !tbaa !2449
  %2014 = lshr i64 %1986, 63
  %2015 = xor i64 %2011, %2014
  %2016 = add nuw nsw i64 %2015, %2011
  %2017 = icmp eq i64 %2016, 2
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2018, i8* %2019, align 1, !tbaa !2450
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 8
  %2022 = load i64, i64* %RCX
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 4
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2021 to i64*
  store i64 %2022, i64* %2025
  %2026 = load i64, i64* %RAX
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 3
  store i64 %2028, i64* %PC
  %2029 = inttoptr i64 %2026 to i32*
  %2030 = load i32, i32* %2029
  %2031 = sext i32 %2030 to i64
  store i64 %2031, i64* %RAX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RAX
  %2033 = mul i64 %2032, 8
  %2034 = add i64 %2033, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 8
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2034 to i64*
  %2038 = load i64, i64* %2037
  store i64 %2038, i64* %RAX, align 8, !tbaa !2428
  %2039 = load i64, i64* %RBP
  %2040 = sub i64 %2039, 40
  %2041 = load i64, i64* %RAX
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2040 to i64*
  store i64 %2041, i64* %2044
  %2045 = load i64, i64* %PC
  %2046 = sub i64 %2045, 1001
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 5
  store i64 %2048, i64* %PC
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2046, i64* %2049, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 12
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 7
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  store i32 2, i32* %2054
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 12
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 3
  store i64 %2058, i64* %PC
  %2059 = inttoptr i64 %2056 to i32*
  %2060 = load i32, i32* %2059
  %2061 = zext i32 %2060 to i64
  store i64 %2061, i64* %RDI, align 8, !tbaa !2428
  %2062 = load i64, i64* %PC
  %2063 = sub i64 %2062, 184
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 5
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 5
  store i64 %2067, i64* %PC
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2069 = load i64, i64* %2068, align 8, !tbaa !2428
  %2070 = add i64 %2069, -8
  %2071 = inttoptr i64 %2070 to i64*
  store i64 %2065, i64* %2071
  store i64 %2070, i64* %2068, align 8, !tbaa !2428
  %2072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2063, i64* %2072, align 8, !tbaa !2428
  %2073 = load i64, i64* %PC
  %2074 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2073, %struct.Memory* %MEMORY.1)
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 8
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 4
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i64*
  %2080 = load i64, i64* %2079
  store i64 %2080, i64* %RAX, align 8, !tbaa !2428
  %2081 = load i64, i64* %RAX
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2084 = load i64, i64* %RCX
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 4
  store i64 %2086, i64* %PC
  %2087 = add i64 4, %2084
  store i64 %2087, i64* %RCX, align 8, !tbaa !2428
  %2088 = icmp ult i64 %2087, %2084
  %2089 = icmp ult i64 %2087, 4
  %2090 = or i1 %2088, %2089
  %2091 = zext i1 %2090 to i8
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2091, i8* %2092, align 1, !tbaa !2432
  %2093 = trunc i64 %2087 to i32
  %2094 = and i32 %2093, 255
  %2095 = call i32 @llvm.ctpop.i32(i32 %2094) #16
  %2096 = trunc i32 %2095 to i8
  %2097 = and i8 %2096, 1
  %2098 = xor i8 %2097, 1
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2098, i8* %2099, align 1, !tbaa !2446
  %2100 = xor i64 4, %2084
  %2101 = xor i64 %2100, %2087
  %2102 = lshr i64 %2101, 4
  %2103 = trunc i64 %2102 to i8
  %2104 = and i8 %2103, 1
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2104, i8* %2105, align 1, !tbaa !2447
  %2106 = icmp eq i64 %2087, 0
  %2107 = zext i1 %2106 to i8
  %2108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2107, i8* %2108, align 1, !tbaa !2448
  %2109 = lshr i64 %2087, 63
  %2110 = trunc i64 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2110, i8* %2111, align 1, !tbaa !2449
  %2112 = lshr i64 %2084, 63
  %2113 = xor i64 %2109, %2112
  %2114 = add nuw nsw i64 %2113, %2109
  %2115 = icmp eq i64 %2114, 2
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2116, i8* %2117, align 1, !tbaa !2450
  %2118 = load i64, i64* %RBP
  %2119 = sub i64 %2118, 8
  %2120 = load i64, i64* %RCX
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 4
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2119 to i64*
  store i64 %2120, i64* %2123
  %2124 = load i64, i64* %RAX
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RAX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RAX
  %2131 = mul i64 %2130, 8
  %2132 = add i64 %2131, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 8
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  store i64 %2136, i64* %RAX, align 8, !tbaa !2428
  %2137 = load i64, i64* %RBP
  %2138 = sub i64 %2137, 40
  %2139 = load i64, i64* %RAX
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2138 to i64*
  store i64 %2139, i64* %2142
  %2143 = load i64, i64* %PC
  %2144 = sub i64 %2143, 101
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 5
  store i64 %2146, i64* %PC
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2144, i64* %2147, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400b48, %block_4006ca, %block_4007cb, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %1126, %block_4007cb ], [ %1976, %block_400922 ], [ %1878, %block_400828 ], [ %1780, %block_40072e ], [ %1033, %block_400a4e ], [ %1628, %block_400ab2 ], [ %1530, %block_400634 ], [ %1432, %block_4009b8 ], [ %1322, %block_400b48 ], [ %1224, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %2074, %block_40059e ], [ %2183, %block_400a1c ], [ %2281, %block_400698 ], [ %2379, %block_400b16 ], [ %2477, %block_400792 ], [ %2575, %block_40088c ], [ %2673, %block_400986 ]
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 4
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i64*
  %2153 = load i64, i64* %2152
  store i64 %2153, i64* %RAX, align 8, !tbaa !2428
  %2154 = load i64, i64* %RAX
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 2
  store i64 %2156, i64* %PC
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2154, i64* %2157, align 8, !tbaa !2428
  %2158 = load i64, i64* %PC
  switch i64 %2158, label %2761 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 12
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 7
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i32*
  store i32 25, i32* %2163
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 12
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i32*
  %2169 = load i32, i32* %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RDI, align 8, !tbaa !2428
  %2171 = load i64, i64* %PC
  %2172 = sub i64 %2171, 1334
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2178 = load i64, i64* %2177, align 8, !tbaa !2428
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2174, i64* %2180
  store i64 %2179, i64* %2177, align 8, !tbaa !2428
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2172, i64* %2181, align 8, !tbaa !2428
  %2182 = load i64, i64* %PC
  %2183 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2182, %struct.Memory* %MEMORY.1)
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 8
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RAX
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2193 = load i64, i64* %RCX
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = add i64 4, %2193
  store i64 %2196, i64* %RCX, align 8, !tbaa !2428
  %2197 = icmp ult i64 %2196, %2193
  %2198 = icmp ult i64 %2196, 4
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2200, i8* %2201, align 1, !tbaa !2432
  %2202 = trunc i64 %2196 to i32
  %2203 = and i32 %2202, 255
  %2204 = call i32 @llvm.ctpop.i32(i32 %2203) #16
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = xor i8 %2206, 1
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2207, i8* %2208, align 1, !tbaa !2446
  %2209 = xor i64 4, %2193
  %2210 = xor i64 %2209, %2196
  %2211 = lshr i64 %2210, 4
  %2212 = trunc i64 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2213, i8* %2214, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2196, 0
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2216, i8* %2217, align 1, !tbaa !2448
  %2218 = lshr i64 %2196, 63
  %2219 = trunc i64 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2219, i8* %2220, align 1, !tbaa !2449
  %2221 = lshr i64 %2193, 63
  %2222 = xor i64 %2218, %2221
  %2223 = add nuw nsw i64 %2222, %2218
  %2224 = icmp eq i64 %2223, 2
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2226, align 1, !tbaa !2450
  %2227 = load i64, i64* %RBP
  %2228 = sub i64 %2227, 8
  %2229 = load i64, i64* %RCX
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 4
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2228 to i64*
  store i64 %2229, i64* %2232
  %2233 = load i64, i64* %RAX
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 3
  store i64 %2235, i64* %PC
  %2236 = inttoptr i64 %2233 to i32*
  %2237 = load i32, i32* %2236
  %2238 = sext i32 %2237 to i64
  store i64 %2238, i64* %RAX, align 8, !tbaa !2428
  %2239 = load i64, i64* %RAX
  %2240 = mul i64 %2239, 8
  %2241 = add i64 %2240, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 8
  store i64 %2243, i64* %PC
  %2244 = inttoptr i64 %2241 to i64*
  %2245 = load i64, i64* %2244
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 40
  %2248 = load i64, i64* %RAX
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 4
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2247 to i64*
  store i64 %2248, i64* %2251
  %2252 = load i64, i64* %PC
  %2253 = sub i64 %2252, 1251
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 5
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2253, i64* %2256, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 12
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 7
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  store i32 7, i32* %2261
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 12
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 3
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RDI, align 8, !tbaa !2428
  %2269 = load i64, i64* %PC
  %2270 = sub i64 %2269, 434
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 5
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 5
  store i64 %2274, i64* %PC
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2276 = load i64, i64* %2275, align 8, !tbaa !2428
  %2277 = add i64 %2276, -8
  %2278 = inttoptr i64 %2277 to i64*
  store i64 %2272, i64* %2278
  store i64 %2277, i64* %2275, align 8, !tbaa !2428
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2270, i64* %2279, align 8, !tbaa !2428
  %2280 = load i64, i64* %PC
  %2281 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2280, %struct.Memory* %MEMORY.1)
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 8
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 4
  store i64 %2285, i64* %PC
  %2286 = inttoptr i64 %2283 to i64*
  %2287 = load i64, i64* %2286
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i64, i64* %RAX
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC
  store i64 %2288, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RCX
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = add i64 4, %2291
  store i64 %2294, i64* %RCX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2291
  %2296 = icmp ult i64 %2294, 4
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2298, i8* %2299, align 1, !tbaa !2432
  %2300 = trunc i64 %2294 to i32
  %2301 = and i32 %2300, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #16
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 4, %2291
  %2308 = xor i64 %2307, %2294
  %2309 = lshr i64 %2308, 4
  %2310 = trunc i64 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2311, i8* %2312, align 1, !tbaa !2447
  %2313 = icmp eq i64 %2294, 0
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2314, i8* %2315, align 1, !tbaa !2448
  %2316 = lshr i64 %2294, 63
  %2317 = trunc i64 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2317, i8* %2318, align 1, !tbaa !2449
  %2319 = lshr i64 %2291, 63
  %2320 = xor i64 %2316, %2319
  %2321 = add nuw nsw i64 %2320, %2316
  %2322 = icmp eq i64 %2321, 2
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2323, i8* %2324, align 1, !tbaa !2450
  %2325 = load i64, i64* %RBP
  %2326 = sub i64 %2325, 8
  %2327 = load i64, i64* %RCX
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2326 to i64*
  store i64 %2327, i64* %2330
  %2331 = load i64, i64* %RAX
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 3
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2331 to i32*
  %2335 = load i32, i32* %2334
  %2336 = sext i32 %2335 to i64
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = load i64, i64* %RAX
  %2338 = mul i64 %2337, 8
  %2339 = add i64 %2338, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 8
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 40
  %2346 = load i64, i64* %RAX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2345 to i64*
  store i64 %2346, i64* %2349
  %2350 = load i64, i64* %PC
  %2351 = sub i64 %2350, 351
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 5
  store i64 %2353, i64* %PC
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2351, i64* %2354, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2355 = load i64, i64* %RBP
  %2356 = sub i64 %2355, 12
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 7
  store i64 %2358, i64* %PC
  %2359 = inttoptr i64 %2356 to i32*
  store i32 30, i32* %2359
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 12
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 3
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i32*
  %2365 = load i32, i32* %2364
  %2366 = zext i32 %2365 to i64
  store i64 %2366, i64* %RDI, align 8, !tbaa !2428
  %2367 = load i64, i64* %PC
  %2368 = sub i64 %2367, 1584
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 5
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2374 = load i64, i64* %2373, align 8, !tbaa !2428
  %2375 = add i64 %2374, -8
  %2376 = inttoptr i64 %2375 to i64*
  store i64 %2370, i64* %2376
  store i64 %2375, i64* %2373, align 8, !tbaa !2428
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2368, i64* %2377, align 8, !tbaa !2428
  %2378 = load i64, i64* %PC
  %2379 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2378, %struct.Memory* %MEMORY.1)
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 8
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2381 to i64*
  %2385 = load i64, i64* %2384
  store i64 %2385, i64* %RAX, align 8, !tbaa !2428
  %2386 = load i64, i64* %RAX
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 3
  store i64 %2388, i64* %PC
  store i64 %2386, i64* %RCX, align 8, !tbaa !2428
  %2389 = load i64, i64* %RCX
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = add i64 4, %2389
  store i64 %2392, i64* %RCX, align 8, !tbaa !2428
  %2393 = icmp ult i64 %2392, %2389
  %2394 = icmp ult i64 %2392, 4
  %2395 = or i1 %2393, %2394
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2432
  %2398 = trunc i64 %2392 to i32
  %2399 = and i32 %2398, 255
  %2400 = call i32 @llvm.ctpop.i32(i32 %2399) #16
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2403, i8* %2404, align 1, !tbaa !2446
  %2405 = xor i64 4, %2389
  %2406 = xor i64 %2405, %2392
  %2407 = lshr i64 %2406, 4
  %2408 = trunc i64 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2409, i8* %2410, align 1, !tbaa !2447
  %2411 = icmp eq i64 %2392, 0
  %2412 = zext i1 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2412, i8* %2413, align 1, !tbaa !2448
  %2414 = lshr i64 %2392, 63
  %2415 = trunc i64 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2415, i8* %2416, align 1, !tbaa !2449
  %2417 = lshr i64 %2389, 63
  %2418 = xor i64 %2414, %2417
  %2419 = add nuw nsw i64 %2418, %2414
  %2420 = icmp eq i64 %2419, 2
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2421, i8* %2422, align 1, !tbaa !2450
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 8
  %2425 = load i64, i64* %RCX
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 4
  store i64 %2427, i64* %PC
  %2428 = inttoptr i64 %2424 to i64*
  store i64 %2425, i64* %2428
  %2429 = load i64, i64* %RAX
  %2430 = load i64, i64* %PC
  %2431 = add i64 %2430, 3
  store i64 %2431, i64* %PC
  %2432 = inttoptr i64 %2429 to i32*
  %2433 = load i32, i32* %2432
  %2434 = sext i32 %2433 to i64
  store i64 %2434, i64* %RAX, align 8, !tbaa !2428
  %2435 = load i64, i64* %RAX
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 8
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to i64*
  %2441 = load i64, i64* %2440
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 40
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 4
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2443 to i64*
  store i64 %2444, i64* %2447
  %2448 = load i64, i64* %PC
  %2449 = sub i64 %2448, 1501
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 5
  store i64 %2451, i64* %PC
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2449, i64* %2452, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 12
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 7
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  store i32 12, i32* %2457
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 12
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 3
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2459 to i32*
  %2463 = load i32, i32* %2462
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RDI, align 8, !tbaa !2428
  %2465 = load i64, i64* %PC
  %2466 = sub i64 %2465, 684
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2472 = load i64, i64* %2471, align 8, !tbaa !2428
  %2473 = add i64 %2472, -8
  %2474 = inttoptr i64 %2473 to i64*
  store i64 %2468, i64* %2474
  store i64 %2473, i64* %2471, align 8, !tbaa !2428
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2466, i64* %2475, align 8, !tbaa !2428
  %2476 = load i64, i64* %PC
  %2477 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2476, %struct.Memory* %MEMORY.1)
  %2478 = load i64, i64* %RBP
  %2479 = sub i64 %2478, 8
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2479 to i64*
  %2483 = load i64, i64* %2482
  store i64 %2483, i64* %RAX, align 8, !tbaa !2428
  %2484 = load i64, i64* %RAX
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  store i64 %2484, i64* %RCX, align 8, !tbaa !2428
  %2487 = load i64, i64* %RCX
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 4
  store i64 %2489, i64* %PC
  %2490 = add i64 4, %2487
  store i64 %2490, i64* %RCX, align 8, !tbaa !2428
  %2491 = icmp ult i64 %2490, %2487
  %2492 = icmp ult i64 %2490, 4
  %2493 = or i1 %2491, %2492
  %2494 = zext i1 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2494, i8* %2495, align 1, !tbaa !2432
  %2496 = trunc i64 %2490 to i32
  %2497 = and i32 %2496, 255
  %2498 = call i32 @llvm.ctpop.i32(i32 %2497) #16
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = xor i8 %2500, 1
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2501, i8* %2502, align 1, !tbaa !2446
  %2503 = xor i64 4, %2487
  %2504 = xor i64 %2503, %2490
  %2505 = lshr i64 %2504, 4
  %2506 = trunc i64 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2507, i8* %2508, align 1, !tbaa !2447
  %2509 = icmp eq i64 %2490, 0
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2510, i8* %2511, align 1, !tbaa !2448
  %2512 = lshr i64 %2490, 63
  %2513 = trunc i64 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2513, i8* %2514, align 1, !tbaa !2449
  %2515 = lshr i64 %2487, 63
  %2516 = xor i64 %2512, %2515
  %2517 = add nuw nsw i64 %2516, %2512
  %2518 = icmp eq i64 %2517, 2
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2519, i8* %2520, align 1, !tbaa !2450
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 8
  %2523 = load i64, i64* %RCX
  %2524 = load i64, i64* %PC
  %2525 = add i64 %2524, 4
  store i64 %2525, i64* %PC
  %2526 = inttoptr i64 %2522 to i64*
  store i64 %2523, i64* %2526
  %2527 = load i64, i64* %RAX
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 3
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RAX
  %2534 = mul i64 %2533, 8
  %2535 = add i64 %2534, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 8
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2535 to i64*
  %2539 = load i64, i64* %2538
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 40
  %2542 = load i64, i64* %RAX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2541 to i64*
  store i64 %2542, i64* %2545
  %2546 = load i64, i64* %PC
  %2547 = sub i64 %2546, 601
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2547, i64* %2550, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 12
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 7
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to i32*
  store i32 17, i32* %2555
  %2556 = load i64, i64* %RBP
  %2557 = sub i64 %2556, 12
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 3
  store i64 %2559, i64* %PC
  %2560 = inttoptr i64 %2557 to i32*
  %2561 = load i32, i32* %2560
  %2562 = zext i32 %2561 to i64
  store i64 %2562, i64* %RDI, align 8, !tbaa !2428
  %2563 = load i64, i64* %PC
  %2564 = sub i64 %2563, 934
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 5
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  store i64 %2568, i64* %PC
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2570 = load i64, i64* %2569, align 8, !tbaa !2428
  %2571 = add i64 %2570, -8
  %2572 = inttoptr i64 %2571 to i64*
  store i64 %2566, i64* %2572
  store i64 %2571, i64* %2569, align 8, !tbaa !2428
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2564, i64* %2573, align 8, !tbaa !2428
  %2574 = load i64, i64* %PC
  %2575 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2574, %struct.Memory* %MEMORY.1)
  %2576 = load i64, i64* %RBP
  %2577 = sub i64 %2576, 8
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2577 to i64*
  %2581 = load i64, i64* %2580
  store i64 %2581, i64* %RAX, align 8, !tbaa !2428
  %2582 = load i64, i64* %RAX
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 3
  store i64 %2584, i64* %PC
  store i64 %2582, i64* %RCX, align 8, !tbaa !2428
  %2585 = load i64, i64* %RCX
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 4
  store i64 %2587, i64* %PC
  %2588 = add i64 4, %2585
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = icmp ult i64 %2588, %2585
  %2590 = icmp ult i64 %2588, 4
  %2591 = or i1 %2589, %2590
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2592, i8* %2593, align 1, !tbaa !2432
  %2594 = trunc i64 %2588 to i32
  %2595 = and i32 %2594, 255
  %2596 = call i32 @llvm.ctpop.i32(i32 %2595) #16
  %2597 = trunc i32 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = xor i8 %2598, 1
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2599, i8* %2600, align 1, !tbaa !2446
  %2601 = xor i64 4, %2585
  %2602 = xor i64 %2601, %2588
  %2603 = lshr i64 %2602, 4
  %2604 = trunc i64 %2603 to i8
  %2605 = and i8 %2604, 1
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2605, i8* %2606, align 1, !tbaa !2447
  %2607 = icmp eq i64 %2588, 0
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2608, i8* %2609, align 1, !tbaa !2448
  %2610 = lshr i64 %2588, 63
  %2611 = trunc i64 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2611, i8* %2612, align 1, !tbaa !2449
  %2613 = lshr i64 %2585, 63
  %2614 = xor i64 %2610, %2613
  %2615 = add nuw nsw i64 %2614, %2610
  %2616 = icmp eq i64 %2615, 2
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2617, i8* %2618, align 1, !tbaa !2450
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 8
  %2621 = load i64, i64* %RCX
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 4
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2620 to i64*
  store i64 %2621, i64* %2624
  %2625 = load i64, i64* %RAX
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 3
  store i64 %2627, i64* %PC
  %2628 = inttoptr i64 %2625 to i32*
  %2629 = load i32, i32* %2628
  %2630 = sext i32 %2629 to i64
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RAX
  %2632 = mul i64 %2631, 8
  %2633 = add i64 %2632, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 8
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2633 to i64*
  %2637 = load i64, i64* %2636
  store i64 %2637, i64* %RAX, align 8, !tbaa !2428
  %2638 = load i64, i64* %RBP
  %2639 = sub i64 %2638, 40
  %2640 = load i64, i64* %RAX
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 4
  store i64 %2642, i64* %PC
  %2643 = inttoptr i64 %2639 to i64*
  store i64 %2640, i64* %2643
  %2644 = load i64, i64* %PC
  %2645 = sub i64 %2644, 851
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 5
  store i64 %2647, i64* %PC
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2645, i64* %2648, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2649 = load i64, i64* %RBP
  %2650 = sub i64 %2649, 12
  %2651 = load i64, i64* %PC
  %2652 = add i64 %2651, 7
  store i64 %2652, i64* %PC
  %2653 = inttoptr i64 %2650 to i32*
  store i32 22, i32* %2653
  %2654 = load i64, i64* %RBP
  %2655 = sub i64 %2654, 12
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 3
  store i64 %2657, i64* %PC
  %2658 = inttoptr i64 %2655 to i32*
  %2659 = load i32, i32* %2658
  %2660 = zext i32 %2659 to i64
  store i64 %2660, i64* %RDI, align 8, !tbaa !2428
  %2661 = load i64, i64* %PC
  %2662 = sub i64 %2661, 1184
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 5
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 5
  store i64 %2666, i64* %PC
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2668 = load i64, i64* %2667, align 8, !tbaa !2428
  %2669 = add i64 %2668, -8
  %2670 = inttoptr i64 %2669 to i64*
  store i64 %2664, i64* %2670
  store i64 %2669, i64* %2667, align 8, !tbaa !2428
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2662, i64* %2671, align 8, !tbaa !2428
  %2672 = load i64, i64* %PC
  %2673 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2672, %struct.Memory* %MEMORY.1)
  %2674 = load i64, i64* %RBP
  %2675 = sub i64 %2674, 8
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 4
  store i64 %2677, i64* %PC
  %2678 = inttoptr i64 %2675 to i64*
  %2679 = load i64, i64* %2678
  store i64 %2679, i64* %RAX, align 8, !tbaa !2428
  %2680 = load i64, i64* %RAX
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 3
  store i64 %2682, i64* %PC
  store i64 %2680, i64* %RCX, align 8, !tbaa !2428
  %2683 = load i64, i64* %RCX
  %2684 = load i64, i64* %PC
  %2685 = add i64 %2684, 4
  store i64 %2685, i64* %PC
  %2686 = add i64 4, %2683
  store i64 %2686, i64* %RCX, align 8, !tbaa !2428
  %2687 = icmp ult i64 %2686, %2683
  %2688 = icmp ult i64 %2686, 4
  %2689 = or i1 %2687, %2688
  %2690 = zext i1 %2689 to i8
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2690, i8* %2691, align 1, !tbaa !2432
  %2692 = trunc i64 %2686 to i32
  %2693 = and i32 %2692, 255
  %2694 = call i32 @llvm.ctpop.i32(i32 %2693) #16
  %2695 = trunc i32 %2694 to i8
  %2696 = and i8 %2695, 1
  %2697 = xor i8 %2696, 1
  %2698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2697, i8* %2698, align 1, !tbaa !2446
  %2699 = xor i64 4, %2683
  %2700 = xor i64 %2699, %2686
  %2701 = lshr i64 %2700, 4
  %2702 = trunc i64 %2701 to i8
  %2703 = and i8 %2702, 1
  %2704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2703, i8* %2704, align 1, !tbaa !2447
  %2705 = icmp eq i64 %2686, 0
  %2706 = zext i1 %2705 to i8
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2706, i8* %2707, align 1, !tbaa !2448
  %2708 = lshr i64 %2686, 63
  %2709 = trunc i64 %2708 to i8
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2709, i8* %2710, align 1, !tbaa !2449
  %2711 = lshr i64 %2683, 63
  %2712 = xor i64 %2708, %2711
  %2713 = add nuw nsw i64 %2712, %2708
  %2714 = icmp eq i64 %2713, 2
  %2715 = zext i1 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2715, i8* %2716, align 1, !tbaa !2450
  %2717 = load i64, i64* %RBP
  %2718 = sub i64 %2717, 8
  %2719 = load i64, i64* %RCX
  %2720 = load i64, i64* %PC
  %2721 = add i64 %2720, 4
  store i64 %2721, i64* %PC
  %2722 = inttoptr i64 %2718 to i64*
  store i64 %2719, i64* %2722
  %2723 = load i64, i64* %RAX
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 3
  store i64 %2725, i64* %PC
  %2726 = inttoptr i64 %2723 to i32*
  %2727 = load i32, i32* %2726
  %2728 = sext i32 %2727 to i64
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = load i64, i64* %RAX
  %2730 = mul i64 %2729, 8
  %2731 = add i64 %2730, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 8
  store i64 %2733, i64* %PC
  %2734 = inttoptr i64 %2731 to i64*
  %2735 = load i64, i64* %2734
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = load i64, i64* %RBP
  %2737 = sub i64 %2736, 40
  %2738 = load i64, i64* %RAX
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2737 to i64*
  store i64 %2738, i64* %2741
  %2742 = load i64, i64* %PC
  %2743 = sub i64 %2742, 1101
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 5
  store i64 %2745, i64* %PC
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2743, i64* %2746, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 12
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 7
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  store i32 4, i32* %2751
  %2752 = load i64, i64* %PC
  %2753 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2752, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2753

block_400a80:                                     ; preds = %block_400566
  %2754 = load i64, i64* %RBP
  %2755 = sub i64 %2754, 12
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 7
  store i64 %2757, i64* %PC
  %2758 = inttoptr i64 %2755 to i32*
  store i32 27, i32* %2758
  %2759 = load i64, i64* %PC
  %2760 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2759, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2760

; <label>:2761:                                   ; preds = %block_400566
  %2762 = load i64, i64* %PC
  %2763 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2762, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2763
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004d0, label %block_4004b9

block_4004d0:                                     ; preds = %block_4004b0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004b9:                                     ; preds = %block_4004b0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ab9(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400ab9

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %25

block_4008f0:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 19, i32* %30
  %31 = load i64, i64* %PC
  %32 = tail call %struct.Memory* @sub_4008f7(%struct.State* %0, i64 %31, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %32

block_400ae4:                                     ; preds = %block_400566
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 12
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 7
  store i64 %36, i64* %PC
  %37 = inttoptr i64 %34 to i32*
  store i32 29, i32* %37
  %38 = load i64, i64* %PC
  %39 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %38, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %39

block_4005d0:                                     ; preds = %block_400566
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 12
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 7
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i32*
  store i32 3, i32* %44
  %45 = load i64, i64* %PC
  %46 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %45, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %46

block_4007c4:                                     ; preds = %block_400566
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %48 to i32*
  store i32 13, i32* %51
  %52 = load i64, i64* %PC
  %53 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %53

block_4008be:                                     ; preds = %block_400566
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 18, i32* %58
  %59 = load i64, i64* %PC
  %60 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %59, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %60

block_4009b8:                                     ; preds = %block_400566
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 12
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to i32*
  store i32 23, i32* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 12
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i32*
  %71 = load i32, i32* %70
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = load i64, i64* %PC
  %74 = sub i64 %73, 1234
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 5
  store i64 %78, i64* %PC
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %80 = load i64, i64* %79, align 8, !tbaa !2428
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %76, i64* %82
  store i64 %81, i64* %79, align 8, !tbaa !2428
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %83, align 8, !tbaa !2428
  %84 = load i64, i64* %PC
  %85 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %84, %struct.Memory* %MEMORY.0)
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 8
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC
  store i64 %92, i64* %RCX, align 8, !tbaa !2428
  %95 = load i64, i64* %RCX
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = add i64 4, %95
  store i64 %98, i64* %RCX, align 8, !tbaa !2428
  %99 = icmp ult i64 %98, %95
  %100 = icmp ult i64 %98, 4
  %101 = or i1 %99, %100
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %98 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = xor i64 4, %95
  %112 = xor i64 %111, %98
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %115, i8* %116, align 1, !tbaa !2447
  %117 = icmp eq i64 %98, 0
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %118, i8* %119, align 1, !tbaa !2448
  %120 = lshr i64 %98, 63
  %121 = trunc i64 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %121, i8* %122, align 1, !tbaa !2449
  %123 = lshr i64 %95, 63
  %124 = xor i64 %120, %123
  %125 = add nuw nsw i64 %124, %120
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %127, i8* %128, align 1, !tbaa !2450
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 8
  %131 = load i64, i64* %RCX
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RAX
  %142 = mul i64 %141, 8
  %143 = add i64 %142, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 8
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 40
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %149 to i64*
  store i64 %150, i64* %153
  %154 = load i64, i64* %PC
  %155 = sub i64 %154, 1151
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  store i64 %157, i64* %PC
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %155, i64* %158, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 12
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  store i32 28, i32* %163
  br label %block_400ab9

block_400698:                                     ; preds = %block_400566
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 12
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 7
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  store i32 7, i32* %168
  %169 = load i64, i64* %PC
  %170 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %169, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %170

block_400792:                                     ; preds = %block_400566
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 12
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i32*
  store i32 12, i32* %175
  %176 = load i64, i64* %PC
  %177 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %176, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %177

block_40088c:                                     ; preds = %block_400566
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 12
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  store i32 17, i32* %182
  %183 = load i64, i64* %PC
  %184 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %183, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %184

block_400986:                                     ; preds = %block_400566
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 12
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 7
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  store i32 22, i32* %189
  %190 = load i64, i64* %PC
  %191 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %190, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %191

block_400a80:                                     ; preds = %block_400566
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 12
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  store i32 27, i32* %196
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %197, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %198

block_40056c:                                     ; preds = %block_400566
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 12
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 7
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i32*
  store i32 1, i32* %203
  %204 = load i64, i64* %PC
  %205 = tail call %struct.Memory* @sub_400573(%struct.State* %0, i64 %204, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %205

block_4007f6:                                     ; preds = %block_400566
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 12
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i32*
  store i32 14, i32* %210
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 12
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 3
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i32*
  %216 = load i32, i32* %215
  %217 = zext i32 %216 to i64
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 784
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %225 = load i64, i64* %224, align 8, !tbaa !2428
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %221, i64* %227
  store i64 %226, i64* %224, align 8, !tbaa !2428
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %228, align 8, !tbaa !2428
  %229 = load i64, i64* %PC
  %230 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %229, %struct.Memory* %MEMORY.0)
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 8
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  store i64 %237, i64* %RCX, align 8, !tbaa !2428
  %240 = load i64, i64* %RCX
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = add i64 4, %240
  store i64 %243, i64* %RCX, align 8, !tbaa !2428
  %244 = icmp ult i64 %243, %240
  %245 = icmp ult i64 %243, 4
  %246 = or i1 %244, %245
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %247, i8* %248, align 1, !tbaa !2432
  %249 = trunc i64 %243 to i32
  %250 = and i32 %249, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 4, %240
  %257 = xor i64 %256, %243
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = icmp eq i64 %243, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2448
  %265 = lshr i64 %243, 63
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = lshr i64 %240, 63
  %269 = xor i64 %265, %268
  %270 = add nuw nsw i64 %269, %265
  %271 = icmp eq i64 %270, 2
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 8
  %276 = load i64, i64* %RCX
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %275 to i64*
  store i64 %276, i64* %279
  %280 = load i64, i64* %RAX
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 3
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %280 to i32*
  %284 = load i32, i32* %283
  %285 = sext i32 %284 to i64
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RAX
  %287 = mul i64 %286, 8
  %288 = add i64 %287, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 8
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 40
  %295 = load i64, i64* %RAX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %PC
  %300 = sub i64 %299, 701
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %300, i64* %303, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400634, %block_400ab9, %block_4007f6, %block_4009b8
  %MEMORY.0 = phi %struct.Memory* [ %334, %block_400ab9 ], [ %230, %block_4007f6 ], [ %85, %block_4009b8 ], [ %495, %block_400634 ]
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 40
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 2
  store i64 %312, i64* %PC
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %310, i64* %313, align 8, !tbaa !2428
  %314 = load i64, i64* %PC
  switch i64 %314, label %618 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196842, label %block_4009ea
    i64 4197042, label %block_400ab2
    i64 4196292, label %block_4007c4
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4196792, label %block_4009b8
    i64 4195692, label %block_40056c
    i64 4196592, label %block_4008f0
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4195792, label %block_4005d0
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196342, label %block_4007f6
    i64 4196442, label %block_40085a
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196692, label %block_400954
    i64 4196192, label %block_400760
  ]

block_400ab9:                                     ; preds = %block_400ab2, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400ab2 ]
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 12
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 3
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i32*
  %320 = load i32, i32* %319
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %RDI, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = sub i64 %322, 1484
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 5
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %325, i64* %331
  store i64 %330, i64* %328, align 8, !tbaa !2428
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %323, i64* %332, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %333, %struct.Memory* %MEMORY.1)
  %335 = load i64, i64* %RBP
  %336 = sub i64 %335, 8
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 3
  store i64 %343, i64* %PC
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %344 = load i64, i64* %RCX
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 4
  store i64 %346, i64* %PC
  %347 = add i64 4, %344
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = icmp ult i64 %347, %344
  %349 = icmp ult i64 %347, 4
  %350 = or i1 %348, %349
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %351, i8* %352, align 1, !tbaa !2432
  %353 = trunc i64 %347 to i32
  %354 = and i32 %353, 255
  %355 = call i32 @llvm.ctpop.i32(i32 %354) #16
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %358, i8* %359, align 1, !tbaa !2446
  %360 = xor i64 4, %344
  %361 = xor i64 %360, %347
  %362 = lshr i64 %361, 4
  %363 = trunc i64 %362 to i8
  %364 = and i8 %363, 1
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %364, i8* %365, align 1, !tbaa !2447
  %366 = icmp eq i64 %347, 0
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %367, i8* %368, align 1, !tbaa !2448
  %369 = lshr i64 %347, 63
  %370 = trunc i64 %369 to i8
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %370, i8* %371, align 1, !tbaa !2449
  %372 = lshr i64 %344, 63
  %373 = xor i64 %369, %372
  %374 = add nuw nsw i64 %373, %369
  %375 = icmp eq i64 %374, 2
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %377, align 1, !tbaa !2450
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 8
  %380 = load i64, i64* %RCX
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %379 to i64*
  store i64 %380, i64* %383
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = load i64, i64* %RAX
  %391 = mul i64 %390, 8
  %392 = add i64 %391, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 8
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 40
  %399 = load i64, i64* %RAX
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %398 to i64*
  store i64 %399, i64* %402
  %403 = load i64, i64* %PC
  %404 = sub i64 %403, 1401
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  store i64 %406, i64* %PC
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %404, i64* %407, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 12
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i32*
  store i32 6, i32* %412
  %413 = load i64, i64* %PC
  %414 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %414

block_40085a:                                     ; preds = %block_400566
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 12
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 7
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  store i32 16, i32* %419
  %420 = load i64, i64* %PC
  %421 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %420, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %421

block_4006ca:                                     ; preds = %block_400566
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 12
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 7
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i32*
  store i32 8, i32* %426
  %427 = load i64, i64* %PC
  %428 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %427, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %428

block_400559:                                     ; preds = %block_400566
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 12
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 7
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i32*
  store i32 0, i32* %433
  %434 = load i64, i64* %PC
  %435 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %434, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %435

block_400954:                                     ; preds = %block_400566
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 12
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 7
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %437 to i32*
  store i32 21, i32* %440
  %441 = load i64, i64* %PC
  %442 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %442

block_400a4e:                                     ; preds = %block_400566
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 12
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 7
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i32*
  store i32 26, i32* %447
  %448 = load i64, i64* %PC
  %449 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %448, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %449

block_400760:                                     ; preds = %block_400566
  %450 = load i64, i64* %RBP
  %451 = sub i64 %450, 12
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 7
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %451 to i32*
  store i32 11, i32* %454
  %455 = load i64, i64* %PC
  %456 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %456

block_400b48:                                     ; preds = %block_400566
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 12
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 7
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i32*
  store i32 31, i32* %461
  %462 = load i64, i64* %PC
  %463 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %462, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %463

block_4009ea:                                     ; preds = %block_400566
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 12
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 7
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i32*
  store i32 24, i32* %468
  %469 = load i64, i64* %PC
  %470 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %469, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %470

block_400634:                                     ; preds = %block_400566
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 12
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 7
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  store i32 5, i32* %475
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 12
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 3
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i32*
  %481 = load i32, i32* %480
  %482 = zext i32 %481 to i64
  store i64 %482, i64* %RDI, align 8, !tbaa !2428
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 334
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %490 = load i64, i64* %489, align 8, !tbaa !2428
  %491 = add i64 %490, -8
  %492 = inttoptr i64 %491 to i64*
  store i64 %486, i64* %492
  store i64 %491, i64* %489, align 8, !tbaa !2428
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %493, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %494, %struct.Memory* %MEMORY.0)
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 8
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 4
  store i64 %499, i64* %PC
  %500 = inttoptr i64 %497 to i64*
  %501 = load i64, i64* %500
  store i64 %501, i64* %RAX, align 8, !tbaa !2428
  %502 = load i64, i64* %RAX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 3
  store i64 %504, i64* %PC
  store i64 %502, i64* %RCX, align 8, !tbaa !2428
  %505 = load i64, i64* %RCX
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = add i64 4, %505
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = icmp ult i64 %508, %505
  %510 = icmp ult i64 %508, 4
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %512, i8* %513, align 1, !tbaa !2432
  %514 = trunc i64 %508 to i32
  %515 = and i32 %514, 255
  %516 = call i32 @llvm.ctpop.i32(i32 %515) #16
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %519, i8* %520, align 1, !tbaa !2446
  %521 = xor i64 4, %505
  %522 = xor i64 %521, %508
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %525, i8* %526, align 1, !tbaa !2447
  %527 = icmp eq i64 %508, 0
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %528, i8* %529, align 1, !tbaa !2448
  %530 = lshr i64 %508, 63
  %531 = trunc i64 %530 to i8
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %531, i8* %532, align 1, !tbaa !2449
  %533 = lshr i64 %505, 63
  %534 = xor i64 %530, %533
  %535 = add nuw nsw i64 %534, %530
  %536 = icmp eq i64 %535, 2
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %537, i8* %538, align 1, !tbaa !2450
  %539 = load i64, i64* %RBP
  %540 = sub i64 %539, 8
  %541 = load i64, i64* %RCX
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 4
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %540 to i64*
  store i64 %541, i64* %544
  %545 = load i64, i64* %RAX
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = load i64, i64* %RAX
  %552 = mul i64 %551, 8
  %553 = add i64 %552, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 8
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i64*
  %557 = load i64, i64* %556
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 40
  %560 = load i64, i64* %RAX
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 4
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %559 to i64*
  store i64 %560, i64* %563
  %564 = load i64, i64* %PC
  %565 = sub i64 %564, 251
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 5
  store i64 %567, i64* %PC
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %565, i64* %568, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %569 = load i64, i64* %RBP
  %570 = sub i64 %569, 12
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 7
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %570 to i32*
  store i32 10, i32* %573
  %574 = load i64, i64* %PC
  %575 = tail call %struct.Memory* @sub_400735(%struct.State* %0, i64 %574, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %575

block_400828:                                     ; preds = %block_400566
  %576 = load i64, i64* %RBP
  %577 = sub i64 %576, 12
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 7
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %577 to i32*
  store i32 15, i32* %580
  %581 = load i64, i64* %PC
  %582 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %581, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %582

block_40059e:                                     ; preds = %block_400566
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 12
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 7
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i32*
  store i32 2, i32* %587
  %588 = load i64, i64* %PC
  %589 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %588, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %589

block_400922:                                     ; preds = %block_400566
  %590 = load i64, i64* %RBP
  %591 = sub i64 %590, 12
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 7
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i32*
  store i32 20, i32* %594
  %595 = load i64, i64* %PC
  %596 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %595, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %596

block_400a1c:                                     ; preds = %block_400566
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 12
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 7
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  store i32 25, i32* %601
  %602 = load i64, i64* %PC
  %603 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %602, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %603

block_400b16:                                     ; preds = %block_400566
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 12
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 7
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  store i32 30, i32* %608
  %609 = load i64, i64* %PC
  %610 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %609, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %610

block_400602:                                     ; preds = %block_400566
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 12
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  store i32 4, i32* %615
  %616 = load i64, i64* %PC
  %617 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %616, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %617

; <label>:618:                                    ; preds = %block_400566
  %619 = load i64, i64* %PC
  %620 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %619, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %620
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b4f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400b4f

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400b4f:                                     ; preds = %block_400b48, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_400b48 ]
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 3
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  %1014 = load i32, i32* %1013
  %1015 = zext i32 %1014 to i64
  store i64 %1015, i64* %RDI, align 8, !tbaa !2428
  %1016 = load i64, i64* %PC
  %1017 = sub i64 %1016, 1634
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 5
  store i64 %1021, i64* %PC
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1023 = load i64, i64* %1022, align 8, !tbaa !2428
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1019, i64* %1025
  store i64 %1024, i64* %1022, align 8, !tbaa !2428
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1017, i64* %1026, align 8, !tbaa !2428
  %1027 = load i64, i64* %PC
  %1028 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1027, %struct.Memory* %MEMORY.0)
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 8
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RAX
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 3
  store i64 %1037, i64* %PC
  store i64 %1035, i64* %RCX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RCX
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 4
  store i64 %1040, i64* %PC
  %1041 = add i64 4, %1038
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = icmp ult i64 %1041, %1038
  %1043 = icmp ult i64 %1041, 4
  %1044 = or i1 %1042, %1043
  %1045 = zext i1 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1045, i8* %1046, align 1, !tbaa !2432
  %1047 = trunc i64 %1041 to i32
  %1048 = and i32 %1047, 255
  %1049 = call i32 @llvm.ctpop.i32(i32 %1048) #16
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = xor i8 %1051, 1
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1052, i8* %1053, align 1, !tbaa !2446
  %1054 = xor i64 4, %1038
  %1055 = xor i64 %1054, %1041
  %1056 = lshr i64 %1055, 4
  %1057 = trunc i64 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1058, i8* %1059, align 1, !tbaa !2447
  %1060 = icmp eq i64 %1041, 0
  %1061 = zext i1 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1061, i8* %1062, align 1, !tbaa !2448
  %1063 = lshr i64 %1041, 63
  %1064 = trunc i64 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1064, i8* %1065, align 1, !tbaa !2449
  %1066 = lshr i64 %1038, 63
  %1067 = xor i64 %1063, %1066
  %1068 = add nuw nsw i64 %1067, %1063
  %1069 = icmp eq i64 %1068, 2
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1070, i8* %1071, align 1, !tbaa !2450
  %1072 = load i64, i64* %RBP
  %1073 = sub i64 %1072, 8
  %1074 = load i64, i64* %RCX
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1073 to i64*
  store i64 %1074, i64* %1077
  %1078 = load i64, i64* %RAX
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 3
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1078 to i32*
  %1082 = load i32, i32* %1081
  %1083 = sext i32 %1082 to i64
  store i64 %1083, i64* %RAX, align 8, !tbaa !2428
  %1084 = load i64, i64* %RAX
  %1085 = mul i64 %1084, 8
  %1086 = add i64 %1085, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 8
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1086 to i64*
  %1090 = load i64, i64* %1089
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 40
  %1093 = load i64, i64* %RAX
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 4
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1092 to i64*
  store i64 %1093, i64* %1096
  %1097 = load i64, i64* %PC
  %1098 = sub i64 %1097, 1551
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 5
  store i64 %1100, i64* %PC
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1098, i64* %1101, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 12
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 7
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i32*
  store i32 26, i32* %1106
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RDI, align 8, !tbaa !2428
  %1114 = load i64, i64* %PC
  %1115 = sub i64 %1114, 1384
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1121 = load i64, i64* %1120, align 8, !tbaa !2428
  %1122 = add i64 %1121, -8
  %1123 = inttoptr i64 %1122 to i64*
  store i64 %1117, i64* %1123
  store i64 %1122, i64* %1120, align 8, !tbaa !2428
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1124, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1125, %struct.Memory* %MEMORY.1)
  %1127 = load i64, i64* %RBP
  %1128 = sub i64 %1127, 8
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1128 to i64*
  %1132 = load i64, i64* %1131
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = load i64, i64* %RAX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  store i64 %1133, i64* %RCX, align 8, !tbaa !2428
  %1136 = load i64, i64* %RCX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = add i64 4, %1136
  store i64 %1139, i64* %RCX, align 8, !tbaa !2428
  %1140 = icmp ult i64 %1139, %1136
  %1141 = icmp ult i64 %1139, 4
  %1142 = or i1 %1140, %1141
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1143, i8* %1144, align 1, !tbaa !2432
  %1145 = trunc i64 %1139 to i32
  %1146 = and i32 %1145, 255
  %1147 = call i32 @llvm.ctpop.i32(i32 %1146) #16
  %1148 = trunc i32 %1147 to i8
  %1149 = and i8 %1148, 1
  %1150 = xor i8 %1149, 1
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1150, i8* %1151, align 1, !tbaa !2446
  %1152 = xor i64 4, %1136
  %1153 = xor i64 %1152, %1139
  %1154 = lshr i64 %1153, 4
  %1155 = trunc i64 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1156, i8* %1157, align 1, !tbaa !2447
  %1158 = icmp eq i64 %1139, 0
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1159, i8* %1160, align 1, !tbaa !2448
  %1161 = lshr i64 %1139, 63
  %1162 = trunc i64 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1162, i8* %1163, align 1, !tbaa !2449
  %1164 = lshr i64 %1136, 63
  %1165 = xor i64 %1161, %1164
  %1166 = add nuw nsw i64 %1165, %1161
  %1167 = icmp eq i64 %1166, 2
  %1168 = zext i1 %1167 to i8
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1168, i8* %1169, align 1, !tbaa !2450
  %1170 = load i64, i64* %RBP
  %1171 = sub i64 %1170, 8
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 4
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1171 to i64*
  store i64 %1172, i64* %1175
  %1176 = load i64, i64* %RAX
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RAX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RAX
  %1183 = mul i64 %1182, 8
  %1184 = add i64 %1183, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 8
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i64*
  %1188 = load i64, i64* %1187
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 40
  %1191 = load i64, i64* %RAX
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1190 to i64*
  store i64 %1191, i64* %1194
  %1195 = load i64, i64* %PC
  %1196 = sub i64 %1195, 1301
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 5
  store i64 %1198, i64* %PC
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1196, i64* %1199, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1200 = load i64, i64* %RBP
  %1201 = sub i64 %1200, 12
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 7
  store i64 %1203, i64* %PC
  %1204 = inttoptr i64 %1201 to i32*
  store i32 8, i32* %1204
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 3
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = zext i32 %1210 to i64
  store i64 %1211, i64* %RDI, align 8, !tbaa !2428
  %1212 = load i64, i64* %PC
  %1213 = sub i64 %1212, 484
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 5
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 5
  store i64 %1217, i64* %PC
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1219 = load i64, i64* %1218, align 8, !tbaa !2428
  %1220 = add i64 %1219, -8
  %1221 = inttoptr i64 %1220 to i64*
  store i64 %1215, i64* %1221
  store i64 %1220, i64* %1218, align 8, !tbaa !2428
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1213, i64* %1222, align 8, !tbaa !2428
  %1223 = load i64, i64* %PC
  %1224 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1223, %struct.Memory* %MEMORY.1)
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 8
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 4
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1226 to i64*
  %1230 = load i64, i64* %1229
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RAX
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 3
  store i64 %1233, i64* %PC
  store i64 %1231, i64* %RCX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RCX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = add i64 4, %1234
  store i64 %1237, i64* %RCX, align 8, !tbaa !2428
  %1238 = icmp ult i64 %1237, %1234
  %1239 = icmp ult i64 %1237, 4
  %1240 = or i1 %1238, %1239
  %1241 = zext i1 %1240 to i8
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1241, i8* %1242, align 1, !tbaa !2432
  %1243 = trunc i64 %1237 to i32
  %1244 = and i32 %1243, 255
  %1245 = call i32 @llvm.ctpop.i32(i32 %1244) #16
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1248, i8* %1249, align 1, !tbaa !2446
  %1250 = xor i64 4, %1234
  %1251 = xor i64 %1250, %1237
  %1252 = lshr i64 %1251, 4
  %1253 = trunc i64 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1254, i8* %1255, align 1, !tbaa !2447
  %1256 = icmp eq i64 %1237, 0
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1257, i8* %1258, align 1, !tbaa !2448
  %1259 = lshr i64 %1237, 63
  %1260 = trunc i64 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1260, i8* %1261, align 1, !tbaa !2449
  %1262 = lshr i64 %1234, 63
  %1263 = xor i64 %1259, %1262
  %1264 = add nuw nsw i64 %1263, %1259
  %1265 = icmp eq i64 %1264, 2
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1266, i8* %1267, align 1, !tbaa !2450
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 8
  %1270 = load i64, i64* %RCX
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 4
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1269 to i64*
  store i64 %1270, i64* %1273
  %1274 = load i64, i64* %RAX
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 3
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i32*
  %1278 = load i32, i32* %1277
  %1279 = sext i32 %1278 to i64
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  %1280 = load i64, i64* %RAX
  %1281 = mul i64 %1280, 8
  %1282 = add i64 %1281, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 8
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1282 to i64*
  %1286 = load i64, i64* %1285
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 40
  %1289 = load i64, i64* %RAX
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 4
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1288 to i64*
  store i64 %1289, i64* %1292
  %1293 = load i64, i64* %PC
  %1294 = sub i64 %1293, 401
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 5
  store i64 %1296, i64* %PC
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1294, i64* %1297, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 7
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  store i32 31, i32* %1302
  br label %block_400b4f

block_4007c4:                                     ; preds = %block_400566
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 7
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  store i32 13, i32* %1307
  %1308 = load i64, i64* %PC
  %1309 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %1308, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1309

block_4008be:                                     ; preds = %block_400566
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 12
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 7
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  store i32 18, i32* %1314
  %1315 = load i64, i64* %PC
  %1316 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1315, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1316

block_4009b8:                                     ; preds = %block_400566
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 7
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  store i32 23, i32* %1321
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 12
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 3
  store i64 %1325, i64* %PC
  %1326 = inttoptr i64 %1323 to i32*
  %1327 = load i32, i32* %1326
  %1328 = zext i32 %1327 to i64
  store i64 %1328, i64* %RDI, align 8, !tbaa !2428
  %1329 = load i64, i64* %PC
  %1330 = sub i64 %1329, 1234
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 5
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  store i64 %1334, i64* %PC
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1336 = load i64, i64* %1335, align 8, !tbaa !2428
  %1337 = add i64 %1336, -8
  %1338 = inttoptr i64 %1337 to i64*
  store i64 %1332, i64* %1338
  store i64 %1337, i64* %1335, align 8, !tbaa !2428
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1330, i64* %1339, align 8, !tbaa !2428
  %1340 = load i64, i64* %PC
  %1341 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1340, %struct.Memory* %MEMORY.1)
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 8
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1343 to i64*
  %1347 = load i64, i64* %1346
  store i64 %1347, i64* %RAX, align 8, !tbaa !2428
  %1348 = load i64, i64* %RAX
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 3
  store i64 %1350, i64* %PC
  store i64 %1348, i64* %RCX, align 8, !tbaa !2428
  %1351 = load i64, i64* %RCX
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 4
  store i64 %1353, i64* %PC
  %1354 = add i64 4, %1351
  store i64 %1354, i64* %RCX, align 8, !tbaa !2428
  %1355 = icmp ult i64 %1354, %1351
  %1356 = icmp ult i64 %1354, 4
  %1357 = or i1 %1355, %1356
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1358, i8* %1359, align 1, !tbaa !2432
  %1360 = trunc i64 %1354 to i32
  %1361 = and i32 %1360, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #16
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i64 4, %1351
  %1368 = xor i64 %1367, %1354
  %1369 = lshr i64 %1368, 4
  %1370 = trunc i64 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2447
  %1373 = icmp eq i64 %1354, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2448
  %1376 = lshr i64 %1354, 63
  %1377 = trunc i64 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2449
  %1379 = lshr i64 %1351, 63
  %1380 = xor i64 %1376, %1379
  %1381 = add nuw nsw i64 %1380, %1376
  %1382 = icmp eq i64 %1381, 2
  %1383 = zext i1 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1383, i8* %1384, align 1, !tbaa !2450
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 8
  %1387 = load i64, i64* %RCX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %RAX
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sext i32 %1395 to i64
  store i64 %1396, i64* %RAX, align 8, !tbaa !2428
  %1397 = load i64, i64* %RAX
  %1398 = mul i64 %1397, 8
  %1399 = add i64 %1398, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 8
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i64*
  %1403 = load i64, i64* %1402
  store i64 %1403, i64* %RAX, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 40
  %1406 = load i64, i64* %RAX
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC
  %1409 = inttoptr i64 %1405 to i64*
  store i64 %1406, i64* %1409
  %1410 = load i64, i64* %PC
  %1411 = sub i64 %1410, 1151
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 5
  store i64 %1413, i64* %PC
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1411, i64* %1414, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 7
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  store i32 5, i32* %1419
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 12
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 3
  store i64 %1423, i64* %PC
  %1424 = inttoptr i64 %1421 to i32*
  %1425 = load i32, i32* %1424
  %1426 = zext i32 %1425 to i64
  store i64 %1426, i64* %RDI, align 8, !tbaa !2428
  %1427 = load i64, i64* %PC
  %1428 = sub i64 %1427, 334
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 5
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 5
  store i64 %1432, i64* %PC
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1434 = load i64, i64* %1433, align 8, !tbaa !2428
  %1435 = add i64 %1434, -8
  %1436 = inttoptr i64 %1435 to i64*
  store i64 %1430, i64* %1436
  store i64 %1435, i64* %1433, align 8, !tbaa !2428
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1428, i64* %1437, align 8, !tbaa !2428
  %1438 = load i64, i64* %PC
  %1439 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1438, %struct.Memory* %MEMORY.1)
  %1440 = load i64, i64* %RBP
  %1441 = sub i64 %1440, 8
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1441 to i64*
  %1445 = load i64, i64* %1444
  store i64 %1445, i64* %RAX, align 8, !tbaa !2428
  %1446 = load i64, i64* %RAX
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 3
  store i64 %1448, i64* %PC
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RCX
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 4
  store i64 %1451, i64* %PC
  %1452 = add i64 4, %1449
  store i64 %1452, i64* %RCX, align 8, !tbaa !2428
  %1453 = icmp ult i64 %1452, %1449
  %1454 = icmp ult i64 %1452, 4
  %1455 = or i1 %1453, %1454
  %1456 = zext i1 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1456, i8* %1457, align 1, !tbaa !2432
  %1458 = trunc i64 %1452 to i32
  %1459 = and i32 %1458, 255
  %1460 = call i32 @llvm.ctpop.i32(i32 %1459) #16
  %1461 = trunc i32 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = xor i8 %1462, 1
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1463, i8* %1464, align 1, !tbaa !2446
  %1465 = xor i64 4, %1449
  %1466 = xor i64 %1465, %1452
  %1467 = lshr i64 %1466, 4
  %1468 = trunc i64 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1469, i8* %1470, align 1, !tbaa !2447
  %1471 = icmp eq i64 %1452, 0
  %1472 = zext i1 %1471 to i8
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1472, i8* %1473, align 1, !tbaa !2448
  %1474 = lshr i64 %1452, 63
  %1475 = trunc i64 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1475, i8* %1476, align 1, !tbaa !2449
  %1477 = lshr i64 %1449, 63
  %1478 = xor i64 %1474, %1477
  %1479 = add nuw nsw i64 %1478, %1474
  %1480 = icmp eq i64 %1479, 2
  %1481 = zext i1 %1480 to i8
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1481, i8* %1482, align 1, !tbaa !2450
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 8
  %1485 = load i64, i64* %RCX
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 4
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1484 to i64*
  store i64 %1485, i64* %1488
  %1489 = load i64, i64* %RAX
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 3
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = sext i32 %1493 to i64
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RAX
  %1496 = mul i64 %1495, 8
  %1497 = add i64 %1496, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 8
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to i64*
  %1501 = load i64, i64* %1500
  store i64 %1501, i64* %RAX, align 8, !tbaa !2428
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 40
  %1504 = load i64, i64* %RAX
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 4
  store i64 %1506, i64* %PC
  %1507 = inttoptr i64 %1503 to i64*
  store i64 %1504, i64* %1507
  %1508 = load i64, i64* %PC
  %1509 = sub i64 %1508, 251
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1509, i64* %1512, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1513 = load i64, i64* %RBP
  %1514 = sub i64 %1513, 12
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 7
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1514 to i32*
  store i32 28, i32* %1517
  %1518 = load i64, i64* %RBP
  %1519 = sub i64 %1518, 12
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 3
  store i64 %1521, i64* %PC
  %1522 = inttoptr i64 %1519 to i32*
  %1523 = load i32, i32* %1522
  %1524 = zext i32 %1523 to i64
  store i64 %1524, i64* %RDI, align 8, !tbaa !2428
  %1525 = load i64, i64* %PC
  %1526 = sub i64 %1525, 1484
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 5
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 5
  store i64 %1530, i64* %PC
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1532 = load i64, i64* %1531, align 8, !tbaa !2428
  %1533 = add i64 %1532, -8
  %1534 = inttoptr i64 %1533 to i64*
  store i64 %1528, i64* %1534
  store i64 %1533, i64* %1531, align 8, !tbaa !2428
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1526, i64* %1535, align 8, !tbaa !2428
  %1536 = load i64, i64* %PC
  %1537 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1536, %struct.Memory* %MEMORY.1)
  %1538 = load i64, i64* %RBP
  %1539 = sub i64 %1538, 8
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1539 to i64*
  %1543 = load i64, i64* %1542
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 3
  store i64 %1546, i64* %PC
  store i64 %1544, i64* %RCX, align 8, !tbaa !2428
  %1547 = load i64, i64* %RCX
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = add i64 4, %1547
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = icmp ult i64 %1550, %1547
  %1552 = icmp ult i64 %1550, 4
  %1553 = or i1 %1551, %1552
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1554, i8* %1555, align 1, !tbaa !2432
  %1556 = trunc i64 %1550 to i32
  %1557 = and i32 %1556, 255
  %1558 = call i32 @llvm.ctpop.i32(i32 %1557) #16
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = xor i8 %1560, 1
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1561, i8* %1562, align 1, !tbaa !2446
  %1563 = xor i64 4, %1547
  %1564 = xor i64 %1563, %1550
  %1565 = lshr i64 %1564, 4
  %1566 = trunc i64 %1565 to i8
  %1567 = and i8 %1566, 1
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1567, i8* %1568, align 1, !tbaa !2447
  %1569 = icmp eq i64 %1550, 0
  %1570 = zext i1 %1569 to i8
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1570, i8* %1571, align 1, !tbaa !2448
  %1572 = lshr i64 %1550, 63
  %1573 = trunc i64 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1573, i8* %1574, align 1, !tbaa !2449
  %1575 = lshr i64 %1547, 63
  %1576 = xor i64 %1572, %1575
  %1577 = add nuw nsw i64 %1576, %1572
  %1578 = icmp eq i64 %1577, 2
  %1579 = zext i1 %1578 to i8
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1579, i8* %1580, align 1, !tbaa !2450
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 8
  %1583 = load i64, i64* %RCX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1582 to i64*
  store i64 %1583, i64* %1586
  %1587 = load i64, i64* %RAX
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 3
  store i64 %1589, i64* %PC
  %1590 = inttoptr i64 %1587 to i32*
  %1591 = load i32, i32* %1590
  %1592 = sext i32 %1591 to i64
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RAX
  %1594 = mul i64 %1593, 8
  %1595 = add i64 %1594, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 8
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to i64*
  %1599 = load i64, i64* %1598
  store i64 %1599, i64* %RAX, align 8, !tbaa !2428
  %1600 = load i64, i64* %RBP
  %1601 = sub i64 %1600, 40
  %1602 = load i64, i64* %RAX
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 4
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1601 to i64*
  store i64 %1602, i64* %1605
  %1606 = load i64, i64* %PC
  %1607 = sub i64 %1606, 1401
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  store i64 %1609, i64* %PC
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1607, i64* %1610, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 12
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 7
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  store i32 0, i32* %1615
  %1616 = load i64, i64* %RSP
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 4
  store i64 %1618, i64* %PC
  %1619 = add i64 48, %1616
  store i64 %1619, i64* %RSP, align 8, !tbaa !2428
  %1620 = icmp ult i64 %1619, %1616
  %1621 = icmp ult i64 %1619, 48
  %1622 = or i1 %1620, %1621
  %1623 = zext i1 %1622 to i8
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1623, i8* %1624, align 1, !tbaa !2432
  %1625 = trunc i64 %1619 to i32
  %1626 = and i32 %1625, 255
  %1627 = call i32 @llvm.ctpop.i32(i32 %1626) #16
  %1628 = trunc i32 %1627 to i8
  %1629 = and i8 %1628, 1
  %1630 = xor i8 %1629, 1
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1630, i8* %1631, align 1, !tbaa !2446
  %1632 = xor i64 48, %1616
  %1633 = xor i64 %1632, %1619
  %1634 = lshr i64 %1633, 4
  %1635 = trunc i64 %1634 to i8
  %1636 = and i8 %1635, 1
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1636, i8* %1637, align 1, !tbaa !2447
  %1638 = icmp eq i64 %1619, 0
  %1639 = zext i1 %1638 to i8
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1639, i8* %1640, align 1, !tbaa !2448
  %1641 = lshr i64 %1619, 63
  %1642 = trunc i64 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1642, i8* %1643, align 1, !tbaa !2449
  %1644 = lshr i64 %1616, 63
  %1645 = xor i64 %1641, %1644
  %1646 = add nuw nsw i64 %1645, %1641
  %1647 = icmp eq i64 %1646, 2
  %1648 = zext i1 %1647 to i8
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1648, i8* %1649, align 1, !tbaa !2450
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 1
  store i64 %1651, i64* %PC
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1653 = load i64, i64* %1652, align 8, !tbaa !2428
  %1654 = add i64 %1653, 8
  %1655 = inttoptr i64 %1653 to i64*
  %1656 = load i64, i64* %1655
  store i64 %1656, i64* %RBP, align 8, !tbaa !2428
  store i64 %1654, i64* %1652, align 8, !tbaa !2428
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 1
  store i64 %1658, i64* %PC
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1661 = load i64, i64* %1660, align 8, !tbaa !2428
  %1662 = inttoptr i64 %1661 to i64*
  %1663 = load i64, i64* %1662
  store i64 %1663, i64* %1659, align 8, !tbaa !2428
  %1664 = add i64 %1661, 8
  store i64 %1664, i64* %1660, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 12
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 7
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i32*
  store i32 10, i32* %1669
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 12
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RDI, align 8, !tbaa !2428
  %1677 = load i64, i64* %PC
  %1678 = sub i64 %1677, 584
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 5
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 5
  store i64 %1682, i64* %PC
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1684 = load i64, i64* %1683, align 8, !tbaa !2428
  %1685 = add i64 %1684, -8
  %1686 = inttoptr i64 %1685 to i64*
  store i64 %1680, i64* %1686
  store i64 %1685, i64* %1683, align 8, !tbaa !2428
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1678, i64* %1687, align 8, !tbaa !2428
  %1688 = load i64, i64* %PC
  %1689 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1688, %struct.Memory* %MEMORY.1)
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 8
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 4
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i64*
  %1695 = load i64, i64* %1694
  store i64 %1695, i64* %RAX, align 8, !tbaa !2428
  %1696 = load i64, i64* %RAX
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  store i64 %1696, i64* %RCX, align 8, !tbaa !2428
  %1699 = load i64, i64* %RCX
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = add i64 4, %1699
  store i64 %1702, i64* %RCX, align 8, !tbaa !2428
  %1703 = icmp ult i64 %1702, %1699
  %1704 = icmp ult i64 %1702, 4
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1706, i8* %1707, align 1, !tbaa !2432
  %1708 = trunc i64 %1702 to i32
  %1709 = and i32 %1708, 255
  %1710 = call i32 @llvm.ctpop.i32(i32 %1709) #16
  %1711 = trunc i32 %1710 to i8
  %1712 = and i8 %1711, 1
  %1713 = xor i8 %1712, 1
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1713, i8* %1714, align 1, !tbaa !2446
  %1715 = xor i64 4, %1699
  %1716 = xor i64 %1715, %1702
  %1717 = lshr i64 %1716, 4
  %1718 = trunc i64 %1717 to i8
  %1719 = and i8 %1718, 1
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1719, i8* %1720, align 1, !tbaa !2447
  %1721 = icmp eq i64 %1702, 0
  %1722 = zext i1 %1721 to i8
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1722, i8* %1723, align 1, !tbaa !2448
  %1724 = lshr i64 %1702, 63
  %1725 = trunc i64 %1724 to i8
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1725, i8* %1726, align 1, !tbaa !2449
  %1727 = lshr i64 %1699, 63
  %1728 = xor i64 %1724, %1727
  %1729 = add nuw nsw i64 %1728, %1724
  %1730 = icmp eq i64 %1729, 2
  %1731 = zext i1 %1730 to i8
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1731, i8* %1732, align 1, !tbaa !2450
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 8
  %1735 = load i64, i64* %RCX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1734 to i64*
  store i64 %1735, i64* %1738
  %1739 = load i64, i64* %RAX
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 3
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742
  %1744 = sext i32 %1743 to i64
  store i64 %1744, i64* %RAX, align 8, !tbaa !2428
  %1745 = load i64, i64* %RAX
  %1746 = mul i64 %1745, 8
  %1747 = add i64 %1746, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 8
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RAX, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 40
  %1754 = load i64, i64* %RAX
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1753 to i64*
  store i64 %1754, i64* %1757
  %1758 = load i64, i64* %PC
  %1759 = sub i64 %1758, 501
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 5
  store i64 %1761, i64* %PC
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1759, i64* %1762, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 12
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  store i32 15, i32* %1767
  %1768 = load i64, i64* %RBP
  %1769 = sub i64 %1768, 12
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 3
  store i64 %1771, i64* %PC
  %1772 = inttoptr i64 %1769 to i32*
  %1773 = load i32, i32* %1772
  %1774 = zext i32 %1773 to i64
  store i64 %1774, i64* %RDI, align 8, !tbaa !2428
  %1775 = load i64, i64* %PC
  %1776 = sub i64 %1775, 834
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 5
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 5
  store i64 %1780, i64* %PC
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1782 = load i64, i64* %1781, align 8, !tbaa !2428
  %1783 = add i64 %1782, -8
  %1784 = inttoptr i64 %1783 to i64*
  store i64 %1778, i64* %1784
  store i64 %1783, i64* %1781, align 8, !tbaa !2428
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1776, i64* %1785, align 8, !tbaa !2428
  %1786 = load i64, i64* %PC
  %1787 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1786, %struct.Memory* %MEMORY.1)
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 8
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 4
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to i64*
  %1793 = load i64, i64* %1792
  store i64 %1793, i64* %RAX, align 8, !tbaa !2428
  %1794 = load i64, i64* %RAX
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  store i64 %1794, i64* %RCX, align 8, !tbaa !2428
  %1797 = load i64, i64* %RCX
  %1798 = load i64, i64* %PC
  %1799 = add i64 %1798, 4
  store i64 %1799, i64* %PC
  %1800 = add i64 4, %1797
  store i64 %1800, i64* %RCX, align 8, !tbaa !2428
  %1801 = icmp ult i64 %1800, %1797
  %1802 = icmp ult i64 %1800, 4
  %1803 = or i1 %1801, %1802
  %1804 = zext i1 %1803 to i8
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1804, i8* %1805, align 1, !tbaa !2432
  %1806 = trunc i64 %1800 to i32
  %1807 = and i32 %1806, 255
  %1808 = call i32 @llvm.ctpop.i32(i32 %1807) #16
  %1809 = trunc i32 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = xor i8 %1810, 1
  %1812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1811, i8* %1812, align 1, !tbaa !2446
  %1813 = xor i64 4, %1797
  %1814 = xor i64 %1813, %1800
  %1815 = lshr i64 %1814, 4
  %1816 = trunc i64 %1815 to i8
  %1817 = and i8 %1816, 1
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1817, i8* %1818, align 1, !tbaa !2447
  %1819 = icmp eq i64 %1800, 0
  %1820 = zext i1 %1819 to i8
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1820, i8* %1821, align 1, !tbaa !2448
  %1822 = lshr i64 %1800, 63
  %1823 = trunc i64 %1822 to i8
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1823, i8* %1824, align 1, !tbaa !2449
  %1825 = lshr i64 %1797, 63
  %1826 = xor i64 %1822, %1825
  %1827 = add nuw nsw i64 %1826, %1822
  %1828 = icmp eq i64 %1827, 2
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1829, i8* %1830, align 1, !tbaa !2450
  %1831 = load i64, i64* %RBP
  %1832 = sub i64 %1831, 8
  %1833 = load i64, i64* %RCX
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 4
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1832 to i64*
  store i64 %1833, i64* %1836
  %1837 = load i64, i64* %RAX
  %1838 = load i64, i64* %PC
  %1839 = add i64 %1838, 3
  store i64 %1839, i64* %PC
  %1840 = inttoptr i64 %1837 to i32*
  %1841 = load i32, i32* %1840
  %1842 = sext i32 %1841 to i64
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RAX
  %1844 = mul i64 %1843, 8
  %1845 = add i64 %1844, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 8
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 40
  %1852 = load i64, i64* %RAX
  %1853 = load i64, i64* %PC
  %1854 = add i64 %1853, 4
  store i64 %1854, i64* %PC
  %1855 = inttoptr i64 %1851 to i64*
  store i64 %1852, i64* %1855
  %1856 = load i64, i64* %PC
  %1857 = sub i64 %1856, 751
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 5
  store i64 %1859, i64* %PC
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1857, i64* %1860, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 12
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 7
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  store i32 20, i32* %1865
  %1866 = load i64, i64* %RBP
  %1867 = sub i64 %1866, 12
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 3
  store i64 %1869, i64* %PC
  %1870 = inttoptr i64 %1867 to i32*
  %1871 = load i32, i32* %1870
  %1872 = zext i32 %1871 to i64
  store i64 %1872, i64* %RDI, align 8, !tbaa !2428
  %1873 = load i64, i64* %PC
  %1874 = sub i64 %1873, 1084
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 5
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 5
  store i64 %1878, i64* %PC
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1880 = load i64, i64* %1879, align 8, !tbaa !2428
  %1881 = add i64 %1880, -8
  %1882 = inttoptr i64 %1881 to i64*
  store i64 %1876, i64* %1882
  store i64 %1881, i64* %1879, align 8, !tbaa !2428
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1874, i64* %1883, align 8, !tbaa !2428
  %1884 = load i64, i64* %PC
  %1885 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1884, %struct.Memory* %MEMORY.1)
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 8
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 4
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i64*
  %1891 = load i64, i64* %1890
  store i64 %1891, i64* %RAX, align 8, !tbaa !2428
  %1892 = load i64, i64* %RAX
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 3
  store i64 %1894, i64* %PC
  store i64 %1892, i64* %RCX, align 8, !tbaa !2428
  %1895 = load i64, i64* %RCX
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 4
  store i64 %1897, i64* %PC
  %1898 = add i64 4, %1895
  store i64 %1898, i64* %RCX, align 8, !tbaa !2428
  %1899 = icmp ult i64 %1898, %1895
  %1900 = icmp ult i64 %1898, 4
  %1901 = or i1 %1899, %1900
  %1902 = zext i1 %1901 to i8
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1902, i8* %1903, align 1, !tbaa !2432
  %1904 = trunc i64 %1898 to i32
  %1905 = and i32 %1904, 255
  %1906 = call i32 @llvm.ctpop.i32(i32 %1905) #16
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = xor i8 %1908, 1
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1909, i8* %1910, align 1, !tbaa !2446
  %1911 = xor i64 4, %1895
  %1912 = xor i64 %1911, %1898
  %1913 = lshr i64 %1912, 4
  %1914 = trunc i64 %1913 to i8
  %1915 = and i8 %1914, 1
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1915, i8* %1916, align 1, !tbaa !2447
  %1917 = icmp eq i64 %1898, 0
  %1918 = zext i1 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1918, i8* %1919, align 1, !tbaa !2448
  %1920 = lshr i64 %1898, 63
  %1921 = trunc i64 %1920 to i8
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1921, i8* %1922, align 1, !tbaa !2449
  %1923 = lshr i64 %1895, 63
  %1924 = xor i64 %1920, %1923
  %1925 = add nuw nsw i64 %1924, %1920
  %1926 = icmp eq i64 %1925, 2
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 8
  %1931 = load i64, i64* %RCX
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 4
  store i64 %1933, i64* %PC
  %1934 = inttoptr i64 %1930 to i64*
  store i64 %1931, i64* %1934
  %1935 = load i64, i64* %RAX
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 3
  store i64 %1937, i64* %PC
  %1938 = inttoptr i64 %1935 to i32*
  %1939 = load i32, i32* %1938
  %1940 = sext i32 %1939 to i64
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = load i64, i64* %RAX
  %1942 = mul i64 %1941, 8
  %1943 = add i64 %1942, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 8
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1943 to i64*
  %1947 = load i64, i64* %1946
  store i64 %1947, i64* %RAX, align 8, !tbaa !2428
  %1948 = load i64, i64* %RBP
  %1949 = sub i64 %1948, 40
  %1950 = load i64, i64* %RAX
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 4
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1949 to i64*
  store i64 %1950, i64* %1953
  %1954 = load i64, i64* %PC
  %1955 = sub i64 %1954, 1001
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 5
  store i64 %1957, i64* %PC
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1955, i64* %1958, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1959 = load i64, i64* %RBP
  %1960 = sub i64 %1959, 12
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 7
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i32*
  store i32 2, i32* %1963
  %1964 = load i64, i64* %RBP
  %1965 = sub i64 %1964, 12
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 3
  store i64 %1967, i64* %PC
  %1968 = inttoptr i64 %1965 to i32*
  %1969 = load i32, i32* %1968
  %1970 = zext i32 %1969 to i64
  store i64 %1970, i64* %RDI, align 8, !tbaa !2428
  %1971 = load i64, i64* %PC
  %1972 = sub i64 %1971, 184
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 5
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 5
  store i64 %1976, i64* %PC
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1978 = load i64, i64* %1977, align 8, !tbaa !2428
  %1979 = add i64 %1978, -8
  %1980 = inttoptr i64 %1979 to i64*
  store i64 %1974, i64* %1980
  store i64 %1979, i64* %1977, align 8, !tbaa !2428
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1972, i64* %1981, align 8, !tbaa !2428
  %1982 = load i64, i64* %PC
  %1983 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1982, %struct.Memory* %MEMORY.1)
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 8
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 4
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i64*
  %1989 = load i64, i64* %1988
  store i64 %1989, i64* %RAX, align 8, !tbaa !2428
  %1990 = load i64, i64* %RAX
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  store i64 %1990, i64* %RCX, align 8, !tbaa !2428
  %1993 = load i64, i64* %RCX
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 4
  store i64 %1995, i64* %PC
  %1996 = add i64 4, %1993
  store i64 %1996, i64* %RCX, align 8, !tbaa !2428
  %1997 = icmp ult i64 %1996, %1993
  %1998 = icmp ult i64 %1996, 4
  %1999 = or i1 %1997, %1998
  %2000 = zext i1 %1999 to i8
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2000, i8* %2001, align 1, !tbaa !2432
  %2002 = trunc i64 %1996 to i32
  %2003 = and i32 %2002, 255
  %2004 = call i32 @llvm.ctpop.i32(i32 %2003) #16
  %2005 = trunc i32 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = xor i8 %2006, 1
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2007, i8* %2008, align 1, !tbaa !2446
  %2009 = xor i64 4, %1993
  %2010 = xor i64 %2009, %1996
  %2011 = lshr i64 %2010, 4
  %2012 = trunc i64 %2011 to i8
  %2013 = and i8 %2012, 1
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2013, i8* %2014, align 1, !tbaa !2447
  %2015 = icmp eq i64 %1996, 0
  %2016 = zext i1 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2016, i8* %2017, align 1, !tbaa !2448
  %2018 = lshr i64 %1996, 63
  %2019 = trunc i64 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2019, i8* %2020, align 1, !tbaa !2449
  %2021 = lshr i64 %1993, 63
  %2022 = xor i64 %2018, %2021
  %2023 = add nuw nsw i64 %2022, %2018
  %2024 = icmp eq i64 %2023, 2
  %2025 = zext i1 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2025, i8* %2026, align 1, !tbaa !2450
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 8
  %2029 = load i64, i64* %RCX
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 4
  store i64 %2031, i64* %PC
  %2032 = inttoptr i64 %2028 to i64*
  store i64 %2029, i64* %2032
  %2033 = load i64, i64* %RAX
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 3
  store i64 %2035, i64* %PC
  %2036 = inttoptr i64 %2033 to i32*
  %2037 = load i32, i32* %2036
  %2038 = sext i32 %2037 to i64
  store i64 %2038, i64* %RAX, align 8, !tbaa !2428
  %2039 = load i64, i64* %RAX
  %2040 = mul i64 %2039, 8
  %2041 = add i64 %2040, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 8
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = load i64, i64* %RBP
  %2047 = sub i64 %2046, 40
  %2048 = load i64, i64* %RAX
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 4
  store i64 %2050, i64* %PC
  %2051 = inttoptr i64 %2047 to i64*
  store i64 %2048, i64* %2051
  %2052 = load i64, i64* %PC
  %2053 = sub i64 %2052, 101
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 5
  store i64 %2055, i64* %PC
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2053, i64* %2056, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4006ca, %block_400a4e, %block_400b4f, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %1028, %block_400b4f ], [ %1885, %block_400922 ], [ %1787, %block_400828 ], [ %1689, %block_40072e ], [ %1126, %block_400a4e ], [ %1537, %block_400ab2 ], [ %1439, %block_400634 ], [ %1341, %block_4009b8 ], [ %1224, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %1983, %block_40059e ], [ %2092, %block_400a1c ], [ %2190, %block_400698 ], [ %2288, %block_400b16 ], [ %2386, %block_400792 ], [ %2484, %block_40088c ]
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 40
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 4
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i64*
  %2062 = load i64, i64* %2061
  store i64 %2062, i64* %RAX, align 8, !tbaa !2428
  %2063 = load i64, i64* %RAX
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 2
  store i64 %2065, i64* %PC
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2063, i64* %2066, align 8, !tbaa !2428
  %2067 = load i64, i64* %PC
  switch i64 %2067, label %2579 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 12
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 7
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  store i32 25, i32* %2072
  %2073 = load i64, i64* %RBP
  %2074 = sub i64 %2073, 12
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 3
  store i64 %2076, i64* %PC
  %2077 = inttoptr i64 %2074 to i32*
  %2078 = load i32, i32* %2077
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDI, align 8, !tbaa !2428
  %2080 = load i64, i64* %PC
  %2081 = sub i64 %2080, 1334
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  %2084 = load i64, i64* %PC
  %2085 = add i64 %2084, 5
  store i64 %2085, i64* %PC
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2087 = load i64, i64* %2086, align 8, !tbaa !2428
  %2088 = add i64 %2087, -8
  %2089 = inttoptr i64 %2088 to i64*
  store i64 %2083, i64* %2089
  store i64 %2088, i64* %2086, align 8, !tbaa !2428
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2081, i64* %2090, align 8, !tbaa !2428
  %2091 = load i64, i64* %PC
  %2092 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2091, %struct.Memory* %MEMORY.1)
  %2093 = load i64, i64* %RBP
  %2094 = sub i64 %2093, 8
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 4
  store i64 %2096, i64* %PC
  %2097 = inttoptr i64 %2094 to i64*
  %2098 = load i64, i64* %2097
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = load i64, i64* %RAX
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 3
  store i64 %2101, i64* %PC
  store i64 %2099, i64* %RCX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RCX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = add i64 4, %2102
  store i64 %2105, i64* %RCX, align 8, !tbaa !2428
  %2106 = icmp ult i64 %2105, %2102
  %2107 = icmp ult i64 %2105, 4
  %2108 = or i1 %2106, %2107
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2109, i8* %2110, align 1, !tbaa !2432
  %2111 = trunc i64 %2105 to i32
  %2112 = and i32 %2111, 255
  %2113 = call i32 @llvm.ctpop.i32(i32 %2112) #16
  %2114 = trunc i32 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = xor i8 %2115, 1
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2116, i8* %2117, align 1, !tbaa !2446
  %2118 = xor i64 4, %2102
  %2119 = xor i64 %2118, %2105
  %2120 = lshr i64 %2119, 4
  %2121 = trunc i64 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2122, i8* %2123, align 1, !tbaa !2447
  %2124 = icmp eq i64 %2105, 0
  %2125 = zext i1 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2125, i8* %2126, align 1, !tbaa !2448
  %2127 = lshr i64 %2105, 63
  %2128 = trunc i64 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2128, i8* %2129, align 1, !tbaa !2449
  %2130 = lshr i64 %2102, 63
  %2131 = xor i64 %2127, %2130
  %2132 = add nuw nsw i64 %2131, %2127
  %2133 = icmp eq i64 %2132, 2
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2134, i8* %2135, align 1, !tbaa !2450
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 8
  %2138 = load i64, i64* %RCX
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 4
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2137 to i64*
  store i64 %2138, i64* %2141
  %2142 = load i64, i64* %RAX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RAX
  %2149 = mul i64 %2148, 8
  %2150 = add i64 %2149, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 8
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 40
  %2157 = load i64, i64* %RAX
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 4
  store i64 %2159, i64* %PC
  %2160 = inttoptr i64 %2156 to i64*
  store i64 %2157, i64* %2160
  %2161 = load i64, i64* %PC
  %2162 = sub i64 %2161, 1251
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 5
  store i64 %2164, i64* %PC
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2162, i64* %2165, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 12
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 7
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  store i32 7, i32* %2170
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 12
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to i32*
  %2176 = load i32, i32* %2175
  %2177 = zext i32 %2176 to i64
  store i64 %2177, i64* %RDI, align 8, !tbaa !2428
  %2178 = load i64, i64* %PC
  %2179 = sub i64 %2178, 434
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC
  %2184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2185 = load i64, i64* %2184, align 8, !tbaa !2428
  %2186 = add i64 %2185, -8
  %2187 = inttoptr i64 %2186 to i64*
  store i64 %2181, i64* %2187
  store i64 %2186, i64* %2184, align 8, !tbaa !2428
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2179, i64* %2188, align 8, !tbaa !2428
  %2189 = load i64, i64* %PC
  %2190 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2189, %struct.Memory* %MEMORY.1)
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 8
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i64*
  %2196 = load i64, i64* %2195
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RAX
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 3
  store i64 %2199, i64* %PC
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2200 = load i64, i64* %RCX
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 4
  store i64 %2202, i64* %PC
  %2203 = add i64 4, %2200
  store i64 %2203, i64* %RCX, align 8, !tbaa !2428
  %2204 = icmp ult i64 %2203, %2200
  %2205 = icmp ult i64 %2203, 4
  %2206 = or i1 %2204, %2205
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2207, i8* %2208, align 1, !tbaa !2432
  %2209 = trunc i64 %2203 to i32
  %2210 = and i32 %2209, 255
  %2211 = call i32 @llvm.ctpop.i32(i32 %2210) #16
  %2212 = trunc i32 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = xor i8 %2213, 1
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2214, i8* %2215, align 1, !tbaa !2446
  %2216 = xor i64 4, %2200
  %2217 = xor i64 %2216, %2203
  %2218 = lshr i64 %2217, 4
  %2219 = trunc i64 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2220, i8* %2221, align 1, !tbaa !2447
  %2222 = icmp eq i64 %2203, 0
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2223, i8* %2224, align 1, !tbaa !2448
  %2225 = lshr i64 %2203, 63
  %2226 = trunc i64 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2226, i8* %2227, align 1, !tbaa !2449
  %2228 = lshr i64 %2200, 63
  %2229 = xor i64 %2225, %2228
  %2230 = add nuw nsw i64 %2229, %2225
  %2231 = icmp eq i64 %2230, 2
  %2232 = zext i1 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2232, i8* %2233, align 1, !tbaa !2450
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 8
  %2236 = load i64, i64* %RCX
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 4
  store i64 %2238, i64* %PC
  %2239 = inttoptr i64 %2235 to i64*
  store i64 %2236, i64* %2239
  %2240 = load i64, i64* %RAX
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i32*
  %2244 = load i32, i32* %2243
  %2245 = sext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RAX
  %2247 = mul i64 %2246, 8
  %2248 = add i64 %2247, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 8
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2248 to i64*
  %2252 = load i64, i64* %2251
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RBP
  %2254 = sub i64 %2253, 40
  %2255 = load i64, i64* %RAX
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 4
  store i64 %2257, i64* %PC
  %2258 = inttoptr i64 %2254 to i64*
  store i64 %2255, i64* %2258
  %2259 = load i64, i64* %PC
  %2260 = sub i64 %2259, 351
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 5
  store i64 %2262, i64* %PC
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2260, i64* %2263, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 12
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 7
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2265 to i32*
  store i32 30, i32* %2268
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 12
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 3
  store i64 %2272, i64* %PC
  %2273 = inttoptr i64 %2270 to i32*
  %2274 = load i32, i32* %2273
  %2275 = zext i32 %2274 to i64
  store i64 %2275, i64* %RDI, align 8, !tbaa !2428
  %2276 = load i64, i64* %PC
  %2277 = sub i64 %2276, 1584
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 5
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 5
  store i64 %2281, i64* %PC
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2283 = load i64, i64* %2282, align 8, !tbaa !2428
  %2284 = add i64 %2283, -8
  %2285 = inttoptr i64 %2284 to i64*
  store i64 %2279, i64* %2285
  store i64 %2284, i64* %2282, align 8, !tbaa !2428
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2277, i64* %2286, align 8, !tbaa !2428
  %2287 = load i64, i64* %PC
  %2288 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2287, %struct.Memory* %MEMORY.1)
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 8
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 4
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = load i64, i64* %RAX
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RCX
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 4
  store i64 %2300, i64* %PC
  %2301 = add i64 4, %2298
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = icmp ult i64 %2301, %2298
  %2303 = icmp ult i64 %2301, 4
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = trunc i64 %2301 to i32
  %2308 = and i32 %2307, 255
  %2309 = call i32 @llvm.ctpop.i32(i32 %2308) #16
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2312, i8* %2313, align 1, !tbaa !2446
  %2314 = xor i64 4, %2298
  %2315 = xor i64 %2314, %2301
  %2316 = lshr i64 %2315, 4
  %2317 = trunc i64 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2318, i8* %2319, align 1, !tbaa !2447
  %2320 = icmp eq i64 %2301, 0
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2321, i8* %2322, align 1, !tbaa !2448
  %2323 = lshr i64 %2301, 63
  %2324 = trunc i64 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2324, i8* %2325, align 1, !tbaa !2449
  %2326 = lshr i64 %2298, 63
  %2327 = xor i64 %2323, %2326
  %2328 = add nuw nsw i64 %2327, %2323
  %2329 = icmp eq i64 %2328, 2
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2330, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 8
  %2334 = load i64, i64* %RCX
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2333 to i64*
  store i64 %2334, i64* %2337
  %2338 = load i64, i64* %RAX
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 3
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341
  %2343 = sext i32 %2342 to i64
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = mul i64 %2344, 8
  %2346 = add i64 %2345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 8
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i64*
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 40
  %2353 = load i64, i64* %RAX
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2352 to i64*
  store i64 %2353, i64* %2356
  %2357 = load i64, i64* %PC
  %2358 = sub i64 %2357, 1501
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2358, i64* %2361, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 12
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i32*
  store i32 12, i32* %2366
  %2367 = load i64, i64* %RBP
  %2368 = sub i64 %2367, 12
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 3
  store i64 %2370, i64* %PC
  %2371 = inttoptr i64 %2368 to i32*
  %2372 = load i32, i32* %2371
  %2373 = zext i32 %2372 to i64
  store i64 %2373, i64* %RDI, align 8, !tbaa !2428
  %2374 = load i64, i64* %PC
  %2375 = sub i64 %2374, 684
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 5
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  store i64 %2379, i64* %PC
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2381 = load i64, i64* %2380, align 8, !tbaa !2428
  %2382 = add i64 %2381, -8
  %2383 = inttoptr i64 %2382 to i64*
  store i64 %2377, i64* %2383
  store i64 %2382, i64* %2380, align 8, !tbaa !2428
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2375, i64* %2384, align 8, !tbaa !2428
  %2385 = load i64, i64* %PC
  %2386 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2385, %struct.Memory* %MEMORY.1)
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 8
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 4
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to i64*
  %2392 = load i64, i64* %2391
  store i64 %2392, i64* %RAX, align 8, !tbaa !2428
  %2393 = load i64, i64* %RAX
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 3
  store i64 %2395, i64* %PC
  store i64 %2393, i64* %RCX, align 8, !tbaa !2428
  %2396 = load i64, i64* %RCX
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 4
  store i64 %2398, i64* %PC
  %2399 = add i64 4, %2396
  store i64 %2399, i64* %RCX, align 8, !tbaa !2428
  %2400 = icmp ult i64 %2399, %2396
  %2401 = icmp ult i64 %2399, 4
  %2402 = or i1 %2400, %2401
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2403, i8* %2404, align 1, !tbaa !2432
  %2405 = trunc i64 %2399 to i32
  %2406 = and i32 %2405, 255
  %2407 = call i32 @llvm.ctpop.i32(i32 %2406) #16
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = xor i8 %2409, 1
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2410, i8* %2411, align 1, !tbaa !2446
  %2412 = xor i64 4, %2396
  %2413 = xor i64 %2412, %2399
  %2414 = lshr i64 %2413, 4
  %2415 = trunc i64 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2416, i8* %2417, align 1, !tbaa !2447
  %2418 = icmp eq i64 %2399, 0
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2419, i8* %2420, align 1, !tbaa !2448
  %2421 = lshr i64 %2399, 63
  %2422 = trunc i64 %2421 to i8
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2422, i8* %2423, align 1, !tbaa !2449
  %2424 = lshr i64 %2396, 63
  %2425 = xor i64 %2421, %2424
  %2426 = add nuw nsw i64 %2425, %2421
  %2427 = icmp eq i64 %2426, 2
  %2428 = zext i1 %2427 to i8
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2428, i8* %2429, align 1, !tbaa !2450
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 8
  %2432 = load i64, i64* %RCX
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 4
  store i64 %2434, i64* %PC
  %2435 = inttoptr i64 %2431 to i64*
  store i64 %2432, i64* %2435
  %2436 = load i64, i64* %RAX
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %PC
  %2439 = inttoptr i64 %2436 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RAX
  %2443 = mul i64 %2442, 8
  %2444 = add i64 %2443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 8
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2444 to i64*
  %2448 = load i64, i64* %2447
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %RAX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 4
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2450 to i64*
  store i64 %2451, i64* %2454
  %2455 = load i64, i64* %PC
  %2456 = sub i64 %2455, 601
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 5
  store i64 %2458, i64* %PC
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2456, i64* %2459, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2460 = load i64, i64* %RBP
  %2461 = sub i64 %2460, 12
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 7
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to i32*
  store i32 17, i32* %2464
  %2465 = load i64, i64* %RBP
  %2466 = sub i64 %2465, 12
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 3
  store i64 %2468, i64* %PC
  %2469 = inttoptr i64 %2466 to i32*
  %2470 = load i32, i32* %2469
  %2471 = zext i32 %2470 to i64
  store i64 %2471, i64* %RDI, align 8, !tbaa !2428
  %2472 = load i64, i64* %PC
  %2473 = sub i64 %2472, 934
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2479 = load i64, i64* %2478, align 8, !tbaa !2428
  %2480 = add i64 %2479, -8
  %2481 = inttoptr i64 %2480 to i64*
  store i64 %2475, i64* %2481
  store i64 %2480, i64* %2478, align 8, !tbaa !2428
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2473, i64* %2482, align 8, !tbaa !2428
  %2483 = load i64, i64* %PC
  %2484 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2483, %struct.Memory* %MEMORY.1)
  %2485 = load i64, i64* %RBP
  %2486 = sub i64 %2485, 8
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 4
  store i64 %2488, i64* %PC
  %2489 = inttoptr i64 %2486 to i64*
  %2490 = load i64, i64* %2489
  store i64 %2490, i64* %RAX, align 8, !tbaa !2428
  %2491 = load i64, i64* %RAX
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 3
  store i64 %2493, i64* %PC
  store i64 %2491, i64* %RCX, align 8, !tbaa !2428
  %2494 = load i64, i64* %RCX
  %2495 = load i64, i64* %PC
  %2496 = add i64 %2495, 4
  store i64 %2496, i64* %PC
  %2497 = add i64 4, %2494
  store i64 %2497, i64* %RCX, align 8, !tbaa !2428
  %2498 = icmp ult i64 %2497, %2494
  %2499 = icmp ult i64 %2497, 4
  %2500 = or i1 %2498, %2499
  %2501 = zext i1 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2501, i8* %2502, align 1, !tbaa !2432
  %2503 = trunc i64 %2497 to i32
  %2504 = and i32 %2503, 255
  %2505 = call i32 @llvm.ctpop.i32(i32 %2504) #16
  %2506 = trunc i32 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = xor i8 %2507, 1
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2508, i8* %2509, align 1, !tbaa !2446
  %2510 = xor i64 4, %2494
  %2511 = xor i64 %2510, %2497
  %2512 = lshr i64 %2511, 4
  %2513 = trunc i64 %2512 to i8
  %2514 = and i8 %2513, 1
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2514, i8* %2515, align 1, !tbaa !2447
  %2516 = icmp eq i64 %2497, 0
  %2517 = zext i1 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2517, i8* %2518, align 1, !tbaa !2448
  %2519 = lshr i64 %2497, 63
  %2520 = trunc i64 %2519 to i8
  %2521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2520, i8* %2521, align 1, !tbaa !2449
  %2522 = lshr i64 %2494, 63
  %2523 = xor i64 %2519, %2522
  %2524 = add nuw nsw i64 %2523, %2519
  %2525 = icmp eq i64 %2524, 2
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2527, align 1, !tbaa !2450
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 8
  %2530 = load i64, i64* %RCX
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2529 to i64*
  store i64 %2530, i64* %2533
  %2534 = load i64, i64* %RAX
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 3
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RAX
  %2541 = mul i64 %2540, 8
  %2542 = add i64 %2541, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 8
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to i64*
  %2546 = load i64, i64* %2545
  store i64 %2546, i64* %RAX, align 8, !tbaa !2428
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 40
  %2549 = load i64, i64* %RAX
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 4
  store i64 %2551, i64* %PC
  %2552 = inttoptr i64 %2548 to i64*
  store i64 %2549, i64* %2552
  %2553 = load i64, i64* %PC
  %2554 = sub i64 %2553, 851
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 5
  store i64 %2556, i64* %PC
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2554, i64* %2557, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 12
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 7
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  store i32 22, i32* %2562
  %2563 = load i64, i64* %PC
  %2564 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2563, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2564

block_400602:                                     ; preds = %block_400566
  %2565 = load i64, i64* %RBP
  %2566 = sub i64 %2565, 12
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 7
  store i64 %2568, i64* %PC
  %2569 = inttoptr i64 %2566 to i32*
  store i32 4, i32* %2569
  %2570 = load i64, i64* %PC
  %2571 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2570, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2571

block_400a80:                                     ; preds = %block_400566
  %2572 = load i64, i64* %RBP
  %2573 = sub i64 %2572, 12
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 7
  store i64 %2575, i64* %PC
  %2576 = inttoptr i64 %2573 to i32*
  store i32 27, i32* %2576
  %2577 = load i64, i64* %PC
  %2578 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2577, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2578

; <label>:2579:                                   ; preds = %block_400566
  %2580 = load i64, i64* %PC
  %2581 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2580, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %2581
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005a5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4005a5

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.0)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 1, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 12
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 134
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %234 = load i64, i64* %233, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %230, i64* %236
  store i64 %235, i64* %233, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %237, align 8, !tbaa !2428
  %238 = load i64, i64* %PC
  %239 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.0)
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = add i64 4, %249
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = icmp ult i64 %252, %249
  %254 = icmp ult i64 %252, 4
  %255 = or i1 %253, %254
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %256, i8* %257, align 1, !tbaa !2432
  %258 = trunc i64 %252 to i32
  %259 = and i32 %258, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i64 4, %249
  %266 = xor i64 %265, %252
  %267 = lshr i64 %266, 4
  %268 = trunc i64 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i64 %252, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %252, 63
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %249, 63
  %278 = xor i64 %274, %277
  %279 = add nuw nsw i64 %278, %274
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %RCX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288
  %289 = load i64, i64* %RAX
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RAX
  %296 = mul i64 %295, 8
  %297 = add i64 %296, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 8
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 40
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %303 to i64*
  store i64 %304, i64* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 51
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 9, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %319

block_4009ea:                                     ; preds = %block_400566
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 24, i32* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 12
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 1284
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.0)
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 8
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = add i64 4, %354
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = icmp ult i64 %357, %354
  %359 = icmp ult i64 %357, 4
  %360 = or i1 %358, %359
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2432
  %363 = trunc i64 %357 to i32
  %364 = and i32 %363, 255
  %365 = call i32 @llvm.ctpop.i32(i32 %364) #16
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %368, i8* %369, align 1, !tbaa !2446
  %370 = xor i64 4, %354
  %371 = xor i64 %370, %357
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i64 %357, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i64 %357, 63
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i64 %354, 63
  %383 = xor i64 %379, %382
  %384 = add nuw nsw i64 %383, %379
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 8
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %389 to i64*
  store i64 %390, i64* %393
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = mul i64 %400, 8
  %402 = add i64 %401, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 8
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 40
  %409 = load i64, i64* %RAX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 1201
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 7
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 6, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 12
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 384
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.0)
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 8
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  store i64 %449, i64* %RCX, align 8, !tbaa !2428
  %452 = load i64, i64* %RCX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC
  %455 = add i64 4, %452
  store i64 %455, i64* %RCX, align 8, !tbaa !2428
  %456 = icmp ult i64 %455, %452
  %457 = icmp ult i64 %455, 4
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2432
  %461 = trunc i64 %455 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 4, %452
  %469 = xor i64 %468, %455
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = icmp eq i64 %455, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i64 %455, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = lshr i64 %452, 63
  %481 = xor i64 %477, %480
  %482 = add nuw nsw i64 %481, %477
  %483 = icmp eq i64 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2450
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 8
  %488 = load i64, i64* %RCX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RAX
  %499 = mul i64 %498, 8
  %500 = add i64 %499, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 8
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 40
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %506 to i64*
  store i64 %507, i64* %510
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 301
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %515, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 29, i32* %520
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 12
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 3
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %RDI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 1534
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.0)
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 8
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  store i64 %547, i64* %RCX, align 8, !tbaa !2428
  %550 = load i64, i64* %RCX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = add i64 4, %550
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %550
  %555 = icmp ult i64 %553, 4
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2432
  %559 = trunc i64 %553 to i32
  %560 = and i32 %559, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2446
  %566 = xor i64 4, %550
  %567 = xor i64 %566, %553
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2447
  %572 = icmp eq i64 %553, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2448
  %575 = lshr i64 %553, 63
  %576 = trunc i64 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = lshr i64 %550, 63
  %579 = xor i64 %575, %578
  %580 = add nuw nsw i64 %579, %575
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %582, i8* %583, align 1, !tbaa !2450
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 8
  %586 = load i64, i64* %RCX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %585 to i64*
  store i64 %586, i64* %589
  %590 = load i64, i64* %RAX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i32*
  %594 = load i32, i32* %593
  %595 = sext i32 %594 to i64
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = load i64, i64* %RAX
  %597 = mul i64 %596, 8
  %598 = add i64 %597, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 8
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i64*
  %602 = load i64, i64* %601
  store i64 %602, i64* %RAX, align 8, !tbaa !2428
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 40
  %605 = load i64, i64* %RAX
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %604 to i64*
  store i64 %605, i64* %608
  %609 = load i64, i64* %PC
  %610 = sub i64 %609, 1451
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %610, i64* %613, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 7
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  store i32 11, i32* %618
  %619 = load i64, i64* %RBP
  %620 = sub i64 %619, 12
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 3
  store i64 %622, i64* %PC
  %623 = inttoptr i64 %620 to i32*
  %624 = load i32, i32* %623
  %625 = zext i32 %624 to i64
  store i64 %625, i64* %RDI, align 8, !tbaa !2428
  %626 = load i64, i64* %PC
  %627 = sub i64 %626, 634
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 5
  store i64 %631, i64* %PC
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %633 = load i64, i64* %632, align 8, !tbaa !2428
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %629, i64* %635
  store i64 %634, i64* %632, align 8, !tbaa !2428
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %636, align 8, !tbaa !2428
  %637 = load i64, i64* %PC
  %638 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %637, %struct.Memory* %MEMORY.0)
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 8
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RAX
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  store i64 %645, i64* %RCX, align 8, !tbaa !2428
  %648 = load i64, i64* %RCX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = add i64 4, %648
  store i64 %651, i64* %RCX, align 8, !tbaa !2428
  %652 = icmp ult i64 %651, %648
  %653 = icmp ult i64 %651, 4
  %654 = or i1 %652, %653
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %655, i8* %656, align 1, !tbaa !2432
  %657 = trunc i64 %651 to i32
  %658 = and i32 %657, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #16
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i64 4, %648
  %665 = xor i64 %664, %651
  %666 = lshr i64 %665, 4
  %667 = trunc i64 %666 to i8
  %668 = and i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %668, i8* %669, align 1, !tbaa !2447
  %670 = icmp eq i64 %651, 0
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %671, i8* %672, align 1, !tbaa !2448
  %673 = lshr i64 %651, 63
  %674 = trunc i64 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %674, i8* %675, align 1, !tbaa !2449
  %676 = lshr i64 %648, 63
  %677 = xor i64 %673, %676
  %678 = add nuw nsw i64 %677, %673
  %679 = icmp eq i64 %678, 2
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %680, i8* %681, align 1, !tbaa !2450
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 8
  %684 = load i64, i64* %RCX
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %683 to i64*
  store i64 %684, i64* %687
  %688 = load i64, i64* %RAX
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 3
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i32*
  %692 = load i32, i32* %691
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RAX, align 8, !tbaa !2428
  %694 = load i64, i64* %RAX
  %695 = mul i64 %694, 8
  %696 = add i64 %695, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 8
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %RAX, align 8, !tbaa !2428
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 40
  %703 = load i64, i64* %RAX
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %702 to i64*
  store i64 %703, i64* %706
  %707 = load i64, i64* %PC
  %708 = sub i64 %707, 551
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %708, i64* %711, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 12
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 7
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  store i32 16, i32* %716
  %717 = load i64, i64* %PC
  %718 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %717, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %718

block_400954:                                     ; preds = %block_400566
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 12
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  store i32 21, i32* %723
  %724 = load i64, i64* %PC
  %725 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %724, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %725

block_400a4e:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 26, i32* %730
  %731 = load i64, i64* %PC
  %732 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %731, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %732

block_400b48:                                     ; preds = %block_400566
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 12
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i32*
  store i32 31, i32* %737
  %738 = load i64, i64* %PC
  %739 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %739

block_4007c4:                                     ; preds = %block_400566
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 12
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 7
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i32*
  store i32 13, i32* %744
  %745 = load i64, i64* %PC
  %746 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %745, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %746

block_400566:                                     ; preds = %block_400922, %block_4005a5, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %1288, %block_4005a5 ], [ %1386, %block_400922 ], [ %1195, %block_400828 ], [ %1097, %block_40072e ], [ %999, %block_400ab2 ], [ %901, %block_400634 ], [ %803, %block_4009b8 ], [ %141, %block_4008f0 ], [ %344, %block_4009ea ], [ %239, %block_40056c ], [ %43, %block_4007f6 ], [ %442, %block_400666 ], [ %540, %block_400ae4 ], [ %638, %block_400760 ]
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 40
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 2
  store i64 %755, i64* %PC
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %756, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  switch i64 %757, label %1528 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 12
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 7
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  store i32 3, i32* %762
  %763 = load i64, i64* %PC
  %764 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %764

block_4008be:                                     ; preds = %block_400566
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 12
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  store i32 18, i32* %769
  %770 = load i64, i64* %PC
  %771 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %770, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %771

block_4006ca:                                     ; preds = %block_400566
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 12
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  store i32 8, i32* %776
  %777 = load i64, i64* %PC
  %778 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %777, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %778

block_4009b8:                                     ; preds = %block_400566
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 7
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  store i32 23, i32* %783
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 12
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = load i64, i64* %PC
  %792 = sub i64 %791, 1234
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 5
  store i64 %796, i64* %PC
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %798 = load i64, i64* %797, align 8, !tbaa !2428
  %799 = add i64 %798, -8
  %800 = inttoptr i64 %799 to i64*
  store i64 %794, i64* %800
  store i64 %799, i64* %797, align 8, !tbaa !2428
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %792, i64* %801, align 8, !tbaa !2428
  %802 = load i64, i64* %PC
  %803 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %802, %struct.Memory* %MEMORY.0)
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 8
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  store i64 %810, i64* %RCX, align 8, !tbaa !2428
  %813 = load i64, i64* %RCX
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 4
  store i64 %815, i64* %PC
  %816 = add i64 4, %813
  store i64 %816, i64* %RCX, align 8, !tbaa !2428
  %817 = icmp ult i64 %816, %813
  %818 = icmp ult i64 %816, 4
  %819 = or i1 %817, %818
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = trunc i64 %816 to i32
  %823 = and i32 %822, 255
  %824 = call i32 @llvm.ctpop.i32(i32 %823) #16
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %827, i8* %828, align 1, !tbaa !2446
  %829 = xor i64 4, %813
  %830 = xor i64 %829, %816
  %831 = lshr i64 %830, 4
  %832 = trunc i64 %831 to i8
  %833 = and i8 %832, 1
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %833, i8* %834, align 1, !tbaa !2447
  %835 = icmp eq i64 %816, 0
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %836, i8* %837, align 1, !tbaa !2448
  %838 = lshr i64 %816, 63
  %839 = trunc i64 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2449
  %841 = lshr i64 %813, 63
  %842 = xor i64 %838, %841
  %843 = add nuw nsw i64 %842, %838
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %845, i8* %846, align 1, !tbaa !2450
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %RCX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %848 to i64*
  store i64 %849, i64* %852
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 3
  store i64 %855, i64* %PC
  %856 = inttoptr i64 %853 to i32*
  %857 = load i32, i32* %856
  %858 = sext i32 %857 to i64
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = load i64, i64* %RAX
  %860 = mul i64 %859, 8
  %861 = add i64 %860, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 8
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 40
  %868 = load i64, i64* %RAX
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %867 to i64*
  store i64 %868, i64* %871
  %872 = load i64, i64* %PC
  %873 = sub i64 %872, 1151
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 5
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %873, i64* %876, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 12
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 7
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  store i32 5, i32* %881
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 12
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %883 to i32*
  %887 = load i32, i32* %886
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RDI, align 8, !tbaa !2428
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 334
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %892, i64* %898
  store i64 %897, i64* %895, align 8, !tbaa !2428
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %899, align 8, !tbaa !2428
  %900 = load i64, i64* %PC
  %901 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %900, %struct.Memory* %MEMORY.0)
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 8
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 4
  store i64 %905, i64* %PC
  %906 = inttoptr i64 %903 to i64*
  %907 = load i64, i64* %906
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = load i64, i64* %RAX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %911 = load i64, i64* %RCX
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 4
  store i64 %913, i64* %PC
  %914 = add i64 4, %911
  store i64 %914, i64* %RCX, align 8, !tbaa !2428
  %915 = icmp ult i64 %914, %911
  %916 = icmp ult i64 %914, 4
  %917 = or i1 %915, %916
  %918 = zext i1 %917 to i8
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %918, i8* %919, align 1, !tbaa !2432
  %920 = trunc i64 %914 to i32
  %921 = and i32 %920, 255
  %922 = call i32 @llvm.ctpop.i32(i32 %921) #16
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %925, i8* %926, align 1, !tbaa !2446
  %927 = xor i64 4, %911
  %928 = xor i64 %927, %914
  %929 = lshr i64 %928, 4
  %930 = trunc i64 %929 to i8
  %931 = and i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %931, i8* %932, align 1, !tbaa !2447
  %933 = icmp eq i64 %914, 0
  %934 = zext i1 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %934, i8* %935, align 1, !tbaa !2448
  %936 = lshr i64 %914, 63
  %937 = trunc i64 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %937, i8* %938, align 1, !tbaa !2449
  %939 = lshr i64 %911, 63
  %940 = xor i64 %936, %939
  %941 = add nuw nsw i64 %940, %936
  %942 = icmp eq i64 %941, 2
  %943 = zext i1 %942 to i8
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %943, i8* %944, align 1, !tbaa !2450
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 8
  %947 = load i64, i64* %RCX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %946 to i64*
  store i64 %947, i64* %950
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 3
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i32*
  %955 = load i32, i32* %954
  %956 = sext i32 %955 to i64
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RAX
  %958 = mul i64 %957, 8
  %959 = add i64 %958, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 8
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i64*
  %963 = load i64, i64* %962
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 40
  %966 = load i64, i64* %RAX
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 4
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %965 to i64*
  store i64 %966, i64* %969
  %970 = load i64, i64* %PC
  %971 = sub i64 %970, 251
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 5
  store i64 %973, i64* %PC
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %971, i64* %974, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 12
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  store i32 28, i32* %979
  %980 = load i64, i64* %RBP
  %981 = sub i64 %980, 12
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 3
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %981 to i32*
  %985 = load i32, i32* %984
  %986 = zext i32 %985 to i64
  store i64 %986, i64* %RDI, align 8, !tbaa !2428
  %987 = load i64, i64* %PC
  %988 = sub i64 %987, 1484
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 5
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 5
  store i64 %992, i64* %PC
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %994 = load i64, i64* %993, align 8, !tbaa !2428
  %995 = add i64 %994, -8
  %996 = inttoptr i64 %995 to i64*
  store i64 %990, i64* %996
  store i64 %995, i64* %993, align 8, !tbaa !2428
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %988, i64* %997, align 8, !tbaa !2428
  %998 = load i64, i64* %PC
  %999 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %998, %struct.Memory* %MEMORY.0)
  %1000 = load i64, i64* %RBP
  %1001 = sub i64 %1000, 8
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 4
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1001 to i64*
  %1005 = load i64, i64* %1004
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RAX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC
  store i64 %1006, i64* %RCX, align 8, !tbaa !2428
  %1009 = load i64, i64* %RCX
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 4
  store i64 %1011, i64* %PC
  %1012 = add i64 4, %1009
  store i64 %1012, i64* %RCX, align 8, !tbaa !2428
  %1013 = icmp ult i64 %1012, %1009
  %1014 = icmp ult i64 %1012, 4
  %1015 = or i1 %1013, %1014
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1016, i8* %1017, align 1, !tbaa !2432
  %1018 = trunc i64 %1012 to i32
  %1019 = and i32 %1018, 255
  %1020 = call i32 @llvm.ctpop.i32(i32 %1019) #16
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1023, i8* %1024, align 1, !tbaa !2446
  %1025 = xor i64 4, %1009
  %1026 = xor i64 %1025, %1012
  %1027 = lshr i64 %1026, 4
  %1028 = trunc i64 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1029, i8* %1030, align 1, !tbaa !2447
  %1031 = icmp eq i64 %1012, 0
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1032, i8* %1033, align 1, !tbaa !2448
  %1034 = lshr i64 %1012, 63
  %1035 = trunc i64 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1035, i8* %1036, align 1, !tbaa !2449
  %1037 = lshr i64 %1009, 63
  %1038 = xor i64 %1034, %1037
  %1039 = add nuw nsw i64 %1038, %1034
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1041, i8* %1042, align 1, !tbaa !2450
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 8
  %1045 = load i64, i64* %RCX
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 4
  store i64 %1047, i64* %PC
  %1048 = inttoptr i64 %1044 to i64*
  store i64 %1045, i64* %1048
  %1049 = load i64, i64* %RAX
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 3
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1049 to i32*
  %1053 = load i32, i32* %1052
  %1054 = sext i32 %1053 to i64
  store i64 %1054, i64* %RAX, align 8, !tbaa !2428
  %1055 = load i64, i64* %RAX
  %1056 = mul i64 %1055, 8
  %1057 = add i64 %1056, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 8
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP
  %1063 = sub i64 %1062, 40
  %1064 = load i64, i64* %RAX
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1063 to i64*
  store i64 %1064, i64* %1067
  %1068 = load i64, i64* %PC
  %1069 = sub i64 %1068, 1401
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 5
  store i64 %1071, i64* %PC
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1069, i64* %1072, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 12
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 7
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  store i32 10, i32* %1077
  %1078 = load i64, i64* %RBP
  %1079 = sub i64 %1078, 12
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 3
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1079 to i32*
  %1083 = load i32, i32* %1082
  %1084 = zext i32 %1083 to i64
  store i64 %1084, i64* %RDI, align 8, !tbaa !2428
  %1085 = load i64, i64* %PC
  %1086 = sub i64 %1085, 584
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 5
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 5
  store i64 %1090, i64* %PC
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1092 = load i64, i64* %1091, align 8, !tbaa !2428
  %1093 = add i64 %1092, -8
  %1094 = inttoptr i64 %1093 to i64*
  store i64 %1088, i64* %1094
  store i64 %1093, i64* %1091, align 8, !tbaa !2428
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1086, i64* %1095, align 8, !tbaa !2428
  %1096 = load i64, i64* %PC
  %1097 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1096, %struct.Memory* %MEMORY.0)
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 8
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RAX
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 3
  store i64 %1106, i64* %PC
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RCX
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = add i64 4, %1107
  store i64 %1110, i64* %RCX, align 8, !tbaa !2428
  %1111 = icmp ult i64 %1110, %1107
  %1112 = icmp ult i64 %1110, 4
  %1113 = or i1 %1111, %1112
  %1114 = zext i1 %1113 to i8
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1114, i8* %1115, align 1, !tbaa !2432
  %1116 = trunc i64 %1110 to i32
  %1117 = and i32 %1116, 255
  %1118 = call i32 @llvm.ctpop.i32(i32 %1117) #16
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1121, i8* %1122, align 1, !tbaa !2446
  %1123 = xor i64 4, %1107
  %1124 = xor i64 %1123, %1110
  %1125 = lshr i64 %1124, 4
  %1126 = trunc i64 %1125 to i8
  %1127 = and i8 %1126, 1
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1127, i8* %1128, align 1, !tbaa !2447
  %1129 = icmp eq i64 %1110, 0
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1130, i8* %1131, align 1, !tbaa !2448
  %1132 = lshr i64 %1110, 63
  %1133 = trunc i64 %1132 to i8
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1133, i8* %1134, align 1, !tbaa !2449
  %1135 = lshr i64 %1107, 63
  %1136 = xor i64 %1132, %1135
  %1137 = add nuw nsw i64 %1136, %1132
  %1138 = icmp eq i64 %1137, 2
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1139, i8* %1140, align 1, !tbaa !2450
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 8
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1142 to i64*
  store i64 %1143, i64* %1146
  %1147 = load i64, i64* %RAX
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 3
  store i64 %1149, i64* %PC
  %1150 = inttoptr i64 %1147 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  store i64 %1152, i64* %RAX, align 8, !tbaa !2428
  %1153 = load i64, i64* %RAX
  %1154 = mul i64 %1153, 8
  %1155 = add i64 %1154, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 8
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1155 to i64*
  %1159 = load i64, i64* %1158
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 40
  %1162 = load i64, i64* %RAX
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1161 to i64*
  store i64 %1162, i64* %1165
  %1166 = load i64, i64* %PC
  %1167 = sub i64 %1166, 501
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 5
  store i64 %1169, i64* %PC
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1167, i64* %1170, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 12
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 7
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1172 to i32*
  store i32 15, i32* %1175
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 12
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 3
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180
  %1182 = zext i32 %1181 to i64
  store i64 %1182, i64* %RDI, align 8, !tbaa !2428
  %1183 = load i64, i64* %PC
  %1184 = sub i64 %1183, 834
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 5
  store i64 %1188, i64* %PC
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1190 = load i64, i64* %1189, align 8, !tbaa !2428
  %1191 = add i64 %1190, -8
  %1192 = inttoptr i64 %1191 to i64*
  store i64 %1186, i64* %1192
  store i64 %1191, i64* %1189, align 8, !tbaa !2428
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1184, i64* %1193, align 8, !tbaa !2428
  %1194 = load i64, i64* %PC
  %1195 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1194, %struct.Memory* %MEMORY.0)
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 8
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RAX
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 3
  store i64 %1204, i64* %PC
  store i64 %1202, i64* %RCX, align 8, !tbaa !2428
  %1205 = load i64, i64* %RCX
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = add i64 4, %1205
  store i64 %1208, i64* %RCX, align 8, !tbaa !2428
  %1209 = icmp ult i64 %1208, %1205
  %1210 = icmp ult i64 %1208, 4
  %1211 = or i1 %1209, %1210
  %1212 = zext i1 %1211 to i8
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1212, i8* %1213, align 1, !tbaa !2432
  %1214 = trunc i64 %1208 to i32
  %1215 = and i32 %1214, 255
  %1216 = call i32 @llvm.ctpop.i32(i32 %1215) #16
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1219, i8* %1220, align 1, !tbaa !2446
  %1221 = xor i64 4, %1205
  %1222 = xor i64 %1221, %1208
  %1223 = lshr i64 %1222, 4
  %1224 = trunc i64 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1225, i8* %1226, align 1, !tbaa !2447
  %1227 = icmp eq i64 %1208, 0
  %1228 = zext i1 %1227 to i8
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1228, i8* %1229, align 1, !tbaa !2448
  %1230 = lshr i64 %1208, 63
  %1231 = trunc i64 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1231, i8* %1232, align 1, !tbaa !2449
  %1233 = lshr i64 %1205, 63
  %1234 = xor i64 %1230, %1233
  %1235 = add nuw nsw i64 %1234, %1230
  %1236 = icmp eq i64 %1235, 2
  %1237 = zext i1 %1236 to i8
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1237, i8* %1238, align 1, !tbaa !2450
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 8
  %1241 = load i64, i64* %RCX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = inttoptr i64 %1240 to i64*
  store i64 %1241, i64* %1244
  %1245 = load i64, i64* %RAX
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 3
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1245 to i32*
  %1249 = load i32, i32* %1248
  %1250 = sext i32 %1249 to i64
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  %1251 = load i64, i64* %RAX
  %1252 = mul i64 %1251, 8
  %1253 = add i64 %1252, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 8
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256
  store i64 %1257, i64* %RAX, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 40
  %1260 = load i64, i64* %RAX
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 4
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1259 to i64*
  store i64 %1260, i64* %1263
  %1264 = load i64, i64* %PC
  %1265 = sub i64 %1264, 751
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 5
  store i64 %1267, i64* %PC
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1265, i64* %1268, align 8, !tbaa !2428
  br label %block_400566

block_4005a5:                                     ; preds = %block_40059e, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_40059e ]
  %1269 = load i64, i64* %RBP
  %1270 = sub i64 %1269, 12
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 3
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1270 to i32*
  %1274 = load i32, i32* %1273
  %1275 = zext i32 %1274 to i64
  store i64 %1275, i64* %RDI, align 8, !tbaa !2428
  %1276 = load i64, i64* %PC
  %1277 = sub i64 %1276, 184
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 5
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 5
  store i64 %1281, i64* %PC
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1283 = load i64, i64* %1282, align 8, !tbaa !2428
  %1284 = add i64 %1283, -8
  %1285 = inttoptr i64 %1284 to i64*
  store i64 %1279, i64* %1285
  store i64 %1284, i64* %1282, align 8, !tbaa !2428
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1277, i64* %1286, align 8, !tbaa !2428
  %1287 = load i64, i64* %PC
  %1288 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1287, %struct.Memory* %MEMORY.1)
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 8
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 4
  store i64 %1292, i64* %PC
  %1293 = inttoptr i64 %1290 to i64*
  %1294 = load i64, i64* %1293
  store i64 %1294, i64* %RAX, align 8, !tbaa !2428
  %1295 = load i64, i64* %RAX
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 3
  store i64 %1297, i64* %PC
  store i64 %1295, i64* %RCX, align 8, !tbaa !2428
  %1298 = load i64, i64* %RCX
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 4
  store i64 %1300, i64* %PC
  %1301 = add i64 4, %1298
  store i64 %1301, i64* %RCX, align 8, !tbaa !2428
  %1302 = icmp ult i64 %1301, %1298
  %1303 = icmp ult i64 %1301, 4
  %1304 = or i1 %1302, %1303
  %1305 = zext i1 %1304 to i8
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1305, i8* %1306, align 1, !tbaa !2432
  %1307 = trunc i64 %1301 to i32
  %1308 = and i32 %1307, 255
  %1309 = call i32 @llvm.ctpop.i32(i32 %1308) #16
  %1310 = trunc i32 %1309 to i8
  %1311 = and i8 %1310, 1
  %1312 = xor i8 %1311, 1
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1312, i8* %1313, align 1, !tbaa !2446
  %1314 = xor i64 4, %1298
  %1315 = xor i64 %1314, %1301
  %1316 = lshr i64 %1315, 4
  %1317 = trunc i64 %1316 to i8
  %1318 = and i8 %1317, 1
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1318, i8* %1319, align 1, !tbaa !2447
  %1320 = icmp eq i64 %1301, 0
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1321, i8* %1322, align 1, !tbaa !2448
  %1323 = lshr i64 %1301, 63
  %1324 = trunc i64 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1324, i8* %1325, align 1, !tbaa !2449
  %1326 = lshr i64 %1298, 63
  %1327 = xor i64 %1323, %1326
  %1328 = add nuw nsw i64 %1327, %1323
  %1329 = icmp eq i64 %1328, 2
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1330, i8* %1331, align 1, !tbaa !2450
  %1332 = load i64, i64* %RBP
  %1333 = sub i64 %1332, 8
  %1334 = load i64, i64* %RCX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 4
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1333 to i64*
  store i64 %1334, i64* %1337
  %1338 = load i64, i64* %RAX
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i32*
  %1342 = load i32, i32* %1341
  %1343 = sext i32 %1342 to i64
  store i64 %1343, i64* %RAX, align 8, !tbaa !2428
  %1344 = load i64, i64* %RAX
  %1345 = mul i64 %1344, 8
  %1346 = add i64 %1345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 8
  store i64 %1348, i64* %PC
  %1349 = inttoptr i64 %1346 to i64*
  %1350 = load i64, i64* %1349
  store i64 %1350, i64* %RAX, align 8, !tbaa !2428
  %1351 = load i64, i64* %RBP
  %1352 = sub i64 %1351, 40
  %1353 = load i64, i64* %RAX
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1352 to i64*
  store i64 %1353, i64* %1356
  %1357 = load i64, i64* %PC
  %1358 = sub i64 %1357, 101
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1358, i64* %1361, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1362 = load i64, i64* %RBP
  %1363 = sub i64 %1362, 12
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 7
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1363 to i32*
  store i32 20, i32* %1366
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 12
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 3
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  %1372 = load i32, i32* %1371
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %RDI, align 8, !tbaa !2428
  %1374 = load i64, i64* %PC
  %1375 = sub i64 %1374, 1084
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 5
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  store i64 %1379, i64* %PC
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1381 = load i64, i64* %1380, align 8, !tbaa !2428
  %1382 = add i64 %1381, -8
  %1383 = inttoptr i64 %1382 to i64*
  store i64 %1377, i64* %1383
  store i64 %1382, i64* %1380, align 8, !tbaa !2428
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1375, i64* %1384, align 8, !tbaa !2428
  %1385 = load i64, i64* %PC
  %1386 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1385, %struct.Memory* %MEMORY.0)
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 8
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 4
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i64*
  %1392 = load i64, i64* %1391
  store i64 %1392, i64* %RAX, align 8, !tbaa !2428
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3
  store i64 %1395, i64* %PC
  store i64 %1393, i64* %RCX, align 8, !tbaa !2428
  %1396 = load i64, i64* %RCX
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 4
  store i64 %1398, i64* %PC
  %1399 = add i64 4, %1396
  store i64 %1399, i64* %RCX, align 8, !tbaa !2428
  %1400 = icmp ult i64 %1399, %1396
  %1401 = icmp ult i64 %1399, 4
  %1402 = or i1 %1400, %1401
  %1403 = zext i1 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1403, i8* %1404, align 1, !tbaa !2432
  %1405 = trunc i64 %1399 to i32
  %1406 = and i32 %1405, 255
  %1407 = call i32 @llvm.ctpop.i32(i32 %1406) #16
  %1408 = trunc i32 %1407 to i8
  %1409 = and i8 %1408, 1
  %1410 = xor i8 %1409, 1
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1410, i8* %1411, align 1, !tbaa !2446
  %1412 = xor i64 4, %1396
  %1413 = xor i64 %1412, %1399
  %1414 = lshr i64 %1413, 4
  %1415 = trunc i64 %1414 to i8
  %1416 = and i8 %1415, 1
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1416, i8* %1417, align 1, !tbaa !2447
  %1418 = icmp eq i64 %1399, 0
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1419, i8* %1420, align 1, !tbaa !2448
  %1421 = lshr i64 %1399, 63
  %1422 = trunc i64 %1421 to i8
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1422, i8* %1423, align 1, !tbaa !2449
  %1424 = lshr i64 %1396, 63
  %1425 = xor i64 %1421, %1424
  %1426 = add nuw nsw i64 %1425, %1421
  %1427 = icmp eq i64 %1426, 2
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1428, i8* %1429, align 1, !tbaa !2450
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 8
  %1432 = load i64, i64* %RCX
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 4
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1431 to i64*
  store i64 %1432, i64* %1435
  %1436 = load i64, i64* %RAX
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 3
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i32*
  %1440 = load i32, i32* %1439
  %1441 = sext i32 %1440 to i64
  store i64 %1441, i64* %RAX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RAX
  %1443 = mul i64 %1442, 8
  %1444 = add i64 %1443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 8
  store i64 %1446, i64* %PC
  %1447 = inttoptr i64 %1444 to i64*
  %1448 = load i64, i64* %1447
  store i64 %1448, i64* %RAX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 40
  %1451 = load i64, i64* %RAX
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 4
  store i64 %1453, i64* %PC
  %1454 = inttoptr i64 %1450 to i64*
  store i64 %1451, i64* %1454
  %1455 = load i64, i64* %PC
  %1456 = sub i64 %1455, 1001
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 5
  store i64 %1458, i64* %PC
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1456, i64* %1459, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 12
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 7
  store i64 %1463, i64* %PC
  %1464 = inttoptr i64 %1461 to i32*
  store i32 2, i32* %1464
  br label %block_4005a5

block_400559:                                     ; preds = %block_400566
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 12
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 7
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1466 to i32*
  store i32 0, i32* %1469
  %1470 = load i64, i64* %PC
  %1471 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %1470, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1471

block_400a1c:                                     ; preds = %block_400566
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 12
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 7
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1473 to i32*
  store i32 25, i32* %1476
  %1477 = load i64, i64* %PC
  %1478 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1477, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1478

block_400698:                                     ; preds = %block_400566
  %1479 = load i64, i64* %RBP
  %1480 = sub i64 %1479, 12
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 7
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1480 to i32*
  store i32 7, i32* %1483
  %1484 = load i64, i64* %PC
  %1485 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %1484, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1485

block_400b16:                                     ; preds = %block_400566
  %1486 = load i64, i64* %RBP
  %1487 = sub i64 %1486, 12
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 7
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1487 to i32*
  store i32 30, i32* %1490
  %1491 = load i64, i64* %PC
  %1492 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1491, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1492

block_400792:                                     ; preds = %block_400566
  %1493 = load i64, i64* %RBP
  %1494 = sub i64 %1493, 12
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 7
  store i64 %1496, i64* %PC
  %1497 = inttoptr i64 %1494 to i32*
  store i32 12, i32* %1497
  %1498 = load i64, i64* %PC
  %1499 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1498, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1499

block_40088c:                                     ; preds = %block_400566
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 12
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 7
  store i64 %1503, i64* %PC
  %1504 = inttoptr i64 %1501 to i32*
  store i32 17, i32* %1504
  %1505 = load i64, i64* %PC
  %1506 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1505, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1506

block_400986:                                     ; preds = %block_400566
  %1507 = load i64, i64* %RBP
  %1508 = sub i64 %1507, 12
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 7
  store i64 %1510, i64* %PC
  %1511 = inttoptr i64 %1508 to i32*
  store i32 22, i32* %1511
  %1512 = load i64, i64* %PC
  %1513 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1512, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1513

block_400602:                                     ; preds = %block_400566
  %1514 = load i64, i64* %RBP
  %1515 = sub i64 %1514, 12
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 7
  store i64 %1517, i64* %PC
  %1518 = inttoptr i64 %1515 to i32*
  store i32 4, i32* %1518
  %1519 = load i64, i64* %PC
  %1520 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1519, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1520

block_400a80:                                     ; preds = %block_400566
  %1521 = load i64, i64* %RBP
  %1522 = sub i64 %1521, 12
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 7
  store i64 %1524, i64* %PC
  %1525 = inttoptr i64 %1522 to i32*
  store i32 27, i32* %1525
  %1526 = load i64, i64* %PC
  %1527 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1526, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1527

; <label>:1528:                                   ; preds = %block_400566
  %1529 = load i64, i64* %PC
  %1530 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1529, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1530
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003c8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003c8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003da, label %block_4003d8

block_4003d8:                                     ; preds = %block_4003c8
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003da

block_4003da:                                     ; preds = %block_4003d8, %block_4003c8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003c8 ], [ %92, %block_4003d8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005d7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4005d7

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 24, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 1284
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 1201
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 6, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 384
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 301
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_40056c, %block_400954, %block_4005d7, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %799, %block_4005d7 ], [ %1618, %block_400922 ], [ %1520, %block_400828 ], [ %1422, %block_40072e ], [ %1324, %block_400ab2 ], [ %1226, %block_400634 ], [ %1128, %block_4009b8 ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %249, %block_4009ea ], [ %1030, %block_40056c ], [ %347, %block_400666 ], [ %456, %block_400ae4 ], [ %1716, %block_40059e ], [ %554, %block_400760 ], [ %652, %block_40085a ], [ %897, %block_400954 ], [ %1819, %block_400a1c ], [ %1917, %block_400698 ], [ %2015, %block_400b16 ], [ %2113, %block_400792 ]
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 2
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  switch i64 %431, label %2215 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4195742, label %block_40059e
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400ae4:                                     ; preds = %block_400566
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 12
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i32*
  store i32 29, i32* %436
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 12
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1534
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %455, %struct.Memory* %MEMORY.0)
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 8
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 4
  store i64 %468, i64* %PC
  %469 = add i64 4, %466
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = icmp ult i64 %469, %466
  %471 = icmp ult i64 %469, 4
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %473, i8* %474, align 1, !tbaa !2432
  %475 = trunc i64 %469 to i32
  %476 = and i32 %475, 255
  %477 = call i32 @llvm.ctpop.i32(i32 %476) #16
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %480, i8* %481, align 1, !tbaa !2446
  %482 = xor i64 4, %466
  %483 = xor i64 %482, %469
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %486, i8* %487, align 1, !tbaa !2447
  %488 = icmp eq i64 %469, 0
  %489 = zext i1 %488 to i8
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %489, i8* %490, align 1, !tbaa !2448
  %491 = lshr i64 %469, 63
  %492 = trunc i64 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %492, i8* %493, align 1, !tbaa !2449
  %494 = lshr i64 %466, 63
  %495 = xor i64 %491, %494
  %496 = add nuw nsw i64 %495, %491
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %RCX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %501 to i64*
  store i64 %502, i64* %505
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = load i64, i64* %RAX
  %513 = mul i64 %512, 8
  %514 = add i64 %513, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 8
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %RAX
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %520 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %PC
  %526 = sub i64 %525, 1451
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 12
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 7
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i32*
  store i32 11, i32* %534
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 12
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = sub i64 %542, 634
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, -8
  %551 = inttoptr i64 %550 to i64*
  store i64 %545, i64* %551
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %543, i64* %552, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %553, %struct.Memory* %MEMORY.0)
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 8
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 4
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i64, i64* %RAX
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 3
  store i64 %563, i64* %PC
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %564 = load i64, i64* %RCX
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = add i64 4, %564
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = icmp ult i64 %567, %564
  %569 = icmp ult i64 %567, 4
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = trunc i64 %567 to i32
  %574 = and i32 %573, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 4, %564
  %581 = xor i64 %580, %567
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i64 %567, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i64 %567, 63
  %590 = trunc i64 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i64 %564, 63
  %593 = xor i64 %589, %592
  %594 = add nuw nsw i64 %593, %589
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 8
  %600 = load i64, i64* %RCX
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %599 to i64*
  store i64 %600, i64* %603
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = mul i64 %610, 8
  %612 = add i64 %611, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 8
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 40
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622
  %623 = load i64, i64* %PC
  %624 = sub i64 %623, 551
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %627, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 16, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 12
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = sub i64 %640, 884
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 5
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %647 = load i64, i64* %646, align 8, !tbaa !2428
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %649
  store i64 %648, i64* %646, align 8, !tbaa !2428
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %641, i64* %650, align 8, !tbaa !2428
  %651 = load i64, i64* %PC
  %652 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.0)
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 8
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %662 = load i64, i64* %RCX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = add i64 4, %662
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = icmp ult i64 %665, %662
  %667 = icmp ult i64 %665, 4
  %668 = or i1 %666, %667
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %669, i8* %670, align 1, !tbaa !2432
  %671 = trunc i64 %665 to i32
  %672 = and i32 %671, 255
  %673 = call i32 @llvm.ctpop.i32(i32 %672) #16
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %676, i8* %677, align 1, !tbaa !2446
  %678 = xor i64 4, %662
  %679 = xor i64 %678, %665
  %680 = lshr i64 %679, 4
  %681 = trunc i64 %680 to i8
  %682 = and i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = icmp eq i64 %665, 0
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = lshr i64 %665, 63
  %688 = trunc i64 %687 to i8
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %688, i8* %689, align 1, !tbaa !2449
  %690 = lshr i64 %662, 63
  %691 = xor i64 %687, %690
  %692 = add nuw nsw i64 %691, %687
  %693 = icmp eq i64 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 8
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %RAX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = mul i64 %708, 8
  %710 = add i64 %709, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 8
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 40
  %717 = load i64, i64* %RAX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %716 to i64*
  store i64 %717, i64* %720
  %721 = load i64, i64* %PC
  %722 = sub i64 %721, 801
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 0, i32* %730
  %731 = load i64, i64* %RSP
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = add i64 48, %731
  store i64 %734, i64* %RSP, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %731
  %736 = icmp ult i64 %734, 48
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 48, %731
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i64 %731, 63
  %760 = xor i64 %756, %759
  %761 = add nuw nsw i64 %760, %756
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %768 = load i64, i64* %767, align 8, !tbaa !2428
  %769 = add i64 %768, 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %RBP, align 8, !tbaa !2428
  store i64 %769, i64* %767, align 8, !tbaa !2428
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 1
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %776 = load i64, i64* %775, align 8, !tbaa !2428
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %774, align 8, !tbaa !2428
  %779 = add i64 %776, 8
  store i64 %779, i64* %775, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005d7:                                     ; preds = %block_4005d0, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_4005d0 ]
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 3
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RDI, align 8, !tbaa !2428
  %787 = load i64, i64* %PC
  %788 = sub i64 %787, 234
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 5
  store i64 %792, i64* %PC
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %794 = load i64, i64* %793, align 8, !tbaa !2428
  %795 = add i64 %794, -8
  %796 = inttoptr i64 %795 to i64*
  store i64 %790, i64* %796
  store i64 %795, i64* %793, align 8, !tbaa !2428
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %788, i64* %797, align 8, !tbaa !2428
  %798 = load i64, i64* %PC
  %799 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %798, %struct.Memory* %MEMORY.1)
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 8
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 3
  store i64 %808, i64* %PC
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %809 = load i64, i64* %RCX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = add i64 4, %809
  store i64 %812, i64* %RCX, align 8, !tbaa !2428
  %813 = icmp ult i64 %812, %809
  %814 = icmp ult i64 %812, 4
  %815 = or i1 %813, %814
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %816, i8* %817, align 1, !tbaa !2432
  %818 = trunc i64 %812 to i32
  %819 = and i32 %818, 255
  %820 = call i32 @llvm.ctpop.i32(i32 %819) #16
  %821 = trunc i32 %820 to i8
  %822 = and i8 %821, 1
  %823 = xor i8 %822, 1
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %823, i8* %824, align 1, !tbaa !2446
  %825 = xor i64 4, %809
  %826 = xor i64 %825, %812
  %827 = lshr i64 %826, 4
  %828 = trunc i64 %827 to i8
  %829 = and i8 %828, 1
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %829, i8* %830, align 1, !tbaa !2447
  %831 = icmp eq i64 %812, 0
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %832, i8* %833, align 1, !tbaa !2448
  %834 = lshr i64 %812, 63
  %835 = trunc i64 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %835, i8* %836, align 1, !tbaa !2449
  %837 = lshr i64 %809, 63
  %838 = xor i64 %834, %837
  %839 = add nuw nsw i64 %838, %834
  %840 = icmp eq i64 %839, 2
  %841 = zext i1 %840 to i8
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %841, i8* %842, align 1, !tbaa !2450
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 8
  %845 = load i64, i64* %RCX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %844 to i64*
  store i64 %845, i64* %848
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i32*
  %853 = load i32, i32* %852
  %854 = sext i32 %853 to i64
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = load i64, i64* %RAX
  %856 = mul i64 %855, 8
  %857 = add i64 %856, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 8
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860
  store i64 %861, i64* %RAX, align 8, !tbaa !2428
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 40
  %864 = load i64, i64* %RAX
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 4
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %863 to i64*
  store i64 %864, i64* %867
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 151
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  store i64 %871, i64* %PC
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %872, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 12
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 7
  store i64 %876, i64* %PC
  %877 = inttoptr i64 %874 to i32*
  store i32 21, i32* %877
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 12
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i32*
  %883 = load i32, i32* %882
  %884 = zext i32 %883 to i64
  store i64 %884, i64* %RDI, align 8, !tbaa !2428
  %885 = load i64, i64* %PC
  %886 = sub i64 %885, 1134
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 5
  store i64 %890, i64* %PC
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %892 = load i64, i64* %891, align 8, !tbaa !2428
  %893 = add i64 %892, -8
  %894 = inttoptr i64 %893 to i64*
  store i64 %888, i64* %894
  store i64 %893, i64* %891, align 8, !tbaa !2428
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %886, i64* %895, align 8, !tbaa !2428
  %896 = load i64, i64* %PC
  %897 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %896, %struct.Memory* %MEMORY.0)
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 8
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i64*
  %903 = load i64, i64* %902
  store i64 %903, i64* %RAX, align 8, !tbaa !2428
  %904 = load i64, i64* %RAX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 3
  store i64 %906, i64* %PC
  store i64 %904, i64* %RCX, align 8, !tbaa !2428
  %907 = load i64, i64* %RCX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = add i64 4, %907
  store i64 %910, i64* %RCX, align 8, !tbaa !2428
  %911 = icmp ult i64 %910, %907
  %912 = icmp ult i64 %910, 4
  %913 = or i1 %911, %912
  %914 = zext i1 %913 to i8
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %914, i8* %915, align 1, !tbaa !2432
  %916 = trunc i64 %910 to i32
  %917 = and i32 %916, 255
  %918 = call i32 @llvm.ctpop.i32(i32 %917) #16
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %921, i8* %922, align 1, !tbaa !2446
  %923 = xor i64 4, %907
  %924 = xor i64 %923, %910
  %925 = lshr i64 %924, 4
  %926 = trunc i64 %925 to i8
  %927 = and i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %927, i8* %928, align 1, !tbaa !2447
  %929 = icmp eq i64 %910, 0
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %930, i8* %931, align 1, !tbaa !2448
  %932 = lshr i64 %910, 63
  %933 = trunc i64 %932 to i8
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %933, i8* %934, align 1, !tbaa !2449
  %935 = lshr i64 %907, 63
  %936 = xor i64 %932, %935
  %937 = add nuw nsw i64 %936, %932
  %938 = icmp eq i64 %937, 2
  %939 = zext i1 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %939, i8* %940, align 1, !tbaa !2450
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 8
  %943 = load i64, i64* %RCX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 4
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %942 to i64*
  store i64 %943, i64* %946
  %947 = load i64, i64* %RAX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 3
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i32*
  %951 = load i32, i32* %950
  %952 = sext i32 %951 to i64
  store i64 %952, i64* %RAX, align 8, !tbaa !2428
  %953 = load i64, i64* %RAX
  %954 = mul i64 %953, 8
  %955 = add i64 %954, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 8
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i64*
  %959 = load i64, i64* %958
  store i64 %959, i64* %RAX, align 8, !tbaa !2428
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 40
  %962 = load i64, i64* %RAX
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 4
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %961 to i64*
  store i64 %962, i64* %965
  %966 = load i64, i64* %PC
  %967 = sub i64 %966, 1051
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 5
  store i64 %969, i64* %PC
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %967, i64* %970, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 12
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 7
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  store i32 26, i32* %975
  %976 = load i64, i64* %PC
  %977 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %976, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %977

block_4006ca:                                     ; preds = %block_400566
  %978 = load i64, i64* %RBP
  %979 = sub i64 %978, 12
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 7
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %979 to i32*
  store i32 8, i32* %982
  %983 = load i64, i64* %PC
  %984 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %983, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %984

block_400b48:                                     ; preds = %block_400566
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 12
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 7
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i32*
  store i32 31, i32* %989
  %990 = load i64, i64* %PC
  %991 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %990, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %991

block_4007c4:                                     ; preds = %block_400566
  %992 = load i64, i64* %RBP
  %993 = sub i64 %992, 12
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 7
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i32*
  store i32 13, i32* %996
  %997 = load i64, i64* %PC
  %998 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %997, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %998

block_4008be:                                     ; preds = %block_400566
  %999 = load i64, i64* %RBP
  %1000 = sub i64 %999, 12
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 7
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i32*
  store i32 18, i32* %1003
  %1004 = load i64, i64* %PC
  %1005 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1004, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1005

block_40056c:                                     ; preds = %block_400566
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 12
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 7
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i32*
  store i32 1, i32* %1010
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 12
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 3
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  %1016 = load i32, i32* %1015
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %RDI, align 8, !tbaa !2428
  %1018 = load i64, i64* %PC
  %1019 = sub i64 %1018, 134
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 5
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 5
  store i64 %1023, i64* %PC
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1025 = load i64, i64* %1024, align 8, !tbaa !2428
  %1026 = add i64 %1025, -8
  %1027 = inttoptr i64 %1026 to i64*
  store i64 %1021, i64* %1027
  store i64 %1026, i64* %1024, align 8, !tbaa !2428
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1019, i64* %1028, align 8, !tbaa !2428
  %1029 = load i64, i64* %PC
  %1030 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1029, %struct.Memory* %MEMORY.0)
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 8
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 4
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to i64*
  %1036 = load i64, i64* %1035
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = load i64, i64* %RAX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  store i64 %1037, i64* %RCX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RCX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = add i64 4, %1040
  store i64 %1043, i64* %RCX, align 8, !tbaa !2428
  %1044 = icmp ult i64 %1043, %1040
  %1045 = icmp ult i64 %1043, 4
  %1046 = or i1 %1044, %1045
  %1047 = zext i1 %1046 to i8
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1047, i8* %1048, align 1, !tbaa !2432
  %1049 = trunc i64 %1043 to i32
  %1050 = and i32 %1049, 255
  %1051 = call i32 @llvm.ctpop.i32(i32 %1050) #16
  %1052 = trunc i32 %1051 to i8
  %1053 = and i8 %1052, 1
  %1054 = xor i8 %1053, 1
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1054, i8* %1055, align 1, !tbaa !2446
  %1056 = xor i64 4, %1040
  %1057 = xor i64 %1056, %1043
  %1058 = lshr i64 %1057, 4
  %1059 = trunc i64 %1058 to i8
  %1060 = and i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1060, i8* %1061, align 1, !tbaa !2447
  %1062 = icmp eq i64 %1043, 0
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1063, i8* %1064, align 1, !tbaa !2448
  %1065 = lshr i64 %1043, 63
  %1066 = trunc i64 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1066, i8* %1067, align 1, !tbaa !2449
  %1068 = lshr i64 %1040, 63
  %1069 = xor i64 %1065, %1068
  %1070 = add nuw nsw i64 %1069, %1065
  %1071 = icmp eq i64 %1070, 2
  %1072 = zext i1 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1072, i8* %1073, align 1, !tbaa !2450
  %1074 = load i64, i64* %RBP
  %1075 = sub i64 %1074, 8
  %1076 = load i64, i64* %RCX
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 4
  store i64 %1078, i64* %PC
  %1079 = inttoptr i64 %1075 to i64*
  store i64 %1076, i64* %1079
  %1080 = load i64, i64* %RAX
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 3
  store i64 %1082, i64* %PC
  %1083 = inttoptr i64 %1080 to i32*
  %1084 = load i32, i32* %1083
  %1085 = sext i32 %1084 to i64
  store i64 %1085, i64* %RAX, align 8, !tbaa !2428
  %1086 = load i64, i64* %RAX
  %1087 = mul i64 %1086, 8
  %1088 = add i64 %1087, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 8
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1088 to i64*
  %1092 = load i64, i64* %1091
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 40
  %1095 = load i64, i64* %RAX
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1094 to i64*
  store i64 %1095, i64* %1098
  %1099 = load i64, i64* %PC
  %1100 = sub i64 %1099, 51
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 5
  store i64 %1102, i64* %PC
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1100, i64* %1103, align 8, !tbaa !2428
  br label %block_400566

block_4009b8:                                     ; preds = %block_400566
  %1104 = load i64, i64* %RBP
  %1105 = sub i64 %1104, 12
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 7
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1105 to i32*
  store i32 23, i32* %1108
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 12
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 3
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1110 to i32*
  %1114 = load i32, i32* %1113
  %1115 = zext i32 %1114 to i64
  store i64 %1115, i64* %RDI, align 8, !tbaa !2428
  %1116 = load i64, i64* %PC
  %1117 = sub i64 %1116, 1234
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 5
  store i64 %1121, i64* %PC
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1123 = load i64, i64* %1122, align 8, !tbaa !2428
  %1124 = add i64 %1123, -8
  %1125 = inttoptr i64 %1124 to i64*
  store i64 %1119, i64* %1125
  store i64 %1124, i64* %1122, align 8, !tbaa !2428
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1117, i64* %1126, align 8, !tbaa !2428
  %1127 = load i64, i64* %PC
  %1128 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1127, %struct.Memory* %MEMORY.0)
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 8
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i64*
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* %RAX, align 8, !tbaa !2428
  %1135 = load i64, i64* %RAX
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 3
  store i64 %1137, i64* %PC
  store i64 %1135, i64* %RCX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RCX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = add i64 4, %1138
  store i64 %1141, i64* %RCX, align 8, !tbaa !2428
  %1142 = icmp ult i64 %1141, %1138
  %1143 = icmp ult i64 %1141, 4
  %1144 = or i1 %1142, %1143
  %1145 = zext i1 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1145, i8* %1146, align 1, !tbaa !2432
  %1147 = trunc i64 %1141 to i32
  %1148 = and i32 %1147, 255
  %1149 = call i32 @llvm.ctpop.i32(i32 %1148) #16
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = xor i8 %1151, 1
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1152, i8* %1153, align 1, !tbaa !2446
  %1154 = xor i64 4, %1138
  %1155 = xor i64 %1154, %1141
  %1156 = lshr i64 %1155, 4
  %1157 = trunc i64 %1156 to i8
  %1158 = and i8 %1157, 1
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1158, i8* %1159, align 1, !tbaa !2447
  %1160 = icmp eq i64 %1141, 0
  %1161 = zext i1 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1161, i8* %1162, align 1, !tbaa !2448
  %1163 = lshr i64 %1141, 63
  %1164 = trunc i64 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1164, i8* %1165, align 1, !tbaa !2449
  %1166 = lshr i64 %1138, 63
  %1167 = xor i64 %1163, %1166
  %1168 = add nuw nsw i64 %1167, %1163
  %1169 = icmp eq i64 %1168, 2
  %1170 = zext i1 %1169 to i8
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1170, i8* %1171, align 1, !tbaa !2450
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 8
  %1174 = load i64, i64* %RCX
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 4
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1173 to i64*
  store i64 %1174, i64* %1177
  %1178 = load i64, i64* %RAX
  %1179 = load i64, i64* %PC
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC
  %1181 = inttoptr i64 %1178 to i32*
  %1182 = load i32, i32* %1181
  %1183 = sext i32 %1182 to i64
  store i64 %1183, i64* %RAX, align 8, !tbaa !2428
  %1184 = load i64, i64* %RAX
  %1185 = mul i64 %1184, 8
  %1186 = add i64 %1185, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 8
  store i64 %1188, i64* %PC
  %1189 = inttoptr i64 %1186 to i64*
  %1190 = load i64, i64* %1189
  store i64 %1190, i64* %RAX, align 8, !tbaa !2428
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 40
  %1193 = load i64, i64* %RAX
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 4
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1192 to i64*
  store i64 %1193, i64* %1196
  %1197 = load i64, i64* %PC
  %1198 = sub i64 %1197, 1151
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 5
  store i64 %1200, i64* %PC
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1198, i64* %1201, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 12
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 7
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i32*
  store i32 5, i32* %1206
  %1207 = load i64, i64* %RBP
  %1208 = sub i64 %1207, 12
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 3
  store i64 %1210, i64* %PC
  %1211 = inttoptr i64 %1208 to i32*
  %1212 = load i32, i32* %1211
  %1213 = zext i32 %1212 to i64
  store i64 %1213, i64* %RDI, align 8, !tbaa !2428
  %1214 = load i64, i64* %PC
  %1215 = sub i64 %1214, 334
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 5
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 5
  store i64 %1219, i64* %PC
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1221 = load i64, i64* %1220, align 8, !tbaa !2428
  %1222 = add i64 %1221, -8
  %1223 = inttoptr i64 %1222 to i64*
  store i64 %1217, i64* %1223
  store i64 %1222, i64* %1220, align 8, !tbaa !2428
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1215, i64* %1224, align 8, !tbaa !2428
  %1225 = load i64, i64* %PC
  %1226 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1225, %struct.Memory* %MEMORY.0)
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 8
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 4
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i64*
  %1232 = load i64, i64* %1231
  store i64 %1232, i64* %RAX, align 8, !tbaa !2428
  %1233 = load i64, i64* %RAX
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  store i64 %1233, i64* %RCX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RCX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %PC
  %1239 = add i64 4, %1236
  store i64 %1239, i64* %RCX, align 8, !tbaa !2428
  %1240 = icmp ult i64 %1239, %1236
  %1241 = icmp ult i64 %1239, 4
  %1242 = or i1 %1240, %1241
  %1243 = zext i1 %1242 to i8
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1243, i8* %1244, align 1, !tbaa !2432
  %1245 = trunc i64 %1239 to i32
  %1246 = and i32 %1245, 255
  %1247 = call i32 @llvm.ctpop.i32(i32 %1246) #16
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = xor i8 %1249, 1
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1250, i8* %1251, align 1, !tbaa !2446
  %1252 = xor i64 4, %1236
  %1253 = xor i64 %1252, %1239
  %1254 = lshr i64 %1253, 4
  %1255 = trunc i64 %1254 to i8
  %1256 = and i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1256, i8* %1257, align 1, !tbaa !2447
  %1258 = icmp eq i64 %1239, 0
  %1259 = zext i1 %1258 to i8
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1259, i8* %1260, align 1, !tbaa !2448
  %1261 = lshr i64 %1239, 63
  %1262 = trunc i64 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1262, i8* %1263, align 1, !tbaa !2449
  %1264 = lshr i64 %1236, 63
  %1265 = xor i64 %1261, %1264
  %1266 = add nuw nsw i64 %1265, %1261
  %1267 = icmp eq i64 %1266, 2
  %1268 = zext i1 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1268, i8* %1269, align 1, !tbaa !2450
  %1270 = load i64, i64* %RBP
  %1271 = sub i64 %1270, 8
  %1272 = load i64, i64* %RCX
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1271 to i64*
  store i64 %1272, i64* %1275
  %1276 = load i64, i64* %RAX
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1276 to i32*
  %1280 = load i32, i32* %1279
  %1281 = sext i32 %1280 to i64
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = load i64, i64* %RAX
  %1283 = mul i64 %1282, 8
  %1284 = add i64 %1283, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 8
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1284 to i64*
  %1288 = load i64, i64* %1287
  store i64 %1288, i64* %RAX, align 8, !tbaa !2428
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 40
  %1291 = load i64, i64* %RAX
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1290 to i64*
  store i64 %1291, i64* %1294
  %1295 = load i64, i64* %PC
  %1296 = sub i64 %1295, 251
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 5
  store i64 %1298, i64* %PC
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1296, i64* %1299, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 12
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 7
  store i64 %1303, i64* %PC
  %1304 = inttoptr i64 %1301 to i32*
  store i32 28, i32* %1304
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 12
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 3
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i32*
  %1310 = load i32, i32* %1309
  %1311 = zext i32 %1310 to i64
  store i64 %1311, i64* %RDI, align 8, !tbaa !2428
  %1312 = load i64, i64* %PC
  %1313 = sub i64 %1312, 1484
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 5
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 5
  store i64 %1317, i64* %PC
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1319 = load i64, i64* %1318, align 8, !tbaa !2428
  %1320 = add i64 %1319, -8
  %1321 = inttoptr i64 %1320 to i64*
  store i64 %1315, i64* %1321
  store i64 %1320, i64* %1318, align 8, !tbaa !2428
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1313, i64* %1322, align 8, !tbaa !2428
  %1323 = load i64, i64* %PC
  %1324 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1323, %struct.Memory* %MEMORY.0)
  %1325 = load i64, i64* %RBP
  %1326 = sub i64 %1325, 8
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC
  %1329 = inttoptr i64 %1326 to i64*
  %1330 = load i64, i64* %1329
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1331 = load i64, i64* %RAX
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 3
  store i64 %1333, i64* %PC
  store i64 %1331, i64* %RCX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RCX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 4
  store i64 %1336, i64* %PC
  %1337 = add i64 4, %1334
  store i64 %1337, i64* %RCX, align 8, !tbaa !2428
  %1338 = icmp ult i64 %1337, %1334
  %1339 = icmp ult i64 %1337, 4
  %1340 = or i1 %1338, %1339
  %1341 = zext i1 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1341, i8* %1342, align 1, !tbaa !2432
  %1343 = trunc i64 %1337 to i32
  %1344 = and i32 %1343, 255
  %1345 = call i32 @llvm.ctpop.i32(i32 %1344) #16
  %1346 = trunc i32 %1345 to i8
  %1347 = and i8 %1346, 1
  %1348 = xor i8 %1347, 1
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1348, i8* %1349, align 1, !tbaa !2446
  %1350 = xor i64 4, %1334
  %1351 = xor i64 %1350, %1337
  %1352 = lshr i64 %1351, 4
  %1353 = trunc i64 %1352 to i8
  %1354 = and i8 %1353, 1
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1354, i8* %1355, align 1, !tbaa !2447
  %1356 = icmp eq i64 %1337, 0
  %1357 = zext i1 %1356 to i8
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1357, i8* %1358, align 1, !tbaa !2448
  %1359 = lshr i64 %1337, 63
  %1360 = trunc i64 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1360, i8* %1361, align 1, !tbaa !2449
  %1362 = lshr i64 %1334, 63
  %1363 = xor i64 %1359, %1362
  %1364 = add nuw nsw i64 %1363, %1359
  %1365 = icmp eq i64 %1364, 2
  %1366 = zext i1 %1365 to i8
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1366, i8* %1367, align 1, !tbaa !2450
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 8
  %1370 = load i64, i64* %RCX
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 4
  store i64 %1372, i64* %PC
  %1373 = inttoptr i64 %1369 to i64*
  store i64 %1370, i64* %1373
  %1374 = load i64, i64* %RAX
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 3
  store i64 %1376, i64* %PC
  %1377 = inttoptr i64 %1374 to i32*
  %1378 = load i32, i32* %1377
  %1379 = sext i32 %1378 to i64
  store i64 %1379, i64* %RAX, align 8, !tbaa !2428
  %1380 = load i64, i64* %RAX
  %1381 = mul i64 %1380, 8
  %1382 = add i64 %1381, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 8
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1382 to i64*
  %1386 = load i64, i64* %1385
  store i64 %1386, i64* %RAX, align 8, !tbaa !2428
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 40
  %1389 = load i64, i64* %RAX
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 4
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1388 to i64*
  store i64 %1389, i64* %1392
  %1393 = load i64, i64* %PC
  %1394 = sub i64 %1393, 1401
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 5
  store i64 %1396, i64* %PC
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1394, i64* %1397, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 12
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 7
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i32*
  store i32 10, i32* %1402
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 12
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 3
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i32*
  %1408 = load i32, i32* %1407
  %1409 = zext i32 %1408 to i64
  store i64 %1409, i64* %RDI, align 8, !tbaa !2428
  %1410 = load i64, i64* %PC
  %1411 = sub i64 %1410, 584
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 5
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 5
  store i64 %1415, i64* %PC
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1417 = load i64, i64* %1416, align 8, !tbaa !2428
  %1418 = add i64 %1417, -8
  %1419 = inttoptr i64 %1418 to i64*
  store i64 %1413, i64* %1419
  store i64 %1418, i64* %1416, align 8, !tbaa !2428
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1411, i64* %1420, align 8, !tbaa !2428
  %1421 = load i64, i64* %PC
  %1422 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1421, %struct.Memory* %MEMORY.0)
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 8
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 4
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427
  store i64 %1428, i64* %RAX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RAX
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 3
  store i64 %1431, i64* %PC
  store i64 %1429, i64* %RCX, align 8, !tbaa !2428
  %1432 = load i64, i64* %RCX
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 4
  store i64 %1434, i64* %PC
  %1435 = add i64 4, %1432
  store i64 %1435, i64* %RCX, align 8, !tbaa !2428
  %1436 = icmp ult i64 %1435, %1432
  %1437 = icmp ult i64 %1435, 4
  %1438 = or i1 %1436, %1437
  %1439 = zext i1 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1439, i8* %1440, align 1, !tbaa !2432
  %1441 = trunc i64 %1435 to i32
  %1442 = and i32 %1441, 255
  %1443 = call i32 @llvm.ctpop.i32(i32 %1442) #16
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  %1446 = xor i8 %1445, 1
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1446, i8* %1447, align 1, !tbaa !2446
  %1448 = xor i64 4, %1432
  %1449 = xor i64 %1448, %1435
  %1450 = lshr i64 %1449, 4
  %1451 = trunc i64 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1452, i8* %1453, align 1, !tbaa !2447
  %1454 = icmp eq i64 %1435, 0
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1455, i8* %1456, align 1, !tbaa !2448
  %1457 = lshr i64 %1435, 63
  %1458 = trunc i64 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1458, i8* %1459, align 1, !tbaa !2449
  %1460 = lshr i64 %1432, 63
  %1461 = xor i64 %1457, %1460
  %1462 = add nuw nsw i64 %1461, %1457
  %1463 = icmp eq i64 %1462, 2
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1464, i8* %1465, align 1, !tbaa !2450
  %1466 = load i64, i64* %RBP
  %1467 = sub i64 %1466, 8
  %1468 = load i64, i64* %RCX
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 4
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1467 to i64*
  store i64 %1468, i64* %1471
  %1472 = load i64, i64* %RAX
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 3
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i32*
  %1476 = load i32, i32* %1475
  %1477 = sext i32 %1476 to i64
  store i64 %1477, i64* %RAX, align 8, !tbaa !2428
  %1478 = load i64, i64* %RAX
  %1479 = mul i64 %1478, 8
  %1480 = add i64 %1479, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 8
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1480 to i64*
  %1484 = load i64, i64* %1483
  store i64 %1484, i64* %RAX, align 8, !tbaa !2428
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 40
  %1487 = load i64, i64* %RAX
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1486 to i64*
  store i64 %1487, i64* %1490
  %1491 = load i64, i64* %PC
  %1492 = sub i64 %1491, 501
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 5
  store i64 %1494, i64* %PC
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1492, i64* %1495, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1496 = load i64, i64* %RBP
  %1497 = sub i64 %1496, 12
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 7
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to i32*
  store i32 15, i32* %1500
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 12
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 3
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i32*
  %1506 = load i32, i32* %1505
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %RDI, align 8, !tbaa !2428
  %1508 = load i64, i64* %PC
  %1509 = sub i64 %1508, 834
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 5
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1515 = load i64, i64* %1514, align 8, !tbaa !2428
  %1516 = add i64 %1515, -8
  %1517 = inttoptr i64 %1516 to i64*
  store i64 %1511, i64* %1517
  store i64 %1516, i64* %1514, align 8, !tbaa !2428
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1509, i64* %1518, align 8, !tbaa !2428
  %1519 = load i64, i64* %PC
  %1520 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1519, %struct.Memory* %MEMORY.0)
  %1521 = load i64, i64* %RBP
  %1522 = sub i64 %1521, 8
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 4
  store i64 %1524, i64* %PC
  %1525 = inttoptr i64 %1522 to i64*
  %1526 = load i64, i64* %1525
  store i64 %1526, i64* %RAX, align 8, !tbaa !2428
  %1527 = load i64, i64* %RAX
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 3
  store i64 %1529, i64* %PC
  store i64 %1527, i64* %RCX, align 8, !tbaa !2428
  %1530 = load i64, i64* %RCX
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 4
  store i64 %1532, i64* %PC
  %1533 = add i64 4, %1530
  store i64 %1533, i64* %RCX, align 8, !tbaa !2428
  %1534 = icmp ult i64 %1533, %1530
  %1535 = icmp ult i64 %1533, 4
  %1536 = or i1 %1534, %1535
  %1537 = zext i1 %1536 to i8
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1537, i8* %1538, align 1, !tbaa !2432
  %1539 = trunc i64 %1533 to i32
  %1540 = and i32 %1539, 255
  %1541 = call i32 @llvm.ctpop.i32(i32 %1540) #16
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  %1544 = xor i8 %1543, 1
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1544, i8* %1545, align 1, !tbaa !2446
  %1546 = xor i64 4, %1530
  %1547 = xor i64 %1546, %1533
  %1548 = lshr i64 %1547, 4
  %1549 = trunc i64 %1548 to i8
  %1550 = and i8 %1549, 1
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1550, i8* %1551, align 1, !tbaa !2447
  %1552 = icmp eq i64 %1533, 0
  %1553 = zext i1 %1552 to i8
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1553, i8* %1554, align 1, !tbaa !2448
  %1555 = lshr i64 %1533, 63
  %1556 = trunc i64 %1555 to i8
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1556, i8* %1557, align 1, !tbaa !2449
  %1558 = lshr i64 %1530, 63
  %1559 = xor i64 %1555, %1558
  %1560 = add nuw nsw i64 %1559, %1555
  %1561 = icmp eq i64 %1560, 2
  %1562 = zext i1 %1561 to i8
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1562, i8* %1563, align 1, !tbaa !2450
  %1564 = load i64, i64* %RBP
  %1565 = sub i64 %1564, 8
  %1566 = load i64, i64* %RCX
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 4
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1565 to i64*
  store i64 %1566, i64* %1569
  %1570 = load i64, i64* %RAX
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 3
  store i64 %1572, i64* %PC
  %1573 = inttoptr i64 %1570 to i32*
  %1574 = load i32, i32* %1573
  %1575 = sext i32 %1574 to i64
  store i64 %1575, i64* %RAX, align 8, !tbaa !2428
  %1576 = load i64, i64* %RAX
  %1577 = mul i64 %1576, 8
  %1578 = add i64 %1577, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 8
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1578 to i64*
  %1582 = load i64, i64* %1581
  store i64 %1582, i64* %RAX, align 8, !tbaa !2428
  %1583 = load i64, i64* %RBP
  %1584 = sub i64 %1583, 40
  %1585 = load i64, i64* %RAX
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 4
  store i64 %1587, i64* %PC
  %1588 = inttoptr i64 %1584 to i64*
  store i64 %1585, i64* %1588
  %1589 = load i64, i64* %PC
  %1590 = sub i64 %1589, 751
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 5
  store i64 %1592, i64* %PC
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1590, i64* %1593, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1594 = load i64, i64* %RBP
  %1595 = sub i64 %1594, 12
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 7
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to i32*
  store i32 20, i32* %1598
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 12
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 3
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i32*
  %1604 = load i32, i32* %1603
  %1605 = zext i32 %1604 to i64
  store i64 %1605, i64* %RDI, align 8, !tbaa !2428
  %1606 = load i64, i64* %PC
  %1607 = sub i64 %1606, 1084
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 5
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 5
  store i64 %1611, i64* %PC
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1613 = load i64, i64* %1612, align 8, !tbaa !2428
  %1614 = add i64 %1613, -8
  %1615 = inttoptr i64 %1614 to i64*
  store i64 %1609, i64* %1615
  store i64 %1614, i64* %1612, align 8, !tbaa !2428
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1607, i64* %1616, align 8, !tbaa !2428
  %1617 = load i64, i64* %PC
  %1618 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1617, %struct.Memory* %MEMORY.0)
  %1619 = load i64, i64* %RBP
  %1620 = sub i64 %1619, 8
  %1621 = load i64, i64* %PC
  %1622 = add i64 %1621, 4
  store i64 %1622, i64* %PC
  %1623 = inttoptr i64 %1620 to i64*
  %1624 = load i64, i64* %1623
  store i64 %1624, i64* %RAX, align 8, !tbaa !2428
  %1625 = load i64, i64* %RAX
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 3
  store i64 %1627, i64* %PC
  store i64 %1625, i64* %RCX, align 8, !tbaa !2428
  %1628 = load i64, i64* %RCX
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 4
  store i64 %1630, i64* %PC
  %1631 = add i64 4, %1628
  store i64 %1631, i64* %RCX, align 8, !tbaa !2428
  %1632 = icmp ult i64 %1631, %1628
  %1633 = icmp ult i64 %1631, 4
  %1634 = or i1 %1632, %1633
  %1635 = zext i1 %1634 to i8
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1635, i8* %1636, align 1, !tbaa !2432
  %1637 = trunc i64 %1631 to i32
  %1638 = and i32 %1637, 255
  %1639 = call i32 @llvm.ctpop.i32(i32 %1638) #16
  %1640 = trunc i32 %1639 to i8
  %1641 = and i8 %1640, 1
  %1642 = xor i8 %1641, 1
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1642, i8* %1643, align 1, !tbaa !2446
  %1644 = xor i64 4, %1628
  %1645 = xor i64 %1644, %1631
  %1646 = lshr i64 %1645, 4
  %1647 = trunc i64 %1646 to i8
  %1648 = and i8 %1647, 1
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1648, i8* %1649, align 1, !tbaa !2447
  %1650 = icmp eq i64 %1631, 0
  %1651 = zext i1 %1650 to i8
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1651, i8* %1652, align 1, !tbaa !2448
  %1653 = lshr i64 %1631, 63
  %1654 = trunc i64 %1653 to i8
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1654, i8* %1655, align 1, !tbaa !2449
  %1656 = lshr i64 %1628, 63
  %1657 = xor i64 %1653, %1656
  %1658 = add nuw nsw i64 %1657, %1653
  %1659 = icmp eq i64 %1658, 2
  %1660 = zext i1 %1659 to i8
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1660, i8* %1661, align 1, !tbaa !2450
  %1662 = load i64, i64* %RBP
  %1663 = sub i64 %1662, 8
  %1664 = load i64, i64* %RCX
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 4
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1663 to i64*
  store i64 %1664, i64* %1667
  %1668 = load i64, i64* %RAX
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 3
  store i64 %1670, i64* %PC
  %1671 = inttoptr i64 %1668 to i32*
  %1672 = load i32, i32* %1671
  %1673 = sext i32 %1672 to i64
  store i64 %1673, i64* %RAX, align 8, !tbaa !2428
  %1674 = load i64, i64* %RAX
  %1675 = mul i64 %1674, 8
  %1676 = add i64 %1675, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 8
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i64*
  %1680 = load i64, i64* %1679
  store i64 %1680, i64* %RAX, align 8, !tbaa !2428
  %1681 = load i64, i64* %RBP
  %1682 = sub i64 %1681, 40
  %1683 = load i64, i64* %RAX
  %1684 = load i64, i64* %PC
  %1685 = add i64 %1684, 4
  store i64 %1685, i64* %PC
  %1686 = inttoptr i64 %1682 to i64*
  store i64 %1683, i64* %1686
  %1687 = load i64, i64* %PC
  %1688 = sub i64 %1687, 1001
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 5
  store i64 %1690, i64* %PC
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1688, i64* %1691, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1692 = load i64, i64* %RBP
  %1693 = sub i64 %1692, 12
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 7
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1693 to i32*
  store i32 2, i32* %1696
  %1697 = load i64, i64* %RBP
  %1698 = sub i64 %1697, 12
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 3
  store i64 %1700, i64* %PC
  %1701 = inttoptr i64 %1698 to i32*
  %1702 = load i32, i32* %1701
  %1703 = zext i32 %1702 to i64
  store i64 %1703, i64* %RDI, align 8, !tbaa !2428
  %1704 = load i64, i64* %PC
  %1705 = sub i64 %1704, 184
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 5
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 5
  store i64 %1709, i64* %PC
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1711 = load i64, i64* %1710, align 8, !tbaa !2428
  %1712 = add i64 %1711, -8
  %1713 = inttoptr i64 %1712 to i64*
  store i64 %1707, i64* %1713
  store i64 %1712, i64* %1710, align 8, !tbaa !2428
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1705, i64* %1714, align 8, !tbaa !2428
  %1715 = load i64, i64* %PC
  %1716 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1715, %struct.Memory* %MEMORY.0)
  %1717 = load i64, i64* %RBP
  %1718 = sub i64 %1717, 8
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 4
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1718 to i64*
  %1722 = load i64, i64* %1721
  store i64 %1722, i64* %RAX, align 8, !tbaa !2428
  %1723 = load i64, i64* %RAX
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 3
  store i64 %1725, i64* %PC
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1726 = load i64, i64* %RCX
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 4
  store i64 %1728, i64* %PC
  %1729 = add i64 4, %1726
  store i64 %1729, i64* %RCX, align 8, !tbaa !2428
  %1730 = icmp ult i64 %1729, %1726
  %1731 = icmp ult i64 %1729, 4
  %1732 = or i1 %1730, %1731
  %1733 = zext i1 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1733, i8* %1734, align 1, !tbaa !2432
  %1735 = trunc i64 %1729 to i32
  %1736 = and i32 %1735, 255
  %1737 = call i32 @llvm.ctpop.i32(i32 %1736) #16
  %1738 = trunc i32 %1737 to i8
  %1739 = and i8 %1738, 1
  %1740 = xor i8 %1739, 1
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1740, i8* %1741, align 1, !tbaa !2446
  %1742 = xor i64 4, %1726
  %1743 = xor i64 %1742, %1729
  %1744 = lshr i64 %1743, 4
  %1745 = trunc i64 %1744 to i8
  %1746 = and i8 %1745, 1
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1746, i8* %1747, align 1, !tbaa !2447
  %1748 = icmp eq i64 %1729, 0
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1749, i8* %1750, align 1, !tbaa !2448
  %1751 = lshr i64 %1729, 63
  %1752 = trunc i64 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1752, i8* %1753, align 1, !tbaa !2449
  %1754 = lshr i64 %1726, 63
  %1755 = xor i64 %1751, %1754
  %1756 = add nuw nsw i64 %1755, %1751
  %1757 = icmp eq i64 %1756, 2
  %1758 = zext i1 %1757 to i8
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1758, i8* %1759, align 1, !tbaa !2450
  %1760 = load i64, i64* %RBP
  %1761 = sub i64 %1760, 8
  %1762 = load i64, i64* %RCX
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 4
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1761 to i64*
  store i64 %1762, i64* %1765
  %1766 = load i64, i64* %RAX
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 3
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i32*
  %1770 = load i32, i32* %1769
  %1771 = sext i32 %1770 to i64
  store i64 %1771, i64* %RAX, align 8, !tbaa !2428
  %1772 = load i64, i64* %RAX
  %1773 = mul i64 %1772, 8
  %1774 = add i64 %1773, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 8
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1774 to i64*
  %1778 = load i64, i64* %1777
  store i64 %1778, i64* %RAX, align 8, !tbaa !2428
  %1779 = load i64, i64* %RBP
  %1780 = sub i64 %1779, 40
  %1781 = load i64, i64* %RAX
  %1782 = load i64, i64* %PC
  %1783 = add i64 %1782, 4
  store i64 %1783, i64* %PC
  %1784 = inttoptr i64 %1780 to i64*
  store i64 %1781, i64* %1784
  %1785 = load i64, i64* %PC
  %1786 = sub i64 %1785, 101
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 5
  store i64 %1788, i64* %PC
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1786, i64* %1789, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %1790 = load i64, i64* %RBP
  %1791 = sub i64 %1790, 12
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 7
  store i64 %1793, i64* %PC
  %1794 = inttoptr i64 %1791 to i32*
  store i32 3, i32* %1794
  br label %block_4005d7

block_400a1c:                                     ; preds = %block_400566
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 12
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 7
  store i64 %1798, i64* %PC
  %1799 = inttoptr i64 %1796 to i32*
  store i32 25, i32* %1799
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 12
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 3
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i32*
  %1805 = load i32, i32* %1804
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RDI, align 8, !tbaa !2428
  %1807 = load i64, i64* %PC
  %1808 = sub i64 %1807, 1334
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 5
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 5
  store i64 %1812, i64* %PC
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1814 = load i64, i64* %1813, align 8, !tbaa !2428
  %1815 = add i64 %1814, -8
  %1816 = inttoptr i64 %1815 to i64*
  store i64 %1810, i64* %1816
  store i64 %1815, i64* %1813, align 8, !tbaa !2428
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1808, i64* %1817, align 8, !tbaa !2428
  %1818 = load i64, i64* %PC
  %1819 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1818, %struct.Memory* %MEMORY.0)
  %1820 = load i64, i64* %RBP
  %1821 = sub i64 %1820, 8
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 4
  store i64 %1823, i64* %PC
  %1824 = inttoptr i64 %1821 to i64*
  %1825 = load i64, i64* %1824
  store i64 %1825, i64* %RAX, align 8, !tbaa !2428
  %1826 = load i64, i64* %RAX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 3
  store i64 %1828, i64* %PC
  store i64 %1826, i64* %RCX, align 8, !tbaa !2428
  %1829 = load i64, i64* %RCX
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 4
  store i64 %1831, i64* %PC
  %1832 = add i64 4, %1829
  store i64 %1832, i64* %RCX, align 8, !tbaa !2428
  %1833 = icmp ult i64 %1832, %1829
  %1834 = icmp ult i64 %1832, 4
  %1835 = or i1 %1833, %1834
  %1836 = zext i1 %1835 to i8
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1836, i8* %1837, align 1, !tbaa !2432
  %1838 = trunc i64 %1832 to i32
  %1839 = and i32 %1838, 255
  %1840 = call i32 @llvm.ctpop.i32(i32 %1839) #16
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = xor i8 %1842, 1
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1843, i8* %1844, align 1, !tbaa !2446
  %1845 = xor i64 4, %1829
  %1846 = xor i64 %1845, %1832
  %1847 = lshr i64 %1846, 4
  %1848 = trunc i64 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1849, i8* %1850, align 1, !tbaa !2447
  %1851 = icmp eq i64 %1832, 0
  %1852 = zext i1 %1851 to i8
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1852, i8* %1853, align 1, !tbaa !2448
  %1854 = lshr i64 %1832, 63
  %1855 = trunc i64 %1854 to i8
  %1856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1855, i8* %1856, align 1, !tbaa !2449
  %1857 = lshr i64 %1829, 63
  %1858 = xor i64 %1854, %1857
  %1859 = add nuw nsw i64 %1858, %1854
  %1860 = icmp eq i64 %1859, 2
  %1861 = zext i1 %1860 to i8
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1861, i8* %1862, align 1, !tbaa !2450
  %1863 = load i64, i64* %RBP
  %1864 = sub i64 %1863, 8
  %1865 = load i64, i64* %RCX
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 4
  store i64 %1867, i64* %PC
  %1868 = inttoptr i64 %1864 to i64*
  store i64 %1865, i64* %1868
  %1869 = load i64, i64* %RAX
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 3
  store i64 %1871, i64* %PC
  %1872 = inttoptr i64 %1869 to i32*
  %1873 = load i32, i32* %1872
  %1874 = sext i32 %1873 to i64
  store i64 %1874, i64* %RAX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RAX
  %1876 = mul i64 %1875, 8
  %1877 = add i64 %1876, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 8
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1877 to i64*
  %1881 = load i64, i64* %1880
  store i64 %1881, i64* %RAX, align 8, !tbaa !2428
  %1882 = load i64, i64* %RBP
  %1883 = sub i64 %1882, 40
  %1884 = load i64, i64* %RAX
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 4
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1883 to i64*
  store i64 %1884, i64* %1887
  %1888 = load i64, i64* %PC
  %1889 = sub i64 %1888, 1251
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 5
  store i64 %1891, i64* %PC
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1889, i64* %1892, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1893 = load i64, i64* %RBP
  %1894 = sub i64 %1893, 12
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 7
  store i64 %1896, i64* %PC
  %1897 = inttoptr i64 %1894 to i32*
  store i32 7, i32* %1897
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 12
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 3
  store i64 %1901, i64* %PC
  %1902 = inttoptr i64 %1899 to i32*
  %1903 = load i32, i32* %1902
  %1904 = zext i32 %1903 to i64
  store i64 %1904, i64* %RDI, align 8, !tbaa !2428
  %1905 = load i64, i64* %PC
  %1906 = sub i64 %1905, 434
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 5
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 5
  store i64 %1910, i64* %PC
  %1911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1912 = load i64, i64* %1911, align 8, !tbaa !2428
  %1913 = add i64 %1912, -8
  %1914 = inttoptr i64 %1913 to i64*
  store i64 %1908, i64* %1914
  store i64 %1913, i64* %1911, align 8, !tbaa !2428
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1906, i64* %1915, align 8, !tbaa !2428
  %1916 = load i64, i64* %PC
  %1917 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1916, %struct.Memory* %MEMORY.0)
  %1918 = load i64, i64* %RBP
  %1919 = sub i64 %1918, 8
  %1920 = load i64, i64* %PC
  %1921 = add i64 %1920, 4
  store i64 %1921, i64* %PC
  %1922 = inttoptr i64 %1919 to i64*
  %1923 = load i64, i64* %1922
  store i64 %1923, i64* %RAX, align 8, !tbaa !2428
  %1924 = load i64, i64* %RAX
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 3
  store i64 %1926, i64* %PC
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RCX
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 4
  store i64 %1929, i64* %PC
  %1930 = add i64 4, %1927
  store i64 %1930, i64* %RCX, align 8, !tbaa !2428
  %1931 = icmp ult i64 %1930, %1927
  %1932 = icmp ult i64 %1930, 4
  %1933 = or i1 %1931, %1932
  %1934 = zext i1 %1933 to i8
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1934, i8* %1935, align 1, !tbaa !2432
  %1936 = trunc i64 %1930 to i32
  %1937 = and i32 %1936, 255
  %1938 = call i32 @llvm.ctpop.i32(i32 %1937) #16
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1941, i8* %1942, align 1, !tbaa !2446
  %1943 = xor i64 4, %1927
  %1944 = xor i64 %1943, %1930
  %1945 = lshr i64 %1944, 4
  %1946 = trunc i64 %1945 to i8
  %1947 = and i8 %1946, 1
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1947, i8* %1948, align 1, !tbaa !2447
  %1949 = icmp eq i64 %1930, 0
  %1950 = zext i1 %1949 to i8
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1950, i8* %1951, align 1, !tbaa !2448
  %1952 = lshr i64 %1930, 63
  %1953 = trunc i64 %1952 to i8
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1953, i8* %1954, align 1, !tbaa !2449
  %1955 = lshr i64 %1927, 63
  %1956 = xor i64 %1952, %1955
  %1957 = add nuw nsw i64 %1956, %1952
  %1958 = icmp eq i64 %1957, 2
  %1959 = zext i1 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1959, i8* %1960, align 1, !tbaa !2450
  %1961 = load i64, i64* %RBP
  %1962 = sub i64 %1961, 8
  %1963 = load i64, i64* %RCX
  %1964 = load i64, i64* %PC
  %1965 = add i64 %1964, 4
  store i64 %1965, i64* %PC
  %1966 = inttoptr i64 %1962 to i64*
  store i64 %1963, i64* %1966
  %1967 = load i64, i64* %RAX
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 3
  store i64 %1969, i64* %PC
  %1970 = inttoptr i64 %1967 to i32*
  %1971 = load i32, i32* %1970
  %1972 = sext i32 %1971 to i64
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RAX
  %1974 = mul i64 %1973, 8
  %1975 = add i64 %1974, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 8
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1975 to i64*
  %1979 = load i64, i64* %1978
  store i64 %1979, i64* %RAX, align 8, !tbaa !2428
  %1980 = load i64, i64* %RBP
  %1981 = sub i64 %1980, 40
  %1982 = load i64, i64* %RAX
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 4
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1981 to i64*
  store i64 %1982, i64* %1985
  %1986 = load i64, i64* %PC
  %1987 = sub i64 %1986, 351
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 5
  store i64 %1989, i64* %PC
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1987, i64* %1990, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %1991 = load i64, i64* %RBP
  %1992 = sub i64 %1991, 12
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 7
  store i64 %1994, i64* %PC
  %1995 = inttoptr i64 %1992 to i32*
  store i32 30, i32* %1995
  %1996 = load i64, i64* %RBP
  %1997 = sub i64 %1996, 12
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 3
  store i64 %1999, i64* %PC
  %2000 = inttoptr i64 %1997 to i32*
  %2001 = load i32, i32* %2000
  %2002 = zext i32 %2001 to i64
  store i64 %2002, i64* %RDI, align 8, !tbaa !2428
  %2003 = load i64, i64* %PC
  %2004 = sub i64 %2003, 1584
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 5
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 5
  store i64 %2008, i64* %PC
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2010 = load i64, i64* %2009, align 8, !tbaa !2428
  %2011 = add i64 %2010, -8
  %2012 = inttoptr i64 %2011 to i64*
  store i64 %2006, i64* %2012
  store i64 %2011, i64* %2009, align 8, !tbaa !2428
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2004, i64* %2013, align 8, !tbaa !2428
  %2014 = load i64, i64* %PC
  %2015 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2014, %struct.Memory* %MEMORY.0)
  %2016 = load i64, i64* %RBP
  %2017 = sub i64 %2016, 8
  %2018 = load i64, i64* %PC
  %2019 = add i64 %2018, 4
  store i64 %2019, i64* %PC
  %2020 = inttoptr i64 %2017 to i64*
  %2021 = load i64, i64* %2020
  store i64 %2021, i64* %RAX, align 8, !tbaa !2428
  %2022 = load i64, i64* %RAX
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 3
  store i64 %2024, i64* %PC
  store i64 %2022, i64* %RCX, align 8, !tbaa !2428
  %2025 = load i64, i64* %RCX
  %2026 = load i64, i64* %PC
  %2027 = add i64 %2026, 4
  store i64 %2027, i64* %PC
  %2028 = add i64 4, %2025
  store i64 %2028, i64* %RCX, align 8, !tbaa !2428
  %2029 = icmp ult i64 %2028, %2025
  %2030 = icmp ult i64 %2028, 4
  %2031 = or i1 %2029, %2030
  %2032 = zext i1 %2031 to i8
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2032, i8* %2033, align 1, !tbaa !2432
  %2034 = trunc i64 %2028 to i32
  %2035 = and i32 %2034, 255
  %2036 = call i32 @llvm.ctpop.i32(i32 %2035) #16
  %2037 = trunc i32 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = xor i8 %2038, 1
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2039, i8* %2040, align 1, !tbaa !2446
  %2041 = xor i64 4, %2025
  %2042 = xor i64 %2041, %2028
  %2043 = lshr i64 %2042, 4
  %2044 = trunc i64 %2043 to i8
  %2045 = and i8 %2044, 1
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2045, i8* %2046, align 1, !tbaa !2447
  %2047 = icmp eq i64 %2028, 0
  %2048 = zext i1 %2047 to i8
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2048, i8* %2049, align 1, !tbaa !2448
  %2050 = lshr i64 %2028, 63
  %2051 = trunc i64 %2050 to i8
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2051, i8* %2052, align 1, !tbaa !2449
  %2053 = lshr i64 %2025, 63
  %2054 = xor i64 %2050, %2053
  %2055 = add nuw nsw i64 %2054, %2050
  %2056 = icmp eq i64 %2055, 2
  %2057 = zext i1 %2056 to i8
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2057, i8* %2058, align 1, !tbaa !2450
  %2059 = load i64, i64* %RBP
  %2060 = sub i64 %2059, 8
  %2061 = load i64, i64* %RCX
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 4
  store i64 %2063, i64* %PC
  %2064 = inttoptr i64 %2060 to i64*
  store i64 %2061, i64* %2064
  %2065 = load i64, i64* %RAX
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 3
  store i64 %2067, i64* %PC
  %2068 = inttoptr i64 %2065 to i32*
  %2069 = load i32, i32* %2068
  %2070 = sext i32 %2069 to i64
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RAX
  %2072 = mul i64 %2071, 8
  %2073 = add i64 %2072, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 8
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2073 to i64*
  %2077 = load i64, i64* %2076
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = load i64, i64* %RBP
  %2079 = sub i64 %2078, 40
  %2080 = load i64, i64* %RAX
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 4
  store i64 %2082, i64* %PC
  %2083 = inttoptr i64 %2079 to i64*
  store i64 %2080, i64* %2083
  %2084 = load i64, i64* %PC
  %2085 = sub i64 %2084, 1501
  %2086 = load i64, i64* %PC
  %2087 = add i64 %2086, 5
  store i64 %2087, i64* %PC
  %2088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2085, i64* %2088, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2089 = load i64, i64* %RBP
  %2090 = sub i64 %2089, 12
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 7
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  store i32 12, i32* %2093
  %2094 = load i64, i64* %RBP
  %2095 = sub i64 %2094, 12
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 3
  store i64 %2097, i64* %PC
  %2098 = inttoptr i64 %2095 to i32*
  %2099 = load i32, i32* %2098
  %2100 = zext i32 %2099 to i64
  store i64 %2100, i64* %RDI, align 8, !tbaa !2428
  %2101 = load i64, i64* %PC
  %2102 = sub i64 %2101, 684
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 5
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 5
  store i64 %2106, i64* %PC
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2108 = load i64, i64* %2107, align 8, !tbaa !2428
  %2109 = add i64 %2108, -8
  %2110 = inttoptr i64 %2109 to i64*
  store i64 %2104, i64* %2110
  store i64 %2109, i64* %2107, align 8, !tbaa !2428
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2102, i64* %2111, align 8, !tbaa !2428
  %2112 = load i64, i64* %PC
  %2113 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2112, %struct.Memory* %MEMORY.0)
  %2114 = load i64, i64* %RBP
  %2115 = sub i64 %2114, 8
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 4
  store i64 %2117, i64* %PC
  %2118 = inttoptr i64 %2115 to i64*
  %2119 = load i64, i64* %2118
  store i64 %2119, i64* %RAX, align 8, !tbaa !2428
  %2120 = load i64, i64* %RAX
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 3
  store i64 %2122, i64* %PC
  store i64 %2120, i64* %RCX, align 8, !tbaa !2428
  %2123 = load i64, i64* %RCX
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 4
  store i64 %2125, i64* %PC
  %2126 = add i64 4, %2123
  store i64 %2126, i64* %RCX, align 8, !tbaa !2428
  %2127 = icmp ult i64 %2126, %2123
  %2128 = icmp ult i64 %2126, 4
  %2129 = or i1 %2127, %2128
  %2130 = zext i1 %2129 to i8
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2130, i8* %2131, align 1, !tbaa !2432
  %2132 = trunc i64 %2126 to i32
  %2133 = and i32 %2132, 255
  %2134 = call i32 @llvm.ctpop.i32(i32 %2133) #16
  %2135 = trunc i32 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = xor i8 %2136, 1
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2137, i8* %2138, align 1, !tbaa !2446
  %2139 = xor i64 4, %2123
  %2140 = xor i64 %2139, %2126
  %2141 = lshr i64 %2140, 4
  %2142 = trunc i64 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2143, i8* %2144, align 1, !tbaa !2447
  %2145 = icmp eq i64 %2126, 0
  %2146 = zext i1 %2145 to i8
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2146, i8* %2147, align 1, !tbaa !2448
  %2148 = lshr i64 %2126, 63
  %2149 = trunc i64 %2148 to i8
  %2150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2149, i8* %2150, align 1, !tbaa !2449
  %2151 = lshr i64 %2123, 63
  %2152 = xor i64 %2148, %2151
  %2153 = add nuw nsw i64 %2152, %2148
  %2154 = icmp eq i64 %2153, 2
  %2155 = zext i1 %2154 to i8
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2155, i8* %2156, align 1, !tbaa !2450
  %2157 = load i64, i64* %RBP
  %2158 = sub i64 %2157, 8
  %2159 = load i64, i64* %RCX
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 4
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2158 to i64*
  store i64 %2159, i64* %2162
  %2163 = load i64, i64* %RAX
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 3
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2163 to i32*
  %2167 = load i32, i32* %2166
  %2168 = sext i32 %2167 to i64
  store i64 %2168, i64* %RAX, align 8, !tbaa !2428
  %2169 = load i64, i64* %RAX
  %2170 = mul i64 %2169, 8
  %2171 = add i64 %2170, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 8
  store i64 %2173, i64* %PC
  %2174 = inttoptr i64 %2171 to i64*
  %2175 = load i64, i64* %2174
  store i64 %2175, i64* %RAX, align 8, !tbaa !2428
  %2176 = load i64, i64* %RBP
  %2177 = sub i64 %2176, 40
  %2178 = load i64, i64* %RAX
  %2179 = load i64, i64* %PC
  %2180 = add i64 %2179, 4
  store i64 %2180, i64* %PC
  %2181 = inttoptr i64 %2177 to i64*
  store i64 %2178, i64* %2181
  %2182 = load i64, i64* %PC
  %2183 = sub i64 %2182, 601
  %2184 = load i64, i64* %PC
  %2185 = add i64 %2184, 5
  store i64 %2185, i64* %PC
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2183, i64* %2186, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2187 = load i64, i64* %RBP
  %2188 = sub i64 %2187, 12
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 7
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2188 to i32*
  store i32 17, i32* %2191
  %2192 = load i64, i64* %PC
  %2193 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %2192, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2193

block_400986:                                     ; preds = %block_400566
  %2194 = load i64, i64* %RBP
  %2195 = sub i64 %2194, 12
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 7
  store i64 %2197, i64* %PC
  %2198 = inttoptr i64 %2195 to i32*
  store i32 22, i32* %2198
  %2199 = load i64, i64* %PC
  %2200 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %2199, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2200

block_400602:                                     ; preds = %block_400566
  %2201 = load i64, i64* %RBP
  %2202 = sub i64 %2201, 12
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 7
  store i64 %2204, i64* %PC
  %2205 = inttoptr i64 %2202 to i32*
  store i32 4, i32* %2205
  %2206 = load i64, i64* %PC
  %2207 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %2206, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2207

block_400a80:                                     ; preds = %block_400566
  %2208 = load i64, i64* %RBP
  %2209 = sub i64 %2208, 12
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 7
  store i64 %2211, i64* %PC
  %2212 = inttoptr i64 %2209 to i32*
  store i32 27, i32* %2212
  %2213 = load i64, i64* %PC
  %2214 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %2213, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2214

; <label>:2215:                                   ; preds = %block_400566
  %2216 = load i64, i64* %PC
  %2217 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2216, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2217
}

; Function Attrs: noinline
define %struct.Memory* @sub_400573(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400573

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.1)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.1)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 3, i32* %219
  %220 = load i64, i64* %PC
  %221 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %220, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %221

block_4006ca:                                     ; preds = %block_400566
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 8, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %228

block_4007c4:                                     ; preds = %block_400566
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 13, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %235

block_4009ea:                                     ; preds = %block_400566
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 24, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_4009f1(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %242

block_4008be:                                     ; preds = %block_400566
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 18, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %249

block_4009b8:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 23, i32* %254
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 12
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RDI, align 8, !tbaa !2428
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 1234
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %269 = load i64, i64* %268, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %272, align 8, !tbaa !2428
  %273 = load i64, i64* %PC
  %274 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %273, %struct.Memory* %MEMORY.1)
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RAX
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %284 = load i64, i64* %RCX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 4, %284
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 4
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2432
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #16
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2446
  %300 = xor i64 4, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2447
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2450
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %RCX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX
  %331 = mul i64 %330, 8
  %332 = add i64 %331, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 8
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 40
  %339 = load i64, i64* %RAX
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 1151
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %347, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 12
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  store i32 28, i32* %352
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 12
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i32*
  %358 = load i32, i32* %357
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RDI, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = sub i64 %360, 1484
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %367 = load i64, i64* %366, align 8, !tbaa !2428
  %368 = add i64 %367, -8
  %369 = inttoptr i64 %368 to i64*
  store i64 %363, i64* %369
  store i64 %368, i64* %366, align 8, !tbaa !2428
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %361, i64* %370, align 8, !tbaa !2428
  %371 = load i64, i64* %PC
  %372 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %371, %struct.Memory* %MEMORY.1)
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 8
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 3
  store i64 %381, i64* %PC
  store i64 %379, i64* %RCX, align 8, !tbaa !2428
  %382 = load i64, i64* %RCX
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = add i64 4, %382
  store i64 %385, i64* %RCX, align 8, !tbaa !2428
  %386 = icmp ult i64 %385, %382
  %387 = icmp ult i64 %385, 4
  %388 = or i1 %386, %387
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %389, i8* %390, align 1, !tbaa !2432
  %391 = trunc i64 %385 to i32
  %392 = and i32 %391, 255
  %393 = call i32 @llvm.ctpop.i32(i32 %392) #16
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %396, i8* %397, align 1, !tbaa !2446
  %398 = xor i64 4, %382
  %399 = xor i64 %398, %385
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = icmp eq i64 %385, 0
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %405, i8* %406, align 1, !tbaa !2448
  %407 = lshr i64 %385, 63
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %408, i8* %409, align 1, !tbaa !2449
  %410 = lshr i64 %382, 63
  %411 = xor i64 %407, %410
  %412 = add nuw nsw i64 %411, %407
  %413 = icmp eq i64 %412, 2
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 8
  %418 = load i64, i64* %RCX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 4
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %417 to i64*
  store i64 %418, i64* %421
  %422 = load i64, i64* %RAX
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = sext i32 %426 to i64
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = mul i64 %428, 8
  %430 = add i64 %429, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 8
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i64*
  %434 = load i64, i64* %433
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %RBP
  %436 = sub i64 %435, 40
  %437 = load i64, i64* %RAX
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %436 to i64*
  store i64 %437, i64* %440
  %441 = load i64, i64* %PC
  %442 = sub i64 %441, 1401
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %442, i64* %445, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 12
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 7
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  store i32 7, i32* %450
  %451 = load i64, i64* %PC
  %452 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %451, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %452

block_400792:                                     ; preds = %block_400566
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 12
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 12, i32* %457
  %458 = load i64, i64* %PC
  %459 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %458, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %459

block_40088c:                                     ; preds = %block_400566
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  store i32 17, i32* %464
  %465 = load i64, i64* %PC
  %466 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %465, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %466

block_400986:                                     ; preds = %block_400566
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 12
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  store i32 22, i32* %471
  %472 = load i64, i64* %PC
  %473 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %472, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %473

block_40059e:                                     ; preds = %block_400566
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 12
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 7
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i32*
  store i32 2, i32* %478
  %479 = load i64, i64* %PC
  %480 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %479, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %480

block_400573:                                     ; preds = %block_40056c, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_40056c ]
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 3
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  %486 = load i32, i32* %485
  %487 = zext i32 %486 to i64
  store i64 %487, i64* %RDI, align 8, !tbaa !2428
  %488 = load i64, i64* %PC
  %489 = sub i64 %488, 134
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 5
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 5
  store i64 %493, i64* %PC
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %495 = load i64, i64* %494, align 8, !tbaa !2428
  %496 = add i64 %495, -8
  %497 = inttoptr i64 %496 to i64*
  store i64 %491, i64* %497
  store i64 %496, i64* %494, align 8, !tbaa !2428
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %489, i64* %498, align 8, !tbaa !2428
  %499 = load i64, i64* %PC
  %500 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %499, %struct.Memory* %MEMORY.0)
  %501 = load i64, i64* %RBP
  %502 = sub i64 %501, 8
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to i64*
  %506 = load i64, i64* %505
  store i64 %506, i64* %RAX, align 8, !tbaa !2428
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 3
  store i64 %509, i64* %PC
  store i64 %507, i64* %RCX, align 8, !tbaa !2428
  %510 = load i64, i64* %RCX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = add i64 4, %510
  store i64 %513, i64* %RCX, align 8, !tbaa !2428
  %514 = icmp ult i64 %513, %510
  %515 = icmp ult i64 %513, 4
  %516 = or i1 %514, %515
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %517, i8* %518, align 1, !tbaa !2432
  %519 = trunc i64 %513 to i32
  %520 = and i32 %519, 255
  %521 = call i32 @llvm.ctpop.i32(i32 %520) #16
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %524, i8* %525, align 1, !tbaa !2446
  %526 = xor i64 4, %510
  %527 = xor i64 %526, %513
  %528 = lshr i64 %527, 4
  %529 = trunc i64 %528 to i8
  %530 = and i8 %529, 1
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %530, i8* %531, align 1, !tbaa !2447
  %532 = icmp eq i64 %513, 0
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %533, i8* %534, align 1, !tbaa !2448
  %535 = lshr i64 %513, 63
  %536 = trunc i64 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %536, i8* %537, align 1, !tbaa !2449
  %538 = lshr i64 %510, 63
  %539 = xor i64 %535, %538
  %540 = add nuw nsw i64 %539, %535
  %541 = icmp eq i64 %540, 2
  %542 = zext i1 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %542, i8* %543, align 1, !tbaa !2450
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %RCX
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 4
  store i64 %548, i64* %PC
  %549 = inttoptr i64 %545 to i64*
  store i64 %546, i64* %549
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = inttoptr i64 %550 to i32*
  %554 = load i32, i32* %553
  %555 = sext i32 %554 to i64
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = load i64, i64* %RAX
  %557 = mul i64 %556, 8
  %558 = add i64 %557, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 8
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 40
  %565 = load i64, i64* %RAX
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 4
  store i64 %567, i64* %PC
  %568 = inttoptr i64 %564 to i64*
  store i64 %565, i64* %568
  %569 = load i64, i64* %PC
  %570 = sub i64 %569, 51
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %570, i64* %573, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %574 = load i64, i64* %RBP
  %575 = sub i64 %574, 12
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 7
  store i64 %577, i64* %PC
  %578 = inttoptr i64 %575 to i32*
  store i32 1, i32* %578
  br label %block_400573

block_400566:                                     ; preds = %block_40072e, %block_400634, %block_400573, %block_400ab2, %block_4009b8, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %500, %block_400573 ], [ %141, %block_4008f0 ], [ %43, %block_4007f6 ], [ %274, %block_4009b8 ], [ %372, %block_400ab2 ], [ %677, %block_400634 ], [ %775, %block_40072e ]
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 40
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 2
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %585, i64* %588, align 8, !tbaa !2428
  %589 = load i64, i64* %PC
  switch i64 %589, label %891 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196092, label %block_4006fc
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4196192, label %block_400760
    i64 4197042, label %block_400ab2
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4196842, label %block_4009ea
    i64 4195692, label %block_40056c
    i64 4196292, label %block_4007c4
    i64 4196792, label %block_4009b8
    i64 4196342, label %block_4007f6
    i64 4195792, label %block_4005d0
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196242, label %block_400792
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196442, label %block_40085a
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196692, label %block_400954
    i64 4196992, label %block_400a80
  ]

block_40085a:                                     ; preds = %block_400566
  %590 = load i64, i64* %RBP
  %591 = sub i64 %590, 12
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 7
  store i64 %593, i64* %PC
  %594 = inttoptr i64 %591 to i32*
  store i32 16, i32* %594
  %595 = load i64, i64* %PC
  %596 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %595, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %596

block_400ae4:                                     ; preds = %block_400566
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 12
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 7
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  store i32 29, i32* %601
  %602 = load i64, i64* %PC
  %603 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %602, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %603

block_400559:                                     ; preds = %block_400566
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 12
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 7
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  store i32 0, i32* %608
  %609 = load i64, i64* %PC
  %610 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %609, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %610

block_400954:                                     ; preds = %block_400566
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 12
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  store i32 21, i32* %615
  %616 = load i64, i64* %PC
  %617 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %616, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %617

block_400a4e:                                     ; preds = %block_400566
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 12
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 7
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i32*
  store i32 26, i32* %622
  %623 = load i64, i64* %PC
  %624 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %623, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %624

block_400a80:                                     ; preds = %block_400566
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 12
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 7
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i32*
  store i32 27, i32* %629
  %630 = load i64, i64* %PC
  %631 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %630, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %631

block_400b48:                                     ; preds = %block_400566
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 12
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 7
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  store i32 31, i32* %636
  %637 = load i64, i64* %PC
  %638 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %637, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %638

block_400666:                                     ; preds = %block_400566
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 12
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 7
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  store i32 6, i32* %643
  %644 = load i64, i64* %PC
  %645 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %644, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %645

block_400760:                                     ; preds = %block_400566
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 12
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 7
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  store i32 11, i32* %650
  %651 = load i64, i64* %PC
  %652 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %651, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %652

block_400634:                                     ; preds = %block_400566
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 12
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 7
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i32*
  store i32 5, i32* %657
  %658 = load i64, i64* %RBP
  %659 = sub i64 %658, 12
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i32*
  %663 = load i32, i32* %662
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %RDI, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = sub i64 %665, 334
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 5
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 5
  store i64 %670, i64* %PC
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %672 = load i64, i64* %671, align 8, !tbaa !2428
  %673 = add i64 %672, -8
  %674 = inttoptr i64 %673 to i64*
  store i64 %668, i64* %674
  store i64 %673, i64* %671, align 8, !tbaa !2428
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %666, i64* %675, align 8, !tbaa !2428
  %676 = load i64, i64* %PC
  %677 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %676, %struct.Memory* %MEMORY.1)
  %678 = load i64, i64* %RBP
  %679 = sub i64 %678, 8
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = inttoptr i64 %679 to i64*
  %683 = load i64, i64* %682
  store i64 %683, i64* %RAX, align 8, !tbaa !2428
  %684 = load i64, i64* %RAX
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = add i64 4, %687
  store i64 %690, i64* %RCX, align 8, !tbaa !2428
  %691 = icmp ult i64 %690, %687
  %692 = icmp ult i64 %690, 4
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %694, i8* %695, align 1, !tbaa !2432
  %696 = trunc i64 %690 to i32
  %697 = and i32 %696, 255
  %698 = call i32 @llvm.ctpop.i32(i32 %697) #16
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  %701 = xor i8 %700, 1
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %701, i8* %702, align 1, !tbaa !2446
  %703 = xor i64 4, %687
  %704 = xor i64 %703, %690
  %705 = lshr i64 %704, 4
  %706 = trunc i64 %705 to i8
  %707 = and i8 %706, 1
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %707, i8* %708, align 1, !tbaa !2447
  %709 = icmp eq i64 %690, 0
  %710 = zext i1 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %710, i8* %711, align 1, !tbaa !2448
  %712 = lshr i64 %690, 63
  %713 = trunc i64 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %713, i8* %714, align 1, !tbaa !2449
  %715 = lshr i64 %687, 63
  %716 = xor i64 %712, %715
  %717 = add nuw nsw i64 %716, %712
  %718 = icmp eq i64 %717, 2
  %719 = zext i1 %718 to i8
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %719, i8* %720, align 1, !tbaa !2450
  %721 = load i64, i64* %RBP
  %722 = sub i64 %721, 8
  %723 = load i64, i64* %RCX
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %722 to i64*
  store i64 %723, i64* %726
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  %731 = load i32, i32* %730
  %732 = sext i32 %731 to i64
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RAX
  %734 = mul i64 %733, 8
  %735 = add i64 %734, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 8
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %735 to i64*
  %739 = load i64, i64* %738
  store i64 %739, i64* %RAX, align 8, !tbaa !2428
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 40
  %742 = load i64, i64* %RAX
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 4
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %741 to i64*
  store i64 %742, i64* %745
  %746 = load i64, i64* %PC
  %747 = sub i64 %746, 251
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 5
  store i64 %749, i64* %PC
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %747, i64* %750, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 12
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 7
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i32*
  store i32 10, i32* %755
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 12
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  %760 = inttoptr i64 %757 to i32*
  %761 = load i32, i32* %760
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RDI, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = sub i64 %763, 584
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 5
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 5
  store i64 %768, i64* %PC
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %770 = load i64, i64* %769, align 8, !tbaa !2428
  %771 = add i64 %770, -8
  %772 = inttoptr i64 %771 to i64*
  store i64 %766, i64* %772
  store i64 %771, i64* %769, align 8, !tbaa !2428
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %764, i64* %773, align 8, !tbaa !2428
  %774 = load i64, i64* %PC
  %775 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %774, %struct.Memory* %MEMORY.1)
  %776 = load i64, i64* %RBP
  %777 = sub i64 %776, 8
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %777 to i64*
  %781 = load i64, i64* %780
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = load i64, i64* %RAX
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 3
  store i64 %784, i64* %PC
  store i64 %782, i64* %RCX, align 8, !tbaa !2428
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = add i64 4, %785
  store i64 %788, i64* %RCX, align 8, !tbaa !2428
  %789 = icmp ult i64 %788, %785
  %790 = icmp ult i64 %788, 4
  %791 = or i1 %789, %790
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %792, i8* %793, align 1, !tbaa !2432
  %794 = trunc i64 %788 to i32
  %795 = and i32 %794, 255
  %796 = call i32 @llvm.ctpop.i32(i32 %795) #16
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %799, i8* %800, align 1, !tbaa !2446
  %801 = xor i64 4, %785
  %802 = xor i64 %801, %788
  %803 = lshr i64 %802, 4
  %804 = trunc i64 %803 to i8
  %805 = and i8 %804, 1
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %805, i8* %806, align 1, !tbaa !2447
  %807 = icmp eq i64 %788, 0
  %808 = zext i1 %807 to i8
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %808, i8* %809, align 1, !tbaa !2448
  %810 = lshr i64 %788, 63
  %811 = trunc i64 %810 to i8
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %811, i8* %812, align 1, !tbaa !2449
  %813 = lshr i64 %785, 63
  %814 = xor i64 %810, %813
  %815 = add nuw nsw i64 %814, %810
  %816 = icmp eq i64 %815, 2
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %817, i8* %818, align 1, !tbaa !2450
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 8
  %821 = load i64, i64* %RCX
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 4
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %820 to i64*
  store i64 %821, i64* %824
  %825 = load i64, i64* %RAX
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 3
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  %829 = load i32, i32* %828
  %830 = sext i32 %829 to i64
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = load i64, i64* %RAX
  %832 = mul i64 %831, 8
  %833 = add i64 %832, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 8
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i64*
  %837 = load i64, i64* %836
  store i64 %837, i64* %RAX, align 8, !tbaa !2428
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 40
  %840 = load i64, i64* %RAX
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 4
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %839 to i64*
  store i64 %840, i64* %843
  %844 = load i64, i64* %PC
  %845 = sub i64 %844, 501
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %845, i64* %848, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 12
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 7
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i32*
  store i32 15, i32* %853
  %854 = load i64, i64* %PC
  %855 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %854, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %855

block_4006fc:                                     ; preds = %block_400566
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 12
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 7
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i32*
  store i32 9, i32* %860
  %861 = load i64, i64* %PC
  %862 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %861, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %862

block_400922:                                     ; preds = %block_400566
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 12
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 7
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %864 to i32*
  store i32 20, i32* %867
  %868 = load i64, i64* %PC
  %869 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %868, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %869

block_400a1c:                                     ; preds = %block_400566
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 12
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 7
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i32*
  store i32 25, i32* %874
  %875 = load i64, i64* %PC
  %876 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %875, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %876

block_400b16:                                     ; preds = %block_400566
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 12
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 7
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  store i32 30, i32* %881
  %882 = load i64, i64* %PC
  %883 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %882, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %883

block_400602:                                     ; preds = %block_400566
  %884 = load i64, i64* %RBP
  %885 = sub i64 %884, 12
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 7
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i32*
  store i32 4, i32* %888
  %889 = load i64, i64* %PC
  %890 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %889, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %890

; <label>:891:                                    ; preds = %block_400566
  %892 = load i64, i64* %PC
  %893 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %892, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %893
}

; Function Attrs: noinline
define %struct.Memory* @sub_400400__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400400:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_400cd0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_400c60___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_602150___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400929(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400929

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.0)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 1, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 12
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 134
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %234 = load i64, i64* %233, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %230, i64* %236
  store i64 %235, i64* %233, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %237, align 8, !tbaa !2428
  %238 = load i64, i64* %PC
  %239 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.0)
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = add i64 4, %249
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = icmp ult i64 %252, %249
  %254 = icmp ult i64 %252, 4
  %255 = or i1 %253, %254
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %256, i8* %257, align 1, !tbaa !2432
  %258 = trunc i64 %252 to i32
  %259 = and i32 %258, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i64 4, %249
  %266 = xor i64 %265, %252
  %267 = lshr i64 %266, 4
  %268 = trunc i64 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i64 %252, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %252, 63
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %249, 63
  %278 = xor i64 %274, %277
  %279 = add nuw nsw i64 %278, %274
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %RCX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288
  %289 = load i64, i64* %RAX
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RAX
  %296 = mul i64 %295, 8
  %297 = add i64 %296, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 8
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 40
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %303 to i64*
  store i64 %304, i64* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 51
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 9, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %319

block_4009ea:                                     ; preds = %block_400566
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 24, i32* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 12
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 1284
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.0)
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 8
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = add i64 4, %354
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = icmp ult i64 %357, %354
  %359 = icmp ult i64 %357, 4
  %360 = or i1 %358, %359
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2432
  %363 = trunc i64 %357 to i32
  %364 = and i32 %363, 255
  %365 = call i32 @llvm.ctpop.i32(i32 %364) #16
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %368, i8* %369, align 1, !tbaa !2446
  %370 = xor i64 4, %354
  %371 = xor i64 %370, %357
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i64 %357, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i64 %357, 63
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i64 %354, 63
  %383 = xor i64 %379, %382
  %384 = add nuw nsw i64 %383, %379
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 8
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %389 to i64*
  store i64 %390, i64* %393
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = mul i64 %400, 8
  %402 = add i64 %401, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 8
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 40
  %409 = load i64, i64* %RAX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 1201
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 7
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 6, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 12
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 384
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.0)
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 8
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  store i64 %449, i64* %RCX, align 8, !tbaa !2428
  %452 = load i64, i64* %RCX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC
  %455 = add i64 4, %452
  store i64 %455, i64* %RCX, align 8, !tbaa !2428
  %456 = icmp ult i64 %455, %452
  %457 = icmp ult i64 %455, 4
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2432
  %461 = trunc i64 %455 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 4, %452
  %469 = xor i64 %468, %455
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = icmp eq i64 %455, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i64 %455, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = lshr i64 %452, 63
  %481 = xor i64 %477, %480
  %482 = add nuw nsw i64 %481, %477
  %483 = icmp eq i64 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2450
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 8
  %488 = load i64, i64* %RCX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RAX
  %499 = mul i64 %498, 8
  %500 = add i64 %499, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 8
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 40
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %506 to i64*
  store i64 %507, i64* %510
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 301
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %515, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 29, i32* %520
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 12
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 3
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %RDI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 1534
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.0)
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 8
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  store i64 %547, i64* %RCX, align 8, !tbaa !2428
  %550 = load i64, i64* %RCX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = add i64 4, %550
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %550
  %555 = icmp ult i64 %553, 4
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2432
  %559 = trunc i64 %553 to i32
  %560 = and i32 %559, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2446
  %566 = xor i64 4, %550
  %567 = xor i64 %566, %553
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2447
  %572 = icmp eq i64 %553, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2448
  %575 = lshr i64 %553, 63
  %576 = trunc i64 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = lshr i64 %550, 63
  %579 = xor i64 %575, %578
  %580 = add nuw nsw i64 %579, %575
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %582, i8* %583, align 1, !tbaa !2450
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 8
  %586 = load i64, i64* %RCX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %585 to i64*
  store i64 %586, i64* %589
  %590 = load i64, i64* %RAX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i32*
  %594 = load i32, i32* %593
  %595 = sext i32 %594 to i64
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = load i64, i64* %RAX
  %597 = mul i64 %596, 8
  %598 = add i64 %597, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 8
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i64*
  %602 = load i64, i64* %601
  store i64 %602, i64* %RAX, align 8, !tbaa !2428
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 40
  %605 = load i64, i64* %RAX
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %604 to i64*
  store i64 %605, i64* %608
  %609 = load i64, i64* %PC
  %610 = sub i64 %609, 1451
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %610, i64* %613, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 7
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  store i32 11, i32* %618
  %619 = load i64, i64* %PC
  %620 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %619, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %620

block_40085a:                                     ; preds = %block_400566
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 12
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 7
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  store i32 16, i32* %625
  %626 = load i64, i64* %PC
  %627 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %626, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %627

block_400954:                                     ; preds = %block_400566
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 12
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  store i32 21, i32* %632
  %633 = load i64, i64* %PC
  %634 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %633, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %634

block_400a4e:                                     ; preds = %block_400566
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 12
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 7
  store i64 %638, i64* %PC
  %639 = inttoptr i64 %636 to i32*
  store i32 26, i32* %639
  %640 = load i64, i64* %PC
  %641 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %641

block_400b48:                                     ; preds = %block_400566
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 12
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 7
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i32*
  store i32 31, i32* %646
  %647 = load i64, i64* %PC
  %648 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %647, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %648

block_4007c4:                                     ; preds = %block_400566
  %649 = load i64, i64* %RBP
  %650 = sub i64 %649, 12
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 7
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %650 to i32*
  store i32 13, i32* %653
  %654 = load i64, i64* %PC
  %655 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %654, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %655

block_400566:                                     ; preds = %block_400828, %block_400929, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %1099, %block_400929 ], [ %1197, %block_400828 ], [ %1006, %block_40072e ], [ %908, %block_400ab2 ], [ %810, %block_400634 ], [ %712, %block_4009b8 ], [ %141, %block_4008f0 ], [ %344, %block_4009ea ], [ %239, %block_40056c ], [ %43, %block_4007f6 ], [ %442, %block_400666 ], [ %540, %block_400ae4 ]
  %656 = load i64, i64* %RBP
  %657 = sub i64 %656, 40
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = inttoptr i64 %657 to i64*
  %661 = load i64, i64* %660
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = load i64, i64* %RAX
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 2
  store i64 %664, i64* %PC
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %662, i64* %665, align 8, !tbaa !2428
  %666 = load i64, i64* %PC
  switch i64 %666, label %1346 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 12
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 7
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  store i32 3, i32* %671
  %672 = load i64, i64* %PC
  %673 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %672, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %673

block_4008be:                                     ; preds = %block_400566
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 12
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 7
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i32*
  store i32 18, i32* %678
  %679 = load i64, i64* %PC
  %680 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %679, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %680

block_4006ca:                                     ; preds = %block_400566
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 12
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 7
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %682 to i32*
  store i32 8, i32* %685
  %686 = load i64, i64* %PC
  %687 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %686, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %687

block_4009b8:                                     ; preds = %block_400566
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 12
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  store i32 23, i32* %692
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 12
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RDI, align 8, !tbaa !2428
  %700 = load i64, i64* %PC
  %701 = sub i64 %700, 1234
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 5
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %707 = load i64, i64* %706, align 8, !tbaa !2428
  %708 = add i64 %707, -8
  %709 = inttoptr i64 %708 to i64*
  store i64 %703, i64* %709
  store i64 %708, i64* %706, align 8, !tbaa !2428
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %701, i64* %710, align 8, !tbaa !2428
  %711 = load i64, i64* %PC
  %712 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %711, %struct.Memory* %MEMORY.0)
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 8
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 4
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i64*
  %718 = load i64, i64* %717
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = load i64, i64* %RAX
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  store i64 %719, i64* %RCX, align 8, !tbaa !2428
  %722 = load i64, i64* %RCX
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 4
  store i64 %724, i64* %PC
  %725 = add i64 4, %722
  store i64 %725, i64* %RCX, align 8, !tbaa !2428
  %726 = icmp ult i64 %725, %722
  %727 = icmp ult i64 %725, 4
  %728 = or i1 %726, %727
  %729 = zext i1 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %729, i8* %730, align 1, !tbaa !2432
  %731 = trunc i64 %725 to i32
  %732 = and i32 %731, 255
  %733 = call i32 @llvm.ctpop.i32(i32 %732) #16
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %736, i8* %737, align 1, !tbaa !2446
  %738 = xor i64 4, %722
  %739 = xor i64 %738, %725
  %740 = lshr i64 %739, 4
  %741 = trunc i64 %740 to i8
  %742 = and i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %742, i8* %743, align 1, !tbaa !2447
  %744 = icmp eq i64 %725, 0
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %745, i8* %746, align 1, !tbaa !2448
  %747 = lshr i64 %725, 63
  %748 = trunc i64 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %748, i8* %749, align 1, !tbaa !2449
  %750 = lshr i64 %722, 63
  %751 = xor i64 %747, %750
  %752 = add nuw nsw i64 %751, %747
  %753 = icmp eq i64 %752, 2
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %754, i8* %755, align 1, !tbaa !2450
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 8
  %758 = load i64, i64* %RCX
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 4
  store i64 %760, i64* %PC
  %761 = inttoptr i64 %757 to i64*
  store i64 %758, i64* %761
  %762 = load i64, i64* %RAX
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 3
  store i64 %764, i64* %PC
  %765 = inttoptr i64 %762 to i32*
  %766 = load i32, i32* %765
  %767 = sext i32 %766 to i64
  store i64 %767, i64* %RAX, align 8, !tbaa !2428
  %768 = load i64, i64* %RAX
  %769 = mul i64 %768, 8
  %770 = add i64 %769, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 8
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 40
  %777 = load i64, i64* %RAX
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %776 to i64*
  store i64 %777, i64* %780
  %781 = load i64, i64* %PC
  %782 = sub i64 %781, 1151
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  store i64 %784, i64* %PC
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %782, i64* %785, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 12
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 7
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  store i32 5, i32* %790
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 12
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to i32*
  %796 = load i32, i32* %795
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %RDI, align 8, !tbaa !2428
  %798 = load i64, i64* %PC
  %799 = sub i64 %798, 334
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 5
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %805 = load i64, i64* %804, align 8, !tbaa !2428
  %806 = add i64 %805, -8
  %807 = inttoptr i64 %806 to i64*
  store i64 %801, i64* %807
  store i64 %806, i64* %804, align 8, !tbaa !2428
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %799, i64* %808, align 8, !tbaa !2428
  %809 = load i64, i64* %PC
  %810 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %809, %struct.Memory* %MEMORY.0)
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 8
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 4
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i64*
  %816 = load i64, i64* %815
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = load i64, i64* %RAX
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  store i64 %817, i64* %RCX, align 8, !tbaa !2428
  %820 = load i64, i64* %RCX
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 4
  store i64 %822, i64* %PC
  %823 = add i64 4, %820
  store i64 %823, i64* %RCX, align 8, !tbaa !2428
  %824 = icmp ult i64 %823, %820
  %825 = icmp ult i64 %823, 4
  %826 = or i1 %824, %825
  %827 = zext i1 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %827, i8* %828, align 1, !tbaa !2432
  %829 = trunc i64 %823 to i32
  %830 = and i32 %829, 255
  %831 = call i32 @llvm.ctpop.i32(i32 %830) #16
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %834, i8* %835, align 1, !tbaa !2446
  %836 = xor i64 4, %820
  %837 = xor i64 %836, %823
  %838 = lshr i64 %837, 4
  %839 = trunc i64 %838 to i8
  %840 = and i8 %839, 1
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %840, i8* %841, align 1, !tbaa !2447
  %842 = icmp eq i64 %823, 0
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %843, i8* %844, align 1, !tbaa !2448
  %845 = lshr i64 %823, 63
  %846 = trunc i64 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %846, i8* %847, align 1, !tbaa !2449
  %848 = lshr i64 %820, 63
  %849 = xor i64 %845, %848
  %850 = add nuw nsw i64 %849, %845
  %851 = icmp eq i64 %850, 2
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %852, i8* %853, align 1, !tbaa !2450
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 8
  %856 = load i64, i64* %RCX
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 4
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %855 to i64*
  store i64 %856, i64* %859
  %860 = load i64, i64* %RAX
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %860 to i32*
  %864 = load i32, i32* %863
  %865 = sext i32 %864 to i64
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = load i64, i64* %RAX
  %867 = mul i64 %866, 8
  %868 = add i64 %867, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 8
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 40
  %875 = load i64, i64* %RAX
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 4
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %874 to i64*
  store i64 %875, i64* %878
  %879 = load i64, i64* %PC
  %880 = sub i64 %879, 251
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  store i64 %882, i64* %PC
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %880, i64* %883, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %884 = load i64, i64* %RBP
  %885 = sub i64 %884, 12
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 7
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i32*
  store i32 28, i32* %888
  %889 = load i64, i64* %RBP
  %890 = sub i64 %889, 12
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 3
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i32*
  %894 = load i32, i32* %893
  %895 = zext i32 %894 to i64
  store i64 %895, i64* %RDI, align 8, !tbaa !2428
  %896 = load i64, i64* %PC
  %897 = sub i64 %896, 1484
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 5
  store i64 %901, i64* %PC
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %903 = load i64, i64* %902, align 8, !tbaa !2428
  %904 = add i64 %903, -8
  %905 = inttoptr i64 %904 to i64*
  store i64 %899, i64* %905
  store i64 %904, i64* %902, align 8, !tbaa !2428
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %897, i64* %906, align 8, !tbaa !2428
  %907 = load i64, i64* %PC
  %908 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %907, %struct.Memory* %MEMORY.0)
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 8
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 4
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i64*
  %914 = load i64, i64* %913
  store i64 %914, i64* %RAX, align 8, !tbaa !2428
  %915 = load i64, i64* %RAX
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 3
  store i64 %917, i64* %PC
  store i64 %915, i64* %RCX, align 8, !tbaa !2428
  %918 = load i64, i64* %RCX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = add i64 4, %918
  store i64 %921, i64* %RCX, align 8, !tbaa !2428
  %922 = icmp ult i64 %921, %918
  %923 = icmp ult i64 %921, 4
  %924 = or i1 %922, %923
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2432
  %927 = trunc i64 %921 to i32
  %928 = and i32 %927, 255
  %929 = call i32 @llvm.ctpop.i32(i32 %928) #16
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = xor i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %932, i8* %933, align 1, !tbaa !2446
  %934 = xor i64 4, %918
  %935 = xor i64 %934, %921
  %936 = lshr i64 %935, 4
  %937 = trunc i64 %936 to i8
  %938 = and i8 %937, 1
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %938, i8* %939, align 1, !tbaa !2447
  %940 = icmp eq i64 %921, 0
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %941, i8* %942, align 1, !tbaa !2448
  %943 = lshr i64 %921, 63
  %944 = trunc i64 %943 to i8
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %944, i8* %945, align 1, !tbaa !2449
  %946 = lshr i64 %918, 63
  %947 = xor i64 %943, %946
  %948 = add nuw nsw i64 %947, %943
  %949 = icmp eq i64 %948, 2
  %950 = zext i1 %949 to i8
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %950, i8* %951, align 1, !tbaa !2450
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 8
  %954 = load i64, i64* %RCX
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 4
  store i64 %956, i64* %PC
  %957 = inttoptr i64 %953 to i64*
  store i64 %954, i64* %957
  %958 = load i64, i64* %RAX
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 3
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i32*
  %962 = load i32, i32* %961
  %963 = sext i32 %962 to i64
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = load i64, i64* %RAX
  %965 = mul i64 %964, 8
  %966 = add i64 %965, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 8
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i64*
  %970 = load i64, i64* %969
  store i64 %970, i64* %RAX, align 8, !tbaa !2428
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 40
  %973 = load i64, i64* %RAX
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %972 to i64*
  store i64 %973, i64* %976
  %977 = load i64, i64* %PC
  %978 = sub i64 %977, 1401
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 5
  store i64 %980, i64* %PC
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %978, i64* %981, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %982 = load i64, i64* %RBP
  %983 = sub i64 %982, 12
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  store i32 10, i32* %986
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 12
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 3
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i32*
  %992 = load i32, i32* %991
  %993 = zext i32 %992 to i64
  store i64 %993, i64* %RDI, align 8, !tbaa !2428
  %994 = load i64, i64* %PC
  %995 = sub i64 %994, 584
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 5
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 5
  store i64 %999, i64* %PC
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1001 = load i64, i64* %1000, align 8, !tbaa !2428
  %1002 = add i64 %1001, -8
  %1003 = inttoptr i64 %1002 to i64*
  store i64 %997, i64* %1003
  store i64 %1002, i64* %1000, align 8, !tbaa !2428
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %995, i64* %1004, align 8, !tbaa !2428
  %1005 = load i64, i64* %PC
  %1006 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1005, %struct.Memory* %MEMORY.0)
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 8
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 4
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1008 to i64*
  %1012 = load i64, i64* %1011
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = load i64, i64* %RAX
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 3
  store i64 %1015, i64* %PC
  store i64 %1013, i64* %RCX, align 8, !tbaa !2428
  %1016 = load i64, i64* %RCX
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 4
  store i64 %1018, i64* %PC
  %1019 = add i64 4, %1016
  store i64 %1019, i64* %RCX, align 8, !tbaa !2428
  %1020 = icmp ult i64 %1019, %1016
  %1021 = icmp ult i64 %1019, 4
  %1022 = or i1 %1020, %1021
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1023, i8* %1024, align 1, !tbaa !2432
  %1025 = trunc i64 %1019 to i32
  %1026 = and i32 %1025, 255
  %1027 = call i32 @llvm.ctpop.i32(i32 %1026) #16
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1030, i8* %1031, align 1, !tbaa !2446
  %1032 = xor i64 4, %1016
  %1033 = xor i64 %1032, %1019
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1036, i8* %1037, align 1, !tbaa !2447
  %1038 = icmp eq i64 %1019, 0
  %1039 = zext i1 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1039, i8* %1040, align 1, !tbaa !2448
  %1041 = lshr i64 %1019, 63
  %1042 = trunc i64 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1042, i8* %1043, align 1, !tbaa !2449
  %1044 = lshr i64 %1016, 63
  %1045 = xor i64 %1041, %1044
  %1046 = add nuw nsw i64 %1045, %1041
  %1047 = icmp eq i64 %1046, 2
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1048, i8* %1049, align 1, !tbaa !2450
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 8
  %1052 = load i64, i64* %RCX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1051 to i64*
  store i64 %1052, i64* %1055
  %1056 = load i64, i64* %RAX
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 3
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1056 to i32*
  %1060 = load i32, i32* %1059
  %1061 = sext i32 %1060 to i64
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RAX
  %1063 = mul i64 %1062, 8
  %1064 = add i64 %1063, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 8
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i64*
  %1068 = load i64, i64* %1067
  store i64 %1068, i64* %RAX, align 8, !tbaa !2428
  %1069 = load i64, i64* %RBP
  %1070 = sub i64 %1069, 40
  %1071 = load i64, i64* %RAX
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 4
  store i64 %1073, i64* %PC
  %1074 = inttoptr i64 %1070 to i64*
  store i64 %1071, i64* %1074
  %1075 = load i64, i64* %PC
  %1076 = sub i64 %1075, 501
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  store i64 %1078, i64* %PC
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1076, i64* %1079, align 8, !tbaa !2428
  br label %block_400566

block_400929:                                     ; preds = %block_400922, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400922 ]
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 12
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i32*
  %1085 = load i32, i32* %1084
  %1086 = zext i32 %1085 to i64
  store i64 %1086, i64* %RDI, align 8, !tbaa !2428
  %1087 = load i64, i64* %PC
  %1088 = sub i64 %1087, 1084
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 5
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  store i64 %1092, i64* %PC
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1094 = load i64, i64* %1093, align 8, !tbaa !2428
  %1095 = add i64 %1094, -8
  %1096 = inttoptr i64 %1095 to i64*
  store i64 %1090, i64* %1096
  store i64 %1095, i64* %1093, align 8, !tbaa !2428
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1088, i64* %1097, align 8, !tbaa !2428
  %1098 = load i64, i64* %PC
  %1099 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1098, %struct.Memory* %MEMORY.1)
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 8
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i64*
  %1105 = load i64, i64* %1104
  store i64 %1105, i64* %RAX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RAX
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 3
  store i64 %1108, i64* %PC
  store i64 %1106, i64* %RCX, align 8, !tbaa !2428
  %1109 = load i64, i64* %RCX
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 4
  store i64 %1111, i64* %PC
  %1112 = add i64 4, %1109
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = icmp ult i64 %1112, %1109
  %1114 = icmp ult i64 %1112, 4
  %1115 = or i1 %1113, %1114
  %1116 = zext i1 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1116, i8* %1117, align 1, !tbaa !2432
  %1118 = trunc i64 %1112 to i32
  %1119 = and i32 %1118, 255
  %1120 = call i32 @llvm.ctpop.i32(i32 %1119) #16
  %1121 = trunc i32 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = xor i8 %1122, 1
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1123, i8* %1124, align 1, !tbaa !2446
  %1125 = xor i64 4, %1109
  %1126 = xor i64 %1125, %1112
  %1127 = lshr i64 %1126, 4
  %1128 = trunc i64 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1129, i8* %1130, align 1, !tbaa !2447
  %1131 = icmp eq i64 %1112, 0
  %1132 = zext i1 %1131 to i8
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1132, i8* %1133, align 1, !tbaa !2448
  %1134 = lshr i64 %1112, 63
  %1135 = trunc i64 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1135, i8* %1136, align 1, !tbaa !2449
  %1137 = lshr i64 %1109, 63
  %1138 = xor i64 %1134, %1137
  %1139 = add nuw nsw i64 %1138, %1134
  %1140 = icmp eq i64 %1139, 2
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1141, i8* %1142, align 1, !tbaa !2450
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 8
  %1145 = load i64, i64* %RCX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 4
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1144 to i64*
  store i64 %1145, i64* %1148
  %1149 = load i64, i64* %RAX
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 3
  store i64 %1151, i64* %PC
  %1152 = inttoptr i64 %1149 to i32*
  %1153 = load i32, i32* %1152
  %1154 = sext i32 %1153 to i64
  store i64 %1154, i64* %RAX, align 8, !tbaa !2428
  %1155 = load i64, i64* %RAX
  %1156 = mul i64 %1155, 8
  %1157 = add i64 %1156, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 8
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to i64*
  %1161 = load i64, i64* %1160
  store i64 %1161, i64* %RAX, align 8, !tbaa !2428
  %1162 = load i64, i64* %RBP
  %1163 = sub i64 %1162, 40
  %1164 = load i64, i64* %RAX
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 4
  store i64 %1166, i64* %PC
  %1167 = inttoptr i64 %1163 to i64*
  store i64 %1164, i64* %1167
  %1168 = load i64, i64* %PC
  %1169 = sub i64 %1168, 1001
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 5
  store i64 %1171, i64* %PC
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1169, i64* %1172, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 12
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 7
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to i32*
  store i32 15, i32* %1177
  %1178 = load i64, i64* %RBP
  %1179 = sub i64 %1178, 12
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 3
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i32*
  %1183 = load i32, i32* %1182
  %1184 = zext i32 %1183 to i64
  store i64 %1184, i64* %RDI, align 8, !tbaa !2428
  %1185 = load i64, i64* %PC
  %1186 = sub i64 %1185, 834
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 5
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 5
  store i64 %1190, i64* %PC
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1192 = load i64, i64* %1191, align 8, !tbaa !2428
  %1193 = add i64 %1192, -8
  %1194 = inttoptr i64 %1193 to i64*
  store i64 %1188, i64* %1194
  store i64 %1193, i64* %1191, align 8, !tbaa !2428
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1186, i64* %1195, align 8, !tbaa !2428
  %1196 = load i64, i64* %PC
  %1197 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1196, %struct.Memory* %MEMORY.0)
  %1198 = load i64, i64* %RBP
  %1199 = sub i64 %1198, 8
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 4
  store i64 %1201, i64* %PC
  %1202 = inttoptr i64 %1199 to i64*
  %1203 = load i64, i64* %1202
  store i64 %1203, i64* %RAX, align 8, !tbaa !2428
  %1204 = load i64, i64* %RAX
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 3
  store i64 %1206, i64* %PC
  store i64 %1204, i64* %RCX, align 8, !tbaa !2428
  %1207 = load i64, i64* %RCX
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 4
  store i64 %1209, i64* %PC
  %1210 = add i64 4, %1207
  store i64 %1210, i64* %RCX, align 8, !tbaa !2428
  %1211 = icmp ult i64 %1210, %1207
  %1212 = icmp ult i64 %1210, 4
  %1213 = or i1 %1211, %1212
  %1214 = zext i1 %1213 to i8
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1214, i8* %1215, align 1, !tbaa !2432
  %1216 = trunc i64 %1210 to i32
  %1217 = and i32 %1216, 255
  %1218 = call i32 @llvm.ctpop.i32(i32 %1217) #16
  %1219 = trunc i32 %1218 to i8
  %1220 = and i8 %1219, 1
  %1221 = xor i8 %1220, 1
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1221, i8* %1222, align 1, !tbaa !2446
  %1223 = xor i64 4, %1207
  %1224 = xor i64 %1223, %1210
  %1225 = lshr i64 %1224, 4
  %1226 = trunc i64 %1225 to i8
  %1227 = and i8 %1226, 1
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1227, i8* %1228, align 1, !tbaa !2447
  %1229 = icmp eq i64 %1210, 0
  %1230 = zext i1 %1229 to i8
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1230, i8* %1231, align 1, !tbaa !2448
  %1232 = lshr i64 %1210, 63
  %1233 = trunc i64 %1232 to i8
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1233, i8* %1234, align 1, !tbaa !2449
  %1235 = lshr i64 %1207, 63
  %1236 = xor i64 %1232, %1235
  %1237 = add nuw nsw i64 %1236, %1232
  %1238 = icmp eq i64 %1237, 2
  %1239 = zext i1 %1238 to i8
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1239, i8* %1240, align 1, !tbaa !2450
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 8
  %1243 = load i64, i64* %RCX
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 4
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1242 to i64*
  store i64 %1243, i64* %1246
  %1247 = load i64, i64* %RAX
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 3
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i32*
  %1251 = load i32, i32* %1250
  %1252 = sext i32 %1251 to i64
  store i64 %1252, i64* %RAX, align 8, !tbaa !2428
  %1253 = load i64, i64* %RAX
  %1254 = mul i64 %1253, 8
  %1255 = add i64 %1254, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 8
  store i64 %1257, i64* %PC
  %1258 = inttoptr i64 %1255 to i64*
  %1259 = load i64, i64* %1258
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 40
  %1262 = load i64, i64* %RAX
  %1263 = load i64, i64* %PC
  %1264 = add i64 %1263, 4
  store i64 %1264, i64* %PC
  %1265 = inttoptr i64 %1261 to i64*
  store i64 %1262, i64* %1265
  %1266 = load i64, i64* %PC
  %1267 = sub i64 %1266, 751
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  store i64 %1269, i64* %PC
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1270, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 12
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 7
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i32*
  store i32 20, i32* %1275
  br label %block_400929

block_40059e:                                     ; preds = %block_400566
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 12
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 7
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i32*
  store i32 2, i32* %1280
  %1281 = load i64, i64* %PC
  %1282 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %1281, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1282

block_400559:                                     ; preds = %block_400566
  %1283 = load i64, i64* %RBP
  %1284 = sub i64 %1283, 12
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 7
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1284 to i32*
  store i32 0, i32* %1287
  %1288 = load i64, i64* %PC
  %1289 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %1288, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1289

block_400a1c:                                     ; preds = %block_400566
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 12
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 7
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to i32*
  store i32 25, i32* %1294
  %1295 = load i64, i64* %PC
  %1296 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1295, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1296

block_400698:                                     ; preds = %block_400566
  %1297 = load i64, i64* %RBP
  %1298 = sub i64 %1297, 12
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 7
  store i64 %1300, i64* %PC
  %1301 = inttoptr i64 %1298 to i32*
  store i32 7, i32* %1301
  %1302 = load i64, i64* %PC
  %1303 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %1302, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1303

block_400b16:                                     ; preds = %block_400566
  %1304 = load i64, i64* %RBP
  %1305 = sub i64 %1304, 12
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 7
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1305 to i32*
  store i32 30, i32* %1308
  %1309 = load i64, i64* %PC
  %1310 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1309, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1310

block_400792:                                     ; preds = %block_400566
  %1311 = load i64, i64* %RBP
  %1312 = sub i64 %1311, 12
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 7
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to i32*
  store i32 12, i32* %1315
  %1316 = load i64, i64* %PC
  %1317 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1316, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1317

block_40088c:                                     ; preds = %block_400566
  %1318 = load i64, i64* %RBP
  %1319 = sub i64 %1318, 12
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 7
  store i64 %1321, i64* %PC
  %1322 = inttoptr i64 %1319 to i32*
  store i32 17, i32* %1322
  %1323 = load i64, i64* %PC
  %1324 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1323, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1324

block_400986:                                     ; preds = %block_400566
  %1325 = load i64, i64* %RBP
  %1326 = sub i64 %1325, 12
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 7
  store i64 %1328, i64* %PC
  %1329 = inttoptr i64 %1326 to i32*
  store i32 22, i32* %1329
  %1330 = load i64, i64* %PC
  %1331 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1330, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1331

block_400602:                                     ; preds = %block_400566
  %1332 = load i64, i64* %RBP
  %1333 = sub i64 %1332, 12
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 7
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1333 to i32*
  store i32 4, i32* %1336
  %1337 = load i64, i64* %PC
  %1338 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1337, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1338

block_400a80:                                     ; preds = %block_400566
  %1339 = load i64, i64* %RBP
  %1340 = sub i64 %1339, 12
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 7
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i32*
  store i32 27, i32* %1343
  %1344 = load i64, i64* %PC
  %1345 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1344, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1345

; <label>:1346:                                   ; preds = %block_400566
  %1347 = load i64, i64* %PC
  %1348 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1347, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1348
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a87(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_400a87

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.0)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.0)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.0)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.0)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.0)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.0)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.0)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.0)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 26, i32* %1013
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDI, align 8, !tbaa !2428
  %1021 = load i64, i64* %PC
  %1022 = sub i64 %1021, 1384
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  store i64 %1026, i64* %PC
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1028 = load i64, i64* %1027, align 8, !tbaa !2428
  %1029 = add i64 %1028, -8
  %1030 = inttoptr i64 %1029 to i64*
  store i64 %1024, i64* %1030
  store i64 %1029, i64* %1027, align 8, !tbaa !2428
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1022, i64* %1031, align 8, !tbaa !2428
  %1032 = load i64, i64* %PC
  %1033 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1032, %struct.Memory* %MEMORY.0)
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 8
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RCX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = add i64 4, %1043
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  %1047 = icmp ult i64 %1046, %1043
  %1048 = icmp ult i64 %1046, 4
  %1049 = or i1 %1047, %1048
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = trunc i64 %1046 to i32
  %1053 = and i32 %1052, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i64 4, %1043
  %1060 = xor i64 %1059, %1046
  %1061 = lshr i64 %1060, 4
  %1062 = trunc i64 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i64 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i64 %1046, 63
  %1069 = trunc i64 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i64 %1043, 63
  %1072 = xor i64 %1068, %1071
  %1073 = add nuw nsw i64 %1072, %1068
  %1074 = icmp eq i64 %1073, 2
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1075, i8* %1076, align 1, !tbaa !2450
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 8
  %1079 = load i64, i64* %RCX
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 4
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1078 to i64*
  store i64 %1079, i64* %1082
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = mul i64 %1089, 8
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  %1095 = load i64, i64* %1094
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 40
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1097 to i64*
  store i64 %1098, i64* %1101
  %1102 = load i64, i64* %PC
  %1103 = sub i64 %1102, 1301
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 7
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  store i32 8, i32* %1111
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = load i64, i64* %PC
  %1120 = sub i64 %1119, 484
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1126 = load i64, i64* %1125, align 8, !tbaa !2428
  %1127 = add i64 %1126, -8
  %1128 = inttoptr i64 %1127 to i64*
  store i64 %1122, i64* %1128
  store i64 %1127, i64* %1125, align 8, !tbaa !2428
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1120, i64* %1129, align 8, !tbaa !2428
  %1130 = load i64, i64* %PC
  %1131 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1130, %struct.Memory* %MEMORY.0)
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 8
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  store i64 %1138, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = add i64 4, %1141
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1145 = icmp ult i64 %1144, %1141
  %1146 = icmp ult i64 %1144, 4
  %1147 = or i1 %1145, %1146
  %1148 = zext i1 %1147 to i8
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1148, i8* %1149, align 1, !tbaa !2432
  %1150 = trunc i64 %1144 to i32
  %1151 = and i32 %1150, 255
  %1152 = call i32 @llvm.ctpop.i32(i32 %1151) #16
  %1153 = trunc i32 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = xor i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1155, i8* %1156, align 1, !tbaa !2446
  %1157 = xor i64 4, %1141
  %1158 = xor i64 %1157, %1144
  %1159 = lshr i64 %1158, 4
  %1160 = trunc i64 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1161, i8* %1162, align 1, !tbaa !2447
  %1163 = icmp eq i64 %1144, 0
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1164, i8* %1165, align 1, !tbaa !2448
  %1166 = lshr i64 %1144, 63
  %1167 = trunc i64 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = lshr i64 %1141, 63
  %1170 = xor i64 %1166, %1169
  %1171 = add nuw nsw i64 %1170, %1166
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 8
  %1177 = load i64, i64* %RCX
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1176 to i64*
  store i64 %1177, i64* %1180
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184
  %1186 = sext i32 %1185 to i64
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i64, i64* %RAX
  %1188 = mul i64 %1187, 8
  %1189 = add i64 %1188, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 8
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i64*
  %1193 = load i64, i64* %1192
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RBP
  %1195 = sub i64 %1194, 40
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1195 to i64*
  store i64 %1196, i64* %1199
  %1200 = load i64, i64* %PC
  %1201 = sub i64 %1200, 401
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1201, i64* %1204, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 7
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  store i32 31, i32* %1209
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  %1215 = load i32, i32* %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load i64, i64* %PC
  %1218 = sub i64 %1217, 1634
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %MEMORY.0)
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 8
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RAX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RCX
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = add i64 4, %1239
  store i64 %1242, i64* %RCX, align 8, !tbaa !2428
  %1243 = icmp ult i64 %1242, %1239
  %1244 = icmp ult i64 %1242, 4
  %1245 = or i1 %1243, %1244
  %1246 = zext i1 %1245 to i8
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1246, i8* %1247, align 1, !tbaa !2432
  %1248 = trunc i64 %1242 to i32
  %1249 = and i32 %1248, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = xor i64 4, %1239
  %1256 = xor i64 %1255, %1242
  %1257 = lshr i64 %1256, 4
  %1258 = trunc i64 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = icmp eq i64 %1242, 0
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = lshr i64 %1242, 63
  %1265 = trunc i64 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i64 %1239, 63
  %1268 = xor i64 %1264, %1267
  %1269 = add nuw nsw i64 %1268, %1264
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1271, i8* %1272, align 1, !tbaa !2450
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 8
  %1275 = load i64, i64* %RCX
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = sext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = mul i64 %1285, 8
  %1287 = add i64 %1286, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 8
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1287 to i64*
  %1291 = load i64, i64* %1290
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 40
  %1294 = load i64, i64* %RAX
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1293 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %PC
  %1299 = sub i64 %1298, 1551
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1299, i64* %1302, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 7
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  store i32 13, i32* %1307
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 12
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 3
  store i64 %1311, i64* %PC
  %1312 = inttoptr i64 %1309 to i32*
  %1313 = load i32, i32* %1312
  %1314 = zext i32 %1313 to i64
  store i64 %1314, i64* %RDI, align 8, !tbaa !2428
  %1315 = load i64, i64* %PC
  %1316 = sub i64 %1315, 734
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 5
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 5
  store i64 %1320, i64* %PC
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1322 = load i64, i64* %1321, align 8, !tbaa !2428
  %1323 = add i64 %1322, -8
  %1324 = inttoptr i64 %1323 to i64*
  store i64 %1318, i64* %1324
  store i64 %1323, i64* %1321, align 8, !tbaa !2428
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1316, i64* %1325, align 8, !tbaa !2428
  %1326 = load i64, i64* %PC
  %1327 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1326, %struct.Memory* %MEMORY.0)
  %1328 = load i64, i64* %RBP
  %1329 = sub i64 %1328, 8
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 4
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1329 to i64*
  %1333 = load i64, i64* %1332
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 3
  store i64 %1336, i64* %PC
  store i64 %1334, i64* %RCX, align 8, !tbaa !2428
  %1337 = load i64, i64* %RCX
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 4
  store i64 %1339, i64* %PC
  %1340 = add i64 4, %1337
  store i64 %1340, i64* %RCX, align 8, !tbaa !2428
  %1341 = icmp ult i64 %1340, %1337
  %1342 = icmp ult i64 %1340, 4
  %1343 = or i1 %1341, %1342
  %1344 = zext i1 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1344, i8* %1345, align 1, !tbaa !2432
  %1346 = trunc i64 %1340 to i32
  %1347 = and i32 %1346, 255
  %1348 = call i32 @llvm.ctpop.i32(i32 %1347) #16
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  %1351 = xor i8 %1350, 1
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1351, i8* %1352, align 1, !tbaa !2446
  %1353 = xor i64 4, %1337
  %1354 = xor i64 %1353, %1340
  %1355 = lshr i64 %1354, 4
  %1356 = trunc i64 %1355 to i8
  %1357 = and i8 %1356, 1
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1357, i8* %1358, align 1, !tbaa !2447
  %1359 = icmp eq i64 %1340, 0
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1360, i8* %1361, align 1, !tbaa !2448
  %1362 = lshr i64 %1340, 63
  %1363 = trunc i64 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1363, i8* %1364, align 1, !tbaa !2449
  %1365 = lshr i64 %1337, 63
  %1366 = xor i64 %1362, %1365
  %1367 = add nuw nsw i64 %1366, %1362
  %1368 = icmp eq i64 %1367, 2
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1369, i8* %1370, align 1, !tbaa !2450
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 8
  %1373 = load i64, i64* %RCX
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 4
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1372 to i64*
  store i64 %1373, i64* %1376
  %1377 = load i64, i64* %RAX
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 3
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to i32*
  %1381 = load i32, i32* %1380
  %1382 = sext i32 %1381 to i64
  store i64 %1382, i64* %RAX, align 8, !tbaa !2428
  %1383 = load i64, i64* %RAX
  %1384 = mul i64 %1383, 8
  %1385 = add i64 %1384, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 8
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i64*
  %1389 = load i64, i64* %1388
  store i64 %1389, i64* %RAX, align 8, !tbaa !2428
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 40
  %1392 = load i64, i64* %RAX
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 4
  store i64 %1394, i64* %PC
  %1395 = inttoptr i64 %1391 to i64*
  store i64 %1392, i64* %1395
  %1396 = load i64, i64* %PC
  %1397 = sub i64 %1396, 651
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 5
  store i64 %1399, i64* %PC
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1397, i64* %1400, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 12
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 7
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  store i32 18, i32* %1405
  %1406 = load i64, i64* %PC
  %1407 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %1406, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1407

block_4009b8:                                     ; preds = %block_400566
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 12
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 7
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  store i32 23, i32* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 12
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = sub i64 %1420, 1234
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  store i64 %1425, i64* %PC
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1427 = load i64, i64* %1426, align 8, !tbaa !2428
  %1428 = add i64 %1427, -8
  %1429 = inttoptr i64 %1428 to i64*
  store i64 %1423, i64* %1429
  store i64 %1428, i64* %1426, align 8, !tbaa !2428
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1421, i64* %1430, align 8, !tbaa !2428
  %1431 = load i64, i64* %PC
  %1432 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1431, %struct.Memory* %MEMORY.0)
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 8
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RAX
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 3
  store i64 %1441, i64* %PC
  store i64 %1439, i64* %RCX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RCX
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 4
  store i64 %1444, i64* %PC
  %1445 = add i64 4, %1442
  store i64 %1445, i64* %RCX, align 8, !tbaa !2428
  %1446 = icmp ult i64 %1445, %1442
  %1447 = icmp ult i64 %1445, 4
  %1448 = or i1 %1446, %1447
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1449, i8* %1450, align 1, !tbaa !2432
  %1451 = trunc i64 %1445 to i32
  %1452 = and i32 %1451, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #16
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = xor i64 4, %1442
  %1459 = xor i64 %1458, %1445
  %1460 = lshr i64 %1459, 4
  %1461 = trunc i64 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = icmp eq i64 %1445, 0
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i64 %1445, 63
  %1468 = trunc i64 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1468, i8* %1469, align 1, !tbaa !2449
  %1470 = lshr i64 %1442, 63
  %1471 = xor i64 %1467, %1470
  %1472 = add nuw nsw i64 %1471, %1467
  %1473 = icmp eq i64 %1472, 2
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1474, i8* %1475, align 1, !tbaa !2450
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 8
  %1478 = load i64, i64* %RCX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1477 to i64*
  store i64 %1478, i64* %1481
  %1482 = load i64, i64* %RAX
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 3
  store i64 %1484, i64* %PC
  %1485 = inttoptr i64 %1482 to i32*
  %1486 = load i32, i32* %1485
  %1487 = sext i32 %1486 to i64
  store i64 %1487, i64* %RAX, align 8, !tbaa !2428
  %1488 = load i64, i64* %RAX
  %1489 = mul i64 %1488, 8
  %1490 = add i64 %1489, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 8
  store i64 %1492, i64* %PC
  %1493 = inttoptr i64 %1490 to i64*
  %1494 = load i64, i64* %1493
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 40
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1496 to i64*
  store i64 %1497, i64* %1500
  %1501 = load i64, i64* %PC
  %1502 = sub i64 %1501, 1151
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1502, i64* %1505, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1506 = load i64, i64* %RBP
  %1507 = sub i64 %1506, 12
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 7
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  store i32 5, i32* %1510
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 12
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 3
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = zext i32 %1516 to i64
  store i64 %1517, i64* %RDI, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = sub i64 %1518, 334
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 5
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1525 = load i64, i64* %1524, align 8, !tbaa !2428
  %1526 = add i64 %1525, -8
  %1527 = inttoptr i64 %1526 to i64*
  store i64 %1521, i64* %1527
  store i64 %1526, i64* %1524, align 8, !tbaa !2428
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1519, i64* %1528, align 8, !tbaa !2428
  %1529 = load i64, i64* %PC
  %1530 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1529, %struct.Memory* %MEMORY.0)
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 8
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RAX
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 3
  store i64 %1539, i64* %PC
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RCX
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 4
  store i64 %1542, i64* %PC
  %1543 = add i64 4, %1540
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = icmp ult i64 %1543, %1540
  %1545 = icmp ult i64 %1543, 4
  %1546 = or i1 %1544, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1547, i8* %1548, align 1, !tbaa !2432
  %1549 = trunc i64 %1543 to i32
  %1550 = and i32 %1549, 255
  %1551 = call i32 @llvm.ctpop.i32(i32 %1550) #16
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1554, i8* %1555, align 1, !tbaa !2446
  %1556 = xor i64 4, %1540
  %1557 = xor i64 %1556, %1543
  %1558 = lshr i64 %1557, 4
  %1559 = trunc i64 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1560, i8* %1561, align 1, !tbaa !2447
  %1562 = icmp eq i64 %1543, 0
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1563, i8* %1564, align 1, !tbaa !2448
  %1565 = lshr i64 %1543, 63
  %1566 = trunc i64 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1566, i8* %1567, align 1, !tbaa !2449
  %1568 = lshr i64 %1540, 63
  %1569 = xor i64 %1565, %1568
  %1570 = add nuw nsw i64 %1569, %1565
  %1571 = icmp eq i64 %1570, 2
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1572, i8* %1573, align 1, !tbaa !2450
  %1574 = load i64, i64* %RBP
  %1575 = sub i64 %1574, 8
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1575 to i64*
  store i64 %1576, i64* %1579
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1580 to i32*
  %1584 = load i32, i32* %1583
  %1585 = sext i32 %1584 to i64
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i64, i64* %RAX
  %1587 = mul i64 %1586, 8
  %1588 = add i64 %1587, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 8
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1588 to i64*
  %1592 = load i64, i64* %1591
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 40
  %1595 = load i64, i64* %RAX
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598
  %1599 = load i64, i64* %PC
  %1600 = sub i64 %1599, 251
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  store i64 %1602, i64* %PC
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1603, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 12
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 7
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  store i32 28, i32* %1608
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 12
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 3
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = zext i32 %1614 to i64
  store i64 %1615, i64* %RDI, align 8, !tbaa !2428
  %1616 = load i64, i64* %PC
  %1617 = sub i64 %1616, 1484
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 5
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1623 = load i64, i64* %1622, align 8, !tbaa !2428
  %1624 = add i64 %1623, -8
  %1625 = inttoptr i64 %1624 to i64*
  store i64 %1619, i64* %1625
  store i64 %1624, i64* %1622, align 8, !tbaa !2428
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1617, i64* %1626, align 8, !tbaa !2428
  %1627 = load i64, i64* %PC
  %1628 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1627, %struct.Memory* %MEMORY.0)
  %1629 = load i64, i64* %RBP
  %1630 = sub i64 %1629, 8
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 4
  store i64 %1632, i64* %PC
  %1633 = inttoptr i64 %1630 to i64*
  %1634 = load i64, i64* %1633
  store i64 %1634, i64* %RAX, align 8, !tbaa !2428
  %1635 = load i64, i64* %RAX
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  store i64 %1635, i64* %RCX, align 8, !tbaa !2428
  %1638 = load i64, i64* %RCX
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 4
  store i64 %1640, i64* %PC
  %1641 = add i64 4, %1638
  store i64 %1641, i64* %RCX, align 8, !tbaa !2428
  %1642 = icmp ult i64 %1641, %1638
  %1643 = icmp ult i64 %1641, 4
  %1644 = or i1 %1642, %1643
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1645, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1641 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = xor i64 4, %1638
  %1655 = xor i64 %1654, %1641
  %1656 = lshr i64 %1655, 4
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1658, i8* %1659, align 1, !tbaa !2447
  %1660 = icmp eq i64 %1641, 0
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1661, i8* %1662, align 1, !tbaa !2448
  %1663 = lshr i64 %1641, 63
  %1664 = trunc i64 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1664, i8* %1665, align 1, !tbaa !2449
  %1666 = lshr i64 %1638, 63
  %1667 = xor i64 %1663, %1666
  %1668 = add nuw nsw i64 %1667, %1663
  %1669 = icmp eq i64 %1668, 2
  %1670 = zext i1 %1669 to i8
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1670, i8* %1671, align 1, !tbaa !2450
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 8
  %1674 = load i64, i64* %RCX
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1673 to i64*
  store i64 %1674, i64* %1677
  %1678 = load i64, i64* %RAX
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 3
  store i64 %1680, i64* %PC
  %1681 = inttoptr i64 %1678 to i32*
  %1682 = load i32, i32* %1681
  %1683 = sext i32 %1682 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RAX
  %1685 = mul i64 %1684, 8
  %1686 = add i64 %1685, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 8
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 40
  %1693 = load i64, i64* %RAX
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 4
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1692 to i64*
  store i64 %1693, i64* %1696
  %1697 = load i64, i64* %PC
  %1698 = sub i64 %1697, 1401
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1698, i64* %1701, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 12
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 7
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  store i32 0, i32* %1706
  %1707 = load i64, i64* %RSP
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 4
  store i64 %1709, i64* %PC
  %1710 = add i64 48, %1707
  store i64 %1710, i64* %RSP, align 8, !tbaa !2428
  %1711 = icmp ult i64 %1710, %1707
  %1712 = icmp ult i64 %1710, 48
  %1713 = or i1 %1711, %1712
  %1714 = zext i1 %1713 to i8
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1714, i8* %1715, align 1, !tbaa !2432
  %1716 = trunc i64 %1710 to i32
  %1717 = and i32 %1716, 255
  %1718 = call i32 @llvm.ctpop.i32(i32 %1717) #16
  %1719 = trunc i32 %1718 to i8
  %1720 = and i8 %1719, 1
  %1721 = xor i8 %1720, 1
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1721, i8* %1722, align 1, !tbaa !2446
  %1723 = xor i64 48, %1707
  %1724 = xor i64 %1723, %1710
  %1725 = lshr i64 %1724, 4
  %1726 = trunc i64 %1725 to i8
  %1727 = and i8 %1726, 1
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1727, i8* %1728, align 1, !tbaa !2447
  %1729 = icmp eq i64 %1710, 0
  %1730 = zext i1 %1729 to i8
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1730, i8* %1731, align 1, !tbaa !2448
  %1732 = lshr i64 %1710, 63
  %1733 = trunc i64 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1733, i8* %1734, align 1, !tbaa !2449
  %1735 = lshr i64 %1707, 63
  %1736 = xor i64 %1732, %1735
  %1737 = add nuw nsw i64 %1736, %1732
  %1738 = icmp eq i64 %1737, 2
  %1739 = zext i1 %1738 to i8
  %1740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1739, i8* %1740, align 1, !tbaa !2450
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 1
  store i64 %1742, i64* %PC
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1744 = load i64, i64* %1743, align 8, !tbaa !2428
  %1745 = add i64 %1744, 8
  %1746 = inttoptr i64 %1744 to i64*
  %1747 = load i64, i64* %1746
  store i64 %1747, i64* %RBP, align 8, !tbaa !2428
  store i64 %1745, i64* %1743, align 8, !tbaa !2428
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 1
  store i64 %1749, i64* %PC
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1752 = load i64, i64* %1751, align 8, !tbaa !2428
  %1753 = inttoptr i64 %1752 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %1750, align 8, !tbaa !2428
  %1755 = add i64 %1752, 8
  store i64 %1755, i64* %1751, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40072e:                                     ; preds = %block_400566
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 12
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 7
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  store i32 10, i32* %1760
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 12
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RDI, align 8, !tbaa !2428
  %1768 = load i64, i64* %PC
  %1769 = sub i64 %1768, 584
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 5
  store i64 %1773, i64* %PC
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1775 = load i64, i64* %1774, align 8, !tbaa !2428
  %1776 = add i64 %1775, -8
  %1777 = inttoptr i64 %1776 to i64*
  store i64 %1771, i64* %1777
  store i64 %1776, i64* %1774, align 8, !tbaa !2428
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1769, i64* %1778, align 8, !tbaa !2428
  %1779 = load i64, i64* %PC
  %1780 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1779, %struct.Memory* %MEMORY.0)
  %1781 = load i64, i64* %RBP
  %1782 = sub i64 %1781, 8
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i64*
  %1786 = load i64, i64* %1785
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %RAX
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 4
  store i64 %1792, i64* %PC
  %1793 = add i64 4, %1790
  store i64 %1793, i64* %RCX, align 8, !tbaa !2428
  %1794 = icmp ult i64 %1793, %1790
  %1795 = icmp ult i64 %1793, 4
  %1796 = or i1 %1794, %1795
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = trunc i64 %1793 to i32
  %1800 = and i32 %1799, 255
  %1801 = call i32 @llvm.ctpop.i32(i32 %1800) #16
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1804, i8* %1805, align 1, !tbaa !2446
  %1806 = xor i64 4, %1790
  %1807 = xor i64 %1806, %1793
  %1808 = lshr i64 %1807, 4
  %1809 = trunc i64 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i64 %1793, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i64 %1793, 63
  %1816 = trunc i64 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i64 %1790, 63
  %1819 = xor i64 %1815, %1818
  %1820 = add nuw nsw i64 %1819, %1815
  %1821 = icmp eq i64 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 8
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1825 to i64*
  store i64 %1826, i64* %1829
  %1830 = load i64, i64* %RAX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 3
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = mul i64 %1836, 8
  %1838 = add i64 %1837, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 8
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RAX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %RAX
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1844 to i64*
  store i64 %1845, i64* %1848
  %1849 = load i64, i64* %PC
  %1850 = sub i64 %1849, 501
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 5
  store i64 %1852, i64* %PC
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1850, i64* %1853, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1854 = load i64, i64* %RBP
  %1855 = sub i64 %1854, 12
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 7
  store i64 %1857, i64* %PC
  %1858 = inttoptr i64 %1855 to i32*
  store i32 15, i32* %1858
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 12
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 3
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1860 to i32*
  %1864 = load i32, i32* %1863
  %1865 = zext i32 %1864 to i64
  store i64 %1865, i64* %RDI, align 8, !tbaa !2428
  %1866 = load i64, i64* %PC
  %1867 = sub i64 %1866, 834
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 5
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 5
  store i64 %1871, i64* %PC
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1873 = load i64, i64* %1872, align 8, !tbaa !2428
  %1874 = add i64 %1873, -8
  %1875 = inttoptr i64 %1874 to i64*
  store i64 %1869, i64* %1875
  store i64 %1874, i64* %1872, align 8, !tbaa !2428
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1867, i64* %1876, align 8, !tbaa !2428
  %1877 = load i64, i64* %PC
  %1878 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1877, %struct.Memory* %MEMORY.0)
  %1879 = load i64, i64* %RBP
  %1880 = sub i64 %1879, 8
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 4
  store i64 %1882, i64* %PC
  %1883 = inttoptr i64 %1880 to i64*
  %1884 = load i64, i64* %1883
  store i64 %1884, i64* %RAX, align 8, !tbaa !2428
  %1885 = load i64, i64* %RAX
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 3
  store i64 %1887, i64* %PC
  store i64 %1885, i64* %RCX, align 8, !tbaa !2428
  %1888 = load i64, i64* %RCX
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 4
  store i64 %1890, i64* %PC
  %1891 = add i64 4, %1888
  store i64 %1891, i64* %RCX, align 8, !tbaa !2428
  %1892 = icmp ult i64 %1891, %1888
  %1893 = icmp ult i64 %1891, 4
  %1894 = or i1 %1892, %1893
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1895, i8* %1896, align 1, !tbaa !2432
  %1897 = trunc i64 %1891 to i32
  %1898 = and i32 %1897, 255
  %1899 = call i32 @llvm.ctpop.i32(i32 %1898) #16
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1902, i8* %1903, align 1, !tbaa !2446
  %1904 = xor i64 4, %1888
  %1905 = xor i64 %1904, %1891
  %1906 = lshr i64 %1905, 4
  %1907 = trunc i64 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1908, i8* %1909, align 1, !tbaa !2447
  %1910 = icmp eq i64 %1891, 0
  %1911 = zext i1 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1911, i8* %1912, align 1, !tbaa !2448
  %1913 = lshr i64 %1891, 63
  %1914 = trunc i64 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1914, i8* %1915, align 1, !tbaa !2449
  %1916 = lshr i64 %1888, 63
  %1917 = xor i64 %1913, %1916
  %1918 = add nuw nsw i64 %1917, %1913
  %1919 = icmp eq i64 %1918, 2
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1920, i8* %1921, align 1, !tbaa !2450
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 8
  %1924 = load i64, i64* %RCX
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 4
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1923 to i64*
  store i64 %1924, i64* %1927
  %1928 = load i64, i64* %RAX
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 3
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = sext i32 %1932 to i64
  store i64 %1933, i64* %RAX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RAX
  %1935 = mul i64 %1934, 8
  %1936 = add i64 %1935, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 8
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i64*
  %1940 = load i64, i64* %1939
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = load i64, i64* %RBP
  %1942 = sub i64 %1941, 40
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1942 to i64*
  store i64 %1943, i64* %1946
  %1947 = load i64, i64* %PC
  %1948 = sub i64 %1947, 751
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  store i64 %1950, i64* %PC
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1948, i64* %1951, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 12
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 7
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  store i32 20, i32* %1956
  %1957 = load i64, i64* %RBP
  %1958 = sub i64 %1957, 12
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 3
  store i64 %1960, i64* %PC
  %1961 = inttoptr i64 %1958 to i32*
  %1962 = load i32, i32* %1961
  %1963 = zext i32 %1962 to i64
  store i64 %1963, i64* %RDI, align 8, !tbaa !2428
  %1964 = load i64, i64* %PC
  %1965 = sub i64 %1964, 1084
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 5
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1971 = load i64, i64* %1970, align 8, !tbaa !2428
  %1972 = add i64 %1971, -8
  %1973 = inttoptr i64 %1972 to i64*
  store i64 %1967, i64* %1973
  store i64 %1972, i64* %1970, align 8, !tbaa !2428
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1965, i64* %1974, align 8, !tbaa !2428
  %1975 = load i64, i64* %PC
  %1976 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1975, %struct.Memory* %MEMORY.0)
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 8
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 4
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i64*
  %1982 = load i64, i64* %1981
  store i64 %1982, i64* %RAX, align 8, !tbaa !2428
  %1983 = load i64, i64* %RAX
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  store i64 %1983, i64* %RCX, align 8, !tbaa !2428
  %1986 = load i64, i64* %RCX
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 4
  store i64 %1988, i64* %PC
  %1989 = add i64 4, %1986
  store i64 %1989, i64* %RCX, align 8, !tbaa !2428
  %1990 = icmp ult i64 %1989, %1986
  %1991 = icmp ult i64 %1989, 4
  %1992 = or i1 %1990, %1991
  %1993 = zext i1 %1992 to i8
  %1994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1993, i8* %1994, align 1, !tbaa !2432
  %1995 = trunc i64 %1989 to i32
  %1996 = and i32 %1995, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = xor i64 4, %1986
  %2003 = xor i64 %2002, %1989
  %2004 = lshr i64 %2003, 4
  %2005 = trunc i64 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2006, i8* %2007, align 1, !tbaa !2447
  %2008 = icmp eq i64 %1989, 0
  %2009 = zext i1 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2009, i8* %2010, align 1, !tbaa !2448
  %2011 = lshr i64 %1989, 63
  %2012 = trunc i64 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2012, i8* %2013, align 1, !tbaa !2449
  %2014 = lshr i64 %1986, 63
  %2015 = xor i64 %2011, %2014
  %2016 = add nuw nsw i64 %2015, %2011
  %2017 = icmp eq i64 %2016, 2
  %2018 = zext i1 %2017 to i8
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2018, i8* %2019, align 1, !tbaa !2450
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 8
  %2022 = load i64, i64* %RCX
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 4
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2021 to i64*
  store i64 %2022, i64* %2025
  %2026 = load i64, i64* %RAX
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 3
  store i64 %2028, i64* %PC
  %2029 = inttoptr i64 %2026 to i32*
  %2030 = load i32, i32* %2029
  %2031 = sext i32 %2030 to i64
  store i64 %2031, i64* %RAX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RAX
  %2033 = mul i64 %2032, 8
  %2034 = add i64 %2033, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 8
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2034 to i64*
  %2038 = load i64, i64* %2037
  store i64 %2038, i64* %RAX, align 8, !tbaa !2428
  %2039 = load i64, i64* %RBP
  %2040 = sub i64 %2039, 40
  %2041 = load i64, i64* %RAX
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2040 to i64*
  store i64 %2041, i64* %2044
  %2045 = load i64, i64* %PC
  %2046 = sub i64 %2045, 1001
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 5
  store i64 %2048, i64* %PC
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2046, i64* %2049, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 12
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 7
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  store i32 2, i32* %2054
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 12
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 3
  store i64 %2058, i64* %PC
  %2059 = inttoptr i64 %2056 to i32*
  %2060 = load i32, i32* %2059
  %2061 = zext i32 %2060 to i64
  store i64 %2061, i64* %RDI, align 8, !tbaa !2428
  %2062 = load i64, i64* %PC
  %2063 = sub i64 %2062, 184
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 5
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 5
  store i64 %2067, i64* %PC
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2069 = load i64, i64* %2068, align 8, !tbaa !2428
  %2070 = add i64 %2069, -8
  %2071 = inttoptr i64 %2070 to i64*
  store i64 %2065, i64* %2071
  store i64 %2070, i64* %2068, align 8, !tbaa !2428
  %2072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2063, i64* %2072, align 8, !tbaa !2428
  %2073 = load i64, i64* %PC
  %2074 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2073, %struct.Memory* %MEMORY.0)
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 8
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 4
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i64*
  %2080 = load i64, i64* %2079
  store i64 %2080, i64* %RAX, align 8, !tbaa !2428
  %2081 = load i64, i64* %RAX
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2084 = load i64, i64* %RCX
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 4
  store i64 %2086, i64* %PC
  %2087 = add i64 4, %2084
  store i64 %2087, i64* %RCX, align 8, !tbaa !2428
  %2088 = icmp ult i64 %2087, %2084
  %2089 = icmp ult i64 %2087, 4
  %2090 = or i1 %2088, %2089
  %2091 = zext i1 %2090 to i8
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2091, i8* %2092, align 1, !tbaa !2432
  %2093 = trunc i64 %2087 to i32
  %2094 = and i32 %2093, 255
  %2095 = call i32 @llvm.ctpop.i32(i32 %2094) #16
  %2096 = trunc i32 %2095 to i8
  %2097 = and i8 %2096, 1
  %2098 = xor i8 %2097, 1
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2098, i8* %2099, align 1, !tbaa !2446
  %2100 = xor i64 4, %2084
  %2101 = xor i64 %2100, %2087
  %2102 = lshr i64 %2101, 4
  %2103 = trunc i64 %2102 to i8
  %2104 = and i8 %2103, 1
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2104, i8* %2105, align 1, !tbaa !2447
  %2106 = icmp eq i64 %2087, 0
  %2107 = zext i1 %2106 to i8
  %2108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2107, i8* %2108, align 1, !tbaa !2448
  %2109 = lshr i64 %2087, 63
  %2110 = trunc i64 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2110, i8* %2111, align 1, !tbaa !2449
  %2112 = lshr i64 %2084, 63
  %2113 = xor i64 %2109, %2112
  %2114 = add nuw nsw i64 %2113, %2109
  %2115 = icmp eq i64 %2114, 2
  %2116 = zext i1 %2115 to i8
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2116, i8* %2117, align 1, !tbaa !2450
  %2118 = load i64, i64* %RBP
  %2119 = sub i64 %2118, 8
  %2120 = load i64, i64* %RCX
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 4
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2119 to i64*
  store i64 %2120, i64* %2123
  %2124 = load i64, i64* %RAX
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RAX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RAX
  %2131 = mul i64 %2130, 8
  %2132 = add i64 %2131, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 8
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  store i64 %2136, i64* %RAX, align 8, !tbaa !2428
  %2137 = load i64, i64* %RBP
  %2138 = sub i64 %2137, 40
  %2139 = load i64, i64* %RAX
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2138 to i64*
  store i64 %2139, i64* %2142
  %2143 = load i64, i64* %PC
  %2144 = sub i64 %2143, 101
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 5
  store i64 %2146, i64* %PC
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2144, i64* %2147, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400602, %block_400986, %block_400a87, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %2668, %block_400a87 ], [ %1976, %block_400922 ], [ %1878, %block_400828 ], [ %1780, %block_40072e ], [ %1033, %block_400a4e ], [ %1628, %block_400ab2 ], [ %1530, %block_400634 ], [ %1432, %block_4009b8 ], [ %1327, %block_4007c4 ], [ %1229, %block_400b48 ], [ %1131, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %2074, %block_40059e ], [ %2183, %block_400a1c ], [ %2281, %block_400698 ], [ %2379, %block_400b16 ], [ %2477, %block_400792 ], [ %2575, %block_40088c ], [ %2766, %block_400986 ], [ %2864, %block_400602 ]
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 4
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i64*
  %2153 = load i64, i64* %2152
  store i64 %2153, i64* %RAX, align 8, !tbaa !2428
  %2154 = load i64, i64* %RAX
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 2
  store i64 %2156, i64* %PC
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2154, i64* %2157, align 8, !tbaa !2428
  %2158 = load i64, i64* %PC
  switch i64 %2158, label %2943 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 12
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 7
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i32*
  store i32 25, i32* %2163
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 12
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i32*
  %2169 = load i32, i32* %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RDI, align 8, !tbaa !2428
  %2171 = load i64, i64* %PC
  %2172 = sub i64 %2171, 1334
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2178 = load i64, i64* %2177, align 8, !tbaa !2428
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2174, i64* %2180
  store i64 %2179, i64* %2177, align 8, !tbaa !2428
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2172, i64* %2181, align 8, !tbaa !2428
  %2182 = load i64, i64* %PC
  %2183 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2182, %struct.Memory* %MEMORY.0)
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 8
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RAX
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2193 = load i64, i64* %RCX
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = add i64 4, %2193
  store i64 %2196, i64* %RCX, align 8, !tbaa !2428
  %2197 = icmp ult i64 %2196, %2193
  %2198 = icmp ult i64 %2196, 4
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2200, i8* %2201, align 1, !tbaa !2432
  %2202 = trunc i64 %2196 to i32
  %2203 = and i32 %2202, 255
  %2204 = call i32 @llvm.ctpop.i32(i32 %2203) #16
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = xor i8 %2206, 1
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2207, i8* %2208, align 1, !tbaa !2446
  %2209 = xor i64 4, %2193
  %2210 = xor i64 %2209, %2196
  %2211 = lshr i64 %2210, 4
  %2212 = trunc i64 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2213, i8* %2214, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2196, 0
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2216, i8* %2217, align 1, !tbaa !2448
  %2218 = lshr i64 %2196, 63
  %2219 = trunc i64 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2219, i8* %2220, align 1, !tbaa !2449
  %2221 = lshr i64 %2193, 63
  %2222 = xor i64 %2218, %2221
  %2223 = add nuw nsw i64 %2222, %2218
  %2224 = icmp eq i64 %2223, 2
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2226, align 1, !tbaa !2450
  %2227 = load i64, i64* %RBP
  %2228 = sub i64 %2227, 8
  %2229 = load i64, i64* %RCX
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 4
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2228 to i64*
  store i64 %2229, i64* %2232
  %2233 = load i64, i64* %RAX
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 3
  store i64 %2235, i64* %PC
  %2236 = inttoptr i64 %2233 to i32*
  %2237 = load i32, i32* %2236
  %2238 = sext i32 %2237 to i64
  store i64 %2238, i64* %RAX, align 8, !tbaa !2428
  %2239 = load i64, i64* %RAX
  %2240 = mul i64 %2239, 8
  %2241 = add i64 %2240, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 8
  store i64 %2243, i64* %PC
  %2244 = inttoptr i64 %2241 to i64*
  %2245 = load i64, i64* %2244
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 40
  %2248 = load i64, i64* %RAX
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 4
  store i64 %2250, i64* %PC
  %2251 = inttoptr i64 %2247 to i64*
  store i64 %2248, i64* %2251
  %2252 = load i64, i64* %PC
  %2253 = sub i64 %2252, 1251
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 5
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2253, i64* %2256, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 12
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 7
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  store i32 7, i32* %2261
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 12
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 3
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RDI, align 8, !tbaa !2428
  %2269 = load i64, i64* %PC
  %2270 = sub i64 %2269, 434
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 5
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 5
  store i64 %2274, i64* %PC
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2276 = load i64, i64* %2275, align 8, !tbaa !2428
  %2277 = add i64 %2276, -8
  %2278 = inttoptr i64 %2277 to i64*
  store i64 %2272, i64* %2278
  store i64 %2277, i64* %2275, align 8, !tbaa !2428
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2270, i64* %2279, align 8, !tbaa !2428
  %2280 = load i64, i64* %PC
  %2281 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2280, %struct.Memory* %MEMORY.0)
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 8
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 4
  store i64 %2285, i64* %PC
  %2286 = inttoptr i64 %2283 to i64*
  %2287 = load i64, i64* %2286
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i64, i64* %RAX
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC
  store i64 %2288, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RCX
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = add i64 4, %2291
  store i64 %2294, i64* %RCX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2291
  %2296 = icmp ult i64 %2294, 4
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2298, i8* %2299, align 1, !tbaa !2432
  %2300 = trunc i64 %2294 to i32
  %2301 = and i32 %2300, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #16
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 4, %2291
  %2308 = xor i64 %2307, %2294
  %2309 = lshr i64 %2308, 4
  %2310 = trunc i64 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2311, i8* %2312, align 1, !tbaa !2447
  %2313 = icmp eq i64 %2294, 0
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2314, i8* %2315, align 1, !tbaa !2448
  %2316 = lshr i64 %2294, 63
  %2317 = trunc i64 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2317, i8* %2318, align 1, !tbaa !2449
  %2319 = lshr i64 %2291, 63
  %2320 = xor i64 %2316, %2319
  %2321 = add nuw nsw i64 %2320, %2316
  %2322 = icmp eq i64 %2321, 2
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2323, i8* %2324, align 1, !tbaa !2450
  %2325 = load i64, i64* %RBP
  %2326 = sub i64 %2325, 8
  %2327 = load i64, i64* %RCX
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2326 to i64*
  store i64 %2327, i64* %2330
  %2331 = load i64, i64* %RAX
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 3
  store i64 %2333, i64* %PC
  %2334 = inttoptr i64 %2331 to i32*
  %2335 = load i32, i32* %2334
  %2336 = sext i32 %2335 to i64
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = load i64, i64* %RAX
  %2338 = mul i64 %2337, 8
  %2339 = add i64 %2338, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 8
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 40
  %2346 = load i64, i64* %RAX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2345 to i64*
  store i64 %2346, i64* %2349
  %2350 = load i64, i64* %PC
  %2351 = sub i64 %2350, 351
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 5
  store i64 %2353, i64* %PC
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2351, i64* %2354, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2355 = load i64, i64* %RBP
  %2356 = sub i64 %2355, 12
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 7
  store i64 %2358, i64* %PC
  %2359 = inttoptr i64 %2356 to i32*
  store i32 30, i32* %2359
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 12
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 3
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i32*
  %2365 = load i32, i32* %2364
  %2366 = zext i32 %2365 to i64
  store i64 %2366, i64* %RDI, align 8, !tbaa !2428
  %2367 = load i64, i64* %PC
  %2368 = sub i64 %2367, 1584
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 5
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2374 = load i64, i64* %2373, align 8, !tbaa !2428
  %2375 = add i64 %2374, -8
  %2376 = inttoptr i64 %2375 to i64*
  store i64 %2370, i64* %2376
  store i64 %2375, i64* %2373, align 8, !tbaa !2428
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2368, i64* %2377, align 8, !tbaa !2428
  %2378 = load i64, i64* %PC
  %2379 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2378, %struct.Memory* %MEMORY.0)
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 8
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 4
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2381 to i64*
  %2385 = load i64, i64* %2384
  store i64 %2385, i64* %RAX, align 8, !tbaa !2428
  %2386 = load i64, i64* %RAX
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 3
  store i64 %2388, i64* %PC
  store i64 %2386, i64* %RCX, align 8, !tbaa !2428
  %2389 = load i64, i64* %RCX
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = add i64 4, %2389
  store i64 %2392, i64* %RCX, align 8, !tbaa !2428
  %2393 = icmp ult i64 %2392, %2389
  %2394 = icmp ult i64 %2392, 4
  %2395 = or i1 %2393, %2394
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2432
  %2398 = trunc i64 %2392 to i32
  %2399 = and i32 %2398, 255
  %2400 = call i32 @llvm.ctpop.i32(i32 %2399) #16
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2403, i8* %2404, align 1, !tbaa !2446
  %2405 = xor i64 4, %2389
  %2406 = xor i64 %2405, %2392
  %2407 = lshr i64 %2406, 4
  %2408 = trunc i64 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2409, i8* %2410, align 1, !tbaa !2447
  %2411 = icmp eq i64 %2392, 0
  %2412 = zext i1 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2412, i8* %2413, align 1, !tbaa !2448
  %2414 = lshr i64 %2392, 63
  %2415 = trunc i64 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2415, i8* %2416, align 1, !tbaa !2449
  %2417 = lshr i64 %2389, 63
  %2418 = xor i64 %2414, %2417
  %2419 = add nuw nsw i64 %2418, %2414
  %2420 = icmp eq i64 %2419, 2
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2421, i8* %2422, align 1, !tbaa !2450
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 8
  %2425 = load i64, i64* %RCX
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 4
  store i64 %2427, i64* %PC
  %2428 = inttoptr i64 %2424 to i64*
  store i64 %2425, i64* %2428
  %2429 = load i64, i64* %RAX
  %2430 = load i64, i64* %PC
  %2431 = add i64 %2430, 3
  store i64 %2431, i64* %PC
  %2432 = inttoptr i64 %2429 to i32*
  %2433 = load i32, i32* %2432
  %2434 = sext i32 %2433 to i64
  store i64 %2434, i64* %RAX, align 8, !tbaa !2428
  %2435 = load i64, i64* %RAX
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 8
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to i64*
  %2441 = load i64, i64* %2440
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = load i64, i64* %RBP
  %2443 = sub i64 %2442, 40
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 4
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2443 to i64*
  store i64 %2444, i64* %2447
  %2448 = load i64, i64* %PC
  %2449 = sub i64 %2448, 1501
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 5
  store i64 %2451, i64* %PC
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2449, i64* %2452, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 12
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 7
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  store i32 12, i32* %2457
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 12
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 3
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2459 to i32*
  %2463 = load i32, i32* %2462
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RDI, align 8, !tbaa !2428
  %2465 = load i64, i64* %PC
  %2466 = sub i64 %2465, 684
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2472 = load i64, i64* %2471, align 8, !tbaa !2428
  %2473 = add i64 %2472, -8
  %2474 = inttoptr i64 %2473 to i64*
  store i64 %2468, i64* %2474
  store i64 %2473, i64* %2471, align 8, !tbaa !2428
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2466, i64* %2475, align 8, !tbaa !2428
  %2476 = load i64, i64* %PC
  %2477 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2476, %struct.Memory* %MEMORY.0)
  %2478 = load i64, i64* %RBP
  %2479 = sub i64 %2478, 8
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2479 to i64*
  %2483 = load i64, i64* %2482
  store i64 %2483, i64* %RAX, align 8, !tbaa !2428
  %2484 = load i64, i64* %RAX
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  store i64 %2484, i64* %RCX, align 8, !tbaa !2428
  %2487 = load i64, i64* %RCX
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 4
  store i64 %2489, i64* %PC
  %2490 = add i64 4, %2487
  store i64 %2490, i64* %RCX, align 8, !tbaa !2428
  %2491 = icmp ult i64 %2490, %2487
  %2492 = icmp ult i64 %2490, 4
  %2493 = or i1 %2491, %2492
  %2494 = zext i1 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2494, i8* %2495, align 1, !tbaa !2432
  %2496 = trunc i64 %2490 to i32
  %2497 = and i32 %2496, 255
  %2498 = call i32 @llvm.ctpop.i32(i32 %2497) #16
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = xor i8 %2500, 1
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2501, i8* %2502, align 1, !tbaa !2446
  %2503 = xor i64 4, %2487
  %2504 = xor i64 %2503, %2490
  %2505 = lshr i64 %2504, 4
  %2506 = trunc i64 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2507, i8* %2508, align 1, !tbaa !2447
  %2509 = icmp eq i64 %2490, 0
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2510, i8* %2511, align 1, !tbaa !2448
  %2512 = lshr i64 %2490, 63
  %2513 = trunc i64 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2513, i8* %2514, align 1, !tbaa !2449
  %2515 = lshr i64 %2487, 63
  %2516 = xor i64 %2512, %2515
  %2517 = add nuw nsw i64 %2516, %2512
  %2518 = icmp eq i64 %2517, 2
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2519, i8* %2520, align 1, !tbaa !2450
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 8
  %2523 = load i64, i64* %RCX
  %2524 = load i64, i64* %PC
  %2525 = add i64 %2524, 4
  store i64 %2525, i64* %PC
  %2526 = inttoptr i64 %2522 to i64*
  store i64 %2523, i64* %2526
  %2527 = load i64, i64* %RAX
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 3
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RAX
  %2534 = mul i64 %2533, 8
  %2535 = add i64 %2534, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 8
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2535 to i64*
  %2539 = load i64, i64* %2538
  store i64 %2539, i64* %RAX, align 8, !tbaa !2428
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 40
  %2542 = load i64, i64* %RAX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2541 to i64*
  store i64 %2542, i64* %2545
  %2546 = load i64, i64* %PC
  %2547 = sub i64 %2546, 601
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2547, i64* %2550, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 12
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 7
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to i32*
  store i32 17, i32* %2555
  %2556 = load i64, i64* %RBP
  %2557 = sub i64 %2556, 12
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 3
  store i64 %2559, i64* %PC
  %2560 = inttoptr i64 %2557 to i32*
  %2561 = load i32, i32* %2560
  %2562 = zext i32 %2561 to i64
  store i64 %2562, i64* %RDI, align 8, !tbaa !2428
  %2563 = load i64, i64* %PC
  %2564 = sub i64 %2563, 934
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 5
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 5
  store i64 %2568, i64* %PC
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2570 = load i64, i64* %2569, align 8, !tbaa !2428
  %2571 = add i64 %2570, -8
  %2572 = inttoptr i64 %2571 to i64*
  store i64 %2566, i64* %2572
  store i64 %2571, i64* %2569, align 8, !tbaa !2428
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2564, i64* %2573, align 8, !tbaa !2428
  %2574 = load i64, i64* %PC
  %2575 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2574, %struct.Memory* %MEMORY.0)
  %2576 = load i64, i64* %RBP
  %2577 = sub i64 %2576, 8
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2577 to i64*
  %2581 = load i64, i64* %2580
  store i64 %2581, i64* %RAX, align 8, !tbaa !2428
  %2582 = load i64, i64* %RAX
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 3
  store i64 %2584, i64* %PC
  store i64 %2582, i64* %RCX, align 8, !tbaa !2428
  %2585 = load i64, i64* %RCX
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 4
  store i64 %2587, i64* %PC
  %2588 = add i64 4, %2585
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = icmp ult i64 %2588, %2585
  %2590 = icmp ult i64 %2588, 4
  %2591 = or i1 %2589, %2590
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2592, i8* %2593, align 1, !tbaa !2432
  %2594 = trunc i64 %2588 to i32
  %2595 = and i32 %2594, 255
  %2596 = call i32 @llvm.ctpop.i32(i32 %2595) #16
  %2597 = trunc i32 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = xor i8 %2598, 1
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2599, i8* %2600, align 1, !tbaa !2446
  %2601 = xor i64 4, %2585
  %2602 = xor i64 %2601, %2588
  %2603 = lshr i64 %2602, 4
  %2604 = trunc i64 %2603 to i8
  %2605 = and i8 %2604, 1
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2605, i8* %2606, align 1, !tbaa !2447
  %2607 = icmp eq i64 %2588, 0
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2608, i8* %2609, align 1, !tbaa !2448
  %2610 = lshr i64 %2588, 63
  %2611 = trunc i64 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2611, i8* %2612, align 1, !tbaa !2449
  %2613 = lshr i64 %2585, 63
  %2614 = xor i64 %2610, %2613
  %2615 = add nuw nsw i64 %2614, %2610
  %2616 = icmp eq i64 %2615, 2
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2617, i8* %2618, align 1, !tbaa !2450
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 8
  %2621 = load i64, i64* %RCX
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 4
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2620 to i64*
  store i64 %2621, i64* %2624
  %2625 = load i64, i64* %RAX
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 3
  store i64 %2627, i64* %PC
  %2628 = inttoptr i64 %2625 to i32*
  %2629 = load i32, i32* %2628
  %2630 = sext i32 %2629 to i64
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RAX
  %2632 = mul i64 %2631, 8
  %2633 = add i64 %2632, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 8
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2633 to i64*
  %2637 = load i64, i64* %2636
  store i64 %2637, i64* %RAX, align 8, !tbaa !2428
  %2638 = load i64, i64* %RBP
  %2639 = sub i64 %2638, 40
  %2640 = load i64, i64* %RAX
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 4
  store i64 %2642, i64* %PC
  %2643 = inttoptr i64 %2639 to i64*
  store i64 %2640, i64* %2643
  %2644 = load i64, i64* %PC
  %2645 = sub i64 %2644, 851
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 5
  store i64 %2647, i64* %PC
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2645, i64* %2648, align 8, !tbaa !2428
  br label %block_400566

block_400a87:                                     ; preds = %block_400a80, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a80 ]
  %2649 = load i64, i64* %RBP
  %2650 = sub i64 %2649, 12
  %2651 = load i64, i64* %PC
  %2652 = add i64 %2651, 3
  store i64 %2652, i64* %PC
  %2653 = inttoptr i64 %2650 to i32*
  %2654 = load i32, i32* %2653
  %2655 = zext i32 %2654 to i64
  store i64 %2655, i64* %RDI, align 8, !tbaa !2428
  %2656 = load i64, i64* %PC
  %2657 = sub i64 %2656, 1434
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 5
  store i64 %2661, i64* %PC
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2663 = load i64, i64* %2662, align 8, !tbaa !2428
  %2664 = add i64 %2663, -8
  %2665 = inttoptr i64 %2664 to i64*
  store i64 %2659, i64* %2665
  store i64 %2664, i64* %2662, align 8, !tbaa !2428
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2657, i64* %2666, align 8, !tbaa !2428
  %2667 = load i64, i64* %PC
  %2668 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2667, %struct.Memory* %MEMORY.1)
  %2669 = load i64, i64* %RBP
  %2670 = sub i64 %2669, 8
  %2671 = load i64, i64* %PC
  %2672 = add i64 %2671, 4
  store i64 %2672, i64* %PC
  %2673 = inttoptr i64 %2670 to i64*
  %2674 = load i64, i64* %2673
  store i64 %2674, i64* %RAX, align 8, !tbaa !2428
  %2675 = load i64, i64* %RAX
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 3
  store i64 %2677, i64* %PC
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2678 = load i64, i64* %RCX
  %2679 = load i64, i64* %PC
  %2680 = add i64 %2679, 4
  store i64 %2680, i64* %PC
  %2681 = add i64 4, %2678
  store i64 %2681, i64* %RCX, align 8, !tbaa !2428
  %2682 = icmp ult i64 %2681, %2678
  %2683 = icmp ult i64 %2681, 4
  %2684 = or i1 %2682, %2683
  %2685 = zext i1 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2685, i8* %2686, align 1, !tbaa !2432
  %2687 = trunc i64 %2681 to i32
  %2688 = and i32 %2687, 255
  %2689 = call i32 @llvm.ctpop.i32(i32 %2688) #16
  %2690 = trunc i32 %2689 to i8
  %2691 = and i8 %2690, 1
  %2692 = xor i8 %2691, 1
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2692, i8* %2693, align 1, !tbaa !2446
  %2694 = xor i64 4, %2678
  %2695 = xor i64 %2694, %2681
  %2696 = lshr i64 %2695, 4
  %2697 = trunc i64 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2698, i8* %2699, align 1, !tbaa !2447
  %2700 = icmp eq i64 %2681, 0
  %2701 = zext i1 %2700 to i8
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2701, i8* %2702, align 1, !tbaa !2448
  %2703 = lshr i64 %2681, 63
  %2704 = trunc i64 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2704, i8* %2705, align 1, !tbaa !2449
  %2706 = lshr i64 %2678, 63
  %2707 = xor i64 %2703, %2706
  %2708 = add nuw nsw i64 %2707, %2703
  %2709 = icmp eq i64 %2708, 2
  %2710 = zext i1 %2709 to i8
  %2711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2710, i8* %2711, align 1, !tbaa !2450
  %2712 = load i64, i64* %RBP
  %2713 = sub i64 %2712, 8
  %2714 = load i64, i64* %RCX
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 4
  store i64 %2716, i64* %PC
  %2717 = inttoptr i64 %2713 to i64*
  store i64 %2714, i64* %2717
  %2718 = load i64, i64* %RAX
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 3
  store i64 %2720, i64* %PC
  %2721 = inttoptr i64 %2718 to i32*
  %2722 = load i32, i32* %2721
  %2723 = sext i32 %2722 to i64
  store i64 %2723, i64* %RAX, align 8, !tbaa !2428
  %2724 = load i64, i64* %RAX
  %2725 = mul i64 %2724, 8
  %2726 = add i64 %2725, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2727 = load i64, i64* %PC
  %2728 = add i64 %2727, 8
  store i64 %2728, i64* %PC
  %2729 = inttoptr i64 %2726 to i64*
  %2730 = load i64, i64* %2729
  store i64 %2730, i64* %RAX, align 8, !tbaa !2428
  %2731 = load i64, i64* %RBP
  %2732 = sub i64 %2731, 40
  %2733 = load i64, i64* %RAX
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 4
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2732 to i64*
  store i64 %2733, i64* %2736
  %2737 = load i64, i64* %PC
  %2738 = sub i64 %2737, 1351
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 5
  store i64 %2740, i64* %PC
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2738, i64* %2741, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2742 = load i64, i64* %RBP
  %2743 = sub i64 %2742, 12
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 7
  store i64 %2745, i64* %PC
  %2746 = inttoptr i64 %2743 to i32*
  store i32 22, i32* %2746
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 12
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 3
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  %2752 = load i32, i32* %2751
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* %RDI, align 8, !tbaa !2428
  %2754 = load i64, i64* %PC
  %2755 = sub i64 %2754, 1184
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 5
  store i64 %2759, i64* %PC
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2761 = load i64, i64* %2760, align 8, !tbaa !2428
  %2762 = add i64 %2761, -8
  %2763 = inttoptr i64 %2762 to i64*
  store i64 %2757, i64* %2763
  store i64 %2762, i64* %2760, align 8, !tbaa !2428
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2755, i64* %2764, align 8, !tbaa !2428
  %2765 = load i64, i64* %PC
  %2766 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2765, %struct.Memory* %MEMORY.0)
  %2767 = load i64, i64* %RBP
  %2768 = sub i64 %2767, 8
  %2769 = load i64, i64* %PC
  %2770 = add i64 %2769, 4
  store i64 %2770, i64* %PC
  %2771 = inttoptr i64 %2768 to i64*
  %2772 = load i64, i64* %2771
  store i64 %2772, i64* %RAX, align 8, !tbaa !2428
  %2773 = load i64, i64* %RAX
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 3
  store i64 %2775, i64* %PC
  store i64 %2773, i64* %RCX, align 8, !tbaa !2428
  %2776 = load i64, i64* %RCX
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 4
  store i64 %2778, i64* %PC
  %2779 = add i64 4, %2776
  store i64 %2779, i64* %RCX, align 8, !tbaa !2428
  %2780 = icmp ult i64 %2779, %2776
  %2781 = icmp ult i64 %2779, 4
  %2782 = or i1 %2780, %2781
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2783, i8* %2784, align 1, !tbaa !2432
  %2785 = trunc i64 %2779 to i32
  %2786 = and i32 %2785, 255
  %2787 = call i32 @llvm.ctpop.i32(i32 %2786) #16
  %2788 = trunc i32 %2787 to i8
  %2789 = and i8 %2788, 1
  %2790 = xor i8 %2789, 1
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2790, i8* %2791, align 1, !tbaa !2446
  %2792 = xor i64 4, %2776
  %2793 = xor i64 %2792, %2779
  %2794 = lshr i64 %2793, 4
  %2795 = trunc i64 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2796, i8* %2797, align 1, !tbaa !2447
  %2798 = icmp eq i64 %2779, 0
  %2799 = zext i1 %2798 to i8
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2799, i8* %2800, align 1, !tbaa !2448
  %2801 = lshr i64 %2779, 63
  %2802 = trunc i64 %2801 to i8
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2802, i8* %2803, align 1, !tbaa !2449
  %2804 = lshr i64 %2776, 63
  %2805 = xor i64 %2801, %2804
  %2806 = add nuw nsw i64 %2805, %2801
  %2807 = icmp eq i64 %2806, 2
  %2808 = zext i1 %2807 to i8
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2808, i8* %2809, align 1, !tbaa !2450
  %2810 = load i64, i64* %RBP
  %2811 = sub i64 %2810, 8
  %2812 = load i64, i64* %RCX
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 4
  store i64 %2814, i64* %PC
  %2815 = inttoptr i64 %2811 to i64*
  store i64 %2812, i64* %2815
  %2816 = load i64, i64* %RAX
  %2817 = load i64, i64* %PC
  %2818 = add i64 %2817, 3
  store i64 %2818, i64* %PC
  %2819 = inttoptr i64 %2816 to i32*
  %2820 = load i32, i32* %2819
  %2821 = sext i32 %2820 to i64
  store i64 %2821, i64* %RAX, align 8, !tbaa !2428
  %2822 = load i64, i64* %RAX
  %2823 = mul i64 %2822, 8
  %2824 = add i64 %2823, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 8
  store i64 %2826, i64* %PC
  %2827 = inttoptr i64 %2824 to i64*
  %2828 = load i64, i64* %2827
  store i64 %2828, i64* %RAX, align 8, !tbaa !2428
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 40
  %2831 = load i64, i64* %RAX
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 4
  store i64 %2833, i64* %PC
  %2834 = inttoptr i64 %2830 to i64*
  store i64 %2831, i64* %2834
  %2835 = load i64, i64* %PC
  %2836 = sub i64 %2835, 1101
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 5
  store i64 %2838, i64* %PC
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2836, i64* %2839, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %2840 = load i64, i64* %RBP
  %2841 = sub i64 %2840, 12
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 7
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2841 to i32*
  store i32 4, i32* %2844
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 12
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 3
  store i64 %2848, i64* %PC
  %2849 = inttoptr i64 %2846 to i32*
  %2850 = load i32, i32* %2849
  %2851 = zext i32 %2850 to i64
  store i64 %2851, i64* %RDI, align 8, !tbaa !2428
  %2852 = load i64, i64* %PC
  %2853 = sub i64 %2852, 284
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 5
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 5
  store i64 %2857, i64* %PC
  %2858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2859 = load i64, i64* %2858, align 8, !tbaa !2428
  %2860 = add i64 %2859, -8
  %2861 = inttoptr i64 %2860 to i64*
  store i64 %2855, i64* %2861
  store i64 %2860, i64* %2858, align 8, !tbaa !2428
  %2862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2853, i64* %2862, align 8, !tbaa !2428
  %2863 = load i64, i64* %PC
  %2864 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2863, %struct.Memory* %MEMORY.0)
  %2865 = load i64, i64* %RBP
  %2866 = sub i64 %2865, 8
  %2867 = load i64, i64* %PC
  %2868 = add i64 %2867, 4
  store i64 %2868, i64* %PC
  %2869 = inttoptr i64 %2866 to i64*
  %2870 = load i64, i64* %2869
  store i64 %2870, i64* %RAX, align 8, !tbaa !2428
  %2871 = load i64, i64* %RAX
  %2872 = load i64, i64* %PC
  %2873 = add i64 %2872, 3
  store i64 %2873, i64* %PC
  store i64 %2871, i64* %RCX, align 8, !tbaa !2428
  %2874 = load i64, i64* %RCX
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 4
  store i64 %2876, i64* %PC
  %2877 = add i64 4, %2874
  store i64 %2877, i64* %RCX, align 8, !tbaa !2428
  %2878 = icmp ult i64 %2877, %2874
  %2879 = icmp ult i64 %2877, 4
  %2880 = or i1 %2878, %2879
  %2881 = zext i1 %2880 to i8
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2881, i8* %2882, align 1, !tbaa !2432
  %2883 = trunc i64 %2877 to i32
  %2884 = and i32 %2883, 255
  %2885 = call i32 @llvm.ctpop.i32(i32 %2884) #16
  %2886 = trunc i32 %2885 to i8
  %2887 = and i8 %2886, 1
  %2888 = xor i8 %2887, 1
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2888, i8* %2889, align 1, !tbaa !2446
  %2890 = xor i64 4, %2874
  %2891 = xor i64 %2890, %2877
  %2892 = lshr i64 %2891, 4
  %2893 = trunc i64 %2892 to i8
  %2894 = and i8 %2893, 1
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2894, i8* %2895, align 1, !tbaa !2447
  %2896 = icmp eq i64 %2877, 0
  %2897 = zext i1 %2896 to i8
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2897, i8* %2898, align 1, !tbaa !2448
  %2899 = lshr i64 %2877, 63
  %2900 = trunc i64 %2899 to i8
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2900, i8* %2901, align 1, !tbaa !2449
  %2902 = lshr i64 %2874, 63
  %2903 = xor i64 %2899, %2902
  %2904 = add nuw nsw i64 %2903, %2899
  %2905 = icmp eq i64 %2904, 2
  %2906 = zext i1 %2905 to i8
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2906, i8* %2907, align 1, !tbaa !2450
  %2908 = load i64, i64* %RBP
  %2909 = sub i64 %2908, 8
  %2910 = load i64, i64* %RCX
  %2911 = load i64, i64* %PC
  %2912 = add i64 %2911, 4
  store i64 %2912, i64* %PC
  %2913 = inttoptr i64 %2909 to i64*
  store i64 %2910, i64* %2913
  %2914 = load i64, i64* %RAX
  %2915 = load i64, i64* %PC
  %2916 = add i64 %2915, 3
  store i64 %2916, i64* %PC
  %2917 = inttoptr i64 %2914 to i32*
  %2918 = load i32, i32* %2917
  %2919 = sext i32 %2918 to i64
  store i64 %2919, i64* %RAX, align 8, !tbaa !2428
  %2920 = load i64, i64* %RAX
  %2921 = mul i64 %2920, 8
  %2922 = add i64 %2921, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2923 = load i64, i64* %PC
  %2924 = add i64 %2923, 8
  store i64 %2924, i64* %PC
  %2925 = inttoptr i64 %2922 to i64*
  %2926 = load i64, i64* %2925
  store i64 %2926, i64* %RAX, align 8, !tbaa !2428
  %2927 = load i64, i64* %RBP
  %2928 = sub i64 %2927, 40
  %2929 = load i64, i64* %RAX
  %2930 = load i64, i64* %PC
  %2931 = add i64 %2930, 4
  store i64 %2931, i64* %PC
  %2932 = inttoptr i64 %2928 to i64*
  store i64 %2929, i64* %2932
  %2933 = load i64, i64* %PC
  %2934 = sub i64 %2933, 201
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 5
  store i64 %2936, i64* %PC
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2934, i64* %2937, align 8, !tbaa !2428
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %2938 = load i64, i64* %RBP
  %2939 = sub i64 %2938, 12
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 7
  store i64 %2941, i64* %PC
  %2942 = inttoptr i64 %2939 to i32*
  store i32 27, i32* %2942
  br label %block_400a87

; <label>:2943:                                   ; preds = %block_400566
  %2944 = load i64, i64* %PC
  %2945 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %2944, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %2945
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004f0_execute(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP
  %29 = sub i64 %28, 4
  %30 = load i32, i32* %EDI
  %31 = zext i32 %30 to i64
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %34
  %35 = load i64, i64* %RBP
  %36 = sub i64 %35, 4
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %36 to i32*
  %40 = load i32, i32* %39
  %41 = zext i32 %40 to i64
  store i64 %41, i64* %RDI, align 8, !tbaa !2428
  %42 = load i64, i64* %RDI
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 7
  store i64 %44, i64* %PC
  %45 = trunc i64 %42 to i32
  %46 = load i32, i32* bitcast (%sum_type* @sum to i32*)
  %47 = add i32 %46, %45
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = icmp ult i32 %47, %45
  %50 = icmp ult i32 %47, %46
  %51 = or i1 %49, %50
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %47, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i32 %46, %45
  %61 = xor i32 %60, %47
  %62 = lshr i32 %61, 4
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i32 %47, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i32 %47, 31
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i32 %45, 31
  %73 = lshr i32 %46, 31
  %74 = xor i32 %69, %72
  %75 = xor i32 %69, %73
  %76 = add nuw nsw i32 %74, %75
  %77 = icmp eq i32 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2450
  %80 = load i32, i32* %EDI
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i32 %80, i32* bitcast (%sum_type* @sum to i32*)
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 1
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RBP, align 8, !tbaa !2428
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 1
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %93, align 8, !tbaa !2428
  %98 = add i64 %95, 8
  store i64 %98, i64* %94, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400861(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400861

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.1)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.1)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 1, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 12
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 134
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %234 = load i64, i64* %233, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %230, i64* %236
  store i64 %235, i64* %233, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %237, align 8, !tbaa !2428
  %238 = load i64, i64* %PC
  %239 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.1)
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = add i64 4, %249
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = icmp ult i64 %252, %249
  %254 = icmp ult i64 %252, 4
  %255 = or i1 %253, %254
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %256, i8* %257, align 1, !tbaa !2432
  %258 = trunc i64 %252 to i32
  %259 = and i32 %258, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i64 4, %249
  %266 = xor i64 %265, %252
  %267 = lshr i64 %266, 4
  %268 = trunc i64 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i64 %252, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %252, 63
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %249, 63
  %278 = xor i64 %274, %277
  %279 = add nuw nsw i64 %278, %274
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %RCX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288
  %289 = load i64, i64* %RAX
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RAX
  %296 = mul i64 %295, 8
  %297 = add i64 %296, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 8
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 40
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %303 to i64*
  store i64 %304, i64* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 51
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 9, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %319

block_4009ea:                                     ; preds = %block_400566
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 24, i32* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 12
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 1284
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.1)
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 8
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = add i64 4, %354
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = icmp ult i64 %357, %354
  %359 = icmp ult i64 %357, 4
  %360 = or i1 %358, %359
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2432
  %363 = trunc i64 %357 to i32
  %364 = and i32 %363, 255
  %365 = call i32 @llvm.ctpop.i32(i32 %364) #16
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %368, i8* %369, align 1, !tbaa !2446
  %370 = xor i64 4, %354
  %371 = xor i64 %370, %357
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i64 %357, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i64 %357, 63
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i64 %354, 63
  %383 = xor i64 %379, %382
  %384 = add nuw nsw i64 %383, %379
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 8
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %389 to i64*
  store i64 %390, i64* %393
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = mul i64 %400, 8
  %402 = add i64 %401, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 8
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 40
  %409 = load i64, i64* %RAX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 1201
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 7
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 6, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 12
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 384
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.1)
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 8
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  store i64 %449, i64* %RCX, align 8, !tbaa !2428
  %452 = load i64, i64* %RCX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC
  %455 = add i64 4, %452
  store i64 %455, i64* %RCX, align 8, !tbaa !2428
  %456 = icmp ult i64 %455, %452
  %457 = icmp ult i64 %455, 4
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2432
  %461 = trunc i64 %455 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 4, %452
  %469 = xor i64 %468, %455
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = icmp eq i64 %455, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i64 %455, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = lshr i64 %452, 63
  %481 = xor i64 %477, %480
  %482 = add nuw nsw i64 %481, %477
  %483 = icmp eq i64 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2450
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 8
  %488 = load i64, i64* %RCX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RAX
  %499 = mul i64 %498, 8
  %500 = add i64 %499, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 8
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 40
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %506 to i64*
  store i64 %507, i64* %510
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 301
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %515, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 29, i32* %520
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 12
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 3
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %RDI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 1534
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.1)
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 8
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  store i64 %547, i64* %RCX, align 8, !tbaa !2428
  %550 = load i64, i64* %RCX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = add i64 4, %550
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %550
  %555 = icmp ult i64 %553, 4
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2432
  %559 = trunc i64 %553 to i32
  %560 = and i32 %559, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2446
  %566 = xor i64 4, %550
  %567 = xor i64 %566, %553
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2447
  %572 = icmp eq i64 %553, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2448
  %575 = lshr i64 %553, 63
  %576 = trunc i64 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = lshr i64 %550, 63
  %579 = xor i64 %575, %578
  %580 = add nuw nsw i64 %579, %575
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %582, i8* %583, align 1, !tbaa !2450
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 8
  %586 = load i64, i64* %RCX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %585 to i64*
  store i64 %586, i64* %589
  %590 = load i64, i64* %RAX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i32*
  %594 = load i32, i32* %593
  %595 = sext i32 %594 to i64
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = load i64, i64* %RAX
  %597 = mul i64 %596, 8
  %598 = add i64 %597, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 8
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i64*
  %602 = load i64, i64* %601
  store i64 %602, i64* %RAX, align 8, !tbaa !2428
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 40
  %605 = load i64, i64* %RAX
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %604 to i64*
  store i64 %605, i64* %608
  %609 = load i64, i64* %PC
  %610 = sub i64 %609, 1451
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %610, i64* %613, align 8, !tbaa !2428
  br label %block_400566

block_400861:                                     ; preds = %block_40085a, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_40085a ]
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 3
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  %619 = load i32, i32* %618
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RDI, align 8, !tbaa !2428
  %621 = load i64, i64* %PC
  %622 = sub i64 %621, 884
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %624, i64* %630
  store i64 %629, i64* %627, align 8, !tbaa !2428
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %622, i64* %631, align 8, !tbaa !2428
  %632 = load i64, i64* %PC
  %633 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %632, %struct.Memory* %MEMORY.0)
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 8
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = load i64, i64* %RAX
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 3
  store i64 %642, i64* %PC
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %643 = load i64, i64* %RCX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = add i64 4, %643
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %643
  %648 = icmp ult i64 %646, 4
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %650, i8* %651, align 1, !tbaa !2432
  %652 = trunc i64 %646 to i32
  %653 = and i32 %652, 255
  %654 = call i32 @llvm.ctpop.i32(i32 %653) #16
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  %657 = xor i8 %656, 1
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %657, i8* %658, align 1, !tbaa !2446
  %659 = xor i64 4, %643
  %660 = xor i64 %659, %646
  %661 = lshr i64 %660, 4
  %662 = trunc i64 %661 to i8
  %663 = and i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %663, i8* %664, align 1, !tbaa !2447
  %665 = icmp eq i64 %646, 0
  %666 = zext i1 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %666, i8* %667, align 1, !tbaa !2448
  %668 = lshr i64 %646, 63
  %669 = trunc i64 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %669, i8* %670, align 1, !tbaa !2449
  %671 = lshr i64 %643, 63
  %672 = xor i64 %668, %671
  %673 = add nuw nsw i64 %672, %668
  %674 = icmp eq i64 %673, 2
  %675 = zext i1 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %675, i8* %676, align 1, !tbaa !2450
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 8
  %679 = load i64, i64* %RCX
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = inttoptr i64 %678 to i64*
  store i64 %679, i64* %682
  %683 = load i64, i64* %RAX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i32*
  %687 = load i32, i32* %686
  %688 = sext i32 %687 to i64
  store i64 %688, i64* %RAX, align 8, !tbaa !2428
  %689 = load i64, i64* %RAX
  %690 = mul i64 %689, 8
  %691 = add i64 %690, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 8
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 40
  %698 = load i64, i64* %RAX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %701
  %702 = load i64, i64* %PC
  %703 = sub i64 %702, 801
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 5
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %703, i64* %706, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 12
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 7
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %708 to i32*
  store i32 11, i32* %711
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 12
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  %717 = load i32, i32* %716
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RDI, align 8, !tbaa !2428
  %719 = load i64, i64* %PC
  %720 = sub i64 %719, 634
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 5
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %726 = load i64, i64* %725, align 8, !tbaa !2428
  %727 = add i64 %726, -8
  %728 = inttoptr i64 %727 to i64*
  store i64 %722, i64* %728
  store i64 %727, i64* %725, align 8, !tbaa !2428
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %720, i64* %729, align 8, !tbaa !2428
  %730 = load i64, i64* %PC
  %731 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %730, %struct.Memory* %MEMORY.1)
  %732 = load i64, i64* %RBP
  %733 = sub i64 %732, 8
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = inttoptr i64 %733 to i64*
  %737 = load i64, i64* %736
  store i64 %737, i64* %RAX, align 8, !tbaa !2428
  %738 = load i64, i64* %RAX
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 3
  store i64 %740, i64* %PC
  store i64 %738, i64* %RCX, align 8, !tbaa !2428
  %741 = load i64, i64* %RCX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = add i64 4, %741
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %745 = icmp ult i64 %744, %741
  %746 = icmp ult i64 %744, 4
  %747 = or i1 %745, %746
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %748, i8* %749, align 1, !tbaa !2432
  %750 = trunc i64 %744 to i32
  %751 = and i32 %750, 255
  %752 = call i32 @llvm.ctpop.i32(i32 %751) #16
  %753 = trunc i32 %752 to i8
  %754 = and i8 %753, 1
  %755 = xor i8 %754, 1
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %755, i8* %756, align 1, !tbaa !2446
  %757 = xor i64 4, %741
  %758 = xor i64 %757, %744
  %759 = lshr i64 %758, 4
  %760 = trunc i64 %759 to i8
  %761 = and i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %761, i8* %762, align 1, !tbaa !2447
  %763 = icmp eq i64 %744, 0
  %764 = zext i1 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %764, i8* %765, align 1, !tbaa !2448
  %766 = lshr i64 %744, 63
  %767 = trunc i64 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %767, i8* %768, align 1, !tbaa !2449
  %769 = lshr i64 %741, 63
  %770 = xor i64 %766, %769
  %771 = add nuw nsw i64 %770, %766
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %773, i8* %774, align 1, !tbaa !2450
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 8
  %777 = load i64, i64* %RCX
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %776 to i64*
  store i64 %777, i64* %780
  %781 = load i64, i64* %RAX
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 3
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RAX
  %788 = mul i64 %787, 8
  %789 = add i64 %788, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 8
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %RAX, align 8, !tbaa !2428
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 40
  %796 = load i64, i64* %RAX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %795 to i64*
  store i64 %796, i64* %799
  %800 = load i64, i64* %PC
  %801 = sub i64 %800, 551
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %801, i64* %804, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 12
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 7
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i32*
  store i32 16, i32* %809
  br label %block_400861

block_400954:                                     ; preds = %block_400566
  %810 = load i64, i64* %RBP
  %811 = sub i64 %810, 12
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 7
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %811 to i32*
  store i32 21, i32* %814
  %815 = load i64, i64* %PC
  %816 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %815, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %816

block_400a4e:                                     ; preds = %block_400566
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 12
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 7
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  store i32 26, i32* %821
  %822 = load i64, i64* %PC
  %823 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %822, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %823

block_400b48:                                     ; preds = %block_400566
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 12
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 7
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  store i32 31, i32* %828
  %829 = load i64, i64* %PC
  %830 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %829, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %830

block_4007c4:                                     ; preds = %block_400566
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 12
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 7
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i32*
  store i32 13, i32* %835
  %836 = load i64, i64* %PC
  %837 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %837

block_400566:                                     ; preds = %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_400760, %block_400861, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %633, %block_400861 ], [ %1482, %block_40059e ], [ %1384, %block_400922 ], [ %1286, %block_400828 ], [ %1188, %block_40072e ], [ %1090, %block_400ab2 ], [ %992, %block_400634 ], [ %894, %block_4009b8 ], [ %141, %block_4008f0 ], [ %344, %block_4009ea ], [ %239, %block_40056c ], [ %43, %block_4007f6 ], [ %442, %block_400666 ], [ %540, %block_400ae4 ], [ %731, %block_400760 ], [ %1587, %block_400a1c ]
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 40
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 2
  store i64 %846, i64* %PC
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %844, i64* %847, align 8, !tbaa !2428
  %848 = load i64, i64* %PC
  switch i64 %848, label %1710 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 12
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 7
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i32*
  store i32 3, i32* %853
  %854 = load i64, i64* %PC
  %855 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %854, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %855

block_4008be:                                     ; preds = %block_400566
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 12
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 7
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i32*
  store i32 18, i32* %860
  %861 = load i64, i64* %PC
  %862 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %861, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %862

block_4006ca:                                     ; preds = %block_400566
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 12
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 7
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %864 to i32*
  store i32 8, i32* %867
  %868 = load i64, i64* %PC
  %869 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %868, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %869

block_4009b8:                                     ; preds = %block_400566
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 12
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 7
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i32*
  store i32 23, i32* %874
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 12
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RDI, align 8, !tbaa !2428
  %882 = load i64, i64* %PC
  %883 = sub i64 %882, 1234
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 5
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 5
  store i64 %887, i64* %PC
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %889 = load i64, i64* %888, align 8, !tbaa !2428
  %890 = add i64 %889, -8
  %891 = inttoptr i64 %890 to i64*
  store i64 %885, i64* %891
  store i64 %890, i64* %888, align 8, !tbaa !2428
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %883, i64* %892, align 8, !tbaa !2428
  %893 = load i64, i64* %PC
  %894 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %893, %struct.Memory* %MEMORY.1)
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 8
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %896 to i64*
  %900 = load i64, i64* %899
  store i64 %900, i64* %RAX, align 8, !tbaa !2428
  %901 = load i64, i64* %RAX
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 3
  store i64 %903, i64* %PC
  store i64 %901, i64* %RCX, align 8, !tbaa !2428
  %904 = load i64, i64* %RCX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 4
  store i64 %906, i64* %PC
  %907 = add i64 4, %904
  store i64 %907, i64* %RCX, align 8, !tbaa !2428
  %908 = icmp ult i64 %907, %904
  %909 = icmp ult i64 %907, 4
  %910 = or i1 %908, %909
  %911 = zext i1 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %911, i8* %912, align 1, !tbaa !2432
  %913 = trunc i64 %907 to i32
  %914 = and i32 %913, 255
  %915 = call i32 @llvm.ctpop.i32(i32 %914) #16
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  %918 = xor i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %918, i8* %919, align 1, !tbaa !2446
  %920 = xor i64 4, %904
  %921 = xor i64 %920, %907
  %922 = lshr i64 %921, 4
  %923 = trunc i64 %922 to i8
  %924 = and i8 %923, 1
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %924, i8* %925, align 1, !tbaa !2447
  %926 = icmp eq i64 %907, 0
  %927 = zext i1 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %927, i8* %928, align 1, !tbaa !2448
  %929 = lshr i64 %907, 63
  %930 = trunc i64 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %930, i8* %931, align 1, !tbaa !2449
  %932 = lshr i64 %904, 63
  %933 = xor i64 %929, %932
  %934 = add nuw nsw i64 %933, %929
  %935 = icmp eq i64 %934, 2
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %936, i8* %937, align 1, !tbaa !2450
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 8
  %940 = load i64, i64* %RCX
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %939 to i64*
  store i64 %940, i64* %943
  %944 = load i64, i64* %RAX
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 3
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i32*
  %948 = load i32, i32* %947
  %949 = sext i32 %948 to i64
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = load i64, i64* %RAX
  %951 = mul i64 %950, 8
  %952 = add i64 %951, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 8
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 40
  %959 = load i64, i64* %RAX
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %958 to i64*
  store i64 %959, i64* %962
  %963 = load i64, i64* %PC
  %964 = sub i64 %963, 1151
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 5
  store i64 %966, i64* %PC
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %964, i64* %967, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 12
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 7
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i32*
  store i32 5, i32* %972
  %973 = load i64, i64* %RBP
  %974 = sub i64 %973, 12
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC
  %977 = inttoptr i64 %974 to i32*
  %978 = load i32, i32* %977
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %RDI, align 8, !tbaa !2428
  %980 = load i64, i64* %PC
  %981 = sub i64 %980, 334
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 5
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 5
  store i64 %985, i64* %PC
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %987 = load i64, i64* %986, align 8, !tbaa !2428
  %988 = add i64 %987, -8
  %989 = inttoptr i64 %988 to i64*
  store i64 %983, i64* %989
  store i64 %988, i64* %986, align 8, !tbaa !2428
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %981, i64* %990, align 8, !tbaa !2428
  %991 = load i64, i64* %PC
  %992 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %991, %struct.Memory* %MEMORY.1)
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 8
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %RAX, align 8, !tbaa !2428
  %999 = load i64, i64* %RAX
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 3
  store i64 %1001, i64* %PC
  store i64 %999, i64* %RCX, align 8, !tbaa !2428
  %1002 = load i64, i64* %RCX
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 4
  store i64 %1004, i64* %PC
  %1005 = add i64 4, %1002
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = icmp ult i64 %1005, %1002
  %1007 = icmp ult i64 %1005, 4
  %1008 = or i1 %1006, %1007
  %1009 = zext i1 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1009, i8* %1010, align 1, !tbaa !2432
  %1011 = trunc i64 %1005 to i32
  %1012 = and i32 %1011, 255
  %1013 = call i32 @llvm.ctpop.i32(i32 %1012) #16
  %1014 = trunc i32 %1013 to i8
  %1015 = and i8 %1014, 1
  %1016 = xor i8 %1015, 1
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1016, i8* %1017, align 1, !tbaa !2446
  %1018 = xor i64 4, %1002
  %1019 = xor i64 %1018, %1005
  %1020 = lshr i64 %1019, 4
  %1021 = trunc i64 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1022, i8* %1023, align 1, !tbaa !2447
  %1024 = icmp eq i64 %1005, 0
  %1025 = zext i1 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1025, i8* %1026, align 1, !tbaa !2448
  %1027 = lshr i64 %1005, 63
  %1028 = trunc i64 %1027 to i8
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1028, i8* %1029, align 1, !tbaa !2449
  %1030 = lshr i64 %1002, 63
  %1031 = xor i64 %1027, %1030
  %1032 = add nuw nsw i64 %1031, %1027
  %1033 = icmp eq i64 %1032, 2
  %1034 = zext i1 %1033 to i8
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1034, i8* %1035, align 1, !tbaa !2450
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 8
  %1038 = load i64, i64* %RCX
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 4
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1037 to i64*
  store i64 %1038, i64* %1041
  %1042 = load i64, i64* %RAX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i32*
  %1046 = load i32, i32* %1045
  %1047 = sext i32 %1046 to i64
  store i64 %1047, i64* %RAX, align 8, !tbaa !2428
  %1048 = load i64, i64* %RAX
  %1049 = mul i64 %1048, 8
  %1050 = add i64 %1049, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 8
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i64*
  %1054 = load i64, i64* %1053
  store i64 %1054, i64* %RAX, align 8, !tbaa !2428
  %1055 = load i64, i64* %RBP
  %1056 = sub i64 %1055, 40
  %1057 = load i64, i64* %RAX
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1056 to i64*
  store i64 %1057, i64* %1060
  %1061 = load i64, i64* %PC
  %1062 = sub i64 %1061, 251
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  store i64 %1064, i64* %PC
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1062, i64* %1065, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 12
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 7
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i32*
  store i32 28, i32* %1070
  %1071 = load i64, i64* %RBP
  %1072 = sub i64 %1071, 12
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 3
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1072 to i32*
  %1076 = load i32, i32* %1075
  %1077 = zext i32 %1076 to i64
  store i64 %1077, i64* %RDI, align 8, !tbaa !2428
  %1078 = load i64, i64* %PC
  %1079 = sub i64 %1078, 1484
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 5
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 5
  store i64 %1083, i64* %PC
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1085 = load i64, i64* %1084, align 8, !tbaa !2428
  %1086 = add i64 %1085, -8
  %1087 = inttoptr i64 %1086 to i64*
  store i64 %1081, i64* %1087
  store i64 %1086, i64* %1084, align 8, !tbaa !2428
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1079, i64* %1088, align 8, !tbaa !2428
  %1089 = load i64, i64* %PC
  %1090 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1089, %struct.Memory* %MEMORY.1)
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 8
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 4
  store i64 %1094, i64* %PC
  %1095 = inttoptr i64 %1092 to i64*
  %1096 = load i64, i64* %1095
  store i64 %1096, i64* %RAX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RAX
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 3
  store i64 %1099, i64* %PC
  store i64 %1097, i64* %RCX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RCX
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = add i64 4, %1100
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = icmp ult i64 %1103, %1100
  %1105 = icmp ult i64 %1103, 4
  %1106 = or i1 %1104, %1105
  %1107 = zext i1 %1106 to i8
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1107, i8* %1108, align 1, !tbaa !2432
  %1109 = trunc i64 %1103 to i32
  %1110 = and i32 %1109, 255
  %1111 = call i32 @llvm.ctpop.i32(i32 %1110) #16
  %1112 = trunc i32 %1111 to i8
  %1113 = and i8 %1112, 1
  %1114 = xor i8 %1113, 1
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1114, i8* %1115, align 1, !tbaa !2446
  %1116 = xor i64 4, %1100
  %1117 = xor i64 %1116, %1103
  %1118 = lshr i64 %1117, 4
  %1119 = trunc i64 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1120, i8* %1121, align 1, !tbaa !2447
  %1122 = icmp eq i64 %1103, 0
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1123, i8* %1124, align 1, !tbaa !2448
  %1125 = lshr i64 %1103, 63
  %1126 = trunc i64 %1125 to i8
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1126, i8* %1127, align 1, !tbaa !2449
  %1128 = lshr i64 %1100, 63
  %1129 = xor i64 %1125, %1128
  %1130 = add nuw nsw i64 %1129, %1125
  %1131 = icmp eq i64 %1130, 2
  %1132 = zext i1 %1131 to i8
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1132, i8* %1133, align 1, !tbaa !2450
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 8
  %1136 = load i64, i64* %RCX
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1135 to i64*
  store i64 %1136, i64* %1139
  %1140 = load i64, i64* %RAX
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1140 to i32*
  %1144 = load i32, i32* %1143
  %1145 = sext i32 %1144 to i64
  store i64 %1145, i64* %RAX, align 8, !tbaa !2428
  %1146 = load i64, i64* %RAX
  %1147 = mul i64 %1146, 8
  %1148 = add i64 %1147, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 8
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i64*
  %1152 = load i64, i64* %1151
  store i64 %1152, i64* %RAX, align 8, !tbaa !2428
  %1153 = load i64, i64* %RBP
  %1154 = sub i64 %1153, 40
  %1155 = load i64, i64* %RAX
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 4
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1154 to i64*
  store i64 %1155, i64* %1158
  %1159 = load i64, i64* %PC
  %1160 = sub i64 %1159, 1401
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 5
  store i64 %1162, i64* %PC
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1160, i64* %1163, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1164 = load i64, i64* %RBP
  %1165 = sub i64 %1164, 12
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 7
  store i64 %1167, i64* %PC
  %1168 = inttoptr i64 %1165 to i32*
  store i32 10, i32* %1168
  %1169 = load i64, i64* %RBP
  %1170 = sub i64 %1169, 12
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 3
  store i64 %1172, i64* %PC
  %1173 = inttoptr i64 %1170 to i32*
  %1174 = load i32, i32* %1173
  %1175 = zext i32 %1174 to i64
  store i64 %1175, i64* %RDI, align 8, !tbaa !2428
  %1176 = load i64, i64* %PC
  %1177 = sub i64 %1176, 584
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 5
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 5
  store i64 %1181, i64* %PC
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1183 = load i64, i64* %1182, align 8, !tbaa !2428
  %1184 = add i64 %1183, -8
  %1185 = inttoptr i64 %1184 to i64*
  store i64 %1179, i64* %1185
  store i64 %1184, i64* %1182, align 8, !tbaa !2428
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1177, i64* %1186, align 8, !tbaa !2428
  %1187 = load i64, i64* %PC
  %1188 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1187, %struct.Memory* %MEMORY.1)
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 8
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 4
  store i64 %1192, i64* %PC
  %1193 = inttoptr i64 %1190 to i64*
  %1194 = load i64, i64* %1193
  store i64 %1194, i64* %RAX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RAX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 3
  store i64 %1197, i64* %PC
  store i64 %1195, i64* %RCX, align 8, !tbaa !2428
  %1198 = load i64, i64* %RCX
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 4
  store i64 %1200, i64* %PC
  %1201 = add i64 4, %1198
  store i64 %1201, i64* %RCX, align 8, !tbaa !2428
  %1202 = icmp ult i64 %1201, %1198
  %1203 = icmp ult i64 %1201, 4
  %1204 = or i1 %1202, %1203
  %1205 = zext i1 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1205, i8* %1206, align 1, !tbaa !2432
  %1207 = trunc i64 %1201 to i32
  %1208 = and i32 %1207, 255
  %1209 = call i32 @llvm.ctpop.i32(i32 %1208) #16
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = xor i8 %1211, 1
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1212, i8* %1213, align 1, !tbaa !2446
  %1214 = xor i64 4, %1198
  %1215 = xor i64 %1214, %1201
  %1216 = lshr i64 %1215, 4
  %1217 = trunc i64 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1218, i8* %1219, align 1, !tbaa !2447
  %1220 = icmp eq i64 %1201, 0
  %1221 = zext i1 %1220 to i8
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1221, i8* %1222, align 1, !tbaa !2448
  %1223 = lshr i64 %1201, 63
  %1224 = trunc i64 %1223 to i8
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1224, i8* %1225, align 1, !tbaa !2449
  %1226 = lshr i64 %1198, 63
  %1227 = xor i64 %1223, %1226
  %1228 = add nuw nsw i64 %1227, %1223
  %1229 = icmp eq i64 %1228, 2
  %1230 = zext i1 %1229 to i8
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1230, i8* %1231, align 1, !tbaa !2450
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 8
  %1234 = load i64, i64* %RCX
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1233 to i64*
  store i64 %1234, i64* %1237
  %1238 = load i64, i64* %RAX
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 3
  store i64 %1240, i64* %PC
  %1241 = inttoptr i64 %1238 to i32*
  %1242 = load i32, i32* %1241
  %1243 = sext i32 %1242 to i64
  store i64 %1243, i64* %RAX, align 8, !tbaa !2428
  %1244 = load i64, i64* %RAX
  %1245 = mul i64 %1244, 8
  %1246 = add i64 %1245, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 8
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1246 to i64*
  %1250 = load i64, i64* %1249
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  %1251 = load i64, i64* %RBP
  %1252 = sub i64 %1251, 40
  %1253 = load i64, i64* %RAX
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 4
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1252 to i64*
  store i64 %1253, i64* %1256
  %1257 = load i64, i64* %PC
  %1258 = sub i64 %1257, 501
  %1259 = load i64, i64* %PC
  %1260 = add i64 %1259, 5
  store i64 %1260, i64* %PC
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1258, i64* %1261, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1262 = load i64, i64* %RBP
  %1263 = sub i64 %1262, 12
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 7
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1263 to i32*
  store i32 15, i32* %1266
  %1267 = load i64, i64* %RBP
  %1268 = sub i64 %1267, 12
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 3
  store i64 %1270, i64* %PC
  %1271 = inttoptr i64 %1268 to i32*
  %1272 = load i32, i32* %1271
  %1273 = zext i32 %1272 to i64
  store i64 %1273, i64* %RDI, align 8, !tbaa !2428
  %1274 = load i64, i64* %PC
  %1275 = sub i64 %1274, 834
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 5
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 5
  store i64 %1279, i64* %PC
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1281 = load i64, i64* %1280, align 8, !tbaa !2428
  %1282 = add i64 %1281, -8
  %1283 = inttoptr i64 %1282 to i64*
  store i64 %1277, i64* %1283
  store i64 %1282, i64* %1280, align 8, !tbaa !2428
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1275, i64* %1284, align 8, !tbaa !2428
  %1285 = load i64, i64* %PC
  %1286 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1285, %struct.Memory* %MEMORY.1)
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 8
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i64*
  %1292 = load i64, i64* %1291
  store i64 %1292, i64* %RAX, align 8, !tbaa !2428
  %1293 = load i64, i64* %RAX
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 3
  store i64 %1295, i64* %PC
  store i64 %1293, i64* %RCX, align 8, !tbaa !2428
  %1296 = load i64, i64* %RCX
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 4
  store i64 %1298, i64* %PC
  %1299 = add i64 4, %1296
  store i64 %1299, i64* %RCX, align 8, !tbaa !2428
  %1300 = icmp ult i64 %1299, %1296
  %1301 = icmp ult i64 %1299, 4
  %1302 = or i1 %1300, %1301
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1303, i8* %1304, align 1, !tbaa !2432
  %1305 = trunc i64 %1299 to i32
  %1306 = and i32 %1305, 255
  %1307 = call i32 @llvm.ctpop.i32(i32 %1306) #16
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = xor i8 %1309, 1
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1310, i8* %1311, align 1, !tbaa !2446
  %1312 = xor i64 4, %1296
  %1313 = xor i64 %1312, %1299
  %1314 = lshr i64 %1313, 4
  %1315 = trunc i64 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1316, i8* %1317, align 1, !tbaa !2447
  %1318 = icmp eq i64 %1299, 0
  %1319 = zext i1 %1318 to i8
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1319, i8* %1320, align 1, !tbaa !2448
  %1321 = lshr i64 %1299, 63
  %1322 = trunc i64 %1321 to i8
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1322, i8* %1323, align 1, !tbaa !2449
  %1324 = lshr i64 %1296, 63
  %1325 = xor i64 %1321, %1324
  %1326 = add nuw nsw i64 %1325, %1321
  %1327 = icmp eq i64 %1326, 2
  %1328 = zext i1 %1327 to i8
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1328, i8* %1329, align 1, !tbaa !2450
  %1330 = load i64, i64* %RBP
  %1331 = sub i64 %1330, 8
  %1332 = load i64, i64* %RCX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 4
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1331 to i64*
  store i64 %1332, i64* %1335
  %1336 = load i64, i64* %RAX
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 3
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i32*
  %1340 = load i32, i32* %1339
  %1341 = sext i32 %1340 to i64
  store i64 %1341, i64* %RAX, align 8, !tbaa !2428
  %1342 = load i64, i64* %RAX
  %1343 = mul i64 %1342, 8
  %1344 = add i64 %1343, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 8
  store i64 %1346, i64* %PC
  %1347 = inttoptr i64 %1344 to i64*
  %1348 = load i64, i64* %1347
  store i64 %1348, i64* %RAX, align 8, !tbaa !2428
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 40
  %1351 = load i64, i64* %RAX
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 4
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1350 to i64*
  store i64 %1351, i64* %1354
  %1355 = load i64, i64* %PC
  %1356 = sub i64 %1355, 751
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 5
  store i64 %1358, i64* %PC
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1356, i64* %1359, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 12
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 7
  store i64 %1363, i64* %PC
  %1364 = inttoptr i64 %1361 to i32*
  store i32 20, i32* %1364
  %1365 = load i64, i64* %RBP
  %1366 = sub i64 %1365, 12
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 3
  store i64 %1368, i64* %PC
  %1369 = inttoptr i64 %1366 to i32*
  %1370 = load i32, i32* %1369
  %1371 = zext i32 %1370 to i64
  store i64 %1371, i64* %RDI, align 8, !tbaa !2428
  %1372 = load i64, i64* %PC
  %1373 = sub i64 %1372, 1084
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 5
  store i64 %1377, i64* %PC
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1379 = load i64, i64* %1378, align 8, !tbaa !2428
  %1380 = add i64 %1379, -8
  %1381 = inttoptr i64 %1380 to i64*
  store i64 %1375, i64* %1381
  store i64 %1380, i64* %1378, align 8, !tbaa !2428
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1373, i64* %1382, align 8, !tbaa !2428
  %1383 = load i64, i64* %PC
  %1384 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1383, %struct.Memory* %MEMORY.1)
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 8
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 4
  store i64 %1388, i64* %PC
  %1389 = inttoptr i64 %1386 to i64*
  %1390 = load i64, i64* %1389
  store i64 %1390, i64* %RAX, align 8, !tbaa !2428
  %1391 = load i64, i64* %RAX
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  store i64 %1391, i64* %RCX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RCX
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = add i64 4, %1394
  store i64 %1397, i64* %RCX, align 8, !tbaa !2428
  %1398 = icmp ult i64 %1397, %1394
  %1399 = icmp ult i64 %1397, 4
  %1400 = or i1 %1398, %1399
  %1401 = zext i1 %1400 to i8
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1401, i8* %1402, align 1, !tbaa !2432
  %1403 = trunc i64 %1397 to i32
  %1404 = and i32 %1403, 255
  %1405 = call i32 @llvm.ctpop.i32(i32 %1404) #16
  %1406 = trunc i32 %1405 to i8
  %1407 = and i8 %1406, 1
  %1408 = xor i8 %1407, 1
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1408, i8* %1409, align 1, !tbaa !2446
  %1410 = xor i64 4, %1394
  %1411 = xor i64 %1410, %1397
  %1412 = lshr i64 %1411, 4
  %1413 = trunc i64 %1412 to i8
  %1414 = and i8 %1413, 1
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1414, i8* %1415, align 1, !tbaa !2447
  %1416 = icmp eq i64 %1397, 0
  %1417 = zext i1 %1416 to i8
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1417, i8* %1418, align 1, !tbaa !2448
  %1419 = lshr i64 %1397, 63
  %1420 = trunc i64 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1420, i8* %1421, align 1, !tbaa !2449
  %1422 = lshr i64 %1394, 63
  %1423 = xor i64 %1419, %1422
  %1424 = add nuw nsw i64 %1423, %1419
  %1425 = icmp eq i64 %1424, 2
  %1426 = zext i1 %1425 to i8
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1426, i8* %1427, align 1, !tbaa !2450
  %1428 = load i64, i64* %RBP
  %1429 = sub i64 %1428, 8
  %1430 = load i64, i64* %RCX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %PC
  %1433 = inttoptr i64 %1429 to i64*
  store i64 %1430, i64* %1433
  %1434 = load i64, i64* %RAX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 3
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i32*
  %1438 = load i32, i32* %1437
  %1439 = sext i32 %1438 to i64
  store i64 %1439, i64* %RAX, align 8, !tbaa !2428
  %1440 = load i64, i64* %RAX
  %1441 = mul i64 %1440, 8
  %1442 = add i64 %1441, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 8
  store i64 %1444, i64* %PC
  %1445 = inttoptr i64 %1442 to i64*
  %1446 = load i64, i64* %1445
  store i64 %1446, i64* %RAX, align 8, !tbaa !2428
  %1447 = load i64, i64* %RBP
  %1448 = sub i64 %1447, 40
  %1449 = load i64, i64* %RAX
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 4
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1448 to i64*
  store i64 %1449, i64* %1452
  %1453 = load i64, i64* %PC
  %1454 = sub i64 %1453, 1001
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 5
  store i64 %1456, i64* %PC
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1454, i64* %1457, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1458 = load i64, i64* %RBP
  %1459 = sub i64 %1458, 12
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 7
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1459 to i32*
  store i32 2, i32* %1462
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 12
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 3
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1464 to i32*
  %1468 = load i32, i32* %1467
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RDI, align 8, !tbaa !2428
  %1470 = load i64, i64* %PC
  %1471 = sub i64 %1470, 184
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 5
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 5
  store i64 %1475, i64* %PC
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1477 = load i64, i64* %1476, align 8, !tbaa !2428
  %1478 = add i64 %1477, -8
  %1479 = inttoptr i64 %1478 to i64*
  store i64 %1473, i64* %1479
  store i64 %1478, i64* %1476, align 8, !tbaa !2428
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1471, i64* %1480, align 8, !tbaa !2428
  %1481 = load i64, i64* %PC
  %1482 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1481, %struct.Memory* %MEMORY.1)
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 8
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 4
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i64*
  %1488 = load i64, i64* %1487
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = load i64, i64* %RAX
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 3
  store i64 %1491, i64* %PC
  store i64 %1489, i64* %RCX, align 8, !tbaa !2428
  %1492 = load i64, i64* %RCX
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 4
  store i64 %1494, i64* %PC
  %1495 = add i64 4, %1492
  store i64 %1495, i64* %RCX, align 8, !tbaa !2428
  %1496 = icmp ult i64 %1495, %1492
  %1497 = icmp ult i64 %1495, 4
  %1498 = or i1 %1496, %1497
  %1499 = zext i1 %1498 to i8
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1499, i8* %1500, align 1, !tbaa !2432
  %1501 = trunc i64 %1495 to i32
  %1502 = and i32 %1501, 255
  %1503 = call i32 @llvm.ctpop.i32(i32 %1502) #16
  %1504 = trunc i32 %1503 to i8
  %1505 = and i8 %1504, 1
  %1506 = xor i8 %1505, 1
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1506, i8* %1507, align 1, !tbaa !2446
  %1508 = xor i64 4, %1492
  %1509 = xor i64 %1508, %1495
  %1510 = lshr i64 %1509, 4
  %1511 = trunc i64 %1510 to i8
  %1512 = and i8 %1511, 1
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1512, i8* %1513, align 1, !tbaa !2447
  %1514 = icmp eq i64 %1495, 0
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1515, i8* %1516, align 1, !tbaa !2448
  %1517 = lshr i64 %1495, 63
  %1518 = trunc i64 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1518, i8* %1519, align 1, !tbaa !2449
  %1520 = lshr i64 %1492, 63
  %1521 = xor i64 %1517, %1520
  %1522 = add nuw nsw i64 %1521, %1517
  %1523 = icmp eq i64 %1522, 2
  %1524 = zext i1 %1523 to i8
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1524, i8* %1525, align 1, !tbaa !2450
  %1526 = load i64, i64* %RBP
  %1527 = sub i64 %1526, 8
  %1528 = load i64, i64* %RCX
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 4
  store i64 %1530, i64* %PC
  %1531 = inttoptr i64 %1527 to i64*
  store i64 %1528, i64* %1531
  %1532 = load i64, i64* %RAX
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 3
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i32*
  %1536 = load i32, i32* %1535
  %1537 = sext i32 %1536 to i64
  store i64 %1537, i64* %RAX, align 8, !tbaa !2428
  %1538 = load i64, i64* %RAX
  %1539 = mul i64 %1538, 8
  %1540 = add i64 %1539, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 8
  store i64 %1542, i64* %PC
  %1543 = inttoptr i64 %1540 to i64*
  %1544 = load i64, i64* %1543
  store i64 %1544, i64* %RAX, align 8, !tbaa !2428
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 40
  %1547 = load i64, i64* %RAX
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = inttoptr i64 %1546 to i64*
  store i64 %1547, i64* %1550
  %1551 = load i64, i64* %PC
  %1552 = sub i64 %1551, 101
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 5
  store i64 %1554, i64* %PC
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1552, i64* %1555, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1556 = load i64, i64* %RBP
  %1557 = sub i64 %1556, 12
  %1558 = load i64, i64* %PC
  %1559 = add i64 %1558, 7
  store i64 %1559, i64* %PC
  %1560 = inttoptr i64 %1557 to i32*
  store i32 0, i32* %1560
  %1561 = load i64, i64* %PC
  %1562 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %1561, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1562

block_400a1c:                                     ; preds = %block_400566
  %1563 = load i64, i64* %RBP
  %1564 = sub i64 %1563, 12
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 7
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1564 to i32*
  store i32 25, i32* %1567
  %1568 = load i64, i64* %RBP
  %1569 = sub i64 %1568, 12
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 3
  store i64 %1571, i64* %PC
  %1572 = inttoptr i64 %1569 to i32*
  %1573 = load i32, i32* %1572
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RDI, align 8, !tbaa !2428
  %1575 = load i64, i64* %PC
  %1576 = sub i64 %1575, 1334
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 5
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 5
  store i64 %1580, i64* %PC
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1582 = load i64, i64* %1581, align 8, !tbaa !2428
  %1583 = add i64 %1582, -8
  %1584 = inttoptr i64 %1583 to i64*
  store i64 %1578, i64* %1584
  store i64 %1583, i64* %1581, align 8, !tbaa !2428
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1576, i64* %1585, align 8, !tbaa !2428
  %1586 = load i64, i64* %PC
  %1587 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1586, %struct.Memory* %MEMORY.1)
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 8
  %1590 = load i64, i64* %PC
  %1591 = add i64 %1590, 4
  store i64 %1591, i64* %PC
  %1592 = inttoptr i64 %1589 to i64*
  %1593 = load i64, i64* %1592
  store i64 %1593, i64* %RAX, align 8, !tbaa !2428
  %1594 = load i64, i64* %RAX
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 3
  store i64 %1596, i64* %PC
  store i64 %1594, i64* %RCX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RCX
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 4
  store i64 %1599, i64* %PC
  %1600 = add i64 4, %1597
  store i64 %1600, i64* %RCX, align 8, !tbaa !2428
  %1601 = icmp ult i64 %1600, %1597
  %1602 = icmp ult i64 %1600, 4
  %1603 = or i1 %1601, %1602
  %1604 = zext i1 %1603 to i8
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1604, i8* %1605, align 1, !tbaa !2432
  %1606 = trunc i64 %1600 to i32
  %1607 = and i32 %1606, 255
  %1608 = call i32 @llvm.ctpop.i32(i32 %1607) #16
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = xor i8 %1610, 1
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1611, i8* %1612, align 1, !tbaa !2446
  %1613 = xor i64 4, %1597
  %1614 = xor i64 %1613, %1600
  %1615 = lshr i64 %1614, 4
  %1616 = trunc i64 %1615 to i8
  %1617 = and i8 %1616, 1
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1617, i8* %1618, align 1, !tbaa !2447
  %1619 = icmp eq i64 %1600, 0
  %1620 = zext i1 %1619 to i8
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1620, i8* %1621, align 1, !tbaa !2448
  %1622 = lshr i64 %1600, 63
  %1623 = trunc i64 %1622 to i8
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1623, i8* %1624, align 1, !tbaa !2449
  %1625 = lshr i64 %1597, 63
  %1626 = xor i64 %1622, %1625
  %1627 = add nuw nsw i64 %1626, %1622
  %1628 = icmp eq i64 %1627, 2
  %1629 = zext i1 %1628 to i8
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1629, i8* %1630, align 1, !tbaa !2450
  %1631 = load i64, i64* %RBP
  %1632 = sub i64 %1631, 8
  %1633 = load i64, i64* %RCX
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 4
  store i64 %1635, i64* %PC
  %1636 = inttoptr i64 %1632 to i64*
  store i64 %1633, i64* %1636
  %1637 = load i64, i64* %RAX
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 3
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1637 to i32*
  %1641 = load i32, i32* %1640
  %1642 = sext i32 %1641 to i64
  store i64 %1642, i64* %RAX, align 8, !tbaa !2428
  %1643 = load i64, i64* %RAX
  %1644 = mul i64 %1643, 8
  %1645 = add i64 %1644, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 8
  store i64 %1647, i64* %PC
  %1648 = inttoptr i64 %1645 to i64*
  %1649 = load i64, i64* %1648
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = load i64, i64* %RBP
  %1651 = sub i64 %1650, 40
  %1652 = load i64, i64* %RAX
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 4
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1651 to i64*
  store i64 %1652, i64* %1655
  %1656 = load i64, i64* %PC
  %1657 = sub i64 %1656, 1251
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 5
  store i64 %1659, i64* %PC
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1657, i64* %1660, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %1661 = load i64, i64* %RBP
  %1662 = sub i64 %1661, 12
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 7
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1662 to i32*
  store i32 7, i32* %1665
  %1666 = load i64, i64* %PC
  %1667 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %1666, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1667

block_400b16:                                     ; preds = %block_400566
  %1668 = load i64, i64* %RBP
  %1669 = sub i64 %1668, 12
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 7
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1669 to i32*
  store i32 30, i32* %1672
  %1673 = load i64, i64* %PC
  %1674 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1673, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1674

block_400792:                                     ; preds = %block_400566
  %1675 = load i64, i64* %RBP
  %1676 = sub i64 %1675, 12
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 7
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i32*
  store i32 12, i32* %1679
  %1680 = load i64, i64* %PC
  %1681 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1680, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1681

block_40088c:                                     ; preds = %block_400566
  %1682 = load i64, i64* %RBP
  %1683 = sub i64 %1682, 12
  %1684 = load i64, i64* %PC
  %1685 = add i64 %1684, 7
  store i64 %1685, i64* %PC
  %1686 = inttoptr i64 %1683 to i32*
  store i32 17, i32* %1686
  %1687 = load i64, i64* %PC
  %1688 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1687, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1688

block_400986:                                     ; preds = %block_400566
  %1689 = load i64, i64* %RBP
  %1690 = sub i64 %1689, 12
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 7
  store i64 %1692, i64* %PC
  %1693 = inttoptr i64 %1690 to i32*
  store i32 22, i32* %1693
  %1694 = load i64, i64* %PC
  %1695 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1694, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1695

block_400602:                                     ; preds = %block_400566
  %1696 = load i64, i64* %RBP
  %1697 = sub i64 %1696, 12
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 7
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1697 to i32*
  store i32 4, i32* %1700
  %1701 = load i64, i64* %PC
  %1702 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1701, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1702

block_400a80:                                     ; preds = %block_400566
  %1703 = load i64, i64* %RBP
  %1704 = sub i64 %1703, 12
  %1705 = load i64, i64* %PC
  %1706 = add i64 %1705, 7
  store i64 %1706, i64* %PC
  %1707 = inttoptr i64 %1704 to i32*
  store i32 27, i32* %1707
  %1708 = load i64, i64* %PC
  %1709 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1708, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1709

; <label>:1710:                                   ; preds = %block_400566
  %1711 = load i64, i64* %PC
  %1712 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1711, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %1712
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 8224
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 8224
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 8224, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  store i32 2048, i32* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 8212
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 10
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  store i32 0, i32* %99
  br label %block_400ba3

block_400c35:                                     ; preds = %block_400c05
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 10
  store i64 %101, i64* %PC
  store i64 add (i64 ptrtoint (%seg_400ce0__rodata_type* @seg_400ce0__rodata to i64), i64 264), i64* %RDI, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 7
  store i64 %103, i64* %PC
  %104 = load i32, i32* bitcast (%sum_type* @sum to i32*)
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %108 = load i64, i64* %PC
  %109 = sub i64 %108, 2136
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %111, i64* %117
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %109, i64* %118, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = call %struct.Memory* @ext_602138_printf(%struct.State* %0, i64 %119, %struct.Memory* %MEMORY.0)
  %121 = load i64, i64* %RSI
  %122 = load i32, i32* %ESI
  %123 = zext i32 %122 to i64
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 2
  store i64 %125, i64* %PC
  %126 = xor i64 %123, %121
  %127 = trunc i64 %126 to i32
  %128 = and i64 %126, 4294967295
  store i64 %128, i64* %RSI, align 8, !tbaa !2428
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %129, align 1, !tbaa !2432
  %130 = and i32 %127, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = icmp eq i32 %127, 0
  %137 = zext i1 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = lshr i32 %127, 31
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %140, i8* %141, align 1, !tbaa !2449
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %142, align 1, !tbaa !2450
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %143, align 1, !tbaa !2447
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 8224
  %146 = load i32, i32* %EAX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 6
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %145 to i32*
  store i32 %146, i32* %150
  %151 = load i32, i32* %ESI
  %152 = zext i32 %151 to i64
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = and i64 %152, 4294967295
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RSP
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = add i64 8224, %156
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  %160 = icmp ult i64 %159, %156
  %161 = icmp ult i64 %159, 8224
  %162 = or i1 %160, %161
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2432
  %165 = trunc i64 %159 to i32
  %166 = and i32 %165, 255
  %167 = call i32 @llvm.ctpop.i32(i32 %166) #16
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %170, i8* %171, align 1, !tbaa !2446
  %172 = xor i64 8224, %156
  %173 = xor i64 %172, %159
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = icmp eq i64 %159, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = lshr i64 %159, 63
  %182 = trunc i64 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2449
  %184 = lshr i64 %156, 63
  %185 = xor i64 %181, %184
  %186 = add nuw nsw i64 %185, %181
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %188, i8* %189, align 1, !tbaa !2450
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 1
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %199, align 8, !tbaa !2428
  %204 = add i64 %201, 8
  store i64 %204, i64* %200, align 8, !tbaa !2428
  ret %struct.Memory* %120

block_400bf4:                                     ; preds = %block_400ba3
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 20
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  store i32 0, i32* %209
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 8216
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 10
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  store i32 0, i32* %214
  br label %block_400c05

block_400c15:                                     ; preds = %block_400c05
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 8208
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %219 = load i64, i64* %PC
  %220 = sub i64 %219, 1804
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 5
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 5
  store i64 %224, i64* %PC
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %226 = load i64, i64* %225, align 8, !tbaa !2428
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  store i64 %222, i64* %228
  store i64 %227, i64* %225, align 8, !tbaa !2428
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %220, i64* %229, align 8, !tbaa !2428
  %230 = load i64, i64* %PC
  %231 = call %struct.Memory* @sub_400510_eval_renamed_(%struct.State* %0, i64 %230, %struct.Memory* %MEMORY.0)
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 8216
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = trunc i64 %239 to i32
  %243 = add i32 1, %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = icmp ult i32 %243, %242
  %246 = icmp ult i32 %243, 1
  %247 = or i1 %245, %246
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %243, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 1, %239
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, %243
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2447
  %263 = icmp eq i32 %243, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = lshr i32 %243, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i32 %242, 31
  %270 = xor i32 %266, %269
  %271 = add nuw nsw i32 %270, %266
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8216
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 6
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 43
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_400c05

block_400bb3:                                     ; preds = %block_400ba3
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  store i64 31, i64* %RAX, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 8212
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 6
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 8220
  %298 = load i32, i32* %EAX
  %299 = zext i32 %298 to i64
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %297 to i32*
  store i32 %298, i32* %302
  %303 = load i32, i32* %ECX
  %304 = zext i32 %303 to i64
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 2
  store i64 %306, i64* %PC
  %307 = and i64 %304, 4294967295
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 1
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %312 = bitcast %union.anon* %311 to i32*
  %313 = load i32, i32* %312, align 8, !tbaa !2452
  %314 = sext i32 %313 to i64
  %315 = lshr i64 %314, 32
  store i64 %315, i64* %310, align 8, !tbaa !2428
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8220
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 6
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = zext i32 %321 to i64
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = load i32, i32* %ECX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 2
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %328 = bitcast %union.anon* %327 to i32*
  %329 = load i32, i32* %328, align 8, !tbaa !2452
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %332 = bitcast %union.anon* %331 to i32*
  %333 = load i32, i32* %332, align 8, !tbaa !2452
  %334 = zext i32 %333 to i64
  %335 = shl i64 %324, 32
  %336 = ashr exact i64 %335, 32
  %337 = shl nuw i64 %334, 32
  %338 = or i64 %337, %330
  %339 = sdiv i64 %338, %336
  %340 = shl i64 %339, 32
  %341 = ashr exact i64 %340, 32
  %342 = icmp eq i64 %339, %341
  br i1 %342, label %347, label %343

; <label>:343:                                    ; preds = %block_400bb3
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %345 = load i64, i64* %344, align 8, !tbaa !2428
  %346 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %345, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:347:                                    ; preds = %block_400bb3
  %348 = srem i64 %338, %336
  %349 = getelementptr inbounds %union.anon, %union.anon* %327, i64 0, i32 0
  %350 = and i64 %339, 4294967295
  store i64 %350, i64* %349, align 8, !tbaa !2428
  %351 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %352 = and i64 %348, 4294967295
  store i64 %352, i64* %351, align 8, !tbaa !2428
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %353, align 1, !tbaa !2432
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %354, align 1, !tbaa !2446
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %355, align 1, !tbaa !2447
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %356, align 1, !tbaa !2448
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %357, align 1, !tbaa !2449
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %358, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %343, %347
  %359 = phi %struct.Memory* [ %346, %343 ], [ %MEMORY.1, %347 ]
  %360 = load i64, i64* %RDX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = trunc i64 %360 to i32
  %364 = add i32 1, %363
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RDX, align 8, !tbaa !2428
  %366 = icmp ult i32 %364, %363
  %367 = icmp ult i32 %364, 1
  %368 = or i1 %366, %367
  %369 = zext i1 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %369, i8* %370, align 1, !tbaa !2432
  %371 = and i32 %364, 255
  %372 = call i32 @llvm.ctpop.i32(i32 %371) #16
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %375, i8* %376, align 1, !tbaa !2446
  %377 = xor i64 1, %360
  %378 = trunc i64 %377 to i32
  %379 = xor i32 %378, %364
  %380 = lshr i32 %379, 4
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %382, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i32 %364, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = lshr i32 %364, 31
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %388, i8* %389, align 1, !tbaa !2449
  %390 = lshr i32 %363, 31
  %391 = xor i32 %387, %390
  %392 = add nuw nsw i32 %391, %387
  %393 = icmp eq i32 %392, 2
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %394, i8* %395, align 1, !tbaa !2450
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 8212
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 7
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = load i64, i64* %RBP
  %404 = load i64, i64* %RSI
  %405 = mul i64 %404, 4
  %406 = add i64 %403, -8208
  %407 = add i64 %406, %405
  %408 = load i32, i32* %EDX
  %409 = zext i32 %408 to i64
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %412
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 8212
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 6
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %414 to i32*
  %418 = load i32, i32* %417
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RAX, align 8, !tbaa !2428
  %420 = load i64, i64* %RAX
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = trunc i64 %420 to i32
  %424 = add i32 1, %423
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = icmp ult i32 %424, %423
  %427 = icmp ult i32 %424, 1
  %428 = or i1 %426, %427
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %429, i8* %430, align 1, !tbaa !2432
  %431 = and i32 %424, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 1, %420
  %438 = trunc i64 %437 to i32
  %439 = xor i32 %438, %424
  %440 = lshr i32 %439, 4
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %442, i8* %443, align 1, !tbaa !2447
  %444 = icmp eq i32 %424, 0
  %445 = zext i1 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = lshr i32 %424, 31
  %448 = trunc i32 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %423, 31
  %451 = xor i32 %447, %450
  %452 = add nuw nsw i32 %451, %447
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %454, i8* %455, align 1, !tbaa !2450
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 8212
  %458 = load i32, i32* %EAX
  %459 = zext i32 %458 to i64
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 6
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %457 to i32*
  store i32 %458, i32* %462
  %463 = load i64, i64* %PC
  %464 = sub i64 %463, 76
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 5
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %464, i64* %467, align 8, !tbaa !2428
  br label %block_400ba3

block_400c05:                                     ; preds = %block_400c15, %block_400bf4
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400bf4 ], [ %231, %block_400c15 ]
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 8216
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 10
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %469 to i32*
  %473 = load i32, i32* %472
  %474 = sub i32 %473, 100000
  %475 = icmp ult i32 %473, 100000
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %476, i8* %477, align 1, !tbaa !2432
  %478 = and i32 %474, 255
  %479 = call i32 @llvm.ctpop.i32(i32 %478) #16
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %482, i8* %483, align 1, !tbaa !2446
  %484 = xor i32 %473, 100000
  %485 = xor i32 %484, %474
  %486 = lshr i32 %485, 4
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %488, i8* %489, align 1, !tbaa !2447
  %490 = icmp eq i32 %474, 0
  %491 = zext i1 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %491, i8* %492, align 1, !tbaa !2448
  %493 = lshr i32 %474, 31
  %494 = trunc i32 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %494, i8* %495, align 1, !tbaa !2449
  %496 = lshr i32 %473, 31
  %497 = xor i32 %493, %496
  %498 = add nuw nsw i32 %497, %496
  %499 = icmp eq i32 %498, 2
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %500, i8* %501, align 1, !tbaa !2450
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 38
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 6
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 6
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %509 = load i8, i8* %508, align 1, !tbaa !2449
  %510 = icmp ne i8 %509, 0
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %512 = load i8, i8* %511, align 1, !tbaa !2450
  %513 = icmp ne i8 %512, 0
  %514 = xor i1 %510, %513
  %515 = xor i1 %514, true
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %518 = select i1 %514, i64 %505, i64 %503
  store i64 %518, i64* %517, align 8, !tbaa !2428
  %519 = load i8, i8* %BRANCH_TAKEN
  %520 = icmp eq i8 %519, 1
  br i1 %520, label %block_400c35, label %block_400c15

block_400ba3:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400b80
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400b80 ], [ %359, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 8212
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 10
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = sub i32 %526, 2047
  %528 = icmp ult i32 %526, 2047
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = and i32 %527, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = xor i32 %526, 2047
  %538 = xor i32 %537, %527
  %539 = lshr i32 %538, 4
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %541, i8* %542, align 1, !tbaa !2447
  %543 = icmp eq i32 %527, 0
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %544, i8* %545, align 1, !tbaa !2448
  %546 = lshr i32 %527, 31
  %547 = trunc i32 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %547, i8* %548, align 1, !tbaa !2449
  %549 = lshr i32 %526, 31
  %550 = xor i32 %546, %549
  %551 = add nuw nsw i32 %550, %549
  %552 = icmp eq i32 %551, 2
  %553 = zext i1 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %553, i8* %554, align 1, !tbaa !2450
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 71
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 6
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 6
  store i64 %560, i64* %PC
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %562 = load i8, i8* %561, align 1, !tbaa !2449
  %563 = icmp ne i8 %562, 0
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %565 = load i8, i8* %564, align 1, !tbaa !2450
  %566 = icmp ne i8 %565, 0
  %567 = xor i1 %563, %566
  %568 = xor i1 %567, true
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %571 = select i1 %567, i64 %558, i64 %556
  store i64 %571, i64* %570, align 8, !tbaa !2428
  %572 = load i8, i8* %BRANCH_TAKEN
  %573 = icmp eq i8 %572, 1
  br i1 %573, label %block_400bf4, label %block_400bb3
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4004a8, label %block_400493

block_40049d:                                     ; preds = %block_400493
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195498, label %block_4004aa
    i64 4195493, label %block_4004a5
  ]

block_4004aa:                                     ; preds = %block_40049d
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_400493:                                     ; preds = %block_400470
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4004a8, label %block_40049d

block_4004a8:                                     ; preds = %block_4004a5, %block_400493, %block_400470
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400470 ], [ %2, %block_400493 ], [ %2, %block_4004a5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004a5:                                     ; preds = %block_40049d
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4004a8

; <label>:270:                                    ; preds = %block_40049d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_40082f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_40082f

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %25

block_4007f6:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 14, i32* %30
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 12
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  %35 = inttoptr i64 %32 to i32*
  %36 = load i32, i32* %35
  %37 = zext i32 %36 to i64
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %38 = load i64, i64* %PC
  %39 = sub i64 %38, 784
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 5
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 5
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %39, i64* %48, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %49, %struct.Memory* %MEMORY.0)
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = load i64, i64* %RAX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RCX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = add i64 4, %60
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 4
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 4, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RCX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RAX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = mul i64 %106, 8
  %108 = add i64 %107, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 8
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 40
  %115 = load i64, i64* %RAX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %PC
  %120 = sub i64 %119, 701
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %120, i64* %123, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  store i32 24, i32* %128
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 12
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i32*
  %134 = load i32, i32* %133
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = load i64, i64* %PC
  %137 = sub i64 %136, 1284
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 5
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = add i64 %143, -8
  %145 = inttoptr i64 %144 to i64*
  store i64 %139, i64* %145
  store i64 %144, i64* %142, align 8, !tbaa !2428
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %137, i64* %146, align 8, !tbaa !2428
  %147 = load i64, i64* %PC
  %148 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %147, %struct.Memory* %MEMORY.0)
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 8
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = load i64, i64* %RAX
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %158 = load i64, i64* %RCX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = add i64 4, %158
  store i64 %161, i64* %RCX, align 8, !tbaa !2428
  %162 = icmp ult i64 %161, %158
  %163 = icmp ult i64 %161, 4
  %164 = or i1 %162, %163
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %165, i8* %166, align 1, !tbaa !2432
  %167 = trunc i64 %161 to i32
  %168 = and i32 %167, 255
  %169 = call i32 @llvm.ctpop.i32(i32 %168) #16
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %172, i8* %173, align 1, !tbaa !2446
  %174 = xor i64 4, %158
  %175 = xor i64 %174, %161
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %178, i8* %179, align 1, !tbaa !2447
  %180 = icmp eq i64 %161, 0
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %181, i8* %182, align 1, !tbaa !2448
  %183 = lshr i64 %161, 63
  %184 = trunc i64 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i64 %158, 63
  %187 = xor i64 %183, %186
  %188 = add nuw nsw i64 %187, %183
  %189 = icmp eq i64 %188, 2
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %190, i8* %191, align 1, !tbaa !2450
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %RCX
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197
  %198 = load i64, i64* %RAX
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i32*
  %202 = load i32, i32* %201
  %203 = sext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = mul i64 %204, 8
  %206 = add i64 %205, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 8
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 40
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %212 to i64*
  store i64 %213, i64* %216
  %217 = load i64, i64* %PC
  %218 = sub i64 %217, 1201
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %218, i64* %221, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 29, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %228

block_4005d0:                                     ; preds = %block_400566
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 3, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %235

block_4007c4:                                     ; preds = %block_400566
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 13, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %242

block_4008be:                                     ; preds = %block_400566
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 18, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %249

block_40059e:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 2, i32* %254
  %255 = load i64, i64* %PC
  %256 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %255, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %256

block_400698:                                     ; preds = %block_400566
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  store i32 7, i32* %261
  %262 = load i64, i64* %PC
  %263 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %262, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %263

block_400792:                                     ; preds = %block_400566
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 12
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 7
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  store i32 12, i32* %268
  %269 = load i64, i64* %PC
  %270 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %270

block_40088c:                                     ; preds = %block_400566
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 17, i32* %275
  %276 = load i64, i64* %PC
  %277 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %276, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %277

block_400986:                                     ; preds = %block_400566
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 7
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  store i32 22, i32* %282
  %283 = load i64, i64* %PC
  %284 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %283, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %284

block_400a80:                                     ; preds = %block_400566
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 12
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 7
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i32*
  store i32 27, i32* %289
  %290 = load i64, i64* %PC
  %291 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %290, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %291

block_4008f0:                                     ; preds = %block_400566
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 12
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 7
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i32*
  store i32 19, i32* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 12
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RDI, align 8, !tbaa !2428
  %304 = load i64, i64* %PC
  %305 = sub i64 %304, 1034
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %307, i64* %313
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %305, i64* %314, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %315, %struct.Memory* %MEMORY.0)
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 8
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  store i64 %323, i64* %RCX, align 8, !tbaa !2428
  %326 = load i64, i64* %RCX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = add i64 4, %326
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = icmp ult i64 %329, %326
  %331 = icmp ult i64 %329, 4
  %332 = or i1 %330, %331
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %333, i8* %334, align 1, !tbaa !2432
  %335 = trunc i64 %329 to i32
  %336 = and i32 %335, 255
  %337 = call i32 @llvm.ctpop.i32(i32 %336) #16
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %340, i8* %341, align 1, !tbaa !2446
  %342 = xor i64 4, %326
  %343 = xor i64 %342, %329
  %344 = lshr i64 %343, 4
  %345 = trunc i64 %344 to i8
  %346 = and i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = icmp eq i64 %329, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = lshr i64 %329, 63
  %352 = trunc i64 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2449
  %354 = lshr i64 %326, 63
  %355 = xor i64 %351, %354
  %356 = add nuw nsw i64 %355, %351
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %358, i8* %359, align 1, !tbaa !2450
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 8
  %362 = load i64, i64* %RCX
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %361 to i64*
  store i64 %362, i64* %365
  %366 = load i64, i64* %RAX
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 3
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RAX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 8
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RBP
  %380 = sub i64 %379, 40
  %381 = load i64, i64* %RAX
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %380 to i64*
  store i64 %381, i64* %384
  %385 = load i64, i64* %PC
  %386 = sub i64 %385, 951
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  store i32 1, i32* %394
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 12
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i32*
  %400 = load i32, i32* %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = sub i64 %402, 134
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 5
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 5
  store i64 %407, i64* %PC
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %409 = load i64, i64* %408, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %405, i64* %411
  store i64 %410, i64* %408, align 8, !tbaa !2428
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %403, i64* %412, align 8, !tbaa !2428
  %413 = load i64, i64* %PC
  %414 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.0)
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 8
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i64*
  %420 = load i64, i64* %419
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = load i64, i64* %RAX
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 3
  store i64 %423, i64* %PC
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %424 = load i64, i64* %RCX
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 4, %424
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 4
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 4, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 8
  %460 = load i64, i64* %RCX
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %459 to i64*
  store i64 %460, i64* %463
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RAX
  %471 = mul i64 %470, 8
  %472 = add i64 %471, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 8
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 40
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %478 to i64*
  store i64 %479, i64* %482
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 51
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  store i64 %486, i64* %PC
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %487, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 12
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i32*
  store i32 6, i32* %492
  %493 = load i64, i64* %PC
  %494 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %493, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %494

block_400566:                                     ; preds = %block_40072e, %block_40082f, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_4008f0, %block_4009ea, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %861, %block_40082f ], [ %572, %block_4009b8 ], [ %316, %block_4008f0 ], [ %50, %block_4007f6 ], [ %148, %block_4009ea ], [ %414, %block_40056c ], [ %670, %block_400ab2 ], [ %768, %block_400634 ], [ %959, %block_40072e ]
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 40
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 2
  store i64 %503, i64* %PC
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %501, i64* %504, align 8, !tbaa !2428
  %505 = load i64, i64* %PC
  switch i64 %505, label %1073 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196292, label %block_4007c4
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400760:                                     ; preds = %block_400566
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 11, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %512

block_40085a:                                     ; preds = %block_400566
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 16, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %519

block_400954:                                     ; preds = %block_400566
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 21, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %526

block_400559:                                     ; preds = %block_400566
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 12
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 7
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 0, i32* %531
  %532 = load i64, i64* %PC
  %533 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %532, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %533

block_400a4e:                                     ; preds = %block_400566
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 12
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 7
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  store i32 26, i32* %538
  %539 = load i64, i64* %PC
  %540 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %540

block_400b48:                                     ; preds = %block_400566
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 12
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 7
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i32*
  store i32 31, i32* %545
  %546 = load i64, i64* %PC
  %547 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %546, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %547

block_4009b8:                                     ; preds = %block_400566
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 12
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 7
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  store i32 23, i32* %552
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 12
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %560 = load i64, i64* %PC
  %561 = sub i64 %560, 1234
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %567 = load i64, i64* %566, align 8, !tbaa !2428
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %563, i64* %569
  store i64 %568, i64* %566, align 8, !tbaa !2428
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %561, i64* %570, align 8, !tbaa !2428
  %571 = load i64, i64* %PC
  %572 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %571, %struct.Memory* %MEMORY.0)
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 8
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 4
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i64*
  %578 = load i64, i64* %577
  store i64 %578, i64* %RAX, align 8, !tbaa !2428
  %579 = load i64, i64* %RAX
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %582 = load i64, i64* %RCX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = add i64 4, %582
  store i64 %585, i64* %RCX, align 8, !tbaa !2428
  %586 = icmp ult i64 %585, %582
  %587 = icmp ult i64 %585, 4
  %588 = or i1 %586, %587
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %589, i8* %590, align 1, !tbaa !2432
  %591 = trunc i64 %585 to i32
  %592 = and i32 %591, 255
  %593 = call i32 @llvm.ctpop.i32(i32 %592) #16
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %596, i8* %597, align 1, !tbaa !2446
  %598 = xor i64 4, %582
  %599 = xor i64 %598, %585
  %600 = lshr i64 %599, 4
  %601 = trunc i64 %600 to i8
  %602 = and i8 %601, 1
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %602, i8* %603, align 1, !tbaa !2447
  %604 = icmp eq i64 %585, 0
  %605 = zext i1 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %605, i8* %606, align 1, !tbaa !2448
  %607 = lshr i64 %585, 63
  %608 = trunc i64 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %608, i8* %609, align 1, !tbaa !2449
  %610 = lshr i64 %582, 63
  %611 = xor i64 %607, %610
  %612 = add nuw nsw i64 %611, %607
  %613 = icmp eq i64 %612, 2
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %614, i8* %615, align 1, !tbaa !2450
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 8
  %618 = load i64, i64* %RCX
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %617 to i64*
  store i64 %618, i64* %621
  %622 = load i64, i64* %RAX
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 3
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  store i64 %627, i64* %RAX, align 8, !tbaa !2428
  %628 = load i64, i64* %RAX
  %629 = mul i64 %628, 8
  %630 = add i64 %629, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 8
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %RAX, align 8, !tbaa !2428
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 40
  %637 = load i64, i64* %RAX
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 4
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %636 to i64*
  store i64 %637, i64* %640
  %641 = load i64, i64* %PC
  %642 = sub i64 %641, 1151
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 5
  store i64 %644, i64* %PC
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %642, i64* %645, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 12
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 7
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  store i32 28, i32* %650
  %651 = load i64, i64* %RBP
  %652 = sub i64 %651, 12
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 3
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i32*
  %656 = load i32, i32* %655
  %657 = zext i32 %656 to i64
  store i64 %657, i64* %RDI, align 8, !tbaa !2428
  %658 = load i64, i64* %PC
  %659 = sub i64 %658, 1484
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 5
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %665 = load i64, i64* %664, align 8, !tbaa !2428
  %666 = add i64 %665, -8
  %667 = inttoptr i64 %666 to i64*
  store i64 %661, i64* %667
  store i64 %666, i64* %664, align 8, !tbaa !2428
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %659, i64* %668, align 8, !tbaa !2428
  %669 = load i64, i64* %PC
  %670 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %669, %struct.Memory* %MEMORY.0)
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 8
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 4
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %672 to i64*
  %676 = load i64, i64* %675
  store i64 %676, i64* %RAX, align 8, !tbaa !2428
  %677 = load i64, i64* %RAX
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  store i64 %677, i64* %RCX, align 8, !tbaa !2428
  %680 = load i64, i64* %RCX
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = add i64 4, %680
  store i64 %683, i64* %RCX, align 8, !tbaa !2428
  %684 = icmp ult i64 %683, %680
  %685 = icmp ult i64 %683, 4
  %686 = or i1 %684, %685
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %687, i8* %688, align 1, !tbaa !2432
  %689 = trunc i64 %683 to i32
  %690 = and i32 %689, 255
  %691 = call i32 @llvm.ctpop.i32(i32 %690) #16
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %694, i8* %695, align 1, !tbaa !2446
  %696 = xor i64 4, %680
  %697 = xor i64 %696, %683
  %698 = lshr i64 %697, 4
  %699 = trunc i64 %698 to i8
  %700 = and i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %700, i8* %701, align 1, !tbaa !2447
  %702 = icmp eq i64 %683, 0
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %703, i8* %704, align 1, !tbaa !2448
  %705 = lshr i64 %683, 63
  %706 = trunc i64 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %706, i8* %707, align 1, !tbaa !2449
  %708 = lshr i64 %680, 63
  %709 = xor i64 %705, %708
  %710 = add nuw nsw i64 %709, %705
  %711 = icmp eq i64 %710, 2
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %712, i8* %713, align 1, !tbaa !2450
  %714 = load i64, i64* %RBP
  %715 = sub i64 %714, 8
  %716 = load i64, i64* %RCX
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %715 to i64*
  store i64 %716, i64* %719
  %720 = load i64, i64* %RAX
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 3
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  %724 = load i32, i32* %723
  %725 = sext i32 %724 to i64
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = load i64, i64* %RAX
  %727 = mul i64 %726, 8
  %728 = add i64 %727, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 8
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 40
  %735 = load i64, i64* %RAX
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %734 to i64*
  store i64 %735, i64* %738
  %739 = load i64, i64* %PC
  %740 = sub i64 %739, 1401
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %740, i64* %743, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 12
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 7
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  store i32 5, i32* %748
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 12
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDI, align 8, !tbaa !2428
  %756 = load i64, i64* %PC
  %757 = sub i64 %756, 334
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %763 = load i64, i64* %762, align 8, !tbaa !2428
  %764 = add i64 %763, -8
  %765 = inttoptr i64 %764 to i64*
  store i64 %759, i64* %765
  store i64 %764, i64* %762, align 8, !tbaa !2428
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %757, i64* %766, align 8, !tbaa !2428
  %767 = load i64, i64* %PC
  %768 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %767, %struct.Memory* %MEMORY.0)
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 8
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 4
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RAX
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  store i64 %775, i64* %RCX, align 8, !tbaa !2428
  %778 = load i64, i64* %RCX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 4
  store i64 %780, i64* %PC
  %781 = add i64 4, %778
  store i64 %781, i64* %RCX, align 8, !tbaa !2428
  %782 = icmp ult i64 %781, %778
  %783 = icmp ult i64 %781, 4
  %784 = or i1 %782, %783
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %785, i8* %786, align 1, !tbaa !2432
  %787 = trunc i64 %781 to i32
  %788 = and i32 %787, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i64 4, %778
  %795 = xor i64 %794, %781
  %796 = lshr i64 %795, 4
  %797 = trunc i64 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i64 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i64 %781, 63
  %804 = trunc i64 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i64 %778, 63
  %807 = xor i64 %803, %806
  %808 = add nuw nsw i64 %807, %803
  %809 = icmp eq i64 %808, 2
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %810, i8* %811, align 1, !tbaa !2450
  %812 = load i64, i64* %RBP
  %813 = sub i64 %812, 8
  %814 = load i64, i64* %RCX
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %813 to i64*
  store i64 %814, i64* %817
  %818 = load i64, i64* %RAX
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 3
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  store i64 %823, i64* %RAX, align 8, !tbaa !2428
  %824 = load i64, i64* %RAX
  %825 = mul i64 %824, 8
  %826 = add i64 %825, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 8
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i64*
  %830 = load i64, i64* %829
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 40
  %833 = load i64, i64* %RAX
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %832 to i64*
  store i64 %833, i64* %836
  %837 = load i64, i64* %PC
  %838 = sub i64 %837, 251
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  store i64 %840, i64* %PC
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %838, i64* %841, align 8, !tbaa !2428
  br label %block_400566

block_40082f:                                     ; preds = %block_400828, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400828 ]
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 12
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 3
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  %847 = load i32, i32* %846
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RDI, align 8, !tbaa !2428
  %849 = load i64, i64* %PC
  %850 = sub i64 %849, 834
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 5
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 5
  store i64 %854, i64* %PC
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %856 = load i64, i64* %855, align 8, !tbaa !2428
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %852, i64* %858
  store i64 %857, i64* %855, align 8, !tbaa !2428
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %850, i64* %859, align 8, !tbaa !2428
  %860 = load i64, i64* %PC
  %861 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %860, %struct.Memory* %MEMORY.1)
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 8
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = load i64, i64* %RAX
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %871 = load i64, i64* %RCX
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 4
  store i64 %873, i64* %PC
  %874 = add i64 4, %871
  store i64 %874, i64* %RCX, align 8, !tbaa !2428
  %875 = icmp ult i64 %874, %871
  %876 = icmp ult i64 %874, 4
  %877 = or i1 %875, %876
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %878, i8* %879, align 1, !tbaa !2432
  %880 = trunc i64 %874 to i32
  %881 = and i32 %880, 255
  %882 = call i32 @llvm.ctpop.i32(i32 %881) #16
  %883 = trunc i32 %882 to i8
  %884 = and i8 %883, 1
  %885 = xor i8 %884, 1
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %885, i8* %886, align 1, !tbaa !2446
  %887 = xor i64 4, %871
  %888 = xor i64 %887, %874
  %889 = lshr i64 %888, 4
  %890 = trunc i64 %889 to i8
  %891 = and i8 %890, 1
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %891, i8* %892, align 1, !tbaa !2447
  %893 = icmp eq i64 %874, 0
  %894 = zext i1 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %894, i8* %895, align 1, !tbaa !2448
  %896 = lshr i64 %874, 63
  %897 = trunc i64 %896 to i8
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %897, i8* %898, align 1, !tbaa !2449
  %899 = lshr i64 %871, 63
  %900 = xor i64 %896, %899
  %901 = add nuw nsw i64 %900, %896
  %902 = icmp eq i64 %901, 2
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %903, i8* %904, align 1, !tbaa !2450
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 8
  %907 = load i64, i64* %RCX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %906 to i64*
  store i64 %907, i64* %910
  %911 = load i64, i64* %RAX
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 3
  store i64 %913, i64* %PC
  %914 = inttoptr i64 %911 to i32*
  %915 = load i32, i32* %914
  %916 = sext i32 %915 to i64
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = load i64, i64* %RAX
  %918 = mul i64 %917, 8
  %919 = add i64 %918, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 8
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i64*
  %923 = load i64, i64* %922
  store i64 %923, i64* %RAX, align 8, !tbaa !2428
  %924 = load i64, i64* %RBP
  %925 = sub i64 %924, 40
  %926 = load i64, i64* %RAX
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %925 to i64*
  store i64 %926, i64* %929
  %930 = load i64, i64* %PC
  %931 = sub i64 %930, 751
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %931, i64* %934, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %935 = load i64, i64* %RBP
  %936 = sub i64 %935, 12
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 7
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to i32*
  store i32 10, i32* %939
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 12
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = zext i32 %945 to i64
  store i64 %946, i64* %RDI, align 8, !tbaa !2428
  %947 = load i64, i64* %PC
  %948 = sub i64 %947, 584
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 5
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 5
  store i64 %952, i64* %PC
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %954 = load i64, i64* %953, align 8, !tbaa !2428
  %955 = add i64 %954, -8
  %956 = inttoptr i64 %955 to i64*
  store i64 %950, i64* %956
  store i64 %955, i64* %953, align 8, !tbaa !2428
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %948, i64* %957, align 8, !tbaa !2428
  %958 = load i64, i64* %PC
  %959 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %958, %struct.Memory* %MEMORY.0)
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 8
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 4
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i64*
  %965 = load i64, i64* %964
  store i64 %965, i64* %RAX, align 8, !tbaa !2428
  %966 = load i64, i64* %RAX
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC
  store i64 %966, i64* %RCX, align 8, !tbaa !2428
  %969 = load i64, i64* %RCX
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 4
  store i64 %971, i64* %PC
  %972 = add i64 4, %969
  store i64 %972, i64* %RCX, align 8, !tbaa !2428
  %973 = icmp ult i64 %972, %969
  %974 = icmp ult i64 %972, 4
  %975 = or i1 %973, %974
  %976 = zext i1 %975 to i8
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %976, i8* %977, align 1, !tbaa !2432
  %978 = trunc i64 %972 to i32
  %979 = and i32 %978, 255
  %980 = call i32 @llvm.ctpop.i32(i32 %979) #16
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = xor i8 %982, 1
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %983, i8* %984, align 1, !tbaa !2446
  %985 = xor i64 4, %969
  %986 = xor i64 %985, %972
  %987 = lshr i64 %986, 4
  %988 = trunc i64 %987 to i8
  %989 = and i8 %988, 1
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %989, i8* %990, align 1, !tbaa !2447
  %991 = icmp eq i64 %972, 0
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %992, i8* %993, align 1, !tbaa !2448
  %994 = lshr i64 %972, 63
  %995 = trunc i64 %994 to i8
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %995, i8* %996, align 1, !tbaa !2449
  %997 = lshr i64 %969, 63
  %998 = xor i64 %994, %997
  %999 = add nuw nsw i64 %998, %994
  %1000 = icmp eq i64 %999, 2
  %1001 = zext i1 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1001, i8* %1002, align 1, !tbaa !2450
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 8
  %1005 = load i64, i64* %RCX
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 4
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1004 to i64*
  store i64 %1005, i64* %1008
  %1009 = load i64, i64* %RAX
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 3
  store i64 %1011, i64* %PC
  %1012 = inttoptr i64 %1009 to i32*
  %1013 = load i32, i32* %1012
  %1014 = sext i32 %1013 to i64
  store i64 %1014, i64* %RAX, align 8, !tbaa !2428
  %1015 = load i64, i64* %RAX
  %1016 = mul i64 %1015, 8
  %1017 = add i64 %1016, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 8
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to i64*
  %1021 = load i64, i64* %1020
  store i64 %1021, i64* %RAX, align 8, !tbaa !2428
  %1022 = load i64, i64* %RBP
  %1023 = sub i64 %1022, 40
  %1024 = load i64, i64* %RAX
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 4
  store i64 %1026, i64* %PC
  %1027 = inttoptr i64 %1023 to i64*
  store i64 %1024, i64* %1027
  %1028 = load i64, i64* %PC
  %1029 = sub i64 %1028, 501
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 5
  store i64 %1031, i64* %PC
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1029, i64* %1032, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1033 = load i64, i64* %RBP
  %1034 = sub i64 %1033, 12
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 7
  store i64 %1036, i64* %PC
  %1037 = inttoptr i64 %1034 to i32*
  store i32 15, i32* %1037
  br label %block_40082f

block_4006ca:                                     ; preds = %block_400566
  %1038 = load i64, i64* %RBP
  %1039 = sub i64 %1038, 12
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 7
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i32*
  store i32 8, i32* %1042
  %1043 = load i64, i64* %PC
  %1044 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %1043, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1044

block_400922:                                     ; preds = %block_400566
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 12
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 7
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  store i32 20, i32* %1049
  %1050 = load i64, i64* %PC
  %1051 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %1050, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1051

block_400a1c:                                     ; preds = %block_400566
  %1052 = load i64, i64* %RBP
  %1053 = sub i64 %1052, 12
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 7
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to i32*
  store i32 25, i32* %1056
  %1057 = load i64, i64* %PC
  %1058 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %1057, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1058

block_400b16:                                     ; preds = %block_400566
  %1059 = load i64, i64* %RBP
  %1060 = sub i64 %1059, 12
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 7
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1060 to i32*
  store i32 30, i32* %1063
  %1064 = load i64, i64* %PC
  %1065 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1064, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1065

block_400602:                                     ; preds = %block_400566
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 12
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 7
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i32*
  store i32 4, i32* %1070
  %1071 = load i64, i64* %PC
  %1072 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1071, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1072

; <label>:1073:                                   ; preds = %block_400566
  %1074 = load i64, i64* %PC
  %1075 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1074, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1075
}

; Function Attrs: noinline
define %struct.Memory* @sub_400440_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400440:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400468, label %block_400451

block_40045b:                                     ; preds = %block_400451
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195434, label %block_40046a
    i64 4195427, label %block_400463
  ]

block_400451:                                     ; preds = %block_400440
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400468, label %block_40045b

block_400468:                                     ; preds = %block_400463, %block_400451, %block_400440
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400440 ], [ %2, %block_400451 ], [ %2, %block_400463 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40046a:                                     ; preds = %block_40045b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400463:                                     ; preds = %block_40045b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400468

; <label>:163:                                    ; preds = %block_40045b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009f1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_4009f1

block_4006fc:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 9, i32* %23
  %24 = load i64, i64* %PC
  %25 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %24, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %25

block_4007f6:                                     ; preds = %block_400566
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 12
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 7
  store i64 %29, i64* %PC
  %30 = inttoptr i64 %27 to i32*
  store i32 14, i32* %30
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 12
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC
  %35 = inttoptr i64 %32 to i32*
  %36 = load i32, i32* %35
  %37 = zext i32 %36 to i64
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %38 = load i64, i64* %PC
  %39 = sub i64 %38, 784
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 5
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 5
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %39, i64* %48, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %49, %struct.Memory* %MEMORY.1)
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = load i64, i64* %RAX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RCX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = add i64 4, %60
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 4
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 4, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RCX
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RAX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RAX
  %107 = mul i64 %106, 8
  %108 = add i64 %107, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 8
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 40
  %115 = load i64, i64* %RAX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %PC
  %120 = sub i64 %119, 701
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %120, i64* %123, align 8, !tbaa !2428
  br label %block_400566

block_4009f1:                                     ; preds = %block_4009ea, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4009ea ]
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %131 = load i64, i64* %PC
  %132 = sub i64 %131, 1284
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %134, i64* %140
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %132, i64* %141, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %142, %struct.Memory* %MEMORY.0)
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 8
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = load i64, i64* %RAX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %153 = load i64, i64* %RCX
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = add i64 4, %153
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = icmp ult i64 %156, %153
  %158 = icmp ult i64 %156, 4
  %159 = or i1 %157, %158
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %161, align 1, !tbaa !2432
  %162 = trunc i64 %156 to i32
  %163 = and i32 %162, 255
  %164 = call i32 @llvm.ctpop.i32(i32 %163) #16
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %167, i8* %168, align 1, !tbaa !2446
  %169 = xor i64 4, %153
  %170 = xor i64 %169, %156
  %171 = lshr i64 %170, 4
  %172 = trunc i64 %171 to i8
  %173 = and i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %173, i8* %174, align 1, !tbaa !2447
  %175 = icmp eq i64 %156, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = lshr i64 %156, 63
  %179 = trunc i64 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = lshr i64 %153, 63
  %182 = xor i64 %178, %181
  %183 = add nuw nsw i64 %182, %178
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %185, i8* %186, align 1, !tbaa !2450
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 8
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192
  %193 = load i64, i64* %RAX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = mul i64 %199, 8
  %201 = add i64 %200, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 8
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 40
  %208 = load i64, i64* %RAX
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %207 to i64*
  store i64 %208, i64* %211
  %212 = load i64, i64* %PC
  %213 = sub i64 %212, 1201
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 12
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i32*
  store i32 24, i32* %221
  br label %block_4009f1

block_400ae4:                                     ; preds = %block_400566
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 12
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 29, i32* %226
  %227 = load i64, i64* %PC
  %228 = tail call %struct.Memory* @sub_400aeb(%struct.State* %0, i64 %227, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %228

block_4005d0:                                     ; preds = %block_400566
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  store i32 3, i32* %233
  %234 = load i64, i64* %PC
  %235 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %234, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %235

block_4007c4:                                     ; preds = %block_400566
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 12
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 13, i32* %240
  %241 = load i64, i64* %PC
  %242 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %241, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %242

block_4008be:                                     ; preds = %block_400566
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 12
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  store i32 18, i32* %247
  %248 = load i64, i64* %PC
  %249 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %249

block_40059e:                                     ; preds = %block_400566
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 12
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  store i32 2, i32* %254
  %255 = load i64, i64* %PC
  %256 = tail call %struct.Memory* @sub_4005a5(%struct.State* %0, i64 %255, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %256

block_400698:                                     ; preds = %block_400566
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 7
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  store i32 7, i32* %261
  %262 = load i64, i64* %PC
  %263 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %262, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %263

block_400792:                                     ; preds = %block_400566
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 12
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 7
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  store i32 12, i32* %268
  %269 = load i64, i64* %PC
  %270 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %270

block_40088c:                                     ; preds = %block_400566
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 12
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 7
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  store i32 17, i32* %275
  %276 = load i64, i64* %PC
  %277 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %276, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %277

block_400986:                                     ; preds = %block_400566
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 7
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  store i32 22, i32* %282
  %283 = load i64, i64* %PC
  %284 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %283, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %284

block_400a80:                                     ; preds = %block_400566
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 12
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 7
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i32*
  store i32 27, i32* %289
  %290 = load i64, i64* %PC
  %291 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %290, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %291

block_4008f0:                                     ; preds = %block_400566
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 12
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 7
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i32*
  store i32 19, i32* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 12
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RDI, align 8, !tbaa !2428
  %304 = load i64, i64* %PC
  %305 = sub i64 %304, 1034
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %307, i64* %313
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %305, i64* %314, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %315, %struct.Memory* %MEMORY.1)
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 8
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  store i64 %323, i64* %RCX, align 8, !tbaa !2428
  %326 = load i64, i64* %RCX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = add i64 4, %326
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = icmp ult i64 %329, %326
  %331 = icmp ult i64 %329, 4
  %332 = or i1 %330, %331
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %333, i8* %334, align 1, !tbaa !2432
  %335 = trunc i64 %329 to i32
  %336 = and i32 %335, 255
  %337 = call i32 @llvm.ctpop.i32(i32 %336) #16
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %340, i8* %341, align 1, !tbaa !2446
  %342 = xor i64 4, %326
  %343 = xor i64 %342, %329
  %344 = lshr i64 %343, 4
  %345 = trunc i64 %344 to i8
  %346 = and i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = icmp eq i64 %329, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = lshr i64 %329, 63
  %352 = trunc i64 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2449
  %354 = lshr i64 %326, 63
  %355 = xor i64 %351, %354
  %356 = add nuw nsw i64 %355, %351
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %358, i8* %359, align 1, !tbaa !2450
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 8
  %362 = load i64, i64* %RCX
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %361 to i64*
  store i64 %362, i64* %365
  %366 = load i64, i64* %RAX
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 3
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RAX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 8
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RBP
  %380 = sub i64 %379, 40
  %381 = load i64, i64* %RAX
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %380 to i64*
  store i64 %381, i64* %384
  %385 = load i64, i64* %PC
  %386 = sub i64 %385, 951
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  store i32 1, i32* %394
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 12
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i32*
  %400 = load i32, i32* %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = sub i64 %402, 134
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 5
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 5
  store i64 %407, i64* %PC
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %409 = load i64, i64* %408, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %405, i64* %411
  store i64 %410, i64* %408, align 8, !tbaa !2428
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %403, i64* %412, align 8, !tbaa !2428
  %413 = load i64, i64* %PC
  %414 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %413, %struct.Memory* %MEMORY.1)
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 8
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i64*
  %420 = load i64, i64* %419
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = load i64, i64* %RAX
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 3
  store i64 %423, i64* %PC
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %424 = load i64, i64* %RCX
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 4, %424
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 4
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 4, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 8
  %460 = load i64, i64* %RCX
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %459 to i64*
  store i64 %460, i64* %463
  %464 = load i64, i64* %RAX
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RAX
  %471 = mul i64 %470, 8
  %472 = add i64 %471, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 8
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 40
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %478 to i64*
  store i64 %479, i64* %482
  %483 = load i64, i64* %PC
  %484 = sub i64 %483, 51
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 5
  store i64 %486, i64* %PC
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %484, i64* %487, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_40072e, %block_400634, %block_400ab2, %block_4009b8, %block_40056c, %block_4008f0, %block_4009f1, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %143, %block_4009f1 ], [ %572, %block_4009b8 ], [ %316, %block_4008f0 ], [ %50, %block_4007f6 ], [ %414, %block_40056c ], [ %670, %block_400ab2 ], [ %768, %block_400634 ], [ %866, %block_40072e ]
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 40
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 2
  store i64 %496, i64* %PC
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %494, i64* %497, align 8, !tbaa !2428
  %498 = load i64, i64* %PC
  switch i64 %498, label %982 [
    i64 4195842, label %block_400602
    i64 4197142, label %block_400b16
    i64 4196892, label %block_400a1c
    i64 4196642, label %block_400922
    i64 4196042, label %block_4006ca
    i64 4196392, label %block_400828
    i64 4196142, label %block_40072e
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196092, label %block_4006fc
    i64 4196242, label %block_400792
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4195742, label %block_40059e
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196292, label %block_4007c4
    i64 4195992, label %block_400698
    i64 4196542, label %block_4008be
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196492, label %block_40088c
    i64 4196742, label %block_400986
    i64 4196992, label %block_400a80
    i64 4196592, label %block_4008f0
    i64 4196192, label %block_400760
    i64 4196442, label %block_40085a
    i64 4196692, label %block_400954
    i64 4197192, label %block_400b48
    i64 4196792, label %block_4009b8
  ]

block_400666:                                     ; preds = %block_400566
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 12
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  store i32 6, i32* %503
  %504 = load i64, i64* %PC
  %505 = tail call %struct.Memory* @sub_40066d(%struct.State* %0, i64 %504, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %505

block_400760:                                     ; preds = %block_400566
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 12
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 7
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i32*
  store i32 11, i32* %510
  %511 = load i64, i64* %PC
  %512 = tail call %struct.Memory* @sub_400767(%struct.State* %0, i64 %511, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %512

block_40085a:                                     ; preds = %block_400566
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 12
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 7
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  store i32 16, i32* %517
  %518 = load i64, i64* %PC
  %519 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %518, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %519

block_400954:                                     ; preds = %block_400566
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 12
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  store i32 21, i32* %524
  %525 = load i64, i64* %PC
  %526 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %525, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %526

block_400559:                                     ; preds = %block_400566
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 12
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 7
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 0, i32* %531
  %532 = load i64, i64* %PC
  %533 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %532, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %533

block_400a4e:                                     ; preds = %block_400566
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 12
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 7
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  store i32 26, i32* %538
  %539 = load i64, i64* %PC
  %540 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %540

block_400b48:                                     ; preds = %block_400566
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 12
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 7
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i32*
  store i32 31, i32* %545
  %546 = load i64, i64* %PC
  %547 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %546, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %547

block_4009b8:                                     ; preds = %block_400566
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 12
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 7
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  store i32 23, i32* %552
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 12
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %560 = load i64, i64* %PC
  %561 = sub i64 %560, 1234
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %567 = load i64, i64* %566, align 8, !tbaa !2428
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %563, i64* %569
  store i64 %568, i64* %566, align 8, !tbaa !2428
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %561, i64* %570, align 8, !tbaa !2428
  %571 = load i64, i64* %PC
  %572 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %571, %struct.Memory* %MEMORY.1)
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 8
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 4
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i64*
  %578 = load i64, i64* %577
  store i64 %578, i64* %RAX, align 8, !tbaa !2428
  %579 = load i64, i64* %RAX
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %582 = load i64, i64* %RCX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = add i64 4, %582
  store i64 %585, i64* %RCX, align 8, !tbaa !2428
  %586 = icmp ult i64 %585, %582
  %587 = icmp ult i64 %585, 4
  %588 = or i1 %586, %587
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %589, i8* %590, align 1, !tbaa !2432
  %591 = trunc i64 %585 to i32
  %592 = and i32 %591, 255
  %593 = call i32 @llvm.ctpop.i32(i32 %592) #16
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %596, i8* %597, align 1, !tbaa !2446
  %598 = xor i64 4, %582
  %599 = xor i64 %598, %585
  %600 = lshr i64 %599, 4
  %601 = trunc i64 %600 to i8
  %602 = and i8 %601, 1
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %602, i8* %603, align 1, !tbaa !2447
  %604 = icmp eq i64 %585, 0
  %605 = zext i1 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %605, i8* %606, align 1, !tbaa !2448
  %607 = lshr i64 %585, 63
  %608 = trunc i64 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %608, i8* %609, align 1, !tbaa !2449
  %610 = lshr i64 %582, 63
  %611 = xor i64 %607, %610
  %612 = add nuw nsw i64 %611, %607
  %613 = icmp eq i64 %612, 2
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %614, i8* %615, align 1, !tbaa !2450
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 8
  %618 = load i64, i64* %RCX
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %617 to i64*
  store i64 %618, i64* %621
  %622 = load i64, i64* %RAX
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 3
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  store i64 %627, i64* %RAX, align 8, !tbaa !2428
  %628 = load i64, i64* %RAX
  %629 = mul i64 %628, 8
  %630 = add i64 %629, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 8
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %RAX, align 8, !tbaa !2428
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 40
  %637 = load i64, i64* %RAX
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 4
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %636 to i64*
  store i64 %637, i64* %640
  %641 = load i64, i64* %PC
  %642 = sub i64 %641, 1151
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 5
  store i64 %644, i64* %PC
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %642, i64* %645, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 12
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 7
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  store i32 28, i32* %650
  %651 = load i64, i64* %RBP
  %652 = sub i64 %651, 12
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 3
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i32*
  %656 = load i32, i32* %655
  %657 = zext i32 %656 to i64
  store i64 %657, i64* %RDI, align 8, !tbaa !2428
  %658 = load i64, i64* %PC
  %659 = sub i64 %658, 1484
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 5
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %665 = load i64, i64* %664, align 8, !tbaa !2428
  %666 = add i64 %665, -8
  %667 = inttoptr i64 %666 to i64*
  store i64 %661, i64* %667
  store i64 %666, i64* %664, align 8, !tbaa !2428
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %659, i64* %668, align 8, !tbaa !2428
  %669 = load i64, i64* %PC
  %670 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %669, %struct.Memory* %MEMORY.1)
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 8
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 4
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %672 to i64*
  %676 = load i64, i64* %675
  store i64 %676, i64* %RAX, align 8, !tbaa !2428
  %677 = load i64, i64* %RAX
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  store i64 %677, i64* %RCX, align 8, !tbaa !2428
  %680 = load i64, i64* %RCX
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = add i64 4, %680
  store i64 %683, i64* %RCX, align 8, !tbaa !2428
  %684 = icmp ult i64 %683, %680
  %685 = icmp ult i64 %683, 4
  %686 = or i1 %684, %685
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %687, i8* %688, align 1, !tbaa !2432
  %689 = trunc i64 %683 to i32
  %690 = and i32 %689, 255
  %691 = call i32 @llvm.ctpop.i32(i32 %690) #16
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %694, i8* %695, align 1, !tbaa !2446
  %696 = xor i64 4, %680
  %697 = xor i64 %696, %683
  %698 = lshr i64 %697, 4
  %699 = trunc i64 %698 to i8
  %700 = and i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %700, i8* %701, align 1, !tbaa !2447
  %702 = icmp eq i64 %683, 0
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %703, i8* %704, align 1, !tbaa !2448
  %705 = lshr i64 %683, 63
  %706 = trunc i64 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %706, i8* %707, align 1, !tbaa !2449
  %708 = lshr i64 %680, 63
  %709 = xor i64 %705, %708
  %710 = add nuw nsw i64 %709, %705
  %711 = icmp eq i64 %710, 2
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %712, i8* %713, align 1, !tbaa !2450
  %714 = load i64, i64* %RBP
  %715 = sub i64 %714, 8
  %716 = load i64, i64* %RCX
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %715 to i64*
  store i64 %716, i64* %719
  %720 = load i64, i64* %RAX
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 3
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  %724 = load i32, i32* %723
  %725 = sext i32 %724 to i64
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = load i64, i64* %RAX
  %727 = mul i64 %726, 8
  %728 = add i64 %727, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 8
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 40
  %735 = load i64, i64* %RAX
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %734 to i64*
  store i64 %735, i64* %738
  %739 = load i64, i64* %PC
  %740 = sub i64 %739, 1401
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %740, i64* %743, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 12
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 7
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  store i32 5, i32* %748
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 12
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDI, align 8, !tbaa !2428
  %756 = load i64, i64* %PC
  %757 = sub i64 %756, 334
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %763 = load i64, i64* %762, align 8, !tbaa !2428
  %764 = add i64 %763, -8
  %765 = inttoptr i64 %764 to i64*
  store i64 %759, i64* %765
  store i64 %764, i64* %762, align 8, !tbaa !2428
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %757, i64* %766, align 8, !tbaa !2428
  %767 = load i64, i64* %PC
  %768 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %767, %struct.Memory* %MEMORY.1)
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 8
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 4
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RAX
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  store i64 %775, i64* %RCX, align 8, !tbaa !2428
  %778 = load i64, i64* %RCX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 4
  store i64 %780, i64* %PC
  %781 = add i64 4, %778
  store i64 %781, i64* %RCX, align 8, !tbaa !2428
  %782 = icmp ult i64 %781, %778
  %783 = icmp ult i64 %781, 4
  %784 = or i1 %782, %783
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %785, i8* %786, align 1, !tbaa !2432
  %787 = trunc i64 %781 to i32
  %788 = and i32 %787, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i64 4, %778
  %795 = xor i64 %794, %781
  %796 = lshr i64 %795, 4
  %797 = trunc i64 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i64 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i64 %781, 63
  %804 = trunc i64 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i64 %778, 63
  %807 = xor i64 %803, %806
  %808 = add nuw nsw i64 %807, %803
  %809 = icmp eq i64 %808, 2
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %810, i8* %811, align 1, !tbaa !2450
  %812 = load i64, i64* %RBP
  %813 = sub i64 %812, 8
  %814 = load i64, i64* %RCX
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %813 to i64*
  store i64 %814, i64* %817
  %818 = load i64, i64* %RAX
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 3
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  store i64 %823, i64* %RAX, align 8, !tbaa !2428
  %824 = load i64, i64* %RAX
  %825 = mul i64 %824, 8
  %826 = add i64 %825, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 8
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i64*
  %830 = load i64, i64* %829
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 40
  %833 = load i64, i64* %RAX
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %832 to i64*
  store i64 %833, i64* %836
  %837 = load i64, i64* %PC
  %838 = sub i64 %837, 251
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 5
  store i64 %840, i64* %PC
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %838, i64* %841, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 12
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 7
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  store i32 10, i32* %846
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 12
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = load i64, i64* %PC
  %855 = sub i64 %854, 584
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %861 = load i64, i64* %860, align 8, !tbaa !2428
  %862 = add i64 %861, -8
  %863 = inttoptr i64 %862 to i64*
  store i64 %857, i64* %863
  store i64 %862, i64* %860, align 8, !tbaa !2428
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %864, align 8, !tbaa !2428
  %865 = load i64, i64* %PC
  %866 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %865, %struct.Memory* %MEMORY.1)
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 8
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = load i64, i64* %RAX
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 3
  store i64 %875, i64* %PC
  store i64 %873, i64* %RCX, align 8, !tbaa !2428
  %876 = load i64, i64* %RCX
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC
  %879 = add i64 4, %876
  store i64 %879, i64* %RCX, align 8, !tbaa !2428
  %880 = icmp ult i64 %879, %876
  %881 = icmp ult i64 %879, 4
  %882 = or i1 %880, %881
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %883, i8* %884, align 1, !tbaa !2432
  %885 = trunc i64 %879 to i32
  %886 = and i32 %885, 255
  %887 = call i32 @llvm.ctpop.i32(i32 %886) #16
  %888 = trunc i32 %887 to i8
  %889 = and i8 %888, 1
  %890 = xor i8 %889, 1
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %890, i8* %891, align 1, !tbaa !2446
  %892 = xor i64 4, %876
  %893 = xor i64 %892, %879
  %894 = lshr i64 %893, 4
  %895 = trunc i64 %894 to i8
  %896 = and i8 %895, 1
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %896, i8* %897, align 1, !tbaa !2447
  %898 = icmp eq i64 %879, 0
  %899 = zext i1 %898 to i8
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %899, i8* %900, align 1, !tbaa !2448
  %901 = lshr i64 %879, 63
  %902 = trunc i64 %901 to i8
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %902, i8* %903, align 1, !tbaa !2449
  %904 = lshr i64 %876, 63
  %905 = xor i64 %901, %904
  %906 = add nuw nsw i64 %905, %901
  %907 = icmp eq i64 %906, 2
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %908, i8* %909, align 1, !tbaa !2450
  %910 = load i64, i64* %RBP
  %911 = sub i64 %910, 8
  %912 = load i64, i64* %RCX
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %911 to i64*
  store i64 %912, i64* %915
  %916 = load i64, i64* %RAX
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 3
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %916 to i32*
  %920 = load i32, i32* %919
  %921 = sext i32 %920 to i64
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = load i64, i64* %RAX
  %923 = mul i64 %922, 8
  %924 = add i64 %923, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 8
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927
  store i64 %928, i64* %RAX, align 8, !tbaa !2428
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 40
  %931 = load i64, i64* %RAX
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 4
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %930 to i64*
  store i64 %931, i64* %934
  %935 = load i64, i64* %PC
  %936 = sub i64 %935, 501
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %936, i64* %939, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 12
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 7
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  store i32 15, i32* %944
  %945 = load i64, i64* %PC
  %946 = tail call %struct.Memory* @sub_40082f(%struct.State* %0, i64 %945, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %946

block_4006ca:                                     ; preds = %block_400566
  %947 = load i64, i64* %RBP
  %948 = sub i64 %947, 12
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 7
  store i64 %950, i64* %PC
  %951 = inttoptr i64 %948 to i32*
  store i32 8, i32* %951
  %952 = load i64, i64* %PC
  %953 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %952, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %953

block_400922:                                     ; preds = %block_400566
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 12
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 7
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  store i32 20, i32* %958
  %959 = load i64, i64* %PC
  %960 = tail call %struct.Memory* @sub_400929(%struct.State* %0, i64 %959, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %960

block_400a1c:                                     ; preds = %block_400566
  %961 = load i64, i64* %RBP
  %962 = sub i64 %961, 12
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 7
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to i32*
  store i32 25, i32* %965
  %966 = load i64, i64* %PC
  %967 = tail call %struct.Memory* @sub_400a23(%struct.State* %0, i64 %966, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %967

block_400b16:                                     ; preds = %block_400566
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 12
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 7
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i32*
  store i32 30, i32* %972
  %973 = load i64, i64* %PC
  %974 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %973, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %974

block_400602:                                     ; preds = %block_400566
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 12
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  store i32 4, i32* %979
  %980 = load i64, i64* %PC
  %981 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %980, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %981

; <label>:982:                                    ; preds = %block_400566
  %983 = load i64, i64* %PC
  %984 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %983, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %984
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a23(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RBP = bitcast %union.anon* %18 to i64*
  br label %block_400a23

block_4007f6:                                     ; preds = %block_400566
  %19 = load i64, i64* %RBP
  %20 = sub i64 %19, 12
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 7
  store i64 %22, i64* %PC
  %23 = inttoptr i64 %20 to i32*
  store i32 14, i32* %23
  %24 = load i64, i64* %RBP
  %25 = sub i64 %24, 12
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = sub i64 %31, 784
  %33 = load i64, i64* %PC
  %34 = add i64 %33, 5
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 5
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %32, i64* %41, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %42, %struct.Memory* %MEMORY.0)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 8
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = load i64, i64* %RAX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RCX, align 8, !tbaa !2428
  %53 = load i64, i64* %RCX
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = add i64 4, %53
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = icmp ult i64 %56, %53
  %58 = icmp ult i64 %56, 4
  %59 = or i1 %57, %58
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %56 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #16
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 4, %53
  %70 = xor i64 %69, %56
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %56, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %56, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %53, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %78
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 8
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = mul i64 %99, 8
  %101 = add i64 %100, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 8
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 40
  %108 = load i64, i64* %RAX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 701
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %116, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 12
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 19, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 12
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 1034
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  store i64 %134, i64* %PC
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !2428
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %132, i64* %138
  store i64 %137, i64* %135, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %139, align 8, !tbaa !2428
  %140 = load i64, i64* %PC
  %141 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %140, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = load i64, i64* %RAX
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %RCX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = add i64 4, %151
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ult i64 %154, %151
  %156 = icmp ult i64 %154, 4
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = trunc i64 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #16
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2446
  %167 = xor i64 4, %151
  %168 = xor i64 %167, %154
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i64 %154, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i64 %154, 63
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i64 %151, 63
  %180 = xor i64 %176, %179
  %181 = add nuw nsw i64 %180, %176
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 8
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = mul i64 %197, 8
  %199 = add i64 %198, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 8
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 40
  %206 = load i64, i64* %RAX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %PC
  %211 = sub i64 %210, 951
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %211, i64* %214, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  store i32 1, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 12
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 134
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %234 = load i64, i64* %233, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %230, i64* %236
  store i64 %235, i64* %233, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %237, align 8, !tbaa !2428
  %238 = load i64, i64* %PC
  %239 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %238, %struct.Memory* %MEMORY.0)
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = add i64 4, %249
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = icmp ult i64 %252, %249
  %254 = icmp ult i64 %252, 4
  %255 = or i1 %253, %254
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %256, i8* %257, align 1, !tbaa !2432
  %258 = trunc i64 %252 to i32
  %259 = and i32 %258, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i64 4, %249
  %266 = xor i64 %265, %252
  %267 = lshr i64 %266, 4
  %268 = trunc i64 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i64 %252, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %252, 63
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i64 %249, 63
  %278 = xor i64 %274, %277
  %279 = add nuw nsw i64 %278, %274
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %RCX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288
  %289 = load i64, i64* %RAX
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RAX
  %296 = mul i64 %295, 8
  %297 = add i64 %296, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 8
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 40
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %303 to i64*
  store i64 %304, i64* %307
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 51
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %312, align 8, !tbaa !2428
  br label %block_400566

block_4006fc:                                     ; preds = %block_400566
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 12
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 9, i32* %317
  %318 = load i64, i64* %PC
  %319 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %318, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %319

block_4009ea:                                     ; preds = %block_400566
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 12
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  store i32 24, i32* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 12
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 1284
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %343, %struct.Memory* %MEMORY.0)
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 8
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = add i64 4, %354
  store i64 %357, i64* %RCX, align 8, !tbaa !2428
  %358 = icmp ult i64 %357, %354
  %359 = icmp ult i64 %357, 4
  %360 = or i1 %358, %359
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2432
  %363 = trunc i64 %357 to i32
  %364 = and i32 %363, 255
  %365 = call i32 @llvm.ctpop.i32(i32 %364) #16
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %368, i8* %369, align 1, !tbaa !2446
  %370 = xor i64 4, %354
  %371 = xor i64 %370, %357
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i64 %357, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i64 %357, 63
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i64 %354, 63
  %383 = xor i64 %379, %382
  %384 = add nuw nsw i64 %383, %379
  %385 = icmp eq i64 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 8
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %389 to i64*
  store i64 %390, i64* %393
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = mul i64 %400, 8
  %402 = add i64 %401, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 8
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 40
  %409 = load i64, i64* %RAX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 4
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %408 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 1201
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 12
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 7
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 6, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 12
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 384
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.0)
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 8
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  store i64 %449, i64* %RCX, align 8, !tbaa !2428
  %452 = load i64, i64* %RCX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC
  %455 = add i64 4, %452
  store i64 %455, i64* %RCX, align 8, !tbaa !2428
  %456 = icmp ult i64 %455, %452
  %457 = icmp ult i64 %455, 4
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2432
  %461 = trunc i64 %455 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 4, %452
  %469 = xor i64 %468, %455
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = icmp eq i64 %455, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i64 %455, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = lshr i64 %452, 63
  %481 = xor i64 %477, %480
  %482 = add nuw nsw i64 %481, %477
  %483 = icmp eq i64 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2450
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 8
  %488 = load i64, i64* %RCX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %487 to i64*
  store i64 %488, i64* %491
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = load i64, i64* %RAX
  %499 = mul i64 %498, 8
  %500 = add i64 %499, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 8
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 40
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %506 to i64*
  store i64 %507, i64* %510
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 301
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %515, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 12
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 29, i32* %520
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 12
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 3
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %RDI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 1534
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %539, %struct.Memory* %MEMORY.0)
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 8
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  store i64 %547, i64* %RCX, align 8, !tbaa !2428
  %550 = load i64, i64* %RCX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = add i64 4, %550
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %550
  %555 = icmp ult i64 %553, 4
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2432
  %559 = trunc i64 %553 to i32
  %560 = and i32 %559, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2446
  %566 = xor i64 4, %550
  %567 = xor i64 %566, %553
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2447
  %572 = icmp eq i64 %553, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2448
  %575 = lshr i64 %553, 63
  %576 = trunc i64 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = lshr i64 %550, 63
  %579 = xor i64 %575, %578
  %580 = add nuw nsw i64 %579, %575
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %582, i8* %583, align 1, !tbaa !2450
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 8
  %586 = load i64, i64* %RCX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %585 to i64*
  store i64 %586, i64* %589
  %590 = load i64, i64* %RAX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i32*
  %594 = load i32, i32* %593
  %595 = sext i32 %594 to i64
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = load i64, i64* %RAX
  %597 = mul i64 %596, 8
  %598 = add i64 %597, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 8
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i64*
  %602 = load i64, i64* %601
  store i64 %602, i64* %RAX, align 8, !tbaa !2428
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 40
  %605 = load i64, i64* %RAX
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %604 to i64*
  store i64 %605, i64* %608
  %609 = load i64, i64* %PC
  %610 = sub i64 %609, 1451
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %610, i64* %613, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 12
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 7
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  store i32 11, i32* %618
  %619 = load i64, i64* %RBP
  %620 = sub i64 %619, 12
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 3
  store i64 %622, i64* %PC
  %623 = inttoptr i64 %620 to i32*
  %624 = load i32, i32* %623
  %625 = zext i32 %624 to i64
  store i64 %625, i64* %RDI, align 8, !tbaa !2428
  %626 = load i64, i64* %PC
  %627 = sub i64 %626, 634
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 5
  store i64 %631, i64* %PC
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %633 = load i64, i64* %632, align 8, !tbaa !2428
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %629, i64* %635
  store i64 %634, i64* %632, align 8, !tbaa !2428
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %636, align 8, !tbaa !2428
  %637 = load i64, i64* %PC
  %638 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %637, %struct.Memory* %MEMORY.0)
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 8
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RAX
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  store i64 %645, i64* %RCX, align 8, !tbaa !2428
  %648 = load i64, i64* %RCX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = add i64 4, %648
  store i64 %651, i64* %RCX, align 8, !tbaa !2428
  %652 = icmp ult i64 %651, %648
  %653 = icmp ult i64 %651, 4
  %654 = or i1 %652, %653
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %655, i8* %656, align 1, !tbaa !2432
  %657 = trunc i64 %651 to i32
  %658 = and i32 %657, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #16
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i64 4, %648
  %665 = xor i64 %664, %651
  %666 = lshr i64 %665, 4
  %667 = trunc i64 %666 to i8
  %668 = and i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %668, i8* %669, align 1, !tbaa !2447
  %670 = icmp eq i64 %651, 0
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %671, i8* %672, align 1, !tbaa !2448
  %673 = lshr i64 %651, 63
  %674 = trunc i64 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %674, i8* %675, align 1, !tbaa !2449
  %676 = lshr i64 %648, 63
  %677 = xor i64 %673, %676
  %678 = add nuw nsw i64 %677, %673
  %679 = icmp eq i64 %678, 2
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %680, i8* %681, align 1, !tbaa !2450
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 8
  %684 = load i64, i64* %RCX
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %683 to i64*
  store i64 %684, i64* %687
  %688 = load i64, i64* %RAX
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 3
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i32*
  %692 = load i32, i32* %691
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RAX, align 8, !tbaa !2428
  %694 = load i64, i64* %RAX
  %695 = mul i64 %694, 8
  %696 = add i64 %695, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 8
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %RAX, align 8, !tbaa !2428
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 40
  %703 = load i64, i64* %RAX
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %702 to i64*
  store i64 %703, i64* %706
  %707 = load i64, i64* %PC
  %708 = sub i64 %707, 551
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %708, i64* %711, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 12
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 7
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  store i32 16, i32* %716
  %717 = load i64, i64* %PC
  %718 = tail call %struct.Memory* @sub_400861(%struct.State* %0, i64 %717, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %718

block_400954:                                     ; preds = %block_400566
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 12
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  store i32 21, i32* %723
  %724 = load i64, i64* %PC
  %725 = tail call %struct.Memory* @sub_40095b(%struct.State* %0, i64 %724, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %725

block_400a4e:                                     ; preds = %block_400566
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 12
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  store i32 26, i32* %730
  %731 = load i64, i64* %PC
  %732 = tail call %struct.Memory* @sub_400a55(%struct.State* %0, i64 %731, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %732

block_400b48:                                     ; preds = %block_400566
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 12
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i32*
  store i32 31, i32* %737
  %738 = load i64, i64* %PC
  %739 = tail call %struct.Memory* @sub_400b4f(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %739

block_4007c4:                                     ; preds = %block_400566
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 12
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 7
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i32*
  store i32 13, i32* %744
  %745 = load i64, i64* %PC
  %746 = tail call %struct.Memory* @sub_4007cb(%struct.State* %0, i64 %745, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %746

block_400566:                                     ; preds = %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_400a23, %block_4009b8, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.0 = phi %struct.Memory* [ %896, %block_400a23 ], [ %1484, %block_40059e ], [ %1386, %block_400922 ], [ %1288, %block_400828 ], [ %1190, %block_40072e ], [ %1092, %block_400ab2 ], [ %994, %block_400634 ], [ %803, %block_4009b8 ], [ %141, %block_4008f0 ], [ %344, %block_4009ea ], [ %239, %block_40056c ], [ %43, %block_4007f6 ], [ %442, %block_400666 ], [ %540, %block_400ae4 ], [ %638, %block_400760 ]
  %747 = load i64, i64* %RBP
  %748 = sub i64 %747, 40
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 2
  store i64 %755, i64* %PC
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %756, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  switch i64 %757, label %1619 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195673, label %block_400559
    i64 4196942, label %block_400a4e
    i64 4195792, label %block_4005d0
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196342, label %block_4007f6
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4196592, label %block_4008f0
    i64 4196092, label %block_4006fc
    i64 4197192, label %block_400b48
    i64 4196042, label %block_4006ca
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
    i64 4195742, label %block_40059e
  ]

block_4005d0:                                     ; preds = %block_400566
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 12
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 7
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  store i32 3, i32* %762
  %763 = load i64, i64* %PC
  %764 = tail call %struct.Memory* @sub_4005d7(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %764

block_4008be:                                     ; preds = %block_400566
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 12
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  store i32 18, i32* %769
  %770 = load i64, i64* %PC
  %771 = tail call %struct.Memory* @sub_4008c5(%struct.State* %0, i64 %770, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %771

block_4006ca:                                     ; preds = %block_400566
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 12
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  store i32 8, i32* %776
  %777 = load i64, i64* %PC
  %778 = tail call %struct.Memory* @sub_4006d1(%struct.State* %0, i64 %777, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %778

block_4009b8:                                     ; preds = %block_400566
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 7
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  store i32 23, i32* %783
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 12
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = load i64, i64* %PC
  %792 = sub i64 %791, 1234
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 5
  store i64 %796, i64* %PC
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %798 = load i64, i64* %797, align 8, !tbaa !2428
  %799 = add i64 %798, -8
  %800 = inttoptr i64 %799 to i64*
  store i64 %794, i64* %800
  store i64 %799, i64* %797, align 8, !tbaa !2428
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %792, i64* %801, align 8, !tbaa !2428
  %802 = load i64, i64* %PC
  %803 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %802, %struct.Memory* %MEMORY.0)
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 8
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  store i64 %810, i64* %RCX, align 8, !tbaa !2428
  %813 = load i64, i64* %RCX
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 4
  store i64 %815, i64* %PC
  %816 = add i64 4, %813
  store i64 %816, i64* %RCX, align 8, !tbaa !2428
  %817 = icmp ult i64 %816, %813
  %818 = icmp ult i64 %816, 4
  %819 = or i1 %817, %818
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = trunc i64 %816 to i32
  %823 = and i32 %822, 255
  %824 = call i32 @llvm.ctpop.i32(i32 %823) #16
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %827, i8* %828, align 1, !tbaa !2446
  %829 = xor i64 4, %813
  %830 = xor i64 %829, %816
  %831 = lshr i64 %830, 4
  %832 = trunc i64 %831 to i8
  %833 = and i8 %832, 1
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %833, i8* %834, align 1, !tbaa !2447
  %835 = icmp eq i64 %816, 0
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %836, i8* %837, align 1, !tbaa !2448
  %838 = lshr i64 %816, 63
  %839 = trunc i64 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2449
  %841 = lshr i64 %813, 63
  %842 = xor i64 %838, %841
  %843 = add nuw nsw i64 %842, %838
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %845, i8* %846, align 1, !tbaa !2450
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %RCX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %848 to i64*
  store i64 %849, i64* %852
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 3
  store i64 %855, i64* %PC
  %856 = inttoptr i64 %853 to i32*
  %857 = load i32, i32* %856
  %858 = sext i32 %857 to i64
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = load i64, i64* %RAX
  %860 = mul i64 %859, 8
  %861 = add i64 %860, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 8
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 40
  %868 = load i64, i64* %RAX
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %867 to i64*
  store i64 %868, i64* %871
  %872 = load i64, i64* %PC
  %873 = sub i64 %872, 1151
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 5
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %873, i64* %876, align 8, !tbaa !2428
  br label %block_400566

block_400a23:                                     ; preds = %block_400a1c, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.0, %block_400a1c ]
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 12
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  %882 = load i32, i32* %881
  %883 = zext i32 %882 to i64
  store i64 %883, i64* %RDI, align 8, !tbaa !2428
  %884 = load i64, i64* %PC
  %885 = sub i64 %884, 1334
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 5
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %891 = load i64, i64* %890, align 8, !tbaa !2428
  %892 = add i64 %891, -8
  %893 = inttoptr i64 %892 to i64*
  store i64 %887, i64* %893
  store i64 %892, i64* %890, align 8, !tbaa !2428
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %885, i64* %894, align 8, !tbaa !2428
  %895 = load i64, i64* %PC
  %896 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %895, %struct.Memory* %MEMORY.1)
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 8
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901
  store i64 %902, i64* %RAX, align 8, !tbaa !2428
  %903 = load i64, i64* %RAX
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 3
  store i64 %905, i64* %PC
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %906 = load i64, i64* %RCX
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 4
  store i64 %908, i64* %PC
  %909 = add i64 4, %906
  store i64 %909, i64* %RCX, align 8, !tbaa !2428
  %910 = icmp ult i64 %909, %906
  %911 = icmp ult i64 %909, 4
  %912 = or i1 %910, %911
  %913 = zext i1 %912 to i8
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %913, i8* %914, align 1, !tbaa !2432
  %915 = trunc i64 %909 to i32
  %916 = and i32 %915, 255
  %917 = call i32 @llvm.ctpop.i32(i32 %916) #16
  %918 = trunc i32 %917 to i8
  %919 = and i8 %918, 1
  %920 = xor i8 %919, 1
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %920, i8* %921, align 1, !tbaa !2446
  %922 = xor i64 4, %906
  %923 = xor i64 %922, %909
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %926, i8* %927, align 1, !tbaa !2447
  %928 = icmp eq i64 %909, 0
  %929 = zext i1 %928 to i8
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %929, i8* %930, align 1, !tbaa !2448
  %931 = lshr i64 %909, 63
  %932 = trunc i64 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %932, i8* %933, align 1, !tbaa !2449
  %934 = lshr i64 %906, 63
  %935 = xor i64 %931, %934
  %936 = add nuw nsw i64 %935, %931
  %937 = icmp eq i64 %936, 2
  %938 = zext i1 %937 to i8
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %938, i8* %939, align 1, !tbaa !2450
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 8
  %942 = load i64, i64* %RCX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %941 to i64*
  store i64 %942, i64* %945
  %946 = load i64, i64* %RAX
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 3
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i32*
  %950 = load i32, i32* %949
  %951 = sext i32 %950 to i64
  store i64 %951, i64* %RAX, align 8, !tbaa !2428
  %952 = load i64, i64* %RAX
  %953 = mul i64 %952, 8
  %954 = add i64 %953, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 8
  store i64 %956, i64* %PC
  %957 = inttoptr i64 %954 to i64*
  %958 = load i64, i64* %957
  store i64 %958, i64* %RAX, align 8, !tbaa !2428
  %959 = load i64, i64* %RBP
  %960 = sub i64 %959, 40
  %961 = load i64, i64* %RAX
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 4
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %960 to i64*
  store i64 %961, i64* %964
  %965 = load i64, i64* %PC
  %966 = sub i64 %965, 1251
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %966, i64* %969, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 12
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 7
  store i64 %973, i64* %PC
  %974 = inttoptr i64 %971 to i32*
  store i32 5, i32* %974
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 12
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 3
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  %980 = load i32, i32* %979
  %981 = zext i32 %980 to i64
  store i64 %981, i64* %RDI, align 8, !tbaa !2428
  %982 = load i64, i64* %PC
  %983 = sub i64 %982, 334
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 5
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  store i64 %987, i64* %PC
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %989 = load i64, i64* %988, align 8, !tbaa !2428
  %990 = add i64 %989, -8
  %991 = inttoptr i64 %990 to i64*
  store i64 %985, i64* %991
  store i64 %990, i64* %988, align 8, !tbaa !2428
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %983, i64* %992, align 8, !tbaa !2428
  %993 = load i64, i64* %PC
  %994 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %993, %struct.Memory* %MEMORY.0)
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 8
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 4
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i64*
  %1000 = load i64, i64* %999
  store i64 %1000, i64* %RAX, align 8, !tbaa !2428
  %1001 = load i64, i64* %RAX
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 3
  store i64 %1003, i64* %PC
  store i64 %1001, i64* %RCX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RCX
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 4
  store i64 %1006, i64* %PC
  %1007 = add i64 4, %1004
  store i64 %1007, i64* %RCX, align 8, !tbaa !2428
  %1008 = icmp ult i64 %1007, %1004
  %1009 = icmp ult i64 %1007, 4
  %1010 = or i1 %1008, %1009
  %1011 = zext i1 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1011, i8* %1012, align 1, !tbaa !2432
  %1013 = trunc i64 %1007 to i32
  %1014 = and i32 %1013, 255
  %1015 = call i32 @llvm.ctpop.i32(i32 %1014) #16
  %1016 = trunc i32 %1015 to i8
  %1017 = and i8 %1016, 1
  %1018 = xor i8 %1017, 1
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1018, i8* %1019, align 1, !tbaa !2446
  %1020 = xor i64 4, %1004
  %1021 = xor i64 %1020, %1007
  %1022 = lshr i64 %1021, 4
  %1023 = trunc i64 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1024, i8* %1025, align 1, !tbaa !2447
  %1026 = icmp eq i64 %1007, 0
  %1027 = zext i1 %1026 to i8
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1027, i8* %1028, align 1, !tbaa !2448
  %1029 = lshr i64 %1007, 63
  %1030 = trunc i64 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1030, i8* %1031, align 1, !tbaa !2449
  %1032 = lshr i64 %1004, 63
  %1033 = xor i64 %1029, %1032
  %1034 = add nuw nsw i64 %1033, %1029
  %1035 = icmp eq i64 %1034, 2
  %1036 = zext i1 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1036, i8* %1037, align 1, !tbaa !2450
  %1038 = load i64, i64* %RBP
  %1039 = sub i64 %1038, 8
  %1040 = load i64, i64* %RCX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1039 to i64*
  store i64 %1040, i64* %1043
  %1044 = load i64, i64* %RAX
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 3
  store i64 %1046, i64* %PC
  %1047 = inttoptr i64 %1044 to i32*
  %1048 = load i32, i32* %1047
  %1049 = sext i32 %1048 to i64
  store i64 %1049, i64* %RAX, align 8, !tbaa !2428
  %1050 = load i64, i64* %RAX
  %1051 = mul i64 %1050, 8
  %1052 = add i64 %1051, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 8
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1052 to i64*
  %1056 = load i64, i64* %1055
  store i64 %1056, i64* %RAX, align 8, !tbaa !2428
  %1057 = load i64, i64* %RBP
  %1058 = sub i64 %1057, 40
  %1059 = load i64, i64* %RAX
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1058 to i64*
  store i64 %1059, i64* %1062
  %1063 = load i64, i64* %PC
  %1064 = sub i64 %1063, 251
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 5
  store i64 %1066, i64* %PC
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1064, i64* %1067, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 12
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 7
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  store i32 28, i32* %1072
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 12
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 3
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  %1078 = load i32, i32* %1077
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RDI, align 8, !tbaa !2428
  %1080 = load i64, i64* %PC
  %1081 = sub i64 %1080, 1484
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 5
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 5
  store i64 %1085, i64* %PC
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1087 = load i64, i64* %1086, align 8, !tbaa !2428
  %1088 = add i64 %1087, -8
  %1089 = inttoptr i64 %1088 to i64*
  store i64 %1083, i64* %1089
  store i64 %1088, i64* %1086, align 8, !tbaa !2428
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1081, i64* %1090, align 8, !tbaa !2428
  %1091 = load i64, i64* %PC
  %1092 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1091, %struct.Memory* %MEMORY.0)
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 8
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RAX
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 3
  store i64 %1101, i64* %PC
  store i64 %1099, i64* %RCX, align 8, !tbaa !2428
  %1102 = load i64, i64* %RCX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %PC
  %1105 = add i64 4, %1102
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = icmp ult i64 %1105, %1102
  %1107 = icmp ult i64 %1105, 4
  %1108 = or i1 %1106, %1107
  %1109 = zext i1 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1109, i8* %1110, align 1, !tbaa !2432
  %1111 = trunc i64 %1105 to i32
  %1112 = and i32 %1111, 255
  %1113 = call i32 @llvm.ctpop.i32(i32 %1112) #16
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1116, i8* %1117, align 1, !tbaa !2446
  %1118 = xor i64 4, %1102
  %1119 = xor i64 %1118, %1105
  %1120 = lshr i64 %1119, 4
  %1121 = trunc i64 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1122, i8* %1123, align 1, !tbaa !2447
  %1124 = icmp eq i64 %1105, 0
  %1125 = zext i1 %1124 to i8
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1125, i8* %1126, align 1, !tbaa !2448
  %1127 = lshr i64 %1105, 63
  %1128 = trunc i64 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2449
  %1130 = lshr i64 %1102, 63
  %1131 = xor i64 %1127, %1130
  %1132 = add nuw nsw i64 %1131, %1127
  %1133 = icmp eq i64 %1132, 2
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1134, i8* %1135, align 1, !tbaa !2450
  %1136 = load i64, i64* %RBP
  %1137 = sub i64 %1136, 8
  %1138 = load i64, i64* %RCX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1137 to i64*
  store i64 %1138, i64* %1141
  %1142 = load i64, i64* %RAX
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 3
  store i64 %1144, i64* %PC
  %1145 = inttoptr i64 %1142 to i32*
  %1146 = load i32, i32* %1145
  %1147 = sext i32 %1146 to i64
  store i64 %1147, i64* %RAX, align 8, !tbaa !2428
  %1148 = load i64, i64* %RAX
  %1149 = mul i64 %1148, 8
  %1150 = add i64 %1149, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 8
  store i64 %1152, i64* %PC
  %1153 = inttoptr i64 %1150 to i64*
  %1154 = load i64, i64* %1153
  store i64 %1154, i64* %RAX, align 8, !tbaa !2428
  %1155 = load i64, i64* %RBP
  %1156 = sub i64 %1155, 40
  %1157 = load i64, i64* %RAX
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 4
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1156 to i64*
  store i64 %1157, i64* %1160
  %1161 = load i64, i64* %PC
  %1162 = sub i64 %1161, 1401
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 5
  store i64 %1164, i64* %PC
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1162, i64* %1165, align 8, !tbaa !2428
  br label %block_400566

block_40072e:                                     ; preds = %block_400566
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 12
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 7
  store i64 %1169, i64* %PC
  %1170 = inttoptr i64 %1167 to i32*
  store i32 10, i32* %1170
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 12
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 3
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1172 to i32*
  %1176 = load i32, i32* %1175
  %1177 = zext i32 %1176 to i64
  store i64 %1177, i64* %RDI, align 8, !tbaa !2428
  %1178 = load i64, i64* %PC
  %1179 = sub i64 %1178, 584
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 5
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 5
  store i64 %1183, i64* %PC
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1185 = load i64, i64* %1184, align 8, !tbaa !2428
  %1186 = add i64 %1185, -8
  %1187 = inttoptr i64 %1186 to i64*
  store i64 %1181, i64* %1187
  store i64 %1186, i64* %1184, align 8, !tbaa !2428
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1179, i64* %1188, align 8, !tbaa !2428
  %1189 = load i64, i64* %PC
  %1190 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1189, %struct.Memory* %MEMORY.0)
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 8
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1192 to i64*
  %1196 = load i64, i64* %1195
  store i64 %1196, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RAX
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  store i64 %1197, i64* %RCX, align 8, !tbaa !2428
  %1200 = load i64, i64* %RCX
  %1201 = load i64, i64* %PC
  %1202 = add i64 %1201, 4
  store i64 %1202, i64* %PC
  %1203 = add i64 4, %1200
  store i64 %1203, i64* %RCX, align 8, !tbaa !2428
  %1204 = icmp ult i64 %1203, %1200
  %1205 = icmp ult i64 %1203, 4
  %1206 = or i1 %1204, %1205
  %1207 = zext i1 %1206 to i8
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1207, i8* %1208, align 1, !tbaa !2432
  %1209 = trunc i64 %1203 to i32
  %1210 = and i32 %1209, 255
  %1211 = call i32 @llvm.ctpop.i32(i32 %1210) #16
  %1212 = trunc i32 %1211 to i8
  %1213 = and i8 %1212, 1
  %1214 = xor i8 %1213, 1
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1214, i8* %1215, align 1, !tbaa !2446
  %1216 = xor i64 4, %1200
  %1217 = xor i64 %1216, %1203
  %1218 = lshr i64 %1217, 4
  %1219 = trunc i64 %1218 to i8
  %1220 = and i8 %1219, 1
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1220, i8* %1221, align 1, !tbaa !2447
  %1222 = icmp eq i64 %1203, 0
  %1223 = zext i1 %1222 to i8
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1223, i8* %1224, align 1, !tbaa !2448
  %1225 = lshr i64 %1203, 63
  %1226 = trunc i64 %1225 to i8
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1226, i8* %1227, align 1, !tbaa !2449
  %1228 = lshr i64 %1200, 63
  %1229 = xor i64 %1225, %1228
  %1230 = add nuw nsw i64 %1229, %1225
  %1231 = icmp eq i64 %1230, 2
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1232, i8* %1233, align 1, !tbaa !2450
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 8
  %1236 = load i64, i64* %RCX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1235 to i64*
  store i64 %1236, i64* %1239
  %1240 = load i64, i64* %RAX
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 3
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i32*
  %1244 = load i32, i32* %1243
  %1245 = sext i32 %1244 to i64
  store i64 %1245, i64* %RAX, align 8, !tbaa !2428
  %1246 = load i64, i64* %RAX
  %1247 = mul i64 %1246, 8
  %1248 = add i64 %1247, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 8
  store i64 %1250, i64* %PC
  %1251 = inttoptr i64 %1248 to i64*
  %1252 = load i64, i64* %1251
  store i64 %1252, i64* %RAX, align 8, !tbaa !2428
  %1253 = load i64, i64* %RBP
  %1254 = sub i64 %1253, 40
  %1255 = load i64, i64* %RAX
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 4
  store i64 %1257, i64* %PC
  %1258 = inttoptr i64 %1254 to i64*
  store i64 %1255, i64* %1258
  %1259 = load i64, i64* %PC
  %1260 = sub i64 %1259, 501
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 5
  store i64 %1262, i64* %PC
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1260, i64* %1263, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1264 = load i64, i64* %RBP
  %1265 = sub i64 %1264, 12
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 7
  store i64 %1267, i64* %PC
  %1268 = inttoptr i64 %1265 to i32*
  store i32 15, i32* %1268
  %1269 = load i64, i64* %RBP
  %1270 = sub i64 %1269, 12
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 3
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1270 to i32*
  %1274 = load i32, i32* %1273
  %1275 = zext i32 %1274 to i64
  store i64 %1275, i64* %RDI, align 8, !tbaa !2428
  %1276 = load i64, i64* %PC
  %1277 = sub i64 %1276, 834
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 5
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 5
  store i64 %1281, i64* %PC
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1283 = load i64, i64* %1282, align 8, !tbaa !2428
  %1284 = add i64 %1283, -8
  %1285 = inttoptr i64 %1284 to i64*
  store i64 %1279, i64* %1285
  store i64 %1284, i64* %1282, align 8, !tbaa !2428
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1277, i64* %1286, align 8, !tbaa !2428
  %1287 = load i64, i64* %PC
  %1288 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1287, %struct.Memory* %MEMORY.0)
  %1289 = load i64, i64* %RBP
  %1290 = sub i64 %1289, 8
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 4
  store i64 %1292, i64* %PC
  %1293 = inttoptr i64 %1290 to i64*
  %1294 = load i64, i64* %1293
  store i64 %1294, i64* %RAX, align 8, !tbaa !2428
  %1295 = load i64, i64* %RAX
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 3
  store i64 %1297, i64* %PC
  store i64 %1295, i64* %RCX, align 8, !tbaa !2428
  %1298 = load i64, i64* %RCX
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 4
  store i64 %1300, i64* %PC
  %1301 = add i64 4, %1298
  store i64 %1301, i64* %RCX, align 8, !tbaa !2428
  %1302 = icmp ult i64 %1301, %1298
  %1303 = icmp ult i64 %1301, 4
  %1304 = or i1 %1302, %1303
  %1305 = zext i1 %1304 to i8
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1305, i8* %1306, align 1, !tbaa !2432
  %1307 = trunc i64 %1301 to i32
  %1308 = and i32 %1307, 255
  %1309 = call i32 @llvm.ctpop.i32(i32 %1308) #16
  %1310 = trunc i32 %1309 to i8
  %1311 = and i8 %1310, 1
  %1312 = xor i8 %1311, 1
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1312, i8* %1313, align 1, !tbaa !2446
  %1314 = xor i64 4, %1298
  %1315 = xor i64 %1314, %1301
  %1316 = lshr i64 %1315, 4
  %1317 = trunc i64 %1316 to i8
  %1318 = and i8 %1317, 1
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1318, i8* %1319, align 1, !tbaa !2447
  %1320 = icmp eq i64 %1301, 0
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1321, i8* %1322, align 1, !tbaa !2448
  %1323 = lshr i64 %1301, 63
  %1324 = trunc i64 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1324, i8* %1325, align 1, !tbaa !2449
  %1326 = lshr i64 %1298, 63
  %1327 = xor i64 %1323, %1326
  %1328 = add nuw nsw i64 %1327, %1323
  %1329 = icmp eq i64 %1328, 2
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1330, i8* %1331, align 1, !tbaa !2450
  %1332 = load i64, i64* %RBP
  %1333 = sub i64 %1332, 8
  %1334 = load i64, i64* %RCX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 4
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1333 to i64*
  store i64 %1334, i64* %1337
  %1338 = load i64, i64* %RAX
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i32*
  %1342 = load i32, i32* %1341
  %1343 = sext i32 %1342 to i64
  store i64 %1343, i64* %RAX, align 8, !tbaa !2428
  %1344 = load i64, i64* %RAX
  %1345 = mul i64 %1344, 8
  %1346 = add i64 %1345, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 8
  store i64 %1348, i64* %PC
  %1349 = inttoptr i64 %1346 to i64*
  %1350 = load i64, i64* %1349
  store i64 %1350, i64* %RAX, align 8, !tbaa !2428
  %1351 = load i64, i64* %RBP
  %1352 = sub i64 %1351, 40
  %1353 = load i64, i64* %RAX
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1352 to i64*
  store i64 %1353, i64* %1356
  %1357 = load i64, i64* %PC
  %1358 = sub i64 %1357, 751
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1358, i64* %1361, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %1362 = load i64, i64* %RBP
  %1363 = sub i64 %1362, 12
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 7
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1363 to i32*
  store i32 20, i32* %1366
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 12
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 3
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  %1372 = load i32, i32* %1371
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %RDI, align 8, !tbaa !2428
  %1374 = load i64, i64* %PC
  %1375 = sub i64 %1374, 1084
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 5
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  store i64 %1379, i64* %PC
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1381 = load i64, i64* %1380, align 8, !tbaa !2428
  %1382 = add i64 %1381, -8
  %1383 = inttoptr i64 %1382 to i64*
  store i64 %1377, i64* %1383
  store i64 %1382, i64* %1380, align 8, !tbaa !2428
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1375, i64* %1384, align 8, !tbaa !2428
  %1385 = load i64, i64* %PC
  %1386 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1385, %struct.Memory* %MEMORY.0)
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 8
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 4
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i64*
  %1392 = load i64, i64* %1391
  store i64 %1392, i64* %RAX, align 8, !tbaa !2428
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 3
  store i64 %1395, i64* %PC
  store i64 %1393, i64* %RCX, align 8, !tbaa !2428
  %1396 = load i64, i64* %RCX
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 4
  store i64 %1398, i64* %PC
  %1399 = add i64 4, %1396
  store i64 %1399, i64* %RCX, align 8, !tbaa !2428
  %1400 = icmp ult i64 %1399, %1396
  %1401 = icmp ult i64 %1399, 4
  %1402 = or i1 %1400, %1401
  %1403 = zext i1 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1403, i8* %1404, align 1, !tbaa !2432
  %1405 = trunc i64 %1399 to i32
  %1406 = and i32 %1405, 255
  %1407 = call i32 @llvm.ctpop.i32(i32 %1406) #16
  %1408 = trunc i32 %1407 to i8
  %1409 = and i8 %1408, 1
  %1410 = xor i8 %1409, 1
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1410, i8* %1411, align 1, !tbaa !2446
  %1412 = xor i64 4, %1396
  %1413 = xor i64 %1412, %1399
  %1414 = lshr i64 %1413, 4
  %1415 = trunc i64 %1414 to i8
  %1416 = and i8 %1415, 1
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1416, i8* %1417, align 1, !tbaa !2447
  %1418 = icmp eq i64 %1399, 0
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1419, i8* %1420, align 1, !tbaa !2448
  %1421 = lshr i64 %1399, 63
  %1422 = trunc i64 %1421 to i8
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1422, i8* %1423, align 1, !tbaa !2449
  %1424 = lshr i64 %1396, 63
  %1425 = xor i64 %1421, %1424
  %1426 = add nuw nsw i64 %1425, %1421
  %1427 = icmp eq i64 %1426, 2
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1428, i8* %1429, align 1, !tbaa !2450
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 8
  %1432 = load i64, i64* %RCX
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 4
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1431 to i64*
  store i64 %1432, i64* %1435
  %1436 = load i64, i64* %RAX
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 3
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i32*
  %1440 = load i32, i32* %1439
  %1441 = sext i32 %1440 to i64
  store i64 %1441, i64* %RAX, align 8, !tbaa !2428
  %1442 = load i64, i64* %RAX
  %1443 = mul i64 %1442, 8
  %1444 = add i64 %1443, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 8
  store i64 %1446, i64* %PC
  %1447 = inttoptr i64 %1444 to i64*
  %1448 = load i64, i64* %1447
  store i64 %1448, i64* %RAX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 40
  %1451 = load i64, i64* %RAX
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 4
  store i64 %1453, i64* %PC
  %1454 = inttoptr i64 %1450 to i64*
  store i64 %1451, i64* %1454
  %1455 = load i64, i64* %PC
  %1456 = sub i64 %1455, 1001
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 5
  store i64 %1458, i64* %PC
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1456, i64* %1459, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 12
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 7
  store i64 %1463, i64* %PC
  %1464 = inttoptr i64 %1461 to i32*
  store i32 2, i32* %1464
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 12
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 3
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1466 to i32*
  %1470 = load i32, i32* %1469
  %1471 = zext i32 %1470 to i64
  store i64 %1471, i64* %RDI, align 8, !tbaa !2428
  %1472 = load i64, i64* %PC
  %1473 = sub i64 %1472, 184
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 5
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 5
  store i64 %1477, i64* %PC
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1479 = load i64, i64* %1478, align 8, !tbaa !2428
  %1480 = add i64 %1479, -8
  %1481 = inttoptr i64 %1480 to i64*
  store i64 %1475, i64* %1481
  store i64 %1480, i64* %1478, align 8, !tbaa !2428
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1473, i64* %1482, align 8, !tbaa !2428
  %1483 = load i64, i64* %PC
  %1484 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1483, %struct.Memory* %MEMORY.0)
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 8
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 4
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to i64*
  %1490 = load i64, i64* %1489
  store i64 %1490, i64* %RAX, align 8, !tbaa !2428
  %1491 = load i64, i64* %RAX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  store i64 %1491, i64* %RCX, align 8, !tbaa !2428
  %1494 = load i64, i64* %RCX
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 4
  store i64 %1496, i64* %PC
  %1497 = add i64 4, %1494
  store i64 %1497, i64* %RCX, align 8, !tbaa !2428
  %1498 = icmp ult i64 %1497, %1494
  %1499 = icmp ult i64 %1497, 4
  %1500 = or i1 %1498, %1499
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1501, i8* %1502, align 1, !tbaa !2432
  %1503 = trunc i64 %1497 to i32
  %1504 = and i32 %1503, 255
  %1505 = call i32 @llvm.ctpop.i32(i32 %1504) #16
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = xor i8 %1507, 1
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1508, i8* %1509, align 1, !tbaa !2446
  %1510 = xor i64 4, %1494
  %1511 = xor i64 %1510, %1497
  %1512 = lshr i64 %1511, 4
  %1513 = trunc i64 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1514, i8* %1515, align 1, !tbaa !2447
  %1516 = icmp eq i64 %1497, 0
  %1517 = zext i1 %1516 to i8
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1517, i8* %1518, align 1, !tbaa !2448
  %1519 = lshr i64 %1497, 63
  %1520 = trunc i64 %1519 to i8
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1520, i8* %1521, align 1, !tbaa !2449
  %1522 = lshr i64 %1494, 63
  %1523 = xor i64 %1519, %1522
  %1524 = add nuw nsw i64 %1523, %1519
  %1525 = icmp eq i64 %1524, 2
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1526, i8* %1527, align 1, !tbaa !2450
  %1528 = load i64, i64* %RBP
  %1529 = sub i64 %1528, 8
  %1530 = load i64, i64* %RCX
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 4
  store i64 %1532, i64* %PC
  %1533 = inttoptr i64 %1529 to i64*
  store i64 %1530, i64* %1533
  %1534 = load i64, i64* %RAX
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 3
  store i64 %1536, i64* %PC
  %1537 = inttoptr i64 %1534 to i32*
  %1538 = load i32, i32* %1537
  %1539 = sext i32 %1538 to i64
  store i64 %1539, i64* %RAX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RAX
  %1541 = mul i64 %1540, 8
  %1542 = add i64 %1541, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 8
  store i64 %1544, i64* %PC
  %1545 = inttoptr i64 %1542 to i64*
  %1546 = load i64, i64* %1545
  store i64 %1546, i64* %RAX, align 8, !tbaa !2428
  %1547 = load i64, i64* %RBP
  %1548 = sub i64 %1547, 40
  %1549 = load i64, i64* %RAX
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 4
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1548 to i64*
  store i64 %1549, i64* %1552
  %1553 = load i64, i64* %PC
  %1554 = sub i64 %1553, 101
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 5
  store i64 %1556, i64* %PC
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1554, i64* %1557, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 12
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 7
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i32*
  store i32 0, i32* %1562
  %1563 = load i64, i64* %PC
  %1564 = tail call %struct.Memory* @sub_400560(%struct.State* %0, i64 %1563, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1564

block_400a1c:                                     ; preds = %block_400566
  %1565 = load i64, i64* %RBP
  %1566 = sub i64 %1565, 12
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 7
  store i64 %1568, i64* %PC
  %1569 = inttoptr i64 %1566 to i32*
  store i32 25, i32* %1569
  br label %block_400a23

block_400698:                                     ; preds = %block_400566
  %1570 = load i64, i64* %RBP
  %1571 = sub i64 %1570, 12
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 7
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1571 to i32*
  store i32 7, i32* %1574
  %1575 = load i64, i64* %PC
  %1576 = tail call %struct.Memory* @sub_40069f(%struct.State* %0, i64 %1575, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1576

block_400b16:                                     ; preds = %block_400566
  %1577 = load i64, i64* %RBP
  %1578 = sub i64 %1577, 12
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 7
  store i64 %1580, i64* %PC
  %1581 = inttoptr i64 %1578 to i32*
  store i32 30, i32* %1581
  %1582 = load i64, i64* %PC
  %1583 = tail call %struct.Memory* @sub_400b1d(%struct.State* %0, i64 %1582, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1583

block_400792:                                     ; preds = %block_400566
  %1584 = load i64, i64* %RBP
  %1585 = sub i64 %1584, 12
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 7
  store i64 %1587, i64* %PC
  %1588 = inttoptr i64 %1585 to i32*
  store i32 12, i32* %1588
  %1589 = load i64, i64* %PC
  %1590 = tail call %struct.Memory* @sub_400799(%struct.State* %0, i64 %1589, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1590

block_40088c:                                     ; preds = %block_400566
  %1591 = load i64, i64* %RBP
  %1592 = sub i64 %1591, 12
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 7
  store i64 %1594, i64* %PC
  %1595 = inttoptr i64 %1592 to i32*
  store i32 17, i32* %1595
  %1596 = load i64, i64* %PC
  %1597 = tail call %struct.Memory* @sub_400893(%struct.State* %0, i64 %1596, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1597

block_400986:                                     ; preds = %block_400566
  %1598 = load i64, i64* %RBP
  %1599 = sub i64 %1598, 12
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 7
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1599 to i32*
  store i32 22, i32* %1602
  %1603 = load i64, i64* %PC
  %1604 = tail call %struct.Memory* @sub_40098d(%struct.State* %0, i64 %1603, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1604

block_400602:                                     ; preds = %block_400566
  %1605 = load i64, i64* %RBP
  %1606 = sub i64 %1605, 12
  %1607 = load i64, i64* %PC
  %1608 = add i64 %1607, 7
  store i64 %1608, i64* %PC
  %1609 = inttoptr i64 %1606 to i32*
  store i32 4, i32* %1609
  %1610 = load i64, i64* %PC
  %1611 = tail call %struct.Memory* @sub_400609(%struct.State* %0, i64 %1610, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1611

block_400a80:                                     ; preds = %block_400566
  %1612 = load i64, i64* %RBP
  %1613 = sub i64 %1612, 12
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 7
  store i64 %1615, i64* %PC
  %1616 = inttoptr i64 %1613 to i32*
  store i32 27, i32* %1616
  %1617 = load i64, i64* %PC
  %1618 = tail call %struct.Memory* @sub_400a87(%struct.State* %0, i64 %1617, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1618

; <label>:1619:                                   ; preds = %block_400566
  %1620 = load i64, i64* %PC
  %1621 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %1620, %struct.Memory* %MEMORY.0)
  ret %struct.Memory* %1621
}

; Function Attrs: noinline
define %struct.Memory* @sub_400560(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400560:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = add i64 48, %12
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %15, %12
  %17 = icmp ult i64 %15, 48
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %15 to i32
  %22 = and i32 %21, 255
  %23 = call i32 @llvm.ctpop.i32(i32 %22) #16
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 48, %12
  %29 = xor i64 %28, %15
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = icmp eq i64 %15, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %15, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = lshr i64 %12, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %37
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %55, align 8, !tbaa !2428
  %60 = add i64 %57, 8
  store i64 %60, i64* %56, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cd4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cd4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008c5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RAX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RCX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  br label %block_4008c5

block_4006fc:                                     ; preds = %block_400566
  %22 = load i64, i64* %RBP
  %23 = sub i64 %22, 12
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = inttoptr i64 %23 to i32*
  store i32 9, i32* %26
  %27 = load i64, i64* %PC
  %28 = tail call %struct.Memory* @sub_400703(%struct.State* %0, i64 %27, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %28

block_4007f6:                                     ; preds = %block_400566
  %29 = load i64, i64* %RBP
  %30 = sub i64 %29, 12
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 7
  store i64 %32, i64* %PC
  %33 = inttoptr i64 %30 to i32*
  store i32 14, i32* %33
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 12
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %41 = load i64, i64* %PC
  %42 = sub i64 %41, 784
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 5
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 5
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %42, i64* %51, align 8, !tbaa !2428
  %52 = load i64, i64* %PC
  %53 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %52, %struct.Memory* %MEMORY.1)
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = add i64 4, %63
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = icmp ult i64 %66, %63
  %68 = icmp ult i64 %66, 4
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = trunc i64 %66 to i32
  %73 = and i32 %72, 255
  %74 = call i32 @llvm.ctpop.i32(i32 %73) #16
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %77, i8* %78, align 1, !tbaa !2446
  %79 = xor i64 4, %63
  %80 = xor i64 %79, %66
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i64 %66, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i64 %66, 63
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i64 %63, 63
  %92 = xor i64 %88, %91
  %93 = add nuw nsw i64 %92, %88
  %94 = icmp eq i64 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %RCX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RAX
  %110 = mul i64 %109, 8
  %111 = add i64 %110, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 8
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 40
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %PC
  %123 = sub i64 %122, 701
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 5
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %123, i64* %126, align 8, !tbaa !2428
  br label %block_400566

block_4008f0:                                     ; preds = %block_400566
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 7
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  store i32 19, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 12
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = sub i64 %139, 1034
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 5
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %142, i64* %148
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %140, i64* %149, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %150, %struct.Memory* %MEMORY.1)
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 8
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %161 = load i64, i64* %RCX
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = add i64 4, %161
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i64 %164, %161
  %166 = icmp ult i64 %164, 4
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = trunc i64 %164 to i32
  %171 = and i32 %170, 255
  %172 = call i32 @llvm.ctpop.i32(i32 %171) #16
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %175, i8* %176, align 1, !tbaa !2446
  %177 = xor i64 4, %161
  %178 = xor i64 %177, %164
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i64 %164, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i64 %164, 63
  %187 = trunc i64 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i64 %161, 63
  %190 = xor i64 %186, %189
  %191 = add nuw nsw i64 %190, %186
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  %201 = load i64, i64* %RAX
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = load i64, i64* %RAX
  %208 = mul i64 %207, 8
  %209 = add i64 %208, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 8
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %PC
  %221 = sub i64 %220, 951
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 5
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %221, i64* %224, align 8, !tbaa !2428
  br label %block_400566

block_40056c:                                     ; preds = %block_400566
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  store i32 1, i32* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 12
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = sub i64 %237, 134
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %248, %struct.Memory* %MEMORY.1)
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 8
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %259 = load i64, i64* %RCX
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 4, %259
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 4
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 4, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %RCX
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %294 to i64*
  store i64 %295, i64* %298
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = mul i64 %305, 8
  %307 = add i64 %306, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %RAX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 51
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  store i64 %321, i64* %PC
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %322, align 8, !tbaa !2428
  br label %block_400566

block_4009ea:                                     ; preds = %block_400566
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 12
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 24, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 1284
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %346, %struct.Memory* %MEMORY.1)
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 8
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RAX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %357 = load i64, i64* %RCX
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = add i64 4, %357
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %357
  %362 = icmp ult i64 %360, 4
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 4, %357
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %357, 63
  %386 = xor i64 %382, %385
  %387 = add nuw nsw i64 %386, %382
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2450
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 8
  %393 = load i64, i64* %RCX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %392 to i64*
  store i64 %393, i64* %396
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RAX
  %404 = mul i64 %403, 8
  %405 = add i64 %404, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 40
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %411 to i64*
  store i64 %412, i64* %415
  %416 = load i64, i64* %PC
  %417 = sub i64 %416, 1201
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 5
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %417, i64* %420, align 8, !tbaa !2428
  br label %block_400566

block_400666:                                     ; preds = %block_400566
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 7
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  store i32 6, i32* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 12
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 384
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %444, %struct.Memory* %MEMORY.1)
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 4
  store i64 %457, i64* %PC
  %458 = add i64 4, %455
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i64 %458, %455
  %460 = icmp ult i64 %458, 4
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = trunc i64 %458 to i32
  %465 = and i32 %464, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 4, %455
  %472 = xor i64 %471, %458
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i64 %458, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i64 %458, 63
  %481 = trunc i64 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i64 %455, 63
  %484 = xor i64 %480, %483
  %485 = add nuw nsw i64 %484, %480
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %490 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = mul i64 %501, 8
  %503 = add i64 %502, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 8
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 40
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %509 to i64*
  store i64 %510, i64* %513
  %514 = load i64, i64* %PC
  %515 = sub i64 %514, 301
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %515, i64* %518, align 8, !tbaa !2428
  br label %block_400566

block_400ae4:                                     ; preds = %block_400566
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 12
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 7
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  store i32 29, i32* %523
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 12
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDI, align 8, !tbaa !2428
  %531 = load i64, i64* %PC
  %532 = sub i64 %531, 1534
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 8
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = add i64 4, %553
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = icmp ult i64 %556, %553
  %558 = icmp ult i64 %556, 4
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = trunc i64 %556 to i32
  %563 = and i32 %562, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i64 4, %553
  %570 = xor i64 %569, %556
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i64 %556, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i64 %556, 63
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i64 %553, 63
  %582 = xor i64 %578, %581
  %583 = add nuw nsw i64 %582, %578
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 8
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %592
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX
  %600 = mul i64 %599, 8
  %601 = add i64 %600, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 8
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 40
  %608 = load i64, i64* %RAX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611
  %612 = load i64, i64* %PC
  %613 = sub i64 %612, 1451
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %616, align 8, !tbaa !2428
  br label %block_400566

block_400760:                                     ; preds = %block_400566
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 12
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  store i32 11, i32* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 12
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 3
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = zext i32 %627 to i64
  store i64 %628, i64* %RDI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 634
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %640, %struct.Memory* %MEMORY.1)
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = add i64 4, %651
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = icmp ult i64 %654, %651
  %656 = icmp ult i64 %654, 4
  %657 = or i1 %655, %656
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %658, i8* %659, align 1, !tbaa !2432
  %660 = trunc i64 %654 to i32
  %661 = and i32 %660, 255
  %662 = call i32 @llvm.ctpop.i32(i32 %661) #16
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %665, i8* %666, align 1, !tbaa !2446
  %667 = xor i64 4, %651
  %668 = xor i64 %667, %654
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = icmp eq i64 %654, 0
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i64 %654, 63
  %677 = trunc i64 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %677, i8* %678, align 1, !tbaa !2449
  %679 = lshr i64 %651, 63
  %680 = xor i64 %676, %679
  %681 = add nuw nsw i64 %680, %676
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 8
  %687 = load i64, i64* %RCX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RAX
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 3
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RAX
  %698 = mul i64 %697, 8
  %699 = add i64 %698, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 8
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 40
  %706 = load i64, i64* %RAX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %705 to i64*
  store i64 %706, i64* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 551
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400566

block_40085a:                                     ; preds = %block_400566
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 12
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 7
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  store i32 16, i32* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 12
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RDI, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 884
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 5
  store i64 %732, i64* %PC
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %734 = load i64, i64* %733, align 8, !tbaa !2428
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %730, i64* %736
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %737, align 8, !tbaa !2428
  %738 = load i64, i64* %PC
  %739 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %738, %struct.Memory* %MEMORY.1)
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 8
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = add i64 4, %749
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = icmp ult i64 %752, %749
  %754 = icmp ult i64 %752, 4
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = trunc i64 %752 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #16
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2446
  %765 = xor i64 4, %749
  %766 = xor i64 %765, %752
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2447
  %771 = icmp eq i64 %752, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2448
  %774 = lshr i64 %752, 63
  %775 = trunc i64 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2449
  %777 = lshr i64 %749, 63
  %778 = xor i64 %774, %777
  %779 = add nuw nsw i64 %778, %774
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 8
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RAX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 8
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 40
  %804 = load i64, i64* %RAX
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %803 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %PC
  %809 = sub i64 %808, 801
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %809, i64* %812, align 8, !tbaa !2428
  br label %block_400566

block_400954:                                     ; preds = %block_400566
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 12
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  store i32 21, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 12
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 3
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDI, align 8, !tbaa !2428
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 1134
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %836, %struct.Memory* %MEMORY.1)
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = add i64 4, %847
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = icmp ult i64 %850, %847
  %852 = icmp ult i64 %850, 4
  %853 = or i1 %851, %852
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %854, i8* %855, align 1, !tbaa !2432
  %856 = trunc i64 %850 to i32
  %857 = and i32 %856, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 4, %847
  %864 = xor i64 %863, %850
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %867, i8* %868, align 1, !tbaa !2447
  %869 = icmp eq i64 %850, 0
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %870, i8* %871, align 1, !tbaa !2448
  %872 = lshr i64 %850, 63
  %873 = trunc i64 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = lshr i64 %847, 63
  %876 = xor i64 %872, %875
  %877 = add nuw nsw i64 %876, %872
  %878 = icmp eq i64 %877, 2
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %879, i8* %880, align 1, !tbaa !2450
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 8
  %883 = load i64, i64* %RCX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  %887 = load i64, i64* %RAX
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = load i64, i64* %RAX
  %894 = mul i64 %893, 8
  %895 = add i64 %894, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 8
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 40
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %901 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %PC
  %907 = sub i64 %906, 1051
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %907, i64* %910, align 8, !tbaa !2428
  br label %block_400566

block_4005d0:                                     ; preds = %block_400566
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 12
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 7
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  store i32 3, i32* %915
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 12
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i32*
  %921 = load i32, i32* %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDI, align 8, !tbaa !2428
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 234
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %934, %struct.Memory* %MEMORY.1)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 8
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  %941 = load i64, i64* %940
  store i64 %941, i64* %RAX, align 8, !tbaa !2428
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RCX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = add i64 4, %945
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = icmp ult i64 %948, %945
  %950 = icmp ult i64 %948, 4
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2432
  %954 = trunc i64 %948 to i32
  %955 = and i32 %954, 255
  %956 = call i32 @llvm.ctpop.i32(i32 %955) #16
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %959, i8* %960, align 1, !tbaa !2446
  %961 = xor i64 4, %945
  %962 = xor i64 %961, %948
  %963 = lshr i64 %962, 4
  %964 = trunc i64 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i64 %948, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %948, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i64 %945, 63
  %974 = xor i64 %970, %973
  %975 = add nuw nsw i64 %974, %970
  %976 = icmp eq i64 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %RCX
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = load i64, i64* %RAX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 8
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 40
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %999 to i64*
  store i64 %1000, i64* %1003
  %1004 = load i64, i64* %PC
  %1005 = sub i64 %1004, 151
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1005, i64* %1008, align 8, !tbaa !2428
  br label %block_400566

block_400a4e:                                     ; preds = %block_400566
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 12
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i32*
  store i32 26, i32* %1013
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 12
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDI, align 8, !tbaa !2428
  %1021 = load i64, i64* %PC
  %1022 = sub i64 %1021, 1384
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 5
  store i64 %1026, i64* %PC
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1028 = load i64, i64* %1027, align 8, !tbaa !2428
  %1029 = add i64 %1028, -8
  %1030 = inttoptr i64 %1029 to i64*
  store i64 %1024, i64* %1030
  store i64 %1029, i64* %1027, align 8, !tbaa !2428
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1022, i64* %1031, align 8, !tbaa !2428
  %1032 = load i64, i64* %PC
  %1033 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1032, %struct.Memory* %MEMORY.1)
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 8
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 4
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i64*
  %1039 = load i64, i64* %1038
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RAX
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RCX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = add i64 4, %1043
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  %1047 = icmp ult i64 %1046, %1043
  %1048 = icmp ult i64 %1046, 4
  %1049 = or i1 %1047, %1048
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = trunc i64 %1046 to i32
  %1053 = and i32 %1052, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i64 4, %1043
  %1060 = xor i64 %1059, %1046
  %1061 = lshr i64 %1060, 4
  %1062 = trunc i64 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i64 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i64 %1046, 63
  %1069 = trunc i64 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i64 %1043, 63
  %1072 = xor i64 %1068, %1071
  %1073 = add nuw nsw i64 %1072, %1068
  %1074 = icmp eq i64 %1073, 2
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1075, i8* %1076, align 1, !tbaa !2450
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 8
  %1079 = load i64, i64* %RCX
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 4
  store i64 %1081, i64* %PC
  %1082 = inttoptr i64 %1078 to i64*
  store i64 %1079, i64* %1082
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = mul i64 %1089, 8
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  %1095 = load i64, i64* %1094
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 40
  %1098 = load i64, i64* %RAX
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1097 to i64*
  store i64 %1098, i64* %1101
  %1102 = load i64, i64* %PC
  %1103 = sub i64 %1102, 1301
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  br label %block_400566

block_4006ca:                                     ; preds = %block_400566
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 12
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 7
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  store i32 8, i32* %1111
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = load i64, i64* %PC
  %1120 = sub i64 %1119, 484
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1126 = load i64, i64* %1125, align 8, !tbaa !2428
  %1127 = add i64 %1126, -8
  %1128 = inttoptr i64 %1127 to i64*
  store i64 %1122, i64* %1128
  store i64 %1127, i64* %1125, align 8, !tbaa !2428
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1120, i64* %1129, align 8, !tbaa !2428
  %1130 = load i64, i64* %PC
  %1131 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1130, %struct.Memory* %MEMORY.1)
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 8
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 4
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  store i64 %1138, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = add i64 4, %1141
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1145 = icmp ult i64 %1144, %1141
  %1146 = icmp ult i64 %1144, 4
  %1147 = or i1 %1145, %1146
  %1148 = zext i1 %1147 to i8
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1148, i8* %1149, align 1, !tbaa !2432
  %1150 = trunc i64 %1144 to i32
  %1151 = and i32 %1150, 255
  %1152 = call i32 @llvm.ctpop.i32(i32 %1151) #16
  %1153 = trunc i32 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = xor i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1155, i8* %1156, align 1, !tbaa !2446
  %1157 = xor i64 4, %1141
  %1158 = xor i64 %1157, %1144
  %1159 = lshr i64 %1158, 4
  %1160 = trunc i64 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1161, i8* %1162, align 1, !tbaa !2447
  %1163 = icmp eq i64 %1144, 0
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1164, i8* %1165, align 1, !tbaa !2448
  %1166 = lshr i64 %1144, 63
  %1167 = trunc i64 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = lshr i64 %1141, 63
  %1170 = xor i64 %1166, %1169
  %1171 = add nuw nsw i64 %1170, %1166
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 8
  %1177 = load i64, i64* %RCX
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1176 to i64*
  store i64 %1177, i64* %1180
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 3
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184
  %1186 = sext i32 %1185 to i64
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i64, i64* %RAX
  %1188 = mul i64 %1187, 8
  %1189 = add i64 %1188, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 8
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i64*
  %1193 = load i64, i64* %1192
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = load i64, i64* %RBP
  %1195 = sub i64 %1194, 40
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1195 to i64*
  store i64 %1196, i64* %1199
  %1200 = load i64, i64* %PC
  %1201 = sub i64 %1200, 401
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1201, i64* %1204, align 8, !tbaa !2428
  br label %block_400566

block_400b48:                                     ; preds = %block_400566
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 12
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 7
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  store i32 31, i32* %1209
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  %1215 = load i32, i32* %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load i64, i64* %PC
  %1218 = sub i64 %1217, 1634
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %MEMORY.1)
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 8
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234
  store i64 %1235, i64* %RAX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RAX
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RCX
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = add i64 4, %1239
  store i64 %1242, i64* %RCX, align 8, !tbaa !2428
  %1243 = icmp ult i64 %1242, %1239
  %1244 = icmp ult i64 %1242, 4
  %1245 = or i1 %1243, %1244
  %1246 = zext i1 %1245 to i8
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1246, i8* %1247, align 1, !tbaa !2432
  %1248 = trunc i64 %1242 to i32
  %1249 = and i32 %1248, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = xor i64 4, %1239
  %1256 = xor i64 %1255, %1242
  %1257 = lshr i64 %1256, 4
  %1258 = trunc i64 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = icmp eq i64 %1242, 0
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = lshr i64 %1242, 63
  %1265 = trunc i64 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i64 %1239, 63
  %1268 = xor i64 %1264, %1267
  %1269 = add nuw nsw i64 %1268, %1264
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1271, i8* %1272, align 1, !tbaa !2450
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 8
  %1275 = load i64, i64* %RCX
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = sext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RAX
  %1286 = mul i64 %1285, 8
  %1287 = add i64 %1286, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 8
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1287 to i64*
  %1291 = load i64, i64* %1290
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 40
  %1294 = load i64, i64* %RAX
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1293 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %PC
  %1299 = sub i64 %1298, 1551
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1299, i64* %1302, align 8, !tbaa !2428
  br label %block_400566

block_4008c5:                                     ; preds = %block_4008be, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %MEMORY.1, %block_4008be ]
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 12
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i32*
  %1308 = load i32, i32* %1307
  %1309 = zext i32 %1308 to i64
  store i64 %1309, i64* %RDI, align 8, !tbaa !2428
  %1310 = load i64, i64* %PC
  %1311 = sub i64 %1310, 984
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 5
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 5
  store i64 %1315, i64* %PC
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1317 = load i64, i64* %1316, align 8, !tbaa !2428
  %1318 = add i64 %1317, -8
  %1319 = inttoptr i64 %1318 to i64*
  store i64 %1313, i64* %1319
  store i64 %1318, i64* %1316, align 8, !tbaa !2428
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1311, i64* %1320, align 8, !tbaa !2428
  %1321 = load i64, i64* %PC
  %1322 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1321, %struct.Memory* %MEMORY.0)
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 8
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1324 to i64*
  %1328 = load i64, i64* %1327
  store i64 %1328, i64* %RAX, align 8, !tbaa !2428
  %1329 = load i64, i64* %RAX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 3
  store i64 %1331, i64* %PC
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1332 = load i64, i64* %RCX
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 4
  store i64 %1334, i64* %PC
  %1335 = add i64 4, %1332
  store i64 %1335, i64* %RCX, align 8, !tbaa !2428
  %1336 = icmp ult i64 %1335, %1332
  %1337 = icmp ult i64 %1335, 4
  %1338 = or i1 %1336, %1337
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1339, i8* %1340, align 1, !tbaa !2432
  %1341 = trunc i64 %1335 to i32
  %1342 = and i32 %1341, 255
  %1343 = call i32 @llvm.ctpop.i32(i32 %1342) #16
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1346, i8* %1347, align 1, !tbaa !2446
  %1348 = xor i64 4, %1332
  %1349 = xor i64 %1348, %1335
  %1350 = lshr i64 %1349, 4
  %1351 = trunc i64 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1352, i8* %1353, align 1, !tbaa !2447
  %1354 = icmp eq i64 %1335, 0
  %1355 = zext i1 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1355, i8* %1356, align 1, !tbaa !2448
  %1357 = lshr i64 %1335, 63
  %1358 = trunc i64 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1358, i8* %1359, align 1, !tbaa !2449
  %1360 = lshr i64 %1332, 63
  %1361 = xor i64 %1357, %1360
  %1362 = add nuw nsw i64 %1361, %1357
  %1363 = icmp eq i64 %1362, 2
  %1364 = zext i1 %1363 to i8
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1364, i8* %1365, align 1, !tbaa !2450
  %1366 = load i64, i64* %RBP
  %1367 = sub i64 %1366, 8
  %1368 = load i64, i64* %RCX
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1367 to i64*
  store i64 %1368, i64* %1371
  %1372 = load i64, i64* %RAX
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 3
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  %1376 = load i32, i32* %1375
  %1377 = sext i32 %1376 to i64
  store i64 %1377, i64* %RAX, align 8, !tbaa !2428
  %1378 = load i64, i64* %RAX
  %1379 = mul i64 %1378, 8
  %1380 = add i64 %1379, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 8
  store i64 %1382, i64* %PC
  %1383 = inttoptr i64 %1380 to i64*
  %1384 = load i64, i64* %1383
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 40
  %1387 = load i64, i64* %RAX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %PC
  %1392 = sub i64 %1391, 901
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1392, i64* %1395, align 8, !tbaa !2428
  br label %block_400566

block_4007c4:                                     ; preds = %block_400566
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 12
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 7
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i32*
  store i32 13, i32* %1400
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 12
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 3
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i32*
  %1406 = load i32, i32* %1405
  %1407 = zext i32 %1406 to i64
  store i64 %1407, i64* %RDI, align 8, !tbaa !2428
  %1408 = load i64, i64* %PC
  %1409 = sub i64 %1408, 734
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 5
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 5
  store i64 %1413, i64* %PC
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1415 = load i64, i64* %1414, align 8, !tbaa !2428
  %1416 = add i64 %1415, -8
  %1417 = inttoptr i64 %1416 to i64*
  store i64 %1411, i64* %1417
  store i64 %1416, i64* %1414, align 8, !tbaa !2428
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1409, i64* %1418, align 8, !tbaa !2428
  %1419 = load i64, i64* %PC
  %1420 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1419, %struct.Memory* %MEMORY.1)
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 8
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = load i64, i64* %RAX
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  store i64 %1427, i64* %RCX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RCX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %PC
  %1433 = add i64 4, %1430
  store i64 %1433, i64* %RCX, align 8, !tbaa !2428
  %1434 = icmp ult i64 %1433, %1430
  %1435 = icmp ult i64 %1433, 4
  %1436 = or i1 %1434, %1435
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1437, i8* %1438, align 1, !tbaa !2432
  %1439 = trunc i64 %1433 to i32
  %1440 = and i32 %1439, 255
  %1441 = call i32 @llvm.ctpop.i32(i32 %1440) #16
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1444, i8* %1445, align 1, !tbaa !2446
  %1446 = xor i64 4, %1430
  %1447 = xor i64 %1446, %1433
  %1448 = lshr i64 %1447, 4
  %1449 = trunc i64 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1450, i8* %1451, align 1, !tbaa !2447
  %1452 = icmp eq i64 %1433, 0
  %1453 = zext i1 %1452 to i8
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1453, i8* %1454, align 1, !tbaa !2448
  %1455 = lshr i64 %1433, 63
  %1456 = trunc i64 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1456, i8* %1457, align 1, !tbaa !2449
  %1458 = lshr i64 %1430, 63
  %1459 = xor i64 %1455, %1458
  %1460 = add nuw nsw i64 %1459, %1455
  %1461 = icmp eq i64 %1460, 2
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1462, i8* %1463, align 1, !tbaa !2450
  %1464 = load i64, i64* %RBP
  %1465 = sub i64 %1464, 8
  %1466 = load i64, i64* %RCX
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 4
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1465 to i64*
  store i64 %1466, i64* %1469
  %1470 = load i64, i64* %RAX
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 3
  store i64 %1472, i64* %PC
  %1473 = inttoptr i64 %1470 to i32*
  %1474 = load i32, i32* %1473
  %1475 = sext i32 %1474 to i64
  store i64 %1475, i64* %RAX, align 8, !tbaa !2428
  %1476 = load i64, i64* %RAX
  %1477 = mul i64 %1476, 8
  %1478 = add i64 %1477, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 8
  store i64 %1480, i64* %PC
  %1481 = inttoptr i64 %1478 to i64*
  %1482 = load i64, i64* %1481
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 40
  %1485 = load i64, i64* %RAX
  %1486 = load i64, i64* %PC
  %1487 = add i64 %1486, 4
  store i64 %1487, i64* %PC
  %1488 = inttoptr i64 %1484 to i64*
  store i64 %1485, i64* %1488
  %1489 = load i64, i64* %PC
  %1490 = sub i64 %1489, 651
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 5
  store i64 %1492, i64* %PC
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1490, i64* %1493, align 8, !tbaa !2428
  br label %block_400566

block_4008be:                                     ; preds = %block_400566
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 12
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 7
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i32*
  store i32 18, i32* %1498
  br label %block_4008c5

block_4009b8:                                     ; preds = %block_400566
  %1499 = load i64, i64* %RBP
  %1500 = sub i64 %1499, 12
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 7
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1500 to i32*
  store i32 23, i32* %1503
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 12
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 3
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i32*
  %1509 = load i32, i32* %1508
  %1510 = zext i32 %1509 to i64
  store i64 %1510, i64* %RDI, align 8, !tbaa !2428
  %1511 = load i64, i64* %PC
  %1512 = sub i64 %1511, 1234
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 5
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  store i64 %1516, i64* %PC
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1518 = load i64, i64* %1517, align 8, !tbaa !2428
  %1519 = add i64 %1518, -8
  %1520 = inttoptr i64 %1519 to i64*
  store i64 %1514, i64* %1520
  store i64 %1519, i64* %1517, align 8, !tbaa !2428
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1512, i64* %1521, align 8, !tbaa !2428
  %1522 = load i64, i64* %PC
  %1523 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1522, %struct.Memory* %MEMORY.1)
  %1524 = load i64, i64* %RBP
  %1525 = sub i64 %1524, 8
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 4
  store i64 %1527, i64* %PC
  %1528 = inttoptr i64 %1525 to i64*
  %1529 = load i64, i64* %1528
  store i64 %1529, i64* %RAX, align 8, !tbaa !2428
  %1530 = load i64, i64* %RAX
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 3
  store i64 %1532, i64* %PC
  store i64 %1530, i64* %RCX, align 8, !tbaa !2428
  %1533 = load i64, i64* %RCX
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 4
  store i64 %1535, i64* %PC
  %1536 = add i64 4, %1533
  store i64 %1536, i64* %RCX, align 8, !tbaa !2428
  %1537 = icmp ult i64 %1536, %1533
  %1538 = icmp ult i64 %1536, 4
  %1539 = or i1 %1537, %1538
  %1540 = zext i1 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1540, i8* %1541, align 1, !tbaa !2432
  %1542 = trunc i64 %1536 to i32
  %1543 = and i32 %1542, 255
  %1544 = call i32 @llvm.ctpop.i32(i32 %1543) #16
  %1545 = trunc i32 %1544 to i8
  %1546 = and i8 %1545, 1
  %1547 = xor i8 %1546, 1
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1547, i8* %1548, align 1, !tbaa !2446
  %1549 = xor i64 4, %1533
  %1550 = xor i64 %1549, %1536
  %1551 = lshr i64 %1550, 4
  %1552 = trunc i64 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1553, i8* %1554, align 1, !tbaa !2447
  %1555 = icmp eq i64 %1536, 0
  %1556 = zext i1 %1555 to i8
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1556, i8* %1557, align 1, !tbaa !2448
  %1558 = lshr i64 %1536, 63
  %1559 = trunc i64 %1558 to i8
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1559, i8* %1560, align 1, !tbaa !2449
  %1561 = lshr i64 %1533, 63
  %1562 = xor i64 %1558, %1561
  %1563 = add nuw nsw i64 %1562, %1558
  %1564 = icmp eq i64 %1563, 2
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1565, i8* %1566, align 1, !tbaa !2450
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 8
  %1569 = load i64, i64* %RCX
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 4
  store i64 %1571, i64* %PC
  %1572 = inttoptr i64 %1568 to i64*
  store i64 %1569, i64* %1572
  %1573 = load i64, i64* %RAX
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 3
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1573 to i32*
  %1577 = load i32, i32* %1576
  %1578 = sext i32 %1577 to i64
  store i64 %1578, i64* %RAX, align 8, !tbaa !2428
  %1579 = load i64, i64* %RAX
  %1580 = mul i64 %1579, 8
  %1581 = add i64 %1580, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 8
  store i64 %1583, i64* %PC
  %1584 = inttoptr i64 %1581 to i64*
  %1585 = load i64, i64* %1584
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i64, i64* %RBP
  %1587 = sub i64 %1586, 40
  %1588 = load i64, i64* %RAX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 4
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1587 to i64*
  store i64 %1588, i64* %1591
  %1592 = load i64, i64* %PC
  %1593 = sub i64 %1592, 1151
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 5
  store i64 %1595, i64* %PC
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1593, i64* %1596, align 8, !tbaa !2428
  br label %block_400566

block_400634:                                     ; preds = %block_400566
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 7
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  store i32 5, i32* %1601
  %1602 = load i64, i64* %RBP
  %1603 = sub i64 %1602, 12
  %1604 = load i64, i64* %PC
  %1605 = add i64 %1604, 3
  store i64 %1605, i64* %PC
  %1606 = inttoptr i64 %1603 to i32*
  %1607 = load i32, i32* %1606
  %1608 = zext i32 %1607 to i64
  store i64 %1608, i64* %RDI, align 8, !tbaa !2428
  %1609 = load i64, i64* %PC
  %1610 = sub i64 %1609, 334
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 5
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 5
  store i64 %1614, i64* %PC
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1616 = load i64, i64* %1615, align 8, !tbaa !2428
  %1617 = add i64 %1616, -8
  %1618 = inttoptr i64 %1617 to i64*
  store i64 %1612, i64* %1618
  store i64 %1617, i64* %1615, align 8, !tbaa !2428
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1610, i64* %1619, align 8, !tbaa !2428
  %1620 = load i64, i64* %PC
  %1621 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1620, %struct.Memory* %MEMORY.1)
  %1622 = load i64, i64* %RBP
  %1623 = sub i64 %1622, 8
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 4
  store i64 %1625, i64* %PC
  %1626 = inttoptr i64 %1623 to i64*
  %1627 = load i64, i64* %1626
  store i64 %1627, i64* %RAX, align 8, !tbaa !2428
  %1628 = load i64, i64* %RAX
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 3
  store i64 %1630, i64* %PC
  store i64 %1628, i64* %RCX, align 8, !tbaa !2428
  %1631 = load i64, i64* %RCX
  %1632 = load i64, i64* %PC
  %1633 = add i64 %1632, 4
  store i64 %1633, i64* %PC
  %1634 = add i64 4, %1631
  store i64 %1634, i64* %RCX, align 8, !tbaa !2428
  %1635 = icmp ult i64 %1634, %1631
  %1636 = icmp ult i64 %1634, 4
  %1637 = or i1 %1635, %1636
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1638, i8* %1639, align 1, !tbaa !2432
  %1640 = trunc i64 %1634 to i32
  %1641 = and i32 %1640, 255
  %1642 = call i32 @llvm.ctpop.i32(i32 %1641) #16
  %1643 = trunc i32 %1642 to i8
  %1644 = and i8 %1643, 1
  %1645 = xor i8 %1644, 1
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1645, i8* %1646, align 1, !tbaa !2446
  %1647 = xor i64 4, %1631
  %1648 = xor i64 %1647, %1634
  %1649 = lshr i64 %1648, 4
  %1650 = trunc i64 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1651, i8* %1652, align 1, !tbaa !2447
  %1653 = icmp eq i64 %1634, 0
  %1654 = zext i1 %1653 to i8
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1654, i8* %1655, align 1, !tbaa !2448
  %1656 = lshr i64 %1634, 63
  %1657 = trunc i64 %1656 to i8
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1657, i8* %1658, align 1, !tbaa !2449
  %1659 = lshr i64 %1631, 63
  %1660 = xor i64 %1656, %1659
  %1661 = add nuw nsw i64 %1660, %1656
  %1662 = icmp eq i64 %1661, 2
  %1663 = zext i1 %1662 to i8
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1663, i8* %1664, align 1, !tbaa !2450
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 8
  %1667 = load i64, i64* %RCX
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 4
  store i64 %1669, i64* %PC
  %1670 = inttoptr i64 %1666 to i64*
  store i64 %1667, i64* %1670
  %1671 = load i64, i64* %RAX
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = sext i32 %1675 to i64
  store i64 %1676, i64* %RAX, align 8, !tbaa !2428
  %1677 = load i64, i64* %RAX
  %1678 = mul i64 %1677, 8
  %1679 = add i64 %1678, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 8
  store i64 %1681, i64* %PC
  %1682 = inttoptr i64 %1679 to i64*
  %1683 = load i64, i64* %1682
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RBP
  %1685 = sub i64 %1684, 40
  %1686 = load i64, i64* %RAX
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 4
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1685 to i64*
  store i64 %1686, i64* %1689
  %1690 = load i64, i64* %PC
  %1691 = sub i64 %1690, 251
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 5
  store i64 %1693, i64* %PC
  %1694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1691, i64* %1694, align 8, !tbaa !2428
  br label %block_400566

block_400ab2:                                     ; preds = %block_400566
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 7
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  store i32 28, i32* %1699
  %1700 = load i64, i64* %RBP
  %1701 = sub i64 %1700, 12
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 3
  store i64 %1703, i64* %PC
  %1704 = inttoptr i64 %1701 to i32*
  %1705 = load i32, i32* %1704
  %1706 = zext i32 %1705 to i64
  store i64 %1706, i64* %RDI, align 8, !tbaa !2428
  %1707 = load i64, i64* %PC
  %1708 = sub i64 %1707, 1484
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 5
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 5
  store i64 %1712, i64* %PC
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1714 = load i64, i64* %1713, align 8, !tbaa !2428
  %1715 = add i64 %1714, -8
  %1716 = inttoptr i64 %1715 to i64*
  store i64 %1710, i64* %1716
  store i64 %1715, i64* %1713, align 8, !tbaa !2428
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1708, i64* %1717, align 8, !tbaa !2428
  %1718 = load i64, i64* %PC
  %1719 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1718, %struct.Memory* %MEMORY.1)
  %1720 = load i64, i64* %RBP
  %1721 = sub i64 %1720, 8
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 4
  store i64 %1723, i64* %PC
  %1724 = inttoptr i64 %1721 to i64*
  %1725 = load i64, i64* %1724
  store i64 %1725, i64* %RAX, align 8, !tbaa !2428
  %1726 = load i64, i64* %RAX
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 3
  store i64 %1728, i64* %PC
  store i64 %1726, i64* %RCX, align 8, !tbaa !2428
  %1729 = load i64, i64* %RCX
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 4
  store i64 %1731, i64* %PC
  %1732 = add i64 4, %1729
  store i64 %1732, i64* %RCX, align 8, !tbaa !2428
  %1733 = icmp ult i64 %1732, %1729
  %1734 = icmp ult i64 %1732, 4
  %1735 = or i1 %1733, %1734
  %1736 = zext i1 %1735 to i8
  %1737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1736, i8* %1737, align 1, !tbaa !2432
  %1738 = trunc i64 %1732 to i32
  %1739 = and i32 %1738, 255
  %1740 = call i32 @llvm.ctpop.i32(i32 %1739) #16
  %1741 = trunc i32 %1740 to i8
  %1742 = and i8 %1741, 1
  %1743 = xor i8 %1742, 1
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1743, i8* %1744, align 1, !tbaa !2446
  %1745 = xor i64 4, %1729
  %1746 = xor i64 %1745, %1732
  %1747 = lshr i64 %1746, 4
  %1748 = trunc i64 %1747 to i8
  %1749 = and i8 %1748, 1
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1749, i8* %1750, align 1, !tbaa !2447
  %1751 = icmp eq i64 %1732, 0
  %1752 = zext i1 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1752, i8* %1753, align 1, !tbaa !2448
  %1754 = lshr i64 %1732, 63
  %1755 = trunc i64 %1754 to i8
  %1756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1755, i8* %1756, align 1, !tbaa !2449
  %1757 = lshr i64 %1729, 63
  %1758 = xor i64 %1754, %1757
  %1759 = add nuw nsw i64 %1758, %1754
  %1760 = icmp eq i64 %1759, 2
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1761, i8* %1762, align 1, !tbaa !2450
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 8
  %1765 = load i64, i64* %RCX
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 4
  store i64 %1767, i64* %PC
  %1768 = inttoptr i64 %1764 to i64*
  store i64 %1765, i64* %1768
  %1769 = load i64, i64* %RAX
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 3
  store i64 %1771, i64* %PC
  %1772 = inttoptr i64 %1769 to i32*
  %1773 = load i32, i32* %1772
  %1774 = sext i32 %1773 to i64
  store i64 %1774, i64* %RAX, align 8, !tbaa !2428
  %1775 = load i64, i64* %RAX
  %1776 = mul i64 %1775, 8
  %1777 = add i64 %1776, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 8
  store i64 %1779, i64* %PC
  %1780 = inttoptr i64 %1777 to i64*
  %1781 = load i64, i64* %1780
  store i64 %1781, i64* %RAX, align 8, !tbaa !2428
  %1782 = load i64, i64* %RBP
  %1783 = sub i64 %1782, 40
  %1784 = load i64, i64* %RAX
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 4
  store i64 %1786, i64* %PC
  %1787 = inttoptr i64 %1783 to i64*
  store i64 %1784, i64* %1787
  %1788 = load i64, i64* %PC
  %1789 = sub i64 %1788, 1401
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 5
  store i64 %1791, i64* %PC
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1789, i64* %1792, align 8, !tbaa !2428
  br label %block_400566

block_400559:                                     ; preds = %block_400566
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 12
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 7
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  store i32 0, i32* %1797
  %1798 = load i64, i64* %RSP
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 4
  store i64 %1800, i64* %PC
  %1801 = add i64 48, %1798
  store i64 %1801, i64* %RSP, align 8, !tbaa !2428
  %1802 = icmp ult i64 %1801, %1798
  %1803 = icmp ult i64 %1801, 48
  %1804 = or i1 %1802, %1803
  %1805 = zext i1 %1804 to i8
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1805, i8* %1806, align 1, !tbaa !2432
  %1807 = trunc i64 %1801 to i32
  %1808 = and i32 %1807, 255
  %1809 = call i32 @llvm.ctpop.i32(i32 %1808) #16
  %1810 = trunc i32 %1809 to i8
  %1811 = and i8 %1810, 1
  %1812 = xor i8 %1811, 1
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1812, i8* %1813, align 1, !tbaa !2446
  %1814 = xor i64 48, %1798
  %1815 = xor i64 %1814, %1801
  %1816 = lshr i64 %1815, 4
  %1817 = trunc i64 %1816 to i8
  %1818 = and i8 %1817, 1
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1818, i8* %1819, align 1, !tbaa !2447
  %1820 = icmp eq i64 %1801, 0
  %1821 = zext i1 %1820 to i8
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1821, i8* %1822, align 1, !tbaa !2448
  %1823 = lshr i64 %1801, 63
  %1824 = trunc i64 %1823 to i8
  %1825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1824, i8* %1825, align 1, !tbaa !2449
  %1826 = lshr i64 %1798, 63
  %1827 = xor i64 %1823, %1826
  %1828 = add nuw nsw i64 %1827, %1823
  %1829 = icmp eq i64 %1828, 2
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1830, i8* %1831, align 1, !tbaa !2450
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 1
  store i64 %1833, i64* %PC
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1835 = load i64, i64* %1834, align 8, !tbaa !2428
  %1836 = add i64 %1835, 8
  %1837 = inttoptr i64 %1835 to i64*
  %1838 = load i64, i64* %1837
  store i64 %1838, i64* %RBP, align 8, !tbaa !2428
  store i64 %1836, i64* %1834, align 8, !tbaa !2428
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 1
  store i64 %1840, i64* %PC
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1843 = load i64, i64* %1842, align 8, !tbaa !2428
  %1844 = inttoptr i64 %1843 to i64*
  %1845 = load i64, i64* %1844
  store i64 %1845, i64* %1841, align 8, !tbaa !2428
  %1846 = add i64 %1843, 8
  store i64 %1846, i64* %1842, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40072e:                                     ; preds = %block_400566
  %1847 = load i64, i64* %RBP
  %1848 = sub i64 %1847, 12
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 7
  store i64 %1850, i64* %PC
  %1851 = inttoptr i64 %1848 to i32*
  store i32 10, i32* %1851
  %1852 = load i64, i64* %RBP
  %1853 = sub i64 %1852, 12
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 3
  store i64 %1855, i64* %PC
  %1856 = inttoptr i64 %1853 to i32*
  %1857 = load i32, i32* %1856
  %1858 = zext i32 %1857 to i64
  store i64 %1858, i64* %RDI, align 8, !tbaa !2428
  %1859 = load i64, i64* %PC
  %1860 = sub i64 %1859, 584
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 5
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 5
  store i64 %1864, i64* %PC
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1866 = load i64, i64* %1865, align 8, !tbaa !2428
  %1867 = add i64 %1866, -8
  %1868 = inttoptr i64 %1867 to i64*
  store i64 %1862, i64* %1868
  store i64 %1867, i64* %1865, align 8, !tbaa !2428
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1860, i64* %1869, align 8, !tbaa !2428
  %1870 = load i64, i64* %PC
  %1871 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1870, %struct.Memory* %MEMORY.1)
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 8
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 4
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i64*
  %1877 = load i64, i64* %1876
  store i64 %1877, i64* %RAX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RAX
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  store i64 %1878, i64* %RCX, align 8, !tbaa !2428
  %1881 = load i64, i64* %RCX
  %1882 = load i64, i64* %PC
  %1883 = add i64 %1882, 4
  store i64 %1883, i64* %PC
  %1884 = add i64 4, %1881
  store i64 %1884, i64* %RCX, align 8, !tbaa !2428
  %1885 = icmp ult i64 %1884, %1881
  %1886 = icmp ult i64 %1884, 4
  %1887 = or i1 %1885, %1886
  %1888 = zext i1 %1887 to i8
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1888, i8* %1889, align 1, !tbaa !2432
  %1890 = trunc i64 %1884 to i32
  %1891 = and i32 %1890, 255
  %1892 = call i32 @llvm.ctpop.i32(i32 %1891) #16
  %1893 = trunc i32 %1892 to i8
  %1894 = and i8 %1893, 1
  %1895 = xor i8 %1894, 1
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1895, i8* %1896, align 1, !tbaa !2446
  %1897 = xor i64 4, %1881
  %1898 = xor i64 %1897, %1884
  %1899 = lshr i64 %1898, 4
  %1900 = trunc i64 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1901, i8* %1902, align 1, !tbaa !2447
  %1903 = icmp eq i64 %1884, 0
  %1904 = zext i1 %1903 to i8
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1904, i8* %1905, align 1, !tbaa !2448
  %1906 = lshr i64 %1884, 63
  %1907 = trunc i64 %1906 to i8
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1907, i8* %1908, align 1, !tbaa !2449
  %1909 = lshr i64 %1881, 63
  %1910 = xor i64 %1906, %1909
  %1911 = add nuw nsw i64 %1910, %1906
  %1912 = icmp eq i64 %1911, 2
  %1913 = zext i1 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1913, i8* %1914, align 1, !tbaa !2450
  %1915 = load i64, i64* %RBP
  %1916 = sub i64 %1915, 8
  %1917 = load i64, i64* %RCX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1916 to i64*
  store i64 %1917, i64* %1920
  %1921 = load i64, i64* %RAX
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 3
  store i64 %1923, i64* %PC
  %1924 = inttoptr i64 %1921 to i32*
  %1925 = load i32, i32* %1924
  %1926 = sext i32 %1925 to i64
  store i64 %1926, i64* %RAX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RAX
  %1928 = mul i64 %1927, 8
  %1929 = add i64 %1928, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 8
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to i64*
  %1933 = load i64, i64* %1932
  store i64 %1933, i64* %RAX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RBP
  %1935 = sub i64 %1934, 40
  %1936 = load i64, i64* %RAX
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 4
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1935 to i64*
  store i64 %1936, i64* %1939
  %1940 = load i64, i64* %PC
  %1941 = sub i64 %1940, 501
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 5
  store i64 %1943, i64* %PC
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1941, i64* %1944, align 8, !tbaa !2428
  br label %block_400566

block_400828:                                     ; preds = %block_400566
  %1945 = load i64, i64* %RBP
  %1946 = sub i64 %1945, 12
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 7
  store i64 %1948, i64* %PC
  %1949 = inttoptr i64 %1946 to i32*
  store i32 15, i32* %1949
  %1950 = load i64, i64* %RBP
  %1951 = sub i64 %1950, 12
  %1952 = load i64, i64* %PC
  %1953 = add i64 %1952, 3
  store i64 %1953, i64* %PC
  %1954 = inttoptr i64 %1951 to i32*
  %1955 = load i32, i32* %1954
  %1956 = zext i32 %1955 to i64
  store i64 %1956, i64* %RDI, align 8, !tbaa !2428
  %1957 = load i64, i64* %PC
  %1958 = sub i64 %1957, 834
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 5
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 5
  store i64 %1962, i64* %PC
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1964 = load i64, i64* %1963, align 8, !tbaa !2428
  %1965 = add i64 %1964, -8
  %1966 = inttoptr i64 %1965 to i64*
  store i64 %1960, i64* %1966
  store i64 %1965, i64* %1963, align 8, !tbaa !2428
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1958, i64* %1967, align 8, !tbaa !2428
  %1968 = load i64, i64* %PC
  %1969 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %1968, %struct.Memory* %MEMORY.1)
  %1970 = load i64, i64* %RBP
  %1971 = sub i64 %1970, 8
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 4
  store i64 %1973, i64* %PC
  %1974 = inttoptr i64 %1971 to i64*
  %1975 = load i64, i64* %1974
  store i64 %1975, i64* %RAX, align 8, !tbaa !2428
  %1976 = load i64, i64* %RAX
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 3
  store i64 %1978, i64* %PC
  store i64 %1976, i64* %RCX, align 8, !tbaa !2428
  %1979 = load i64, i64* %RCX
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 4
  store i64 %1981, i64* %PC
  %1982 = add i64 4, %1979
  store i64 %1982, i64* %RCX, align 8, !tbaa !2428
  %1983 = icmp ult i64 %1982, %1979
  %1984 = icmp ult i64 %1982, 4
  %1985 = or i1 %1983, %1984
  %1986 = zext i1 %1985 to i8
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1986, i8* %1987, align 1, !tbaa !2432
  %1988 = trunc i64 %1982 to i32
  %1989 = and i32 %1988, 255
  %1990 = call i32 @llvm.ctpop.i32(i32 %1989) #16
  %1991 = trunc i32 %1990 to i8
  %1992 = and i8 %1991, 1
  %1993 = xor i8 %1992, 1
  %1994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1993, i8* %1994, align 1, !tbaa !2446
  %1995 = xor i64 4, %1979
  %1996 = xor i64 %1995, %1982
  %1997 = lshr i64 %1996, 4
  %1998 = trunc i64 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1999, i8* %2000, align 1, !tbaa !2447
  %2001 = icmp eq i64 %1982, 0
  %2002 = zext i1 %2001 to i8
  %2003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2002, i8* %2003, align 1, !tbaa !2448
  %2004 = lshr i64 %1982, 63
  %2005 = trunc i64 %2004 to i8
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2005, i8* %2006, align 1, !tbaa !2449
  %2007 = lshr i64 %1979, 63
  %2008 = xor i64 %2004, %2007
  %2009 = add nuw nsw i64 %2008, %2004
  %2010 = icmp eq i64 %2009, 2
  %2011 = zext i1 %2010 to i8
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2011, i8* %2012, align 1, !tbaa !2450
  %2013 = load i64, i64* %RBP
  %2014 = sub i64 %2013, 8
  %2015 = load i64, i64* %RCX
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 4
  store i64 %2017, i64* %PC
  %2018 = inttoptr i64 %2014 to i64*
  store i64 %2015, i64* %2018
  %2019 = load i64, i64* %RAX
  %2020 = load i64, i64* %PC
  %2021 = add i64 %2020, 3
  store i64 %2021, i64* %PC
  %2022 = inttoptr i64 %2019 to i32*
  %2023 = load i32, i32* %2022
  %2024 = sext i32 %2023 to i64
  store i64 %2024, i64* %RAX, align 8, !tbaa !2428
  %2025 = load i64, i64* %RAX
  %2026 = mul i64 %2025, 8
  %2027 = add i64 %2026, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 8
  store i64 %2029, i64* %PC
  %2030 = inttoptr i64 %2027 to i64*
  %2031 = load i64, i64* %2030
  store i64 %2031, i64* %RAX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RBP
  %2033 = sub i64 %2032, 40
  %2034 = load i64, i64* %RAX
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 4
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2033 to i64*
  store i64 %2034, i64* %2037
  %2038 = load i64, i64* %PC
  %2039 = sub i64 %2038, 751
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 5
  store i64 %2041, i64* %PC
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2039, i64* %2042, align 8, !tbaa !2428
  br label %block_400566

block_400922:                                     ; preds = %block_400566
  %2043 = load i64, i64* %RBP
  %2044 = sub i64 %2043, 12
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 7
  store i64 %2046, i64* %PC
  %2047 = inttoptr i64 %2044 to i32*
  store i32 20, i32* %2047
  %2048 = load i64, i64* %RBP
  %2049 = sub i64 %2048, 12
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 3
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2049 to i32*
  %2053 = load i32, i32* %2052
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RDI, align 8, !tbaa !2428
  %2055 = load i64, i64* %PC
  %2056 = sub i64 %2055, 1084
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 5
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 5
  store i64 %2060, i64* %PC
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2062 = load i64, i64* %2061, align 8, !tbaa !2428
  %2063 = add i64 %2062, -8
  %2064 = inttoptr i64 %2063 to i64*
  store i64 %2058, i64* %2064
  store i64 %2063, i64* %2061, align 8, !tbaa !2428
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2056, i64* %2065, align 8, !tbaa !2428
  %2066 = load i64, i64* %PC
  %2067 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2066, %struct.Memory* %MEMORY.1)
  %2068 = load i64, i64* %RBP
  %2069 = sub i64 %2068, 8
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 4
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i64*
  %2073 = load i64, i64* %2072
  store i64 %2073, i64* %RAX, align 8, !tbaa !2428
  %2074 = load i64, i64* %RAX
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 3
  store i64 %2076, i64* %PC
  store i64 %2074, i64* %RCX, align 8, !tbaa !2428
  %2077 = load i64, i64* %RCX
  %2078 = load i64, i64* %PC
  %2079 = add i64 %2078, 4
  store i64 %2079, i64* %PC
  %2080 = add i64 4, %2077
  store i64 %2080, i64* %RCX, align 8, !tbaa !2428
  %2081 = icmp ult i64 %2080, %2077
  %2082 = icmp ult i64 %2080, 4
  %2083 = or i1 %2081, %2082
  %2084 = zext i1 %2083 to i8
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2084, i8* %2085, align 1, !tbaa !2432
  %2086 = trunc i64 %2080 to i32
  %2087 = and i32 %2086, 255
  %2088 = call i32 @llvm.ctpop.i32(i32 %2087) #16
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = xor i8 %2090, 1
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2091, i8* %2092, align 1, !tbaa !2446
  %2093 = xor i64 4, %2077
  %2094 = xor i64 %2093, %2080
  %2095 = lshr i64 %2094, 4
  %2096 = trunc i64 %2095 to i8
  %2097 = and i8 %2096, 1
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2097, i8* %2098, align 1, !tbaa !2447
  %2099 = icmp eq i64 %2080, 0
  %2100 = zext i1 %2099 to i8
  %2101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2100, i8* %2101, align 1, !tbaa !2448
  %2102 = lshr i64 %2080, 63
  %2103 = trunc i64 %2102 to i8
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2103, i8* %2104, align 1, !tbaa !2449
  %2105 = lshr i64 %2077, 63
  %2106 = xor i64 %2102, %2105
  %2107 = add nuw nsw i64 %2106, %2102
  %2108 = icmp eq i64 %2107, 2
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2109, i8* %2110, align 1, !tbaa !2450
  %2111 = load i64, i64* %RBP
  %2112 = sub i64 %2111, 8
  %2113 = load i64, i64* %RCX
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 4
  store i64 %2115, i64* %PC
  %2116 = inttoptr i64 %2112 to i64*
  store i64 %2113, i64* %2116
  %2117 = load i64, i64* %RAX
  %2118 = load i64, i64* %PC
  %2119 = add i64 %2118, 3
  store i64 %2119, i64* %PC
  %2120 = inttoptr i64 %2117 to i32*
  %2121 = load i32, i32* %2120
  %2122 = sext i32 %2121 to i64
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = load i64, i64* %RAX
  %2124 = mul i64 %2123, 8
  %2125 = add i64 %2124, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2126 = load i64, i64* %PC
  %2127 = add i64 %2126, 8
  store i64 %2127, i64* %PC
  %2128 = inttoptr i64 %2125 to i64*
  %2129 = load i64, i64* %2128
  store i64 %2129, i64* %RAX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RBP
  %2131 = sub i64 %2130, 40
  %2132 = load i64, i64* %RAX
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 4
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2131 to i64*
  store i64 %2132, i64* %2135
  %2136 = load i64, i64* %PC
  %2137 = sub i64 %2136, 1001
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 5
  store i64 %2139, i64* %PC
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2137, i64* %2140, align 8, !tbaa !2428
  br label %block_400566

block_40059e:                                     ; preds = %block_400566
  %2141 = load i64, i64* %RBP
  %2142 = sub i64 %2141, 12
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 7
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  store i32 2, i32* %2145
  %2146 = load i64, i64* %RBP
  %2147 = sub i64 %2146, 12
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 3
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2147 to i32*
  %2151 = load i32, i32* %2150
  %2152 = zext i32 %2151 to i64
  store i64 %2152, i64* %RDI, align 8, !tbaa !2428
  %2153 = load i64, i64* %PC
  %2154 = sub i64 %2153, 184
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 5
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 5
  store i64 %2158, i64* %PC
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2160 = load i64, i64* %2159, align 8, !tbaa !2428
  %2161 = add i64 %2160, -8
  %2162 = inttoptr i64 %2161 to i64*
  store i64 %2156, i64* %2162
  store i64 %2161, i64* %2159, align 8, !tbaa !2428
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2154, i64* %2163, align 8, !tbaa !2428
  %2164 = load i64, i64* %PC
  %2165 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2164, %struct.Memory* %MEMORY.1)
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 8
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 4
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i64*
  %2171 = load i64, i64* %2170
  store i64 %2171, i64* %RAX, align 8, !tbaa !2428
  %2172 = load i64, i64* %RAX
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  store i64 %2172, i64* %RCX, align 8, !tbaa !2428
  %2175 = load i64, i64* %RCX
  %2176 = load i64, i64* %PC
  %2177 = add i64 %2176, 4
  store i64 %2177, i64* %PC
  %2178 = add i64 4, %2175
  store i64 %2178, i64* %RCX, align 8, !tbaa !2428
  %2179 = icmp ult i64 %2178, %2175
  %2180 = icmp ult i64 %2178, 4
  %2181 = or i1 %2179, %2180
  %2182 = zext i1 %2181 to i8
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2182, i8* %2183, align 1, !tbaa !2432
  %2184 = trunc i64 %2178 to i32
  %2185 = and i32 %2184, 255
  %2186 = call i32 @llvm.ctpop.i32(i32 %2185) #16
  %2187 = trunc i32 %2186 to i8
  %2188 = and i8 %2187, 1
  %2189 = xor i8 %2188, 1
  %2190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2189, i8* %2190, align 1, !tbaa !2446
  %2191 = xor i64 4, %2175
  %2192 = xor i64 %2191, %2178
  %2193 = lshr i64 %2192, 4
  %2194 = trunc i64 %2193 to i8
  %2195 = and i8 %2194, 1
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2195, i8* %2196, align 1, !tbaa !2447
  %2197 = icmp eq i64 %2178, 0
  %2198 = zext i1 %2197 to i8
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2198, i8* %2199, align 1, !tbaa !2448
  %2200 = lshr i64 %2178, 63
  %2201 = trunc i64 %2200 to i8
  %2202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2201, i8* %2202, align 1, !tbaa !2449
  %2203 = lshr i64 %2175, 63
  %2204 = xor i64 %2200, %2203
  %2205 = add nuw nsw i64 %2204, %2200
  %2206 = icmp eq i64 %2205, 2
  %2207 = zext i1 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2207, i8* %2208, align 1, !tbaa !2450
  %2209 = load i64, i64* %RBP
  %2210 = sub i64 %2209, 8
  %2211 = load i64, i64* %RCX
  %2212 = load i64, i64* %PC
  %2213 = add i64 %2212, 4
  store i64 %2213, i64* %PC
  %2214 = inttoptr i64 %2210 to i64*
  store i64 %2211, i64* %2214
  %2215 = load i64, i64* %RAX
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 3
  store i64 %2217, i64* %PC
  %2218 = inttoptr i64 %2215 to i32*
  %2219 = load i32, i32* %2218
  %2220 = sext i32 %2219 to i64
  store i64 %2220, i64* %RAX, align 8, !tbaa !2428
  %2221 = load i64, i64* %RAX
  %2222 = mul i64 %2221, 8
  %2223 = add i64 %2222, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 8
  store i64 %2225, i64* %PC
  %2226 = inttoptr i64 %2223 to i64*
  %2227 = load i64, i64* %2226
  store i64 %2227, i64* %RAX, align 8, !tbaa !2428
  %2228 = load i64, i64* %RBP
  %2229 = sub i64 %2228, 40
  %2230 = load i64, i64* %RAX
  %2231 = load i64, i64* %PC
  %2232 = add i64 %2231, 4
  store i64 %2232, i64* %PC
  %2233 = inttoptr i64 %2229 to i64*
  store i64 %2230, i64* %2233
  %2234 = load i64, i64* %PC
  %2235 = sub i64 %2234, 101
  %2236 = load i64, i64* %PC
  %2237 = add i64 %2236, 5
  store i64 %2237, i64* %PC
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2235, i64* %2238, align 8, !tbaa !2428
  br label %block_400566

block_400566:                                     ; preds = %block_400a80, %block_400602, %block_400986, %block_40088c, %block_400792, %block_400b16, %block_400698, %block_400a1c, %block_40059e, %block_400922, %block_400828, %block_40072e, %block_400ab2, %block_400634, %block_4009b8, %block_4007c4, %block_4008c5, %block_400b48, %block_4006ca, %block_400a4e, %block_4005d0, %block_400954, %block_40085a, %block_400760, %block_400ae4, %block_400666, %block_4009ea, %block_40056c, %block_4008f0, %block_4007f6
  %MEMORY.1 = phi %struct.Memory* [ %1322, %block_4008c5 ], [ %2067, %block_400922 ], [ %1969, %block_400828 ], [ %1871, %block_40072e ], [ %1033, %block_400a4e ], [ %1719, %block_400ab2 ], [ %1621, %block_400634 ], [ %1523, %block_4009b8 ], [ %1420, %block_4007c4 ], [ %1229, %block_400b48 ], [ %1131, %block_4006ca ], [ %151, %block_4008f0 ], [ %53, %block_4007f6 ], [ %935, %block_4005d0 ], [ %347, %block_4009ea ], [ %249, %block_40056c ], [ %445, %block_400666 ], [ %543, %block_400ae4 ], [ %641, %block_400760 ], [ %739, %block_40085a ], [ %837, %block_400954 ], [ %2165, %block_40059e ], [ %2274, %block_400a1c ], [ %2372, %block_400698 ], [ %2470, %block_400b16 ], [ %2568, %block_400792 ], [ %2666, %block_40088c ], [ %2764, %block_400986 ], [ %2862, %block_400602 ], [ %2960, %block_400a80 ]
  %2239 = load i64, i64* %RBP
  %2240 = sub i64 %2239, 40
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 4
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to i64*
  %2244 = load i64, i64* %2243
  store i64 %2244, i64* %RAX, align 8, !tbaa !2428
  %2245 = load i64, i64* %RAX
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 2
  store i64 %2247, i64* %PC
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2245, i64* %2248, align 8, !tbaa !2428
  %2249 = load i64, i64* %PC
  switch i64 %2249, label %3034 [
    i64 4196992, label %block_400a80
    i64 4195842, label %block_400602
    i64 4196742, label %block_400986
    i64 4196492, label %block_40088c
    i64 4196242, label %block_400792
    i64 4197142, label %block_400b16
    i64 4195992, label %block_400698
    i64 4196892, label %block_400a1c
    i64 4195742, label %block_40059e
    i64 4196692, label %block_400954
    i64 4196442, label %block_40085a
    i64 4196192, label %block_400760
    i64 4197092, label %block_400ae4
    i64 4195942, label %block_400666
    i64 4196092, label %block_4006fc
    i64 4195692, label %block_40056c
    i64 4196842, label %block_4009ea
    i64 4195792, label %block_4005d0
    i64 4196342, label %block_4007f6
    i64 4196592, label %block_4008f0
    i64 4196042, label %block_4006ca
    i64 4197192, label %block_400b48
    i64 4196292, label %block_4007c4
    i64 4196542, label %block_4008be
    i64 4196792, label %block_4009b8
    i64 4195892, label %block_400634
    i64 4197042, label %block_400ab2
    i64 4196942, label %block_400a4e
    i64 4195673, label %block_400559
    i64 4196142, label %block_40072e
    i64 4196392, label %block_400828
    i64 4196642, label %block_400922
  ]

block_400a1c:                                     ; preds = %block_400566
  %2250 = load i64, i64* %RBP
  %2251 = sub i64 %2250, 12
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 7
  store i64 %2253, i64* %PC
  %2254 = inttoptr i64 %2251 to i32*
  store i32 25, i32* %2254
  %2255 = load i64, i64* %RBP
  %2256 = sub i64 %2255, 12
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 3
  store i64 %2258, i64* %PC
  %2259 = inttoptr i64 %2256 to i32*
  %2260 = load i32, i32* %2259
  %2261 = zext i32 %2260 to i64
  store i64 %2261, i64* %RDI, align 8, !tbaa !2428
  %2262 = load i64, i64* %PC
  %2263 = sub i64 %2262, 1334
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 5
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 5
  store i64 %2267, i64* %PC
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2269 = load i64, i64* %2268, align 8, !tbaa !2428
  %2270 = add i64 %2269, -8
  %2271 = inttoptr i64 %2270 to i64*
  store i64 %2265, i64* %2271
  store i64 %2270, i64* %2268, align 8, !tbaa !2428
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2263, i64* %2272, align 8, !tbaa !2428
  %2273 = load i64, i64* %PC
  %2274 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2273, %struct.Memory* %MEMORY.1)
  %2275 = load i64, i64* %RBP
  %2276 = sub i64 %2275, 8
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 4
  store i64 %2278, i64* %PC
  %2279 = inttoptr i64 %2276 to i64*
  %2280 = load i64, i64* %2279
  store i64 %2280, i64* %RAX, align 8, !tbaa !2428
  %2281 = load i64, i64* %RAX
  %2282 = load i64, i64* %PC
  %2283 = add i64 %2282, 3
  store i64 %2283, i64* %PC
  store i64 %2281, i64* %RCX, align 8, !tbaa !2428
  %2284 = load i64, i64* %RCX
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 4
  store i64 %2286, i64* %PC
  %2287 = add i64 4, %2284
  store i64 %2287, i64* %RCX, align 8, !tbaa !2428
  %2288 = icmp ult i64 %2287, %2284
  %2289 = icmp ult i64 %2287, 4
  %2290 = or i1 %2288, %2289
  %2291 = zext i1 %2290 to i8
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2291, i8* %2292, align 1, !tbaa !2432
  %2293 = trunc i64 %2287 to i32
  %2294 = and i32 %2293, 255
  %2295 = call i32 @llvm.ctpop.i32(i32 %2294) #16
  %2296 = trunc i32 %2295 to i8
  %2297 = and i8 %2296, 1
  %2298 = xor i8 %2297, 1
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2298, i8* %2299, align 1, !tbaa !2446
  %2300 = xor i64 4, %2284
  %2301 = xor i64 %2300, %2287
  %2302 = lshr i64 %2301, 4
  %2303 = trunc i64 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2304, i8* %2305, align 1, !tbaa !2447
  %2306 = icmp eq i64 %2287, 0
  %2307 = zext i1 %2306 to i8
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2307, i8* %2308, align 1, !tbaa !2448
  %2309 = lshr i64 %2287, 63
  %2310 = trunc i64 %2309 to i8
  %2311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2310, i8* %2311, align 1, !tbaa !2449
  %2312 = lshr i64 %2284, 63
  %2313 = xor i64 %2309, %2312
  %2314 = add nuw nsw i64 %2313, %2309
  %2315 = icmp eq i64 %2314, 2
  %2316 = zext i1 %2315 to i8
  %2317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2316, i8* %2317, align 1, !tbaa !2450
  %2318 = load i64, i64* %RBP
  %2319 = sub i64 %2318, 8
  %2320 = load i64, i64* %RCX
  %2321 = load i64, i64* %PC
  %2322 = add i64 %2321, 4
  store i64 %2322, i64* %PC
  %2323 = inttoptr i64 %2319 to i64*
  store i64 %2320, i64* %2323
  %2324 = load i64, i64* %RAX
  %2325 = load i64, i64* %PC
  %2326 = add i64 %2325, 3
  store i64 %2326, i64* %PC
  %2327 = inttoptr i64 %2324 to i32*
  %2328 = load i32, i32* %2327
  %2329 = sext i32 %2328 to i64
  store i64 %2329, i64* %RAX, align 8, !tbaa !2428
  %2330 = load i64, i64* %RAX
  %2331 = mul i64 %2330, 8
  %2332 = add i64 %2331, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2333 = load i64, i64* %PC
  %2334 = add i64 %2333, 8
  store i64 %2334, i64* %PC
  %2335 = inttoptr i64 %2332 to i64*
  %2336 = load i64, i64* %2335
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = load i64, i64* %RBP
  %2338 = sub i64 %2337, 40
  %2339 = load i64, i64* %RAX
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 4
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2338 to i64*
  store i64 %2339, i64* %2342
  %2343 = load i64, i64* %PC
  %2344 = sub i64 %2343, 1251
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 5
  store i64 %2346, i64* %PC
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2344, i64* %2347, align 8, !tbaa !2428
  br label %block_400566

block_400698:                                     ; preds = %block_400566
  %2348 = load i64, i64* %RBP
  %2349 = sub i64 %2348, 12
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 7
  store i64 %2351, i64* %PC
  %2352 = inttoptr i64 %2349 to i32*
  store i32 7, i32* %2352
  %2353 = load i64, i64* %RBP
  %2354 = sub i64 %2353, 12
  %2355 = load i64, i64* %PC
  %2356 = add i64 %2355, 3
  store i64 %2356, i64* %PC
  %2357 = inttoptr i64 %2354 to i32*
  %2358 = load i32, i32* %2357
  %2359 = zext i32 %2358 to i64
  store i64 %2359, i64* %RDI, align 8, !tbaa !2428
  %2360 = load i64, i64* %PC
  %2361 = sub i64 %2360, 434
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 5
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 5
  store i64 %2365, i64* %PC
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2367 = load i64, i64* %2366, align 8, !tbaa !2428
  %2368 = add i64 %2367, -8
  %2369 = inttoptr i64 %2368 to i64*
  store i64 %2363, i64* %2369
  store i64 %2368, i64* %2366, align 8, !tbaa !2428
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2361, i64* %2370, align 8, !tbaa !2428
  %2371 = load i64, i64* %PC
  %2372 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2371, %struct.Memory* %MEMORY.1)
  %2373 = load i64, i64* %RBP
  %2374 = sub i64 %2373, 8
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 4
  store i64 %2376, i64* %PC
  %2377 = inttoptr i64 %2374 to i64*
  %2378 = load i64, i64* %2377
  store i64 %2378, i64* %RAX, align 8, !tbaa !2428
  %2379 = load i64, i64* %RAX
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 3
  store i64 %2381, i64* %PC
  store i64 %2379, i64* %RCX, align 8, !tbaa !2428
  %2382 = load i64, i64* %RCX
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 4
  store i64 %2384, i64* %PC
  %2385 = add i64 4, %2382
  store i64 %2385, i64* %RCX, align 8, !tbaa !2428
  %2386 = icmp ult i64 %2385, %2382
  %2387 = icmp ult i64 %2385, 4
  %2388 = or i1 %2386, %2387
  %2389 = zext i1 %2388 to i8
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2389, i8* %2390, align 1, !tbaa !2432
  %2391 = trunc i64 %2385 to i32
  %2392 = and i32 %2391, 255
  %2393 = call i32 @llvm.ctpop.i32(i32 %2392) #16
  %2394 = trunc i32 %2393 to i8
  %2395 = and i8 %2394, 1
  %2396 = xor i8 %2395, 1
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2396, i8* %2397, align 1, !tbaa !2446
  %2398 = xor i64 4, %2382
  %2399 = xor i64 %2398, %2385
  %2400 = lshr i64 %2399, 4
  %2401 = trunc i64 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2402, i8* %2403, align 1, !tbaa !2447
  %2404 = icmp eq i64 %2385, 0
  %2405 = zext i1 %2404 to i8
  %2406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2405, i8* %2406, align 1, !tbaa !2448
  %2407 = lshr i64 %2385, 63
  %2408 = trunc i64 %2407 to i8
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2408, i8* %2409, align 1, !tbaa !2449
  %2410 = lshr i64 %2382, 63
  %2411 = xor i64 %2407, %2410
  %2412 = add nuw nsw i64 %2411, %2407
  %2413 = icmp eq i64 %2412, 2
  %2414 = zext i1 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = load i64, i64* %RBP
  %2417 = sub i64 %2416, 8
  %2418 = load i64, i64* %RCX
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 4
  store i64 %2420, i64* %PC
  %2421 = inttoptr i64 %2417 to i64*
  store i64 %2418, i64* %2421
  %2422 = load i64, i64* %RAX
  %2423 = load i64, i64* %PC
  %2424 = add i64 %2423, 3
  store i64 %2424, i64* %PC
  %2425 = inttoptr i64 %2422 to i32*
  %2426 = load i32, i32* %2425
  %2427 = sext i32 %2426 to i64
  store i64 %2427, i64* %RAX, align 8, !tbaa !2428
  %2428 = load i64, i64* %RAX
  %2429 = mul i64 %2428, 8
  %2430 = add i64 %2429, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2431 = load i64, i64* %PC
  %2432 = add i64 %2431, 8
  store i64 %2432, i64* %PC
  %2433 = inttoptr i64 %2430 to i64*
  %2434 = load i64, i64* %2433
  store i64 %2434, i64* %RAX, align 8, !tbaa !2428
  %2435 = load i64, i64* %RBP
  %2436 = sub i64 %2435, 40
  %2437 = load i64, i64* %RAX
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 4
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2436 to i64*
  store i64 %2437, i64* %2440
  %2441 = load i64, i64* %PC
  %2442 = sub i64 %2441, 351
  %2443 = load i64, i64* %PC
  %2444 = add i64 %2443, 5
  store i64 %2444, i64* %PC
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2442, i64* %2445, align 8, !tbaa !2428
  br label %block_400566

block_400b16:                                     ; preds = %block_400566
  %2446 = load i64, i64* %RBP
  %2447 = sub i64 %2446, 12
  %2448 = load i64, i64* %PC
  %2449 = add i64 %2448, 7
  store i64 %2449, i64* %PC
  %2450 = inttoptr i64 %2447 to i32*
  store i32 30, i32* %2450
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 12
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 3
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i32*
  %2456 = load i32, i32* %2455
  %2457 = zext i32 %2456 to i64
  store i64 %2457, i64* %RDI, align 8, !tbaa !2428
  %2458 = load i64, i64* %PC
  %2459 = sub i64 %2458, 1584
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 5
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 5
  store i64 %2463, i64* %PC
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2465 = load i64, i64* %2464, align 8, !tbaa !2428
  %2466 = add i64 %2465, -8
  %2467 = inttoptr i64 %2466 to i64*
  store i64 %2461, i64* %2467
  store i64 %2466, i64* %2464, align 8, !tbaa !2428
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2459, i64* %2468, align 8, !tbaa !2428
  %2469 = load i64, i64* %PC
  %2470 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2469, %struct.Memory* %MEMORY.1)
  %2471 = load i64, i64* %RBP
  %2472 = sub i64 %2471, 8
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 4
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2472 to i64*
  %2476 = load i64, i64* %2475
  store i64 %2476, i64* %RAX, align 8, !tbaa !2428
  %2477 = load i64, i64* %RAX
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 3
  store i64 %2479, i64* %PC
  store i64 %2477, i64* %RCX, align 8, !tbaa !2428
  %2480 = load i64, i64* %RCX
  %2481 = load i64, i64* %PC
  %2482 = add i64 %2481, 4
  store i64 %2482, i64* %PC
  %2483 = add i64 4, %2480
  store i64 %2483, i64* %RCX, align 8, !tbaa !2428
  %2484 = icmp ult i64 %2483, %2480
  %2485 = icmp ult i64 %2483, 4
  %2486 = or i1 %2484, %2485
  %2487 = zext i1 %2486 to i8
  %2488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2487, i8* %2488, align 1, !tbaa !2432
  %2489 = trunc i64 %2483 to i32
  %2490 = and i32 %2489, 255
  %2491 = call i32 @llvm.ctpop.i32(i32 %2490) #16
  %2492 = trunc i32 %2491 to i8
  %2493 = and i8 %2492, 1
  %2494 = xor i8 %2493, 1
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2494, i8* %2495, align 1, !tbaa !2446
  %2496 = xor i64 4, %2480
  %2497 = xor i64 %2496, %2483
  %2498 = lshr i64 %2497, 4
  %2499 = trunc i64 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2500, i8* %2501, align 1, !tbaa !2447
  %2502 = icmp eq i64 %2483, 0
  %2503 = zext i1 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2503, i8* %2504, align 1, !tbaa !2448
  %2505 = lshr i64 %2483, 63
  %2506 = trunc i64 %2505 to i8
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2506, i8* %2507, align 1, !tbaa !2449
  %2508 = lshr i64 %2480, 63
  %2509 = xor i64 %2505, %2508
  %2510 = add nuw nsw i64 %2509, %2505
  %2511 = icmp eq i64 %2510, 2
  %2512 = zext i1 %2511 to i8
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2512, i8* %2513, align 1, !tbaa !2450
  %2514 = load i64, i64* %RBP
  %2515 = sub i64 %2514, 8
  %2516 = load i64, i64* %RCX
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 4
  store i64 %2518, i64* %PC
  %2519 = inttoptr i64 %2515 to i64*
  store i64 %2516, i64* %2519
  %2520 = load i64, i64* %RAX
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 3
  store i64 %2522, i64* %PC
  %2523 = inttoptr i64 %2520 to i32*
  %2524 = load i32, i32* %2523
  %2525 = sext i32 %2524 to i64
  store i64 %2525, i64* %RAX, align 8, !tbaa !2428
  %2526 = load i64, i64* %RAX
  %2527 = mul i64 %2526, 8
  %2528 = add i64 %2527, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 8
  store i64 %2530, i64* %PC
  %2531 = inttoptr i64 %2528 to i64*
  %2532 = load i64, i64* %2531
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RBP
  %2534 = sub i64 %2533, 40
  %2535 = load i64, i64* %RAX
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 4
  store i64 %2537, i64* %PC
  %2538 = inttoptr i64 %2534 to i64*
  store i64 %2535, i64* %2538
  %2539 = load i64, i64* %PC
  %2540 = sub i64 %2539, 1501
  %2541 = load i64, i64* %PC
  %2542 = add i64 %2541, 5
  store i64 %2542, i64* %PC
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2540, i64* %2543, align 8, !tbaa !2428
  br label %block_400566

block_400792:                                     ; preds = %block_400566
  %2544 = load i64, i64* %RBP
  %2545 = sub i64 %2544, 12
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 7
  store i64 %2547, i64* %PC
  %2548 = inttoptr i64 %2545 to i32*
  store i32 12, i32* %2548
  %2549 = load i64, i64* %RBP
  %2550 = sub i64 %2549, 12
  %2551 = load i64, i64* %PC
  %2552 = add i64 %2551, 3
  store i64 %2552, i64* %PC
  %2553 = inttoptr i64 %2550 to i32*
  %2554 = load i32, i32* %2553
  %2555 = zext i32 %2554 to i64
  store i64 %2555, i64* %RDI, align 8, !tbaa !2428
  %2556 = load i64, i64* %PC
  %2557 = sub i64 %2556, 684
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 5
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 5
  store i64 %2561, i64* %PC
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2563 = load i64, i64* %2562, align 8, !tbaa !2428
  %2564 = add i64 %2563, -8
  %2565 = inttoptr i64 %2564 to i64*
  store i64 %2559, i64* %2565
  store i64 %2564, i64* %2562, align 8, !tbaa !2428
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2557, i64* %2566, align 8, !tbaa !2428
  %2567 = load i64, i64* %PC
  %2568 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2567, %struct.Memory* %MEMORY.1)
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 8
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 4
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to i64*
  %2574 = load i64, i64* %2573
  store i64 %2574, i64* %RAX, align 8, !tbaa !2428
  %2575 = load i64, i64* %RAX
  %2576 = load i64, i64* %PC
  %2577 = add i64 %2576, 3
  store i64 %2577, i64* %PC
  store i64 %2575, i64* %RCX, align 8, !tbaa !2428
  %2578 = load i64, i64* %RCX
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 4
  store i64 %2580, i64* %PC
  %2581 = add i64 4, %2578
  store i64 %2581, i64* %RCX, align 8, !tbaa !2428
  %2582 = icmp ult i64 %2581, %2578
  %2583 = icmp ult i64 %2581, 4
  %2584 = or i1 %2582, %2583
  %2585 = zext i1 %2584 to i8
  %2586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2585, i8* %2586, align 1, !tbaa !2432
  %2587 = trunc i64 %2581 to i32
  %2588 = and i32 %2587, 255
  %2589 = call i32 @llvm.ctpop.i32(i32 %2588) #16
  %2590 = trunc i32 %2589 to i8
  %2591 = and i8 %2590, 1
  %2592 = xor i8 %2591, 1
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2592, i8* %2593, align 1, !tbaa !2446
  %2594 = xor i64 4, %2578
  %2595 = xor i64 %2594, %2581
  %2596 = lshr i64 %2595, 4
  %2597 = trunc i64 %2596 to i8
  %2598 = and i8 %2597, 1
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2598, i8* %2599, align 1, !tbaa !2447
  %2600 = icmp eq i64 %2581, 0
  %2601 = zext i1 %2600 to i8
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2601, i8* %2602, align 1, !tbaa !2448
  %2603 = lshr i64 %2581, 63
  %2604 = trunc i64 %2603 to i8
  %2605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2604, i8* %2605, align 1, !tbaa !2449
  %2606 = lshr i64 %2578, 63
  %2607 = xor i64 %2603, %2606
  %2608 = add nuw nsw i64 %2607, %2603
  %2609 = icmp eq i64 %2608, 2
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2610, i8* %2611, align 1, !tbaa !2450
  %2612 = load i64, i64* %RBP
  %2613 = sub i64 %2612, 8
  %2614 = load i64, i64* %RCX
  %2615 = load i64, i64* %PC
  %2616 = add i64 %2615, 4
  store i64 %2616, i64* %PC
  %2617 = inttoptr i64 %2613 to i64*
  store i64 %2614, i64* %2617
  %2618 = load i64, i64* %RAX
  %2619 = load i64, i64* %PC
  %2620 = add i64 %2619, 3
  store i64 %2620, i64* %PC
  %2621 = inttoptr i64 %2618 to i32*
  %2622 = load i32, i32* %2621
  %2623 = sext i32 %2622 to i64
  store i64 %2623, i64* %RAX, align 8, !tbaa !2428
  %2624 = load i64, i64* %RAX
  %2625 = mul i64 %2624, 8
  %2626 = add i64 %2625, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2627 = load i64, i64* %PC
  %2628 = add i64 %2627, 8
  store i64 %2628, i64* %PC
  %2629 = inttoptr i64 %2626 to i64*
  %2630 = load i64, i64* %2629
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RBP
  %2632 = sub i64 %2631, 40
  %2633 = load i64, i64* %RAX
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 4
  store i64 %2635, i64* %PC
  %2636 = inttoptr i64 %2632 to i64*
  store i64 %2633, i64* %2636
  %2637 = load i64, i64* %PC
  %2638 = sub i64 %2637, 601
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 5
  store i64 %2640, i64* %PC
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2638, i64* %2641, align 8, !tbaa !2428
  br label %block_400566

block_40088c:                                     ; preds = %block_400566
  %2642 = load i64, i64* %RBP
  %2643 = sub i64 %2642, 12
  %2644 = load i64, i64* %PC
  %2645 = add i64 %2644, 7
  store i64 %2645, i64* %PC
  %2646 = inttoptr i64 %2643 to i32*
  store i32 17, i32* %2646
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 12
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 3
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to i32*
  %2652 = load i32, i32* %2651
  %2653 = zext i32 %2652 to i64
  store i64 %2653, i64* %RDI, align 8, !tbaa !2428
  %2654 = load i64, i64* %PC
  %2655 = sub i64 %2654, 934
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 5
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  store i64 %2659, i64* %PC
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2661 = load i64, i64* %2660, align 8, !tbaa !2428
  %2662 = add i64 %2661, -8
  %2663 = inttoptr i64 %2662 to i64*
  store i64 %2657, i64* %2663
  store i64 %2662, i64* %2660, align 8, !tbaa !2428
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2655, i64* %2664, align 8, !tbaa !2428
  %2665 = load i64, i64* %PC
  %2666 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2665, %struct.Memory* %MEMORY.1)
  %2667 = load i64, i64* %RBP
  %2668 = sub i64 %2667, 8
  %2669 = load i64, i64* %PC
  %2670 = add i64 %2669, 4
  store i64 %2670, i64* %PC
  %2671 = inttoptr i64 %2668 to i64*
  %2672 = load i64, i64* %2671
  store i64 %2672, i64* %RAX, align 8, !tbaa !2428
  %2673 = load i64, i64* %RAX
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 3
  store i64 %2675, i64* %PC
  store i64 %2673, i64* %RCX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RCX
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 4
  store i64 %2678, i64* %PC
  %2679 = add i64 4, %2676
  store i64 %2679, i64* %RCX, align 8, !tbaa !2428
  %2680 = icmp ult i64 %2679, %2676
  %2681 = icmp ult i64 %2679, 4
  %2682 = or i1 %2680, %2681
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2683, i8* %2684, align 1, !tbaa !2432
  %2685 = trunc i64 %2679 to i32
  %2686 = and i32 %2685, 255
  %2687 = call i32 @llvm.ctpop.i32(i32 %2686) #16
  %2688 = trunc i32 %2687 to i8
  %2689 = and i8 %2688, 1
  %2690 = xor i8 %2689, 1
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2690, i8* %2691, align 1, !tbaa !2446
  %2692 = xor i64 4, %2676
  %2693 = xor i64 %2692, %2679
  %2694 = lshr i64 %2693, 4
  %2695 = trunc i64 %2694 to i8
  %2696 = and i8 %2695, 1
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2696, i8* %2697, align 1, !tbaa !2447
  %2698 = icmp eq i64 %2679, 0
  %2699 = zext i1 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2699, i8* %2700, align 1, !tbaa !2448
  %2701 = lshr i64 %2679, 63
  %2702 = trunc i64 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2702, i8* %2703, align 1, !tbaa !2449
  %2704 = lshr i64 %2676, 63
  %2705 = xor i64 %2701, %2704
  %2706 = add nuw nsw i64 %2705, %2701
  %2707 = icmp eq i64 %2706, 2
  %2708 = zext i1 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2708, i8* %2709, align 1, !tbaa !2450
  %2710 = load i64, i64* %RBP
  %2711 = sub i64 %2710, 8
  %2712 = load i64, i64* %RCX
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 4
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2711 to i64*
  store i64 %2712, i64* %2715
  %2716 = load i64, i64* %RAX
  %2717 = load i64, i64* %PC
  %2718 = add i64 %2717, 3
  store i64 %2718, i64* %PC
  %2719 = inttoptr i64 %2716 to i32*
  %2720 = load i32, i32* %2719
  %2721 = sext i32 %2720 to i64
  store i64 %2721, i64* %RAX, align 8, !tbaa !2428
  %2722 = load i64, i64* %RAX
  %2723 = mul i64 %2722, 8
  %2724 = add i64 %2723, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2725 = load i64, i64* %PC
  %2726 = add i64 %2725, 8
  store i64 %2726, i64* %PC
  %2727 = inttoptr i64 %2724 to i64*
  %2728 = load i64, i64* %2727
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = load i64, i64* %RBP
  %2730 = sub i64 %2729, 40
  %2731 = load i64, i64* %RAX
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 4
  store i64 %2733, i64* %PC
  %2734 = inttoptr i64 %2730 to i64*
  store i64 %2731, i64* %2734
  %2735 = load i64, i64* %PC
  %2736 = sub i64 %2735, 851
  %2737 = load i64, i64* %PC
  %2738 = add i64 %2737, 5
  store i64 %2738, i64* %PC
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2736, i64* %2739, align 8, !tbaa !2428
  br label %block_400566

block_400986:                                     ; preds = %block_400566
  %2740 = load i64, i64* %RBP
  %2741 = sub i64 %2740, 12
  %2742 = load i64, i64* %PC
  %2743 = add i64 %2742, 7
  store i64 %2743, i64* %PC
  %2744 = inttoptr i64 %2741 to i32*
  store i32 22, i32* %2744
  %2745 = load i64, i64* %RBP
  %2746 = sub i64 %2745, 12
  %2747 = load i64, i64* %PC
  %2748 = add i64 %2747, 3
  store i64 %2748, i64* %PC
  %2749 = inttoptr i64 %2746 to i32*
  %2750 = load i32, i32* %2749
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RDI, align 8, !tbaa !2428
  %2752 = load i64, i64* %PC
  %2753 = sub i64 %2752, 1184
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 5
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  store i64 %2757, i64* %PC
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2759 = load i64, i64* %2758, align 8, !tbaa !2428
  %2760 = add i64 %2759, -8
  %2761 = inttoptr i64 %2760 to i64*
  store i64 %2755, i64* %2761
  store i64 %2760, i64* %2758, align 8, !tbaa !2428
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2753, i64* %2762, align 8, !tbaa !2428
  %2763 = load i64, i64* %PC
  %2764 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2763, %struct.Memory* %MEMORY.1)
  %2765 = load i64, i64* %RBP
  %2766 = sub i64 %2765, 8
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 4
  store i64 %2768, i64* %PC
  %2769 = inttoptr i64 %2766 to i64*
  %2770 = load i64, i64* %2769
  store i64 %2770, i64* %RAX, align 8, !tbaa !2428
  %2771 = load i64, i64* %RAX
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 3
  store i64 %2773, i64* %PC
  store i64 %2771, i64* %RCX, align 8, !tbaa !2428
  %2774 = load i64, i64* %RCX
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 4
  store i64 %2776, i64* %PC
  %2777 = add i64 4, %2774
  store i64 %2777, i64* %RCX, align 8, !tbaa !2428
  %2778 = icmp ult i64 %2777, %2774
  %2779 = icmp ult i64 %2777, 4
  %2780 = or i1 %2778, %2779
  %2781 = zext i1 %2780 to i8
  %2782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2781, i8* %2782, align 1, !tbaa !2432
  %2783 = trunc i64 %2777 to i32
  %2784 = and i32 %2783, 255
  %2785 = call i32 @llvm.ctpop.i32(i32 %2784) #16
  %2786 = trunc i32 %2785 to i8
  %2787 = and i8 %2786, 1
  %2788 = xor i8 %2787, 1
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2788, i8* %2789, align 1, !tbaa !2446
  %2790 = xor i64 4, %2774
  %2791 = xor i64 %2790, %2777
  %2792 = lshr i64 %2791, 4
  %2793 = trunc i64 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2794, i8* %2795, align 1, !tbaa !2447
  %2796 = icmp eq i64 %2777, 0
  %2797 = zext i1 %2796 to i8
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2797, i8* %2798, align 1, !tbaa !2448
  %2799 = lshr i64 %2777, 63
  %2800 = trunc i64 %2799 to i8
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2800, i8* %2801, align 1, !tbaa !2449
  %2802 = lshr i64 %2774, 63
  %2803 = xor i64 %2799, %2802
  %2804 = add nuw nsw i64 %2803, %2799
  %2805 = icmp eq i64 %2804, 2
  %2806 = zext i1 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2806, i8* %2807, align 1, !tbaa !2450
  %2808 = load i64, i64* %RBP
  %2809 = sub i64 %2808, 8
  %2810 = load i64, i64* %RCX
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 4
  store i64 %2812, i64* %PC
  %2813 = inttoptr i64 %2809 to i64*
  store i64 %2810, i64* %2813
  %2814 = load i64, i64* %RAX
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 3
  store i64 %2816, i64* %PC
  %2817 = inttoptr i64 %2814 to i32*
  %2818 = load i32, i32* %2817
  %2819 = sext i32 %2818 to i64
  store i64 %2819, i64* %RAX, align 8, !tbaa !2428
  %2820 = load i64, i64* %RAX
  %2821 = mul i64 %2820, 8
  %2822 = add i64 %2821, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2823 = load i64, i64* %PC
  %2824 = add i64 %2823, 8
  store i64 %2824, i64* %PC
  %2825 = inttoptr i64 %2822 to i64*
  %2826 = load i64, i64* %2825
  store i64 %2826, i64* %RAX, align 8, !tbaa !2428
  %2827 = load i64, i64* %RBP
  %2828 = sub i64 %2827, 40
  %2829 = load i64, i64* %RAX
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 4
  store i64 %2831, i64* %PC
  %2832 = inttoptr i64 %2828 to i64*
  store i64 %2829, i64* %2832
  %2833 = load i64, i64* %PC
  %2834 = sub i64 %2833, 1101
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 5
  store i64 %2836, i64* %PC
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2834, i64* %2837, align 8, !tbaa !2428
  br label %block_400566

block_400602:                                     ; preds = %block_400566
  %2838 = load i64, i64* %RBP
  %2839 = sub i64 %2838, 12
  %2840 = load i64, i64* %PC
  %2841 = add i64 %2840, 7
  store i64 %2841, i64* %PC
  %2842 = inttoptr i64 %2839 to i32*
  store i32 4, i32* %2842
  %2843 = load i64, i64* %RBP
  %2844 = sub i64 %2843, 12
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 3
  store i64 %2846, i64* %PC
  %2847 = inttoptr i64 %2844 to i32*
  %2848 = load i32, i32* %2847
  %2849 = zext i32 %2848 to i64
  store i64 %2849, i64* %RDI, align 8, !tbaa !2428
  %2850 = load i64, i64* %PC
  %2851 = sub i64 %2850, 284
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 5
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 5
  store i64 %2855, i64* %PC
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2857 = load i64, i64* %2856, align 8, !tbaa !2428
  %2858 = add i64 %2857, -8
  %2859 = inttoptr i64 %2858 to i64*
  store i64 %2853, i64* %2859
  store i64 %2858, i64* %2856, align 8, !tbaa !2428
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2851, i64* %2860, align 8, !tbaa !2428
  %2861 = load i64, i64* %PC
  %2862 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2861, %struct.Memory* %MEMORY.1)
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 8
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 4
  store i64 %2866, i64* %PC
  %2867 = inttoptr i64 %2864 to i64*
  %2868 = load i64, i64* %2867
  store i64 %2868, i64* %RAX, align 8, !tbaa !2428
  %2869 = load i64, i64* %RAX
  %2870 = load i64, i64* %PC
  %2871 = add i64 %2870, 3
  store i64 %2871, i64* %PC
  store i64 %2869, i64* %RCX, align 8, !tbaa !2428
  %2872 = load i64, i64* %RCX
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 4
  store i64 %2874, i64* %PC
  %2875 = add i64 4, %2872
  store i64 %2875, i64* %RCX, align 8, !tbaa !2428
  %2876 = icmp ult i64 %2875, %2872
  %2877 = icmp ult i64 %2875, 4
  %2878 = or i1 %2876, %2877
  %2879 = zext i1 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2879, i8* %2880, align 1, !tbaa !2432
  %2881 = trunc i64 %2875 to i32
  %2882 = and i32 %2881, 255
  %2883 = call i32 @llvm.ctpop.i32(i32 %2882) #16
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = xor i8 %2885, 1
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2886, i8* %2887, align 1, !tbaa !2446
  %2888 = xor i64 4, %2872
  %2889 = xor i64 %2888, %2875
  %2890 = lshr i64 %2889, 4
  %2891 = trunc i64 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2892, i8* %2893, align 1, !tbaa !2447
  %2894 = icmp eq i64 %2875, 0
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2895, i8* %2896, align 1, !tbaa !2448
  %2897 = lshr i64 %2875, 63
  %2898 = trunc i64 %2897 to i8
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2898, i8* %2899, align 1, !tbaa !2449
  %2900 = lshr i64 %2872, 63
  %2901 = xor i64 %2897, %2900
  %2902 = add nuw nsw i64 %2901, %2897
  %2903 = icmp eq i64 %2902, 2
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2904, i8* %2905, align 1, !tbaa !2450
  %2906 = load i64, i64* %RBP
  %2907 = sub i64 %2906, 8
  %2908 = load i64, i64* %RCX
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 4
  store i64 %2910, i64* %PC
  %2911 = inttoptr i64 %2907 to i64*
  store i64 %2908, i64* %2911
  %2912 = load i64, i64* %RAX
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 3
  store i64 %2914, i64* %PC
  %2915 = inttoptr i64 %2912 to i32*
  %2916 = load i32, i32* %2915
  %2917 = sext i32 %2916 to i64
  store i64 %2917, i64* %RAX, align 8, !tbaa !2428
  %2918 = load i64, i64* %RAX
  %2919 = mul i64 %2918, 8
  %2920 = add i64 %2919, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 8
  store i64 %2922, i64* %PC
  %2923 = inttoptr i64 %2920 to i64*
  %2924 = load i64, i64* %2923
  store i64 %2924, i64* %RAX, align 8, !tbaa !2428
  %2925 = load i64, i64* %RBP
  %2926 = sub i64 %2925, 40
  %2927 = load i64, i64* %RAX
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 4
  store i64 %2929, i64* %PC
  %2930 = inttoptr i64 %2926 to i64*
  store i64 %2927, i64* %2930
  %2931 = load i64, i64* %PC
  %2932 = sub i64 %2931, 201
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 5
  store i64 %2934, i64* %PC
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2932, i64* %2935, align 8, !tbaa !2428
  br label %block_400566

block_400a80:                                     ; preds = %block_400566
  %2936 = load i64, i64* %RBP
  %2937 = sub i64 %2936, 12
  %2938 = load i64, i64* %PC
  %2939 = add i64 %2938, 7
  store i64 %2939, i64* %PC
  %2940 = inttoptr i64 %2937 to i32*
  store i32 27, i32* %2940
  %2941 = load i64, i64* %RBP
  %2942 = sub i64 %2941, 12
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 3
  store i64 %2944, i64* %PC
  %2945 = inttoptr i64 %2942 to i32*
  %2946 = load i32, i32* %2945
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RDI, align 8, !tbaa !2428
  %2948 = load i64, i64* %PC
  %2949 = sub i64 %2948, 1434
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 5
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 5
  store i64 %2953, i64* %PC
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2955 = load i64, i64* %2954, align 8, !tbaa !2428
  %2956 = add i64 %2955, -8
  %2957 = inttoptr i64 %2956 to i64*
  store i64 %2951, i64* %2957
  store i64 %2956, i64* %2954, align 8, !tbaa !2428
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2949, i64* %2958, align 8, !tbaa !2428
  %2959 = load i64, i64* %PC
  %2960 = call %struct.Memory* @sub_4004f0_execute_renamed_(%struct.State* %0, i64 %2959, %struct.Memory* %MEMORY.1)
  %2961 = load i64, i64* %RBP
  %2962 = sub i64 %2961, 8
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 4
  store i64 %2964, i64* %PC
  %2965 = inttoptr i64 %2962 to i64*
  %2966 = load i64, i64* %2965
  store i64 %2966, i64* %RAX, align 8, !tbaa !2428
  %2967 = load i64, i64* %RAX
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 3
  store i64 %2969, i64* %PC
  store i64 %2967, i64* %RCX, align 8, !tbaa !2428
  %2970 = load i64, i64* %RCX
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 4
  store i64 %2972, i64* %PC
  %2973 = add i64 4, %2970
  store i64 %2973, i64* %RCX, align 8, !tbaa !2428
  %2974 = icmp ult i64 %2973, %2970
  %2975 = icmp ult i64 %2973, 4
  %2976 = or i1 %2974, %2975
  %2977 = zext i1 %2976 to i8
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2977, i8* %2978, align 1, !tbaa !2432
  %2979 = trunc i64 %2973 to i32
  %2980 = and i32 %2979, 255
  %2981 = call i32 @llvm.ctpop.i32(i32 %2980) #16
  %2982 = trunc i32 %2981 to i8
  %2983 = and i8 %2982, 1
  %2984 = xor i8 %2983, 1
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2984, i8* %2985, align 1, !tbaa !2446
  %2986 = xor i64 4, %2970
  %2987 = xor i64 %2986, %2973
  %2988 = lshr i64 %2987, 4
  %2989 = trunc i64 %2988 to i8
  %2990 = and i8 %2989, 1
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2990, i8* %2991, align 1, !tbaa !2447
  %2992 = icmp eq i64 %2973, 0
  %2993 = zext i1 %2992 to i8
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2993, i8* %2994, align 1, !tbaa !2448
  %2995 = lshr i64 %2973, 63
  %2996 = trunc i64 %2995 to i8
  %2997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2996, i8* %2997, align 1, !tbaa !2449
  %2998 = lshr i64 %2970, 63
  %2999 = xor i64 %2995, %2998
  %3000 = add nuw nsw i64 %2999, %2995
  %3001 = icmp eq i64 %3000, 2
  %3002 = zext i1 %3001 to i8
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3002, i8* %3003, align 1, !tbaa !2450
  %3004 = load i64, i64* %RBP
  %3005 = sub i64 %3004, 8
  %3006 = load i64, i64* %RCX
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 4
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3005 to i64*
  store i64 %3006, i64* %3009
  %3010 = load i64, i64* %RAX
  %3011 = load i64, i64* %PC
  %3012 = add i64 %3011, 3
  store i64 %3012, i64* %PC
  %3013 = inttoptr i64 %3010 to i32*
  %3014 = load i32, i32* %3013
  %3015 = sext i32 %3014 to i64
  store i64 %3015, i64* %RAX, align 8, !tbaa !2428
  %3016 = load i64, i64* %RAX
  %3017 = mul i64 %3016, 8
  %3018 = add i64 %3017, add (i64 ptrtoint (%seg_602020__data_type* @seg_602020__data to i64), i64 16)
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 8
  store i64 %3020, i64* %PC
  %3021 = inttoptr i64 %3018 to i64*
  %3022 = load i64, i64* %3021
  store i64 %3022, i64* %RAX, align 8, !tbaa !2428
  %3023 = load i64, i64* %RBP
  %3024 = sub i64 %3023, 40
  %3025 = load i64, i64* %RAX
  %3026 = load i64, i64* %PC
  %3027 = add i64 %3026, 4
  store i64 %3027, i64* %PC
  %3028 = inttoptr i64 %3024 to i64*
  store i64 %3025, i64* %3028
  %3029 = load i64, i64* %PC
  %3030 = sub i64 %3029, 1351
  %3031 = load i64, i64* %PC
  %3032 = add i64 %3031, 5
  store i64 %3032, i64* %PC
  %3033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3030, i64* %3033, align 8, !tbaa !2428
  br label %block_400566

; <label>:3034:                                   ; preds = %block_400566
  %3035 = load i64, i64* %PC
  %3036 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %3035, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %3036
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004b0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400cd0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400cd0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cd0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400c60___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400c60___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400c60___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400b80_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602150___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602138_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @eval() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @eval_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_eval(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003c8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003c8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cd4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cd4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @execute() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @execute_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004f0_execute(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_400c60___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_400cd0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
